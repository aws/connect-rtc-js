(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
(function (global){(function (){
"use strict";

var _toArray2 = require("babel-runtime/helpers/toArray");

var _toArray3 = _interopRequireDefault(_toArray2);

var _slicedToArray2 = require("babel-runtime/helpers/slicedToArray");

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _typeof2 = require("babel-runtime/helpers/typeof");

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

!function (e, t) {
    "object" == (typeof exports === "undefined" ? "undefined" : (0, _typeof3.default)(exports)) && "undefined" != typeof module ? t(exports) : "function" == typeof define && define.amd ? define(["exports"], t) : t((e = "undefined" != typeof globalThis ? git : e || self).dcvwebrtc = {});
}(undefined, function (e) {
    "use strict";
    var t = { major: 0, minor: 3, patch: 3, buildNumber: 0, gitHash: "2a04538bd16eaa144c6a87ab71a77e2e314f348f", versionStr: "0.3.3+build.0" },
        n = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : {};function r(e) {
        return e && e.__esModule && Object.prototype.hasOwnProperty.call(e, "default") ? e.default : e;
    }var i = { exports: {} };!function (e) {
        var t, r;t = n, r = function r() {
            var e = function e() {},
                t = "undefined",
                n = (typeof window === "undefined" ? "undefined" : (0, _typeof3.default)(window)) !== t && (0, _typeof3.default)(window.navigator) !== t && /Trident\/|MSIE /.test(window.navigator.userAgent),
                r = ["trace", "debug", "info", "warn", "error"],
                i = {},
                s = null;function a(e, t) {
                var n = e[t];if ("function" == typeof n.bind) return n.bind(e);try {
                    return Function.prototype.bind.call(n, e);
                } catch (t) {
                    return function () {
                        return Function.prototype.apply.apply(n, [e, arguments]);
                    };
                }
            }function o() {
                console.log && (console.log.apply ? console.log.apply(console, arguments) : Function.prototype.apply.apply(console.log, [console, arguments])), console.trace && console.trace();
            }function d() {
                for (var n = this.getLevel(), i = 0; i < r.length; i++) {
                    var s = r[i];this[s] = i < n ? e : this.methodFactory(s, n, this.name);
                }if (this.log = this.debug, (typeof console === "undefined" ? "undefined" : (0, _typeof3.default)(console)) === t && n < this.levels.SILENT) return "No console available for logging";
            }function c(e) {
                return function () {
                    (typeof console === "undefined" ? "undefined" : (0, _typeof3.default)(console)) !== t && (d.call(this), this[e].apply(this, arguments));
                };
            }function l(r, i, s) {
                return function (r) {
                    return "debug" === r && (r = "log"), (typeof console === "undefined" ? "undefined" : (0, _typeof3.default)(console)) !== t && ("trace" === r && n ? o : void 0 !== console[r] ? a(console, r) : void 0 !== console.log ? a(console, "log") : e);
                }(r) || c.apply(this, arguments);
            }function h(e, n) {
                var a,
                    o,
                    c,
                    h = this,
                    u = "loglevel";function _() {
                    var e;if ((typeof window === "undefined" ? "undefined" : (0, _typeof3.default)(window)) !== t && u) {
                        try {
                            e = window.localStorage[u];
                        } catch (e) {}if ((typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e)) === t) try {
                            var n = window.document.cookie,
                                r = encodeURIComponent(u),
                                i = n.indexOf(r + "=");-1 !== i && (e = /^([^;]+)/.exec(n.slice(i + r.length + 1))[1]);
                        } catch (e) {}return void 0 === h.levels[e] && (e = void 0), e;
                    }
                }function f(e) {
                    var t = e;if ("string" == typeof t && void 0 !== h.levels[t.toUpperCase()] && (t = h.levels[t.toUpperCase()]), "number" == typeof t && t >= 0 && t <= h.levels.SILENT) return t;throw new TypeError("log.setLevel() called with invalid level: " + e);
                }"string" == typeof e ? u += ":" + e : "symbol" == (typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e)) && (u = void 0), h.name = e, h.levels = { TRACE: 0, DEBUG: 1, INFO: 2, WARN: 3, ERROR: 4, SILENT: 5 }, h.methodFactory = n || l, h.getLevel = function () {
                    return null != c ? c : null != o ? o : a;
                }, h.setLevel = function (e, n) {
                    return c = f(e), !1 !== n && function (e) {
                        var n = (r[e] || "silent").toUpperCase();if ((typeof window === "undefined" ? "undefined" : (0, _typeof3.default)(window)) !== t && u) {
                            try {
                                return void (window.localStorage[u] = n);
                            } catch (e) {}try {
                                window.document.cookie = encodeURIComponent(u) + "=" + n + ";";
                            } catch (e) {}
                        }
                    }(c), d.call(h);
                }, h.setDefaultLevel = function (e) {
                    o = f(e), _() || h.setLevel(e, !1);
                }, h.resetLevel = function () {
                    c = null, function () {
                        if ((typeof window === "undefined" ? "undefined" : (0, _typeof3.default)(window)) !== t && u) {
                            try {
                                window.localStorage.removeItem(u);
                            } catch (e) {}try {
                                window.document.cookie = encodeURIComponent(u) + "=; expires=Thu, 01 Jan 1970 00:00:00 UTC";
                            } catch (e) {}
                        }
                    }(), d.call(h);
                }, h.enableAll = function (e) {
                    h.setLevel(h.levels.TRACE, e);
                }, h.disableAll = function (e) {
                    h.setLevel(h.levels.SILENT, e);
                }, h.rebuild = function () {
                    if (s !== h && (a = f(s.getLevel())), d.call(h), s === h) for (var e in i) {
                        i[e].rebuild();
                    }
                }, a = f(s ? s.getLevel() : "WARN");var E = _();null != E && (c = f(E)), d.call(h);
            }(s = new h()).getLogger = function (e) {
                if ("symbol" != (typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e)) && "string" != typeof e || "" === e) throw new TypeError("You must supply a name when creating a logger.");var t = i[e];return t || (t = i[e] = new h(e, s.methodFactory)), t;
            };var u = (typeof window === "undefined" ? "undefined" : (0, _typeof3.default)(window)) !== t ? window.log : void 0;return s.noConflict = function () {
                return (typeof window === "undefined" ? "undefined" : (0, _typeof3.default)(window)) !== t && window.log === s && (window.log = u), s;
            }, s.getLoggers = function () {
                return i;
            }, s.default = s, s;
        }, e.exports ? e.exports = r() : t.log = r();
    }(i);var s = r(i.exports);var a = Object.freeze({ HELLO_API_NAME: "hello", GETUSERMEDIA_API_NAME: "navigator.mediaDevices.getUserMedia", ENUMERATEDEVICES_API_NAME: "navigator.mediaDevices.enumerateDevices", GENERATE_CERTIFICATE_API_NAME: "RTCPeerConnection.generateCertificate", NEWRTCPEERCONNECTION_API_NAME: "new.RTCPeerConnection", PC_GET_CONFIGURATION: "pcs.getConfiguration", NEW_AUDIO_CONTEXT: "new.AudioContext", CREATE_WORKER: "new.Worker", WORKER_POST_MESSAGE: "workers.postMessage", WORKER_TERMINATE: "workers.terminate", AUDIO_CTX_CREATE_AUDIO_NODE: "audioContexts.createAudioNode", AUDIO_CTX_CLOSE: "audioContexts.close", AUDIO_NODE_CONNECT: "audioNodes.connect", AUDIO_NODE_DISCONNECT: "audioNodes.disconnect", AUDIO_PARAM_SET_VALUE_AT_TIME: "audioParams.setValueAtTime", AUDIO_PARAM_SET_RAMP_TO_VALUE_AT_TIME: "audioParams.linearRampToValueAtTime", AUDIO_NODE_SET_TYPE: "audioNodes.setType", AUDIO_NODE_START: "audioNodes.start", AUDIO_NODE_STOP: "audioNodes.stop", PC_CLOSE_API_NAME: "pcs.close", ADDSTREAM_API_NAME: "pcs.addStream", STREAM_REMOVE_TRACK: "streams.removeTrack", STREAM_ADD_TRACK: "streams.addTrack", GET_STATS_API_NAME: "pcs.getStats", CREATE_OFFER_API_NAME: "pcs.createOffer", SET_LOCAL_DESCRIPTION_API_NAME: "pcs.setLocalDescription", ADD_PC_EVENT_LISTENER: "pcs.addEventListener", ADD_TRACK_EVENT_LISTENER: "tracks.addEventListener", ADD_DTMF_EVENT_LISTENER: "dtmfs.addEventListener", ADD_WORKER_EVENT_LISTENER: "workers.addEventListener", SET_REMOTE_DESCRIPTION_API_NAME: "pcs.setRemoteDescription", ADD_ICE_CANDIDATE_API_NAME: "pcs.addIceCandidate", CREATE_MEDIA_ELEMENT_API_NAME: "document.createElement", MEDIA_ELEMENT_SET_SINK_ID_API_NAME: "mediaElements.setSinkId", MEDIA_ELEMENT_REMOVE: "mediaElements.remove", CREATE_ANSWER_API_NAME: "pcs.createAnswer", UNLOAD_EVENT_NAME: "unload", TOGGLE_TRACK_ENABLED_API_NAME: "tracks.enabled", TRACK_STOP_API_NAME: "tracks.stop", TRACK_GET_SETTINGS: "tracks.getSettings", GET_RECEIVERS_API_NAME: "pcs.getReceivers", ADD_TRACK_API_NAME: "pcs.addTrack", GET_SENDERS_API_NAME: "pcs.getSenders", GET_SENDER_STATS_API_NAME: "senders.getStats", GET_RECEIVER_STATS_API_NAME: "receivers.getStats", SET_MEDIA_SRC_OBJ_API_NAME: "mediaElements.srcObject", SET_MEDIA_HIDDEN_API_NAME: "mediaElements.hidden", SET_MEDIA_VOLUME_API_NAME: "mediaElements.volume", MEDIA_ELEMENT_PLAY_API_NAME: "mediaElements.play", MEDIA_ELEMENT_PAUSE_API_NAME: "mediaElements.pause", MEDIA_ELEMENT_MUTED: "mediaElements.muted", ADD_TRANSCEIVER_API_NAME: "pcs.addTransceiver", GET_TRANSCEIVERS_API_NAME: "pcs.getTransceivers", TRANSCEIVER_SET_CODEC_PREFS: "transceivers.setCodecPreferences", REPLACE_SENDER_TRACK_API_NAME: "senders.replaceTrack", PC_REMOVE_TRACK_API_NAME: "pcs.removeTrack", INSERT_DTMF_API_NAME: "dtmfSenders.insertDTMF", SENDER_CREATE_ENCODED_STREAMS: "senders.createEncodedStreams", RECEIVER_CREATE_ENCODED_STREAMS: "receivers.createEncodedStreams" }),
        o = Object.freeze({ SIG_STATE_CHANGE: "signalingstatechange", TRACK: "track", CONN_STATE_CHANGE: "connectionstatechange", ICE_CONN_STATE_CHANGE: "iceconnectionstatechange", ICE_GATHER_STATE_CHANGE: "icegatheringstatechange", ICE_CANDIDATE: "icecandidate", NEGOTIATION_NEEDED: "negotiationneeded" }),
        d = Object.freeze({ ENDED: "ended", MUTE: "mute", UNMUTE: "unmute" }),
        c = Object.freeze({ TONECHANGE: "tonechange" }),
        l = Object.freeze({ ERROR: "error", MESSAGE: "message", MESSAGE_ERROR: "messageerror" }),
        h = Object.freeze({ NEW: "new", AVAILABLE: "available", UNAVAILABLE: "unavailable" }),
        u = Object.freeze({ CHROME: "diilpfplcnhehakckkpmcmibmhbingnd", EDGE: "kjbbkjjiecchbcdoollhgffghfjnbhef" });for (var _ = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", f = "undefined" == typeof Uint8Array ? [] : new Uint8Array(256), E = 0; E < 64; E++) {
        f[_.charCodeAt(E)] = E;
    }var p = function p(e) {
        var t,
            n = new Uint8Array(e),
            r = n.length,
            i = "";for (t = 0; t < r; t += 3) {
            i += _[n[t] >> 2], i += _[(3 & n[t]) << 4 | n[t + 1] >> 4], i += _[(15 & n[t + 1]) << 2 | n[t + 2] >> 6], i += _[63 & n[t + 2]];
        }return r % 3 == 2 ? i = i.substring(0, i.length - 1) + "=" : r % 3 == 1 && (i = i.substring(0, i.length - 2) + "=="), i;
    },
        g = function g(e) {
        var t,
            n,
            r,
            i,
            s,
            a = .75 * e.length,
            o = e.length,
            d = 0;"=" === e[e.length - 1] && (a--, "=" === e[e.length - 2] && a--);var c = new ArrayBuffer(a),
            l = new Uint8Array(c);for (t = 0; t < o; t += 4) {
            n = f[e.charCodeAt(t)], r = f[e.charCodeAt(t + 1)], i = f[e.charCodeAt(t + 2)], s = f[e.charCodeAt(t + 3)], l[d++] = n << 2 | r >> 4, l[d++] = (15 & r) << 4 | i >> 2, l[d++] = (3 & i) << 6 | 63 & s;
        }return c;
    },
        m = { exports: {} };
    /*! pako 2.1.0 https://github.com/nodeca/pako @license (MIT AND Zlib) */
    !function (e, t) {
        !function (e) {
            function t(e) {
                var t = e.length;for (; --t >= 0;) {
                    e[t] = 0;
                }
            }var n = 256,
                r = 286,
                i = 30,
                s = 15,
                a = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0]),
                o = new Uint8Array([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13]),
                d = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7]),
                c = new Uint8Array([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]),
                l = new Array(576);t(l);var h = new Array(60);t(h);var u = new Array(512);t(u);var _ = new Array(256);t(_);var f = new Array(29);t(f);var E = new Array(i);function p(e, t, n, r, i) {
                this.static_tree = e, this.extra_bits = t, this.extra_base = n, this.elems = r, this.max_length = i, this.has_stree = e && e.length;
            }var g = void 0,
                m = void 0,
                A = void 0;function v(e, t) {
                this.dyn_tree = e, this.max_code = 0, this.stat_desc = t;
            }t(E);var w = function w(e) {
                return e < 256 ? u[e] : u[256 + (e >>> 7)];
            },
                T = function T(e, t) {
                e.pending_buf[e.pending++] = 255 & t, e.pending_buf[e.pending++] = t >>> 8 & 255;
            },
                y = function y(e, t, n) {
                e.bi_valid > 16 - n ? (e.bi_buf |= t << e.bi_valid & 65535, T(e, e.bi_buf), e.bi_buf = t >> 16 - e.bi_valid, e.bi_valid += n - 16) : (e.bi_buf |= t << e.bi_valid & 65535, e.bi_valid += n);
            },
                b = function b(e, t, n) {
                y(e, n[2 * t], n[2 * t + 1]);
            },
                R = function R(e, t) {
                var n = 0;do {
                    n |= 1 & e, e >>>= 1, n <<= 1;
                } while (--t > 0);return n >>> 1;
            },
                k = function k(e, t, n) {
                var r = new Array(16);var i = void 0,
                    a = void 0,
                    o = 0;for (i = 1; i <= s; i++) {
                    o = o + n[i - 1] << 1, r[i] = o;
                }for (a = 0; a <= t; a++) {
                    var _t2 = e[2 * a + 1];0 !== _t2 && (e[2 * a] = R(r[_t2]++, _t2));
                }
            },
                I = function I(e) {
                var t = void 0;for (t = 0; t < r; t++) {
                    e.dyn_ltree[2 * t] = 0;
                }for (t = 0; t < i; t++) {
                    e.dyn_dtree[2 * t] = 0;
                }for (t = 0; t < 19; t++) {
                    e.bl_tree[2 * t] = 0;
                }e.dyn_ltree[512] = 1, e.opt_len = e.static_len = 0, e.sym_next = e.matches = 0;
            },
                N = function N(e) {
                e.bi_valid > 8 ? T(e, e.bi_buf) : e.bi_valid > 0 && (e.pending_buf[e.pending++] = e.bi_buf), e.bi_buf = 0, e.bi_valid = 0;
            },
                S = function S(e, t, n, r) {
                var i = 2 * t,
                    s = 2 * n;return e[i] < e[s] || e[i] === e[s] && r[t] <= r[n];
            },
                C = function C(e, t, n) {
                var r = e.heap[n];var i = n << 1;for (; i <= e.heap_len && (i < e.heap_len && S(t, e.heap[i + 1], e.heap[i], e.depth) && i++, !S(t, r, e.heap[i], e.depth));) {
                    e.heap[n] = e.heap[i], n = i, i <<= 1;
                }e.heap[n] = r;
            },
                P = function P(e, t, r) {
                var i = void 0,
                    s = void 0,
                    d = void 0,
                    c = void 0,
                    l = 0;if (0 !== e.sym_next) do {
                    i = 255 & e.pending_buf[e.sym_buf + l++], i += (255 & e.pending_buf[e.sym_buf + l++]) << 8, s = e.pending_buf[e.sym_buf + l++], 0 === i ? b(e, s, t) : (d = _[s], b(e, d + n + 1, t), c = a[d], 0 !== c && (s -= f[d], y(e, s, c)), i--, d = w(i), b(e, d, r), c = o[d], 0 !== c && (i -= E[d], y(e, i, c)));
                } while (l < e.sym_next);b(e, 256, t);
            },
                D = function D(e, t) {
                var n = t.dyn_tree,
                    r = t.stat_desc.static_tree,
                    i = t.stat_desc.has_stree,
                    a = t.stat_desc.elems;var o = void 0,
                    d = void 0,
                    c = void 0,
                    l = -1;for (e.heap_len = 0, e.heap_max = 573, o = 0; o < a; o++) {
                    0 !== n[2 * o] ? (e.heap[++e.heap_len] = l = o, e.depth[o] = 0) : n[2 * o + 1] = 0;
                }for (; e.heap_len < 2;) {
                    c = e.heap[++e.heap_len] = l < 2 ? ++l : 0, n[2 * c] = 1, e.depth[c] = 0, e.opt_len--, i && (e.static_len -= r[2 * c + 1]);
                }for (t.max_code = l, o = e.heap_len >> 1; o >= 1; o--) {
                    C(e, n, o);
                }c = a;do {
                    o = e.heap[1], e.heap[1] = e.heap[e.heap_len--], C(e, n, 1), d = e.heap[1], e.heap[--e.heap_max] = o, e.heap[--e.heap_max] = d, n[2 * c] = n[2 * o] + n[2 * d], e.depth[c] = (e.depth[o] >= e.depth[d] ? e.depth[o] : e.depth[d]) + 1, n[2 * o + 1] = n[2 * d + 1] = c, e.heap[1] = c++, C(e, n, 1);
                } while (e.heap_len >= 2);e.heap[--e.heap_max] = e.heap[1], function (e, t) {
                    var n = t.dyn_tree,
                        r = t.max_code,
                        i = t.stat_desc.static_tree,
                        a = t.stat_desc.has_stree,
                        o = t.stat_desc.extra_bits,
                        d = t.stat_desc.extra_base,
                        c = t.stat_desc.max_length;var l = void 0,
                        h = void 0,
                        u = void 0,
                        _ = void 0,
                        f = void 0,
                        E = void 0,
                        p = 0;for (_ = 0; _ <= s; _++) {
                        e.bl_count[_] = 0;
                    }for (n[2 * e.heap[e.heap_max] + 1] = 0, l = e.heap_max + 1; l < 573; l++) {
                        h = e.heap[l], _ = n[2 * n[2 * h + 1] + 1] + 1, _ > c && (_ = c, p++), n[2 * h + 1] = _, h > r || (e.bl_count[_]++, f = 0, h >= d && (f = o[h - d]), E = n[2 * h], e.opt_len += E * (_ + f), a && (e.static_len += E * (i[2 * h + 1] + f)));
                    }if (0 !== p) {
                        do {
                            for (_ = c - 1; 0 === e.bl_count[_];) {
                                _--;
                            }e.bl_count[_]--, e.bl_count[_ + 1] += 2, e.bl_count[c]--, p -= 2;
                        } while (p > 0);for (_ = c; 0 !== _; _--) {
                            for (h = e.bl_count[_]; 0 !== h;) {
                                u = e.heap[--l], u > r || (n[2 * u + 1] !== _ && (e.opt_len += (_ - n[2 * u + 1]) * n[2 * u], n[2 * u + 1] = _), h--);
                            }
                        }
                    }
                }(e, t), k(n, l, e.bl_count);
            },
                x = function x(e, t, n) {
                var r = void 0,
                    i = void 0,
                    s = -1,
                    a = t[1],
                    o = 0,
                    d = 7,
                    c = 4;for (0 === a && (d = 138, c = 3), t[2 * (n + 1) + 1] = 65535, r = 0; r <= n; r++) {
                    i = a, a = t[2 * (r + 1) + 1], ++o < d && i === a || (o < c ? e.bl_tree[2 * i] += o : 0 !== i ? (i !== s && e.bl_tree[2 * i]++, e.bl_tree[32]++) : o <= 10 ? e.bl_tree[34]++ : e.bl_tree[36]++, o = 0, s = i, 0 === a ? (d = 138, c = 3) : i === a ? (d = 6, c = 3) : (d = 7, c = 4));
                }
            },
                O = function O(e, t, n) {
                var r = void 0,
                    i = void 0,
                    s = -1,
                    a = t[1],
                    o = 0,
                    d = 7,
                    c = 4;for (0 === a && (d = 138, c = 3), r = 0; r <= n; r++) {
                    if (i = a, a = t[2 * (r + 1) + 1], !(++o < d && i === a)) {
                        if (o < c) do {
                            b(e, i, e.bl_tree);
                        } while (0 != --o);else 0 !== i ? (i !== s && (b(e, i, e.bl_tree), o--), b(e, 16, e.bl_tree), y(e, o - 3, 2)) : o <= 10 ? (b(e, 17, e.bl_tree), y(e, o - 3, 3)) : (b(e, 18, e.bl_tree), y(e, o - 11, 7));o = 0, s = i, 0 === a ? (d = 138, c = 3) : i === a ? (d = 6, c = 3) : (d = 7, c = 4);
                    }
                }
            };var M = !1;var L = function L(e, t, n, r) {
                y(e, 0 + (r ? 1 : 0), 3), N(e), T(e, n), T(e, ~n), n && e.pending_buf.set(e.window.subarray(t, t + n), e.pending), e.pending += n;
            };var U = function U(e, t, r, i) {
                var s = void 0,
                    a = void 0,
                    o = 0;e.level > 0 ? (2 === e.strm.data_type && (e.strm.data_type = function (e) {
                    var t = void 0,
                        r = 4093624447;for (t = 0; t <= 31; t++, r >>>= 1) {
                        if (1 & r && 0 !== e.dyn_ltree[2 * t]) return 0;
                    }if (0 !== e.dyn_ltree[18] || 0 !== e.dyn_ltree[20] || 0 !== e.dyn_ltree[26]) return 1;for (t = 32; t < n; t++) {
                        if (0 !== e.dyn_ltree[2 * t]) return 1;
                    }return 0;
                }(e)), D(e, e.l_desc), D(e, e.d_desc), o = function (e) {
                    var t = void 0;for (x(e, e.dyn_ltree, e.l_desc.max_code), x(e, e.dyn_dtree, e.d_desc.max_code), D(e, e.bl_desc), t = 18; t >= 3 && 0 === e.bl_tree[2 * c[t] + 1]; t--) {}return e.opt_len += 3 * (t + 1) + 5 + 5 + 4, t;
                }(e), s = e.opt_len + 3 + 7 >>> 3, a = e.static_len + 3 + 7 >>> 3, a <= s && (s = a)) : s = a = r + 5, r + 4 <= s && -1 !== t ? L(e, t, r, i) : 4 === e.strategy || a === s ? (y(e, 2 + (i ? 1 : 0), 3), P(e, l, h)) : (y(e, 4 + (i ? 1 : 0), 3), function (e, t, n, r) {
                    var i = void 0;for (y(e, t - 257, 5), y(e, n - 1, 5), y(e, r - 4, 4), i = 0; i < r; i++) {
                        y(e, e.bl_tree[2 * c[i] + 1], 3);
                    }O(e, e.dyn_ltree, t - 1), O(e, e.dyn_dtree, n - 1);
                }(e, e.l_desc.max_code + 1, e.d_desc.max_code + 1, o + 1), P(e, e.dyn_ltree, e.dyn_dtree)), I(e), i && N(e);
            },
                z = { _tr_init: function _tr_init(e) {
                    M || (function () {
                        var e = void 0,
                            t = void 0,
                            n = void 0,
                            c = void 0,
                            v = void 0;var w = new Array(16);for (n = 0, c = 0; c < 28; c++) {
                            for (f[c] = n, e = 0; e < 1 << a[c]; e++) {
                                _[n++] = c;
                            }
                        }for (_[n - 1] = c, v = 0, c = 0; c < 16; c++) {
                            for (E[c] = v, e = 0; e < 1 << o[c]; e++) {
                                u[v++] = c;
                            }
                        }for (v >>= 7; c < i; c++) {
                            for (E[c] = v << 7, e = 0; e < 1 << o[c] - 7; e++) {
                                u[256 + v++] = c;
                            }
                        }for (t = 0; t <= s; t++) {
                            w[t] = 0;
                        }for (e = 0; e <= 143;) {
                            l[2 * e + 1] = 8, e++, w[8]++;
                        }for (; e <= 255;) {
                            l[2 * e + 1] = 9, e++, w[9]++;
                        }for (; e <= 279;) {
                            l[2 * e + 1] = 7, e++, w[7]++;
                        }for (; e <= 287;) {
                            l[2 * e + 1] = 8, e++, w[8]++;
                        }for (k(l, 287, w), e = 0; e < i; e++) {
                            h[2 * e + 1] = 5, h[2 * e] = R(e, 5);
                        }g = new p(l, a, 257, r, s), m = new p(h, o, 0, i, s), A = new p(new Array(0), d, 0, 19, 7);
                    }(), M = !0), e.l_desc = new v(e.dyn_ltree, g), e.d_desc = new v(e.dyn_dtree, m), e.bl_desc = new v(e.bl_tree, A), e.bi_buf = 0, e.bi_valid = 0, I(e);
                }, _tr_stored_block: L, _tr_flush_block: U, _tr_tally: function _tr_tally(e, t, r) {
                    return e.pending_buf[e.sym_buf + e.sym_next++] = t, e.pending_buf[e.sym_buf + e.sym_next++] = t >> 8, e.pending_buf[e.sym_buf + e.sym_next++] = r, 0 === t ? e.dyn_ltree[2 * r]++ : (e.matches++, t--, e.dyn_ltree[2 * (_[r] + n + 1)]++, e.dyn_dtree[2 * w(t)]++), e.sym_next === e.sym_end;
                }, _tr_align: function _tr_align(e) {
                    y(e, 2, 3), b(e, 256, l), function (e) {
                        16 === e.bi_valid ? (T(e, e.bi_buf), e.bi_buf = 0, e.bi_valid = 0) : e.bi_valid >= 8 && (e.pending_buf[e.pending++] = 255 & e.bi_buf, e.bi_buf >>= 8, e.bi_valid -= 8);
                    }(e);
                } },
                G = function G(e, t, n, r) {
                var i = 65535 & e,
                    s = e >>> 16 & 65535,
                    a = 0;for (; 0 !== n;) {
                    a = n > 2e3 ? 2e3 : n, n -= a;do {
                        i = i + t[r++] | 0, s = s + i | 0;
                    } while (--a);i %= 65521, s %= 65521;
                }return i | s << 16;
            };var V = new Uint32Array(function () {
                var e = void 0,
                    t = [];for (var n = 0; n < 256; n++) {
                    e = n;for (var r = 0; r < 8; r++) {
                        e = 1 & e ? 3988292384 ^ e >>> 1 : e >>> 1;
                    }t[n] = e;
                }return t;
            }());var q = function q(e, t, n, r) {
                var i = V,
                    s = r + n;e ^= -1;for (var _n2 = r; _n2 < s; _n2++) {
                    e = e >>> 8 ^ i[255 & (e ^ t[_n2])];
                }return ~e;
            },
                F = { 2: "need dictionary", 1: "stream end", 0: "", "-1": "file error", "-2": "stream error", "-3": "data error", "-4": "insufficient memory", "-5": "buffer error", "-6": "incompatible version" },
                H = { Z_NO_FLUSH: 0, Z_PARTIAL_FLUSH: 1, Z_SYNC_FLUSH: 2, Z_FULL_FLUSH: 3, Z_FINISH: 4, Z_BLOCK: 5, Z_TREES: 6, Z_OK: 0, Z_STREAM_END: 1, Z_NEED_DICT: 2, Z_ERRNO: -1, Z_STREAM_ERROR: -2, Z_DATA_ERROR: -3, Z_MEM_ERROR: -4, Z_BUF_ERROR: -5, Z_NO_COMPRESSION: 0, Z_BEST_SPEED: 1, Z_BEST_COMPRESSION: 9, Z_DEFAULT_COMPRESSION: -1, Z_FILTERED: 1, Z_HUFFMAN_ONLY: 2, Z_RLE: 3, Z_FIXED: 4, Z_DEFAULT_STRATEGY: 0, Z_BINARY: 0, Z_TEXT: 1, Z_UNKNOWN: 2, Z_DEFLATED: 8 };
            var j = z._tr_init,
                B = z._tr_stored_block,
                Z = z._tr_flush_block,
                W = z._tr_tally,
                K = z._tr_align,
                $ = H.Z_NO_FLUSH,
                J = H.Z_PARTIAL_FLUSH,
                Y = H.Z_FULL_FLUSH,
                X = H.Z_FINISH,
                Q = H.Z_BLOCK,
                ee = H.Z_OK,
                te = H.Z_STREAM_END,
                ne = H.Z_STREAM_ERROR,
                re = H.Z_DATA_ERROR,
                ie = H.Z_BUF_ERROR,
                se = H.Z_DEFAULT_COMPRESSION,
                ae = H.Z_FILTERED,
                oe = H.Z_HUFFMAN_ONLY,
                de = H.Z_RLE,
                ce = H.Z_FIXED,
                le = H.Z_DEFAULT_STRATEGY,
                he = H.Z_UNKNOWN,
                ue = H.Z_DEFLATED,
                _e = 258,
                fe = 262,
                Ee = 42,
                pe = 113,
                ge = 666,
                me = function me(e, t) {
                return e.msg = F[t], t;
            },
                Ae = function Ae(e) {
                return 2 * e - (e > 4 ? 9 : 0);
            },
                ve = function ve(e) {
                var t = e.length;for (; --t >= 0;) {
                    e[t] = 0;
                }
            },
                we = function we(e) {
                var t = void 0,
                    n = void 0,
                    r = void 0,
                    i = e.w_size;t = e.hash_size, r = t;do {
                    n = e.head[--r], e.head[r] = n >= i ? n - i : 0;
                } while (--t);t = i, r = t;do {
                    n = e.prev[--r], e.prev[r] = n >= i ? n - i : 0;
                } while (--t);
            };

            var Te = function Te(e, t, n) {
                return (t << e.hash_shift ^ n) & e.hash_mask;
            };var ye = function ye(e) {
                var t = e.state;var n = t.pending;n > e.avail_out && (n = e.avail_out), 0 !== n && (e.output.set(t.pending_buf.subarray(t.pending_out, t.pending_out + n), e.next_out), e.next_out += n, t.pending_out += n, e.total_out += n, e.avail_out -= n, t.pending -= n, 0 === t.pending && (t.pending_out = 0));
            },
                be = function be(e, t) {
                Z(e, e.block_start >= 0 ? e.block_start : -1, e.strstart - e.block_start, t), e.block_start = e.strstart, ye(e.strm);
            },
                Re = function Re(e, t) {
                e.pending_buf[e.pending++] = t;
            },
                ke = function ke(e, t) {
                e.pending_buf[e.pending++] = t >>> 8 & 255, e.pending_buf[e.pending++] = 255 & t;
            },
                Ie = function Ie(e, t, n, r) {
                var i = e.avail_in;return i > r && (i = r), 0 === i ? 0 : (e.avail_in -= i, t.set(e.input.subarray(e.next_in, e.next_in + i), n), 1 === e.state.wrap ? e.adler = G(e.adler, t, i, n) : 2 === e.state.wrap && (e.adler = q(e.adler, t, i, n)), e.next_in += i, e.total_in += i, i);
            },
                Ne = function Ne(e, t) {
                var n = void 0,
                    r = void 0,
                    i = e.max_chain_length,
                    s = e.strstart,
                    a = e.prev_length,
                    o = e.nice_match;var d = e.strstart > e.w_size - fe ? e.strstart - (e.w_size - fe) : 0,
                    c = e.window,
                    l = e.w_mask,
                    h = e.prev,
                    u = e.strstart + _e;var _ = c[s + a - 1],
                    f = c[s + a];e.prev_length >= e.good_match && (i >>= 2), o > e.lookahead && (o = e.lookahead);do {
                    if (n = t, c[n + a] === f && c[n + a - 1] === _ && c[n] === c[s] && c[++n] === c[s + 1]) {
                        s += 2, n++;do {} while (c[++s] === c[++n] && c[++s] === c[++n] && c[++s] === c[++n] && c[++s] === c[++n] && c[++s] === c[++n] && c[++s] === c[++n] && c[++s] === c[++n] && c[++s] === c[++n] && s < u);if (r = _e - (u - s), s = u - _e, r > a) {
                            if (e.match_start = t, a = r, r >= o) break;_ = c[s + a - 1], f = c[s + a];
                        }
                    }
                } while ((t = h[t & l]) > d && 0 != --i);return a <= e.lookahead ? a : e.lookahead;
            },
                Se = function Se(e) {
                var t = e.w_size;var n = void 0,
                    r = void 0,
                    i = void 0;do {
                    if (r = e.window_size - e.lookahead - e.strstart, e.strstart >= t + (t - fe) && (e.window.set(e.window.subarray(t, t + t - r), 0), e.match_start -= t, e.strstart -= t, e.block_start -= t, e.insert > e.strstart && (e.insert = e.strstart), we(e), r += t), 0 === e.strm.avail_in) break;if (n = Ie(e.strm, e.window, e.strstart + e.lookahead, r), e.lookahead += n, e.lookahead + e.insert >= 3) for (i = e.strstart - e.insert, e.ins_h = e.window[i], e.ins_h = Te(e, e.ins_h, e.window[i + 1]); e.insert && (e.ins_h = Te(e, e.ins_h, e.window[i + 3 - 1]), e.prev[i & e.w_mask] = e.head[e.ins_h], e.head[e.ins_h] = i, i++, e.insert--, !(e.lookahead + e.insert < 3));) {}
                } while (e.lookahead < fe && 0 !== e.strm.avail_in);
            },
                Ce = function Ce(e, t) {
                var n = void 0,
                    r = void 0,
                    i = void 0,
                    s = e.pending_buf_size - 5 > e.w_size ? e.w_size : e.pending_buf_size - 5,
                    a = 0,
                    o = e.strm.avail_in;do {
                    if (n = 65535, i = e.bi_valid + 42 >> 3, e.strm.avail_out < i) break;if (i = e.strm.avail_out - i, r = e.strstart - e.block_start, n > r + e.strm.avail_in && (n = r + e.strm.avail_in), n > i && (n = i), n < s && (0 === n && t !== X || t === $ || n !== r + e.strm.avail_in)) break;a = t === X && n === r + e.strm.avail_in ? 1 : 0, B(e, 0, 0, a), e.pending_buf[e.pending - 4] = n, e.pending_buf[e.pending - 3] = n >> 8, e.pending_buf[e.pending - 2] = ~n, e.pending_buf[e.pending - 1] = ~n >> 8, ye(e.strm), r && (r > n && (r = n), e.strm.output.set(e.window.subarray(e.block_start, e.block_start + r), e.strm.next_out), e.strm.next_out += r, e.strm.avail_out -= r, e.strm.total_out += r, e.block_start += r, n -= r), n && (Ie(e.strm, e.strm.output, e.strm.next_out, n), e.strm.next_out += n, e.strm.avail_out -= n, e.strm.total_out += n);
                } while (0 === a);return o -= e.strm.avail_in, o && (o >= e.w_size ? (e.matches = 2, e.window.set(e.strm.input.subarray(e.strm.next_in - e.w_size, e.strm.next_in), 0), e.strstart = e.w_size, e.insert = e.strstart) : (e.window_size - e.strstart <= o && (e.strstart -= e.w_size, e.window.set(e.window.subarray(e.w_size, e.w_size + e.strstart), 0), e.matches < 2 && e.matches++, e.insert > e.strstart && (e.insert = e.strstart)), e.window.set(e.strm.input.subarray(e.strm.next_in - o, e.strm.next_in), e.strstart), e.strstart += o, e.insert += o > e.w_size - e.insert ? e.w_size - e.insert : o), e.block_start = e.strstart), e.high_water < e.strstart && (e.high_water = e.strstart), a ? 4 : t !== $ && t !== X && 0 === e.strm.avail_in && e.strstart === e.block_start ? 2 : (i = e.window_size - e.strstart, e.strm.avail_in > i && e.block_start >= e.w_size && (e.block_start -= e.w_size, e.strstart -= e.w_size, e.window.set(e.window.subarray(e.w_size, e.w_size + e.strstart), 0), e.matches < 2 && e.matches++, i += e.w_size, e.insert > e.strstart && (e.insert = e.strstart)), i > e.strm.avail_in && (i = e.strm.avail_in), i && (Ie(e.strm, e.window, e.strstart, i), e.strstart += i, e.insert += i > e.w_size - e.insert ? e.w_size - e.insert : i), e.high_water < e.strstart && (e.high_water = e.strstart), i = e.bi_valid + 42 >> 3, i = e.pending_buf_size - i > 65535 ? 65535 : e.pending_buf_size - i, s = i > e.w_size ? e.w_size : i, r = e.strstart - e.block_start, (r >= s || (r || t === X) && t !== $ && 0 === e.strm.avail_in && r <= i) && (n = r > i ? i : r, a = t === X && 0 === e.strm.avail_in && n === r ? 1 : 0, B(e, e.block_start, n, a), e.block_start += n, ye(e.strm)), a ? 3 : 1);
            },
                Pe = function Pe(e, t) {
                var n = void 0,
                    r = void 0;for (;;) {
                    if (e.lookahead < fe) {
                        if (Se(e), e.lookahead < fe && t === $) return 1;if (0 === e.lookahead) break;
                    }if (n = 0, e.lookahead >= 3 && (e.ins_h = Te(e, e.ins_h, e.window[e.strstart + 3 - 1]), n = e.prev[e.strstart & e.w_mask] = e.head[e.ins_h], e.head[e.ins_h] = e.strstart), 0 !== n && e.strstart - n <= e.w_size - fe && (e.match_length = Ne(e, n)), e.match_length >= 3) {
                        if (r = W(e, e.strstart - e.match_start, e.match_length - 3), e.lookahead -= e.match_length, e.match_length <= e.max_lazy_match && e.lookahead >= 3) {
                            e.match_length--;do {
                                e.strstart++, e.ins_h = Te(e, e.ins_h, e.window[e.strstart + 3 - 1]), n = e.prev[e.strstart & e.w_mask] = e.head[e.ins_h], e.head[e.ins_h] = e.strstart;
                            } while (0 != --e.match_length);e.strstart++;
                        } else e.strstart += e.match_length, e.match_length = 0, e.ins_h = e.window[e.strstart], e.ins_h = Te(e, e.ins_h, e.window[e.strstart + 1]);
                    } else r = W(e, 0, e.window[e.strstart]), e.lookahead--, e.strstart++;if (r && (be(e, !1), 0 === e.strm.avail_out)) return 1;
                }return e.insert = e.strstart < 2 ? e.strstart : 2, t === X ? (be(e, !0), 0 === e.strm.avail_out ? 3 : 4) : e.sym_next && (be(e, !1), 0 === e.strm.avail_out) ? 1 : 2;
            },
                De = function De(e, t) {
                var n = void 0,
                    r = void 0,
                    i = void 0;for (;;) {
                    if (e.lookahead < fe) {
                        if (Se(e), e.lookahead < fe && t === $) return 1;if (0 === e.lookahead) break;
                    }if (n = 0, e.lookahead >= 3 && (e.ins_h = Te(e, e.ins_h, e.window[e.strstart + 3 - 1]), n = e.prev[e.strstart & e.w_mask] = e.head[e.ins_h], e.head[e.ins_h] = e.strstart), e.prev_length = e.match_length, e.prev_match = e.match_start, e.match_length = 2, 0 !== n && e.prev_length < e.max_lazy_match && e.strstart - n <= e.w_size - fe && (e.match_length = Ne(e, n), e.match_length <= 5 && (e.strategy === ae || 3 === e.match_length && e.strstart - e.match_start > 4096) && (e.match_length = 2)), e.prev_length >= 3 && e.match_length <= e.prev_length) {
                        i = e.strstart + e.lookahead - 3, r = W(e, e.strstart - 1 - e.prev_match, e.prev_length - 3), e.lookahead -= e.prev_length - 1, e.prev_length -= 2;do {
                            ++e.strstart <= i && (e.ins_h = Te(e, e.ins_h, e.window[e.strstart + 3 - 1]), n = e.prev[e.strstart & e.w_mask] = e.head[e.ins_h], e.head[e.ins_h] = e.strstart);
                        } while (0 != --e.prev_length);if (e.match_available = 0, e.match_length = 2, e.strstart++, r && (be(e, !1), 0 === e.strm.avail_out)) return 1;
                    } else if (e.match_available) {
                        if (r = W(e, 0, e.window[e.strstart - 1]), r && be(e, !1), e.strstart++, e.lookahead--, 0 === e.strm.avail_out) return 1;
                    } else e.match_available = 1, e.strstart++, e.lookahead--;
                }return e.match_available && (r = W(e, 0, e.window[e.strstart - 1]), e.match_available = 0), e.insert = e.strstart < 2 ? e.strstart : 2, t === X ? (be(e, !0), 0 === e.strm.avail_out ? 3 : 4) : e.sym_next && (be(e, !1), 0 === e.strm.avail_out) ? 1 : 2;
            };function xe(e, t, n, r, i) {
                this.good_length = e, this.max_lazy = t, this.nice_length = n, this.max_chain = r, this.func = i;
            }var Oe = [new xe(0, 0, 0, 0, Ce), new xe(4, 4, 8, 4, Pe), new xe(4, 5, 16, 8, Pe), new xe(4, 6, 32, 32, Pe), new xe(4, 4, 16, 16, De), new xe(8, 16, 32, 32, De), new xe(8, 16, 128, 128, De), new xe(8, 32, 128, 256, De), new xe(32, 128, 258, 1024, De), new xe(32, 258, 258, 4096, De)];function Me() {
                this.strm = null, this.status = 0, this.pending_buf = null, this.pending_buf_size = 0, this.pending_out = 0, this.pending = 0, this.wrap = 0, this.gzhead = null, this.gzindex = 0, this.method = ue, this.last_flush = -1, this.w_size = 0, this.w_bits = 0, this.w_mask = 0, this.window = null, this.window_size = 0, this.prev = null, this.head = null, this.ins_h = 0, this.hash_size = 0, this.hash_bits = 0, this.hash_mask = 0, this.hash_shift = 0, this.block_start = 0, this.match_length = 0, this.prev_match = 0, this.match_available = 0, this.strstart = 0, this.match_start = 0, this.lookahead = 0, this.prev_length = 0, this.max_chain_length = 0, this.max_lazy_match = 0, this.level = 0, this.strategy = 0, this.good_match = 0, this.nice_match = 0, this.dyn_ltree = new Uint16Array(1146), this.dyn_dtree = new Uint16Array(122), this.bl_tree = new Uint16Array(78), ve(this.dyn_ltree), ve(this.dyn_dtree), ve(this.bl_tree), this.l_desc = null, this.d_desc = null, this.bl_desc = null, this.bl_count = new Uint16Array(16), this.heap = new Uint16Array(573), ve(this.heap), this.heap_len = 0, this.heap_max = 0, this.depth = new Uint16Array(573), ve(this.depth), this.sym_buf = 0, this.lit_bufsize = 0, this.sym_next = 0, this.sym_end = 0, this.opt_len = 0, this.static_len = 0, this.matches = 0, this.insert = 0, this.bi_buf = 0, this.bi_valid = 0;
            }var Le = function Le(e) {
                if (!e) return 1;var t = e.state;return !t || t.strm !== e || t.status !== Ee && 57 !== t.status && 69 !== t.status && 73 !== t.status && 91 !== t.status && 103 !== t.status && t.status !== pe && t.status !== ge ? 1 : 0;
            },
                Ue = function Ue(e) {
                if (Le(e)) return me(e, ne);e.total_in = e.total_out = 0, e.data_type = he;var t = e.state;return t.pending = 0, t.pending_out = 0, t.wrap < 0 && (t.wrap = -t.wrap), t.status = 2 === t.wrap ? 57 : t.wrap ? Ee : pe, e.adler = 2 === t.wrap ? 0 : 1, t.last_flush = -2, j(t), ee;
            },
                ze = function ze(e) {
                var t = Ue(e);var n;return t === ee && ((n = e.state).window_size = 2 * n.w_size, ve(n.head), n.max_lazy_match = Oe[n.level].max_lazy, n.good_match = Oe[n.level].good_length, n.nice_match = Oe[n.level].nice_length, n.max_chain_length = Oe[n.level].max_chain, n.strstart = 0, n.block_start = 0, n.lookahead = 0, n.insert = 0, n.match_length = n.prev_length = 2, n.match_available = 0, n.ins_h = 0), t;
            },
                Ge = function Ge(e, t, n, r, i, s) {
                if (!e) return ne;var a = 1;if (t === se && (t = 6), r < 0 ? (a = 0, r = -r) : r > 15 && (a = 2, r -= 16), i < 1 || i > 9 || n !== ue || r < 8 || r > 15 || t < 0 || t > 9 || s < 0 || s > ce || 8 === r && 1 !== a) return me(e, ne);8 === r && (r = 9);var o = new Me();return e.state = o, o.strm = e, o.status = Ee, o.wrap = a, o.gzhead = null, o.w_bits = r, o.w_size = 1 << o.w_bits, o.w_mask = o.w_size - 1, o.hash_bits = i + 7, o.hash_size = 1 << o.hash_bits, o.hash_mask = o.hash_size - 1, o.hash_shift = ~~((o.hash_bits + 3 - 1) / 3), o.window = new Uint8Array(2 * o.w_size), o.head = new Uint16Array(o.hash_size), o.prev = new Uint16Array(o.w_size), o.lit_bufsize = 1 << i + 6, o.pending_buf_size = 4 * o.lit_bufsize, o.pending_buf = new Uint8Array(o.pending_buf_size), o.sym_buf = o.lit_bufsize, o.sym_end = 3 * (o.lit_bufsize - 1), o.level = t, o.strategy = s, o.method = n, ze(e);
            };var Ve = { deflateInit: function deflateInit(e, t) {
                    return Ge(e, t, ue, 15, 8, le);
                }, deflateInit2: Ge, deflateReset: ze, deflateResetKeep: Ue, deflateSetHeader: function deflateSetHeader(e, t) {
                    return Le(e) || 2 !== e.state.wrap ? ne : (e.state.gzhead = t, ee);
                }, deflate: function deflate(e, t) {
                    if (Le(e) || t > Q || t < 0) return e ? me(e, ne) : ne;var n = e.state;if (!e.output || 0 !== e.avail_in && !e.input || n.status === ge && t !== X) return me(e, 0 === e.avail_out ? ie : ne);var r = n.last_flush;if (n.last_flush = t, 0 !== n.pending) {
                        if (ye(e), 0 === e.avail_out) return n.last_flush = -1, ee;
                    } else if (0 === e.avail_in && Ae(t) <= Ae(r) && t !== X) return me(e, ie);if (n.status === ge && 0 !== e.avail_in) return me(e, ie);if (n.status === Ee && 0 === n.wrap && (n.status = pe), n.status === Ee) {
                        var _t3 = ue + (n.w_bits - 8 << 4) << 8,
                            _r = -1;if (_r = n.strategy >= oe || n.level < 2 ? 0 : n.level < 6 ? 1 : 6 === n.level ? 2 : 3, _t3 |= _r << 6, 0 !== n.strstart && (_t3 |= 32), _t3 += 31 - _t3 % 31, ke(n, _t3), 0 !== n.strstart && (ke(n, e.adler >>> 16), ke(n, 65535 & e.adler)), e.adler = 1, n.status = pe, ye(e), 0 !== n.pending) return n.last_flush = -1, ee;
                    }if (57 === n.status) if (e.adler = 0, Re(n, 31), Re(n, 139), Re(n, 8), n.gzhead) Re(n, (n.gzhead.text ? 1 : 0) + (n.gzhead.hcrc ? 2 : 0) + (n.gzhead.extra ? 4 : 0) + (n.gzhead.name ? 8 : 0) + (n.gzhead.comment ? 16 : 0)), Re(n, 255 & n.gzhead.time), Re(n, n.gzhead.time >> 8 & 255), Re(n, n.gzhead.time >> 16 & 255), Re(n, n.gzhead.time >> 24 & 255), Re(n, 9 === n.level ? 2 : n.strategy >= oe || n.level < 2 ? 4 : 0), Re(n, 255 & n.gzhead.os), n.gzhead.extra && n.gzhead.extra.length && (Re(n, 255 & n.gzhead.extra.length), Re(n, n.gzhead.extra.length >> 8 & 255)), n.gzhead.hcrc && (e.adler = q(e.adler, n.pending_buf, n.pending, 0)), n.gzindex = 0, n.status = 69;else if (Re(n, 0), Re(n, 0), Re(n, 0), Re(n, 0), Re(n, 0), Re(n, 9 === n.level ? 2 : n.strategy >= oe || n.level < 2 ? 4 : 0), Re(n, 3), n.status = pe, ye(e), 0 !== n.pending) return n.last_flush = -1, ee;if (69 === n.status) {
                        if (n.gzhead.extra) {
                            var _t4 = n.pending,
                                _r2 = (65535 & n.gzhead.extra.length) - n.gzindex;for (; n.pending + _r2 > n.pending_buf_size;) {
                                var _i2 = n.pending_buf_size - n.pending;if (n.pending_buf.set(n.gzhead.extra.subarray(n.gzindex, n.gzindex + _i2), n.pending), n.pending = n.pending_buf_size, n.gzhead.hcrc && n.pending > _t4 && (e.adler = q(e.adler, n.pending_buf, n.pending - _t4, _t4)), n.gzindex += _i2, ye(e), 0 !== n.pending) return n.last_flush = -1, ee;_t4 = 0, _r2 -= _i2;
                            }var _i = new Uint8Array(n.gzhead.extra);n.pending_buf.set(_i.subarray(n.gzindex, n.gzindex + _r2), n.pending), n.pending += _r2, n.gzhead.hcrc && n.pending > _t4 && (e.adler = q(e.adler, n.pending_buf, n.pending - _t4, _t4)), n.gzindex = 0;
                        }n.status = 73;
                    }if (73 === n.status) {
                        if (n.gzhead.name) {
                            var _t5 = void 0,
                                _r3 = n.pending;do {
                                if (n.pending === n.pending_buf_size) {
                                    if (n.gzhead.hcrc && n.pending > _r3 && (e.adler = q(e.adler, n.pending_buf, n.pending - _r3, _r3)), ye(e), 0 !== n.pending) return n.last_flush = -1, ee;_r3 = 0;
                                }_t5 = n.gzindex < n.gzhead.name.length ? 255 & n.gzhead.name.charCodeAt(n.gzindex++) : 0, Re(n, _t5);
                            } while (0 !== _t5);n.gzhead.hcrc && n.pending > _r3 && (e.adler = q(e.adler, n.pending_buf, n.pending - _r3, _r3)), n.gzindex = 0;
                        }n.status = 91;
                    }if (91 === n.status) {
                        if (n.gzhead.comment) {
                            var _t6 = void 0,
                                _r4 = n.pending;do {
                                if (n.pending === n.pending_buf_size) {
                                    if (n.gzhead.hcrc && n.pending > _r4 && (e.adler = q(e.adler, n.pending_buf, n.pending - _r4, _r4)), ye(e), 0 !== n.pending) return n.last_flush = -1, ee;_r4 = 0;
                                }_t6 = n.gzindex < n.gzhead.comment.length ? 255 & n.gzhead.comment.charCodeAt(n.gzindex++) : 0, Re(n, _t6);
                            } while (0 !== _t6);n.gzhead.hcrc && n.pending > _r4 && (e.adler = q(e.adler, n.pending_buf, n.pending - _r4, _r4));
                        }n.status = 103;
                    }if (103 === n.status) {
                        if (n.gzhead.hcrc) {
                            if (n.pending + 2 > n.pending_buf_size && (ye(e), 0 !== n.pending)) return n.last_flush = -1, ee;Re(n, 255 & e.adler), Re(n, e.adler >> 8 & 255), e.adler = 0;
                        }if (n.status = pe, ye(e), 0 !== n.pending) return n.last_flush = -1, ee;
                    }if (0 !== e.avail_in || 0 !== n.lookahead || t !== $ && n.status !== ge) {
                        var _r5 = 0 === n.level ? Ce(n, t) : n.strategy === oe ? function (e, t) {
                            var n = void 0;for (;;) {
                                if (0 === e.lookahead && (Se(e), 0 === e.lookahead)) {
                                    if (t === $) return 1;break;
                                }if (e.match_length = 0, n = W(e, 0, e.window[e.strstart]), e.lookahead--, e.strstart++, n && (be(e, !1), 0 === e.strm.avail_out)) return 1;
                            }return e.insert = 0, t === X ? (be(e, !0), 0 === e.strm.avail_out ? 3 : 4) : e.sym_next && (be(e, !1), 0 === e.strm.avail_out) ? 1 : 2;
                        }(n, t) : n.strategy === de ? function (e, t) {
                            var n = void 0,
                                r = void 0,
                                i = void 0,
                                s = void 0;var a = e.window;for (;;) {
                                if (e.lookahead <= _e) {
                                    if (Se(e), e.lookahead <= _e && t === $) return 1;if (0 === e.lookahead) break;
                                }if (e.match_length = 0, e.lookahead >= 3 && e.strstart > 0 && (i = e.strstart - 1, r = a[i], r === a[++i] && r === a[++i] && r === a[++i])) {
                                    s = e.strstart + _e;do {} while (r === a[++i] && r === a[++i] && r === a[++i] && r === a[++i] && r === a[++i] && r === a[++i] && r === a[++i] && r === a[++i] && i < s);e.match_length = _e - (s - i), e.match_length > e.lookahead && (e.match_length = e.lookahead);
                                }if (e.match_length >= 3 ? (n = W(e, 1, e.match_length - 3), e.lookahead -= e.match_length, e.strstart += e.match_length, e.match_length = 0) : (n = W(e, 0, e.window[e.strstart]), e.lookahead--, e.strstart++), n && (be(e, !1), 0 === e.strm.avail_out)) return 1;
                            }return e.insert = 0, t === X ? (be(e, !0), 0 === e.strm.avail_out ? 3 : 4) : e.sym_next && (be(e, !1), 0 === e.strm.avail_out) ? 1 : 2;
                        }(n, t) : Oe[n.level].func(n, t);if (3 !== _r5 && 4 !== _r5 || (n.status = ge), 1 === _r5 || 3 === _r5) return 0 === e.avail_out && (n.last_flush = -1), ee;if (2 === _r5 && (t === J ? K(n) : t !== Q && (B(n, 0, 0, !1), t === Y && (ve(n.head), 0 === n.lookahead && (n.strstart = 0, n.block_start = 0, n.insert = 0))), ye(e), 0 === e.avail_out)) return n.last_flush = -1, ee;
                    }return t !== X ? ee : n.wrap <= 0 ? te : (2 === n.wrap ? (Re(n, 255 & e.adler), Re(n, e.adler >> 8 & 255), Re(n, e.adler >> 16 & 255), Re(n, e.adler >> 24 & 255), Re(n, 255 & e.total_in), Re(n, e.total_in >> 8 & 255), Re(n, e.total_in >> 16 & 255), Re(n, e.total_in >> 24 & 255)) : (ke(n, e.adler >>> 16), ke(n, 65535 & e.adler)), ye(e), n.wrap > 0 && (n.wrap = -n.wrap), 0 !== n.pending ? ee : te);
                }, deflateEnd: function deflateEnd(e) {
                    if (Le(e)) return ne;var t = e.state.status;return e.state = null, t === pe ? me(e, re) : ee;
                }, deflateSetDictionary: function deflateSetDictionary(e, t) {
                    var n = t.length;if (Le(e)) return ne;var r = e.state,
                        i = r.wrap;if (2 === i || 1 === i && r.status !== Ee || r.lookahead) return ne;if (1 === i && (e.adler = G(e.adler, t, n, 0)), r.wrap = 0, n >= r.w_size) {
                        0 === i && (ve(r.head), r.strstart = 0, r.block_start = 0, r.insert = 0);var _e2 = new Uint8Array(r.w_size);_e2.set(t.subarray(n - r.w_size, n), 0), t = _e2, n = r.w_size;
                    }var s = e.avail_in,
                        a = e.next_in,
                        o = e.input;for (e.avail_in = n, e.next_in = 0, e.input = t, Se(r); r.lookahead >= 3;) {
                        var _e3 = r.strstart,
                            _t7 = r.lookahead - 2;do {
                            r.ins_h = Te(r, r.ins_h, r.window[_e3 + 3 - 1]), r.prev[_e3 & r.w_mask] = r.head[r.ins_h], r.head[r.ins_h] = _e3, _e3++;
                        } while (--_t7);r.strstart = _e3, r.lookahead = 2, Se(r);
                    }return r.strstart += r.lookahead, r.block_start = r.strstart, r.insert = r.lookahead, r.lookahead = 0, r.match_length = r.prev_length = 2, r.match_available = 0, e.next_in = a, e.input = o, e.avail_in = s, r.wrap = i, ee;
                }, deflateInfo: "pako deflate (from Nodeca project)" };var qe = function qe(e, t) {
                return Object.prototype.hasOwnProperty.call(e, t);
            };var Fe = function Fe(e) {
                var t = Array.prototype.slice.call(arguments, 1);for (; t.length;) {
                    var _n3 = t.shift();if (_n3) {
                        if ("object" != (typeof _n3 === "undefined" ? "undefined" : (0, _typeof3.default)(_n3))) throw new TypeError(_n3 + "must be non-object");for (var _t8 in _n3) {
                            qe(_n3, _t8) && (e[_t8] = _n3[_t8]);
                        }
                    }
                }return e;
            },
                He = function He(e) {
                var t = 0;for (var _n4 = 0, _r6 = e.length; _n4 < _r6; _n4++) {
                    t += e[_n4].length;
                }var n = new Uint8Array(t);for (var _t9 = 0, _r7 = 0, _i3 = e.length; _t9 < _i3; _t9++) {
                    var _i4 = e[_t9];n.set(_i4, _r7), _r7 += _i4.length;
                }return n;
            };var je = !0;try {
                String.fromCharCode.apply(null, new Uint8Array(1));
            } catch (e) {
                je = !1;
            }var Be = new Uint8Array(256);for (var _e4 = 0; _e4 < 256; _e4++) {
                Be[_e4] = _e4 >= 252 ? 6 : _e4 >= 248 ? 5 : _e4 >= 240 ? 4 : _e4 >= 224 ? 3 : _e4 >= 192 ? 2 : 1;
            }Be[254] = Be[254] = 1;var Ze = function Ze(e) {
                if ("function" == typeof TextEncoder && TextEncoder.prototype.encode) return new TextEncoder().encode(e);var t = void 0,
                    n = void 0,
                    r = void 0,
                    i = void 0,
                    s = void 0,
                    a = e.length,
                    o = 0;for (i = 0; i < a; i++) {
                    n = e.charCodeAt(i), 55296 == (64512 & n) && i + 1 < a && (r = e.charCodeAt(i + 1), 56320 == (64512 & r) && (n = 65536 + (n - 55296 << 10) + (r - 56320), i++)), o += n < 128 ? 1 : n < 2048 ? 2 : n < 65536 ? 3 : 4;
                }for (t = new Uint8Array(o), s = 0, i = 0; s < o; i++) {
                    n = e.charCodeAt(i), 55296 == (64512 & n) && i + 1 < a && (r = e.charCodeAt(i + 1), 56320 == (64512 & r) && (n = 65536 + (n - 55296 << 10) + (r - 56320), i++)), n < 128 ? t[s++] = n : n < 2048 ? (t[s++] = 192 | n >>> 6, t[s++] = 128 | 63 & n) : n < 65536 ? (t[s++] = 224 | n >>> 12, t[s++] = 128 | n >>> 6 & 63, t[s++] = 128 | 63 & n) : (t[s++] = 240 | n >>> 18, t[s++] = 128 | n >>> 12 & 63, t[s++] = 128 | n >>> 6 & 63, t[s++] = 128 | 63 & n);
                }return t;
            },
                We = function We(e, t) {
                var n = t || e.length;if ("function" == typeof TextDecoder && TextDecoder.prototype.decode) return new TextDecoder().decode(e.subarray(0, t));var r = void 0,
                    i = void 0;var s = new Array(2 * n);for (i = 0, r = 0; r < n;) {
                    var _t10 = e[r++];if (_t10 < 128) {
                        s[i++] = _t10;continue;
                    }var _a = Be[_t10];if (_a > 4) s[i++] = 65533, r += _a - 1;else {
                        for (_t10 &= 2 === _a ? 31 : 3 === _a ? 15 : 7; _a > 1 && r < n;) {
                            _t10 = _t10 << 6 | 63 & e[r++], _a--;
                        }_a > 1 ? s[i++] = 65533 : _t10 < 65536 ? s[i++] = _t10 : (_t10 -= 65536, s[i++] = 55296 | _t10 >> 10 & 1023, s[i++] = 56320 | 1023 & _t10);
                    }
                }return function (e, t) {
                    if (t < 65534 && e.subarray && je) return String.fromCharCode.apply(null, e.length === t ? e : e.subarray(0, t));var n = "";for (var _r8 = 0; _r8 < t; _r8++) {
                        n += String.fromCharCode(e[_r8]);
                    }return n;
                }(s, i);
            },
                Ke = function Ke(e, t) {
                (t = t || e.length) > e.length && (t = e.length);var n = t - 1;for (; n >= 0 && 128 == (192 & e[n]);) {
                    n--;
                }return n < 0 || 0 === n ? t : n + Be[e[n]] > t ? n : t;
            },
                $e = function $e() {
                this.input = null, this.next_in = 0, this.avail_in = 0, this.total_in = 0, this.output = null, this.next_out = 0, this.avail_out = 0, this.total_out = 0, this.msg = "", this.state = null, this.data_type = 2, this.adler = 0;
            };var Je = Object.prototype.toString,
                Ye = H.Z_NO_FLUSH,
                Xe = H.Z_SYNC_FLUSH,
                Qe = H.Z_FULL_FLUSH,
                et = H.Z_FINISH,
                tt = H.Z_OK,
                nt = H.Z_STREAM_END,
                rt = H.Z_DEFAULT_COMPRESSION,
                it = H.Z_DEFAULT_STRATEGY,
                st = H.Z_DEFLATED;function at(e) {
                this.options = Fe({ level: rt, method: st, chunkSize: 16384, windowBits: 15, memLevel: 8, strategy: it }, e || {});var t = this.options;t.raw && t.windowBits > 0 ? t.windowBits = -t.windowBits : t.gzip && t.windowBits > 0 && t.windowBits < 16 && (t.windowBits += 16), this.err = 0, this.msg = "", this.ended = !1, this.chunks = [], this.strm = new $e(), this.strm.avail_out = 0;var n = Ve.deflateInit2(this.strm, t.level, t.method, t.windowBits, t.memLevel, t.strategy);if (n !== tt) throw new Error(F[n]);if (t.header && Ve.deflateSetHeader(this.strm, t.header), t.dictionary) {
                    var _e5 = void 0;if (_e5 = "string" == typeof t.dictionary ? Ze(t.dictionary) : "[object ArrayBuffer]" === Je.call(t.dictionary) ? new Uint8Array(t.dictionary) : t.dictionary, n = Ve.deflateSetDictionary(this.strm, _e5), n !== tt) throw new Error(F[n]);this._dict_set = !0;
                }
            }function ot(e, t) {
                var n = new at(t);if (n.push(e, !0), n.err) throw n.msg || F[n.err];return n.result;
            }at.prototype.push = function (e, t) {
                var n = this.strm,
                    r = this.options.chunkSize;var i = void 0,
                    s = void 0;if (this.ended) return !1;for (s = t === ~~t ? t : !0 === t ? et : Ye, "string" == typeof e ? n.input = Ze(e) : "[object ArrayBuffer]" === Je.call(e) ? n.input = new Uint8Array(e) : n.input = e, n.next_in = 0, n.avail_in = n.input.length;;) {
                    if (0 === n.avail_out && (n.output = new Uint8Array(r), n.next_out = 0, n.avail_out = r), (s === Xe || s === Qe) && n.avail_out <= 6) this.onData(n.output.subarray(0, n.next_out)), n.avail_out = 0;else {
                        if (i = Ve.deflate(n, s), i === nt) return n.next_out > 0 && this.onData(n.output.subarray(0, n.next_out)), i = Ve.deflateEnd(this.strm), this.onEnd(i), this.ended = !0, i === tt;if (0 !== n.avail_out) {
                            if (s > 0 && n.next_out > 0) this.onData(n.output.subarray(0, n.next_out)), n.avail_out = 0;else if (0 === n.avail_in) break;
                        } else this.onData(n.output);
                    }
                }return !0;
            }, at.prototype.onData = function (e) {
                this.chunks.push(e);
            }, at.prototype.onEnd = function (e) {
                e === tt && (this.result = He(this.chunks)), this.chunks = [], this.err = e, this.msg = this.strm.msg;
            };var dt = { Deflate: at, deflate: ot, deflateRaw: function deflateRaw(e, t) {
                    return (t = t || {}).raw = !0, ot(e, t);
                }, gzip: function gzip(e, t) {
                    return (t = t || {}).gzip = !0, ot(e, t);
                }, constants: H };var ct = 16209;var lt = function lt(e, t) {
                var n = void 0,
                    r = void 0,
                    i = void 0,
                    s = void 0,
                    a = void 0,
                    o = void 0,
                    d = void 0,
                    c = void 0,
                    l = void 0,
                    h = void 0,
                    u = void 0,
                    _ = void 0,
                    f = void 0,
                    E = void 0,
                    p = void 0,
                    g = void 0,
                    m = void 0,
                    A = void 0,
                    v = void 0,
                    w = void 0,
                    T = void 0,
                    y = void 0,
                    b = void 0,
                    R = void 0;var k = e.state;n = e.next_in, b = e.input, r = n + (e.avail_in - 5), i = e.next_out, R = e.output, s = i - (t - e.avail_out), a = i + (e.avail_out - 257), o = k.dmax, d = k.wsize, c = k.whave, l = k.wnext, h = k.window, u = k.hold, _ = k.bits, f = k.lencode, E = k.distcode, p = (1 << k.lenbits) - 1, g = (1 << k.distbits) - 1;e: do {
                    _ < 15 && (u += b[n++] << _, _ += 8, u += b[n++] << _, _ += 8), m = f[u & p];t: for (;;) {
                        if (A = m >>> 24, u >>>= A, _ -= A, A = m >>> 16 & 255, 0 === A) R[i++] = 65535 & m;else {
                            if (!(16 & A)) {
                                if (!(64 & A)) {
                                    m = f[(65535 & m) + (u & (1 << A) - 1)];continue t;
                                }if (32 & A) {
                                    k.mode = 16191;break e;
                                }e.msg = "invalid literal/length code", k.mode = ct;break e;
                            }v = 65535 & m, A &= 15, A && (_ < A && (u += b[n++] << _, _ += 8), v += u & (1 << A) - 1, u >>>= A, _ -= A), _ < 15 && (u += b[n++] << _, _ += 8, u += b[n++] << _, _ += 8), m = E[u & g];n: for (;;) {
                                if (A = m >>> 24, u >>>= A, _ -= A, A = m >>> 16 & 255, !(16 & A)) {
                                    if (!(64 & A)) {
                                        m = E[(65535 & m) + (u & (1 << A) - 1)];continue n;
                                    }e.msg = "invalid distance code", k.mode = ct;break e;
                                }if (w = 65535 & m, A &= 15, _ < A && (u += b[n++] << _, _ += 8, _ < A && (u += b[n++] << _, _ += 8)), w += u & (1 << A) - 1, w > o) {
                                    e.msg = "invalid distance too far back", k.mode = ct;break e;
                                }if (u >>>= A, _ -= A, A = i - s, w > A) {
                                    if (A = w - A, A > c && k.sane) {
                                        e.msg = "invalid distance too far back", k.mode = ct;break e;
                                    }if (T = 0, y = h, 0 === l) {
                                        if (T += d - A, A < v) {
                                            v -= A;do {
                                                R[i++] = h[T++];
                                            } while (--A);T = i - w, y = R;
                                        }
                                    } else if (l < A) {
                                        if (T += d + l - A, A -= l, A < v) {
                                            v -= A;do {
                                                R[i++] = h[T++];
                                            } while (--A);if (T = 0, l < v) {
                                                A = l, v -= A;do {
                                                    R[i++] = h[T++];
                                                } while (--A);T = i - w, y = R;
                                            }
                                        }
                                    } else if (T += l - A, A < v) {
                                        v -= A;do {
                                            R[i++] = h[T++];
                                        } while (--A);T = i - w, y = R;
                                    }for (; v > 2;) {
                                        R[i++] = y[T++], R[i++] = y[T++], R[i++] = y[T++], v -= 3;
                                    }v && (R[i++] = y[T++], v > 1 && (R[i++] = y[T++]));
                                } else {
                                    T = i - w;do {
                                        R[i++] = R[T++], R[i++] = R[T++], R[i++] = R[T++], v -= 3;
                                    } while (v > 2);v && (R[i++] = R[T++], v > 1 && (R[i++] = R[T++]));
                                }break;
                            }
                        }break;
                    }
                } while (n < r && i < a);v = _ >> 3, n -= v, _ -= v << 3, u &= (1 << _) - 1, e.next_in = n, e.next_out = i, e.avail_in = n < r ? r - n + 5 : 5 - (n - r), e.avail_out = i < a ? a - i + 257 : 257 - (i - a), k.hold = u, k.bits = _;
            };var ht = 15,
                ut = new Uint16Array([3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0]),
                _t = new Uint8Array([16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78]),
                ft = new Uint16Array([1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577, 0, 0]),
                Et = new Uint8Array([16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 64, 64]);var pt = function pt(e, t, n, r, i, s, a, o) {
                var d = o.bits;var c = void 0,
                    l = void 0,
                    h = void 0,
                    u = void 0,
                    _ = void 0,
                    f = void 0,
                    E = 0,
                    p = 0,
                    g = 0,
                    m = 0,
                    A = 0,
                    v = 0,
                    w = 0,
                    T = 0,
                    y = 0,
                    b = 0,
                    R = null;var k = new Uint16Array(16),
                    I = new Uint16Array(16);var N = void 0,
                    S = void 0,
                    C = void 0,
                    P = null;for (E = 0; E <= ht; E++) {
                    k[E] = 0;
                }for (p = 0; p < r; p++) {
                    k[t[n + p]]++;
                }for (A = d, m = ht; m >= 1 && 0 === k[m]; m--) {}if (A > m && (A = m), 0 === m) return i[s++] = 20971520, i[s++] = 20971520, o.bits = 1, 0;for (g = 1; g < m && 0 === k[g]; g++) {}for (A < g && (A = g), T = 1, E = 1; E <= ht; E++) {
                    if (T <<= 1, T -= k[E], T < 0) return -1;
                }if (T > 0 && (0 === e || 1 !== m)) return -1;for (I[1] = 0, E = 1; E < ht; E++) {
                    I[E + 1] = I[E] + k[E];
                }for (p = 0; p < r; p++) {
                    0 !== t[n + p] && (a[I[t[n + p]]++] = p);
                }if (0 === e ? (R = P = a, f = 20) : 1 === e ? (R = ut, P = _t, f = 257) : (R = ft, P = Et, f = 0), b = 0, p = 0, E = g, _ = s, v = A, w = 0, h = -1, y = 1 << A, u = y - 1, 1 === e && y > 852 || 2 === e && y > 592) return 1;for (;;) {
                    N = E - w, a[p] + 1 < f ? (S = 0, C = a[p]) : a[p] >= f ? (S = P[a[p] - f], C = R[a[p] - f]) : (S = 96, C = 0), c = 1 << E - w, l = 1 << v, g = l;do {
                        l -= c, i[_ + (b >> w) + l] = N << 24 | S << 16 | C;
                    } while (0 !== l);for (c = 1 << E - 1; b & c;) {
                        c >>= 1;
                    }if (0 !== c ? (b &= c - 1, b += c) : b = 0, p++, 0 == --k[E]) {
                        if (E === m) break;E = t[n + a[p]];
                    }if (E > A && (b & u) !== h) {
                        for (0 === w && (w = A), _ += g, v = E - w, T = 1 << v; v + w < m && (T -= k[v + w], !(T <= 0));) {
                            v++, T <<= 1;
                        }if (y += 1 << v, 1 === e && y > 852 || 2 === e && y > 592) return 1;h = b & u, i[h] = A << 24 | v << 16 | _ - s;
                    }
                }return 0 !== b && (i[_ + b] = E - w << 24 | 64 << 16), o.bits = A, 0;
            };
            var gt = H.Z_FINISH,
                mt = H.Z_BLOCK,
                At = H.Z_TREES,
                vt = H.Z_OK,
                wt = H.Z_STREAM_END,
                Tt = H.Z_NEED_DICT,
                yt = H.Z_STREAM_ERROR,
                bt = H.Z_DATA_ERROR,
                Rt = H.Z_MEM_ERROR,
                kt = H.Z_BUF_ERROR,
                It = H.Z_DEFLATED,
                Nt = 16180,
                St = 16190,
                Ct = 16191,
                Pt = 16192,
                Dt = 16194,
                xt = 16199,
                Ot = 16200,
                Mt = 16206,
                Lt = 16209,
                Ut = function Ut(e) {
                return (e >>> 24 & 255) + (e >>> 8 & 65280) + ((65280 & e) << 8) + ((255 & e) << 24);
            };

            function zt() {
                this.strm = null, this.mode = 0, this.last = !1, this.wrap = 0, this.havedict = !1, this.flags = 0, this.dmax = 0, this.check = 0, this.total = 0, this.head = null, this.wbits = 0, this.wsize = 0, this.whave = 0, this.wnext = 0, this.window = null, this.hold = 0, this.bits = 0, this.length = 0, this.offset = 0, this.extra = 0, this.lencode = null, this.distcode = null, this.lenbits = 0, this.distbits = 0, this.ncode = 0, this.nlen = 0, this.ndist = 0, this.have = 0, this.next = null, this.lens = new Uint16Array(320), this.work = new Uint16Array(288), this.lendyn = null, this.distdyn = null, this.sane = 0, this.back = 0, this.was = 0;
            }var Gt = function Gt(e) {
                if (!e) return 1;var t = e.state;return !t || t.strm !== e || t.mode < Nt || t.mode > 16211 ? 1 : 0;
            },
                Vt = function Vt(e) {
                if (Gt(e)) return yt;var t = e.state;return e.total_in = e.total_out = t.total = 0, e.msg = "", t.wrap && (e.adler = 1 & t.wrap), t.mode = Nt, t.last = 0, t.havedict = 0, t.flags = -1, t.dmax = 32768, t.head = null, t.hold = 0, t.bits = 0, t.lencode = t.lendyn = new Int32Array(852), t.distcode = t.distdyn = new Int32Array(592), t.sane = 1, t.back = -1, vt;
            },
                qt = function qt(e) {
                if (Gt(e)) return yt;var t = e.state;return t.wsize = 0, t.whave = 0, t.wnext = 0, Vt(e);
            },
                Ft = function Ft(e, t) {
                var n = void 0;if (Gt(e)) return yt;var r = e.state;return t < 0 ? (n = 0, t = -t) : (n = 5 + (t >> 4), t < 48 && (t &= 15)), t && (t < 8 || t > 15) ? yt : (null !== r.window && r.wbits !== t && (r.window = null), r.wrap = n, r.wbits = t, qt(e));
            },
                Ht = function Ht(e, t) {
                if (!e) return yt;var n = new zt();e.state = n, n.strm = e, n.window = null, n.mode = Nt;var r = Ft(e, t);return r !== vt && (e.state = null), r;
            };var jt = void 0,
                Bt = void 0,
                Zt = !0;var Wt = function Wt(e) {
                if (Zt) {
                    jt = new Int32Array(512), Bt = new Int32Array(32);var _t11 = 0;for (; _t11 < 144;) {
                        e.lens[_t11++] = 8;
                    }for (; _t11 < 256;) {
                        e.lens[_t11++] = 9;
                    }for (; _t11 < 280;) {
                        e.lens[_t11++] = 7;
                    }for (; _t11 < 288;) {
                        e.lens[_t11++] = 8;
                    }for (pt(1, e.lens, 0, 288, jt, 0, e.work, { bits: 9 }), _t11 = 0; _t11 < 32;) {
                        e.lens[_t11++] = 5;
                    }pt(2, e.lens, 0, 32, Bt, 0, e.work, { bits: 5 }), Zt = !1;
                }e.lencode = jt, e.lenbits = 9, e.distcode = Bt, e.distbits = 5;
            },
                Kt = function Kt(e, t, n, r) {
                var i = void 0;var s = e.state;return null === s.window && (s.wsize = 1 << s.wbits, s.wnext = 0, s.whave = 0, s.window = new Uint8Array(s.wsize)), r >= s.wsize ? (s.window.set(t.subarray(n - s.wsize, n), 0), s.wnext = 0, s.whave = s.wsize) : (i = s.wsize - s.wnext, i > r && (i = r), s.window.set(t.subarray(n - r, n - r + i), s.wnext), (r -= i) ? (s.window.set(t.subarray(n - r, n), 0), s.wnext = r, s.whave = s.wsize) : (s.wnext += i, s.wnext === s.wsize && (s.wnext = 0), s.whave < s.wsize && (s.whave += i))), 0;
            };var $t = { inflateReset: qt, inflateReset2: Ft, inflateResetKeep: Vt, inflateInit: function inflateInit(e) {
                    return Ht(e, 15);
                }, inflateInit2: Ht, inflate: function inflate(e, t) {
                    var n = void 0,
                        r = void 0,
                        i = void 0,
                        s = void 0,
                        a = void 0,
                        o = void 0,
                        d = void 0,
                        c = void 0,
                        l = void 0,
                        h = void 0,
                        u = void 0,
                        _ = void 0,
                        f = void 0,
                        E = void 0,
                        p = void 0,
                        g = void 0,
                        m = void 0,
                        A = void 0,
                        v = void 0,
                        w = void 0,
                        T = void 0,
                        y = void 0,
                        b = 0;var R = new Uint8Array(4);var k = void 0,
                        I = void 0;var N = new Uint8Array([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);if (Gt(e) || !e.output || !e.input && 0 !== e.avail_in) return yt;n = e.state, n.mode === Ct && (n.mode = Pt), a = e.next_out, i = e.output, d = e.avail_out, s = e.next_in, r = e.input, o = e.avail_in, c = n.hold, l = n.bits, h = o, u = d, y = vt;e: for (;;) {
                        switch (n.mode) {case Nt:
                                if (0 === n.wrap) {
                                    n.mode = Pt;break;
                                }for (; l < 16;) {
                                    if (0 === o) break e;o--, c += r[s++] << l, l += 8;
                                }if (2 & n.wrap && 35615 === c) {
                                    0 === n.wbits && (n.wbits = 15), n.check = 0, R[0] = 255 & c, R[1] = c >>> 8 & 255, n.check = q(n.check, R, 2, 0), c = 0, l = 0, n.mode = 16181;break;
                                }if (n.head && (n.head.done = !1), !(1 & n.wrap) || (((255 & c) << 8) + (c >> 8)) % 31) {
                                    e.msg = "incorrect header check", n.mode = Lt;break;
                                }if ((15 & c) !== It) {
                                    e.msg = "unknown compression method", n.mode = Lt;break;
                                }if (c >>>= 4, l -= 4, T = 8 + (15 & c), 0 === n.wbits && (n.wbits = T), T > 15 || T > n.wbits) {
                                    e.msg = "invalid window size", n.mode = Lt;break;
                                }n.dmax = 1 << n.wbits, n.flags = 0, e.adler = n.check = 1, n.mode = 512 & c ? 16189 : Ct, c = 0, l = 0;break;case 16181:
                                for (; l < 16;) {
                                    if (0 === o) break e;o--, c += r[s++] << l, l += 8;
                                }if (n.flags = c, (255 & n.flags) !== It) {
                                    e.msg = "unknown compression method", n.mode = Lt;break;
                                }if (57344 & n.flags) {
                                    e.msg = "unknown header flags set", n.mode = Lt;break;
                                }n.head && (n.head.text = c >> 8 & 1), 512 & n.flags && 4 & n.wrap && (R[0] = 255 & c, R[1] = c >>> 8 & 255, n.check = q(n.check, R, 2, 0)), c = 0, l = 0, n.mode = 16182;case 16182:
                                for (; l < 32;) {
                                    if (0 === o) break e;o--, c += r[s++] << l, l += 8;
                                }n.head && (n.head.time = c), 512 & n.flags && 4 & n.wrap && (R[0] = 255 & c, R[1] = c >>> 8 & 255, R[2] = c >>> 16 & 255, R[3] = c >>> 24 & 255, n.check = q(n.check, R, 4, 0)), c = 0, l = 0, n.mode = 16183;case 16183:
                                for (; l < 16;) {
                                    if (0 === o) break e;o--, c += r[s++] << l, l += 8;
                                }n.head && (n.head.xflags = 255 & c, n.head.os = c >> 8), 512 & n.flags && 4 & n.wrap && (R[0] = 255 & c, R[1] = c >>> 8 & 255, n.check = q(n.check, R, 2, 0)), c = 0, l = 0, n.mode = 16184;case 16184:
                                if (1024 & n.flags) {
                                    for (; l < 16;) {
                                        if (0 === o) break e;o--, c += r[s++] << l, l += 8;
                                    }n.length = c, n.head && (n.head.extra_len = c), 512 & n.flags && 4 & n.wrap && (R[0] = 255 & c, R[1] = c >>> 8 & 255, n.check = q(n.check, R, 2, 0)), c = 0, l = 0;
                                } else n.head && (n.head.extra = null);n.mode = 16185;case 16185:
                                if (1024 & n.flags && (_ = n.length, _ > o && (_ = o), _ && (n.head && (T = n.head.extra_len - n.length, n.head.extra || (n.head.extra = new Uint8Array(n.head.extra_len)), n.head.extra.set(r.subarray(s, s + _), T)), 512 & n.flags && 4 & n.wrap && (n.check = q(n.check, r, _, s)), o -= _, s += _, n.length -= _), n.length)) break e;n.length = 0, n.mode = 16186;case 16186:
                                if (2048 & n.flags) {
                                    if (0 === o) break e;_ = 0;do {
                                        T = r[s + _++], n.head && T && n.length < 65536 && (n.head.name += String.fromCharCode(T));
                                    } while (T && _ < o);if (512 & n.flags && 4 & n.wrap && (n.check = q(n.check, r, _, s)), o -= _, s += _, T) break e;
                                } else n.head && (n.head.name = null);n.length = 0, n.mode = 16187;case 16187:
                                if (4096 & n.flags) {
                                    if (0 === o) break e;_ = 0;do {
                                        T = r[s + _++], n.head && T && n.length < 65536 && (n.head.comment += String.fromCharCode(T));
                                    } while (T && _ < o);if (512 & n.flags && 4 & n.wrap && (n.check = q(n.check, r, _, s)), o -= _, s += _, T) break e;
                                } else n.head && (n.head.comment = null);n.mode = 16188;case 16188:
                                if (512 & n.flags) {
                                    for (; l < 16;) {
                                        if (0 === o) break e;o--, c += r[s++] << l, l += 8;
                                    }if (4 & n.wrap && c !== (65535 & n.check)) {
                                        e.msg = "header crc mismatch", n.mode = Lt;break;
                                    }c = 0, l = 0;
                                }n.head && (n.head.hcrc = n.flags >> 9 & 1, n.head.done = !0), e.adler = n.check = 0, n.mode = Ct;break;case 16189:
                                for (; l < 32;) {
                                    if (0 === o) break e;o--, c += r[s++] << l, l += 8;
                                }e.adler = n.check = Ut(c), c = 0, l = 0, n.mode = St;case St:
                                if (0 === n.havedict) return e.next_out = a, e.avail_out = d, e.next_in = s, e.avail_in = o, n.hold = c, n.bits = l, Tt;e.adler = n.check = 1, n.mode = Ct;case Ct:
                                if (t === mt || t === At) break e;case Pt:
                                if (n.last) {
                                    c >>>= 7 & l, l -= 7 & l, n.mode = Mt;break;
                                }for (; l < 3;) {
                                    if (0 === o) break e;o--, c += r[s++] << l, l += 8;
                                }switch (n.last = 1 & c, c >>>= 1, l -= 1, 3 & c) {case 0:
                                        n.mode = 16193;break;case 1:
                                        if (Wt(n), n.mode = xt, t === At) {
                                            c >>>= 2, l -= 2;break e;
                                        }break;case 2:
                                        n.mode = 16196;break;case 3:
                                        e.msg = "invalid block type", n.mode = Lt;}c >>>= 2, l -= 2;break;case 16193:
                                for (c >>>= 7 & l, l -= 7 & l; l < 32;) {
                                    if (0 === o) break e;o--, c += r[s++] << l, l += 8;
                                }if ((65535 & c) != (c >>> 16 ^ 65535)) {
                                    e.msg = "invalid stored block lengths", n.mode = Lt;break;
                                }if (n.length = 65535 & c, c = 0, l = 0, n.mode = Dt, t === At) break e;case Dt:
                                n.mode = 16195;case 16195:
                                if (_ = n.length, _) {
                                    if (_ > o && (_ = o), _ > d && (_ = d), 0 === _) break e;i.set(r.subarray(s, s + _), a), o -= _, s += _, d -= _, a += _, n.length -= _;break;
                                }n.mode = Ct;break;case 16196:
                                for (; l < 14;) {
                                    if (0 === o) break e;o--, c += r[s++] << l, l += 8;
                                }if (n.nlen = 257 + (31 & c), c >>>= 5, l -= 5, n.ndist = 1 + (31 & c), c >>>= 5, l -= 5, n.ncode = 4 + (15 & c), c >>>= 4, l -= 4, n.nlen > 286 || n.ndist > 30) {
                                    e.msg = "too many length or distance symbols", n.mode = Lt;break;
                                }n.have = 0, n.mode = 16197;case 16197:
                                for (; n.have < n.ncode;) {
                                    for (; l < 3;) {
                                        if (0 === o) break e;o--, c += r[s++] << l, l += 8;
                                    }n.lens[N[n.have++]] = 7 & c, c >>>= 3, l -= 3;
                                }for (; n.have < 19;) {
                                    n.lens[N[n.have++]] = 0;
                                }if (n.lencode = n.lendyn, n.lenbits = 7, k = { bits: n.lenbits }, y = pt(0, n.lens, 0, 19, n.lencode, 0, n.work, k), n.lenbits = k.bits, y) {
                                    e.msg = "invalid code lengths set", n.mode = Lt;break;
                                }n.have = 0, n.mode = 16198;case 16198:
                                for (; n.have < n.nlen + n.ndist;) {
                                    for (; b = n.lencode[c & (1 << n.lenbits) - 1], p = b >>> 24, g = b >>> 16 & 255, m = 65535 & b, !(p <= l);) {
                                        if (0 === o) break e;o--, c += r[s++] << l, l += 8;
                                    }if (m < 16) c >>>= p, l -= p, n.lens[n.have++] = m;else {
                                        if (16 === m) {
                                            for (I = p + 2; l < I;) {
                                                if (0 === o) break e;o--, c += r[s++] << l, l += 8;
                                            }if (c >>>= p, l -= p, 0 === n.have) {
                                                e.msg = "invalid bit length repeat", n.mode = Lt;break;
                                            }T = n.lens[n.have - 1], _ = 3 + (3 & c), c >>>= 2, l -= 2;
                                        } else if (17 === m) {
                                            for (I = p + 3; l < I;) {
                                                if (0 === o) break e;o--, c += r[s++] << l, l += 8;
                                            }c >>>= p, l -= p, T = 0, _ = 3 + (7 & c), c >>>= 3, l -= 3;
                                        } else {
                                            for (I = p + 7; l < I;) {
                                                if (0 === o) break e;o--, c += r[s++] << l, l += 8;
                                            }c >>>= p, l -= p, T = 0, _ = 11 + (127 & c), c >>>= 7, l -= 7;
                                        }if (n.have + _ > n.nlen + n.ndist) {
                                            e.msg = "invalid bit length repeat", n.mode = Lt;break;
                                        }for (; _--;) {
                                            n.lens[n.have++] = T;
                                        }
                                    }
                                }if (n.mode === Lt) break;if (0 === n.lens[256]) {
                                    e.msg = "invalid code -- missing end-of-block", n.mode = Lt;break;
                                }if (n.lenbits = 9, k = { bits: n.lenbits }, y = pt(1, n.lens, 0, n.nlen, n.lencode, 0, n.work, k), n.lenbits = k.bits, y) {
                                    e.msg = "invalid literal/lengths set", n.mode = Lt;break;
                                }if (n.distbits = 6, n.distcode = n.distdyn, k = { bits: n.distbits }, y = pt(2, n.lens, n.nlen, n.ndist, n.distcode, 0, n.work, k), n.distbits = k.bits, y) {
                                    e.msg = "invalid distances set", n.mode = Lt;break;
                                }if (n.mode = xt, t === At) break e;case xt:
                                n.mode = Ot;case Ot:
                                if (o >= 6 && d >= 258) {
                                    e.next_out = a, e.avail_out = d, e.next_in = s, e.avail_in = o, n.hold = c, n.bits = l, lt(e, u), a = e.next_out, i = e.output, d = e.avail_out, s = e.next_in, r = e.input, o = e.avail_in, c = n.hold, l = n.bits, n.mode === Ct && (n.back = -1);break;
                                }for (n.back = 0; b = n.lencode[c & (1 << n.lenbits) - 1], p = b >>> 24, g = b >>> 16 & 255, m = 65535 & b, !(p <= l);) {
                                    if (0 === o) break e;o--, c += r[s++] << l, l += 8;
                                }if (g && !(240 & g)) {
                                    for (A = p, v = g, w = m; b = n.lencode[w + ((c & (1 << A + v) - 1) >> A)], p = b >>> 24, g = b >>> 16 & 255, m = 65535 & b, !(A + p <= l);) {
                                        if (0 === o) break e;o--, c += r[s++] << l, l += 8;
                                    }c >>>= A, l -= A, n.back += A;
                                }if (c >>>= p, l -= p, n.back += p, n.length = m, 0 === g) {
                                    n.mode = 16205;break;
                                }if (32 & g) {
                                    n.back = -1, n.mode = Ct;break;
                                }if (64 & g) {
                                    e.msg = "invalid literal/length code", n.mode = Lt;break;
                                }n.extra = 15 & g, n.mode = 16201;case 16201:
                                if (n.extra) {
                                    for (I = n.extra; l < I;) {
                                        if (0 === o) break e;o--, c += r[s++] << l, l += 8;
                                    }n.length += c & (1 << n.extra) - 1, c >>>= n.extra, l -= n.extra, n.back += n.extra;
                                }n.was = n.length, n.mode = 16202;case 16202:
                                for (; b = n.distcode[c & (1 << n.distbits) - 1], p = b >>> 24, g = b >>> 16 & 255, m = 65535 & b, !(p <= l);) {
                                    if (0 === o) break e;o--, c += r[s++] << l, l += 8;
                                }if (!(240 & g)) {
                                    for (A = p, v = g, w = m; b = n.distcode[w + ((c & (1 << A + v) - 1) >> A)], p = b >>> 24, g = b >>> 16 & 255, m = 65535 & b, !(A + p <= l);) {
                                        if (0 === o) break e;o--, c += r[s++] << l, l += 8;
                                    }c >>>= A, l -= A, n.back += A;
                                }if (c >>>= p, l -= p, n.back += p, 64 & g) {
                                    e.msg = "invalid distance code", n.mode = Lt;break;
                                }n.offset = m, n.extra = 15 & g, n.mode = 16203;case 16203:
                                if (n.extra) {
                                    for (I = n.extra; l < I;) {
                                        if (0 === o) break e;o--, c += r[s++] << l, l += 8;
                                    }n.offset += c & (1 << n.extra) - 1, c >>>= n.extra, l -= n.extra, n.back += n.extra;
                                }if (n.offset > n.dmax) {
                                    e.msg = "invalid distance too far back", n.mode = Lt;break;
                                }n.mode = 16204;case 16204:
                                if (0 === d) break e;if (_ = u - d, n.offset > _) {
                                    if (_ = n.offset - _, _ > n.whave && n.sane) {
                                        e.msg = "invalid distance too far back", n.mode = Lt;break;
                                    }_ > n.wnext ? (_ -= n.wnext, f = n.wsize - _) : f = n.wnext - _, _ > n.length && (_ = n.length), E = n.window;
                                } else E = i, f = a - n.offset, _ = n.length;_ > d && (_ = d), d -= _, n.length -= _;do {
                                    i[a++] = E[f++];
                                } while (--_);0 === n.length && (n.mode = Ot);break;case 16205:
                                if (0 === d) break e;i[a++] = n.length, d--, n.mode = Ot;break;case Mt:
                                if (n.wrap) {
                                    for (; l < 32;) {
                                        if (0 === o) break e;o--, c |= r[s++] << l, l += 8;
                                    }if (u -= d, e.total_out += u, n.total += u, 4 & n.wrap && u && (e.adler = n.check = n.flags ? q(n.check, i, u, a - u) : G(n.check, i, u, a - u)), u = d, 4 & n.wrap && (n.flags ? c : Ut(c)) !== n.check) {
                                        e.msg = "incorrect data check", n.mode = Lt;break;
                                    }c = 0, l = 0;
                                }n.mode = 16207;case 16207:
                                if (n.wrap && n.flags) {
                                    for (; l < 32;) {
                                        if (0 === o) break e;o--, c += r[s++] << l, l += 8;
                                    }if (4 & n.wrap && c !== (4294967295 & n.total)) {
                                        e.msg = "incorrect length check", n.mode = Lt;break;
                                    }c = 0, l = 0;
                                }n.mode = 16208;case 16208:
                                y = wt;break e;case Lt:
                                y = bt;break e;case 16210:
                                return Rt;default:
                                return yt;}
                    }return e.next_out = a, e.avail_out = d, e.next_in = s, e.avail_in = o, n.hold = c, n.bits = l, (n.wsize || u !== e.avail_out && n.mode < Lt && (n.mode < Mt || t !== gt)) && Kt(e, e.output, e.next_out, u - e.avail_out), h -= e.avail_in, u -= e.avail_out, e.total_in += h, e.total_out += u, n.total += u, 4 & n.wrap && u && (e.adler = n.check = n.flags ? q(n.check, i, u, e.next_out - u) : G(n.check, i, u, e.next_out - u)), e.data_type = n.bits + (n.last ? 64 : 0) + (n.mode === Ct ? 128 : 0) + (n.mode === xt || n.mode === Dt ? 256 : 0), (0 === h && 0 === u || t === gt) && y === vt && (y = kt), y;
                }, inflateEnd: function inflateEnd(e) {
                    if (Gt(e)) return yt;var t = e.state;return t.window && (t.window = null), e.state = null, vt;
                }, inflateGetHeader: function inflateGetHeader(e, t) {
                    if (Gt(e)) return yt;var n = e.state;return 2 & n.wrap ? (n.head = t, t.done = !1, vt) : yt;
                }, inflateSetDictionary: function inflateSetDictionary(e, t) {
                    var n = t.length;var r = void 0,
                        i = void 0,
                        s = void 0;return Gt(e) ? yt : (r = e.state, 0 !== r.wrap && r.mode !== St ? yt : r.mode === St && (i = 1, i = G(i, t, n, 0), i !== r.check) ? bt : (s = Kt(e, t, n, n), s ? (r.mode = 16210, Rt) : (r.havedict = 1, vt)));
                }, inflateInfo: "pako inflate (from Nodeca project)" },
                Jt = function Jt() {
                this.text = 0, this.time = 0, this.xflags = 0, this.os = 0, this.extra = null, this.extra_len = 0, this.name = "", this.comment = "", this.hcrc = 0, this.done = !1;
            };var Yt = Object.prototype.toString,
                Xt = H.Z_NO_FLUSH,
                Qt = H.Z_FINISH,
                en = H.Z_OK,
                tn = H.Z_STREAM_END,
                nn = H.Z_NEED_DICT,
                rn = H.Z_STREAM_ERROR,
                sn = H.Z_DATA_ERROR,
                an = H.Z_MEM_ERROR;function on(e) {
                this.options = Fe({ chunkSize: 65536, windowBits: 15, to: "" }, e || {});var t = this.options;t.raw && t.windowBits >= 0 && t.windowBits < 16 && (t.windowBits = -t.windowBits, 0 === t.windowBits && (t.windowBits = -15)), !(t.windowBits >= 0 && t.windowBits < 16) || e && e.windowBits || (t.windowBits += 32), t.windowBits > 15 && t.windowBits < 48 && !(15 & t.windowBits) && (t.windowBits |= 15), this.err = 0, this.msg = "", this.ended = !1, this.chunks = [], this.strm = new $e(), this.strm.avail_out = 0;var n = $t.inflateInit2(this.strm, t.windowBits);if (n !== en) throw new Error(F[n]);if (this.header = new Jt(), $t.inflateGetHeader(this.strm, this.header), t.dictionary && ("string" == typeof t.dictionary ? t.dictionary = Ze(t.dictionary) : "[object ArrayBuffer]" === Yt.call(t.dictionary) && (t.dictionary = new Uint8Array(t.dictionary)), t.raw && (n = $t.inflateSetDictionary(this.strm, t.dictionary), n !== en))) throw new Error(F[n]);
            }function dn(e, t) {
                var n = new on(t);if (n.push(e), n.err) throw n.msg || F[n.err];return n.result;
            }on.prototype.push = function (e, t) {
                var n = this.strm,
                    r = this.options.chunkSize,
                    i = this.options.dictionary;var s = void 0,
                    a = void 0,
                    o = void 0;if (this.ended) return !1;for (a = t === ~~t ? t : !0 === t ? Qt : Xt, "[object ArrayBuffer]" === Yt.call(e) ? n.input = new Uint8Array(e) : n.input = e, n.next_in = 0, n.avail_in = n.input.length;;) {
                    for (0 === n.avail_out && (n.output = new Uint8Array(r), n.next_out = 0, n.avail_out = r), s = $t.inflate(n, a), s === nn && i && (s = $t.inflateSetDictionary(n, i), s === en ? s = $t.inflate(n, a) : s === sn && (s = nn)); n.avail_in > 0 && s === tn && n.state.wrap > 0 && 0 !== e[n.next_in];) {
                        $t.inflateReset(n), s = $t.inflate(n, a);
                    }switch (s) {case rn:case sn:case nn:case an:
                            return this.onEnd(s), this.ended = !0, !1;}if (o = n.avail_out, n.next_out && (0 === n.avail_out || s === tn)) if ("string" === this.options.to) {
                        var _e6 = Ke(n.output, n.next_out),
                            _t12 = n.next_out - _e6,
                            _i5 = We(n.output, _e6);n.next_out = _t12, n.avail_out = r - _t12, _t12 && n.output.set(n.output.subarray(_e6, _e6 + _t12), 0), this.onData(_i5);
                    } else this.onData(n.output.length === n.next_out ? n.output : n.output.subarray(0, n.next_out));if (s !== en || 0 !== o) {
                        if (s === tn) return s = $t.inflateEnd(this.strm), this.onEnd(s), this.ended = !0, !0;if (0 === n.avail_in) break;
                    }
                }return !0;
            }, on.prototype.onData = function (e) {
                this.chunks.push(e);
            }, on.prototype.onEnd = function (e) {
                e === en && ("string" === this.options.to ? this.result = this.chunks.join("") : this.result = He(this.chunks)), this.chunks = [], this.err = e, this.msg = this.strm.msg;
            };var cn = { Inflate: on, inflate: dn, inflateRaw: function inflateRaw(e, t) {
                    return (t = t || {}).raw = !0, dn(e, t);
                }, ungzip: dn, constants: H };var ln = dt.Deflate,
                hn = dt.deflate,
                un = dt.deflateRaw,
                _n = dt.gzip,
                fn = cn.Inflate,
                En = cn.inflate,
                pn = cn.inflateRaw,
                gn = cn.ungzip;
            var mn = ln,
                An = hn,
                vn = un,
                wn = _n,
                Tn = fn,
                yn = En,
                bn = pn,
                Rn = gn,
                kn = H,
                In = { Deflate: mn, deflate: An, deflateRaw: vn, gzip: wn, Inflate: Tn, inflate: yn, inflateRaw: bn, ungzip: Rn, constants: kn };e.Deflate = mn, e.Inflate = Tn, e.constants = kn, e.default = In, e.deflate = An, e.deflateRaw = vn, e.gzip = wn, e.inflate = yn, e.inflateRaw = bn, e.ungzip = Rn, Object.defineProperty(e, "__esModule", { value: !0 });
        }(t);
    }(0, m.exports);var A = r(m.exports);function v() {
        return function () {
            var e = window.navigator.userAgent.toLowerCase();return e.indexOf("edg/") > -1 || e.indexOf("edge") > -1;
        }() ? u.EDGE : u.CHROME;
    }
    var w = function () {
        function w(e) {
            (0, _classCallCheck3.default)(this, w);
            if (this.version = t, this.config = e, this.logger = e.logger, this.clientInfo = null, this.certParams = { name: "ECDSA", namedCurve: "P-256" }, this.extensionId = v(), this.pcProxies = new Map(), this.audioContextProxies = new Map(), this.audioNodeProxies = new Map(), this.workerProxies = new Map(), this.streamProxies = new Map(), this.eventListeners = new Map(), this.mediaElementProxies = new Map(), this.transceiverProxies = new Map(), this.senderProxies = new Map(), this.dtmfProxies = new Map(), this.receiverProxies = new Map(), this.trackProxies = new Map(), this.overridenApis = new Map(), this.decoder = new TextDecoder("utf-8"), this.logger.debug("Checking for chrome extension.  Chrome runtime: " + chrome.runtime), void 0 === chrome.runtime) throw new Error("Chrome runtime not available.  DCV WebRTC chrome extension may not be active.");this.overridenApis.set("navigator.mediaDevices.getUserMedia", navigator.mediaDevices.getUserMedia), this.overridenApis.set("navigator.mediaDevices.enumerateDevices", navigator.mediaDevices.enumerateDevices), this.overridenApis.set("window.RTCPeerConnection", window.RTCPeerConnection), this.overridenApis.set("window.RTCPeerConnection.generateCertificate", window.RTCPeerConnection.generateCertificate), this.overridenApis.set("window.AudioContext", window.AudioContext), this.overridenApis.set("window.Worker", window.Worker), this.status = h.NEW, this.statusChangeEventListeners = [], this.lastHeartbeat = Date.now(), this.heartbeatTimeout = null, this.heartbeatTimeoutMs = 1e4, this.heartbeatIntervalPeriodMs = 1e3, this.heartbeatInterval = null;
        }

        (0, _createClass3.default)(w, [{
            key: "clearHeartbeatInterval",
            value: function clearHeartbeatInterval() {
                this.heartbeatTimeout && (clearTimeout(this.heartbeatTimeout), this.heartbeatTimeout = null), this.hearbeatInterval && (clearInterval(this.hearbeatInterval), this.hearbeatInterval = null);
            }
        }, {
            key: "resetHeartbeat",
            value: function resetHeartbeat(e) {
                var t = this;this.clearHeartbeatInterval(), this.heartbeatTimeoutMs = e && e.heartbeatTimeoutMs ? e.heartbeatTimeoutMs : this.heartbeatTimeoutMs, this.heartbeatIntervalPeriodMs = e && e.heartbeatIntervalPeriodMs ? e.heartbeatIntervalPeriodMs : this.heartbeatIntervalPeriodMs, this.hearbeatInterval = setInterval((0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
                    return _regenerator2.default.wrap(function _callee$(_context) {
                        while (1) {
                            switch (_context.prev = _context.next) {
                                case 0:
                                    t.heartbeatTimeout || (t.heartbeatTimeout = setTimeout(function () {
                                        t.logger.debug("heartbeatTimeout reached, current status: " + t.status + ", last hb: " + (Date.now() - t.lastHeartbeat) + "ms ago."), t.status !== h.UNAVAILABLE && (t.status = h.UNAVAILABLE, t.statusChangeEventListeners.forEach(function (e) {
                                            e({ status: t.status, data: t.clientInfo, lastHeartbeat: t.lastHeartbeat });
                                        }));
                                    }, t.heartbeatTimeoutMs));_context.prev = 1;
                                    _context.next = 4;
                                    return t.sendApiRequest(a.HELLO_API_NAME, []);

                                case 4:
                                    t.clientInfo = _context.sent;

                                    if (t.clientInfo) {
                                        _context.next = 7;
                                        break;
                                    }

                                    throw new Error("Failed to get clientInfo.");

                                case 7:
                                    t.heartbeatTimeout && (clearTimeout(t.heartbeatTimeout), t.heartbeatTimeout = null), t.status !== h.AVAILABLE && (t.status = h.AVAILABLE, t.statusChangeEventListeners.forEach(function (e) {
                                        e({ status: t.status, data: t.clientInfo });
                                    })), t.lastHeartbeat = Date.now();_context.next = 13;
                                    break;

                                case 10:
                                    _context.prev = 10;
                                    _context.t0 = _context["catch"](1);
                                    t.logger.debug("Heartbeat ping failed.  Last heartbeat received " + (Date.now() - t.lastHeartbeat) + "ms ago.");
                                case 13:
                                case "end":
                                    return _context.stop();
                            }
                        }
                    }, _callee, this, [[1, 10]]);
                })), this.heartbeatIntervalPeriodMs);
            }
        }, {
            key: "makeMediaDeviceInfoProxies",
            value: function makeMediaDeviceInfoProxies(e) {
                return e.forEach(function (e) {
                    e.toJSON = function () {
                        return e;
                    };
                }), e;
            }
        }, {
            key: "makeTrackProxy",
            value: function makeTrackProxy(e) {
                var t = this;if (this.trackProxies.has(e.id)) {
                    var _t13 = this.trackProxies.get(e.id);return Object.assign(_t13, e), _t13;
                }return this.trackProxies.set(e.id, e), e.pendingEvents = new Map(), e.stop = function () {
                    t.sendApiRequest(a.TRACK_STOP_API_NAME, [e.id]);
                }, e.getSettings = function () {
                    return t.sendApiRequest(a.TRACK_GET_SETTINGS, [e.id]).then(function (t) {
                        t && (e.settings = t);
                    }), e.settings;
                }, e.addEventListener = function (n, r, i) {
                    t.logger.debug("Setting ended event listener via addEventListener."), t.addTrackEventListener(e.id, n, r, i);
                }, e.removeEventListener = function (n, r) {
                    t.removeEventListener(e.id, n, r);
                }, Object.defineProperty(e, "onended", { set: function set(n) {
                        t.addTrackEventListener(e.id, d.ENDED, n);
                    }, get: function get() {
                        return null;
                    } }), Object.defineProperty(e, "onmute", { set: function set(n) {
                        t.addTrackEventListener(e.id, d.MUTE, n);
                    }, get: function get() {
                        return null;
                    } }), Object.defineProperty(e, "onunmute", { set: function set(n) {
                        t.addTrackEventListener(e.id, d.UNMUTE, n);
                    }, get: function get() {
                        return null;
                    } }), e.trackEnabled = e.enabled, Object.defineProperty(e, "enabled", { set: function set(n) {
                        e.trackEnabled = n, t.sendApiRequest(a.TOGGLE_TRACK_ENABLED_API_NAME, [e.id, n]).then(function (n) {
                            n && (t.trackProxies.get(e.id).trackEnabled = n.enabled);
                        });
                    }, get: function get() {
                        return e.trackEnabled;
                    } }), this.preRegisterEvents(d, e, this.addTrackEventListener), e;
            }
        }, {
            key: "makeStreamProxy",
            value: function makeStreamProxy(e) {
                var t = this;this.streamProxies.set(e.id, e);var n = new MediaStream();n.type = "proxy", n.proxy = e;var r = e.tracks ? e.tracks.map(function (e) {
                    return t.makeTrackProxy(e);
                }) : [];return e.tracks = r, n.getTracks = function () {
                    return r;
                }, n.getAudioTracks = function () {
                    return r.filter(function (e) {
                        return "audio" === e.kind;
                    });
                }, n.getVideoTracks = function () {
                    return r.filter(function (e) {
                        return "video" === e.kind;
                    });
                }, n.getTrackById = function (e) {
                    return r.find(function (t) {
                        return t.id === e;
                    });
                }, n.createMediaElement = function (e) {
                    return t.createMediaElement(e);
                }, n.addTrack = function (n) {
                    t.sendApiRequest(a.STREAM_ADD_TRACK, [e.id, n.id]);
                }, n.removeTrack = function (n) {
                    t.sendApiRequest(a.STREAM_REMOVE_TRACK, [e.id, n.id]);
                }, n;
            }
        }, {
            key: "updateTransceiverProxy",
            value: function updateTransceiverProxy(e) {
                var t = this.transceiverProxies.get(e.id);return t || (t = {}), Object.assign(t, e), e.receiver && "proxy" === e.receiver.type && (t.receiver = this.updateReceiverProxy(e.receiver)), e.sender && "proxy" === e.sender.type && (t.sender = this.updateSenderProxy(e.sender)), this.transceiverProxies.set(e.id, t), t;
            }
        }, {
            key: "updatePCSenders",
            value: function updatePCSenders(e, t) {
                var n = this;var r = t.map(function (e) {
                    return n.updateSenderProxy(e);
                });this.pcProxies.get(e).senders = r;
            }
        }, {
            key: "updatePCReceivers",
            value: function updatePCReceivers(e, t) {
                var n = this;var r = t.map(function (e) {
                    return n.updateReceiverProxy(e);
                });this.pcProxies.get(e).receivers = r;
            }
        }, {
            key: "updatePCTransceivers",
            value: function updatePCTransceivers(e, t) {
                var n = this;var r = t;r.forEach(function (e) {
                    n.updateTransceiverProxy(e);
                }), this.pcProxies.get(e).transceivers = r;
            }
        }, {
            key: "isValidApi",
            value: function isValidApi(e) {
                var t = !1;for (var _n5 in a) {
                    if (a[_n5] === e) {
                        t = !0;break;
                    }
                }return t;
            }
        }, {
            key: "sendApiRequest",
            value: function () {
                var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(e, t) {
                    var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : crypto.randomUUID();

                    var _r9, _i6, _s, _a2, _o, _d, _e7, _e8, _t14, _e9, _e10;

                    return _regenerator2.default.wrap(function _callee2$(_context2) {
                        while (1) {
                            switch (_context2.prev = _context2.next) {
                                case 0:
                                    this.logger.debug(e, t, n);_context2.prev = 1;
                                    _r9 = { api: e, args: t };
                                    _i6 = A.deflateRaw(JSON.stringify(_r9));
                                    _s = { requestId: n, message: _i6, type: "request" };
                                    this.logger.debug("Sending request:", JSON.stringify(_s));_context2.next = 8;
                                    return chrome.runtime.sendMessage(this.extensionId, _s);

                                case 8:
                                    _a2 = _context2.sent;
                                    _i6 = _a2.message;_o = A.inflateRaw(_i6), _d = this.decoder.decode(_o);

                                    if (!(_a2.message = JSON.parse(_d), this.logger.debug("Received response: ", JSON.stringify(_a2)), !_a2 || !_a2.message || !_a2.type)) {
                                        _context2.next = 14;
                                        break;
                                    }

                                    _e7 = "Received empty message or type, extensionResponse: " + JSON.stringify(_a2) + ", request: " + JSON.stringify(_s) + ", message: " + JSON.stringify(_r9);
                                    return _context2.abrupt("return", (this.logger.warn(_e7), null));

                                case 14:
                                    if (!("error" === _a2.type)) {
                                        _context2.next = 19;
                                        break;
                                    }

                                    _e8 = "Received error: " + JSON.stringify(_a2) + ", for request: " + JSON.stringify(_s) + ", message: " + JSON.stringify(_r9), _t14 = null;

                                    if (!(this.logger.debug(_e8), _a2.message.error && _a2.message.error.message && _a2.message.error && _a2.message.error.name)) {
                                        _context2.next = 18;
                                        break;
                                    }

                                    throw _e8 = _a2.message.error.message, _t14 = _a2.message.error.name, new DOMException(_e8, _t14);

                                case 18:
                                    return _context2.abrupt("return", null);

                                case 19:
                                    if (!("response" !== _a2.type && "event" !== _a2.type && "error" !== _a2.type)) {
                                        _context2.next = 22;
                                        break;
                                    }

                                    _e9 = "Received invalid message type, type: " + JSON.stringify(_a2.type) + ", event: " + JSON.stringify(_a2) + ", request: " + JSON.stringify(_s) + ", message: " + JSON.stringify(_r9);
                                    return _context2.abrupt("return", (this.logger.warn(_e9), null));

                                case 22:
                                    if (!(_a2.message.api && !this.isValidApi(_a2.message.api))) {
                                        _context2.next = 25;
                                        break;
                                    }

                                    _e10 = "Received invalid message api, event: " + JSON.stringify(_a2) + ", request: " + JSON.stringify(_s) + ", message: " + JSON.stringify(_r9);
                                    return _context2.abrupt("return", (this.logger.warn(_e10), null));

                                case 25:
                                    return _context2.abrupt("return", "event" === _a2.type ? _a2.message.event : _a2.message.response);

                                case 28:
                                    _context2.prev = 28;
                                    _context2.t0 = _context2["catch"](1);
                                    return _context2.abrupt("return", (this.logger.warn("Failed to send api request: api: " + e + ", args: " + t + ", requestId: " + n, _context2.t0), null));

                                case 31:
                                case "end":
                                    return _context2.stop();
                            }
                        }
                    }, _callee2, this, [[1, 28]]);
                }));

                function sendApiRequest(_x2, _x3) {
                    return _ref2.apply(this, arguments);
                }

                return sendApiRequest;
            }()
        }, {
            key: "getUserMediaInternal",
            value: function () {
                var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(e) {
                    var t;
                    return _regenerator2.default.wrap(function _callee3$(_context3) {
                        while (1) {
                            switch (_context3.prev = _context3.next) {
                                case 0:
                                    _context3.next = 2;
                                    return this.sendApiRequest(a.GETUSERMEDIA_API_NAME, [e]);

                                case 2:
                                    t = _context3.sent;
                                    return _context3.abrupt("return", t ? this.makeStreamProxy(t) : null);

                                case 4:
                                case "end":
                                    return _context3.stop();
                            }
                        }
                    }, _callee3, this);
                }));

                function getUserMediaInternal(_x4) {
                    return _ref3.apply(this, arguments);
                }

                return getUserMediaInternal;
            }()
        }, {
            key: "getOverridenApi",
            value: function getOverridenApi(e) {
                return this.overridenApis.get(e);
            }
        }, {
            key: "getUserMedia",
            value: function () {
                var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(e) {
                    var t, _e11, _n6, _e12, _e13, n;

                    return _regenerator2.default.wrap(function _callee4$(_context4) {
                        while (1) {
                            switch (_context4.prev = _context4.next) {
                                case 0:
                                    t = Object.freeze(e);

                                    if (!(t.audio && t.video)) {
                                        _context4.next = 14;
                                        break;
                                    }

                                    _context4.next = 4;
                                    return navigator.permissions.query({ name: "microphone" });

                                case 4:
                                    _e11 = _context4.sent;
                                    _context4.next = 7;
                                    return navigator.permissions.query({ name: "camera" });

                                case 7:
                                    _n6 = _context4.sent;

                                    if (!(_e11 && "granted" === _e11.state && _n6 && "granted" === _n6.state)) {
                                        _context4.next = 12;
                                        break;
                                    }

                                    _context4.next = 11;
                                    return this.getUserMediaInternal(t);

                                case 11:
                                    return _context4.abrupt("return", _context4.sent);

                                case 12:
                                    _context4.next = 32;
                                    break;

                                case 14:
                                    if (!t.audio) {
                                        _context4.next = 24;
                                        break;
                                    }

                                    _context4.next = 17;
                                    return navigator.permissions.query({ name: "microphone" });

                                case 17:
                                    _e12 = _context4.sent;

                                    if (!(_e12 && "granted" === _e12.state)) {
                                        _context4.next = 22;
                                        break;
                                    }

                                    _context4.next = 21;
                                    return this.getUserMediaInternal(t);

                                case 21:
                                    return _context4.abrupt("return", _context4.sent);

                                case 22:
                                    _context4.next = 32;
                                    break;

                                case 24:
                                    if (!t.video) {
                                        _context4.next = 32;
                                        break;
                                    }

                                    _context4.next = 27;
                                    return navigator.permissions.query({ name: "camera" });

                                case 27:
                                    _e13 = _context4.sent;

                                    if (!(_e13 && "granted" === _e13.state)) {
                                        _context4.next = 32;
                                        break;
                                    }

                                    _context4.next = 31;
                                    return this.getUserMediaInternal(t);

                                case 31:
                                    return _context4.abrupt("return", _context4.sent);

                                case 32:
                                    n = [];
                                    _context4.t0 = t.video;

                                    if (!_context4.t0) {
                                        _context4.next = 39;
                                        break;
                                    }

                                    _context4.next = 37;
                                    return this.getOverridenApi("navigator.mediaDevices.enumerateDevices").apply(navigator.mediaDevices);

                                case 37:
                                    n = _context4.sent;
                                    n = n.filter(function (e) {
                                        return e.kind && e.kind.indexOf("video") > -1;
                                    });

                                case 39:
                                    if (!(t.audio && !t.video || t.video && n.length > 0)) {
                                        _context4.next = 44;
                                        break;
                                    }

                                    _context4.next = 42;
                                    return this.getOverridenApi("navigator.mediaDevices.getUserMedia").apply(navigator.mediaDevices, [t]);

                                case 42:
                                    _context4.t1 = function (e) {
                                        e.stop();
                                    };

                                    _context4.sent.getTracks().forEach(_context4.t1);

                                case 44:
                                    _context4.next = 46;
                                    return this.getUserMediaInternal(t);

                                case 46:
                                    return _context4.abrupt("return", _context4.sent);

                                case 47:
                                case "end":
                                    return _context4.stop();
                            }
                        }
                    }, _callee4, this);
                }));

                function getUserMedia(_x5) {
                    return _ref4.apply(this, arguments);
                }

                return getUserMedia;
            }()
        }, {
            key: "enumerateDevices",
            value: function () {
                var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5() {
                    var e;
                    return _regenerator2.default.wrap(function _callee5$(_context5) {
                        while (1) {
                            switch (_context5.prev = _context5.next) {
                                case 0:
                                    _context5.next = 2;
                                    return this.sendApiRequest(a.ENUMERATEDEVICES_API_NAME, []);

                                case 2:
                                    e = _context5.sent;
                                    return _context5.abrupt("return", e ? this.makeMediaDeviceInfoProxies(e) : null);

                                case 4:
                                case "end":
                                    return _context5.stop();
                            }
                        }
                    }, _callee5, this);
                }));

                function enumerateDevices() {
                    return _ref5.apply(this, arguments);
                }

                return enumerateDevices;
            }()
        }, {
            key: "getVersion",
            value: function getVersion() {
                return t;
            }
        }, {
            key: "makeReceiverProxy",
            value: function makeReceiverProxy(e) {
                var t = this;return e.track && (e.track = this.makeTrackProxy(e.track)), e.getSynchronizationSources = function () {
                    return e.synchronizationSources;
                }, e.getStats = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6() {
                    var n, r;
                    return _regenerator2.default.wrap(function _callee6$(_context6) {
                        while (1) {
                            switch (_context6.prev = _context6.next) {
                                case 0:
                                    _context6.next = 2;
                                    return t.sendApiRequest(a.GET_RECEIVER_STATS_API_NAME, [e.id]);

                                case 2:
                                    n = _context6.sent;
                                    r = new Map();
                                    return _context6.abrupt("return", (n && n.forEach(function (e) {
                                        r.set(e.id, e);
                                    }), r));

                                case 5:
                                case "end":
                                    return _context6.stop();
                            }
                        }
                    }, _callee6, this);
                })), e.createEncodedStreams = function () {
                    var n = { id: crypto.randomUUID(), type: "proxy", readable: { id: crypto.randomUUID(), type: "proxy" }, writable: { id: crypto.randomUUID(), type: "proxy" } };return t.streamProxies.set(n.id, n), t.sendApiRequest(a.RECEIVER_CREATE_ENCODED_STREAMS, [e.id, n]), n;
                }, this.receiverProxies.set(e.id, e), e;
            }
        }, {
            key: "makeDTMFProxy",
            value: function makeDTMFProxy(e) {
                var t = this;var n = e;return this.dtmfProxies.has(n.id) ? (n = this.dtmfProxies.get(n.id), Object.assign(n, e)) : (this.dtmfProxies.set(n.id, n), n.pendingEvents = new Map(), n.insertDTMF = function (e, r, i) {
                    t.sendApiRequest(a.INSERT_DTMF_API_NAME, [n.id, e, r, i]);
                }, n.addEventListener = function (e, r, i) {
                    t.addDtmfEventListener(n.id, e, r, i);
                }, n.removeEventListener = function (e, r) {
                    t.removeEventListener(n.id, e, r);
                }, Object.defineProperty(n, "ontonechange", { set: function set(e) {
                        t.addDtmfEventListener(n.id, c.TONECHANGE, e);
                    }, get: function get() {
                        return null;
                    } }), this.preRegisterEvents(c, n, this.addDtmfEventListener)), n;
            }
        }, {
            key: "makeSenderProxy",
            value: function makeSenderProxy(e) {
                var t = this;return e.track && (e.track = this.makeTrackProxy(e.track)), e.dtmf && (e.dtmf = this.makeDTMFProxy(e.dtmf)), e.getStats = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee7() {
                    var n;
                    return _regenerator2.default.wrap(function _callee7$(_context7) {
                        while (1) {
                            switch (_context7.prev = _context7.next) {
                                case 0:
                                    _context7.next = 2;
                                    return t.sendApiRequest(a.GET_SENDER_STATS_API_NAME, [e.id]);

                                case 2:
                                    n = _context7.sent;
                                    return _context7.abrupt("return", (n && (n.has = function (e) {
                                        return void 0 !== n.find(function (t) {
                                            return t.id === e;
                                        });
                                    }, n.get = function (e) {
                                        return n.find(function (t) {
                                            return t.id === e;
                                        });
                                    }), n));

                                case 4:
                                case "end":
                                    return _context7.stop();
                            }
                        }
                    }, _callee7, this);
                })), e.replaceTrack = function (n) {
                    return e.track = n, t.sendApiRequest(a.REPLACE_SENDER_TRACK_API_NAME, [e.id, n]);
                }, e.createEncodedStreams = function () {
                    var n = { id: crypto.randomUUID(), type: "proxy", readable: { type: "proxy", id: crypto.randomUUID() }, writable: { type: "proxy", id: crypto.randomUUID() } };return t.streamProxies.set(n.id, n), t.sendApiRequest(a.SENDER_CREATE_ENCODED_STREAMS, [e.id, n]), n;
                }, e;
            }
        }, {
            key: "updateSenderProxy",
            value: function updateSenderProxy(e) {
                var t = this.senderProxies.get(e.id);return t ? Object.assign(t, e) : (t = e, this.senderProxies.set(e.id, t)), this.makeSenderProxy(t);
            }
        }, {
            key: "updateReceiverProxy",
            value: function updateReceiverProxy(e) {
                var t = this.receiverProxies.get(e.id);return t ? Object.assign(t, e) : (t = e, this.receiverProxies.set(e.id, t)), this.makeReceiverProxy(t);
            }
        }, {
            key: "addTrack",
            value: function addTrack(e, t) {
                var n = this;var r = crypto.randomUUID();this.sendApiRequest(a.ADD_TRACK_API_NAME, [r].concat(Array.prototype.slice.call(arguments))).then(function (e) {
                    e && (n.updateSenderProxy(e), n.updatePCSenders(e.pcId, e.senders), n.updatePCReceivers(e.pcId, e.receivers), n.updatePCTransceivers(e.pcId, e.transceivers));
                });var i = this.updateSenderProxy({ id: r });return this.pcProxies.get(e).senders.push(i), i;
            }
        }, {
            key: "updatePeerConnectionProxy",
            value: function updatePeerConnectionProxy(e) {
                var t = this.pcProxies.get(e.pcId);Object.assign(t, e), this.updatePCSenders(e.pcId, e.senders), this.updatePCReceivers(e.pcId, e.receivers), this.updatePCTransceivers(e.pcId, e.transceivers);
            }
        }, {
            key: "createPeerConnection",
            value: function createPeerConnection(e, t) {
                var n = this;var r = crypto.randomUUID(),
                    i = this;this.logger.debug("Creating RTCPeerConnection with id: " + r);var s = { type: "proxy", id: r, signalingState: "new", connectionState: "new", iceConnectionState: "new", iceGatheringState: "new", receivers: [], senders: [], transceivers: [], pendingEvents: new Map(), configuration: e, close: function close() {
                        n.close(r);
                    }, addStream: function addStream(e) {
                        n.addStream(r, e);
                    }, getConfiguration: function getConfiguration() {
                        return n.sendApiRequest(a.PC_GET_CONFIGURATION, [r]).then(function (e) {
                            e && (s.configuration = e);
                        }), s.configuration;
                    }, getStats: function getStats(e) {
                        return n.getStats(r, e);
                    }, createOffer: function createOffer(e) {
                        return n.createOffer(r, e);
                    }, createAnswer: function createAnswer(e) {
                        return n.createAnswer(r, e);
                    }, setLocalDescription: function setLocalDescription(e) {
                        return n.setLocalDescription(r, e);
                    }, addEventListener: function addEventListener(e, t) {
                        n.addPeerConnectionEventListener(r, e, t);
                    }, removeEventListener: function removeEventListener(e, t) {
                        n.removeEventListener(r, e, t);
                    }, getEventListener: function getEventListener(e) {
                        return n.eventListeners.get(r).get(e);
                    }, set onicecandidate(e) {
                        this.addEventListener(o.ICE_CANDIDATE, e);
                    }, get onicecandidate() {
                        return this.getEventListener(o.ICE_CANDIDATE);
                    }, set ontrack(e) {
                        this.addEventListener(o.TRACK, e);
                    }, get ontrack() {
                        return this.getEventListener(o.TRACK);
                    }, get onsignalingstatechange() {
                        return this.getEventListener(o.SIG_STATE_CHANGE);
                    }, set onsignalingstatechange(e) {
                        this.addEventListener(o.SIG_STATE_CHANGE, e);
                    }, get onconnectionstatechange() {
                        return this.getEventListener(o.CONN_STATE_CHANGE);
                    }, set onconnectionstatechange(e) {
                        this.addEventListener(o.CONN_STATE_CHANGE, e);
                    }, get oniceconnectionstatechange() {
                        return this.getEventListener(o.ICE_CONN_STATE_CHANGE);
                    }, set oniceconnectionstatechange(e) {
                        this.addEventListener(o.ICE_CONN_STATE_CHANGE, e);
                    }, get onicegatheringstatechange() {
                        return this.getEventListener(o.ICE_GATHER_STATE_CHANGE);
                    }, set onicegatheringstatechange(e) {
                        this.addEventListener(o.ICE_GATHER_STATE_CHANGE, e);
                    }, get onnegotiationneeded() {
                        return this.getEventListener(o.NEGOTIATION_NEEDED);
                    }, set onnegotiationneeded(e) {
                        this.addEventListener(o.NEGOTIATION_NEEDED, e);
                    }, setRemoteDescription: function setRemoteDescription(e) {
                        return n.setRemoteDescription(r, e);
                    }, addIceCandidate: function addIceCandidate(e) {
                        return n.addIceCandidate(r, e);
                    }, getRemoteStreams: function getRemoteStreams() {
                        return n.logger.warn("getRemoteStreams not implemented on proxy."), [];
                    }, getReceivers: function getReceivers() {
                        return n.getReceivers(r);
                    }, getSenders: function getSenders() {
                        return n.getSenders(r);
                    }, addTrack: function addTrack(e) {
                        var t = [r].concat(Array.prototype.slice.call(arguments));return i.addTrack.apply(i, t);
                    }, addTransceiver: function addTransceiver(e, t) {
                        return n.addTransceiver(r, e, t);
                    }, getTransceivers: function getTransceivers() {
                        return n.getTransceivers(r);
                    }, removeTrack: function removeTrack(e) {
                        n.removeTrack(r, e);
                    } };return this.pcProxies.set(r, s), this.sendApiRequest(a.NEWRTCPEERCONNECTION_API_NAME, [r, e, t], r).then(function (e) {
                    e && n.updatePeerConnectionProxy(e);
                }, function (e) {
                    n.logger.error("Error creating proxied RTCPeerConnection: " + e);
                }), this.preRegisterEvents(o, this.pcProxies.get(r), this.addPeerConnectionEventListener), this.pcProxies.get(r);
            }
        }, {
            key: "preRegisterEvents",
            value: function preRegisterEvents(e, t, n) {
                for (var _r10 in e) {
                    "string" == typeof e[_r10] && n.apply(this, [t.id, e[_r10], function (e) {
                        t.pendingEvents.has(e.eventName) || t.pendingEvents.set(e.eventName, []), t.pendingEvents.get(e.eventName).push(e);
                    }]);
                }
            }
        }, {
            key: "updateAudioContextProxy",
            value: function updateAudioContextProxy(e) {
                var t = this.audioContextProxies.get(e.id);Object.assign(t, e);
            }
        }, {
            key: "updateAudioNodeProxy",
            value: function updateAudioNodeProxy(e) {
                var t = this.audioNodeProxies.get(e.id);Object.assign(t, e), e.stream && this.makeStreamProxy(e.stream);
            }
        }, {
            key: "makeAudioNodeProxy",
            value: function makeAudioNodeProxy(e, t) {
                var n = this;return { type: "proxy", id: t, context: this.audioContextProxies.get(e), connect: function connect(e, r, i) {
                        return n.sendApiRequest(a.AUDIO_NODE_CONNECT, [t, e, r, i]), e;
                    }, disconnect: function disconnect(e, r, i) {
                        n.sendApiRequest(a.AUDIO_NODE_DISCONNECT, [t, e, r, i]);
                    } };
            }
        }, {
            key: "createAudioNode",
            value: function createAudioNode(e, t, n) {
                var r = this;var i = crypto.randomUUID();return this.audioNodeProxies.set(i, this.makeAudioNodeProxy(e, i)), this.sendApiRequest(a.AUDIO_CTX_CREATE_AUDIO_NODE, [e, i, t, n], i).then(function (e) {
                    e && r.updateAudioNodeProxy(e);
                }, function (e) {
                    r.logger.error("Error creating proxied " + t + ": " + e);
                }), this.audioNodeProxies.get(i);
            }
        }, {
            key: "makeWorkerProxy",
            value: function makeWorkerProxy(e) {
                var t = this;var n = { id: e, pendingEvents: new Map(), type: "proxy", postMessage: function postMessage(n, r) {
                        t.sendApiRequest(a.WORKER_POST_MESSAGE, [e, n, r]);
                    }, terminate: function terminate() {
                        t.sendApiRequest(a.WORKER_TERMINATE, [e]);
                    }, addEventListener: function addEventListener(e, r, i) {
                        t.addWorkerEventListener(n.id, e, r, i);
                    }, removeEventListener: function removeEventListener(e, r) {
                        t.removeEventListener(n.id, e, r);
                    } };return Object.defineProperty(n, "onerror", { set: function set(e) {
                        t.addWorkerEventListener(n.id, l.ERROR, e);
                    }, get: function get() {
                        return null;
                    } }), Object.defineProperty(n, "onmessage", { set: function set(e) {
                        t.addWorkerEventListener(n.id, l.MESSAGE, e);
                    }, get: function get() {
                        return null;
                    } }), Object.defineProperty(n, "onmessageerror", { set: function set(e) {
                        t.addWorkerEventListener(n.id, l.MESSAGE_ERROR, e);
                    }, get: function get() {
                        return null;
                    } }), n;
            }
        }, {
            key: "createWorker",
            value: function createWorker(e, t) {
                var n = this;var r = crypto.randomUUID(),
                    i = this.makeWorkerProxy(r);return this.workerProxies.set(r, i), fetch(e).then(function (e) {
                    e.blob().then(function (e) {
                        e.arrayBuffer().then(function (i) {
                            var s = p(i);n.sendApiRequest(a.CREATE_WORKER, [r, e.type, s, t]).then(function (e) {
                                n.logger.debug("Created worker: " + JSON.stringify(e));
                            });
                        });
                    });
                }), this.logger.debug("Preregistering events for worker: " + JSON.stringify(i)), this.preRegisterEvents(l, i, this.addWorkerEventListener), i;
            }
        }, {
            key: "createAudioContext",
            value: function createAudioContext() {
                var e = this;var t = crypto.randomUUID(),
                    n = crypto.randomUUID();return this.audioContextProxies.set(t, { type: "proxy", id: t, destination: this.makeAudioNodeProxy(t, n), createGain: function createGain() {
                        var n = e.createAudioNode(t, "Gain", []),
                            r = { setValueAtTime: function setValueAtTime(t, i) {
                                return r.currentValue = t, e.sendApiRequest(a.AUDIO_PARAM_SET_VALUE_AT_TIME, [n.id, t, i]), r;
                            }, linearRampToValueAtTime: function linearRampToValueAtTime(t, i) {
                                return e.sendApiRequest(a.AUDIO_PARAM_SET_RAMP_TO_VALUE_AT_TIME, [n.id, t, i]), r;
                            } };return Object.defineProperty(r, "value", { set: function set(e) {
                                return r.setValueAtTime(e, 0);
                            }, get: function get() {
                                return r.currentValue;
                            } }), n.gain = r, n;
                    }, createOscillator: function createOscillator() {
                        var n = e.createAudioNode(t, "Oscillator", []);n.start = function () {
                            var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
                            e.sendApiRequest(a.AUDIO_NODE_START, [n.id, t]);
                        }, n.stop = function () {
                            var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
                            e.sendApiRequest(a.AUDIO_NODE_STOP, [n.id, t]);
                        }, Object.defineProperty(n, "type", { set: function set(t) {
                                n.currentType = t, e.sendApiRequest(a.AUDIO_NODE_SET_TYPE, [n.id, t]);
                            }, get: function get() {
                                return n.currentType;
                            } });var r = { setValueAtTime: function setValueAtTime(t, i) {
                                return e.sendApiRequest(a.AUDIO_PARAM_SET_VALUE_AT_TIME, [n.id, t, i]), r;
                            } };return Object.defineProperty(r, "value", { set: function set(e) {
                                return r.setValueAtTime(e, 0);
                            }, get: function get() {
                                return r.currentValue;
                            } }), n.frequency = r, n;
                    }, createMediaStreamSource: function createMediaStreamSource(n) {
                        return e.createAudioNode(t, "MediaStreamSource", [n.proxy]);
                    }, createAnalyser: function createAnalyser() {
                        return e.createAudioNode(t, "Analyser", []);
                    }, createMediaStreamDestination: function createMediaStreamDestination() {
                        var n = e.createAudioNode(t, "MediaStreamDestination", []);return n.stream = e.makeStreamProxy({ id: n.id, tracks: [{ id: n.id, kind: "audio" }] }), n;
                    }, close: function close() {
                        return e.sendApiRequest(a.AUDIO_CTX_CLOSE, [t]);
                    } }), this.sendApiRequest(a.NEW_AUDIO_CONTEXT, [t, n], t).then(function (t) {
                    t && e.updateAudioContextProxy(t);
                }, function (t) {
                    e.logger.error("Error creating proxied AudioContext: " + t);
                }), this.audioContextProxies.get(t);
            }
        }, {
            key: "close",
            value: function close(e) {
                this.eventListeners.get(e).clear(), this.sendApiRequest(a.PC_CLOSE_API_NAME, [e]);
            }
        }, {
            key: "addStream",
            value: function addStream(e, t) {
                this.sendApiRequest(a.ADDSTREAM_API_NAME, [e, t.proxy]);
            }
        }, {
            key: "getStats",
            value: function getStats(e, t) {
                return "function" == typeof t ? Promise.reject(new Error("callback based getStats is obsolete.")) : this.sendApiRequest(a.GET_STATS_API_NAME, [e, t]);
            }
        }, {
            key: "createOffer",
            value: function createOffer(e, t) {
                return this.sendApiRequest(a.CREATE_OFFER_API_NAME, [e, t]);
            }
        }, {
            key: "createAnswer",
            value: function createAnswer(e, t) {
                return this.sendApiRequest(a.CREATE_ANSWER_API_NAME, [e, t]);
            }
        }, {
            key: "setLocalDescription",
            value: function setLocalDescription(e, t) {
                return this.pcProxies.get(e).localDescription = t, this.sendApiRequest(a.SET_LOCAL_DESCRIPTION_API_NAME, [e, t]);
            }
        }, {
            key: "setRemoteDescription",
            value: function setRemoteDescription(e, t) {
                return this.sendApiRequest(a.SET_REMOTE_DESCRIPTION_API_NAME, [e, t]);
            }
        }, {
            key: "handleAddEventListenerResponse",
            value: function handleAddEventListenerResponse(e) {
                var t = this;e.eventName === o.SIG_STATE_CHANGE ? this.updatePeerConnectionProxy(e) : e.eventName === o.TRACK ? (e.streams = e.streams.map(function (e) {
                    return t.makeStreamProxy(e);
                }), e.track = this.makeTrackProxy(e.track), this.updatePeerConnectionProxy(e)) : (e.eventName === o.CONN_STATE_CHANGE || e.eventName === o.ICE_CONN_STATE_CHANGE || e.eventName === o.ICE_GATHER_STATE_CHANGE || e.eventName === o.ICE_CANDIDATE || e.eventName === o.NEGOTIATION_NEEDED) && this.updatePeerConnectionProxy(e), this.fireUpEventHandlers(this.pcProxies.get(e.pcId), e), this.sendApiRequest(a.ADD_PC_EVENT_LISTENER, [e.pcId, e.eventName]).then(function (e) {
                    e && t.handleAddEventListenerResponse(e);
                });
            }
        }, {
            key: "fireUpEventHandlers",
            value: function fireUpEventHandlers(e, t) {
                if (e && this.eventListeners.get(e.id).has(t.eventName)) {
                    var _n7 = e.pendingEvents;this.eventListeners.get(e.id).get(t.eventName).forEach(function (e, r) {
                        0 === r ? e(t) : _n7.get(t.eventName).forEach(function (t) {
                            e(t);
                        });
                    }), _n7.set(t.eventName, []);
                }
            }
        }, {
            key: "handleAddTrackEventListenerResponse",
            value: function handleAddTrackEventListenerResponse(e) {
                var t = this;"mute" !== e.eventName && "unmute" !== e.eventName || (this.trackProxies.get(e.trackId).muted = e.muted), this.fireUpEventHandlers(this.trackProxies.get(e.trackId), e), this.sendApiRequest(a.ADD_TRACK_EVENT_LISTENER, [e.trackId, e.eventName]).then(function (e) {
                    e && t.handleAddTrackEventListenerResponse(e);
                });
            }
        }, {
            key: "handleAddDtmfEventListenerResponse",
            value: function handleAddDtmfEventListenerResponse(e) {
                var t = this;this.fireUpEventHandlers(this.dtmfProxies.get(e.dtmfId), e), this.sendApiRequest(a.ADD_DTMF_EVENT_LISTENER, [e.dtmfId, e.eventName]).then(function (e) {
                    e && t.handleAddDtmfEventListenerResponse(e);
                });
            }
        }, {
            key: "handleAddWorkerEventListenerResponse",
            value: function handleAddWorkerEventListenerResponse(e) {
                var t = this;this.fireUpEventHandlers(this.workerProxies.get(e.wId), e), this.sendApiRequest(a.ADD_WORKER_EVENT_LISTENER, [e.wId, e.eventName]).then(function (e) {
                    e && t.handleAddWorkerEventListenerResponse(e);
                });
            }
        }, {
            key: "addEventListener",
            value: function addEventListener(e, t, n) {
                this.eventListeners.has(e) || this.eventListeners.set(e, new Map()), this.eventListeners.get(e).has(t) || this.eventListeners.get(e).set(t, []), this.eventListeners.get(e).get(t).push(n);
            }
        }, {
            key: "addPeerConnectionEventListener",
            value: function addPeerConnectionEventListener(e, t, n) {
                var r = this;this.addEventListener(e, t, n), this.sendApiRequest(a.ADD_PC_EVENT_LISTENER, [e, t]).then(function (e) {
                    e && r.handleAddEventListenerResponse(e);
                });
            }
        }, {
            key: "addTrackEventListener",
            value: function addTrackEventListener(e, t, n, r) {
                var i = this;this.addEventListener(e, t, n), this.sendApiRequest(a.ADD_TRACK_EVENT_LISTENER, [e, t, r]).then(function (e) {
                    e && i.handleAddTrackEventListenerResponse(e);
                });
            }
        }, {
            key: "addDtmfEventListener",
            value: function addDtmfEventListener(e, t, n, r) {
                var i = this;this.addEventListener(e, t, n), this.sendApiRequest(a.ADD_DTMF_EVENT_LISTENER, [e, t, r]).then(function (e) {
                    e && i.handleAddDtmfEventListenerResponse(e);
                });
            }
        }, {
            key: "addWorkerEventListener",
            value: function addWorkerEventListener(e, t, n) {
                var r = this;this.addEventListener(e, t, n), this.sendApiRequest(a.ADD_WORKER_EVENT_LISTENER, [e, t]).then(function (e) {
                    e && r.handleAddWorkerEventListenerResponse(e);
                });
            }
        }, {
            key: "removeEventListener",
            value: function removeEventListener(e, t, n) {
                var r = this.eventListeners.get(e).get(t);var i = r.indexOf(n);i > -1 && r.splice(i, 1);
            }
        }, {
            key: "addIceCandidate",
            value: function addIceCandidate(e, t) {
                var n = t ? { sdpMLineIndex: t.sdpMLineIndex, sdpMid: t.sdpMid, candidate: t.candidate } : null;return this.sendApiRequest(a.ADD_ICE_CANDIDATE_API_NAME, [e, n]);
            }
        }, {
            key: "createMediaElement",
            value: function createMediaElement(e) {
                var t = this;var n = crypto.randomUUID();this.sendApiRequest(a.CREATE_MEDIA_ELEMENT_API_NAME, [n, e], n).then(function (e) {
                    if (e) {
                        t.mediaElementProxies.get(e.id).sinkId = e.sinkId;
                    }
                });var r = { id: n, type: "proxy", classList: new Set(), isMuted: !1, play: function play() {
                        t.sendApiRequest(a.MEDIA_ELEMENT_PLAY_API_NAME, [n]);
                    }, pause: function pause() {
                        t.sendApiRequest(a.MEDIA_ELEMENT_PAUSE_API_NAME, [n]);
                    }, setSinkId: function setSinkId(e) {
                        return t.sendApiRequest(a.MEDIA_ELEMENT_SET_SINK_ID_API_NAME, [n, e]);
                    }, remove: function remove() {
                        return t.sendApiRequest(a.MEDIA_ELEMENT_REMOVE, [n]);
                    } };return this.mediaElementProxies.set(n, r), r.classList.remove = function (e) {
                    r.classList.delete(e);
                }, Object.assign(r, e), Object.defineProperty(r, "srcObject", { set: function set(e) {
                        r.stream = e, t.sendApiRequest(a.SET_MEDIA_SRC_OBJ_API_NAME, [r.id, e && e.proxy ? e.proxy : e]);
                    }, get: function get() {
                        return r.stream;
                    } }), Object.defineProperty(r, "hidden", { set: function set(e) {
                        t.sendApiRequest(a.SET_MEDIA_HIDDEN_API_NAME, [r.id, e]);
                    }, get: function get() {
                        return r.hidden;
                    } }), Object.defineProperty(r, "volume", { set: function set(e) {
                        t.sendApiRequest(a.SET_MEDIA_VOLUME_API_NAME, [r.id, e]);
                    }, get: function get() {
                        return r.volume;
                    } }), Object.defineProperty(r, "muted", { set: function set(e) {
                        r.isMuted = e, t.sendApiRequest(a.MEDIA_ELEMENT_MUTED, [r.id, e]).then(function (e) {
                            e && (r.isMuted = e.muted);
                        });
                    }, get: function get() {
                        return r.isMuted;
                    } }), r;
            }
        }, {
            key: "generateCertificate",
            value: function generateCertificate(e) {
                return this.sendApiRequest(a.GENERATE_CERTIFICATE_API_NAME, [e]);
            }
        }, {
            key: "getReceivers",
            value: function getReceivers(e) {
                var t = this;return this.sendApiRequest(a.GET_RECEIVERS_API_NAME, [e]).then(function (e) {
                    e && t.updatePCReceivers(e.pcId, e.receivers);
                }), this.pcProxies.get(e).receivers;
            }
        }, {
            key: "getSenders",
            value: function getSenders(e) {
                var t = this;return this.sendApiRequest(a.GET_SENDERS_API_NAME, [e]).then(function (e) {
                    e && t.updatePCSenders(e.pcId, e.senders);
                }), this.pcProxies.get(e).senders;
            }
        }, {
            key: "removeTrack",
            value: function removeTrack(e, t) {
                this.sendApiRequest(a.PC_REMOVE_TRACK_API_NAME, [e, t]);
            }
        }, {
            key: "getTransceivers",
            value: function getTransceivers(e) {
                var t = this;return this.sendApiRequest(a.GET_TRANSCEIVERS_API_NAME, [e]).then(function (e) {
                    e && t.updatePCTransceivers(e.pcId, e.transceivers);
                }), this.pcProxies.get(e).transceivers;
            }
        }, {
            key: "addTransceiver",
            value: function addTransceiver(e, t, n) {
                var r = this;var i = crypto.randomUUID(),
                    s = { type: "proxy", id: i, sender: this.makeSenderProxy({ id: crypto.randomUUID() }), receiver: this.makeReceiverProxy({ id: crypto.randomUUID() }), setCodecPreferences: function setCodecPreferences(e) {
                        r.sendApiRequest(a.TRANSCEIVER_SET_CODEC_PREFS, [i, e]);
                    } };return this.transceiverProxies.set(s.id, s), this.pcProxies.get(e).transceivers.push(s), this.pcProxies.get(e).receivers.push(s.receiver), this.pcProxies.get(e).senders.push(s.sender), this.sendApiRequest(a.ADD_TRANSCEIVER_API_NAME, [e, s, "string" == typeof t ? t : this.makeTrackProxy(t), n]).then(function (e) {
                    e && (r.updateTransceiverProxy(e), r.updatePCSenders(e.pcId, e.senders), r.updatePCReceivers(e.pcId, e.receivers), r.updatePCTransceivers(e.pcId, e.transceivers));
                }), s;
            }
        }, {
            key: "setLogger",
            value: function setLogger(e) {
                this.logger = e;
            }
        }, {
            key: "overrideWebRTC",
            value: function overrideWebRTC() {
                var e = this;this.logger.info("Overriding WebRTC interfaces for the current webapp.");var t = this;navigator.mediaDevices.getUserMedia = function (t) {
                    return e.getUserMedia(t);
                }, navigator.mediaDevices.enumerateDevices = function () {
                    return e.enumerateDevices();
                }, window.RTCPeerConnection = function (e, n) {
                    return t.createPeerConnection(e, n);
                }, window.RTCPeerConnection.generateCertificate = function (e) {
                    return t.generateCertificate(e);
                }, window.AudioContext = function () {
                    return t.createAudioContext();
                }, window.Worker = function (e, n) {
                    return t.createWorker(e, n);
                };
            }
        }, {
            key: "removeStatusChangeEventListener",
            value: function removeStatusChangeEventListener(e) {
                this.statusChangeEventListeners = this.statusChangeEventListeners.filter(function (t) {
                    return t !== e;
                });
            }
        }, {
            key: "addStatusChangeEventListener",
            value: function addStatusChangeEventListener(e) {
                this.statusChangeEventListeners.push(e);
            }
        }, {
            key: "sendHelloRequest",
            value: function () {
                var _ref8 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee8() {
                    var e, n;
                    return _regenerator2.default.wrap(function _callee8$(_context8) {
                        while (1) {
                            switch (_context8.prev = _context8.next) {
                                case 0:
                                    e = this;
                                    _context8.next = 3;
                                    return this.sendApiRequest(a.HELLO_API_NAME, []);

                                case 3:
                                    n = _context8.sent;
                                    return _context8.abrupt("return", (n && !globalThis.DCVWebRTCRedirProxy && (this.status = h.AVAILABLE, this.logger.info("Running in a DCV WebRTC redirection env, proxy version: " + t.versionStr + " - " + t.gitHash), this.logger.info("Client info: " + JSON.stringify(n)), window.addEventListener("beforeunload", function (t) {
                                        var n = { pcIds: [], streamIds: [], mediaElementIds: [], transceiverIds: [], senderIds: [], receiverIds: [], trackIds: [], workerIds: [] };e.pcProxies.forEach(function (e, t) {
                                            n.pcIds.push(t);
                                        }), e.streamProxies.forEach(function (e, t) {
                                            n.streamIds.push(t);
                                        }), e.trackProxies.forEach(function (e, t) {
                                            n.trackIds.push(t);
                                        }), e.workerProxies.forEach(function (e, t) {
                                            n.workerIds.push(t);
                                        }), e.mediaElementProxies.forEach(function (e, t) {
                                            n.mediaElementIds.push(t);
                                        }), e.transceiverProxies.forEach(function (e, t) {
                                            n.transceiverIds.push(t);
                                        }), e.senderProxies.forEach(function (e, t) {
                                            n.senderIds.push(t);
                                        }), e.receiverProxies.forEach(function (e, t) {
                                            n.receiverIds.push(t);
                                        }), e.sendApiRequest(a.UNLOAD_EVENT_NAME, [n]);
                                    })), n));

                                case 5:
                                case "end":
                                    return _context8.stop();
                            }
                        }
                    }, _callee8, this);
                }));

                function sendHelloRequest() {
                    return _ref8.apply(this, arguments);
                }

                return sendHelloRequest;
            }()
        }], [{
            key: "setInitCallback",
            value: function setInitCallback(e, t) {
                var n = globalThis.DCVWebRTCRedirProxy;if (n) e({ success: !0, proxy: n });else {
                    w.initCallbacks || (w.initCallbacks = new Map());var _n8 = setTimeout(function (e) {
                        e({ success: !1, error: "Failed to initialize DCVWebRTCPeerConnectionProxy in " + t + "ms" }), w.initCallbacks.delete(e);
                    }, t, e);w.initCallbacks.set(e, _n8);
                }
            }
        }]);
        return w;
    }();

    function T(e, t, n) {
        globalThis.DCVWebRTCRedirProxy = t, w.initCallbacks ? (w.initCallbacks.forEach(function (r, i) {
            clearTimeout(r), i({ success: e, proxy: t, error: n });
        }), w.initCallbacks.clear()) : s.debug("No DCVWebRTCPeerConnectionProxy.initCallback was specified.");
    }try {
        window.DCVWebRTCPeerConnectionProxy = w;var _e14 = new w({ logger: s });_e14.sendHelloRequest().then(function (t) {
            s.debug("Successfully received hello response from client: " + JSON.stringify(t)), _e14.clientInfo = t, _e14.resetHeartbeat(null), T(!0, _e14);
        }).catch(function (e) {
            var t = "Running in an invalid dcv webrtc env, skipping setting up proxy: " + JSON.stringify(e);s.debug(t), T(!1, null, t);
        });
    } catch (e) {
        var _t15 = e.message;T(!1, null, _t15), s.debug("Skipping setting up proxy in client env: " + _t15);
    }e.DCVWebRTCRedirClient = function () {
        function _class(e) {
            (0, _classCallCheck3.default)(this, _class);
            this.version = t, this.config = e, this.logger = e.logger ? e.logger : s, this.channel = e.channel, this.decoder = new TextDecoder("utf-8"), this.messageBuffer = null, this.pcs = new Map(), this.pcPromises = new Map(), this.audioContexts = new Map(), this.audioNodes = new Map(), this.workers = new Map(), this.workerPromises = new Map(), this.certs = new Map(), this.streams = new Map(), this.tracks = new Map(), this.offers = new Map(), this.answers = new Map(), this.remoteDescriptions = new Map(), this.mediaElements = new Map(), this.senders = new Map(), this.dtmfSenders = new Map(), this.receivers = new Map(), this.transceivers = new Map(), this.logger.info("Created WebRTC Redirection Client version: " + t.versionStr + " - " + t.gitHash);
        }

        (0, _createClass3.default)(_class, [{
            key: "encodeBase64",
            value: function encodeBase64(e) {
                return p(e);
            }
        }, {
            key: "decodeBase64",
            value: function decodeBase64(e) {
                return g(e);
            }
        }, {
            key: "getVersion",
            value: function getVersion() {
                return this.version;
            }
        }, {
            key: "concatUint8Arrays",
            value: function concatUint8Arrays(e) {
                var t = e.reduce(function (e, t) {
                    return e + t.byteLength;
                }, 0),
                    n = new Uint8Array(t);var r = 0;return e.forEach(function (e) {
                    n.set(e, r), r += e.byteLength;
                }), n;
            }
        }, {
            key: "parseHeader",
            value: function parseHeader(e) {
                return e[3] << 24 | e[2] << 16 | e[1] << 8 | e[0];
            }
        }, {
            key: "onMessageReceived",
            value: function onMessageReceived(e) {
                this.logger.debug("onMessageReceived, binaryPayload.byteLength: " + e.byteLength);try {
                    var _t16 = 0;for (null === this.messageBuffer ? this.messageBuffer = new Uint8Array(e) : this.messageBuffer = this.concatUint8Arrays([this.messageBuffer, new Uint8Array(e)]), this.messageBuffer.byteLength >= 4 && (_t16 = this.parseHeader(this.messageBuffer)); _t16 > 0 && this.messageBuffer.byteLength >= _t16 + 4;) {
                        var _e15 = 4,
                            _n9 = 4 + _t16,
                            _r11 = this.messageBuffer.slice(_e15, _n9);this.logger.debug("Decoding payload: ", _r11);var _i7 = this.decoder.decode(_r11);this.logger.debug("Received message: " + _i7);var _s2 = JSON.parse(_i7);this.logger.debug("Received json: ", _s2), this.handleMessage(_s2), this.messageBuffer = this.messageBuffer.slice(_n9), _t16 = this.messageBuffer.byteLength >= 4 ? this.parseHeader(this.messageBuffer) : 0;
                    }
                } catch (e) {
                    this.logger.error("Failed to parse JSON from binaryPayload: " + e), this.messageBuffer = null;
                }
            }
        }, {
            key: "getPeerConnection",
            value: function getPeerConnection(e) {
                var t = this;return this.pcs.has(e) ? this.pcs.get(e) : (this.pcPromises.has(e) || this.pcPromises.set(e, []), new Promise(function (n, r) {
                    t.pcPromises.get(e).push({ resolve: n, reject: r });
                }));
            }
        }, {
            key: "closePeerConnection",
            value: function closePeerConnection(e) {
                var t = this;if (this.pcs.has(e)) {
                    var _n10 = this.pcs.get(e);_n10.getTransceivers().forEach(function (e) {
                        e.sender && (e.sender.dtmf && t.dtmfSenders.forEach(function (n, r) {
                            n === e.sender.dtmf && t.dtmfSenders.delete(r);
                        }), t.senders.forEach(function (n, r) {
                            n === e.sender && t.senders.delete(r);
                        })), e.receiver && t.receivers.forEach(function (n, r) {
                            n === e.receiver && t.receivers.delete(r);
                        }), t.transceivers.forEach(function (n, r) {
                            n === e && t.transceivers.delete(r);
                        });
                    }), _n10.getSenders().forEach(function (e) {
                        t.senders.forEach(function (n, r) {
                            n === e && t.senders.delete(r);
                        });
                    }), _n10.getReceivers(function (e) {
                        t.receivers.forEach(function (n, r) {
                            n === e && t.receivers.delete(r);
                        });
                    }), _n10.localDescription && (this.offers.forEach(function (e, r) {
                        _n10.localDescription.type === e.type && _n10.localDescription.sdp === e.sdp && t.offers.delete(r);
                    }), this.answers.forEach(function (e, r) {
                        _n10.localDescription.type === e.type && _n10.localDescription.sdp === e.sdp && t.offers.delete(r);
                    })), _n10.remoteDescription && this.remoteDescriptions.forEach(function (e, r) {
                        _n10.remoteDescription.type === e.type && _n10.remoteDescription.sdp === e.sdp && t.remoteDescriptions.delete(r);
                    }), this.pcPromises.has(e) && (this.pcPromises.get(e).forEach(function (e) {
                        e.reject(null);
                    }), this.pcPromises.delete(e)), _n10.close(), this.pcs.delete(e);
                }
            }
        }, {
            key: "getPendingEvent",
            value: function getPendingEvent(e, t) {
                return e.pendingEvents.has(t) && e.pendingEvents.get(t).length > 0 ? e.pendingEvents.get(t).shift() : (e.eventPromises.has(t) || e.eventPromises.set(t, []), new Promise(function (n, r) {
                    e.eventPromises.get(t).push({ resolve: n, reject: r });
                }));
            }
        }, {
            key: "getStream",
            value: function getStream(e) {
                return this.streams.get(e);
            }
        }, {
            key: "makeTrackTO",
            value: function makeTrackTO(e) {
                var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : e.id ? e.id : crypto.randomUUID();
                return this.tracks.set(t, e), { type: "proxy", contentHint: e.contentHint, enabled: e.enabled, id: t, kind: e.kind, label: e.label, muted: e.muted, readyState: e.readyState, settings: e.getSettings() };
            }
        }, {
            key: "makeStreamTO",
            value: function makeStreamTO(e) {
                var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : e.id ? e.id : crypto.randomUUID();
                var n = this;this.streams.set(t, e);var r = e.getTracks().map(function (e) {
                    return n.makeTrackTO(e);
                });return { type: "proxy", id: t, active: e.active, tracks: r };
            }
        }, {
            key: "makeSyncronizationSourceTO",
            value: function makeSyncronizationSourceTO(e) {
                return { audioLevel: e.audioLevel, rtpTimestamp: e.rtpTimestamp, source: e.source, timestamp: e.timestamp };
            }
        }, {
            key: "makeReceiverTO",
            value: function makeReceiverTO(e) {
                var t = this;var n = e.getSynchronizationSources();n = n.map(function (e) {
                    return t.makeSyncronizationSourceTO(e);
                });var r = { id: e.id ? e.id : crypto.randomUUID(), type: "proxy", track: e.track ? this.makeTrackTO(e.track) : null, synchronizationSources: n, stats: [] };return e.id = r.id, this.receivers.set(r.id, e), r;
            }
        }, {
            key: "makeDTMFSenderTO",
            value: function makeDTMFSenderTO(e) {
                var t = { id: e.id ? e.id : crypto.randomUUID(), type: "proxy", toneBuffer: e.toneBuffer };return e.id = t.id, this.dtmfSenders.set(t.id, e), t;
            }
        }, {
            key: "makeSenderTO",
            value: function makeSenderTO(e) {
                var t = { id: e.id ? e.id : crypto.randomUUID(), type: "proxy", track: e.track ? this.makeTrackTO(e.track) : null, dtmf: e.dtmf ? this.makeDTMFSenderTO(e.dtmf) : null };return e.id = t.id, this.senders.set(t.id, e), t;
            }
        }, {
            key: "makeTransceiverTO",
            value: function makeTransceiverTO(e) {
                return { id: e.id, type: "proxy", currentDirection: e.currentDirection, direction: e.direction, mid: e.mid, receiver: e.receiver ? this.makeReceiverTO(e.receiver) : null, sender: e.sender ? this.makeSenderTO(e.sender) : null, stopped: e.stopped };
            }
        }, {
            key: "findProxySubject",
            value: function findProxySubject(e) {
                return this.pcs.has(e) ? this.pcs.get(e) : this.audioContexts.has(e) ? this.audioContexts.get(e) : this.audioNodes.has(e) ? this.audioNodes.get(e) : this.workers.has(e) ? this.workers.get(e) : this.certs.has(e) ? this.certs.get(e) : this.streams.has(e) ? this.streams.get(e) : this.offers.has(e) ? this.offers.get(e) : this.answers.has(e) ? this.answers.get(e) : this.remoteDescriptions.has(e) ? this.remoteDescriptions.get(e) : this.mediaElements.has(e) ? this.mediaElements.get(e) : this.senders.has(e) ? this.senders.get(e) : this.dtmfSenders.has(e) ? this.dtmfSenders.get(e) : this.receivers.has(e) ? this.receivers.get(e) : this.transceivers.has(e) ? this.transceivers.get(e) : this.tracks.has(e) ? this.tracks.get(e) : null;
            }
        }, {
            key: "traverse",
            value: function traverse(e, t) {
                if ("object" == (typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e))) for (var _n11 in e) {
                    Object.prototype.hasOwnProperty.call(e, _n11) && (t.apply(this, [e, _n11, e[_n11]]), null !== e[_n11] && "object" == (0, _typeof3.default)(e[_n11]) && this.traverse(e[_n11], t));
                }
            }
        }, {
            key: "getWorker",
            value: function getWorker(e) {
                var t = this;return this.workers.has(e) ? this.workers.get(e) : (this.workerPromises.has(e) || this.workerPromises.set(e, []), new Promise(function (n, r) {
                    t.workerPromises.get(e).push({ resolve: n, reject: r });
                }));
            }
        }, {
            key: "gatherPeerConnectionState",
            value: function gatherPeerConnectionState(e, t) {
                var n = this;e.canTrickleIceCandidates = t.canTrickleIceCandidates, e.connectionState = t.connectionState, e.currentLocalDescription = t.currentLocalDescription, e.currentRemoteDescription = t.currentRemoteDescription, e.iceConnectionState = t.iceConnectionState, e.iceGatheringState = t.iceGatheringState, e.iceGatheringState = t.iceGatheringState, e.localDescription = t.localDescription, e.peerIdentity = t.peerIdentity, e.pendingLocalDescription = t.pendingLocalDescription, e.pendingRemoteDescription = t.pendingRemoteDescription, e.remoteDescription = t.remoteDescription, e.sctp = t.sctp, e.signalingState = t.signalingState, e.configuration = t.getConfiguration(), e.transceivers = t.getTransceivers().map(function (e) {
                    return n.makeTransceiverTO(e);
                }), e.senders = t.getSenders().map(function (e) {
                    return n.makeSenderTO(e);
                }), e.receivers = t.getReceivers().map(function (e) {
                    return n.makeReceiverTO(e);
                });
            }
        }, {
            key: "callWebRTCApi",
            value: function () {
                var _ref9 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee9(e, t, n) {
                    var r, _n12, _e16, _t17, _n13, _e17, _t18, _r12, _i8, _n14, _e18, _t19, _r13, _i9, _n15, _e19, _r14, _n16, _e20, _t20, _i10, _e21, _s3, _a3, _n17, _e22, _n18, _e23, _t21, _r15, _i11, _s4, _a4, _o2, _d2, _n19, _e24, _n20, _e25, _t22, _i12, _s5, _n21, _e26, _t23, _r16, _n22, _e27, _t24, _i13, _s6, _n23, _a5, _o3, _d3, _e28, _n24, _e29, _n25, _e30, _t25, _r17, _i14, _s7, _a6, _n26, _e31, _t26, _r18, _i15, _s8, _a7, _n27, _e32, _t27, _n28, _e33, _t28, _n29, _e34, _t29, _n30, _e35, _t30, _r19, _n31, _n32, _e36, _t31, _r20, _n33, _n34, _e37, _n35, _e38, _n36, _e39, _t32, _r21, _i16, _s9, _n37, _e40, _t33, _n38, _e41, _t34, _i17, _s10, _a8, _o4, _d4, _n39, _i18, _s11, _n40, _e42, _t35, _i19, _s12, _a9, _e43, _o5, _d5, _n42, _e44, _n43, _e45, _t36, _r22, _n44, _e46, _t37, _r23, _i20, _s13, _n45, _e47, _t38, _n46, _n47, _e48, _t39, _n48, _n49, _e49, _t40, _r24, _i21, _n50, _e50, _t41, _r25, _i22, _n51, _e51, _r26, _i23, _s14, _n52, _e52, _r27, _i24, _s15, _n53, _e53, _t42, _r28, _i25, _n54, _n55, _e54, _t43, _r29, _n56, _e55, _t44, _r30, _n57, _e56, _i26, _s16, _e57, _n58, _n59, _e58, _i27, _s17, _o6, _e59, _n60, _n61, _e60, _i29, _s18, _e61, _n62, _n63, _e62, _i31, _s19, _o7, _e63, _n64, _n65, _e64, _t46, _r31, _n66, _e65, _t47, _r32, _n67, _e66, _t48, _r33, _n68, _e67, _t49, _n69, _e68, _t50, _r34, _n70, _e69, _t51, _n71, _e70, _n72, _e71, _n73, _e72, _n74, _e73, _t52, _r35, _n75, _e74, _t53, _n76, _e75, _t54, _n77, _e76, _t55, _n78, _n79, _e77, _t56, _n80, _n81, _e78;

                    return _regenerator2.default.wrap(function _callee9$(_context9) {
                        while (1) {
                            switch (_context9.prev = _context9.next) {
                                case 0:
                                    r = this;
                                    _context9.t0 = e;
                                    _context9.next = _context9.t0 === a.HELLO_API_NAME ? 4 : _context9.t0 === a.GETUSERMEDIA_API_NAME ? 5 : _context9.t0 === a.ENUMERATEDEVICES_API_NAME ? 11 : _context9.t0 === a.STREAM_ADD_TRACK ? 15 : _context9.t0 === a.STREAM_REMOVE_TRACK ? 17 : _context9.t0 === a.GENERATE_CERTIFICATE_API_NAME ? 19 : _context9.t0 === a.NEWRTCPEERCONNECTION_API_NAME ? 25 : _context9.t0 === a.PC_GET_CONFIGURATION ? 31 : _context9.t0 === a.CREATE_WORKER ? 35 : _context9.t0 === a.WORKER_TERMINATE ? 37 : _context9.t0 === a.WORKER_POST_MESSAGE ? 39 : _context9.t0 === a.NEW_AUDIO_CONTEXT ? 47 : _context9.t0 === a.AUDIO_CTX_CREATE_AUDIO_NODE ? 49 : _context9.t0 === a.AUDIO_CTX_CLOSE ? 59 : _context9.t0 === a.AUDIO_NODE_CONNECT ? 62 : _context9.t0 === a.AUDIO_NODE_DISCONNECT ? 64 : _context9.t0 === a.AUDIO_NODE_SET_TYPE ? 66 : _context9.t0 === a.AUDIO_NODE_START ? 69 : _context9.t0 === a.AUDIO_NODE_STOP ? 72 : _context9.t0 === a.AUDIO_PARAM_SET_VALUE_AT_TIME ? 75 : _context9.t0 === a.AUDIO_PARAM_SET_RAMP_TO_VALUE_AT_TIME ? 78 : _context9.t0 === a.GET_RECEIVERS_API_NAME ? 81 : _context9.t0 === a.GET_SENDERS_API_NAME ? 88 : _context9.t0 === a.INSERT_DTMF_API_NAME ? 95 : _context9.t0 === a.GET_TRANSCEIVERS_API_NAME ? 97 : _context9.t0 === a.TRANSCEIVER_SET_CODEC_PREFS ? 103 : _context9.t0 === a.ADD_TRACK_API_NAME ? 104 : _context9.t0 === a.ADD_TRANSCEIVER_API_NAME ? 121 : _context9.t0 === a.PC_CLOSE_API_NAME ? 134 : _context9.t0 === a.ADDSTREAM_API_NAME ? 136 : _context9.t0 === a.GET_STATS_API_NAME ? 142 : _context9.t0 === a.GET_SENDER_STATS_API_NAME ? 153 : _context9.t0 === a.GET_RECEIVER_STATS_API_NAME ? 161 : _context9.t0 === a.REPLACE_SENDER_TRACK_API_NAME ? 169 : _context9.t0 === a.PC_REMOVE_TRACK_API_NAME ? 175 : _context9.t0 === a.CREATE_OFFER_API_NAME ? 183 : _context9.t0 === a.CREATE_ANSWER_API_NAME ? 193 : _context9.t0 === a.SET_LOCAL_DESCRIPTION_API_NAME ? 203 : _context9.t0 === a.SET_REMOTE_DESCRIPTION_API_NAME ? 213 : _context9.t0 === a.ADD_ICE_CANDIDATE_API_NAME ? 222 : _context9.t0 === a.ADD_PC_EVENT_LISTENER ? 228 : _context9.t0 === a.ADD_TRACK_EVENT_LISTENER ? 243 : _context9.t0 === a.ADD_WORKER_EVENT_LISTENER ? 255 : _context9.t0 === a.ADD_DTMF_EVENT_LISTENER ? 270 : _context9.t0 === a.CREATE_MEDIA_ELEMENT_API_NAME ? 280 : _context9.t0 === a.MEDIA_ELEMENT_SET_SINK_ID_API_NAME ? 285 : _context9.t0 === a.SET_MEDIA_SRC_OBJ_API_NAME ? 291 : _context9.t0 === a.MEDIA_ELEMENT_MUTED ? 293 : _context9.t0 === a.SET_MEDIA_HIDDEN_API_NAME ? 295 : _context9.t0 === a.SET_MEDIA_VOLUME_API_NAME ? 297 : _context9.t0 === a.MEDIA_ELEMENT_PLAY_API_NAME ? 299 : _context9.t0 === a.MEDIA_ELEMENT_PAUSE_API_NAME ? 301 : _context9.t0 === a.MEDIA_ELEMENT_REMOVE ? 303 : _context9.t0 === a.TOGGLE_TRACK_ENABLED_API_NAME ? 305 : _context9.t0 === a.TRACK_STOP_API_NAME ? 307 : _context9.t0 === a.TRACK_GET_SETTINGS ? 309 : _context9.t0 === a.SENDER_CREATE_ENCODED_STREAMS ? 311 : _context9.t0 === a.RECEIVER_CREATE_ENCODED_STREAMS ? 316 : _context9.t0 === a.UNLOAD_EVENT_NAME ? 321 : 323;
                                    break;

                                case 4:
                                    return _context9.abrupt("return", { version: this.version, platform: "web", userAgent: navigator.userAgent });

                                case 5:
                                    _n12 = (0, _slicedToArray3.default)(n, 1);
                                    _e16 = _n12[0];
                                    _context9.next = 9;
                                    return navigator.mediaDevices.getUserMedia(_e16);

                                case 9:
                                    _t17 = _context9.sent;
                                    return _context9.abrupt("return", this.makeStreamTO(_t17));

                                case 11:
                                    _context9.next = 13;
                                    return navigator.mediaDevices.enumerateDevices();

                                case 13:
                                    _context9.t1 = function (e) {
                                        return e.toJSON();
                                    };

                                    return _context9.abrupt("return", _context9.sent.map(_context9.t1));

                                case 15:
                                    _n13 = (0, _slicedToArray3.default)(n, 2), _e17 = _n13[0], _t18 = _n13[1], _r12 = this.streams.get(_e17), _i8 = this.tracks.get(_t18);
                                    return _context9.abrupt("return", (_r12 && _i8 && _r12.addTrack(_i8), {}));

                                case 17:
                                    _n14 = (0, _slicedToArray3.default)(n, 2), _e18 = _n14[0], _t19 = _n14[1], _r13 = this.streams.get(_e18), _i9 = this.tracks.get(_t19);
                                    return _context9.abrupt("return", (_r13 && _i9 && _r13.removeTrack(_i9), {}));

                                case 19:
                                    _n15 = (0, _slicedToArray3.default)(n, 1);
                                    _e19 = _n15[0];
                                    _context9.next = 23;
                                    return RTCPeerConnection.generateCertificate(_e19);

                                case 23:
                                    _r14 = _context9.sent;
                                    return _context9.abrupt("return", (this.certs.set(t, _r14), { type: "proxy", id: t, expires: _r14.expires, fingerprints: _r14.getFingerprints() }));

                                case 25:
                                    _n16 = (0, _slicedToArray3.default)(n, 3), _e20 = _n16[0], _t20 = _n16[1], _i10 = _n16[2];
                                    if (_t20 && _t20.certificates) {
                                        _e21 = _t20.certificates.map(function (e) {
                                            return r.certs.get(e.id);
                                        });
                                        _t20.certificates = _e21;
                                    }_s3 = new RTCPeerConnection(_t20, _i10);
                                    this.pcs.set(_e20, _s3), this.pcPromises.has(_e20) && (this.pcPromises.get(_e20).forEach(function (e) {
                                        e.resolve(e);
                                    }), this.pcPromises.set(_e20, []));_a3 = { type: "proxy", pcId: _e20 };
                                    return _context9.abrupt("return", (this.gatherPeerConnectionState(_a3, _s3), _a3));

                                case 31:
                                    _n17 = (0, _slicedToArray3.default)(n, 1), _e22 = _n17[0];
                                    _context9.next = 34;
                                    return this.getPeerConnection(_e22);

                                case 34:
                                    return _context9.abrupt("return", _context9.sent.getConfiguration());

                                case 35:
                                    _n18 = (0, _slicedToArray3.default)(n, 4), _e23 = _n18[0], _t21 = _n18[1], _r15 = _n18[2], _i11 = _n18[3], _s4 = g(_r15), _a4 = new Blob([_s4], { type: _t21 }), _o2 = URL.createObjectURL(_a4), _d2 = new Worker(_o2, _i11);
                                    return _context9.abrupt("return", (this.workers.set(_e23, _d2), this.workerPromises.has(_e23) && (this.workerPromises.get(_e23).forEach(function (e) {
                                        e.resolve(_d2);
                                    }), this.workerPromises.set(_e23, [])), { type: "proxy", id: _e23 }));

                                case 37:
                                    _n19 = (0, _slicedToArray3.default)(n, 1), _e24 = _n19[0];
                                    return _context9.abrupt("return", (this.workers.has(_e24) && (this.workers.get(_e24).terminate(), this.workerPromises.has(_e24) && this.workerPromises.get(_e24).forEach(function (e) {
                                        e.reject(null);
                                    }), this.workerPromises.delete(_e24), this.workers.delete(_e24)), {}));

                                case 39:
                                    _n20 = (0, _slicedToArray3.default)(n, 3);
                                    _e25 = _n20[0];
                                    _t22 = _n20[1];
                                    _i12 = _n20[2];
                                    _context9.next = 45;
                                    return this.getWorker(_e25);

                                case 45:
                                    _s5 = _context9.sent;
                                    return _context9.abrupt("return", (this.logger.debug("Message before traversing: ", JSON.stringify(_t22)), this.traverse(_t22, function (e, t, n) {
                                        "proxy" === n.type && n.id && (e[t] = r.findProxySubject(n.id));
                                    }), this.logger.debug("Message after traversing: ", _t22), this.logger.debug("Options before traversing: ", JSON.stringify(_i12)), this.traverse(_i12, function (e, t, n) {
                                        "proxy" === n.type && n.id && (e[t] = r.findProxySubject(n.id));
                                    }), this.logger.debug("Options after traversing: ", _i12), _s5.postMessage(_t22, _i12), { type: "proxy", id: _e25 }));

                                case 47:
                                    _n21 = (0, _slicedToArray3.default)(n, 2), _e26 = _n21[0], _t23 = _n21[1], _r16 = new AudioContext();
                                    return _context9.abrupt("return", (this.audioContexts.set(_e26, _r16), this.audioNodes.set(_t23, _r16.destination), { type: "proxy", id: _e26, baseLatency: _r16.baseLatency, currentTime: _r16.currentTime, outputLatency: _r16.outputLatency, sampleRate: _r16.sampleRate, sinkId: _r16.sinkId, state: _r16.state }));

                                case 49:
                                    _n22 = (0, _slicedToArray3.default)(n, 4), _e27 = _n22[0], _t24 = _n22[1], _i13 = _n22[2], _s6 = _n22[3];

                                    if (!this.audioContexts.has(_e27)) {
                                        _context9.next = 58;
                                        break;
                                    }

                                    _n23 = this.audioContexts.get(_e27), _a5 = _n23["create" + _i13];
                                    _s6 = _s6.map(function (e) {
                                        return "proxy" === e.type ? r.findProxySubject(e.id) : e;
                                    });_o3 = _a5.apply(_n23, _s6);
                                    this.audioNodes.set(_t24, _o3);_d3 = null;
                                    if (_o3.stream) {
                                        _e28 = _o3.stream.getTracks().map(function (e) {
                                            return r.makeTrackTO(e, _t24);
                                        });
                                        _d3 = this.makeStreamTO(_o3.stream, _t24), _d3.tracks = _e28;
                                    }return _context9.abrupt("return", { id: _t24, channelCount: _o3.channelCount, channelCountMode: _o3.channelCountMode, channelInterpretation: _o3.channelInterpretation, numberOfInputs: _o3.numberOfInputs, numberOfOutputs: _o3.numberOfOutputs, fftSize: _o3.fftSize, frequencyBinCount: _o3.frequencyBinCount, maxDecibels: _o3.maxDecibels, minDecibels: _o3.minDecibels, smoothingTimeConstant: _o3.smoothingTimeConstant, stream: _d3 });

                                case 58:
                                    return _context9.abrupt("return", {});

                                case 59:
                                    _n24 = (0, _slicedToArray3.default)(n, 1), _e29 = _n24[0];
                                    if (this.audioContexts.has(_e29)) {
                                        this.audioContexts.get(_e29).close(), this.audioContexts.delete(_e29);
                                    }return _context9.abrupt("return", {});

                                case 62:
                                    _n25 = (0, _slicedToArray3.default)(n, 4), _e30 = _n25[0], _t25 = _n25[1], _r17 = _n25[2], _i14 = _n25[3], _s7 = this.audioNodes.get(_e30), _a6 = this.findProxySubject(_t25.id);
                                    return _context9.abrupt("return", (_s7 && _a6 && _s7.connect(_a6, _r17 || 0, _i14 || 0), {}));

                                case 64:
                                    _n26 = (0, _slicedToArray3.default)(n, 4), _e31 = _n26[0], _t26 = _n26[1], _r18 = _n26[2], _i15 = _n26[3], _s8 = this.audioNodes.get(_e31), _a7 = this.findProxySubject(_t26.id);
                                    return _context9.abrupt("return", (_s8 && _a7 && _s8.disconnect(_a7, _r18 || 0, _i15 || 0), {}));

                                case 66:
                                    _n27 = (0, _slicedToArray3.default)(n, 2), _e32 = _n27[0], _t27 = _n27[1];
                                    if (this.audioNodes.has(_e32)) {
                                        this.audioNodes.get(_e32).type = _t27;
                                    }return _context9.abrupt("return", {});

                                case 69:
                                    _n28 = (0, _slicedToArray3.default)(n, 2), _e33 = _n28[0], _t28 = _n28[1];
                                    if (this.audioNodes.has(_e33)) {
                                        this.audioNodes.get(_e33).start(_t28);
                                    }return _context9.abrupt("return", {});

                                case 72:
                                    _n29 = (0, _slicedToArray3.default)(n, 2), _e34 = _n29[0], _t29 = _n29[1];
                                    if (this.audioNodes.has(_e34)) {
                                        this.audioNodes.get(_e34).stop(_t29);
                                    }return _context9.abrupt("return", {});

                                case 75:
                                    _n30 = (0, _slicedToArray3.default)(n, 3), _e35 = _n30[0], _t30 = _n30[1], _r19 = _n30[2];
                                    if (this.audioNodes.has(_e35)) {
                                        _n31 = this.audioNodes.get(_e35);
                                        _n31.gain ? _n31.gain.setValueAtTime(_t30, _r19 || _n31.context.currentTime) : _n31.frequency && _n31.frequency.setValueAtTime(_t30, _r19 || _n31.context.currentTime);
                                    }return _context9.abrupt("return", {});

                                case 78:
                                    _n32 = (0, _slicedToArray3.default)(n, 3), _e36 = _n32[0], _t31 = _n32[1], _r20 = _n32[2];
                                    if (this.audioNodes.has(_e36)) {
                                        _n33 = this.audioNodes.get(_e36);
                                        _n33.frequency && _n33.frequency.linearRampToValueAtTime(_t31, _r20 || _n33.context.currentTime);
                                    }return _context9.abrupt("return", {});

                                case 81:
                                    _n34 = (0, _slicedToArray3.default)(n, 1), _e37 = _n34[0];
                                    _context9.t2 = _e37;
                                    _context9.next = 85;
                                    return this.getPeerConnection(_e37);

                                case 85:
                                    _context9.t3 = function (e) {
                                        return r.makeReceiverTO(e);
                                    };

                                    _context9.t4 = _context9.sent.getReceivers().map(_context9.t3);
                                    return _context9.abrupt("return", {
                                        pcId: _context9.t2,
                                        receivers: _context9.t4
                                    });

                                case 88:
                                    _n35 = (0, _slicedToArray3.default)(n, 1), _e38 = _n35[0];
                                    _context9.t5 = _e38;
                                    _context9.next = 92;
                                    return this.getPeerConnection(_e38);

                                case 92:
                                    _context9.t6 = function (e) {
                                        return r.makeSenderTO(e);
                                    };

                                    _context9.t7 = _context9.sent.getSenders().map(_context9.t6);
                                    return _context9.abrupt("return", {
                                        pcId: _context9.t5,
                                        senders: _context9.t7
                                    });

                                case 95:
                                    _n36 = (0, _slicedToArray3.default)(n, 4), _e39 = _n36[0], _t32 = _n36[1], _r21 = _n36[2], _i16 = _n36[3], _s9 = this.dtmfSenders.get(_e39);
                                    return _context9.abrupt("return", (_s9 && _s9.insertDTMF(_t32, _r21, _i16), {}));

                                case 97:
                                    _n37 = (0, _slicedToArray3.default)(n, 1);
                                    _e40 = _n37[0];
                                    _context9.next = 101;
                                    return this.getPeerConnection(_e40);

                                case 101:
                                    _t33 = _context9.sent.getTransceivers();
                                    return _context9.abrupt("return", (_t33 = _t33.map(function (e) {
                                        return e.id = e.id ? e.id : crypto.randomUUID(), r.makeTransceiverTO(e);
                                    }), { pcId: _e40, transceivers: _t33 }));

                                case 103:
                                    return _context9.abrupt("return", {});

                                case 104:
                                    _n38 = (0, _toArray3.default)(n);
                                    _e41 = _n38[0];
                                    _t34 = _n38[1];
                                    _i17 = _n38[2];
                                    _s10 = _n38.slice(3);
                                    _context9.next = 111;
                                    return this.getPeerConnection(_t34);

                                case 111:
                                    _a8 = _context9.sent;
                                    _o4 = [];
                                    _s10.forEach(function (e) {
                                        var t = r.streams.get(e.proxy.id);t && _o4.push(t);
                                    });_d4 = this.tracks.get(_i17.id);

                                    if (!_d4) {
                                        _context9.next = 120;
                                        break;
                                    }

                                    _n39 = [_d4].concat(_o4), _i18 = _a8.addTrack.apply(_a8, _n39);
                                    _i18.id = _e41;_s11 = this.makeSenderTO(_i18);
                                    return _context9.abrupt("return", (_s11.pcId = _t34, _s11.senders = _a8.getSenders().map(function (e) {
                                        return r.makeSenderTO(e);
                                    }), _s11.receivers = _a8.getReceivers().map(function (e) {
                                        return r.makeReceiverTO(e);
                                    }), _s11.transceivers = _a8.getTransceivers().map(function (e) {
                                        return r.makeTransceiverTO(e);
                                    }), _s11));

                                case 120:
                                    return _context9.abrupt("return", {});

                                case 121:
                                    _n40 = (0, _slicedToArray3.default)(n, 4);
                                    _e42 = _n40[0];
                                    _t35 = _n40[1];
                                    _i19 = _n40[2];
                                    _s12 = _n40[3];
                                    _context9.next = 128;
                                    return this.getPeerConnection(_e42);

                                case 128:
                                    _a9 = _context9.sent;
                                    if ("string" != typeof _i19 && (_i19 = this.tracks.get(_i19.id)), _s12 && _s12.streams) {
                                        _e43 = [];
                                        _s12.streams.forEach(function (t) {
                                            if (t.proxy) {
                                                var _n41 = r.streams.get(t.proxy.id);_e43.push(_n41);
                                            }
                                        }), _s12.streams = _e43;
                                    }_o5 = _a9.addTransceiver(_i19, _s12);
                                    _o5.id = _t35.id, this.transceivers.set(_t35.id, _o5), _o5.sender && (_o5.sender.id = _t35.sender.id, this.senders.set(_t35.sender.id, _o5.sender)), _o5.receiver && (_o5.receiver.id = _t35.receiver.id, this.receivers.set(_t35.receiver.id, _o5.receiver));_d5 = this.makeTransceiverTO(_o5);
                                    return _context9.abrupt("return", (_d5.pcId = _e42, _d5.senders = _a9.getSenders().map(function (e) {
                                        return r.makeSenderTO(e);
                                    }), _d5.receivers = _a9.getReceivers().map(function (e) {
                                        return r.makeReceiverTO(e);
                                    }), _d5.transceivers = _a9.getTransceivers().map(function (e) {
                                        return r.makeTransceiverTO(e);
                                    }), _d5));

                                case 134:
                                    _n42 = (0, _slicedToArray3.default)(n, 1), _e44 = _n42[0];
                                    return _context9.abrupt("return", (this.closePeerConnection(_e44), {}));

                                case 136:
                                    _n43 = (0, _slicedToArray3.default)(n, 2), _e45 = _n43[0], _t36 = _n43[1], _r22 = this.streams.get(_t36.id);
                                    _context9.next = 139;
                                    return this.getPeerConnection(_e45);

                                case 139:
                                    _context9.t8 = _r22;

                                    _context9.sent.addStream(_context9.t8);

                                    return _context9.abrupt("return", _t36);

                                case 142:
                                    _n44 = (0, _slicedToArray3.default)(n, 2);
                                    _e46 = _n44[0];
                                    _t37 = _n44[1];
                                    _context9.next = 147;
                                    return this.getPeerConnection(_e46);

                                case 147:
                                    _r23 = _context9.sent;
                                    _context9.next = 150;
                                    return _r23.getStats(_t37);

                                case 150:
                                    _i20 = _context9.sent;
                                    _s13 = [];
                                    return _context9.abrupt("return", (_i20.forEach(function (e) {
                                        var t = Object.assign({}, e);_s13.push(t);
                                    }), _s13));

                                case 153:
                                    _n45 = (0, _slicedToArray3.default)(n, 1), _e47 = _n45[0];

                                    if (!this.senders.has(_e47)) {
                                        _context9.next = 160;
                                        break;
                                    }

                                    _context9.next = 157;
                                    return this.senders.get(_e47).getStats();

                                case 157:
                                    _t38 = _context9.sent;
                                    _n46 = [];
                                    return _context9.abrupt("return", (_t38.forEach(function (e) {
                                        var t = Object.assign({}, e);_n46.push(t);
                                    }), _n46));

                                case 160:
                                    return _context9.abrupt("return", []);

                                case 161:
                                    _n47 = (0, _slicedToArray3.default)(n, 1), _e48 = _n47[0];

                                    if (!this.receivers.has(_e48)) {
                                        _context9.next = 168;
                                        break;
                                    }

                                    _context9.next = 165;
                                    return this.receivers.get(_e48).getStats();

                                case 165:
                                    _t39 = _context9.sent;
                                    _n48 = [];
                                    return _context9.abrupt("return", (_t39.forEach(function (e) {
                                        var t = { id: e.id ? e.id : crypto.randomUUID(), type: e.type, concealedSamples: e.concealedSamples };_n48.push(t);
                                    }), _n48));

                                case 168:
                                    return _context9.abrupt("return", {});

                                case 169:
                                    _n49 = (0, _slicedToArray3.default)(n, 2), _e49 = _n49[0], _t40 = _n49[1], _r24 = this.senders.get(_e49), _i21 = _t40 ? this.tracks.get(_t40.id) : null;
                                    _context9.t9 = _i21 && _r24;

                                    if (!_context9.t9) {
                                        _context9.next = 174;
                                        break;
                                    }

                                    _context9.next = 174;
                                    return _r24.replaceTrack(_i21);

                                case 174:
                                    return _context9.abrupt("return", {});

                                case 175:
                                    _n50 = (0, _slicedToArray3.default)(n, 2);
                                    _e50 = _n50[0];
                                    _t41 = _n50[1];
                                    _context9.next = 180;
                                    return this.getPeerConnection(_e50);

                                case 180:
                                    _r25 = _context9.sent;
                                    _i22 = this.senders.get(_t41.id);
                                    return _context9.abrupt("return", (_i22 && _r25.removeTrack(_i22), {}));

                                case 183:
                                    _n51 = (0, _slicedToArray3.default)(n, 2);
                                    _e51 = _n51[0];
                                    _r26 = _n51[1];
                                    _context9.next = 188;
                                    return this.getPeerConnection(_e51);

                                case 188:
                                    _i23 = _context9.sent;
                                    _context9.next = 191;
                                    return _i23.createOffer(_r26);

                                case 191:
                                    _s14 = _context9.sent;
                                    return _context9.abrupt("return", (this.offers.set(t, _s14), { id: t, type: _s14.type, sdp: _s14.sdp }));

                                case 193:
                                    _n52 = (0, _slicedToArray3.default)(n, 2);
                                    _e52 = _n52[0];
                                    _r27 = _n52[1];
                                    _context9.next = 198;
                                    return this.getPeerConnection(_e52);

                                case 198:
                                    _i24 = _context9.sent;
                                    _context9.next = 201;
                                    return _i24.createAnswer(_r27);

                                case 201:
                                    _s15 = _context9.sent;
                                    return _context9.abrupt("return", (this.answers.set(t, _s15), { id: t, type: _s15.type, sdp: _s15.sdp }));

                                case 203:
                                    _n53 = (0, _slicedToArray3.default)(n, 2), _e53 = _n53[0], _t42 = _n53[1], _r28 = "offer" === _t42.type ? this.offers : this.answers, _i25 = _t42.id ? _r28.get(_t42.id) : _t42;

                                    if (!_i25) {
                                        _context9.next = 212;
                                        break;
                                    }

                                    _i25.sdp = _t42.sdp;_context9.next = 208;
                                    return this.getPeerConnection(_e53);

                                case 208:
                                    _n54 = _context9.sent;
                                    _context9.next = 211;
                                    return _n54.setLocalDescription(_i25);

                                case 211:
                                    return _context9.abrupt("return", _t42);

                                case 212:
                                    return _context9.abrupt("return", {});

                                case 213:
                                    _n55 = (0, _slicedToArray3.default)(n, 2);
                                    _e54 = _n55[0];
                                    _t43 = _n55[1];
                                    _context9.next = 218;
                                    return this.getPeerConnection(_e54);

                                case 218:
                                    _r29 = _context9.sent;
                                    _context9.next = 221;
                                    return _r29.setRemoteDescription(_t43);

                                case 221:
                                    return _context9.abrupt("return", _t43);

                                case 222:
                                    _n56 = (0, _slicedToArray3.default)(n, 2), _e55 = _n56[0], _t44 = _n56[1], _r30 = _t44 ? new RTCIceCandidate({ sdpMLineIndex: _t44.sdpMLineIndex, candidate: _t44.candidate }) : null;
                                    _context9.next = 225;
                                    return this.getPeerConnection(_e55);

                                case 225:
                                    _context9.t10 = _r30;

                                    _context9.sent.addIceCandidate(_context9.t10);

                                    return _context9.abrupt("return", _t44);

                                case 228:
                                    _n57 = (0, _slicedToArray3.default)(n, 2);
                                    _e56 = _n57[0];
                                    _i26 = _n57[1];
                                    _context9.next = 233;
                                    return this.getPeerConnection(_e56);

                                case 233:
                                    _s16 = _context9.sent;

                                    if (!(_s16.pendingEvents || (_s16.pendingEvents = new Map()), _s16.eventPromises || (_s16.eventPromises = new Map()), _s16.pendingEvents.has(_i26))) {
                                        _context9.next = 241;
                                        break;
                                    }

                                    _context9.next = 237;
                                    return this.getPendingEvent(_s16, _i26);

                                case 237:
                                    _e57 = _context9.sent;
                                    this.sendEvent(a.ADD_PC_EVENT_LISTENER, t, _e57);_context9.next = 242;
                                    break;

                                case 241:
                                    if (!_s16[_i26]) {
                                        _n58 = function _n58(n) {
                                            var i = null;if (n.type === o.ICE_CANDIDATE) {
                                                r.logger.debug("event: ", n);var _t45 = n.candidate,
                                                    _a10 = null;_t45 && (_a10 = { sdpMLineIndex: _t45.sdpMLineIndex, sdpMid: _t45.sdpMid, candidate: _t45.candidate, type: _t45.type, foundation: _t45.foundation, protocol: _t45.protocol, address: _t45.address, port: _t45.port, priority: _t45.priority, url: _t45.url, relayProtocol: _t45.relayProtocol, component: _t45.compoonent, relatedAddress: _t45.relatedAddress, relatedPort: _t45.relatedPort, tcpType: _t45.tcpType, usernameFragment: _t45.usernameFragment }), i = { pcId: _e56, eventName: n.type, type: "proxy", candidate: _a10 }, r.gatherPeerConnectionState(i, _s16);
                                            } else n.type === o.SIG_STATE_CHANGE ? (i = { pcId: _e56, eventName: n.type, type: "proxy" }, r.gatherPeerConnectionState(i, _s16)) : n.type === o.TRACK ? (i = { pcId: _e56, eventName: n.type, type: "proxy", streams: [], senders: [], receivers: [], track: r.makeTrackTO(n.track) }, i.streams = n.streams.map(function (e) {
                                                return r.makeStreamTO(e);
                                            }), r.gatherPeerConnectionState(i, _s16)) : n.type === o.CONN_STATE_CHANGE || n.type === o.ICE_CONN_STATE_CHANGE || n.type === o.ICE_GATHER_STATE_CHANGE || n.type === o.NEGOTIATION_NEEDED ? (i = { pcId: _e56, eventName: n.type, type: "proxy" }, r.gatherPeerConnectionState(i, _s16)) : r.logger.warn("Ignored event, type: " + n.type + ", event: " + JSON.stringify(n));i && r.processPendingEvents(_s16, n, i, a.ADD_PC_EVENT_LISTENER, t);
                                        };

                                        _s16[_i26] = _n58, _s16.addEventListener(_i26, _n58);
                                    }

                                case 242:
                                    return _context9.abrupt("return", null);

                                case 243:
                                    _n59 = (0, _slicedToArray3.default)(n, 3), _e58 = _n59[0], _i27 = _n59[1], _s17 = _n59[2], _o6 = this.tracks.get(_e58);

                                    if (!_o6) {
                                        _context9.next = 254;
                                        break;
                                    }

                                    if (!(_o6.pendingEvents || (_o6.pendingEvents = new Map()), _o6.eventPromises || (_o6.eventPromises = new Map()), _o6.pendingEvents.has(_i27))) {
                                        _context9.next = 252;
                                        break;
                                    }

                                    _context9.next = 248;
                                    return this.getPendingEvent(_o6, _i27);

                                case 248:
                                    _e59 = _context9.sent;
                                    this.sendEvent(a.ADD_TRACK_EVENT_LISTENER, t, _e59);_context9.next = 253;
                                    break;

                                case 252:
                                    if (!_o6[_i27]) {
                                        _n60 = function _n60(n) {
                                            if (Object.values(d).includes(_i27)) {
                                                var _i28 = { trackId: _e58, eventName: n.type, type: "proxy" };_i28 && r.processPendingEvents(_o6, n, _i28, a.ADD_TRACK_EVENT_LISTENER, t);
                                            } else r.logger.warn("Ignored event: " + JSON.stringify(n));
                                        };

                                        _o6[_i27] = _n60, _o6.addEventListener(_i27, _n60, _s17);
                                    }

                                case 253:
                                    return _context9.abrupt("return", null);

                                case 254:
                                    return _context9.abrupt("return", {});

                                case 255:
                                    _n61 = (0, _slicedToArray3.default)(n, 2);
                                    _e60 = _n61[0];
                                    _i29 = _n61[1];
                                    _context9.next = 260;
                                    return this.getWorker(_e60);

                                case 260:
                                    _s18 = _context9.sent;

                                    if (!(_s18.pendingEvents || (_s18.pendingEvents = new Map()), _s18.eventPromises || (_s18.eventPromises = new Map()), _s18.pendingEvents.has(_i29))) {
                                        _context9.next = 268;
                                        break;
                                    }

                                    _context9.next = 264;
                                    return this.getPendingEvent(_s18, _i29);

                                case 264:
                                    _e61 = _context9.sent;
                                    this.sendEvent(a.ADD_WORKER_EVENT_LISTENER, t, _e61);_context9.next = 269;
                                    break;

                                case 268:
                                    if (!_s18[_i29]) {
                                        _n62 = function _n62(n) {
                                            if (r.logger.debug("Received event: ", n), Object.values(l).includes(_i29)) {
                                                var _i30 = { wId: _e60, eventName: n.type, type: "proxy", data: n.data };_i30 && r.processPendingEvents(_s18, n, _i30, a.ADD_WORKER_EVENT_LISTENER, t);
                                            } else r.logger.warn("Ignored event: " + JSON.stringify(n), n);
                                        };

                                        _s18[_i29] = _n62, _s18.addEventListener(_i29, _n62);
                                    }

                                case 269:
                                    return _context9.abrupt("return", null);

                                case 270:
                                    _n63 = (0, _slicedToArray3.default)(n, 3), _e62 = _n63[0], _i31 = _n63[1], _s19 = _n63[2], _o7 = this.dtmfSenders.get(_e62);

                                    if (!(_o7.pendingEvents || (_o7.pendingEvents = new Map()), _o7.eventPromises || (_o7.eventPromises = new Map()), _o7.pendingEvents.has(_i31))) {
                                        _context9.next = 278;
                                        break;
                                    }

                                    _context9.next = 274;
                                    return this.getPendingEvent(_o7, _i31);

                                case 274:
                                    _e63 = _context9.sent;
                                    this.sendEvent(a.ADD_DTMF_EVENT_LISTENER, t, _e63);_context9.next = 279;
                                    break;

                                case 278:
                                    if (!_o7[_i31]) {
                                        _n64 = function _n64(n) {
                                            if (Object.values(c).includes(_i31)) {
                                                var _i32 = { dtmfId: _e62, eventName: n.type, type: n.type, tone: n.tone };r.processPendingEvents(_o7, n, _i32, a.ADD_DTMF_EVENT_LISTENER, t);
                                            } else r.logger.warn("Ignored event: " + JSON.stringify(n));
                                        };

                                        _o7[_i31] = _n64, _o7.addEventListener(_i31, _n64, _s19);
                                    }

                                case 279:
                                    return _context9.abrupt("return", null);

                                case 280:
                                    _n65 = (0, _slicedToArray3.default)(n, 2), _e64 = _n65[0], _t46 = _n65[1];

                                    if (!("audio" !== _t46.kind && "video" !== _t46.kind)) {
                                        _context9.next = 283;
                                        break;
                                    }

                                    return _context9.abrupt("return", (this.logger.warn("Invalid media type: " + JSON.stringify(_t46)), null));

                                case 283:
                                    _r31 = document.createElement(_t46.kind);
                                    return _context9.abrupt("return", (Object.assign(_r31, _t46), document.body.appendChild(_r31), this.mediaElements.set(_e64, _r31), { id: _e64, sinkId: _r31.sinkId }));

                                case 285:
                                    _n66 = (0, _slicedToArray3.default)(n, 2), _e65 = _n66[0], _t47 = _n66[1], _r32 = this.mediaElements.get(_e65);

                                    if (!_r32) {
                                        _context9.next = 290;
                                        break;
                                    }

                                    _context9.next = 289;
                                    return _r32.setSinkId(_t47);

                                case 289:
                                    return _context9.abrupt("return", { id: _e65, sinkId: _r32.sinkId });

                                case 290:
                                    return _context9.abrupt("return", {});

                                case 291:
                                    _n67 = (0, _slicedToArray3.default)(n, 2), _e66 = _n67[0], _t48 = _n67[1], _r33 = _t48 ? this.getStream(_t48.id) : null;
                                    return _context9.abrupt("return", (this.mediaElements.has(_e66) && (this.mediaElements.get(_e66).srcObject = _r33), {}));

                                case 293:
                                    _n68 = (0, _slicedToArray3.default)(n, 2), _e67 = _n68[0], _t49 = _n68[1];
                                    return _context9.abrupt("return", (this.mediaElements.has(_e67) && (this.mediaElements.get(_e67).muted = _t49), { id: _e67, muted: _t49 }));

                                case 295:
                                    _n69 = (0, _slicedToArray3.default)(n, 2), _e68 = _n69[0], _t50 = _n69[1], _r34 = this.mediaElements.get(_e68);
                                    return _context9.abrupt("return", (_r34 && (_r34.hidden = _t50), {}));

                                case 297:
                                    _n70 = (0, _slicedToArray3.default)(n, 2), _e69 = _n70[0], _t51 = _n70[1];
                                    return _context9.abrupt("return", (this.mediaElements.has(_e69) && (this.mediaElements.get(_e69).volume = _t51), {}));

                                case 299:
                                    _n71 = (0, _slicedToArray3.default)(n, 1), _e70 = _n71[0];
                                    return _context9.abrupt("return", (this.mediaElements.has(_e70) && this.mediaElements.get(_e70).play(), {}));

                                case 301:
                                    _n72 = (0, _slicedToArray3.default)(n, 1), _e71 = _n72[0];
                                    return _context9.abrupt("return", (this.mediaElements.has(_e71) && this.mediaElements.get(_e71).pause(), {}));

                                case 303:
                                    _n73 = (0, _slicedToArray3.default)(n, 1), _e72 = _n73[0];
                                    return _context9.abrupt("return", (this.mediaElements.has(_e72) && (this.mediaElements.get(_e72).remove(), this.mediaElements.delete(_e72)), {}));

                                case 305:
                                    _n74 = (0, _slicedToArray3.default)(n, 2), _e73 = _n74[0], _t52 = _n74[1], _r35 = this.tracks.get(_e73);
                                    return _context9.abrupt("return", _r35 ? (_r35.enabled = _t52, this.makeTrackTO(_r35)) : {});

                                case 307:
                                    _n75 = (0, _slicedToArray3.default)(n, 1), _e74 = _n75[0], _t53 = this.tracks.get(_e74);
                                    return _context9.abrupt("return", (_t53 && (_t53.stop(), this.tracks.delete(_e74)), {}));

                                case 309:
                                    _n76 = (0, _slicedToArray3.default)(n, 1), _e75 = _n76[0], _t54 = this.tracks.get(_e75);
                                    return _context9.abrupt("return", _t54 ? _t54.getSettings() : {});

                                case 311:
                                    _n77 = (0, _slicedToArray3.default)(n, 2), _e76 = _n77[0], _t55 = _n77[1];

                                    if (!this.senders.has(_e76)) {
                                        _context9.next = 315;
                                        break;
                                    }

                                    _n78 = this.senders.get(_e76).createEncodedStreams();
                                    return _context9.abrupt("return", (this.streams.set(_t55.id, _n78), this.streams.set(_t55.readable.id, _n78.readable), this.streams.set(_t55.writable.id, _n78.writable), _t55));

                                case 315:
                                    return _context9.abrupt("return", {});

                                case 316:
                                    _n79 = (0, _slicedToArray3.default)(n, 2), _e77 = _n79[0], _t56 = _n79[1];

                                    if (!this.receivers.has(_e77)) {
                                        _context9.next = 320;
                                        break;
                                    }

                                    _n80 = this.receivers.get(_e77).createEncodedStreams();
                                    return _context9.abrupt("return", (this.streams.set(_t56.id, _n80), this.streams.set(_t56.readable.id, _n80.readable), this.streams.set(_t56.writable.id, _n80.writable), _t56));

                                case 320:
                                    return _context9.abrupt("return", {});

                                case 321:
                                    _n81 = (0, _slicedToArray3.default)(n, 1), _e78 = _n81[0];
                                    return _context9.abrupt("return", (_e78.pcIds.forEach(function (e) {
                                        r.closePeerConnection(e);
                                    }), _e78.streamIds.forEach(function (e) {
                                        var t = r.streams.get(e);t && ("function" == typeof t.getTracks && t.getTracks().forEach(function (e) {
                                            e.stop();
                                        }), r.streams.delete(e));
                                    }), _e78.trackIds.forEach(function (e) {
                                        r.tracks.delete(e);
                                    }), _e78.workerIds.forEach(function (e) {
                                        var t = r.workers.get(e);t && t.terminate(), r.workers.delete(e);
                                    }), _e78.mediaElementIds.forEach(function (e) {
                                        var t = r.mediaElements.get(e);t && (t.remove(), r.mediaElements.delete(e));
                                    }), _e78.transceiverIds.forEach(function (e) {
                                        r.transceivers.delete(e);
                                    }), _e78.senderIds.forEach(function (e) {
                                        r.senders.delete(e);
                                    }), _e78.receiverIds.forEach(function (e) {
                                        r.receivers.delete(e);
                                    }), {}));

                                case 323:
                                    return _context9.abrupt("return", null);

                                case 324:
                                case "end":
                                    return _context9.stop();
                            }
                        }
                    }, _callee9, this);
                }));

                function callWebRTCApi(_x10, _x11, _x12) {
                    return _ref9.apply(this, arguments);
                }

                return callWebRTCApi;
            }()
        }, {
            key: "sendMessage",
            value: function sendMessage(e) {
                this.logger.debug("Sending message: " + JSON.stringify(e));var t = e.message,
                    n = A.deflateRaw(JSON.stringify(t));e.message = n;var r = new TextEncoder().encode(JSON.stringify(e)),
                    i = r.byteLength,
                    s = new Uint8Array([i, i >> 8, i >> 16, i >> 24]);this.channel.sendMessage(s), this.channel.sendMessage(r);
            }
        }, {
            key: "sendEvent",
            value: function sendEvent(e, t, n) {
                var r = { requestId: t, type: "event", message: { api: e, event: n } };this.sendMessage(r);
            }
        }, {
            key: "sendResponse",
            value: function sendResponse(e, t, n) {
                var r = { requestId: t, type: "response", message: { api: e, response: n } };this.sendMessage(r);
            }
        }, {
            key: "sendError",
            value: function sendError(e, t, n) {
                var r = { requestId: t, type: "error", message: { api: e, error: n } };this.sendMessage(r);
            }
        }, {
            key: "handleWebRTCApi",
            value: function () {
                var _ref10 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee10(e) {
                    var _t57;

                    return _regenerator2.default.wrap(function _callee10$(_context10) {
                        while (1) {
                            switch (_context10.prev = _context10.next) {
                                case 0:
                                    _context10.prev = 0;
                                    _context10.next = 3;
                                    return this.callWebRTCApi(e.message.api, e.requestId, e.message.args);

                                case 3:
                                    _t57 = _context10.sent;
                                    _t57 && this.sendResponse(e.message.api, e.requestId, _t57);_context10.next = 10;
                                    break;

                                case 7:
                                    _context10.prev = 7;
                                    _context10.t0 = _context10["catch"](0);
                                    this.logger.error("Error handling WebRTC API: " + JSON.stringify(e) + ", message: " + (_context10.t0.message ? _context10.t0.message : "(no message)") + ", error: " + JSON.stringify(_context10.t0)), this.logger.trace(_context10.t0), this.sendError(e.message.api, e.requestId, { name: _context10.t0.name, message: _context10.t0.message });
                                case 10:
                                case "end":
                                    return _context10.stop();
                            }
                        }
                    }, _callee10, this, [[0, 7]]);
                }));

                function handleWebRTCApi(_x13) {
                    return _ref10.apply(this, arguments);
                }

                return handleWebRTCApi;
            }()
        }, {
            key: "processPendingEvents",
            value: function processPendingEvents(e, t, n, r, i) {
                if (e.pendingEvents.has(t.type)) {
                    e.pendingEvents.get(t.type).push(n);var _r36 = e.eventPromises.get(t.type);_r36 && _r36.forEach(function (e) {
                        e.resolve(n);
                    });
                } else this.sendEvent(r, i, n), e.pendingEvents.set(t.type, []);
            }
        }, {
            key: "handleMessage",
            value: function handleMessage(e) {
                var t = e.message,
                    n = A.inflateRaw(t),
                    r = this.decoder.decode(n);e.message = JSON.parse(r), e.message.api && e.requestId && e.message.args ? this.handleWebRTCApi(e) : (this.logger.error("Invalid message format: " + JSON.stringify(e)), this.logger.trace(e));
            }
        }, {
            key: "onClose",
            value: function onClose(e) {
                this.logger.info("WebRTC redir custom channel closed: " + JSON.stringify(e) + "\""), this.release();
            }
        }, {
            key: "release",
            value: function release() {
                var e = this;this.streams.forEach(function (e) {
                    e.getTracks().forEach(function (e) {
                        e.stop();
                    });
                }), this.mediaElements.forEach(function (e) {
                    e.remove();
                }), this.pcs.forEach(function (t, n) {
                    e.closePeerConnection(n);
                }), this.certs.clear();
            }
        }]);
        return _class;
    }();
});

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"babel-runtime/helpers/asyncToGenerator":16,"babel-runtime/helpers/classCallCheck":17,"babel-runtime/helpers/createClass":18,"babel-runtime/helpers/slicedToArray":22,"babel-runtime/helpers/toArray":23,"babel-runtime/helpers/typeof":24,"babel-runtime/regenerator":27}],2:[function(require,module,exports){
(function (global){(function (){
//===============================================
// By using these Developer Materials, you accept and agree to comply with
// the terms of the Cloud Software Group Developer Terms of Use found here
// (https://www.cloud.com/legal)
//===============================================



var $jscomp={scope:{},getGlobal:function(e){return"undefined"!=typeof window&&window===e?e:"undefined"!=typeof global?global:e}};$jscomp.global=$jscomp.getGlobal(this);$jscomp.initSymbol=function(){$jscomp.global.Symbol||($jscomp.global.Symbol=$jscomp.Symbol);$jscomp.initSymbol=function(){}};$jscomp.symbolCounter_=0;$jscomp.Symbol=function(e){return"jscomp_symbol_"+e+$jscomp.symbolCounter_++};
$jscomp.initSymbolIterator=function(){$jscomp.initSymbol();$jscomp.global.Symbol.iterator||($jscomp.global.Symbol.iterator=$jscomp.global.Symbol("iterator"));$jscomp.initSymbolIterator=function(){}};$jscomp.makeIterator=function(e){$jscomp.initSymbolIterator();if(e[$jscomp.global.Symbol.iterator])return e[$jscomp.global.Symbol.iterator]();var l=0;return{next:function(){return l==e.length?{done:!0}:{done:!1,value:e[l++]}}}};
$jscomp.arrayFromIterator=function(e){for(var l,p=[];!(l=e.next()).done;)p.push(l.value);return p};$jscomp.arrayFromIterable=function(e){return e instanceof Array?e:$jscomp.arrayFromIterator($jscomp.makeIterator(e))};
$jscomp.inherits=function(e,l){function p(){}p.prototype=l.prototype;e.prototype=new p;e.prototype.constructor=e;for(var b in l)if($jscomp.global.Object.defineProperties){var a=$jscomp.global.Object.getOwnPropertyDescriptor(l,b);a&&$jscomp.global.Object.defineProperty(e,b,a)}else e[b]=l[b]};$jscomp.array=$jscomp.array||{};$jscomp.array.done_=function(){return{done:!0,value:void 0}};
$jscomp.array.arrayIterator_=function(e,l){e instanceof String&&(e=String(e));var p=0;$jscomp.initSymbol();$jscomp.initSymbolIterator();var b={},a=(b.next=function(){if(p<e.length){var b=p++;return{value:l(b,e[b]),done:!1}}a.next=$jscomp.array.done_;return $jscomp.array.done_()},b[Symbol.iterator]=function(){return a},b);return a};
$jscomp.array.findInternal_=function(e,l,p){e instanceof String&&(e=String(e));for(var b=e.length,a=0;a<b;a++){var c=e[a];if(l.call(p,c,a,e))return{i:a,v:c}}return{i:-1,v:void 0}};
$jscomp.array.from=function(e,l,p){l=void 0===l?function(a){return a}:l;var b=[];$jscomp.initSymbol();$jscomp.initSymbolIterator();if(e[Symbol.iterator]){$jscomp.initSymbol();$jscomp.initSymbolIterator();e=e[Symbol.iterator]();for(var a;!(a=e.next()).done;)b.push(l.call(p,a.value))}else{a=e.length;for(var c=0;c<a;c++)b.push(l.call(p,e[c]))}return b};$jscomp.array.of=function(e){for(var l=[],p=0;p<arguments.length;++p)l[p-0]=arguments[p];return $jscomp.array.from(l)};
$jscomp.array.entries=function(){return $jscomp.array.arrayIterator_(this,function(e,l){return[e,l]})};$jscomp.array.entries$install=function(){Array.prototype.entries||(Array.prototype.entries=$jscomp.array.entries)};$jscomp.array.keys=function(){return $jscomp.array.arrayIterator_(this,function(e){return e})};$jscomp.array.keys$install=function(){Array.prototype.keys||(Array.prototype.keys=$jscomp.array.keys)};$jscomp.array.values=function(){return $jscomp.array.arrayIterator_(this,function(e,l){return l})};
$jscomp.array.values$install=function(){Array.prototype.values||(Array.prototype.values=$jscomp.array.values)};$jscomp.array.copyWithin=function(e,l,p){var b=this.length;e=Number(e);l=Number(l);p=Number(null!=p?p:b);if(e<l)for(p=Math.min(p,b);l<p;)l in this?this[e++]=this[l++]:(delete this[e++],l++);else for(p=Math.min(p,b+l-e),e+=p-l;p>l;)--p in this?this[--e]=this[p]:delete this[e];return this};$jscomp.array.copyWithin$install=function(){Array.prototype.copyWithin||(Array.prototype.copyWithin=$jscomp.array.copyWithin)};
$jscomp.array.fill=function(e,l,p){null!=p&&e.length||(p=this.length||0);p=Number(p);for(l=Number((void 0===l?0:l)||0);l<p;l++)this[l]=e;return this};$jscomp.array.fill$install=function(){Array.prototype.fill||(Array.prototype.fill=$jscomp.array.fill)};$jscomp.array.find=function(e,l){return $jscomp.array.findInternal_(this,e,l).v};$jscomp.array.find$install=function(){Array.prototype.find||(Array.prototype.find=$jscomp.array.find)};
$jscomp.array.findIndex=function(e,l){return $jscomp.array.findInternal_(this,e,l).i};$jscomp.array.findIndex$install=function(){Array.prototype.findIndex||(Array.prototype.findIndex=$jscomp.array.findIndex)};$jscomp.Map=function(e){e=void 0===e?[]:e;this.data_={};this.head_=$jscomp.Map.createHead_();this.size=0;if(e){e=$jscomp.makeIterator(e);for(var l=e.next();!l.done;l=e.next())l=l.value,this.set(l[0],l[1])}};
$jscomp.Map.checkBrowserConformance_=function(){var e=$jscomp.global.Map;if(!e||!e.prototype.entries||!Object.seal)return!1;try{var l=Object.seal({x:4}),p=new e($jscomp.makeIterator([[l,"s"]]));if("s"!=p.get(l)||1!=p.size||p.get({x:4})||p.set({x:4},"t")!=p||2!=p.size)return!1;var b=p.entries(),a=b.next();if(a.done||a.value[0]!=l||"s"!=a.value[1])return!1;a=b.next();return a.done||4!=a.value[0].x||"t"!=a.value[1]||!b.next().done?!1:!0}catch(c){return!1}};
$jscomp.Map.createHead_=function(){var e={};return e.previous=e.next=e.head=e};$jscomp.Map.getId_=function(e){if(!(e instanceof Object))return String(e);$jscomp.Map.key_ in e||e instanceof Object&&Object.isExtensible&&Object.isExtensible(e)&&$jscomp.Map.defineProperty_(e,$jscomp.Map.key_,++$jscomp.Map.index_);return $jscomp.Map.key_ in e?e[$jscomp.Map.key_]:" "+e};
$jscomp.Map.prototype.set=function(e,l){var p=this.maybeGetEntry_(e),b=p.id,a=p.list,p=p.entry;a||(a=this.data_[b]=[]);p?p.value=l:(p={next:this.head_,previous:this.head_.previous,head:this.head_,key:e,value:l},a.push(p),this.head_.previous.next=p,this.head_.previous=p,this.size++);return this};
$jscomp.Map.prototype["delete"]=function(e){var l=this.maybeGetEntry_(e);e=l.id;var p=l.list,b=l.index;return(l=l.entry)&&p?(p.splice(b,1),p.length||delete this.data_[e],l.previous.next=l.next,l.next.previous=l.previous,l.head=null,this.size--,!0):!1};$jscomp.Map.prototype.clear=function(){this.data_={};this.head_=this.head_.previous=$jscomp.Map.createHead_();this.size=0};$jscomp.Map.prototype.has=function(e){return!!this.maybeGetEntry_(e).entry};
$jscomp.Map.prototype.get=function(e){return(e=this.maybeGetEntry_(e).entry)&&e.value};$jscomp.Map.prototype.maybeGetEntry_=function(e){var l=$jscomp.Map.getId_(e),p=this.data_[l];if(p)for(var b=0;b<p.length;b++){var a=p[b];if(e!==e&&a.key!==a.key||e===a.key)return{id:l,list:p,index:b,entry:a}}return{id:l,list:p,index:-1,entry:void 0}};$jscomp.Map.prototype.entries=function(){return this.iter_(function(e){return[e.key,e.value]})};$jscomp.Map.prototype.keys=function(){return this.iter_(function(e){return e.key})};
$jscomp.Map.prototype.values=function(){return this.iter_(function(e){return e.value})};$jscomp.Map.prototype.forEach=function(e,l){for(var p=$jscomp.makeIterator(this.entries()),b=p.next();!b.done;b=p.next())b=b.value,e.call(l,b[1],b[0],this)};
$jscomp.Map.prototype.iter_=function(e){var l=this,p=this.head_;$jscomp.initSymbol();$jscomp.initSymbolIterator();var b={};return b.next=function(){if(p){for(;p.head!=l.head_;)p=p.previous;for(;p.next!=p.head;)return p=p.next,{done:!1,value:e(p)};p=null}return{done:!0,value:void 0}},b[Symbol.iterator]=function(){return this},b};$jscomp.Map.index_=0;$jscomp.Map.defineProperty_=Object.defineProperty?function(e,l,p){Object.defineProperty(e,l,{value:String(p)})}:function(e,l,p){e[l]=String(p)};
$jscomp.Map.Entry_=function(){};$jscomp.Map.ASSUME_NO_NATIVE=!1;$jscomp.Map$install=function(){$jscomp.initSymbol();$jscomp.initSymbolIterator();!$jscomp.Map.ASSUME_NO_NATIVE&&$jscomp.Map.checkBrowserConformance_()?$jscomp.Map=$jscomp.global.Map:($jscomp.initSymbol(),$jscomp.initSymbolIterator(),$jscomp.Map.prototype[Symbol.iterator]=$jscomp.Map.prototype.entries,$jscomp.initSymbol(),$jscomp.Map.key_=Symbol("map-id-key"));$jscomp.Map$install=function(){}};$jscomp.math=$jscomp.math||{};
$jscomp.math.clz32=function(e){e=Number(e)>>>0;if(0===e)return 32;var l=0;0===(e&4294901760)&&(e<<=16,l+=16);0===(e&4278190080)&&(e<<=8,l+=8);0===(e&4026531840)&&(e<<=4,l+=4);0===(e&3221225472)&&(e<<=2,l+=2);0===(e&2147483648)&&l++;return l};$jscomp.math.imul=function(e,l){e=Number(e);l=Number(l);var p=e&65535,b=l&65535;return p*b+((e>>>16&65535)*b+p*(l>>>16&65535)<<16>>>0)|0};$jscomp.math.sign=function(e){e=Number(e);return 0===e||isNaN(e)?e:0<e?1:-1};
$jscomp.math.log10=function(e){return Math.log(e)/Math.LN10};$jscomp.math.log2=function(e){return Math.log(e)/Math.LN2};$jscomp.math.log1p=function(e){e=Number(e);if(.25>e&&-.25<e){for(var l=e,p=1,b=e,a=0,c=1;a!=b;)l*=e,c*=-1,b=(a=b)+c*l/++p;return b}return Math.log(1+e)};$jscomp.math.expm1=function(e){e=Number(e);if(.25>e&&-.25<e){for(var l=e,p=1,b=e,a=0;a!=b;)l*=e/++p,b=(a=b)+l;return b}return Math.exp(e)-1};$jscomp.math.cosh=function(e){e=Number(e);return(Math.exp(e)+Math.exp(-e))/2};
$jscomp.math.sinh=function(e){e=Number(e);return 0===e?e:(Math.exp(e)-Math.exp(-e))/2};$jscomp.math.tanh=function(e){e=Number(e);if(0===e)return e;var l=Math.exp(2*-Math.abs(e)),l=(1-l)/(1+l);return 0>e?-l:l};$jscomp.math.acosh=function(e){e=Number(e);return Math.log(e+Math.sqrt(e*e-1))};$jscomp.math.asinh=function(e){e=Number(e);if(0===e)return e;var l=Math.log(Math.abs(e)+Math.sqrt(e*e+1));return 0>e?-l:l};
$jscomp.math.atanh=function(e){e=Number(e);return($jscomp.math.log1p(e)-$jscomp.math.log1p(-e))/2};
$jscomp.math.hypot=function(e,l,p){for(var b=[],a=2;a<arguments.length;++a)b[a-2]=arguments[a];e=Number(e);l=Number(l);for(var c=Math.max(Math.abs(e),Math.abs(l)),Q=$jscomp.makeIterator(b),a=Q.next();!a.done;a=Q.next())c=Math.max(c,Math.abs(a.value));if(1E100<c||1E-100>c){e/=c;l/=c;Q=e*e+l*l;b=$jscomp.makeIterator(b);for(a=b.next();!a.done;a=b.next())a=a.value,a=Number(a)/c,Q+=a*a;return Math.sqrt(Q)*c}c=e*e+l*l;b=$jscomp.makeIterator(b);for(a=b.next();!a.done;a=b.next())a=a.value,a=Number(a),c+=
a*a;return Math.sqrt(c)};$jscomp.math.trunc=function(e){e=Number(e);if(isNaN(e)||Infinity===e||-Infinity===e||0===e)return e;var l=Math.floor(Math.abs(e));return 0>e?-l:l};$jscomp.math.cbrt=function(e){if(0===e)return e;e=Number(e);var l=Math.pow(Math.abs(e),1/3);return 0>e?-l:l};$jscomp.number=$jscomp.number||{};$jscomp.number.isFinite=function(e){return"number"!==typeof e?!1:!isNaN(e)&&Infinity!==e&&-Infinity!==e};
$jscomp.number.isInteger=function(e){return $jscomp.number.isFinite(e)?e===Math.floor(e):!1};$jscomp.number.isNaN=function(e){return"number"===typeof e&&isNaN(e)};$jscomp.number.isSafeInteger=function(e){return $jscomp.number.isInteger(e)&&Math.abs(e)<=$jscomp.number.MAX_SAFE_INTEGER};$jscomp.number.EPSILON=Math.pow(2,-52);$jscomp.number.MAX_SAFE_INTEGER=9007199254740991;$jscomp.number.MIN_SAFE_INTEGER=-9007199254740991;$jscomp.object=$jscomp.object||{};
$jscomp.object.assign=function(e,l){for(var p=[],b=1;b<arguments.length;++b)p[b-1]=arguments[b];p=$jscomp.makeIterator(p);for(b=p.next();!b.done;b=p.next())if(b=b.value)for(var a in b)Object.prototype.hasOwnProperty.call(b,a)&&(e[a]=b[a]);return e};$jscomp.object.is=function(e,l){return e===l?0!==e||1/e===1/l:e!==e&&l!==l};$jscomp.Set=function(e){e=void 0===e?[]:e;this.map_=new $jscomp.Map;if(e){e=$jscomp.makeIterator(e);for(var l=e.next();!l.done;l=e.next())this.add(l.value)}this.size=this.map_.size};
$jscomp.Set.checkBrowserConformance_=function(){var e=$jscomp.global.Set;if(!e||!e.prototype.entries||!Object.seal)return!1;var l=Object.seal({x:4}),e=new e($jscomp.makeIterator([l]));if(e.has(l)||1!=e.size||e.add(l)!=e||1!=e.size||e.add({x:4})!=e||2!=e.size)return!1;var e=e.entries(),p=e.next();if(p.done||p.value[0]!=l||p.value[1]!=l)return!1;p=e.next();return p.done||p.value[0]==l||4!=p.value[0].x||p.value[1]!=p.value[0]?!1:e.next().done};
$jscomp.Set.prototype.add=function(e){this.map_.set(e,e);this.size=this.map_.size;return this};$jscomp.Set.prototype["delete"]=function(e){e=this.map_["delete"](e);this.size=this.map_.size;return e};$jscomp.Set.prototype.clear=function(){this.map_.clear();this.size=0};$jscomp.Set.prototype.has=function(e){return this.map_.has(e)};$jscomp.Set.prototype.entries=function(){return this.map_.entries()};$jscomp.Set.prototype.values=function(){return this.map_.values()};
$jscomp.Set.prototype.forEach=function(e,l){var p=this;this.map_.forEach(function(b){return e.call(l,b,b,p)})};$jscomp.Set.ASSUME_NO_NATIVE=!1;$jscomp.Set$install=function(){!$jscomp.Set.ASSUME_NO_NATIVE&&$jscomp.Set.checkBrowserConformance_()?$jscomp.Set=$jscomp.global.Set:($jscomp.Map$install(),$jscomp.initSymbol(),$jscomp.initSymbolIterator(),$jscomp.Set.prototype[Symbol.iterator]=$jscomp.Set.prototype.values);$jscomp.Set$install=function(){}};$jscomp.string=$jscomp.string||{};
$jscomp.string.noRegExp_=function(e,l){if(e instanceof RegExp)throw new TypeError("First argument to String.prototype."+l+" must not be a regular expression");};
$jscomp.string.fromCodePoint=function(e){for(var l=[],p=0;p<arguments.length;++p)l[p-0]=arguments[p];for(var p="",l=$jscomp.makeIterator(l),b=l.next();!b.done;b=l.next()){b=b.value;b=+b;if(0>b||1114111<b||b!==Math.floor(b))throw new RangeError("invalid_code_point "+b);65535>=b?p+=String.fromCharCode(b):(b-=65536,p+=String.fromCharCode(b>>>10&1023|55296),p+=String.fromCharCode(b&1023|56320))}return p};
$jscomp.string.repeat=function(e){var l=this.toString();if(0>e||1342177279<e)throw new RangeError("Invalid count value");e|=0;for(var p="";e;)if(e&1&&(p+=l),e>>>=1)l+=l;return p};$jscomp.string.repeat$install=function(){String.prototype.repeat||(String.prototype.repeat=$jscomp.string.repeat)};
$jscomp.string.codePointAt=function(e){var l=this.toString(),p=l.length;e=Number(e)||0;if(0<=e&&e<p){e|=0;var b=l.charCodeAt(e);if(55296>b||56319<b||e+1===p)return b;e=l.charCodeAt(e+1);return 56320>e||57343<e?b:1024*(b-55296)+e+9216}};$jscomp.string.codePointAt$install=function(){String.prototype.codePointAt||(String.prototype.codePointAt=$jscomp.string.codePointAt)};
$jscomp.string.includes=function(e,l){l=void 0===l?0:l;$jscomp.string.noRegExp_(e,"includes");return-1!==this.toString().indexOf(e,l)};$jscomp.string.includes$install=function(){String.prototype.includes||(String.prototype.includes=$jscomp.string.includes)};
$jscomp.string.startsWith=function(e,l){l=void 0===l?0:l;$jscomp.string.noRegExp_(e,"startsWith");var p=this.toString();e+="";for(var b=p.length,a=e.length,c=Math.max(0,Math.min(l|0,p.length)),Q=0;Q<a&&c<b;)if(p[c++]!=e[Q++])return!1;return Q>=a};$jscomp.string.startsWith$install=function(){String.prototype.startsWith||(String.prototype.startsWith=$jscomp.string.startsWith)};
$jscomp.string.endsWith=function(e,l){$jscomp.string.noRegExp_(e,"endsWith");var p=this.toString();e+="";void 0===l&&(l=p.length);for(var b=Math.max(0,Math.min(l|0,p.length)),a=e.length;0<a&&0<b;)if(p[--b]!=e[--a])return!1;return 0>=a};$jscomp.string.endsWith$install=function(){String.prototype.endsWith||(String.prototype.endsWith=$jscomp.string.endsWith)};
(function(e,l){"object"===typeof exports&&"object"===typeof module?module.exports=l():"function"===typeof define&&define.amd?define([],l):"object"===typeof exports?exports.CitrixWebRTC=l():e.CitrixWebRTC=l()})(self,function(){return function(){function e(b){var a=p[b];if(void 0!==a)return a.exports;a=p[b]={exports:{}};l[b].call(a.exports,a,a.exports,e);return a.exports}var l={945:function(b,a,c){var e=this&&this.__extends||function(){var a=function(k,v){a=Object.setPrototypeOf||{__proto__:[]}instanceof
Array&&function(a,g){a.__proto__=g}||function(a,g){for(var k in g)g.hasOwnProperty(k)&&(a[k]=g[k])};return a(k,v)};return function(k,v){function b(){this.constructor=k}a(k,v);k.prototype=null===v?Object.create(v):(b.prototype=v.prototype,new b)}}();Object.defineProperty(a,"__esModule",{value:!0});a.AudioElement=void 0;var u=c(658),h=c(550),d=c(851),w=c(946),q;(function(a){a.Init="Init";a.PlayStarted="PlayStarted";a.PauseCalled="PauseCalled"})(q||(q={}));b=function(a){function k(){var k=a.call(this,
null,h.class_id_t.AudioElement,0,u.ProxyMode.Local)||this;k.sinkId_="";k.srcObject_=null;k.loop_=!1;k.notiState=q.Init;return k}e(k,a);k.prototype.setSinkId=function(a){var k=this;d.logger.log(this.user_friendly_id()+".setSinkId: set sinkId to "+a);return new Promise(function(g,b){k.waitUntilConnected("AudioElement.sinkId").then(function(){var b=k.remoteInvoke(!0,h.method_id_AudioElement_t.sinkId,a);w.getRedirector().getFeatureValue(h.FEATURE_ms_teams_pstn)||(k.sinkId_=a,g());return b}).then(function(){d.logger.log(k.user_friendly_id()+
".setSinkId: success! resolving...");k.sinkId_=a;g()})["catch"](function(a){a=k.logRemoteInvokeError(a,".sinkId setter: failed to connect!");b(a)})})};Object.defineProperty(k.prototype,"sinkId",{get:function(){return this.sinkId_},set:function(a){this.setSinkId(a)},enumerable:!1,configurable:!0});Object.defineProperty(k.prototype,"srcObject",{get:function(){return this.srcObject_},set:function(a){var k=this;d.logger.log(this.user_friendly_id()+".srcObject: set srcObject to "+JSON.stringify(a));a!==
this.srcObject_&&(this.srcObject_=a,this.waitUntilConnected("AudioElement.srcObject").then(function(){return a.syncBarrier()}).then(function(a){d.logger.log(k.user_friendly_id()+".srcObject: set srcObject to s "+JSON.stringify(a));return k.remoteInvoke(!0,h.method_id_AudioElement_t.srcObject,null!==a&&void 0!==a?a.id:"null")}).then(function(){d.logger.log(k.user_friendly_id()+".srcObject setter: remote success!")})["catch"](function(a){k.logRemoteInvokeError(a,".srcObject setter: failed to connect!")}))},
enumerable:!1,configurable:!0});Object.defineProperty(k.prototype,"src",{get:function(){return this.src_},set:function(a){var k=this;d.logger.log(this.user_friendly_id()+".src: set src to "+a);this.src_=a;this.waitUntilConnected("AudioElement.src").then(function(){k.remoteInvoke(!0,h.method_id_AudioElement_t.src,a)})["catch"](function(a){k.logRemoteInvokeError(a,".src setter: failed to connect!")})},enumerable:!1,configurable:!0});k.prototype.play=function(){var a=this;d.logger.log(this.user_friendly_id()+
".play() called.");this.toggleAudio(!0);return new Promise(function(k,g){a.waitUntilConnected("AudioElement.play").then(function(){return a.remoteInvoke(!1,h.method_id_AudioElement_t.play)}).then(function(){k()})["catch"](function(k){a.logRemoteInvokeError(k,".play: failed to connect!");g(k)})})};k.prototype.playEx=function(a,k,g){var b=this;d.logger.log(this.user_friendly_id()+".playEx() src:"+a+" sinkId:"+k+" loop:"+g);this.notiState=q.PlayStarted;this.waitUntilConnected("AudioElement.playEx").then(function(){var a=
[];k&&a.push(b.setSinkId(k));void 0!==g&&null!==g&&(b.loop_=g,a.push(b.remoteInvoke(!0,h.method_id_AudioElement_t.loop,g)));return Promise.all(a)}).then(function(){b.src_=a;return b.remoteInvoke(!0,h.method_id_AudioElement_t.src,a)}).then(function(){return b.play()}).then(function(){if(b.notiState==q.PauseCalled)return d.logger.log(b.user_friendly_id()+".playEx() run deferred pause"),b.doPauseAndDispose()}).then(function(){b.notiState=q.Init;d.logger.log(b.user_friendly_id()+".playEx() done")})["catch"](function(a){b.notiState=
q.Init;b.logRemoteInvokeError(a,".playEx() failed!")})};k.prototype.pause=function(){var a=this;d.logger.log(this.user_friendly_id()+".pause() called.");this.toggleAudio(!1);return new Promise(function(k,g){a.waitUntilConnected("AudioElement.pause").then(function(){return a.remoteInvoke(!1,h.method_id_AudioElement_t.pause)}).then(function(){k()})["catch"](function(k){a.logRemoteInvokeError(k,".pause: failed!");g()})})};k.prototype.doPauseAndDispose=function(){var a=this;d.logger.log(this.user_friendly_id()+
".doPauseAndDispose() called.");this.toggleAudio(!1);return new Promise(function(k,g){a.waitUntilConnected("AudioElement.doPauseAndDispose").then(function(){return a.remoteInvoke(!1,h.method_id_AudioElement_t.pause,[])}).then(function(){d.logger.log(a.user_friendly_id()+".doPauseAndDispose() resolving...");k();a.dispose()})["catch"](function(g){a.logRemoteInvokeError(g,".doPauseAndDispose: failed to connect!")})})};k.prototype.pauseAndDispose=function(){this.notiState==q.PlayStarted?(d.logger.log(this.user_friendly_id()+
".pauseAndDispose() deferred"),this.notiState=q.PauseCalled):this.doPauseAndDispose()};k.prototype.toggleAudio=function(a){this.srcObject_&&(d.logger.log(this.user_friendly_id()+".toggleAudio() toggle audio tracks:"+a),this.srcObject_.toggleAudio(a))};Object.defineProperty(k.prototype,"loop",{get:function(){return this.loop_},set:function(a){var k=this;d.logger.log(this.user_friendly_id()+".loop: set loop to "+a);this.loop_=a;this.waitUntilConnected("AudioElement.loop").then(function(){k.remoteInvoke(!0,
h.method_id_AudioElement_t.loop,a)})["catch"](function(a){k.logRemoteInvokeError(a,".loop setter: failed to connect!")})},enumerable:!1,configurable:!0});k.prototype.dispose=function(){d.logger.log(this.user_friendly_id()+".dispose()");this.src_=this.sinkId_="";this.srcObject_=null;this.loop_=!1;this.release()};return k}(u.ProxyObject);a.AudioElement=b},239:function(b,a,c){a.E=void 0;var e=c(945),u=c(851),h=function(){function a(){this.sinkId=void 0;this.src="";this.loop=void 0;this.element=null}
a.prototype.getSrc=function(){return this.src};a.prototype.setSinkId=function(a){this.sinkId=a};a.prototype.getLoop=function(){return!0===this.loop};a.prototype.setLoop=function(a){this.loop=a};a.prototype.play=function(a){this.element=new e.AudioElement;this.src=a;this.element.playEx(this.src,this.sinkId,this.loop)};a.prototype.pause=function(){this.element&&(this.element.pauseAndDispose(),this.element=null)};a.prototype.release=function(){this.element&&(this.element.dispose(),this.element=null)};
return a}();b=function(){function a(){this.audioIdMap=null;this.audioIdMap=new Map}a.prototype.getNotificationInfo=function(a){if(this.audioIdMap.has(a))return this.audioIdMap.get(a);var b=new h;this.audioIdMap.set(a,b);return b};a.prototype.playNotifyAudio=function(a,b){b&&(u.logger.log("AudioNotification.playNotifyAudio, Remote to Thin Client audioId:"+a+" src:"+b),this.getNotificationInfo(a).play(b))};a.prototype.pauseNotifyAudio=function(a,b){if(this.audioIdMap.has(a)){var d=this.audioIdMap.get(a);
b&&b!=d.getSrc()&&u.logger.log("AudioNotification.pauseNotifyAudio warning: for audioId:"+a+", different param src:"+b+" from org src:"+d.getSrc());d.pause()}else u.logger.log("AudioNotification.pauseNotifyAudio no audioId:"+a+" src:"+b)};a.prototype.setSinkId=function(a,b){if(null!=b&&b.startsWith("speaker:")){u.logger.log("AudioNotification.setSinkId before parsing audioId:"+a+" sinkId:"+b);var d=b.slice(8);u.logger.log("AudioNotification.setSinkId after parsing audioId:"+a+" speakersinkId:"+d);
b=d}this.getNotificationInfo(a).setSinkId(b)};a.prototype.getLoop=function(a){return this.getNotificationInfo(a).getLoop()};a.prototype.setLoop=function(a,b){this.getNotificationInfo(a).setLoop(b)};a.prototype.release=function(){this.audioIdMap.forEach(function(a,b,d){a.release()});this.audioIdMap.clear()};return a}();a.E=b},613:function(b,a,c){var e=this&&this.__extends||function(){var a=function(b,d){a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,
b){for(var d in b)b.hasOwnProperty(d)&&(a[d]=b[d])};return a(b,d)};return function(b,d){function k(){this.constructor=b}a(b,d);b.prototype=null===d?Object.create(d):(k.prototype=d.prototype,new k)}}();Object.defineProperty(a,"__esModule",{value:!0});a.E911Service=void 0;var u=c(550),h=c(658),d=c(851);b=function(a){function b(){var d=a.call(this,null,u.class_id_t.E911Service,0,h.ProxyMode.Local)||this;d.preE911Info_=null;return d}e(b,a);b.prototype.isSameInfo=function(a){if(null==this.preE911Info_&&
null!=a||null!=this.preE911Info_&&null==a||this.preE911Info_.e911.length!=a.e911.length||this.preE911Info_.bssid!=a.bssid||this.preE911Info_.ipv4!=a.ipv4||this.preE911Info_.subnetLengthIpv4!=a.subnetLengthIpv4||this.preE911Info_.ipv6!=a.ipv6||this.preE911Info_.subnetLengthIpv6!=a.subnetLengthIpv6||this.preE911Info_.mac!=a.mac||1E-4<=Math.abs(this.preE911Info_.latitude-a.latitude)||1E-4<=Math.abs(this.preE911Info_.longitude-a.longitude))return!1;for(var k=0;k<a.e911.length;k++)if(this.preE911Info_.e911[k].chassisId!=
a.e911[k].chassisId||this.preE911Info_.e911[k].portId!=a.e911[k].portId)return!1;return!0};Object.defineProperty(b.prototype,"onupdate",{get:function(){return this.onupdate_},set:function(a){var k=this;this.onupdate_=a;this.waitUntilConnected(this.user_friendly_id()+".onupdate").then(function(){var a=k.registerCallbacks(!1,k.isNullCallback(k.onupdate_),u.method_id_E911Service_t.onupdate);a.then(function(a){a=a.params;var g=a[0];a.slice(1);null!==k.preE911Info_&&k.isSameInfo(g)||(d.logger.log(k.user_friendly_id()+
".onupdate",JSON.stringify(g)),k.onupdate_&&k.onupdate_(g),k.preE911Info_=g)});return k.remoteInvoke(!0,u.method_id_E911Service_t.onupdate,a.success)})["catch"](function(){return d.logger.log(k.user_friendly_id()+".onupdate, could not set listener")})},enumerable:!1,configurable:!0});b.prototype.getE911Info=function(){var a=this;return new Promise(function(k,b){a.waitUntilConnected(a.user_friendly_id()+".getE911Info").then(function(){return a.remoteInvoke(!1,u.method_id_E911Service_t.getE911Info)}).then(function(b){d.logger.log(a.user_friendly_id()+
".getE911Info",JSON.stringify(a.param0(b)));k(a.param0(b))})["catch"](function(){d.logger.log(a.user_friendly_id()+".getE911Info promise rejected");b()})})};b.prototype.updateE911Info=function(){var a=this;this.getE911Info().then(function(b){return a.onupdate&&a.onupdate(b)})["catch"](function(){return d.logger.log("Fail to get e911 information!")})};return b}(h.ProxyObject);a.E911Service=b},9:function(b,a,c){var e=this&&this.__extends||function(){var a=function(b,k){a=Object.setPrototypeOf||{__proto__:[]}instanceof
Array&&function(a,b){a.__proto__=b}||function(a,b){for(var g in b)b.hasOwnProperty(g)&&(a[g]=b[g])};return a(b,k)};return function(b,k){function d(){this.constructor=b}a(b,k);b.prototype=null===k?Object.create(k):(d.prototype=k.prototype,new d)}}();Object.defineProperty(a,"__esModule",{value:!0});a.EngineControl=a.VersionType=void 0;var u=c(550),h=c(946),d=c(658),w=c(851);(function(a){a[a.Webrpc=0]="Webrpc";a[a.WebrtcCodecs=1]="WebrtcCodecs";a[a.Receiver=2]="Receiver";a[a.Vda=3]="Vda";a[a.Endpoint=
4]="Endpoint";a[a.TypeScript=5]="TypeScript";a[a.HdxRtcEngine=6]="HdxRtcEngine";a[a.Max=7]="Max"})(a.VersionType||(a.VersionType={}));b=function(a){function b(k){var c=a.call(this,null,u.class_id_t.EngineControl,0,d.ProxyMode.Local)||this;c.clientInfo_="";c.clientInfo_=k;return c}e(b,a);b.prototype.bind=function(){w.logger.log(this.user_friendly_id()+".bind() called.");this.reconstructor(null,u.class_id_t.EngineControl,0)};b.prototype.syncBarrier=function(){var a=this;w.logger.log(this.user_friendly_id()+
".syncBarrier() called.");return new Promise(function(b,d){a.syncBarrierDeep(b,d)&&a.waitUntilConnected("EngineControl.syncBarrier").then(function(){return Promise.all([a.remoteInvoke(!1,u.method_id_EngineControl_t.version,{major:0,minor:0,revision:0,build:0}),a.remoteInvoke(!1,u.method_id_EngineControl_t.feature_flags,[])])}).then(function(b){w.logger.log(a.user_friendly_id()+"received webrpc version and supported feature list.");b=b.map(function(b){return a.param0(b)});a.version_=b[0];a.features_=
b[1];h.getRedirector().setFeatures(a.features_);a.remoteInvoke(!1,u.method_id_EngineControl_t.set_client_info,(a.clientInfo_||"Unknown")+"; vdiShim/"+u.HDXMS_VERSION,h.getRedirector().sessionClientId)["catch"](function(){return w.logger.log(a.user_friendly_id()+" could not set client info")});b=[];for(var d=0,t=a.features_;d<t.length;d++){var m=t[d];"ms_teams_desktop_sharing"===m.name&&m.value?b.push(a.remoteInvoke(!1,u.method_id_EngineControl_t.version_info,[])):"ms_teams_osinfo"===m.name&&m.value?
b.push(a.remoteInvoke(!1,u.method_id_EngineControl_t.osinfo,{family:"",version:"",architecture:"",distro:"",edition:""})):"ms_teams_endpoint_id"===m.name&&m.value?b.push(a.remoteInvoke(!1,u.method_id_EngineControl_t.endpoint_id,{machine_id:"",user_id:""})):"ms_teams_hardware_info"===m.name&&m.value&&b.push(a.remoteInvoke(!1,u.method_id_EngineControl_t.hardware_info))}if(0<b.length)return Promise.all(b)}).then(function(b){if(void 0===b)w.logger.log(a.user_friendly_id()+"release-1905 client.");else{w.logger.log(a.user_friendly_id()+
"release-1906 or later client: received detailed client version list.");for(var d=0;d<b.length;d++){var t=b[d];t.hdr.proc.iid==u.class_id_t.EngineControl&&t.hdr.proc.methodid==u.method_id_EngineControl_t.version_info?a.versions_=a.param0(t):t.hdr.proc.iid==u.class_id_t.EngineControl&&t.hdr.proc.methodid==u.method_id_EngineControl_t.osinfo?a.osinfo_=a.param0(t):t.hdr.proc.iid==u.class_id_t.EngineControl&&t.hdr.proc.methodid==u.method_id_EngineControl_t.endpoint_id?a.endpointid_=a.param0(t):t.hdr.proc.iid==
u.class_id_t.EngineControl&&t.hdr.proc.methodid==u.method_id_EngineControl_t.hardware_info&&(a.hardwareinfo_=a.param0(t))}}a.syncBarrierResolve(a)})["catch"](function(b){b=a.logRemoteInvokeError(b,"failure to retrieve version/feature related client info.");a.syncBarrierReject(b)})})};return b}(d.ProxyObject);a.EngineControl=b},368:function(b,a,c){Object.defineProperty(a,"__esModule",{value:!0});a.Frames=a.FrameTracker=void 0;var e=c(851),u=c(946),h=c(679),d=function(){return function(a,b){this.resolve=
a;this.reject=b}}(),w=function(){function a(){this.name="overlay";this.reqs_=[];u.getRedirector().addProtocolHandler(this)}a.prototype.init=function(a){};a.prototype.reset=function(){this.reqs_.forEach(function(a,b){a.reject()});this.reqs_=[]};a.prototype.on_message=function(a){var b=this;e.logger.log("HDXMS: Overlay <<< "+JSON.stringify(a));if("capabilities"==a.command)new Promise(function(a,k){b.reqs_.push(new d(a,k));u.getRedirector().WSSendObject({v:"overlay",command:"configure",caps:[]})});else{var c=
this.reqs_.shift();void 0!=c?1==a.status&&("track_window"==a.command?c.resolve(a.windowId):"untrack_window"==a.command?c.resolve(a.windowHandle):"configure"==a.command?c.resolve({}):c.reject({})):e.logger.log("spurious response for message: "+a.command)}};a.prototype.registerWindowWithService=function(a){var b=this;return new Promise(function(c,g){var B=u.getRedirector();if(void 0==a){e.logger.log("FrameTrackerProtocol.registerWindowWithService: legacy case");var t=window.getWindowHandleAsHex.bind(window);
if(void 0===t||null===t)e.logger.log("FrameTrackerProtocol.registerWindowWithService: getWindowHandle method is undefined or null"),g({});Promise.all([t(),B.startRedirection(!1,"registerWindowWithService")]).then(function(a){e.logger.log("FrameTracker.registerWindowWithService: set window handle: "+a[0]);B.WSSendObject({v:"overlay",command:"window",windowHandle:a[0]});c(void 0)})}else e.logger.log("FrameTrackerProtocol.registerWindowWithService: new MW case"),B.startRedirection(!1,"registerWindowWithService").then(function(){b.reqs_.push(new d(c,
g));B.WSSendObject({v:"overlay",command:"track_window",windowHandle:a})})})};a.prototype.unregisterWindowWithService=function(a){var b=this;e.logger.log("FrameTrackerProtocol.unregisterWindowWithService(handle: "+a+")");return new Promise(function(c,g){void 0==a?g({}):(b.reqs_.push(new d(c,g)),u.getRedirector().WSSendObject({v:"overlay",command:"untrack_window",windowHandle:a}))})};return a}(),q=function(){function a(b){var d=this;this.running_=!1;this.elements_=[];this.clipRects=new Set;this.videos_=
[];this.connected_=!1;this.yClientAreaOffset_=this.xClientAreaOffset_=0;this.wheelEventHandler=function(a){setTimeout(function(){d.updateAll()},10)};this.scrollEventHandler=function(a){d.updateAll()};this.keyupEventHandler=function(a){"Tab"!=a.code&&"ArrowUp"!=a.code&&"ArrowDown"!=a.code&&"ArrowLeft"!=a.code&&"ArrowRight"!=a.code&&"PageUp"!=a.code&&"PageDown"!=a.code&&"Home"!=a.code&&"End"!=a.code||d.updateAll()};this.resizeEventHandler=function(a){e.logger.log("onWindowResize... update video elements position");
d.updateAll()};e.logger.log("FrameTracker.constructor: (handle: "+b+")");this.handle_=b;this.connectToService();this.observer_=new MutationObserver(function(a){d.updateAll()})}a.prototype.connectToService=function(){var b=this;a.Protocol.registerWindowWithService(this.handle_).then(function(a){e.logger.log("FrameTracker: connected to service. (windowId="+a+")");b.connected_=!0;b.windowId_=a;b.videos_.forEach(function(a){a.sinkId=JSON.stringify(b.windowId_)});b.videos_=[]})};Object.defineProperty(a.prototype,
"handle",{get:function(){return this.handle_},enumerable:!1,configurable:!0});a.prototype.getWindowFromElement=function(a){return a.ownerDocument.defaultView};a.prototype.rectanglesIntersect=function(a,b){return a.x<b.x+b.width&&a.x+a.width>b.x&&a.y<b.y+b.height&&a.y+a.height>b.y?!0:!1};a.prototype.intersectingRect=function(a,b){var d=Math.max(a.left,b.left),g=Math.max(a.top,b.top);return new DOMRect(d,g,Math.min(a.right,b.right)-d,Math.min(a.bottom,b.bottom)-g)};a.prototype.pedigreeCount=function(a,
b){for(var d=0,g=a.parentElement;null!=g&&g!=b;)d++,g=g.parentElement;return{isAncestor:null!=g,pedigree:d}};a.prototype.selectTopmost=function(a,b){var d=this.getBoundingClientRect(a),g=this.getBoundingClientRect(b),d=this.intersectingRect(d,g),g=a.ownerDocument.elementFromPoint(d.left+d.width/2,d.top+d.height/2);if(g==a)return a;if(g==b)return b;d=this.pedigreeCount(a,g);g=this.pedigreeCount(b,g);if(d.isAncestor&&g.isAncestor){if(d.pedigree<g.pedigree)return a;if(g.pedigree<d.pedigree)return b}else{if(d.isAncestor)return a;
if(g.isAncestor)return b}};a.prototype.checkOverlappingVideos=function(a){var b=this,d=this.getBoundingClientRect(a.target);a.overlaps.forEach(function(b){a.target.remoteVideoElement.removeClipRect(b.rect)});a.overlaps=[];this.elements_.forEach(function(g){if(g!=a){var c=g.overlaps.map(function(a){return a.element}).indexOf(a.target);-1!=c&&(c=g.overlaps.splice(c,1)[0],g.target.remoteVideoElement.removeClipRect(c.rect));c=b.getBoundingClientRect(g.target);if(b.rectanglesIntersect(d,c)){var t=b.selectTopmost(a.target,
g.target);t==a.target?(g.overlaps.push({element:a.target,rect:d}),g.target.remoteVideoElement.addClipRect(d)):t==g.target&&(a.overlaps.push({element:g.target,rect:c}),a.target.remoteVideoElement.addClipRect(c))}}})};a.prototype.updateAll=function(){var a=this;this.elements_.forEach(function(b){var d=a.getBoundingClientRect(b.target);if(void 0!==d){var g=b.clientRect;if(void 0===g||g.x!==d.x||g.y!==d.y||g.width!==d.width||g.height!==d.height)b.clientRect=d,b.callback(d),a.checkOverlappingVideos(b)}})};
a.prototype.track=function(a,b){var d=this,g=this.getBoundingClientRect(a);e.logger.log("Track (handle: "+this.handle_+") element frame",a,JSON.stringify(g));console.log(a);this.elements_.push({target:a,clientRect:void 0,callback:b,overlaps:[]});try{e.logger.log("[HdxWebRTC.js] Initializing occlusion for new videoElement"),this.clipRects.forEach(function(b){d.applyOcclusion(a,JSON.parse(b))})}catch(c){e.logger.log("[HdxWebRTC.js] addOcclusionInit failed! "+c)}this.running_||(e.logger.log("Start FrameTracker observer..."),
this.observer_.observe(a.ownerDocument.body,{attributes:!0,childList:!0,subtree:!0}),g=this.getWindowFromElement(a),g.addEventListener("wheel",this.wheelEventHandler),g.addEventListener("scroll",this.scrollEventHandler),g.addEventListener("keyup",this.keyupEventHandler),g.addEventListener("resize",this.resizeEventHandler),this.running_=!0);this.updateAll()};a.prototype.untrack=function(a){e.logger.log("Untrack (handle: "+this.handle_+") element frame",a);var b=-1;this.elements_.forEach(function(g,
d){g.target===a&&(b=d)});if(0<=b&&(this.elements_.splice(b,1),0===this.elements_.length)){e.logger.log("Stop FrameTracker observer...");this.observer_.disconnect();var d=this.getWindowFromElement(a);d.removeEventListener("wheel",this.wheelEventHandler);d.removeEventListener("scroll",this.scrollEventHandler);d.removeEventListener("keyup",this.keyupEventHandler);d.removeEventListener("resize",this.resizeEventHandler);this.running_=!1}};a.prototype.applyOcclusion=function(a,b){var d=this.getBoundingClientRect(a);
this.rectanglesIntersect(b,d)&&void 0!==a.remoteVideoElement&&a.remoteVideoElement.addClipRect(b)};a.prototype.addOcclusion=function(a){var b=this;e.logger.log("[HdxWebRTC.js] Adding occlusion "+JSON.stringify(a));e.logger.log("[HdxWebRTC.js] Tracking '"+this.elements_.length+"' elements.");this.clipRects.add(JSON.stringify(a));this.elements_.forEach(function(d){b.applyOcclusion(d.target,a)})};a.prototype.removeOcclusion=function(a){e.logger.log("[HdxWebRTC.js] Removing occlusion "+JSON.stringify(a));
e.logger.log("[HdxWebRTC.js] Tracking '"+this.elements_.length+"' elements.");this.clipRects["delete"](JSON.stringify(a));this.elements_.forEach(function(b){void 0!==b.target.remoteVideoElement&&b.target.remoteVideoElement.removeClipRect(a)})};a.prototype.setClientAreaOffset=function(a,b){this.xClientAreaOffset_=a;this.yClientAreaOffset_=b};a.prototype.getBoundingClientRect=function(a){a=a.getBoundingClientRect();a.x+=this.xClientAreaOffset_;a.y+=this.yClientAreaOffset_;return a};a.prototype.newVideoElement=
function(b){var d=this;e.logger.log("FrameTracker.newVideoElement: (id: "+b.id+")");if(void 0!==b.remoteVideoElement)e.logger.log("Video element is already configured!!!");else{b.id||(b.id="ctx-vid-"+a.videoElementIDs++);var c=new h.VideoElement(b.id,this.getWindowFromElement(b));this.connected_?(e.logger.log("FrameTracker.newVideoElement: initializing video element with sink id "+this.windowId_),c.sinkId=JSON.stringify(this.windowId_)):(e.logger.log("FrameTracker.newVideoElement: video element awaiting stable window state"),
this.videos_.push(c));c.onloadedmetadata=function(){b.dispatchEvent(new Event("loadedmetadata"))};c.ontimeupdate=function(){b.dispatchEvent(new Event("timeupdate"))};c.onconnectionstatechange=function(){"connected"==c.connectionState?d.track(b,function(a){c.setFrame(a)}):d.untrack(b)};delete b.remoteVideoElement;Object.defineProperty(b,"remoteVideoElement",{writable:!0,configurable:!0,value:null});b.remoteVideoElement=c;delete b.srcObject;Object.defineProperty(b,"srcObject",{configurable:!0,get:function(){return c.srcObject},
set:function(a){e.logger.log("VDI Shim set video element srcObject "+a);c.srcObject=a}});delete b.videoWidth;Object.defineProperty(b,"videoWidth",{configurable:!0,get:function(){return c.videoWidth}});delete b.videoHeight;Object.defineProperty(b,"videoHeight",{configurable:!0,get:function(){return c.videoHeight}})}};a.prototype.disposeVideoElement=function(a){e.logger.log("FrameTracker.disposeVideoElement: (id: "+a.id+")");var b=a.remoteVideoElement;if(void 0!=b){var d=this.videos_.findIndex(function(a){return a.Id==
b.Id});-1<d&&this.videos_.splice(d,1);b.dispose();a.remoteVideoElement=void 0}};a.videoElementIDs=0;a.Protocol=new w;return a}();a.FrameTracker=q;b=function(){function a(b){this.frames_=[];b&&this.frames_.push(new q(void 0))}a.prototype.newFrame=function(a){e.logger.log("Frames.newFrame: (handle: "+a+")");var b=this.findFrame(a);void 0==b&&(b=new q(a),this.frames_.push(b));return b};a.prototype.disposeFrame=function(a){e.logger.log("Frames.disposeFrame: (handle: "+a+")");var b=this.frames_.findIndex(function(b){return b.handle==
a});-1<b&&(q.Protocol.unregisterWindowWithService(a).then(function(a){e.logger.log("Untrack window (handle: "+a+") successful")}),this.frames_.splice(b,1))};a.prototype.findFrame=function(a){e.logger.log("Frames.findFrame: (handle: "+a+")");return void 0!=a?this.frames_.find(function(b){return b.handle==a}):this.frames_[0]};a.prototype.reconnect=function(){e.logger.log("Frames.reconnect()");this.frames_.forEach(function(a){a.connectToService()})};return a}();a.Frames=b},247:function(b,a){Object.defineProperty(a,
"__esModule",{value:!0});a.getGC=a.GC=void 0;var c=function(){function a(b){this.parent_=this.object_=null;this.children_=[];this.object_=b}a.prototype.addChild=function(a){a.parent_!=this&&(a.parent_=this,this.children_.push(a))};a.prototype.removeChild=function(a){var b=this.children_.indexOf(a);this.children_.splice(b,1);a.parent_=null};return a}(),e=function(){function a(){this.root_=new c(null)}a.prototype.trackObject=function(a,b){void 0===b&&(b=null);if(null===this.findNode(a,this.root_)){var e=
this.findNode(b,this.root_),h=new c(a);e?e.addChild(h):this.root_.addChild(h)}};a.prototype.releaseObject=function(a){a=this.findNode(a,this.root_);if(null===a||a===this.root_)return!1;this.destroyNodeObjectRecurse(a);a.parent_.removeChild(a);return!0};a.prototype.destroyNodeObjectRecurse=function(a){for(var b=0,c=a.children_;b<c.length;b++)this.destroyNodeObjectRecurse(c[b]);a.object_.destroy()};a.prototype.setParent=function(a,b){var c=this.findNode(a,this.root_);if(null===c)return!1;var e=this.findNode(b,
this.root_);if(null===e)return!1;if(c.parent_===e)return!0;c.parent_.removeChild(c);e.addChild(c);return!0};a.prototype.reset=function(){this.root_.children_=[]};a.prototype.findNode=function(a,b){if(b.object_===a)return b;for(var c=null,e=0,k=b.children_;e<k.length&&(c=this.findNode(a,k[e]),null===c);e++);return c};return a}();a.GC=e;var u=new e;a.getGC=function(){return u}},946:function(b,a,c){Object.defineProperty(a,"__esModule",{value:!0});a.getRedirector=a.HdxMediaStream=a.RedirectionStatus=
a.WebrpcStatusCode=void 0;var e=c(658),u=c(851),h=c(550),d=c(545),w=c(394),q=c(691),n=function(){return function(a,b,d,m,c,k,x,r){void 0===r&&(r=void 0);this.resolve=a;this.reject=b;this.iid=d;this.oid=m;this.cbid=c;this.oneShot=k;this.mid=x;this.completion_cb=r}}(),k;(function(a){a[a.rpc_status_success=0]="rpc_status_success";a[a.rpc_status_unspecified_error=1]="rpc_status_unspecified_error";a[a.rpc_status_unexpected=2]="rpc_status_unexpected";a[a.rpc_status_index_out_of_bounds=3]="rpc_status_index_out_of_bounds";
a[a.rpc_status_missing_parameter=4]="rpc_status_missing_parameter";a[a.rpc_status_missing_return_value=5]="rpc_status_missing_return_value";a[a.rpc_status_invalid_object=6]="rpc_status_invalid_object";a[a.rpc_status_user_exception=7]="rpc_status_user_exception";a[a.rpc_status_system_error=8]="rpc_status_system_error"})(k=a.WebrpcStatusCode||(a.WebrpcStatusCode={}));var v;(function(a){a[a.NotRedirected=0]="NotRedirected";a[a.Connecting=1]="Connecting";a[a.Binding=2]="Binding";a[a.Redirected=3]="Redirected"})(v=
a.RedirectionStatus||(a.RedirectionStatus={}));b=function(){function a(){this.sessionId_="";this.handlers_=[];this.pingactive=!1;this.status=v.NotRedirected;this.reqs=[];this.cbs=[];this.deferredActions=[];this.telemetry_=new w.Telemetry;this.screenshare_=new q.ScreenShareUtil;this.stateChangeNotifcations=[];this.vdafeatures_=[]}Object.defineProperty(a.prototype,"telemetry",{get:function(){return this.telemetry_},enumerable:!1,configurable:!0});Object.defineProperty(a.prototype,"screenshare",{get:function(){return this.screenshare_},
enumerable:!1,configurable:!0});a.prototype.setRemoteSessionInfoCb=function(a){this.remoteSessionInfoCb=a};a.prototype.setFeatures=function(a){this.features=a;this.screenshare.onInitComplete();this.handlers_.forEach(function(b,d){b.init(a)})};a.prototype.getFeatureValue=function(a){if(this.features){var b=this.features.find(function(b){return b.name===a});return void 0!==b?b.value:!1}return!1};a.prototype.getVDAFeatureValue=function(a){return void 0!==this.vdafeatures_.find(function(b){return b===
a})?!0:!1};a.prototype.onRedirectionComplete=function(){for(;this.deferredActions&&0<this.deferredActions.length;)this.deferredActions.shift().post(this.status==v.Redirected)};a.prototype.connectToService=function(){u.logger.log("Redirection status: Connecting...");this.status=v.Connecting;return new Promise(function(a,b){var d=new WebSocket("wss://127.0.0.1:9002");d.onopen=function(){a(d)};d.onerror=function(a){u.logger.log("websocket connection error: "+a.type);b(a)}})};a.prototype.waitUntilRedirected=
function(a){var b=this;return new Promise(function(d,c){b.status==v.Redirected?d():0>=a?c():setTimeout(function(){u.logger.log("waitUntilRedirected() timeout. count="+a);b.status!=v.Redirected?b.waitUntilRedirected(--a).then(function(){d()})["catch"](function(){c()}):d()},2E3)})};a.prototype.handleRemoteSessionInfo=function(){var a=this;u.logger.log("handleRemoteSessionInfo called.");var b=this;b.remoteSessionInfoCb?b.remoteSessionInfoCb().then(function(d){u.logger.log("remoteSessionInfo success! info:"+
JSON.stringify(d));u.logger.log("Redirection status: Redirected");b.status=v.Redirected;b.pingConnectionEnd();(d=window.onVdiClientConnected)&&d();a.telemetry.SendTelemetryInit();b.onRedirectionComplete()})["catch"](function(){u.logger.log("remoteSessionInfo failure!");b.suspendRedirection(!0);b.onRedirectionComplete()}):(u.logger.log("remoteSessionInfoCb is invalid!"),b.suspendRedirection(!0),b.onRedirectionComplete())};a.prototype.startRedirection=function(a,b){var d=this,c=window.onVdiClientDisconnected;
return new Promise(function(g,k){d.status!=v.Redirected?(u.logger.log("Attempting to start redirection: "+b),!1===a?d.deferredActions.push(new e.deferred_action(g,k,b)):d.connectToService().then(function(a){u.logger.log("Redirection status: Binding...");d.status=v.Binding;d.websocket=a;d.websocket.onmessage=function(a){d.onWSMessage(a)};d.websocket.onclose=function(a){d.onWSClose(a)};g();d.handleRemoteSessionInfo()})["catch"](function(a){u.logger.log("Unable to connect to websocket service! "+a);
k();d.suspendRedirection(!0);d.onRedirectionComplete();c&&c(!0)})):(u.logger.log("Redirection already started."),g())})};a.prototype.terminateOptimization=function(){this.websocket.close(1E3,"normal disconnecting!")};a.prototype.suspendRedirection=function(a){var b=this;u.logger.log("Suspending redirection.");this.handlers_.forEach(function(a,b){a.reset()});var d=window.onVdiClientDisconnected;try{d&&d(!1)}catch(c){u.logger.log("suspendRedirection(): exception during vdiClientDisconnect: "+c.message)}u.logger.log("Redirection status: NotRedirected");
var g=this.status;this.status=v.NotRedirected;var k=!1,d=window.getCitrixMSTeamsRedir,x=window.getCitrixWebrtcRedir,r;d?r=d:x&&(r=x);r&&r().then(function(d){u.logger.log("sucesss on disconnect"+d);"1"==d&&(k=!0,u.logger.log("Reg key exists while disconnecting"));a&&g===v.Redirected&&1==k&&(u.logger.log("Calling ping not normal disconnect"),b.pingConnectionBegin(!1))})["catch"](function(){u.logger.log("Failure to Read MS Teams redir Reg Key, not retrying...")});this.dispatchStateChangeNotifications()};
a.prototype.onWSOpen=function(){};a.prototype.onWSClose=function(a){u.logger.log("disconnected from websocket service. "+JSON.stringify(a));try{a&&1E3==a.code?this.suspendRedirection(!1):this.suspendRedirection(!0)}catch(b){u.logger.log("suspendRedirection(): exception closing WebSocket: "+b.message)}};a.prototype.onWSError=function(){try{this.suspendRedirection(!0)}catch(a){u.logger.log("suspendRedirection(): exception on WebSocket error: "+a.message)}};a.prototype.WSSendObjectWrapper=function(a,
b,d,c){var g=!0;b!=h.class_id_t.EngineControl||d!=h.method_id_EngineControl_t.ctor&&d!=h.method_id_EngineControl_t.version&&d!=h.method_id_EngineControl_t.feature_flags||(g=!1);var k=!0;if(g&&(k=!1,void 0!=this.features))for(var g=0,r=this.features;g<r.length;g++){var A=r[g];if(!0===A.value&&A.name==a){k=!0;break}}return 1==k?this.WSSendObject(c):Promise.reject("Cannot invoke method that is not supported by webrpc: iid("+b+") mid("+d+")")};a.prototype.WSSendObject=function(a){var b=this;return new Promise(function(d,
c){if("webrtc"==a.v){var g=a.hdr.proc.iid,k=a.hdr.proc.methodid,r=a.objref.oid;a.hdr.destroy||(g=new n(d,c,g,r,0,!0,k),b.reqs.push(g));g=JSON.stringify(a);u.logger.trace("WSSendObject: >>> "+h.WebrpcClassLibInfoUtil.composeClassInfoData(a)+" "+g);try{b.websocket.readyState==WebSocket.OPEN?b.websocket.send(g):(u.logger.log("WSSendObject(): warinig: web socket is not open, dropping the message!"),d({}))}catch(A){u.logger.log("WSSendObject(): exception: "+A.message),c(A.message)}}else if("overlay"==
a.v){g=JSON.stringify(a);u.logger.log("HDXMS: SendOverlayData: >>> "+g+"'");try{b.websocket.readyState==WebSocket.OPEN?b.websocket.send(g):(u.logger.log("WSSendObject(): warinig: web socket is not open, dropping the message!"),d({}))}catch(A){u.logger.log("WSSendObject(): exception: "+A.message),c(A.message)}}else if("telemetry"==a.v){g=JSON.stringify(a);u.logger.log("HDXMS: SendTelemetryData: >>> "+g+"'");try{b.websocket.readyState==WebSocket.OPEN?b.websocket.send(g):(u.logger.log("WSSendObject(): warinig: web socket is not open, dropping the message!"),
d({}))}catch(A){u.logger.log("WSSendObject(): exception: "+A.message),c(A.message)}}else if("appsharing"==a.v){g=JSON.stringify(a);u.logger.log("HDXMS: SendScreenSharingData: >>> "+g+"'");try{b.websocket.readyState==WebSocket.OPEN?b.websocket.send(g):(u.logger.log("WSSendObject(): warinig: web socket is not open, dropping the message!"),d({}))}catch(A){u.logger.log("WSSendObject(): exception: "+A.message),c(A.message)}}else u.logger.log("HDXMS: WSSendObject: Unknown protocol: '"+JSON.stringify(a)+
"'")})};a.prototype.webrpcStatusCodeToName=function(a){switch(a){case k.rpc_status_success:a="rpc_status_success";break;case k.rpc_status_unspecified_error:a="rpc_status_unspecified_error";break;case k.rpc_status_unexpected:a="rpc_status_unexpected";break;case k.rpc_status_index_out_of_bounds:a="rpc_status_index_out_of_bounds";break;case k.rpc_status_missing_parameter:a="rpc_status_missing_parameter";break;case k.rpc_status_missing_return_value:a="rpc_status_missing_return_value";break;case k.rpc_status_invalid_object:a=
"rpc_status_invalid_object";break;case k.rpc_status_user_exception:a="rpc_status_user_exception";break;case k.rpc_status_system_error:a="rpc_status_system_error";break;default:a="unknown"}return a};a.prototype.parceWebrpcError=function(a,b){void 0===a&&(a=b&&0<b.length?b[0].category||b[0].code||b[0].message?k.rpc_status_system_error:k.rpc_status_user_exception:k.rpc_status_unspecified_error);var d;switch(a){case k.rpc_status_unspecified_error:case k.rpc_status_unexpected:case k.rpc_status_index_out_of_bounds:case k.rpc_status_missing_parameter:case k.rpc_status_missing_return_value:case k.rpc_status_invalid_object:d=
new DOMException(this.webrpcStatusCodeToName(a),this.webrpcStatusCodeToName(a));break;case k.rpc_status_user_exception:d=b&&0<b.length?new DOMException(b[0],this.webrpcStatusCodeToName(a)):new DOMException(this.webrpcStatusCodeToName(a),this.webrpcStatusCodeToName(a));break;case k.rpc_status_system_error:if(b&&0<b.length){d=Object.create(DOMException);var g={value:null,writable:!0,enumerable:!1,Configurable:!0};g.value=b[0].category;Object.defineProperty(d,"name",g);g.value=b[0].code;Object.defineProperty(d,
"code",g);g.value=b[0].message;Object.defineProperty(d,"message",g)}else d=new DOMException(this.webrpcStatusCodeToName(a),this.webrpcStatusCodeToName(a))}return d};a.prototype.onWSMessage=function(a){a=a.data;var b;try{b=JSON.parse(a)}catch(g){u.logger.log("invalid JSON!!!");u.logger.log(g);u.logger.log(a);return}if("webrtc"==b.v){u.logger.trace("onWSMessage: <<< "+h.WebrpcClassLibInfoUtil.composeClassInfoData(b)+" "+a);var c=b.hdr.proc.iid,k=b.hdr.proc.methodid,e=b.objref.oid,x=b.status;if(b.hdr.msg_type==
d.WsJsonUtil.getMsgType(d.ws_msg_type_t.reply))a=this.reqs.findIndex(function(a){return a.iid==c&&a.oid==e&&a.mid==k}),0<=a?0==x?this.reqs.splice(a,1).shift().resolve(b):(x=this.parceWebrpcError(x,b.params),this.reqs.splice(a,1).shift().reject(x)):(u.logger.log("HDXMS didnt find this one. (reqs)"),u.logger.log(this.reqs));else if(b.hdr.msg_type==d.WsJsonUtil.getMsgType(d.ws_msg_type_t.event_req)){var r=b.func.id;a=this.cbs.findIndex(function(a){return a.iid==c&&a.oid==e&&a.cbid==r>>16});0<=a?(0==
(r&65535)?this.cbs[a].resolve(b):(x=this.parceWebrpcError(x,b.params),this.cbs[a].reject(x)),1==this.cbs[a].oneShot&&(this.cbs[a].completion_cb?this.cbs[a].completion_cb(this.cbs[a].cbid,this.cbs[a].mid):u.logger.log("HDXMS didnt find completion_cb for oneShot callback, something went wrong!!!! cbid="+this.cbs[a].cbid+" (iid, mid)=("+this.cbs[a].iid,","+this.cbs[a].mid+")"))):(u.logger.log("HDXMS didnt find this one. (cbs)"),u.logger.log(JSON.stringify(this.cbs)))}else u.logger.log("HDXMS Received bogus message: "+
a+"'")}else if("telemetry"==b.v)0==b.status&&(x=b.hdr.command,2==(x&2147483647)&&(a=b.hdr.id,this.telemetry.onInitialized(a),u.logger.log("Telemetry init response received")));else if("features"==b.v){a=b.features;if("feature-support"==b.command)for(u.logger.log("features capabilities received, features:"+a),this.vdafeatures_=a,x=0;x<a.length;x++)if(a[x]===h.FEATURE_vda_app_sharing)this.screenshare.onInitialized(!0);this.clientViewportMode_=b.client_viewport_mode;u.logger.log("features client_viewport_mode value: "+
this.clientViewportMode_);this.sessionId_=b.client_session_id}else if("appsharing"==b.v)a=b.status,0==a?(x=b.hdr.command,a=b.hdr.id,(x&2147483647)==q.sshare_cmd.GetSources?(u.logger.log("appsharing GetSources response received"),x=b.data,this.screenshare.onGetSources(a,x)):(x&2147483647)==q.sshare_cmd.SetActive?(u.logger.log("appsharing SetActive response received"),x=b.data,this.screenshare.onSetActive(a,x)):(x&2147483647)==q.sshare_cmd.TopologyChanged?(u.logger.log("appsharing Window topology changed cmd received"),
this.screenshare.onToplogyChanged()):(u.logger.log("invalid command reply:"+x),this.screenshare.onError(a))):(u.logger.log("invalid status reply:"+a),a=b.hdr.id,this.screenshare.onError(a));else if(x=this.handlers_.find(function(a){return a.name==b.v}),void 0!=x)x.on_message(b);else u.logger.log("HDXMS: onWSMessage: Unknown protocol: "+a+"'")};a.prototype.clearReqs=function(){u.logger.log("clearReqs()");this.reqs.forEach(function(a,b){a.reject()});this.reqs=[]};a.prototype.registerHandler=function(a,
b,d,g){a=new n(g.resolve.bind(g),g.reject.bind(g),a,b,g.id,g.oneShot,d,g.completion_cb);this.cbs.push(a)};a.prototype.unregisterHandler=function(a,b,d){var g=this.cbs.findIndex(function(g){return g.iid==a&&g.oid==b&&g.cbid==d});0<=g?this.cbs.splice(g,1):(u.logger.log("HDXMS Didnt find this callback in the list!"),u.logger.log(JSON.stringify(this.cbs)))};a.prototype.isRedirected=function(){return this.status===v.Redirected||this.status===v.Binding||this.status===v.Connecting};a.prototype.isConnected=
function(){return this.status==v.Redirected};a.prototype.isPingActive=function(){return this.pingactive};a.prototype.pingConnectionBegin=function(a){u.logger.log("Started timer");this.pingactive=!0;var b=window.onVdiClientDisconnectedTimer;1==a?(u.logger.log("checking if we are connected..."),b()):this.conntimer=setTimeout(function(){u.logger.log("checking if we are connected...");b&&b()},15E3)};a.prototype.pingConnectionEnd=function(){this.pingactive=!1;clearTimeout(this.conntimer)};a.prototype.SendTelemetryData_Speaker=
function(a){this.telemetry.SendTelemetryData(w.tel_cmd.Data,w.tel_key_SpeakerDeviceUsed,a,0)};a.prototype.registerStateChangeNotification=function(a){this.stateChangeNotifcations.push(a)};a.prototype.unregisterStateChangeNotification=function(a){this.stateChangeNotifcations=this.stateChangeNotifcations.filter(function(b){return b!=a})};a.prototype.dispatchStateChangeNotifications=function(){this.stateChangeNotifcations.forEach(function(a){a()})};a.prototype.vdabufferNoLimit=function(){for(var a=!1,
b=0,d=this.vdafeatures_;b<d.length;b++)if(d[b]===h.FEATURE_vda_service_no_buffer_limit){a=!0;break}return a};Object.defineProperty(a.prototype,"clientViewportMode",{get:function(){return this.clientViewportMode_||"unknown"},enumerable:!1,configurable:!0});Object.defineProperty(a.prototype,"sessionClientId",{get:function(){return this.sessionId_||""},enumerable:!1,configurable:!0});a.prototype.addProtocolHandler=function(a){void 0==this.handlers_.find(function(b){return b.name==a.name})&&this.handlers_.push(a)};
return a}();a.HdxMediaStream=b;var z=new b;a.getRedirector=function(){return z}},985:function(b,a,c){var e=this&&this.__extends||function(){var a=function(b,d){a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var d in b)b.hasOwnProperty(d)&&(a[d]=b[d])};return a(b,d)};return function(b,d){function c(){this.constructor=b}a(b,d);b.prototype=null===d?Object.create(d):(c.prototype=d.prototype,new c)}}(),u=this&&this.__spreadArrays||function(){for(var a=
0,b=0,d=arguments.length;b<d;b++)a+=arguments[b].length;for(var a=Array(a),c=0,b=0;b<d;b++)for(var e=arguments[b],g=0,h=e.length;g<h;g++,c++)a[c]=e[g];return a};Object.defineProperty(a,"__esModule",{value:!0});a.IceCandidatePair=a.IceCandidate=void 0;var h=c(658),d=c(550),w=c(851);b=function(a){function b(c,e,z){for(var g=[],h=3;h<arguments.length;h++)g[h-3]=arguments[h];return a.apply(this,u([c,d.class_id_t.RTCIceCandidate,e,z,null,[]],g))||this}e(b,a);Object.defineProperty(b.prototype,"candidate",
{get:function(){return this.candidate_},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"sdpMid",{get:function(){return this.sdpMid_},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"sdpMLineIndex",{get:function(){return this.sdpMLineIndex_},enumerable:!1,configurable:!0});b.prototype.syncBarrier=function(){var a=this;w.logger.log(this.user_friendly_id()+".syncBarrier() called.");return new Promise(function(b,c){a.syncBarrierDeep(b,c)&&a.waitUntilConnected("IceCandidate.syncBarrier").then(function(){return Promise.all([a.remoteInvoke(!1,
d.method_id_RTCIceCandidate_t.candidate,""),a.remoteInvoke(!1,d.method_id_RTCIceCandidate_t.sdpMid,""),a.remoteInvoke(!1,d.method_id_RTCIceCandidate_t.sdpMLineIndex,0)])}).then(function(b){b=b.map(function(b){return a.param0(b)});a.candidate_=b[0];a.sdpMid_=b[1];a.sdpMLineIndex_=b[2];a.syncBarrierResolve(a)})["catch"](function(b){b=a.logRemoteInvokeError(b,".syncBarrier failed!");a.syncBarrierReject(b)})})};return b}(h.ProxyObject);a.IceCandidate=b;b=function(a){function b(c,e){return a.call(this,
c,d.class_id_t.RTCIceCandidatePair,e,h.ProxyMode.Remote)||this}e(b,a);Object.defineProperty(b.prototype,"local",{get:function(){return this.local_},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"remote",{get:function(){return this.remote_},enumerable:!1,configurable:!0});b.prototype.syncBarrier=function(){var a=this;w.logger.log(this.user_friendly_id()+".syncBarrier() called.");return new Promise(function(b,c){a.syncBarrierDeep(b,c)&&a.waitUntilConnected("IceCandidatePair.syncBarrier").then(function(){return Promise.all([a.remoteInvoke(!1,
d.method_id_RTCIceCandidatePair_t.local,{}),a.remoteInvoke(!1,d.method_id_RTCIceCandidatePair_t.remote,{})])}).then(function(b){b=b.map(function(b){return a.param0(b)});a.local_=b[0];a.remote_=b[1];a.syncBarrierResolve(a)})["catch"](function(b){b=a.logRemoteInvokeError(b,".syncBarrier failed!");a.syncBarrierReject(b)})})};return b}(h.ProxyObject);a.IceCandidatePair=b},851:function(b,a,c){Object.defineProperty(a,"__esModule",{value:!0});a.logger=a.Logger=void 0;var e=c(550);b=function(){function a(b){this.tracing=
!1;this.mslogger_=void 0;this.enable_timestamp_=!1;this.tag=b;this.enabled=!0;e.BUILD_TYPE_SDK&&(this.enable_timestamp_=!0)}a.prototype.setMSLogger=function(a,b){this.mslogger_=a;void 0!=b&&(this.enable_timestamp_=b)};a.prototype.log=function(){for(var a=[],b=0;b<arguments.length;b++)a[b]=arguments[b];this.enabled&&(a=this.tag+" "+a,this.enable_timestamp_&&(b=new Date,a="["+b.getTime()+"] "+b.toISOString()+" "+a),void 0!=this.mslogger_?this.mslogger_.info(a):console.log(a))};a.prototype.logx=function(a){for(var b=
[],c=1;c<arguments.length;c++)b[c-1]=arguments[c];a||this.log(b)};a.prototype.trace=function(){for(var a=[],b=0;b<arguments.length;b++)a[b]=arguments[b];this.tracing&&this.log.apply(this,a)};return a}();a.Logger=b;a.logger=new b("[HdxWebRTC.js]");a.logger.enabled=!0},360:function(b,a,c){var e=this&&this.__extends||function(){var a=function(b,d){a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var d in b)b.hasOwnProperty(d)&&(a[d]=b[d])};return a(b,
d)};return function(b,d){function f(){this.constructor=b}a(b,d);b.prototype=null===d?Object.create(d):(f.prototype=d.prototype,new f)}}(),u=this&&this.__awaiter||function(a,b,d,f){function c(a){return a instanceof d?a:new d(function(f){f(a)})}return new (d||(d=Promise))(function(d,K){function g(a){try{m(f.next(a))}catch(b){K(b)}}function r(a){try{m(f["throw"](a))}catch(b){K(b)}}function m(a){a.done?d(a.value):c(a.value).then(g,r)}m((f=f.apply(a,b||[])).next())})},h=this&&this.__generator||function(a,
b){function d(a){return function(b){return f([a,b])}}function f(f){if(g)throw new TypeError("Generator is already executing.");for(;c;)try{if(g=1,r&&(m=f[0]&2?r["return"]:f[0]?r["throw"]||((m=r["return"])&&m.call(r),0):r.next)&&!(m=m.call(r,f[1])).done)return m;if(r=0,m)f=[f[0]&2,m.value];switch(f[0]){case 0:case 1:m=f;break;case 4:return c.label++,{value:f[1],done:!1};case 5:c.label++;r=f[1];f=[0];continue;case 7:f=c.ops.pop();c.trys.pop();continue;default:if(!(m=c.trys,m=0<m.length&&m[m.length-
1])&&(6===f[0]||2===f[0])){c=0;continue}if(3===f[0]&&(!m||f[1]>m[0]&&f[1]<m[3]))c.label=f[1];else if(6===f[0]&&c.label<m[1])c.label=m[1],m=f;else if(m&&c.label<m[2])c.label=m[2],c.ops.push(f);else{m[2]&&c.ops.pop();c.trys.pop();continue}}f=b.call(a,c)}catch(d){f=[6,d],r=0}finally{g=m=0}if(f[0]&5)throw f[1];return{value:f[0]?f[1]:void 0,done:!0}}var c={label:0,sent:function(){if(m[0]&1)throw m[1];return m[1]},trys:[],ops:[]},g,r,m,e;$jscomp.initSymbol();$jscomp.initSymbol();$jscomp.initSymbolIterator();
return e={next:d(0),"throw":d(1),"return":d(2)},"function"===typeof Symbol&&(e[Symbol.iterator]=function(){return this}),e},d=this&&this.__spreadArrays||function(){for(var a=0,b=0,d=arguments.length;b<d;b++)a+=arguments[b].length;for(var a=Array(a),f=0,b=0;b<d;b++)for(var c=arguments[b],g=0,r=c.length;g<r;g++,f++)a[f]=c[g];return a};Object.defineProperty(a,"__esModule",{value:!0});a.PeerConnection=a.SessionDescription=a.SessionDescriptionInit=a.RtcConfiguration=a.RtcIceServer=a.IceCandidateEvent=
void 0;var w=c(946),q=c(144),n=c(589),k=c(658),v=c(985),z=c(377),g=c(650),B=c(24),t=c(550),m=c(851),D=c(517),y=c(394),x=function(a){function b(d,f,c){d=a.call(this,d,t.class_id_t.RTCIceCandidateEvent,f,k.ProxyMode.Remote)||this;d.target=c;d.type="icecandidate";return d}e(b,a);Object.defineProperty(b.prototype,"candidate",{get:function(){return this.candidate_},enumerable:!1,configurable:!0});b.prototype.syncBarrier=function(){var a=this;m.logger.log(this.user_friendly_id()+".syncBarrier() called.");
return new Promise(function(f,b){a.syncBarrierDeep(f,b)&&a.waitUntilConnected(a.user_friendly_id()+".syncBarrier").then(function(){return a.remoteInvoke(!1,t.method_id_RTCIceCandidateEvent_t.candidate,{oid:0})}).then(function(f){f=a.param0(f);return!1===f.is_null?(new v.IceCandidate(a,f.oid,k.ProxyMode.Remote)).syncBarrier():Promise.resolve(null)}).then(function(f){m.logger.log(a.user_friendly_id()+".onicecandidate: icecandidate available!");a.candidate_=f;a.syncBarrierResolve(a)})["catch"](function(f){f=
a.logRemoteInvokeError(f,".onicecandidate() failed!");a.syncBarrierReject(f)})})};return b}(k.ProxyObject);a.IceCandidateEvent=x;var r=function(){function a(b,d){this.state_="new";this.candidates_=[];this.gatheringstateupdatecb_=void 0;this.pc_=b;this.gatheringstateupdatecb_=d}a.prototype.pushState=function(a){m.logger.log(this.pc_.user_friendly_id()+".onicegatheringstatechange: new state is "+a);this.state_=a;"gathering"==this.state_?(this.candidates_=[],this.postUpdate()):this.processRemaining()};
a.prototype.addIceCandidate=function(a){var b=this;this.candidates_.push(a);var f=[];f.push(a.syncBarrier());f.push(this.pc_.updateSdpDescription(!0));Promise.all(f).then(function(a){m.logger.log(b.pc_.user_friendly_id()+".onicecandidate: icecandidate available!");b.postIceCandidate(a[0])})};a.prototype.postIceCandidate=function(a){m.logger.log(this.pc_.user_friendly_id()+".onicecandidate: posting ice candidate now!");if(null!=this.pc_.onicecandidate)this.pc_.onicecandidate(a);else m.logger.log(this.pc_.user_friendly_id()+
"onicecandidate is NULL!!!");this.candidates_.shift();this.processRemaining()};a.prototype.postUpdate=function(){m.logger.log(this.pc_.user_friendly_id()+".onicegatheringstatechange: posting event now!");var a=new p("onicegatheringstatechange",this.pc_);this.gatheringstateupdatecb_&&this.gatheringstateupdatecb_(this.state_);this.pc_.onicegatheringstatechange(a)};a.prototype.processRemaining=function(){0==this.candidates_.length&&"complete"==this.state_?(this.pc_.onicecandidate({candidate:null,target:this}),
this.postUpdate()):m.logger.log(this.pc_.user_friendly_id()+".onicecandidate: candidates remaining=["+this.candidates_.map(function(a){return a.object_id()})+"], state="+this.state_)};return a}(),A=function(){function a(){}a.toRtcIceServer=function(a,b){var f={urls:[],credential:"",username:""};a&&(a.urls?Array.isArray(a.urls)?f.urls=a.urls:f.urls.push(a.urls):m.logger.log("RtcIceServer.toRtcIceServer().urls property is missing! this is required property!"),a.credential&&(a.credential.hasOwnProperty("accessToken")?
f.credential=a.credential.accessToken:f.credential=a.credential),a.username&&(f.username=a.username));if(1==b)for(var d in a)"urls"!=d&&"credential"!=d&&"username"!=d&&m.logger.log("RtcIceServer.toRtcIceServer() warning: unsupported property:"+d);return f};return a}();a.RtcIceServer=A;var M=function(){function a(){}a.toRtcConfiguration=function(a,b){1==b&&m.logger.log("RtcConfiguration.toRtcConfiguration() in RTCConfiguration config:"+JSON.stringify(a));var f={};if(a){if(a.iceServers){f.iceServers=
[];for(var d=0,c=a.iceServers;d<c.length;d++)f.iceServers.push(A.toRtcIceServer(c[d],b))}a.iceTransportPolicy&&(f.iceTransportPolicy=a.iceTransportPolicy);a.bundlePolicy&&(f.bundlePolicy=a.bundlePolicy);a.rtcpMuxPolicy&&(f.rtcpMuxPolicy=a.rtcpMuxPolicy);a.iceTransports&&(f.iceTransports=a.iceTransports);a.sdpSemantics&&(f.sdpSemantics=a.sdpSemantics);a.enableDtlsSrtp&&(f.enableDtlsSrtp=a.enableDtlsSrtp);a.enableDscp&&(f.enableDscp=a.enableDscp)}if(1==b){for(var g in a)"iceServers"!=g&&"iceTransportPolicy"!=
g&&"bundlePolicy"!=g&&"rtcpMuxPolicy"!=g&&"iceTransports"!=g&&"sdpSemantics"!=g&&"enableDtlsSrtp"!=g&&"enableDscp"!=g&&m.logger.log("RtcConfiguration.toRtcConfiguration() warning: unsupported property:"+g);m.logger.log("RtcConfiguration.toRtcConfiguration() converted RtcConfiguration config:"+JSON.stringify(f))}return f};return a}();a.RtcConfiguration=M;var F=function(){return function(a,b){this.sdp=b;this.type=a}}();a.SessionDescriptionInit=F;var l=function(a){function b(c,f,g){for(var r=[],m=3;m<
arguments.length;m++)r[m-3]=arguments[m];return a.apply(this,d([c,t.class_id_t.RTCSessionDescription,f,g,null,[]],r))||this}e(b,a);b.prototype.toJSON=function(){return{type:this.type_,sdp:this.sdp_}};Object.defineProperty(b.prototype,"sdp",{get:function(){return this.sdp_},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"type",{get:function(){return this.type_},enumerable:!1,configurable:!0});b.prototype.syncBarrier=function(){var a=this;m.logger.log(this.user_friendly_id()+".syncBarrier() called.");
return new Promise(function(f,b){a.syncBarrierDeep(f,b)&&a.waitUntilConnected(a.user_friendly_id()+".syncBarrier").then(function(){return Promise.all([a.remoteInvoke(!1,t.method_id_RTCSessionDescription_t.type,0),a.remoteInvoke(!1,t.method_id_RTCSessionDescription_t.sdp,"")])}).then(function(f){a.type_=a.convertType(a.param0(f[0]));a.sdp_=a.param0(f[1]);a.syncBarrierResolve(a)})["catch"](function(f){f=a.logRemoteInvokeError(f,".syncBarrier() failed!");a.syncBarrierReject(f)})})};b.prototype.convertType=
function(a){return 0==a?"offer":1==a?"pranswer":2==a?"answer":"rollback"};b.convertC2H=function(a){return"offer"==a?0:"pranswer"==a?1:"answer"==a?2:3};return b}(k.ProxyObject);a.SessionDescription=l;var p=function(){return function(a,b){this.type=a;this.target=b}}(),L=function(){return function(){}}(),P=function(){function a(b,d){this.local=b;this.remote=d}Object.defineProperty(a.prototype,"active",{get:function(){var a=!1;if(1==this.local||1==this.remote)a=!0;return a},enumerable:!1,configurable:!0});
return a}();b=function(a){function b(d){var f=a.call(this,null,t.class_id_t.RTCPeerConnection,0,k.ProxyMode.Local,null,[],b.ensure_config_defined(d,!1),{})||this;f.timeerstarted_=!1;f.firsttimeremoteoffer_=!1;f.firststable_=!1;f.firsttimelocaloffer_=!1;f.audiocall_=new P(!1,!1);f.videocall_=new P(!1,!1);f.screensharingcall_=new P(!1,!1);f.conferencecall_=!1;f.incomingcall_=!1;f.outgoingcall_=!1;f.usingasynconly_=!1;f.rtcconfig_=b.ensure_config_defined(d,!0);m.logger.log(f.user_friendly_id()+".constructor sdpSemantics="+
f.rtcconfig_.sdpSemantics);if(!t.BUILD_TYPE_SDK&&f.isUnified()&&!w.getRedirector().getFeatureValue(t.FEATURE_ms_teams_webrtc_1dot0))throw new DOMException("CWA client does not support unified sdpSemantic","createPeerConnection");f.pendingtransceiver_=0;f.pendingtrack_=0;f.deferredOfferAnswers=[];f.localStreams=[];f.remoteStreams=[];f.onaddstream_=null;f.signalingState_="stable";f.iceConnectionState_="new";f.iceGatheringState_="new";f.iceQ_=new r(f,function(a){f.onicegatheringstateupdate(a)});f.receivers_=
[];f.senders_=[];f.transceivers_=[];f.registerStateChangeNotification(f.onStateChange);f.localdatachannel_=null;f.remotedatachannel_=null;return f}e(b,a);b.ensure_config_defined=function(a,f){return M.toRtcConfiguration(a,f)};b.prototype.dumpSdp=function(a){m.logger.log(this.user_friendly_id()+".dumpSdp");a&&(m.logger.log(this.user_friendly_id()+"  -- type: "+a.type),m.logger.log(this.user_friendly_id()+"  -- sdp: "+a.sdp))};Object.defineProperty(b.prototype,"localDescription",{get:function(){m.logger.log(this.user_friendly_id()+
".get_localDescription() called.");return this.localDescription_},set:function(a){m.logger.log(this.user_friendly_id()+".set_localDescription() called.");this.localDescription_=a},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"remoteDescription",{get:function(){m.logger.log(this.user_friendly_id()+".get_remoteDescription() called.");return this.remoteDescription_},set:function(a){m.logger.log(this.user_friendly_id()+".get_remoteDescription() called.");this.remoteDescription_=a},
enumerable:!1,configurable:!0});b.prototype.isUnified=function(){return"unified"==this.rtcconfig_.sdpSemantics||"unified-plan"==this.rtcconfig_.sdpSemantics};b.prototype.onStateChange=function(){var a=new p("iceconnectionstatechange",this);if(this.oniceconnectionstatechange_)this.oniceconnectionstatechange_(a)};b.prototype.addIceCandidate=function(a){var f=this;m.logger.log(this.user_friendly_id()+".addIceCandidate() called.");this.waitUntilConnected(this.user_friendly_id()+".addIceCandidate").then(function(){var b=
{candidate:a.candidate,sdpMid:a.sdpMid,sdpMLineIndex:a.sdpMLineIndex};if(void 0==b.candidate||null==b.candidate)b.candidate="";void 0==b.sdpMid&&(b.sdpMid=null);void 0==b.sdpMLineIndex&&(b.sdpMLineIndex=null);return(new v.IceCandidate(f,0,k.ProxyMode.Local,b)).syncBarrier()}).then(function(a){return f.remoteInvokeEx(!1,t.method_id_RTCPeerConnection_t.addIceCandidate,[a],{})}).then(function(){m.logger.log(f.user_friendly_id()+".addIceCandidate() success.");return f.updateSdpDescription(!1)}).then(function(){m.logger.log(f.user_friendly_id()+
".addIceCandidate() - sync remote sdp success.")})["catch"](function(a){f.logRemoteInvokeError(a,".addIceCandidate() failed!")})};Object.defineProperty(b.prototype,"onicecandidate",{get:function(){return this.onicecandidate_},set:function(a){var f=this;m.logger.log(this.user_friendly_id()+".set_onicecandidate() called.");this.onicecandidate_=a;this.waitUntilConnected(this.user_friendly_id()+".onicecandidate").then(function(){var b=f.registerCallbacks(!1,f.isNullCallback(a),t.method_id_RTCPeerConnection_t.onicecandidate);
b.then(function(a){m.logger.log(f.user_friendly_id()+".onicecandidate callback received!!!");a=new x(f,f.param0(a).oid,f);null!=f.iceQ_&&f.iceQ_.addIceCandidate(a)});return f.remoteInvoke(!0,t.method_id_RTCPeerConnection_t.onicecandidate,b.success)})["catch"](function(a){f.logRemoteInvokeError(a,".set_onicecandidate() failed!")})},enumerable:!1,configurable:!0});b.prototype.convertIceConnectionState=function(a){return 0==a?"new":1==a?"checking":2==a?"connected":3==a?"completed":4==a?"failed":5==a?
"disconnected":"closed"};b.prototype.convertConnectionState=function(a){if(0!=a){if(1==a)return"connecting";if(2==a)return"connected";if(3==a)return"disconnected";if(4==a)return"failed";if(5==a)return"closed"}return"new"};Object.defineProperty(b.prototype,"onconnectionstatechange",{get:function(){return this.onconnectionstatechange_},set:function(a){var f=this;m.logger.log(this.user_friendly_id()+".set_onconnectionstatechange() called.");this.onconnectionstatechange_=a;this.waitUntilConnected(this.user_friendly_id()+
".onconnectionstatechange").then(function(){var b=f.registerCallbacks(!1,f.isNullCallback(a),t.method_id_RTCPeerConnection_t.onconnectionstatechange);b.then(function(a){m.logger.log(f.user_friendly_id()+".onconnectionstatechange(): success callback received!!!");f.connectionState_=f.convertConnectionState(f.param0(a));m.logger.log(f.user_friendly_id()+" connectionState=:"+f.connectionState_);a=new p("connectionstatechange",f);if(f.onconnectionstatechange_)f.onconnectionstatechange_(a)});return f.remoteInvoke(!0,
t.method_id_RTCPeerConnection_t.onconnectionstatechange,b.success)})["catch"](function(a){f.logRemoteInvokeError(a,".set_onconnectionstatechange() failed!")})},enumerable:!1,configurable:!0});b.prototype.get_connectionState=function(){m.logger.log(this.user_friendly_id()+".get_connectionState() called, value = "+this.connectionState_);return this.isRedirected()?this.connectionState_:"failed"};Object.defineProperty(b.prototype,"oniceconnectionstatechange",{get:function(){return this.oniceconnectionstatechange_},
set:function(a){var f=this;m.logger.log(this.user_friendly_id()+".set_oniceconnectionstatechange() called.");this.oniceconnectionstatechange_=a;this.waitUntilConnected(this.user_friendly_id()+".oniceconnectionstatechange").then(function(){var b=f.registerCallbacks(!1,f.isNullCallback(a),t.method_id_RTCPeerConnection_t.oniceconnectionstatechange);b.then(function(a){m.logger.log(f.user_friendly_id()+".oniceconnectionstatechange(): success callback received!!!");f.iceConnectionState_=f.convertIceConnectionState(f.param0(a));
a=new p("iceconnectionstatechange",f);if(f.oniceconnectionstatechange_)f.oniceconnectionstatechange_(a)});return f.remoteInvoke(!0,t.method_id_RTCPeerConnection_t.oniceconnectionstatechange,b.success)})["catch"](function(a){f.logRemoteInvokeError(a,".set_oniceconnectionstatechange() failed!")})},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"iceConnectionState",{get:function(){m.logger.log(this.user_friendly_id()+".get_iceConnectionState() called, value = "+this.iceConnectionState_);
return this.isRedirected()?this.iceConnectionState_:"failed"},enumerable:!1,configurable:!0});b.prototype.convertIceGatheringState=function(a){return 0==a?"new":1==a?"gathering":"complete"};b.prototype.onicegatheringstateupdate=function(a){m.logger.log(this.user_friendly_id()+".onicegatheringstateupdate() current:"+this.iceGatheringState_+" updating to:"+a);this.iceGatheringState_=a;m.logger.log(this.user_friendly_id()+".onicegatheringstateupdate() after update: iceGatheringState_:"+this.iceGatheringState_)};
Object.defineProperty(b.prototype,"onicegatheringstatechange",{get:function(){return this.onicegatheringstatechange_},set:function(a){var f=this;m.logger.log(this.user_friendly_id()+".set_onicegatheringstatechange() called.");this.onicegatheringstatechange_=a;this.waitUntilConnected(this.user_friendly_id()+".onicegatheringstatechange").then(function(){var b=f.registerCallbacks(!1,f.isNullCallback(a),t.method_id_RTCPeerConnection_t.onicegatheringstatechange);b.then(function(a){m.logger.log(f.user_friendly_id()+
".onicegatheringstatechange(): callback received!!!");a=f.convertIceGatheringState(f.param0(a));null!=f.iceQ_&&f.iceQ_.pushState(a)});return f.remoteInvoke(!0,t.method_id_RTCPeerConnection_t.onicegatheringstatechange,b.success)})["catch"](function(a){f.logRemoteInvokeError(a,".set_onicegatheringstatechange() failed!")})},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"iceGatheringState",{get:function(){m.logger.log(this.user_friendly_id()+".get_iceGatheringState() called, value = "+
this.iceGatheringState_);return this.iceGatheringState_},enumerable:!1,configurable:!0});b.prototype.convertSignalState=function(a){return 0==a?"stable":1==a?"have-local-offer":2==a?"have-local-pranswer":3==a?"have-remote-offer":4==a?"have-remote-pranswer":"closed"};b.prototype.TelemtryReadings_=function(){var a=this;"have-local-offer"==this.signalingState_&&0==this.firsttimelocaloffer_&&0==this.firsttimeremoteoffer_&&(this.outgoingcallstart_=(new Date).getTime(),0==this.outgoingcall_&&(this.SendTelemetryData(y.tel_key_PerfCallState,
y.tel_CallState.active,1),this.SendTelemetryData(y.tel_key_PerfCallDirection,y.tel_CallDirection.outgoing,1),this.outgoingcall_=!0),this.firsttimelocaloffer_=!0);"have-remote-offer"==this.signalingState_&&0==this.firsttimeremoteoffer_&&0==this.firsttimelocaloffer_&&(this.incomingcallstart_=(new Date).getTime(),0==this.incomingcall_&&(this.SendTelemetryData(y.tel_key_PerfCallState,y.tel_CallState.active,1),this.SendTelemetryData(y.tel_key_PerfCallDirection,y.tel_CallDirection.incoming,1),this.incomingcall_=
!0),this.firsttimeremoteoffer_=!0);"stable"==this.signalingState_&&0==this.firststable_&&(this.callstartTime_=(new Date).getTime(),this.firststable_=this.timeerstarted_=!0);if("stable"==this.signalingState_){for(var f=0,b=this.localStreams;f<b.length;f++){var d=b[f];1<=d.getAudioTracks().length&&0==this.audiocall_.local&&(this.SendTelemetryData(y.tel_key_PerfCallType,y.tel_CallType.audio,1),this.audiocall_.local=!0);d=d.getVideoTracks();if(1<=d.length)for(var c=0,g=d;c<g.length;c++)d=g[c],1==d.getSettings().deviceId.includes("display")?
0==this.screensharingcall_.local&&(this.SendTelemetryData(y.tel_key_PerfCallType,y.tel_CallType.dshare,1),this.screensharingcall_.local=!0):0==this.videocall_.local&&(this.SendTelemetryData(y.tel_key_PerfCallType,y.tel_CallType.video,1),this.videocall_.local=!0)}f=0;for(b=this.remoteStreams;f<b.length;f++)if(d=b[f],1<=d.getAudioTracks().length&&0==this.audiocall_.remote&&(this.SendTelemetryData(y.tel_key_PerfCallType,y.tel_CallType.audio,1),this.audiocall_.remote=!0),c=d.getVideoTracks(),1<=c.length)for(d=
0;d<c.length;d++)1==c[d].id.includes("applicationsharingVideo")?0==this.screensharingcall_.remote&&(this.SendTelemetryData(y.tel_key_PerfCallType,y.tel_CallType.dshare,1),this.screensharingcall_.remote=!0):0==this.videocall_.remote&&(this.SendTelemetryData(y.tel_key_PerfCallType,y.tel_CallType.video,1),this.videocall_.remote=!0);this.getReceiversAsync().then(function(f){2<f.length&&0==a.conferencecall_&&(a.SendTelemetryData(y.tel_key_PerfCallType,y.tel_CallType.multi,1),a.conferencecall_=!0)})}};
Object.defineProperty(b.prototype,"onsignalingstatechange",{set:function(a){var f=this;m.logger.log(this.user_friendly_id()+".set_onsignalingstatechange() called.");this.onsignalingstatechange_=a;this.waitUntilConnected(this.user_friendly_id()+".onsignalingstatechanged").then(function(){var b=f.registerCallbacks(!1,f.isNullCallback(a),t.method_id_RTCPeerConnection_t.onsignalingstatechange);b.then(function(a){m.logger.log(f.user_friendly_id()+".onsignalingstatechange(): callback received!!!");f.signalingState_=
f.convertSignalState(f.param0(a));a=new p("onsignalingstatechange",f);if(f.onsignalingstatechange_)f.onsignalingstatechange_(a);f.TelemtryReadings_()});return f.remoteInvoke(!0,t.method_id_RTCPeerConnection_t.onsignalingstatechange,b.success)})["catch"](function(a){f.logRemoteInvokeError(a,".set_onsignalingstatechange() failed!")})},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"onsignalingstatechanged",{get:function(){return this.onsignalingstatechange_},enumerable:!1,configurable:!0});
Object.defineProperty(b.prototype,"ontrack",{get:function(){return this.ontrack_},set:function(a){var f=this;m.logger.log(this.user_friendly_id()+".set_ontrack() called.");this.ontrack_=a;this.waitUntilConnected(this.user_friendly_id()+".ontrack").then(function(){var b=f.registerCallbacks(!1,f.isNullCallback(a),t.method_id_RTCPeerConnection_t.ontrack);b.then(function(a){return u(f,void 0,void 0,function(){var f,b,d,c,r,K,C,e,x,A,t,v=this;return h(this,function(h){m.logger.log(this.user_friendly_id()+
".ontrack(): callback received!!!");f=new L;b=[];d=this.param0(a);void 0!=d.track&&!1===d.track.is_null&&(m.logger.log(this.user_friendly_id()+" adding a RemoteMediaTrack with oid:"+d.track.oid),c=new q.RemoteMediaTrack(this,d.track.oid),b.push(c.syncBarrier()));f.track=c;void 0!=d.receiver&&!1===d.receiver.is_null&&(r=this.receivers_.find(function(a){return a.object_id()===d.receiver.oid}),void 0===r&&(m.logger.log(this.user_friendly_id()+" adding a RtpReceiver with oid:"+d.receiver.oid),r=new n.RtpReceiver(this,
d.receiver.oid,k.ProxyMode.Remote,this.isUnified(),c)),b.push(r.syncBarrier()));f.receiver=r;g.RemoteSession.isFeatureWebrtc1dot0Supported()&&void 0!=d.transceiver&&!1===d.transceiver.is_null&&(K=this.transceivers_.find(function(a){return a.object_id()===d.transceiver.oid}),void 0===K&&(m.logger.log(this.user_friendly_id()+" adding a RtpTransceiver with oid:"+d.transceiver.oid),K=new z.RtpTransceiver(this,d.transceiver.oid,k.ProxyMode.Remote,this.isUnified(),z.RtcRtpTransceiverDirection.inactive,
r),this.transceivers_.push(K)),b.push(K.syncBarrier()));f.transceiver=K;f.streams=[];if(void 0!=d.streams)for(C=function(a){var d=e.remoteStreams.find(function(f){return!1===a.is_null&&f.object_id()===a.oid});void 0===d&&(m.logger.log(e.user_friendly_id()+" adding a RemoteStream with oid:"+a.oid),d=new q.RemoteStream(e,a.oid,k.ProxyMode.Remote),e.remoteStreams.push(d));b.push(d.syncBarrier());f.streams.push(d)},e=this,x=0,A=d.streams;x<A.length;x++)t=A[x],C(t);m.logger.log(this.user_friendly_id()+
".ontrack(): .prop.syncBarrier start");Promise.all(b).then(function(){m.logger.log(v.user_friendly_id()+".ontrack(): notified!!! with evt: "+f);for(var a=0,b=f.streams;a<b.length;a++)b[a].toggleAudio(!1);if(v.ontrack_)v.ontrack_(f)})["catch"](function(a){v.logRemoteInvokeError(a,".ontrack(): .prop.syncBarrier failed.")});return[2]})})});return f.remoteInvoke(!0,t.method_id_RTCPeerConnection_t.ontrack,b.success)})["catch"](function(a){f.logRemoteInvokeError(a,".set_ontrack(): failed.")})},enumerable:!1,
configurable:!0});Object.defineProperty(b.prototype,"signalingState",{get:function(){m.logger.log(this.user_friendly_id()+".get_signalingState() called, value = "+this.signalingState_);return this.signalingState_},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"onnegotiationneeded",{get:function(){return this.onnegotiationneeded_},set:function(a){var f=this;m.logger.log(this.user_friendly_id()+".set_onnegotiationneeded() called.");this.onnegotiationneeded_=a;this.waitUntilConnected(this.user_friendly_id()+
".onnegotiationneeded").then(function(){var b=f.registerCallbacks(!1,f.isNullCallback(a),t.method_id_RTCPeerConnection_t.onnegotiationneeded);b.then(function(){m.logger.log(f.user_friendly_id()+".onnegotiationneeded(): callback received!!!");var a=new p("negotiationneeded",f);if(f.onnegotiationneeded_)f.onnegotiationneeded_(a)});return f.remoteInvoke(!0,t.method_id_RTCPeerConnection_t.onnegotiationneeded,b.success)})["catch"](function(a){f.logRemoteInvokeError(a,".set_onnegotiationneeded(): failed.")})},
enumerable:!1,configurable:!0});b.prototype.dumpConstraints=function(a){m.logger.log(this.user_friendly_id()+"constraints: "+a);void 0!==a&&0!==Object.keys(a).length||m.logger.log(this.user_friendly_id()+"constraints either undefined or empty!");a&&(m.logger.log(this.user_friendly_id()+"  -- video: "+a.offerToReceiveVideo),m.logger.log(this.user_friendly_id()+"  -- audio: "+a.offerToReceiveAudio),m.logger.log(this.user_friendly_id()+"  -- iceRestart: "+a.iceRestart),m.logger.log(this.user_friendly_id()+
"  -- voiceActivityDetection: "+a.voiceActivityDetection))};b.prototype.fix_constraints=function(a){this.dumpConstraints(a);var f={};this.isUnified()||(f={audio:!0,video:!0});if(a){if(void 0!==a.video||void 0!==a.offerToReceiveVideo)f.video=a.offerToReceiveVideo;if(void 0!==a.audio||void 0!==a.offerToReceiveAudio)f.audio=a.offerToReceiveAudio;void 0!==a.iceRestart&&(f.iceRestart=a.iceRestart);void 0!==a.voiceActivityDetection&&(f.voiceActivityDetection=a.voiceActivityDetection)}return f};b.prototype.createOffer=
function(a,f,b){m.logger.log(this.user_friendly_id()+".createOffer() called.",JSON.stringify(a));return this.isUnified()?void 0==a?this.createOffer_v2():a?this.createOffer_v2(a):this.createOffer_v1(a,f,b):this.createOffer_v1(a,f,b)};b.prototype.createOffer_v2=function(a){var f=this;m.logger.log(this.user_friendly_id()+".createOffer_v2() called.",JSON.stringify(a));return new Promise(function(b,d){f.createOffer_v1(function(a){m.logger.log(f.user_friendly_id()+".createOffer_v2(): got sdp!!!",JSON.stringify(a));
a=new F(a.type,a.sdp);b(a)},function(a){void 0!=a&&(a=f.logRemoteInvokeError(a,".createOffer_v2() failed."),d(a))},a)})};b.prototype.createOffer_v1=function(a,f,b){var d=this;m.logger.log(this.user_friendly_id()+".createOffer_v1().",JSON.stringify(b));var c=[this.waitUntilConnected(this.user_friendly_id()+".createOffer_v1"),this.waitTransceiverAndTrackReady(this.user_friendly_id()+".createOffer_v1")];Promise.all(c).then(function(){var a=d.registerCallbacks(!0,!1,t.method_id_RTCPeerConnection_t.createOffer);
d.remoteInvoke(!1,t.method_id_RTCPeerConnection_t.createOffer,a.success,a.fail,d.fix_constraints(b));return a.prom()}).then(function(a){m.logger.log(d.user_friendly_id()+".createOffer_v1(): success callback received!!!");return(new l(d,d.param0(a).oid,k.ProxyMode.Remote)).syncBarrier()}).then(function(f){a&&a(f)})["catch"](function(a){void 0!=a&&(a=d.logRemoteInvokeError(a,".createOffer_v1() failed."),f&&f(a))})};b.prototype.createAnswer=function(a,f,b){m.logger.log(this.user_friendly_id()+".createAnswer() called.",
JSON.stringify(a));return this.isUnified()?void 0==a?this.createAnswer_v2():a?this.createAnswer_v2(a):this.createAnswer_v1(a,f,b):this.createAnswer_v1(a,f,b)};b.prototype.createAnswer_v2=function(a){var f=this;m.logger.log(this.user_friendly_id()+".createAnswer_v2() called.",JSON.stringify(a));return new Promise(function(b,d){f.createAnswer_v1(function(a){m.logger.log(f.user_friendly_id()+".createAnswer_v2(): got sdp!!!",JSON.stringify(a));a=new F(a.type,a.sdp);b(a)},function(a){void 0!=a&&(a=f.logRemoteInvokeError(a,
".createAnswer_v2() failed."),d(a))},a)})};b.prototype.createAnswer_v1=function(a,f,b){var d=this;m.logger.log(this.user_friendly_id()+".createAnswer_v1() called.",JSON.stringify(b));var c=[this.waitUntilConnected(this.user_friendly_id()+".createAnswer_v1"),this.waitTransceiverAndTrackReady(this.user_friendly_id()+".createAnswer_v1")];Promise.all(c).then(function(){var a=d.registerCallbacks(!0,!1,t.method_id_RTCPeerConnection_t.createAnswer);d.remoteInvoke(!1,t.method_id_RTCPeerConnection_t.createAnswer,
a.success,a.fail,d.fix_constraints(b),{});return a.prom()}).then(function(a){m.logger.log(d.user_friendly_id()+".createAnswer_v1(): success callback received!!!");return(new l(d,d.param0(a).oid,k.ProxyMode.Remote)).syncBarrier()}).then(function(f){a&&a(f)})["catch"](function(a){a=d.logRemoteInvokeError(a,".createAnswer_v1() failed.");f&&f(a.message)})};b.prototype.updateSdpDescription=function(a){m.logger.log(this.user_friendly_id()+".updateSdpDescription() called.");var f=this;return new Promise(function(b,
d){var c=[];1==a?c.push(f.remoteInvoke(!1,t.method_id_RTCPeerConnection_t.localDescription,{oid:0})):c.push(f.remoteInvoke(!1,t.method_id_RTCPeerConnection_t.remoteDescription,{oid:0}));Promise.all(c).then(function(a){m.logger.log(f.user_friendly_id()+".updateSdpDescription() resolved.");return(new l(f,f.param0(a[0]).oid,k.ProxyMode.Remote)).syncBarrier()}).then(function(d){1==a?f.localDescription_=d:f.remoteDescription_=d;m.logger.log(f.user_friendly_id()+".updateSdpDescription() updated sdp");b()})["catch"](function(a){f.logRemoteInvokeError(a,
"sdp.syncBarrier() failed!");d()})})};b.prototype.sdpToString=function(a){var f="",b=0;for(a=a?a.split(/\r?\n/):[];b<a.length;b++){var d=a[b];-1!=d.indexOf("m=",0)?f+=d+"\\r\\n":-1!=d.indexOf("o=-",0)?f+=d+"\\r\\n":-1!=d.indexOf("a=ssrc",0)&&(f+=d+"\\r\\n")}return f};b.prototype.setLocalDescription=function(a,f,b){m.logger.log(this.user_friendly_id()+".setLocalDescription() called.",this.sdpToString(a.sdp));if(a instanceof F)return this.setLocalDescription_v2(a);if(a instanceof RTCSessionDescription&&
f)return this.setLocalDescription_v1(a,f,b);f=void 0;a?f=new F(a.type,a.sdp):(m.logger.log(this.user_friendly_id()+".setLocalDescription() empty param1, setting sdp type to rollback"),a=void 0,a="have-remote-offer"==this.signalingState_?"answer":"have-local-pranswer"==this.signalingState_||"have-remote-pranswer"==this.signalingState_?"pranswer":"offer",f=new F(a,""));return this.setLocalDescription_v2(f)};b.prototype.setLocalDescription_v2=function(a){var f=this;m.logger.log(this.user_friendly_id()+
".setLocalDescription_v2() called.");return new Promise(function(b,d){f.waitUntilConnected(f.user_friendly_id()+".setLocalDescription_v2").then(function(){return(new l(f,0,k.ProxyMode.Local,{type:l.convertC2H(a.type),sdp:a.sdp})).syncBarrier()}).then(function(c){var g=f.registerCallbacks(!0,!1,t.method_id_RTCPeerConnection_t.setLocalDescription_v2),r={type:l.convertC2H(a.type),sdp:a.sdp};f.remoteInvoke(!1,t.method_id_RTCPeerConnection_t.setLocalDescription_v2,r,g.success,g.fail);g.prom().then(function(){m.logger.log(f.user_friendly_id()+
".setLocalDescription_v2(): success callback received!!!");f.localDescription_=c;m.logger.log(f.user_friendly_id()+".setLocalDescription_v2(): updated localDescription_");Promise.all([]).then(function(){m.logger.log(f.user_friendly_id()+".setLocalDescription_v2() success.");b()})["catch"](function(a){a=f.logRemoteInvokeError(a,".prop.setLocalDescription_v2() failed!");d(a)})})["catch"](function(a){a=f.logRemoteInvokeError(a,"setLocalDescription_v2() error callback received!");d(a)})})["catch"](function(a){a=
f.logRemoteInvokeError(a,".setLocalDescription_v2() failed.");d(a)})})};b.prototype.setLocalDescription_v1=function(a,f,b){var d=this;m.logger.log(this.user_friendly_id()+".setLocalDescription_v1() called.");this.waitUntilConnected(this.user_friendly_id()+".setLocalDescription_v1").then(function(){return(new l(d,0,k.ProxyMode.Local,{type:l.convertC2H(a.type),sdp:a.sdp})).syncBarrier()}).then(function(a){var c=d.registerCallbacks(!0,!1,t.method_id_RTCPeerConnection_t.setLocalDescription);d.remoteInvokeEx(!1,
t.method_id_RTCPeerConnection_t.setLocalDescription,[a],c.success,c.fail);c.prom().then(function(){m.logger.log(d.user_friendly_id()+".setLocalDescription_v1(): success callback received!!!");d.localDescription_=a;m.logger.log(d.user_friendly_id()+".setLocalDescription_v1(): updated localDescription_");Promise.all([]).then(function(){m.logger.log(d.user_friendly_id()+".setLocalDescription_v1() success.");f&&f()})["catch"](function(a){a=d.logRemoteInvokeError(a,".prop.setLocalDescription_v1() failed.");
b&&b(a.message)})})["catch"](function(a){a=d.logRemoteInvokeError(a,".setLocalDescription_v1() error callback received.");b&&b(a.message)})})["catch"](function(a){a=d.logRemoteInvokeError(a,".setLocalDescription_v1() failed.");b&&b(a.message)})};b.prototype.setRemoteDescription=function(a,f,b){m.logger.log(this.user_friendly_id()+".setRemoteDescription() called.",this.sdpToString(a.sdp));if(a instanceof F)return this.setRemoteDescription_v2(a);if(a instanceof RTCSessionDescription&&f)return this.setRemoteDescription_v1(a,
f,b);f=void 0;a?f=new F(a.type,a.sdp):(m.logger.log(this.user_friendly_id()+".setRemoteDescription() empty param1, setting sdp type to rollback"),a=void 0,a="have-remote-offer"==this.signalingState_?"answer":"have-local-pranswer"==this.signalingState_||"have-remote-pranswer"==this.signalingState_?"pranswer":"offer",f=new F(a,""));return this.setRemoteDescription_v2(f)};b.prototype.setRemoteDescription_v2=function(a){var f=this;m.logger.log(this.user_friendly_id()+".setRemoteDescription_v2() called.");
return new Promise(function(b,d){f.waitUntilConnected(f.user_friendly_id()+".setRemoteDescription_v2").then(function(){var c=new l(f,0,k.ProxyMode.Local,{type:l.convertC2H(a.type),sdp:a.sdp}),g=[];g.push(c.syncBarrier());var c=f.registerCallbacks(!0,!1,t.method_id_RTCPeerConnection_t.setRemoteDescription_v2),r={type:l.convertC2H(a.type),sdp:a.sdp};f.remoteInvoke(!1,t.method_id_RTCPeerConnection_t.setRemoteDescription_v2,r,c.success,c.fail);g.push(c.prom());Promise.all(g).then(function(a){m.logger.log(f.user_friendly_id()+
".setRemoteDescription_v2(): remote success.");f.remoteDescription_=a[0];g=[];f.usingasynconly_||(f.isUnified()?g.push(f.getTransceiversAsync()):g.push(f.getSendersAsync()));Promise.all(g).then(function(a){m.logger.log(f.user_friendly_id()+".setRemoteDescription_v2(): final success.");b()})["catch"](function(a){a=f.logRemoteInvokeError(a,".prop.setRemoteDescription_v2() final failed.");d(a)})})["catch"](function(a){a=f.logRemoteInvokeError(a,".prop.setRemoteDescription_v2() remote failed.");d(a)})})["catch"](function(a){a=
f.logRemoteInvokeError(a,".setRemoteDescription_v2() failed.");d(a)})})};b.prototype.setRemoteDescription_v1=function(a,f,b){var d=this;m.logger.log(this.user_friendly_id()+".setRemoteDescription_v1() called.");this.waitUntilConnected(this.user_friendly_id()+".setRemoteDescription_v1").then(function(){return(new l(d,0,k.ProxyMode.Local,{type:l.convertC2H(a.type),sdp:a.sdp})).syncBarrier()}).then(function(a){var c=d.registerCallbacks(!0,!1,t.method_id_RTCPeerConnection_t.setRemoteDescription);d.remoteInvokeEx(!1,
t.method_id_RTCPeerConnection_t.setRemoteDescription,[a],c.success,c.fail);c.prom().then(function(){m.logger.log(d.user_friendly_id()+".setRemoteDescription_v1(): success callback received!!!");d.remoteDescription_=a;m.logger.log(d.user_friendly_id()+".setRemoteDescription_v1(): updated remoteDescription_");var c=[];d.usingasynconly_||(d.isUnified()?c.push(d.getTransceiversAsync()):c.push(d.getSendersAsync()));Promise.all(c).then(function(){m.logger.log(d.user_friendly_id()+".setRemoteDescription_v1(): success.");
f&&f()})["catch"](function(a){a=d.logRemoteInvokeError(a,".prop.setRemoteDescription_v1() failed.");b&&b(a.message)})})})["catch"](function(a){a=d.logRemoteInvokeError(a,".setRemoteDescription_v1() failed.");b&&b(a.message)})};b.prototype.getLocalStreams=function(){m.logger.log("PeerConnection.getLocalStreams() called. [oid="+this.object_id()+"]");for(var a=0,f=this.localStreams;a<f.length;a++)m.logger.log(JSON.stringify(f[a]));return this.localStreams};b.prototype.getRemoteStreams=function(){m.logger.log(this.user_friendly_id()+
".getRemoteStreams() called.");for(var a=0,f=this.remoteStreams;a<f.length;a++)m.logger.log(JSON.stringify(f[a]));return this.remoteStreams};b.prototype.addTrack=function(a,f){return this.addTrackInternal(a,f,!1)};b.prototype.addTrackAsync=function(a,f){return this.addTrackInternal(a,f,!0)};b.prototype.addTrackInternal=function(a,f,b){var d=this;m.logger.log(this.user_friendly_id()+".addTrackInternal() called. track.id = "+a.id+", streams = "+JSON.stringify(f)+", isAsync = "+b);this.incrementPendingTrackCount();
var c=[];if(f)if(f instanceof q.RemoteStream)c.push(f.id),this.localStreams.push(f);else for(var g=0;g<f.length;g++)c.push(f[g].id),this.localStreams.push(f[g]);else m.logger.log(this.user_friendly_id()+".addTrackInternal() empty streams passed in, continue with empty array");var r=new n.RtpSender(this,0,k.ProxyMode.Pseudo,this.isUnified());this.senders_.push(r);f=new Promise(function(f,b){d.waitUntilConnected(d.user_friendly_id()+".addTrackInternal").then(function(){return d.remoteInvokeEx(!1,t.method_id_RTCPeerConnection_t.addTrack,
[a],c)}).then(function(a){m.logger.log(d.user_friendly_id()+".addTrackInternal() success with oid: "+d.param0(a).oid);r.bind(d,d.param0(a).oid);r.syncBarrier().then(function(){m.logger.log(d.user_friendly_id()+"sender.syncBarrier(): success");!d.usingasynconly_&&d.isUnified()?d.getTransceiversAsync().then(function(){d.decrementPendingTrackCount();f(r)})["catch"](function(a){d.logRemoteInvokeError(a,".addTrackInternal() getTransceiversAsync() failed!");d.decrementPendingTrackCount();b()}):(d.decrementPendingTrackCount(),
f(r))})["catch"](function(a){d.logRemoteInvokeError(a,"sender.syncBarrier() failed!");d.decrementPendingTrackCount();b()})})["catch"](function(a){d.logRemoteInvokeError(a,"addTrack() failed!");d.decrementPendingTrackCount();b()})});if(b)return f;m.logger.log(this.user_friendly_id()+".addTrack() returning: "+r);return r};b.prototype.removeTrack=function(a){m.logger.log(this.user_friendly_id()+".removeTrack() called.");this.removeTrackAsync(a)};b.prototype.removeTrackAsync=function(a){var f=this;m.logger.log(this.user_friendly_id()+
".removeTrackAsync() called.");this.incrementPendingTrackCount();for(var b=0;b<this.senders_.length;b++)this.senders_[b]==a&&this.senders_.splice(b,1);return new Promise(function(b,d){f.waitUntilConnected(f.user_friendly_id()+".removeTrackAsync").then(function(){return f.remoteInvokeEx(!1,t.method_id_RTCPeerConnection_t.removeTrack,[a])}).then(function(){m.logger.log(f.user_friendly_id()+".removeTrackAsync() success.");!f.usingasynconly_&&f.isUnified()?f.getTransceiversAsync().then(function(){f.decrementPendingTrackCount();
b()})["catch"](function(a){f.logRemoteInvokeError(a,"removeTrackAsync() getTransceiversAsync() failed!");f.decrementPendingTrackCount();d(a)}):(f.decrementPendingTrackCount(),b())})["catch"](function(a){f.logRemoteInvokeError(a,"removeTrackAsync() failed!");f.decrementPendingTrackCount();d(a)})})};b.prototype.addStream=function(a){var b=this;m.logger.log(this.user_friendly_id()+".addStream() called: "+JSON.stringify(a));this.localStreams.push(a);this.waitUntilConnected(this.user_friendly_id()+".addStream").then(function(){return b.remoteInvokeEx(!1,
t.method_id_RTCPeerConnection_t.addStream,[a],{})}).then(function(){m.logger.log(b.user_friendly_id()+".addStream() success.")})["catch"](function(a){b.logRemoteInvokeError(a,"addStream() failed.")})};b.prototype.removeStream=function(a){var b=this;m.logger.log(this.user_friendly_id()+".removeStream() called: "+JSON.stringify(a));for(var d=0;d<this.localStreams.length;d++)this.localStreams[d]==a&&this.localStreams.splice(d,1);this.waitUntilConnected(this.user_friendly_id()+".removeStream").then(function(){return b.remoteInvokeEx(!1,
t.method_id_RTCPeerConnection_t.removeStream,[a])}).then(function(){m.logger.log(b.user_friendly_id()+".removeStream() success.")})["catch"](function(a){b.logRemoteInvokeError(a,"removeStream() failed.")})};Object.defineProperty(b.prototype,"onaddstream",{get:function(){return this.onaddstream_},set:function(a){var b=this;m.logger.log(this.user_friendly_id()+".set_onaddstream() called.");this.onaddstream_=a;this.waitUntilConnected(this.user_friendly_id()+".onaddstream").then(function(){var d=b.registerCallbacks(!1,
b.isNullCallback(a),t.method_id_RTCPeerConnection_t.onaddstream);d.then(function(a){(new q.RemoteStreamEvent(b,b.param0(a).oid)).syncBarrier().then(function(a){m.logger.log(b.user_friendly_id()+".onaddstream callback received!");void 0===b.remoteStreams.find(function(b){return void 0!=a.stream&&b.object_id()===a.stream.object_id()})&&b.remoteStreams.push(a.stream);b.onaddstream_&&(m.logger.log(b.user_friendly_id()+".onaddstream notified!!! "+a.stream.id),b.onaddstream_(a))})});return b.remoteInvoke(!0,
t.method_id_RTCPeerConnection_t.onaddstream,d.success)})["catch"](function(a){b.logRemoteInvokeError(a,"set_onaddstream() failed!")})},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"onremovestream",{get:function(){return this.onremovestream_},set:function(a){var b=this;m.logger.log(this.user_friendly_id()+".set_onremovestream() called.");this.onremovestream_=a;this.waitUntilConnected(this.user_friendly_id()+".onremovestream").then(function(){var d=b.registerCallbacks(!1,b.isNullCallback(a),
t.method_id_RTCPeerConnection_t.onremovestream);d.then(function(a){(new q.RemoteStreamEvent(b,b.param0(a).oid)).syncBarrier().then(function(a){m.logger.log(b.user_friendly_id()+".onremovestream callback received! "+a.stream.id);var d=b.remoteStreams.findIndex(function(b){return b.id==a.stream.id});0<=d&&b.remoteStreams.splice(d,1);if(b.onremovestream_)b.onremovestream_(a)})});return b.remoteInvoke(!0,t.method_id_RTCPeerConnection_t.onremovestream,d.success)})["catch"](function(a){b.logRemoteInvokeError(a,
"set_onremovestream() failed!")})},enumerable:!1,configurable:!0});b.prototype.getStats=function(a){var b=this;return new Promise(function(d,c){b.isRedirected()?b.waitUntilConnected(b.user_friendly_id()+".getStats").then(function(){var c=b.registerCallbacks(!0,!1,t.method_id_RTCPeerConnection_t.getStats);c.then(function(b){void 0===b.params||0===b.params.length||0===b.params[0].length?d():a?(a(D.StatsReport.fromJSON(JSON.parse(b.params[0]))),d()):d(D.StatsReport.toRTCStatsReport(JSON.parse(b.params[0])))});
return a?b.remoteInvoke(!1,t.method_id_RTCPeerConnection_t.getStats,c.success):b.remoteInvoke(!1,t.method_id_RTCPeerConnection_t.getStats_v2,c.success)})["catch"](function(a){b&&(a=b.logRemoteInvokeError(a,".getStats() failed!"),c(a))}):(a({}),d())})};b.prototype.SendTelemetryData=function(a,b,d){w.getRedirector().telemetry.SendTelemetryData(y.tel_cmd.Data,a,b,d)};b.prototype.MillisecondstoDisplayformat_=function(a){var b,d;d=Math.floor(a/1E3);b=Math.floor(d/60);a=Math.floor(b/60);m.logger.log(Math.floor(a/
24)+":"+a%24+":"+b%60+":"+d%60)};b.prototype.CalculateCallDurationandType_=function(){if(1==this.timeerstarted_){this.timeerstarted_=!1;this.callendTime_=(new Date).getTime();var a=this.callendTime_-this.callstartTime_;this.MillisecondstoDisplayformat_(a);a=Math.round(a/1E3);m.logger.log("Call Duration "+a);1==this.conferencecall_?this.SendTelemetryData(y.tel_key_ConferenceCallDuration,a,1):(1==this.audiocall_.active&&this.SendTelemetryData(y.tel_key_AudioCallDuration,a,1),1==this.videocall_.active&&
this.SendTelemetryData(y.tel_key_VideoCallDuration,a,1),1==this.screensharingcall_.active&&this.SendTelemetryData(y.tel_key_ScreensharingCallDuration,a,1));var b;1==this.firsttimelocaloffer_&&(b=this.callstartTime_-this.outgoingcallstart_);1==this.firsttimeremoteoffer_&&(b=this.callstartTime_-this.incomingcallstart_);this.MillisecondstoDisplayformat_(b);b=Math.round(b/1E3);m.logger.log("Call Establish Time "+b);1==this.incomingcall_?this.SendTelemetryData(y.tel_key_CallEstIncoming,b,1):1==this.outgoingcall_&&
this.SendTelemetryData(y.tel_key_CallEstOutgoing,b,1);this.SendTelemetryData(y.tel_key_PerfCallState,y.tel_CallState.idle,1)}};b.prototype.close=function(){var a=this;m.logger.log(this.user_friendly_id()+".close() called.");this.CalculateCallDurationandType_();this.unregisterStateChangeNotification(this.onStateChange);this.onnegotiationneeded=this.onsignalingstatechange=this.onicegatheringstatechange=this.oniceconnectionstatechange=this.onicecandidate=this.onaddstream=null;this.waitUntilConnected(this.user_friendly_id()+
".close").then(function(){return a.remoteInvoke(!1,t.method_id_RTCPeerConnection_t.close)}).then(function(){a.iceQ_=null;a.release();m.logger.log(a.user_friendly_id()+".close() success.")})["catch"](function(b){a.logRemoteInvokeError(b,".close() failed.");a.iceQ_=null;a.release()})};b.prototype.createDTMFSender=function(a){m.logger.log(this.user_friendly_id()+".createDTMFSender() called.");var b,d=this.senders_;if(void 0===d||0===d.length)d=this.getSenders();void 0!=d&&(d=d.find(function(b){return b.track.id===
a.id}),void 0!=d&&(m.logger.log(this.user_friendly_id()+" returning RtpSender with oid:"+d.object_id()),b=d.dtmf));return b};Object.defineProperty(b.prototype,"usingAsyncOnly",{get:function(){return this.usingasynconly_},set:function(a){m.logger.log(this.user_friendly_id()+".usingAsyncOnly() called with async:"+a);void 0!=a&&null!=a&&(this.usingasynconly_=a)},enumerable:!1,configurable:!0});b.prototype.getSendersAsync=function(){m.logger.log(this.user_friendly_id()+".getSendersAsync() called.");return this.getSendersAsyncInternal()};
b.prototype.getSenders=function(){m.logger.log(this.user_friendly_id()+".getSenders() called. ");if(this.usingasynconly_)throw m.logger.log(this.user_friendly_id()+".getSenders(): throwing exception: not allowed when usingAsyncOnly is true!!!"),new DOMException(".getSenders() not allowed when usingAsyncOnly is true!!!");this.getSendersAsyncInternal();m.logger.log(this.user_friendly_id()+".getSenders() returning:"+this.senders_.length+" items");return this.senders_};b.prototype.getSendersAsyncInternal=
function(){var a=this;m.logger.log(this.user_friendly_id()+".getSendersAsyncInternal() called. "+this.senders_);return new Promise(function(b,d){a.waitUntilConnected(a.user_friendly_id()+".getSendersAsyncInternal").then(function(){m.logger.log(a.user_friendly_id()+".getSendersAsyncInternal invoking remote");return a.remoteInvoke(!1,t.method_id_RTCPeerConnection_t.getSenders)}).then(function(d){m.logger.log(a.user_friendly_id()+".getSendersAsyncInternal remote success");var c=[],g=[];d.params[0].forEach(function(b){var f=
a.senders_.find(function(a){return a.object_id()===b.oid});void 0===f&&(m.logger.log(a.user_friendly_id()+" adding a RtpSender with oid:"+b.oid),f=new n.RtpSender(a,b.oid,k.ProxyMode.Remote,a.isUnified()));g.push(f.syncBarrier());c.push(f)});Promise.all(g).then(function(){a.senders_=c;m.logger.log(a.user_friendly_id()+".getSendersAsyncInternal: returning senders with ids ["+a.senders_.map(function(a){return a.object_id()})+"]");b(a.senders_)})["catch"](function(d){a.logRemoteInvokeError(d,".prop.getSendersAsyncInternal() failed.");
a.senders_=[];b(a.senders_)})})["catch"](function(d){a.logRemoteInvokeError(d,".getSendersAsyncInternal() failed.");a.senders_=[];b(a.senders_)})})};b.prototype.getReceiversAsync=function(){m.logger.log(this.user_friendly_id()+".getReceiversAsync() called.");return this.getReceiversAsyncInternal()};b.prototype.getReceivers=function(){m.logger.log(this.user_friendly_id()+".getReceivers() called. ");if(this.usingasynconly_)throw m.logger.log(this.user_friendly_id()+".getReceivers(): throwing exception: not allowed when usingAsyncOnly is true!!!"),
new DOMException(".getReceivers() not allowed when usingAsyncOnly is true!!!");this.getReceiversAsyncInternal();m.logger.log(this.user_friendly_id()+".getReceivers() returning:"+this.receivers_.length+" items");return this.receivers_};b.prototype.getReceiversAsyncInternal=function(){var a=this;m.logger.log(this.user_friendly_id()+".getReceiversAsyncInternal() called. "+this.receivers_);return new Promise(function(b,d){a.waitUntilConnected(a.user_friendly_id()+".getReceiversAsyncInternal").then(function(){return a.remoteInvoke(!1,
t.method_id_RTCPeerConnection_t.getReceivers)}).then(function(d){m.logger.log(a.user_friendly_id()+".getReceiversAsyncInternal: remote success.");var c=[],g=[];d.params[0].forEach(function(b){var f=a.receivers_.find(function(a){return a.object_id()===b.oid});void 0===f&&(m.logger.log(a.user_friendly_id()+" adding a RtpReceiver with oid:"+b.oid),f=new n.RtpReceiver(a,b.oid,k.ProxyMode.Remote,a.isUnified()));g.push(f.syncBarrier());c.push(f)});Promise.all(g).then(function(){a.receivers_=c;m.logger.log(a.user_friendly_id()+
".getReceiversAsyncInternal: returning receiver with ids ["+a.receivers_.map(function(a){return a.object_id()})+"]");b(a.receivers_)})["catch"](function(d){a.logRemoteInvokeError(d,".prop.getReceiversAsyncInternal() failed!");a.receivers_=[];b(a.receivers_)})})["catch"](function(d){a.logRemoteInvokeError(d,".getReceiversAsyncInternal() failed!");a.receivers_=[];b(a.receivers_)})})};b.prototype.addTransceiver=function(a,b){m.logger.log(this.user_friendly_id()+".addTransceiver() called: "+JSON.stringify(a)+
" init="+JSON.stringify(b));return this.addTransceiverInternal(a,b,!1)};b.prototype.addTransceiverAsync=function(a,b){m.logger.log(this.user_friendly_id()+".addTransceiverAsync() called: "+JSON.stringify(a)+" init="+JSON.stringify(b));return this.addTransceiverInternal(a,b,!0)};b.prototype.addTransceiverInternal=function(a,b,d){var c=this;m.logger.log(this.user_friendly_id()+".addTransceiverInternal() called: "+JSON.stringify(a)+" init="+JSON.stringify(b));this.incrementPendingTransceiverCount();
var r=z.RtcRtpTransceiverDirection.sendrecv,e=void 0;b&&(e=z.RtcRtpTransceiverInit.toRtcRtpTransceiverInit(b),e.direction&&(r=e.direction));var C=b;g.RemoteSession.isFeatureCallConstraintsSupported()&&(C=e);var x=new z.RtpTransceiver(this,0,k.ProxyMode.Pseudo,this.isUnified(),r);this.transceivers_.push(x);b=new Promise(function(b,f){c.waitUntilConnected(c.user_friendly_id()+".addTransceiverInternal").then(function(){return"string"===typeof a?c.remoteInvoke(!1,t.method_id_RTCPeerConnection_t.addTransceiverWithKind,
a,C):c.remoteInvokeEx(!1,t.method_id_RTCPeerConnection_t.addTransceiverWithTrack,[a],C)}).then(function(a){m.logger.log(c.user_friendly_id()+".addTransceiverInternal() success with oid: "+c.param0(a).oid);x.bind(c,c.param0(a).oid);x.syncBarrier().then(function(){m.logger.log(c.user_friendly_id()+".addTransceiverInternal(): success");c.decrementPendingTransceiverCount();b(x)})["catch"](function(a){c.logRemoteInvokeError(a,".prop.addTransceiverInternal() failed!");c.decrementPendingTransceiverCount();
f()})})["catch"](function(a){c.logRemoteInvokeError(a,"addTransceiverInternal() failed!");c.decrementPendingTransceiverCount();f()})});m.logger.log(this.user_friendly_id()+".addTransceiverInternal() returning:");return d?b:x};b.prototype.incrementPendingTransceiverCount=function(){++this.pendingtransceiver_};b.prototype.decrementPendingTransceiverCount=function(){0<this.pendingtransceiver_&&--this.pendingtransceiver_};b.prototype.incrementPendingTrackCount=function(){++this.pendingtrack_};b.prototype.decrementPendingTrackCount=
function(){0<this.pendingtrack_&&--this.pendingtrack_};b.prototype.waitTransceiverAndTrackReady=function(a){var b=this;return new Promise(function(d,c){m.logger.trace(b.user_friendly_id()+".waitTransceiverAndTrackReady(): pendingtransceiver_="+b.pendingtransceiver_+", pendingtrack_="+b.pendingtrack_);if(0==b.pendingtransceiver_&&0==b.pendingtrack_){for(;b.deferredOfferAnswers&&0<b.deferredOfferAnswers.length;)b.deferredOfferAnswers.shift().post(!0);d()}else b.deferredOfferAnswers.push(new k.deferred_action(d,
c,a)),b.checkTransceiverAndTrack(600,25)})};b.prototype.checkTransceiverAndTrack=function(a,b){var d=this;if(0>=a)for(m.logger.log(".checkTransceiverAndTrack() timeout waiting for transceiver ready!");this.deferredOfferAnswers&&0<this.deferredOfferAnswers.length;)this.deferredOfferAnswers.shift().post(!1);else setTimeout(function(a){if(0==d.pendingtransceiver_&&0==d.pendingtrack_)for(;d.deferredOfferAnswers&&0<d.deferredOfferAnswers.length;)d.deferredOfferAnswers.shift().post(!0);else m.logger.log('.checkTransceiverAndTrack(): count= "'+
a),d.checkTransceiverAndTrack(--a,b)},b,a)};b.prototype.getTransceivers=function(){m.logger.log(this.user_friendly_id()+".getTransceivers() called. ");if(this.usingasynconly_)throw m.logger.log(this.user_friendly_id()+".getTransceivers(): throwing exception: not allowed when usingAsyncOnly is true!!!"),new DOMException(".getTransceivers() not allowed when usingAsyncOnly is true!!!");this.getTransceiversAsync();m.logger.log(this.user_friendly_id()+".getTransceivers() returning:"+this.transceivers_.length+
" items");return this.transceivers_};b.prototype.getTransceiversAsync=function(){var a=this;m.logger.log(this.user_friendly_id()+".getTransceiversAsync() called. ");return new Promise(function(b,d){if(!a.isUnified())return m.logger.log(a.user_friendly_id()+".getTransceiversAsync() called in non-Unified. "),Promise.resolve(a.transceivers_);a.waitUntilConnected(a.user_friendly_id()+".getTransceiversAsync").then(function(){return a.remoteInvoke(!1,t.method_id_RTCPeerConnection_t.getTransceivers)}).then(function(d){m.logger.log(a.user_friendly_id()+
".getTransceiversAsync() remote success.");var c=[],g=[];d.params[0].forEach(function(b){var f=a.transceivers_.find(function(a){return a.object_id()===b.oid});void 0===f&&(m.logger.log(a.user_friendly_id()+" adding a RtpTransceiver with oid:"+b.oid),f=new z.RtpTransceiver(a,b.oid,k.ProxyMode.Remote,a.isUnified()));g.push(f.syncBarrier());c.push(f)});Promise.all(g).then(function(){a.transceivers_=c;m.logger.log(a.user_friendly_id()+".prop.getTransceiversAsync: returning transceiver with ids ["+a.transceivers_.map(function(a){return a.object_id()})+
"]");b(a.transceivers_)})["catch"](function(d){a.logRemoteInvokeError(d,".prop.getTransceiversAsync() failed!");a.transceivers_=[];b(a.transceivers_)})})["catch"](function(d){a.logRemoteInvokeError(d,".getTransceiversAsync() failed!");a.transceivers_=[];b(a.transceivers_)})})};Object.defineProperty(b.prototype,"sctp",{get:function(){return this.sctp_},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"ondatachannel",{get:function(){return this.ondatachannel_},set:function(a){var b=
this;m.logger.log(this.user_friendly_id()+".set_ondatachannel() called.");this.ondatachannel_=a;this.waitUntilConnected(this.user_friendly_id()+".ondatachannel").then(function(){var d=b.registerCallbacks(!1,b.isNullCallback(a),t.method_id_RTCPeerConnection_t.ondatachannel);d.then(function(a){m.logger.log(b.user_friendly_id()+".ondatachannel callback received!!!");if(null===b.remotedatachannel_||b.remotedatachannel_.object_id()!=b.param0(a).oid)b.remotedatachannel_=new B.RtcDataChannel(b,b.param0(a).oid,
k.ProxyMode.Remote),b.remotedatachannel_.syncBarrier().then(function(){m.logger.log(b.user_friendly_id()+"remotedatachannel_.syncBarrier(): success");var a=new Event("ondatachannel");a.channel=b.remotedatachannel_;if(b.localdatachannel_&&!b.localdatachannel_.isdestroyed())b.localdatachannel_.syncBarrier().then(function(){m.logger.log(b.user_friendly_id()+"ondatachannel(): notifying...");if(b.ondatachannel_)b.ondatachannel_(a)})["catch"](function(){m.logger.log(b.user_friendly_id()+"localdatachannel_.syncBarrier(): failed!")});
else if(m.logger.log(b.user_friendly_id()+"ondatachannel(): notifying..."),b.ondatachannel_)b.ondatachannel_(a)})["catch"](function(){m.logger.log(b.user_friendly_id()+"remotedatachannel_.syncBarrier(): failed!")})});return b.remoteInvoke(!0,t.method_id_RTCPeerConnection_t.ondatachannel,d.success)})["catch"](function(){m.logger.log(b.user_friendly_id()+".ondatachannel() failed.")})},enumerable:!1,configurable:!0});b.prototype.fixDataChannelConfig=function(a){m.logger.log(this.user_friendly_id()+".fixDataChannelConfig() called: "+
a);void 0==a&&(a={});void 0==a.negotiated&&void 0==a.id&&(a.negotiated=!1,a.id=-1);return a};b.prototype.createDataChannel=function(a,b){var d=this;m.logger.log(this.user_friendly_id()+".createDataChannel() called. label:"+a);this.localdatachannel_=new B.RtcDataChannel(this,0,k.ProxyMode.Pseudo);this.waitUntilConnected(this.user_friendly_id()+".createDataChannel").then(function(){return d.remoteInvoke(!1,t.method_id_RTCPeerConnection_t.createDataChannel,a,d.fixDataChannelConfig(b))}).then(function(a){m.logger.log(d.user_friendly_id()+
".createDataChannel() success with oid: "+d.param0(a).oid);d.localdatachannel_.bind(d,d.param0(a).oid);d.localdatachannel_.syncBarrier().then(function(){m.logger.log(d.user_friendly_id()+"channel.syncBarrier(): success")})["catch"](function(){m.logger.log(d.user_friendly_id()+"channel.syncBarrier(): failed!")})})["catch"](function(a){a=d.param0(a);m.logger.log(d.user_friendly_id()+".createDataChannel() failed with error: "+a)});m.logger.log(this.user_friendly_id()+".createDataChannel() returning: "+
this.localdatachannel_);return this.localdatachannel_};return b}(k.ProxyObject);a.PeerConnection=b},658:function(b,a,c){var e=this&&this.__spreadArrays||function(){for(var a=0,b=0,d=arguments.length;b<d;b++)a+=arguments[b].length;for(var a=Array(a),c=0,b=0;b<d;b++)for(var g=arguments[b],r=0,e=g.length;r<e;r++,c++)a[c]=g[r];return a};Object.defineProperty(a,"__esModule",{value:!0});a.ProxyObject=a.ProxyMode=a.ProxyReadyState=a.number_allocator=a.callback=a.rpc_callback=a.deferred_action=void 0;var u=
c(946),h=c(851),d=c(545),w=c(247),q=c(550),n=function(){function a(b,d,c){this.resolve=b;this.reject=d;this.name_=c}Object.defineProperty(a.prototype,"name",{get:function(){return this.name_},enumerable:!1,configurable:!0});a.prototype.post=function(a){1==a?(h.logger.log('deferred_action.post(): resolving "'+this.name_+'"'),this.resolve()):(h.logger.log('deferred_action.post(): rejecting "'+this.name_+'"'),this.reject())};a.prototype.postWithResult=function(a,b){1==a?(h.logger.log('deferred_action.post(): resolving "'+
this.name_+'"'),this.resolve(b)):(h.logger.log('deferred_action.post(): rejecting "'+this.name_+'"'),this.reject())};a.prototype.postResolve=function(a){this.resolve(a)};a.prototype.postReject=function(a){void 0==a?this.reject():this.reject(a)};return a}();a.deferred_action=n;var k=function(){return function(a,b){this.id=a;this.is_null=b}}();a.rpc_callback=k;var v=function(){function a(b,d,c){this.success=new k(b<<16,d);this.fail=new k(b<<16|1,d);this.id=b;this.oneShot=c}a.prototype.resolve=function(a){h.logger.trace("callback.resolve() called. [id="+
this.id+"]");null!=this.handler&&this.handler(a)};a.prototype.reject=function(a){null!=this.err_handler&&this.err_handler(a)};a.prototype.then=function(a){this.handler=a};a.prototype.prom=function(){var a=this;return new Promise(function(b,d){a.handler=b;a.err_handler=d})};return a}();a.callback=v;var z=function(){function a(b,d,c){this.min_=b<a.BOUND_LOW||b>a.BOUND_HIGH?a.DEF_MIN:b;this.max_=d<a.BOUND_LOW||d>a.BOUND_HIGH?a.DEF_MAX:d;this.interval_=c<a.BOUND_LOW||c>a.BOUND_HIGH?a.DEF_INTERVAL:c;this.numbers_=
new Map;this.numbers_.set(this.min_,this.max_)}Object.defineProperty(a.prototype,"max",{get:function(){return this.max_},enumerable:!1,configurable:!0});Object.defineProperty(a.prototype,"min",{get:function(){return this.min_},enumerable:!1,configurable:!0});Object.defineProperty(a.prototype,"interval",{get:function(){return this.interval_},enumerable:!1,configurable:!0});Object.defineProperty(a.prototype,"numbers",{get:function(){return this.numbers_},enumerable:!1,configurable:!0});a.prototype.allocate=
function(){var a=-1;if(0<this.numbers_.size){var b=Array.from(this.numbers_.keys()).sort(function(a,b){return a-b})[0],d=this.numbers_.get(b),a=this.min_+(b-this.min_)*this.interval_;this.numbers_["delete"](b);b+=1;b<d&&this.numbers_.set(b,d)}return a};a.prototype.deallocate=function(a){var b=Array.from(this.numbers_.keys()).sort(function(a,b){return a-b});a=(a-this.min_)/this.interval_;for(var d=!1,c=0;c<b.length&&(b[c]==a+1?(this.numbers_.set(a,this.numbers_.get(b[c])),this.numbers_["delete"](b[c]),
d=!0):this.numbers_.get(b[c])==a&&(this.numbers_.set(b[c],a+1),c+1<b.length&&b[c+1]==a+1&&(this.numbers_.set(b[c],this.numbers_.get(b[c+1])),this.numbers_["delete"](b[c+1])),d=!0),!d);c++);d||this.numbers_.set(a,a+1)};a.BOUND_LOW=0;a.BOUND_HIGH=4294967295;a.DEF_MIN=0;a.DEF_MAX=1024;a.DEF_INTERVAL=1;return a}();a.number_allocator=z;var g;(function(a){a[a.NotConfigured=0]="NotConfigured";a[a.Configured=1]="Configured";a[a.Error=2]="Error";a[a.Destroyed=3]="Destroyed"})(g=a.ProxyReadyState||(a.ProxyReadyState=
{}));var B;(function(a){a[a.Local=0]="Local";a[a.Remote=1]="Remote";a[a.Pseudo=2]="Pseudo"})(B=a.ProxyMode||(a.ProxyMode={}));b=function(){function a(b,c,k,x,r,A){var z=this;void 0===r&&(r=null);void 0===A&&(A=[]);for(var v=[],n=6;n<arguments.length;n++)v[n-6]=arguments[n];this.hdxms=u.getRedirector();this.iid=c;this.oid=k;this.mode=x;this.proxystate=g.NotConfigured;this.deferredActions=[];this.pendingSyncBarriers=[];this.cbs=new Map;if(x===B.Local){n=!1;this.iid===q.class_id_t.EngineControl&&(n=
!0);var l=this;this.hdxms.startRedirection(n,this.user_friendly_id()).then(function(){z.oid=a.nextId++;h.logger.log(z.user_friendly_id()+" assigned local oid:"+z.oid);return new Promise(function(a,b){l.waitUntilConnectedEx(l.user_friendly_id()+".ctor()",A).then(function(){h.logger.log(l.user_friendly_id()+".ctor() all parameter rpc objects are ready.");var a=l.oidsFromProxyOjbects(A).concat(v),b=q.WebrpcClassLibInfoUtil.getMethodFeatureByid(c,0);return l.hdxms.WSSendObjectWrapper(b,c,0,d.WsJsonUtil.createMessageByid.apply(d.WsJsonUtil,
e([!1,!1,d.ws_msg_type_t.req,c,0,l.oid],a)))}).then(function(b){h.logger.log(l.user_friendly_id()+".ctor() success.");a(b)})["catch"](function(){h.logger.log(l.user_friendly_id()+".ctor() failed.");b()})})}).then(function(a){h.logger.trace("ProxyObject: setting state to configured. (iid: "+z.iid+" oid: "+z.oid+")");var d=z.oid;l.proxystate=g.Configured;l.oid=z.param0(a);h.logger.log(z.user_friendly_id()+" assigned remote oid for local oid:"+d);l.onConnected();r&&r();w.getGC().trackObject(z,b)})["catch"](function(){l.proxystate=
g.Error;l.onConnected()})}else x===B.Remote&&(this.proxystate=g.Configured,w.getGC().trackObject(this,b))}a.prototype.syncBarrierDeep=function(a,b){var d=!0;0<this.pendingSyncBarriers.length&&(d=!1);this.pendingSyncBarriers.push(new n(a,b,this.user_friendly_id()+".syncBarrier"));h.logger.log(this.user_friendly_id()+".syncBarrierDeep() queing request for:"+this.oid+", rv:"+d+", items:"+this.pendingSyncBarriers.length);return d};a.prototype.syncBarrierResolve=function(a){for(h.logger.log(this.user_friendly_id()+
".syncBarrierResolve() items:"+this.pendingSyncBarriers.length);this.pendingSyncBarriers&&0<this.pendingSyncBarriers.length;)h.logger.log(this.user_friendly_id()+".syncBarrierResolve() items:"+this.pendingSyncBarriers.length+" resolving request for:"+this.oid),this.pendingSyncBarriers.shift().postResolve(a)};a.prototype.syncBarrierReject=function(a){for(h.logger.log(this.user_friendly_id()+".syncBarrierReject() items:"+this.pendingSyncBarriers.length);this.pendingSyncBarriers&&0<this.pendingSyncBarriers.length;)h.logger.log(this.user_friendly_id()+
".syncBarrierReject() rejecting request for:"+this.oid),this.pendingSyncBarriers.shift().postReject(a)};Object.defineProperty(a.prototype,"proxyreadystate",{get:function(){return this.proxystate},set:function(a){this.proxystate=a},enumerable:!1,configurable:!0});a.prototype.bind=function(a,b){h.logger.trace("ProxyObject: binding object. (iid: "+this.iid+" oid: "+b+" mode: "+this.mode+")");if(this.mode===B.Pseudo){this.proxystate=g.Configured;var d=this.oid;this.oid=b;h.logger.log(this.user_friendly_id()+
" assigned remote oid for local oid:"+d);this.onConnected();w.getGC().trackObject(this,a);this.mode=B.Remote}else this.mode===B.Remote?h.logger.log("ProxyObject: binding already complete."):h.logger.log("ProxyObject: binding failure. incorrect mode!")};a.prototype.reconstructor=function(a,b,c){for(var x=this,r=[],A=3;A<arguments.length;A++)r[A-3]=arguments[A];this.proxystate=g.NotConfigured;this.deferredActions=[];A=q.WebrpcClassLibInfoUtil.getMethodFeatureByid(b,0);this.hdxms.WSSendObjectWrapper(A,
b,0,d.WsJsonUtil.createMessageByid.apply(d.WsJsonUtil,e([!1,!1,d.ws_msg_type_t.req,b,0,this.oid],r))).then(function(b){h.logger.trace("ProxyObject: setting state to configured. (iid: "+x.iid+" oid: "+x.oid+")");var d=x.oid;x.proxystate=g.Configured;x.oid=x.param0(b);h.logger.log(x.user_friendly_id()+" assigned remote oid for local oid:"+d);x.onConnected();w.getGC().trackObject(x,a)})["catch"](function(){x.proxystate=g.Error;x.onConnected()})};a.prototype.setParent=function(a){w.getGC().setParent(this,
a)};a.prototype.release=function(){h.logger.log(this.user_friendly_id()+".release() called.");w.getGC().releaseObject(this)};a.prototype.destroy=function(){h.logger.log(this.user_friendly_id()+".destroy() called.");this.proxystate=g.Destroyed;var a=q.WebrpcClassLibInfoUtil.getMethodFeatureByid(this.iid,0);this.hdxms.WSSendObjectWrapper(a,this.iid,0,d.WsJsonUtil.createMessageByid(!1,!0,d.ws_msg_type_t.req,this.iid,0,this.oid));this.clearCallbacks()};a.prototype.isdestroyed=function(){return this.proxystate==
g.Destroyed};a.prototype.onConnected=function(){for(;this.deferredActions&&0<this.deferredActions.length;)this.deferredActions.shift().post(this.proxystate==g.Configured)};a.prototype.isPseudo=function(){return this.mode==B.Pseudo};a.prototype.checkState=function(a,b,d){var c=this;0>=a?(h.logger.log("ProxyObject.checkState() timeout waiting for connection response! failed. (iid: "+c.iid+" oid: "+c.oid+"name: "+d+")"),c.onConnected()):setTimeout(function(a,d){if(c.proxystate==g.Configured)c.onConnected();
else if(c.proxystate==g.Error)c.onConnected();else if(c.proxystate==g.Destroyed)c.onConnected();else c.checkState(--a,b,d)},b,a,d)};a.prototype.waitUntilConnected=function(a){var b=this;return new Promise(function(d,c){b?(h.logger.trace("ProxyObject.waitUntilConnected(): readyState="+b.proxystate+". (iid: "+b.iid+" oid: "+b.oid+")"),b.proxystate==g.Destroyed?(b.onConnected(),h.logger.trace("rejecting already destroyed Object:"+b.user_friendly_id()),c("Object already destroyed :"+b.user_friendly_id())):
b.proxystate==g.Configured?(b.onConnected(),d()):b.proxystate==g.Error?(h.logger.trace("ProxyObject.waitUntilConnected(): readyState="+b.proxystate+". (iid: "+b.iid+" oid: "+b.oid+")"),b.onConnected(),c()):(h.logger.log('ProxyObject.waitUntilConnected(): deferring action "'+a+'". (iid: '+b.iid+" oid: "+b.oid+")"),b.deferredActions.push(new n(d,c,a)),b.checkState(600,25,a))):c("Invalid Object")})};a.prototype.remoteInvoke=function(a,b){for(var c=[],k=2;k<arguments.length;k++)c[k-2]=arguments[k];if(this.proxystate==
g.Destroyed)return h.logger.trace("rejecting already destroyed Object:"+this.user_friendly_id()),Promise.reject("Cannot invoke destroyed object :"+this.user_friendly_id());if(this.proxystate==g.Error)return h.logger.trace("rejecting already error state Object:"+this.user_friendly_id()),Promise.reject("Cannot invoke object in Error state:"+this.user_friendly_id());k=q.WebrpcClassLibInfoUtil.getMethodFeatureByid(this.iid,b);return this.hdxms.WSSendObjectWrapper(k,this.iid,b,d.WsJsonUtil.createMessageByid.apply(d.WsJsonUtil,
e([a,!1,d.ws_msg_type_t.req,this.iid,b,this.oid],c)))};a.prototype.waitUntilConnectedEx=function(a,b){var d=this;return new Promise(function(c,g){if(d){for(var e=[],k=0;k<b.length;k++){var z=b[k];if(z instanceof Array)for(var v=0;v<z.length;v++){var t=z[v];e.push(t.waitUntilConnected(a+"."+t.user_friendly_id()))}else e.push(z.waitUntilConnected(a+"."+z.user_friendly_id()))}Promise.all(e).then(function(){h.logger.log(d.user_friendly_id()+".waitUntilConnectedEx() success.");c()})["catch"](function(a){d.logRemoteInvokeError(a,
".waitUntilConnectedEx(): failed.");g()})}else g("Invalid Object")})};a.prototype.oidsFromProxyOjbects=function(a){for(var b=[],d=0;d<a.length;d++){var c=a[d];if(c instanceof Array){for(var g=[],e=0;e<c.length;e++)g.push({oid:c[e].object_id()});b.push(g)}else b.push({oid:c.object_id()})}return b};a.prototype.remoteInvokeEx=function(a,b,c){for(var k=[],r=3;r<arguments.length;r++)k[r-3]=arguments[r];if(this.proxystate==g.Destroyed)return h.logger.trace("rejecting already destroyed Object:"+this.user_friendly_id()),
Promise.reject("Cannot invoke destroyed object :"+this.user_friendly_id());if(this.proxystate==g.Error)return h.logger.trace("rejecting already error state Object:"+this.user_friendly_id()),Promise.reject("Cannot invoke object in Error state:"+this.user_friendly_id());var A=this;return new Promise(function(g,r){A.waitUntilConnectedEx(A.user_friendly_id()+".remoteInvokeEx",c).then(function(){h.logger.log(A.user_friendly_id()+".remoteInvokeEx() all parameter rpc objects are ready.");var g=A.oidsFromProxyOjbects(c).concat(k),
r=q.WebrpcClassLibInfoUtil.getMethodFeatureByid(A.iid,b);return A.hdxms.WSSendObjectWrapper(r,A.iid,b,d.WsJsonUtil.createMessageByid.apply(d.WsJsonUtil,e([a,!1,d.ws_msg_type_t.req,A.iid,b,A.oid],g)))}).then(function(a){h.logger.log(A.user_friendly_id()+".remoteInvokeEx() success.");g(a)})["catch"](function(){h.logger.log(A.user_friendly_id()+".remoteInvokeEx() failed.");r()})})};a.prototype.logRemoteInvokeError=function(a,b){var d="",c=a;c?d=b+" with error: "+JSON.stringify(c.message):(d=this.param0(a),
c=0!==Object.keys(d).length?new DOMException(b+" with error: "+JSON.stringify(d),this.user_friendly_id()):new DOMException(b,this.user_friendly_id()),d=c.message);h.logger.logx(this.isdestroyed(),this.user_friendly_id()+d);return c};a.prototype.allocate_cbid=function(){return a.cbid_allocator_.allocate()};a.prototype.deallocate_cbid=function(b){a.cbid_allocator_.deallocate(b)};a.prototype.registerCallbacks=function(a,b,d){var c=this,g=this.allocate_cbid();a=new v(g,b,a);0>g&&h.logger.log(this.user_friendly_id()+
".registerCallbacks(). !!!! ran out of cbid !!!!");b||(this.cbs.set(g,d),a.completion_cb=function(a,b){c.unregisterCallbacks(a)},this.hdxms.registerHandler(this.iid,this.oid,d,a));return a};a.prototype.unregisterCallbacks=function(a){this.cbs.has(a)?(this.hdxms.unregisterHandler(this.iid,this.oid,a),this.deallocate_cbid(a),this.cbs["delete"](a)):h.logger.log(this.user_friendly_id()+".unregisterCallbacks(). mid="+this.cbs.get(a)+" cbid="+a+" Cant find callback handler registration!!!!")};a.prototype.clearCallbacks=
function(){h.logger.log(this.user_friendly_id()+".clearCallbacks().");for(var a=0,b=Array.from(this.cbs.keys());a<b.length;a++){var d=b[a];this.hdxms.unregisterHandler(this.iid,this.oid,d);this.deallocate_cbid(d)}this.cbs.clear()};a.prototype.object_id=function(){return this.oid};a.prototype.param0=function(a){var b={};a&&a.params&&(b=a.params[0]);return b};a.prototype.isNullCallback=function(a){return void 0==a||null==a};a.prototype.user_friendly_id=function(){var a=this.constructor.name;0<=this.iid&&
(a=q.class_id_t[this.iid]);return a+"["+this.oid+"]"};a.prototype.isRedirected=function(){return this.hdxms.isRedirected()};a.prototype.isValid=function(){return!(this.proxystate===g.Error||this.proxystate===g.Destroyed)};a.prototype.registerStateChangeNotification=function(a){this.hdxms.registerStateChangeNotification(a)};a.prototype.unregisterStateChangeNotification=function(a){this.hdxms.unregisterStateChangeNotification(a)};a.nextId=0;a.CBID_MAX=65536;a.cbid_allocator_=new z(0,a.CBID_MAX,1);return a}();
a.ProxyObject=b},144:function(b,a,c){var e=this&&this.__extends||function(){var a=function(b,d){a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var f in b)b.hasOwnProperty(f)&&(a[f]=b[f])};return a(b,d)};return function(b,d){function c(){this.constructor=b}a(b,d);b.prototype=null===d?Object.create(d):(c.prototype=d.prototype,new c)}}(),u=this&&this.__awaiter||function(a,b,d,c){function g(a){return a instanceof d?a:new d(function(b){b(a)})}return new (d||
(d=Promise))(function(f,d){function r(a){try{C(c.next(a))}catch(b){d(b)}}function e(a){try{C(c["throw"](a))}catch(b){d(b)}}function C(a){a.done?f(a.value):g(a.value).then(r,e)}C((c=c.apply(a,b||[])).next())})},h=this&&this.__generator||function(a,b){function d(a){return function(b){return c([a,b])}}function c(d){if(f)throw new TypeError("Generator is already executing.");for(;g;)try{if(f=1,r&&(e=d[0]&2?r["return"]:d[0]?r["throw"]||((e=r["return"])&&e.call(r),0):r.next)&&!(e=e.call(r,d[1])).done)return e;
if(r=0,e)d=[d[0]&2,e.value];switch(d[0]){case 0:case 1:e=d;break;case 4:return g.label++,{value:d[1],done:!1};case 5:g.label++;r=d[1];d=[0];continue;case 7:d=g.ops.pop();g.trys.pop();continue;default:if(!(e=g.trys,e=0<e.length&&e[e.length-1])&&(6===d[0]||2===d[0])){g=0;continue}if(3===d[0]&&(!e||d[1]>e[0]&&d[1]<e[3]))g.label=d[1];else if(6===d[0]&&g.label<e[1])g.label=e[1],e=d;else if(e&&g.label<e[2])g.label=e[2],g.ops.push(d);else{e[2]&&g.ops.pop();g.trys.pop();continue}}d=b.call(a,g)}catch(C){d=
[6,C],r=0}finally{f=e=0}if(d[0]&5)throw d[1];return{value:d[0]?d[1]:void 0,done:!0}}var g={label:0,sent:function(){if(e[0]&1)throw e[1];return e[1]},trys:[],ops:[]},f,r,e,k;$jscomp.initSymbol();$jscomp.initSymbol();$jscomp.initSymbolIterator();return k={next:d(0),"throw":d(1),"return":d(2)},"function"===typeof Symbol&&(k[Symbol.iterator]=function(){return this}),k};Object.defineProperty(a,"__esModule",{value:!0});a.NavigatorUserMedia=a.RemoteMediaStreamConstraints=a.RemoteMediaTrackConstraints=a.RemoteMediaTrackConstraintSet=
a.RemoteDevices=a.RemoteDeviceInfo=a.DeviceInfo=a.RemoteStreamEvent=a.RemoteStream=a.RemoteMediaTrack=a.enumeratedDevices=void 0;var d=c(550),w=c(658),q=c(851),n=c(946),k=c(394),v=c(259),z=c(650),g=c(973),l;a.enumeratedDevices=l;var t=function(){return function(a,b){this.type=a;this.target=b}}(),m=function(){function a(){this.is_local_clone=!1;this.clone_id=this.clone_count=0}a.prototype.clone=function(){this.clone_count++;var b=new a;b.is_local_clone=!0;b.clone_id=this.clone_count;return b};a.prototype.synchronize=
function(a){return u(this,void 0,void 0,function(){return h(this,function(b){return this.is_local_clone?[2,a.asyncClone()]:[2,Promise.resolve(a)]})})};return a}(),p=function(a){function b(c,g,r){void 0===r&&(r=w.ProxyMode.Remote);c=a.call(this,c,d.class_id_t.MediaStreamTrack,g,r)||this;c.refCount_=0;c.refCount_++;c.clone_state=new m;return c}e(b,a);b.prototype.dumpInfo=function(){q.logger.log(this.user_friendly_id()+".dumpInfo() [id="+this.id+"] kind="+this.kind+" label="+this.label+" refcount="+
this.refcount+" enabled="+this.enabled+" readyState="+this.readyState)};Object.defineProperty(b.prototype,"refcount",{get:function(){return this.refCount_},enumerable:!1,configurable:!0});b.prototype.addRef=function(){this.refCount_++;q.logger.log(this.user_friendly_id()+".addRef() called. [id="+this.id+"] refcount="+this.refCount_)};Object.defineProperty(b.prototype,"onended",{get:function(){q.logger.log(this.user_friendly_id()+".get_onended() called. [id="+this.id+"]");return this.onended_},set:function(a){var b=
this;q.logger.log(this.user_friendly_id()+".set_onended() called. [id="+this.id+"]");this.onended_=a;this.waitUntilConnected("MediaStreamTrack.onended").then(function(){var c=b.registerCallbacks(!1,b.isNullCallback(a),d.method_id_MediaStreamTrack_t.onended);c.then(function(a){q.logger.log(b.user_friendly_id()+"onended event received!!!");a=new t("ended",b);b.readyState_="ended";b.onended_(a)});return b.remoteInvoke(!0,d.method_id_MediaStreamTrack_t.onended,c.success)})["catch"](function(a){b.logRemoteInvokeError(a,
".onended failed!")})},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"onmute",{get:function(){q.logger.log(this.user_friendly_id()+".get_onmute() called. [id="+this.id+"]");return this.onmute_},set:function(a){var b=this;q.logger.log(this.user_friendly_id()+".set_onmute() called. [id="+this.id+"]");this.onmute_=a;this.waitUntilConnected("MediaStreamTrack.onmute").then(function(){var c=b.registerCallbacks(!1,b.isNullCallback(a),d.method_id_MediaStreamTrack_t.onmute);c.then(function(a){q.logger.log(b.user_friendly_id()+
"onmute event received!!!");a=new t("mute",b);b.muted=!0;b.onmute_(a)});return b.remoteInvoke(!0,d.method_id_MediaStreamTrack_t.onmute,c.success)})["catch"](function(a){b.logRemoteInvokeError(a,".onmute failed!")})},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"onunmute",{get:function(){q.logger.log(this.user_friendly_id()+".get_onunmute() called. [id="+this.id+"]");return this.onunmute_},set:function(a){var b=this;q.logger.log(this.user_friendly_id()+".set_onunmute() called. [id="+
this.id+"]");this.onunmute_=a;this.waitUntilConnected("MediaStreamTrack.onunmute").then(function(){var c=b.registerCallbacks(!1,b.isNullCallback(a),d.method_id_MediaStreamTrack_t.onunmute);c.then(function(a){q.logger.log("onunmute event received!!!");a=new t("unmute",b);b.muted=!1;b.onunmute_(a)});return b.remoteInvoke(!0,d.method_id_MediaStreamTrack_t.onunmute,c.success)})["catch"](function(a){b.logRemoteInvokeError(a,".onunmute failed!")})},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,
"onstop",{set:function(a){this.onstop_=a},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"enabled",{get:function(){q.logger.log(this.user_friendly_id()+".get_enabled() called. [id="+this.id+", value="+this.enabled_+"]");return this.enabled_},set:function(a){q.logger.log(this.user_friendly_id()+".set_enabled() called. [id="+this.id+", value="+a+"]");this.enabled_=a;this.remoteInvoke(!0,d.method_id_MediaStreamTrack_t.enabled,a)},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,
"readyState",{get:function(){q.logger.log(this.user_friendly_id()+".get_readyState() called. [id="+this.id+"]");return this.readyState_},enumerable:!1,configurable:!0});b.prototype.asyncClone=function(){return u(this,void 0,void 0,function(){var a,c,g;return h(this,function(f){switch(f.label){case 0:return[4,this.waitUntilConnected("RemoteMediaTrack.asyncClone")];case 1:return f.sent(),[4,this.remoteInvoke(!1,d.method_id_MediaStreamTrack_t.clone)];case 2:return a=f.sent(),c=this.param0(a),g=new b(this,
c.oid),[2,g.syncBarrier()]}})})};b.prototype.deepClone=function(a){var c=this;q.logger.log(this.user_friendly_id()+".deepClone() called. [id="+this.id+"]");if(z.RemoteSession.isFeatureTrackCloneWithIdSupported()){var g=new b(null,0,w.ProxyMode.Pseudo),f=new m;g.id=a?a:this.id+"."+f.clone_id.toString();g.label=this.label;g.kind=this.kind;g.enabled_=this.enabled_;g.muted=this.muted;g.readyState_=this.readyState_;g.trackSettings_=this.trackSettings_;g.clone_state=f;g.constraints_=this.constraints_;g.capabilities_=
this.capabilities_;g.onended=this.onended;g.onmute=this.onmute;g.onunmute=this.onunmute;g.onstop=this.onstop;this.waitUntilConnected("RemoteMediaTrack.deepClone").then(function(){return c.remoteInvoke(!1,d.method_id_MediaStreamTrack_t.clone,g.id)}).then(function(a){q.logger.log(c.user_friendly_id()+".deepClone() success with oid: "+c.param0(a).oid);g.bind(null,c.param0(a).oid);g.syncBarrier().then(function(){q.logger.log(c.user_friendly_id()+"track.syncBarrier(): success")})["catch"](function(a){c.logRemoteInvokeError(a,
"track.syncBarrier() failed!")})})["catch"](function(a){c.logRemoteInvokeError(a,".deepClone() failed!")});return g}q.logger.log(this.user_friendly_id()+".deepClone() is not supported!")};b.prototype.localClone=function(){q.logger.log(this.user_friendly_id()+".localClone() called. [id="+this.id+"]");var a=this.clone_state.clone(),d=new b(this,this.object_id());d.id=this.id+"."+a.clone_id.toString();d.label=this.label;d.kind=this.kind;d.enabled_=this.enabled_;d.muted=this.muted;d.readyState_=this.readyState_;
d.trackSettings_=this.trackSettings_;d.clone_state=a;d.constraints_=this.constraints_;d.capabilities_=this.capabilities_;return d};b.prototype.clone=function(){q.logger.log(this.user_friendly_id()+".clone() called. [id="+this.id+"]");return z.RemoteSession.isFeatureTrackCloneWithIdSupported()?this.deepClone():this.localClone()};b.prototype.stop=function(){var a=this;q.logger.log(this.user_friendly_id()+".stop() called. [id="+this.id+"] refcount="+this.refCount_);this.readyState_="ended";if(0<this.refCount_&&
(this.refCount_--,0===this.refCount_&&(q.logger.log(this.user_friendly_id()+".stop() called. [id="+this.id+"] remote invoking..."),this.remoteInvoke(!1,d.method_id_MediaStreamTrack_t.stop)["catch"](function(b){a.logRemoteInvokeError(b,".stop failed!")}),"video"==this.kind&&"remoteapp-track"==this.label&&g.ScreenSharing.screenSharingInstance().stopAppshare(),null!==this.onstop_&&void 0!=this.onstop_)))this.onstop_()};b.prototype.getCapabilities=function(){return this.capabilities_};b.prototype.getConstraints=
function(){return this.constraints_};b.prototype.getSettings=function(){return"audio"==this.kind?function(a){return{deviceId:a.deviceId,echoCancellation:a.echoCancellation}}(this.trackSettings_):function(a){return{aspectRatio:a.aspectRatio,deviceId:a.deviceId,frameRate:a.frameRate,height:a.height,width:a.width}}(this.trackSettings_)};b.prototype.getChannelCount=function(){return 2};b.prototype.applyConstraints=function(a){var b=this;q.logger.log(this.user_friendly_id()+".applyConstraints() called.");
return new Promise(function(c,f){b.waitUntilConnected("MediaStreamTrack.applyConstraints").then(function(){return Promise.all([b.remoteInvoke(!1,d.method_id_MediaStreamTrack_t.applyConstraints,a),b.syncBarrier()])})["catch"](function(a){b.logRemoteInvokeError(a,"applyConstraints failed!");f({name:"OverconstrainedError",message:"Failed to apply constraints."})}).then(function(){b.constraints_=a;return b.remoteInvoke(!1,d.method_id_MediaStreamTrack_t.getConstraints)}).then(function(a){b.constraints_=
b.param0(a)})["catch"](function(a){b.logRemoteInvokeError(a,".syncBarrier() remote client does not support getConstraints method. Ignore it")}).then(function(){return c()})})};b.convertReadyState=function(a){return 0==a?"live":"ended"};b.prototype.syncBarrier=function(){var a=this;q.logger.log(this.user_friendly_id()+".syncBarrier() called.");return new Promise(function(c,g){a.syncBarrierDeep(c,g)&&a.waitUntilConnected("MediaStreamTrack.syncBarrier").then(function(){return Promise.all([a.remoteInvoke(!1,
d.method_id_MediaStreamTrack_t.kind,""),a.remoteInvoke(!1,d.method_id_MediaStreamTrack_t.id,""),a.remoteInvoke(!1,d.method_id_MediaStreamTrack_t.label,""),a.remoteInvoke(!1,d.method_id_MediaStreamTrack_t.enabled,!1),a.remoteInvoke(!1,d.method_id_MediaStreamTrack_t.muted,!1),a.remoteInvoke(!1,d.method_id_MediaStreamTrack_t.readyState,0),a.remoteInvoke(!1,d.method_id_MediaStreamTrack_t.getSettings),a.remoteInvoke(!1,d.method_id_MediaStreamTrack_t.getCapabilities)])}).then(function(f){var d=0;f=f.map(function(b){return a.param0(b)});
a.kind=f[0];a.id=f[1];a.label=f[2];a.enabled_=f[3];a.muted=f[4];d=f[5];a.trackSettings_=f[6];a.capabilities_=f[7];a.readyState_=b.convertReadyState(d);a.syncBarrierResolve(a)})["catch"](function(b){b=a.logRemoteInvokeError(b,".syncBarrier() failed!");a.syncBarrierReject(b)})})};b.prototype.dispose=function(){q.logger.log(this.user_friendly_id()+".dispose() called. [id="+this.id+"]");this.stop();0===this.refCount_&&this.release()};return b}(w.ProxyObject);a.RemoteMediaTrack=p;var y=function(){return function(){}}(),
x=function(a){function b(c,g,r,f,e){void 0===r&&(r=w.ProxyMode.Local);void 0===f&&(f=[]);var k=this;q.logger.log("RemoteStream.ctor() streamid="+e+" num tracks="+f.length);r==w.ProxyMode.Remote||e||(e=b.uuidv4());k=e&&z.RemoteSession.isFeatureTrackCloneWithIdSupported()?a.call(this,c,d.class_id_t.MediaStream,g,r,null,[f],e)||this:a.call(this,c,d.class_id_t.MediaStream,g,r,null,[f])||this;k.id=e;k.tracks_=f;k.clone_state=new m;k.active_=!0;k.tracks_.forEach(function(a){a.setParent(k)});return k}e(b,
a);b.uuidv4=function(){return"10000000-1000-4000-8000-100000000000".replace(/[018]/g,function(a){return(a^crypto.getRandomValues(new Uint8Array(1))[0]&15>>a/4).toString(16)})};b.prototype.dumpInfo=function(){q.logger.log(this.user_friendly_id()+".dumpInfo() [id="+this.id+"] active="+this.active_+" num tracks="+this.tracks_.length);for(var a=0,b=this.tracks_;a<b.length;a++){var d=b[a];d&&d.dumpInfo()}};b.prototype.toggleAudio=function(a){q.logger.log(this.user_friendly_id()+".toggleAudio() called: "+
a);for(var b=0,d=this.getAudioTracks();b<d.length;b++)d[b].enabled=a};b.prototype.toJSON=function(){var a=new y;a.id=this.id;a.active=this.active_;a.oid=this.object_id();return"RemoteStream:"+JSON.stringify(a)};Object.defineProperty(b.prototype,"active",{get:function(){var a=this;q.logger.log(this.user_friendly_id()+".get active() called. [id="+this.id+"] active="+this.active_);n.getRedirector().getFeatureValue(d.FEATURE_ms_teams_stream_active_status)?this.waitUntilConnected("MediaStream.active").then(function(){q.logger.log(a.user_friendly_id()+
".get active() remote invoking");return a.remoteInvoke(!1,d.method_id_MediaStream_t.active,!1)}).then(function(b){a.active_=a.param0(b);q.logger.log(a.user_friendly_id()+".get active() success, active="+a.active_)})["catch"](function(b){a.active_=!0;a.logRemoteInvokeError(b,".get active() failed! active="+a.active_)}):this.active_=!0;return this.active_},enumerable:!1,configurable:!0});b.prototype.getAudioTracks=function(){q.logger.log(this.user_friendly_id()+".getAudioTracks() called. [id="+this.id+
"]");for(var a=[],b=0,d=this.tracks_;b<d.length;b++){var f=d[b];"audio"==f.kind&&a.push(f)}return a};b.prototype.getVideoTracks=function(){q.logger.log(this.user_friendly_id()+".getVideoTracks() called. [id="+this.id+"]");for(var a=[],b=0,d=this.tracks_;b<d.length;b++){var f=d[b];"video"==f.kind&&a.push(f)}return a};b.prototype.getTracks=function(){q.logger.log(this.user_friendly_id()+".getTracks() called. [id="+this.id+"]");return this.tracks_};b.prototype.getTrackById=function(a){q.logger.log(this.user_friendly_id()+
".getTrackById() called. [id="+this.id+"]");for(var b=0,d=this.tracks_;b<d.length;b++){var f=d[b];if(f.id==a)return f}};b.prototype.addTrack=function(a){var b=this;q.logger.log(this.user_friendly_id()+".addTrack() called. [id="+this.id+"]");this.tracks_.push(a);a&&a.dumpInfo();var c=this;this.waitUntilConnected("MediaStream.addTrack").then(function(){q.logger.log(c.user_friendly_id()+".addTrack remote invoking");return c.remoteInvokeEx(!1,d.method_id_MediaStream_t.addTrack,[a])}).then(function(){q.logger.log(c.user_friendly_id()+
".addTrack success")})["catch"](function(a){b.logRemoteInvokeError(a,".addTrack failed!")})};b.prototype.removeTrack=function(a){var b=this;q.logger.log(this.user_friendly_id()+".removeTrack() called. [id="+this.id+"]");var c=this.tracks_.indexOf(a);this.tracks_.splice(c,1);var f=this;this.waitUntilConnected("MediaStream.removeTrack").then(function(){q.logger.log(f.user_friendly_id()+".removeTrack remote invoking");return f.remoteInvokeEx(!1,d.method_id_MediaStream_t.removeTrack,[a])}).then(function(){q.logger.log(f.user_friendly_id()+
".removeTrack success")})["catch"](function(a){b.logRemoteInvokeError(a,".removeTrack failed!")})};b.prototype.asyncClone=function(){return u(this,void 0,void 0,function(){var a,c,g;return h(this,function(f){switch(f.label){case 0:return q.logger.log(this.user_friendly_id()+".asyncClone() called. [id="+this.id+"]"),[4,this.waitUntilConnected("asyncClone")];case 1:return f.sent(),[4,this.remoteInvoke(!1,d.method_id_MediaStream_t.clone)];case 2:return a=f.sent(),q.logger.log(a),c=this.param0(a),g=new b(this,
c.oid,w.ProxyMode.Remote),[2,g.syncBarrier()]}})})};b.prototype.deepClone=function(a){var d=this;q.logger.log(this.user_friendly_id()+".deepClone() called. [id="+this.id+"]");if(z.RemoteSession.isFeatureTrackCloneWithIdSupported()){var c=[];this.tracks_.forEach(function(a){c.push(a.deepClone())});var f=new m;a=a?a:this.id+"."+f.clone_id.toString();var g=new b(null,0,w.ProxyMode.Local,c,a);g.id=a;g.active_=this.active_;g.clone_state=f;g.tracks_=c;g.waitUntilConnected("RemoteStream.deepClone").then(function(){g.syncBarrier().then(function(){q.logger.log(d.user_friendly_id()+
"stream.syncBarrier(): success")})["catch"](function(a){d.logRemoteInvokeError(a,"stream.syncBarrier() failed!")})})["catch"](function(a){d.logRemoteInvokeError(a,".deepClone() failed!")});return g}q.logger.log(this.user_friendly_id()+".deepClone() is not supported!")};b.prototype.localClone=function(){q.logger.log(this.user_friendly_id()+".localClone() called. [id="+this.id+"]");var a=this.clone_state.clone(),d=new b(this,this.object_id(),w.ProxyMode.Remote);d.id=this.id+"."+a.clone_id.toString();
d.active_=this.active_;this.tracks_.forEach(function(a){a.addRef()});d.tracks_=this.tracks_;d.clone_state=a;return d};b.prototype.clone=function(){q.logger.log(this.user_friendly_id()+".clone() called. [id="+this.id+"]");return z.RemoteSession.isFeatureTrackCloneWithIdSupported()?this.deepClone():this.localClone()};b.prototype.syncBarrier=function(){var a=this;q.logger.log(this.user_friendly_id()+".syncBarrier() called. [id="+this.id+"]");return new Promise(function(b,c){a.syncBarrierDeep(b,c)&&a.waitUntilConnected("MediaStream.syncBarrier").then(function(){var b=
[];b.push(a.remoteInvoke(!1,d.method_id_MediaStream_t.id,""));n.getRedirector().getFeatureValue(d.FEATURE_ms_teams_stream_active_status)&&b.push(a.remoteInvoke(!1,d.method_id_MediaStream_t.active,!0));b.push(a.remoteInvoke(!1,d.method_id_MediaStream_t.getTracks));return Promise.all(b)}).then(function(b){q.logger.log(a.user_friendly_id()+".syncBarrier() remote success");var c;n.getRedirector().getFeatureValue(d.FEATURE_ms_teams_stream_active_status)?(b=b.map(function(b){return a.param0(b)}),a.id=b[0],
a.active_=b[1],c=b[2]):(b=b.map(function(b){return a.param0(b)}),a.id=b[0],c=b[1],a.active_=!0);var g=[];b=function(b){var f=a.tracks_.find(function(a){return a.object_id()===b.oid});void 0===f&&(q.logger.log(a.user_friendly_id()+" adding a RemoteMediaTrack with oid:"+b.oid),f=new p(a,b.oid));g.push(f.syncBarrier())};for(var r=0;r<c.length;r++)b(c[r]);return Promise.all(g)}).then(function(b){a.tracks_=[];b.forEach(function(b){d.BUILD_TYPE_SDK||(b.onstop=function(){var b=!0;a.tracks_.forEach(function(a){"ended"!=
a.readyState&&(b=!1)});b&&a.release()});a.tracks_.push(b)});a.syncBarrierResolve(a)})["catch"](function(b){a.logRemoteInvokeError(b,".syncBarrier failed!");a.syncBarrierReject()})})};b.prototype.dispose=function(){q.logger.log(this.user_friendly_id()+".dispose() called. [id="+this.id+"]");this.tracks_.forEach(function(a){a.dispose()});this.release()};return b}(w.ProxyObject);a.RemoteStream=x;b=function(a){function b(c,g){return a.call(this,c,d.class_id_t.MediaStreamEvent,g,w.ProxyMode.Remote)||this}
e(b,a);b.prototype.syncBarrier=function(){var a=this;q.logger.log(this.user_friendly_id()+".syncBarrier() called.");return new Promise(function(b,c){a.syncBarrierDeep(b,c)&&a.waitUntilConnected("MediaStreamEvent.syncBarrier").then(function(){return a.remoteInvoke(!1,d.method_id_MediaStreamEvent_t.stream,{oid:0})}).then(function(b){return(new x(a,b.params[0].oid,w.ProxyMode.Remote)).syncBarrier()}).then(function(b){a.stream=b;a.syncBarrierResolve(a)})["catch"](function(b){b=a.logRemoteInvokeError(b,
".syncBarrier() failed!");a.syncBarrierReject(b)})})};return b}(w.ProxyObject);a.RemoteStreamEvent=b;var r=function(){return function(a,b,d,c){this.deviceId=a;this.groupId=b;this.kind=d;this.label=c}}();a.DeviceInfo=r;var A=function(a){function b(c){return a.call(this,null,d.class_id_t.MediaDeviceInfo,c,w.ProxyMode.Remote)||this}e(b,a);b.convertKind=function(a){return 0==a?"audioinput":1==a?"audiooutput":"videoinput"};b.prototype.syncBarrier=function(){var a=this;q.logger.log(this.user_friendly_id()+
".syncBarrier() called.");return new Promise(function(c,g){a.syncBarrierDeep(c,g)&&a.waitUntilConnected("RemoteDeviceInfo.syncBarrier").then(function(){return Promise.all([a.remoteInvoke(!1,d.method_id_MediaDeviceInfo_t.deviceId,""),a.remoteInvoke(!1,d.method_id_MediaDeviceInfo_t.kind,0),a.remoteInvoke(!1,d.method_id_MediaDeviceInfo_t.label,""),a.remoteInvoke(!1,d.method_id_MediaDeviceInfo_t.groupId,"")])}).then(function(f){a.kind=b.convertKind(a.param0(f.splice(1,1)[0]));f=f.map(function(b){return a.param0(b)});
a.deviceId=f[0];a.label=f[1];a.groupId=f[2];a.syncBarrierResolve(a)})["catch"](function(b){b=a.logRemoteInvokeError(b,".syncBarrier() failed!");a.syncBarrierReject(b)})})};return b}(w.ProxyObject);a.RemoteDeviceInfo=A;b=function(b){function c(){var a=b.call(this,null,d.class_id_t.MediaDevices,0,w.ProxyMode.Local,function(){a.setDeviceChangeCallback()})||this;a.devices_=[];a.enumerateMarker="enumerateDevicesPrivate";a.enumerateRemoteMarker="enumeratedDevicesPrivate-Remote";a.shareSystemAudio_=!1;a.pendingEnumerateDevice_=
[];a.panelid_=-1;return a}e(c,b);Object.defineProperty(c.prototype,"panelid",{set:function(a){this.panelid_=a},enumerable:!1,configurable:!0});c.prototype.clearPanelId=function(){this.panelid_=-1};c.prototype.enumerateDevices=function(){var a=this;return 0<this.devices_.length&&0==this.pendingEnumerateDevice_.length?new Promise(function(b,d){q.logger.log(a.user_friendly_id()+".enumerateDevices: returning cached devices");b(a.devices_)}):this.enumerateDevicesPrivate(!1)};c.prototype.enumerateDevicesPrivate=
function(a){return n.getRedirector().getFeatureValue(d.FEATURE_ms_teams_enumerate_devices_v2)?this.enumerateDevicesPrivateV2(a):this.enumerateDevicesPrivateV1(a)};c.prototype.postEnumerateDevicesResult=function(){for(var a=!0,b=0,d=0,f=this.pendingEnumerateDevice_;d<f.length;d++){var c=f[d];if(0==a&&c.name==this.enumerateRemoteMarker)break;c.postWithResult(!0,this.devices_);b++;a=!1}0<b&&this.pendingEnumerateDevice_.splice(0,b)};c.prototype.enumerateDevicesPrivateV2=function(b){var c=this;q.logger.log(this.user_friendly_id()+
".enumerateDevicesPrivateV2() called. refresh:"+b+" pending:"+this.pendingEnumerateDevice_.length);return new Promise(function(g,f){1==b||0==c.pendingEnumerateDevice_.length?(c.pendingEnumerateDevice_.push(new w.deferred_action(g,f,c.enumerateRemoteMarker)),c.waitUntilConnected("RemoteDevices.enumerateDevicesPrivateV2").then(function(){q.logger.log(c.user_friendly_id()+".enumerateDevicesPrivateV2() remote invoking...");return c.remoteInvoke(!1,d.method_id_MediaDevices_t.enumerateDevicesV2)}).then(function(b){var f=
[];b.params[0].forEach(function(a){a=new r(a.deviceId,a.groupId,A.convertKind(a.kind),a.label);f.push(a)});c.devices_=f;a.enumeratedDevices=l=f;q.logger.log(c.user_friendly_id()+".enumerateDevicesPrivateV2: resolving enumerated devices: "+JSON.stringify(c.devices_));c.postEnumerateDevicesResult()})["catch"](function(b){c.devices_=[];a.enumeratedDevices=l=[];c.logRemoteInvokeError(b,".enumerateDevicesPrivateV2() failed, resolving with empty list.");c.postEnumerateDevicesResult()})):(c.pendingEnumerateDevice_.push(new w.deferred_action(g,
f,c.enumerateMarker)),q.logger.log(c.user_friendly_id()+".enumerateDevicesPrivateV2() not remoting this call..."))})};c.prototype.enumerateDevicesPrivateV1=function(b){var c=this;q.logger.log(this.user_friendly_id()+".enumerateDevicesPrivateV1() called. refresh:"+b+" pending:"+this.pendingEnumerateDevice_.length);return new Promise(function(g,f){1==b||0==c.pendingEnumerateDevice_.length?(c.pendingEnumerateDevice_.push(new w.deferred_action(g,f,c.enumerateRemoteMarker)),c.waitUntilConnected("RemoteDevices.enumerateDevicesPrivateV1").then(function(){q.logger.log(c.user_friendly_id()+
".enumerateDevicesPrivateV1() remote invoking...");return c.remoteInvoke(!1,d.method_id_MediaDevices_t.enumerateDevices)}).then(function(a){var b=[];a.params[0].forEach(function(a){a=new A(a.oid);b.push(a.syncBarrier())});return Promise.all(b)}).then(function(b){var f=[];b.forEach(function(a){var b=new r(a.deviceId,a.groupId,a.kind,a.label);f.push(b);a.release()});c.devices_=f;a.enumeratedDevices=l=f;q.logger.log(c.user_friendly_id()+".enumerateDevicesPrivateV1: resolving enumerated devices: "+JSON.stringify(c.devices_));
c.postEnumerateDevicesResult()})["catch"](function(b){a.enumeratedDevices=l=[];c.devices_=[];c.logRemoteInvokeError(b,".enumerateDevicesPrivateV1() failed, resolving with empty list.");c.postEnumerateDevicesResult()})):(c.pendingEnumerateDevice_.push(new w.deferred_action(g,f,c.enumerateMarker)),q.logger.log(c.user_friendly_id()+".enumerateDevicesPrivateV1() not remoting this call..."))})};c.prototype.getDisplayMedia=function(a){var b=this;return new Promise(function(c,f){b.waitUntilConnected("RemoteDevices.getDisplayMedia").then(function(){return g.ScreenSharing.screenSharingInstance().setActiveSource(b.panelid_,
z.RemoteSession.isFeaturAppshareSupported())}).then(function(f){void 0!==a.video&&null!==a.video&&void 0!==f&&(a.video.deviceId=f);n.getRedirector().getFeatureValue(d.FEATURE_ms_teams_share_system_audio)&&(void 0!==a.audio&&"boolean"!==typeof a.audio?q.logger.log("Non-boolean audio constraints"):a.audio=a.audio||b.shareSystemAudio_);f=b.prepareDisplayConstraints(a);f=J.toRemoteMediaStreamConstraints(f,!0);return b.remoteInvoke(!1,d.method_id_MediaDevices_t.getDisplayMedia,f)}).then(function(a){return(new x(null,
a.params[0].oid,w.ProxyMode.Remote)).syncBarrier()}).then(function(a){c(a)})["catch"](function(a){g.ScreenSharing.screenSharingInstance().isAppshareActive()&&g.ScreenSharing.screenSharingInstance().stopAppshare();a=b.logRemoteInvokeError(a,".getDisplayMedia() failed!");f(a)})})};c.prototype.setDeviceChangeCallback=function(){var a=this;q.logger.log(this.user_friendly_id()+".set_DeviceChangeCallback() called.");this.waitUntilConnected("MediaDevices.ondevicechange").then(function(){var b=a.registerCallbacks(!1,
!1,d.method_id_MediaDevices_t.ondevicechange);b.then(function(){q.logger.log(a.user_friendly_id()+".ondevicechange(): callback received!!!");a.enumerateDevicesPrivate(!0).then(function(){navigator.mediaDevices.dispatchEvent(new CustomEvent("devicechange"))})["catch"](function(){navigator.mediaDevices.dispatchEvent(new CustomEvent("devicechange"))})});return a.remoteInvoke(!0,d.method_id_MediaDevices_t.ondevicechange,b.success)})["catch"](function(b){a.logRemoteInvokeError(b,".set_ondevicechange() failed!")})};
c.prototype.prepareDisplayConstraints=function(a){if(n.getRedirector().getFeatureValue(d.FEATURE_ms_teams_common_media_constraints))return a;var b={frameRate:15,width:{max:1920},height:{max:1080}};if(void 0!==a.video&&null!==a.video){var c=a.video;void 0!==c.frameRate&&void 0!==c.width&&void 0!==c.height&&(b.frameRate=c.frameRate,b.width.max=c.width.max||c.width,b.height.max=c.height.max||c.height)}return a.audio?{video:b,audio:a.audio}:{video:b}};return c}(w.ProxyObject);a.RemoteDevices=b;var M=
function(){function a(){}a.toRemoteMediaTrackConstraintSet=function(a){var b=void 0;v.Util.hasValue(a)&&(b={},v.Util.hasValue(a.width)&&(b.width=a.width),v.Util.hasValue(a.height)&&(b.height=a.height),v.Util.hasValue(a.aspectRatio)&&(b.aspectRatio=a.aspectRatio),v.Util.hasValue(a.frameRate)&&(b.frameRate=a.frameRate),v.Util.hasValue(a.facingMode)&&(b.facingMode=a.facingMode),v.Util.hasValue(a.sampleRate)&&(b.sampleRate=a.sampleRate),v.Util.hasValue(a.sampleSize)&&(b.sampleSize=a.sampleSize),v.Util.hasValue(a.volume)&&
(b.volume=a.volume),v.Util.hasValue(a.echoCancellation)&&(b.echoCancellation=a.echoCancellation),v.Util.hasValue(a.autoGainControl)&&(b.autoGainControl=a.autoGainControl),v.Util.hasValue(a.noiseSuppression)&&(b.noiseSuppression=a.noiseSuppression),v.Util.hasValue(a.latency)&&(b.latency=a.latency),v.Util.hasValue(a.channelCount)&&(b.channelCount=a.channelCount),v.Util.hasValue(a.deviceId)&&(b.deviceId=a.deviceId),v.Util.hasValue(a.groupId)&&(b.groupId=a.groupId),v.Util.hasValue(a.maxFrameRate)&&(b.maxFrameRate=
a.maxFrameRate),v.Util.hasValue(a.maxHeight)&&(b.maxHeight=a.maxHeight),v.Util.hasValue(a.maxWidth)&&(b.maxWidth=a.maxWidth),v.Util.hasValue(a.minHeight)&&(b.minHeight=a.minHeight),v.Util.hasValue(a.minWidth)&&(b.minWidth=a.minWidth),v.Util.hasValue(a.sourceId)&&(b.sourceId=a.sourceId));return b};return a}();a.RemoteMediaTrackConstraintSet=M;var F=function(a){function b(){return null!==a&&a.apply(this,arguments)||this}e(b,a);b.defMandatory=function(a){var b=a;v.Util.hasValue(a)?(v.Util.hasValue(a.maxFrameRate)||
(b.maxFrameRate=30),v.Util.hasValue(a.minWidth)||(b.minWidth=360),v.Util.hasValue(a.maxWidth)||(b.maxWidth=1920),v.Util.hasValue(a.minHeight)||(b.minHeight=180),v.Util.hasValue(a.maxHeight)||(b.maxHeight=1080)):b={maxFrameRate:30,minWidth:360,maxWidth:1920,minHeight:180,maxHeight:1080};return b};b.toRemoteMediaTrackConstraints=function(a){var b=void 0;v.Util.hasValue(a)&&(b=M.toRemoteMediaTrackConstraintSet(a),b.advanced=[],v.Util.hasValue(a.advanced)&&a.advanced.forEach(function(a){a=M.toRemoteMediaTrackConstraintSet(a);
b.advanced.push(a)}),v.Util.hasValue(a.mandatory)&&(b.mandatory="boolean"!=typeof a.mandatory?M.toRemoteMediaTrackConstraintSet(a.mandatory):a.mandatory));return b};return b}(M);a.RemoteMediaTrackConstraints=F;var J=function(){function a(){}a.getDefaultAudioDeviceId=function(){if(void 0!==l){var a=l.find(function(a){return"audioinput"===a.kind&&"default"===a.deviceId});if(void 0!==a)return a.deviceId}return""};a.getDefaultVideoDeviceId=function(){if(void 0!==l){var a=l.find(function(a){return"videoinput"===
a.kind});if(void 0!==a)return a.deviceId}return""};a.toRemoteMediaStreamConstraints=function(b,c){void 0===c&&(c=!1);q.logger.log("RemoteMediaStreamConstraints.toRemoteMediaStreamConstraints() in constraints:"+JSON.stringify(b));var g={};v.Util.hasValue(b)&&(v.Util.hasValue(b.audio)&&("boolean"!=typeof b.audio?(g.audio=F.toRemoteMediaTrackConstraints(b.audio),0!=Object.keys(g.audio).length&&v.Util.hasValue(g.audio)||(g.audio={dummy:1}),d.BUILD_TYPE_SDK&&0==c&&a.isConstraintsAudioDeviceIdEmpty(b)&&
(g.audio.deviceId=a.getDefaultAudioDeviceId(),q.logger.log("RemoteMediaStreamConstraints.toRemoteMediaStreamConstraints() set default audio deviceId:'"+g.audio.deviceId+"'"))):g.audio=b.audio),v.Util.hasValue(b.peerIdentity)&&(g.peerIdentity=b.peerIdentity),v.Util.hasValue(b.video)&&("boolean"!=typeof b.video?(g.video=F.toRemoteMediaTrackConstraints(b.video),0==c&&"boolean"!=typeof g.video.mandatory&&(g.video.mandatory=F.defMandatory(g.video.mandatory),d.BUILD_TYPE_SDK&&a.isConstraintsVideoSourceIdEmpty(b)&&
(g.video.mandatory.sourceId=a.getDefaultVideoDeviceId(),q.logger.log("RemoteMediaStreamConstraints.toRemoteMediaStreamConstraints() set default video sourceId:'"+g.video.mandatory.sourceId+"'")))):(g.video=b.video,1==b.video&&0==c&&d.BUILD_TYPE_SDK&&a.isConstraintsVideoSourceIdEmpty(b)&&(g.video={},g.video.mandatory=F.defMandatory(void 0),g.video.mandatory.sourceId=a.getDefaultVideoDeviceId(),q.logger.log("RemoteMediaStreamConstraints.toRemoteMediaStreamConstraints() set default video sourceId:'"+
g.video.mandatory.sourceId+"'")))));q.logger.log("RemoteMediaStreamConstraints.toRemoteMediaStreamConstraints() out constraints:"+JSON.stringify(g));return g};a.isConstraintsAudioDeviceIdEmpty=function(a){var b=!1;v.Util.hasValue(a)&&v.Util.hasValue(a.audio)&&("boolean"==typeof a.audio?1==a.audio&&(b=!0):(a=a.audio,!a||!1!==v.Util.hasValue(a.deviceId)&&""!==a.deviceId||(b=!0)));return b};a.isConstraintsVideoSourceIdEmpty=function(a){var b=!1;if(v.Util.hasValue(a)&&v.Util.hasValue(a.video))if("boolean"==
typeof a.video)1==a.video&&(b=!0);else if(a=a.video)(a=a.mandatory)&&!1!==v.Util.hasValue(a.sourceId)&&""!==a.sourceId||(b=!0);return b};return a}();a.RemoteMediaStreamConstraints=J;var G=function(){function a(){this.video=this.audio=a.EmptyCapabilities}a.EmptyCapabilities={codecs:[],headerExtensions:[]};return a}();b=function(a){function b(){return a.call(this,null,d.class_id_t.NavigatorUserMedia,0,w.ProxyMode.Local)||this}e(b,a);b.getCapabilities=function(a){q.logger.log("NavigatorUserMedia.getCapabilities for type="+
a+" capabilities="+JSON.stringify(b.capabilities[a]));return b.capabilities[a]};b.resetCapabilities=function(){b.capabilities=new G};b.prototype.getCapabilities=function(){var a=this;q.logger.log(this.user_friendly_id()+".getCapabilities...");return new Promise(function(c,g){a.waitUntilConnected("NavigatorUserMedia.getCapabilities").then(function(){return Promise.all([a.remoteInvoke(!1,d.method_id_NavigatorUserMedia_t.getCapabilities,"audio"),a.remoteInvoke(!1,d.method_id_NavigatorUserMedia_t.getCapabilities,
"video")])}).then(function(f){b.capabilities.audio=a.param0(f[0]);b.capabilities.video=a.param0(f[1]);q.logger.log(a.user_friendly_id()+".getCapabilities capabilities="+JSON.stringify(b.capabilities));c(b.capabilities)})["catch"](function(b){g(a.logRemoteInvokeError(b,".getCapabilities failed!"))})})};b.prototype.setCodecCapabilities=function(a){var b=this;q.logger.log(this.user_friendly_id()+".setCodecCapabilities : set codecCapabilities to "+JSON.stringify(a));return new Promise(function(c,f){b.waitUntilConnected("NavigatorUserMedia.setCodecCapabilities").then(function(){return b.remoteInvoke(!1,
d.method_id_NavigatorUserMedia_t.setCodecCapabilities,a)}).then(function(){q.logger.log(b.user_friendly_id()+".setCodecCapabilities() success.");c(!0);b.getCapabilities()})["catch"](function(a){a=b.logRemoteInvokeError(a,".setCodecCapabilities() failed!");f(a)})})};b.prototype.webkitGetUserMedia=function(a,b,d){return this.getUserMedia(a,b,d)};b.prototype.LogTelemetryDevice_=function(a){try{if("undefined"!==typeof a.audio){var b=a.audio.deviceId,d;l.forEach(function(a){b==a.deviceId&&(d=a.label)});
q.logger.log(d);this.SendTelemetryData(k.tel_key_AudioDeviceUsed,d,0)}if("undefined"!==typeof a.video){var f=a.video.mandatory,c;f&&l.forEach(function(a){f.sourceId==a.deviceId&&(c=a.label)});q.logger.log(c);this.SendTelemetryData(k.tel_key_VideoDeviceUsed,c,0)}}catch(g){q.logger.log(g)}};b.prototype.getUserMedia=function(a,b,d){q.logger.log(this.user_friendly_id()+".getUserMedia() called: "+JSON.stringify(a));return b&&d?this.getUserMedia_v1(a,b,d):this.getUserMedia_v2(a)};b.prototype.getUserMedia_v2=
function(a){var b=this;q.logger.log(this.user_friendly_id()+".getUserMedia_v2() called: "+JSON.stringify(a));return new Promise(function(d,f){b.getUserMediaPrivate(a,function(a){q.logger.log(b.user_friendly_id()+"getUserMedia_v2: resolving stream");d(a)},function(a){q.logger.log(b.user_friendly_id()+"getUserMedia_v2: rejecting stream");f(a)})})};b.prototype.getUserMedia_v1=function(a,b,d){q.logger.log(this.user_friendly_id()+".getUserMedia_v1() called: "+JSON.stringify(a));return this.getUserMediaPrivate(a,
b,d)};b.prototype.getUserMediaPrivate=function(a,b,c){var f=this;this.waitUntilConnected("NavigatorUserMedia.getUserMediaPrivate").then(function(){var b=f.registerCallbacks(!0,!1,d.method_id_NavigatorUserMedia_t.getUserMedia),c=J.toRemoteMediaStreamConstraints(a);f.remoteInvoke(!1,d.method_id_NavigatorUserMedia_t.getUserMedia,c,b.success,b.fail);return b.prom()}).then(function(a){q.logger.log(f.user_friendly_id()+".getUserMediaPrivate: received success callback!");return(new x(null,f.param0(a).oid,
w.ProxyMode.Remote)).syncBarrier()}).then(function(d){q.logger.log(f.user_friendly_id()+".getUserMediaPrivate: MediaStream ready to deliver",JSON.stringify(d));0==d.getTracks().length?(q.logger.log(f.user_friendly_id()+".getUserMediaPrivate: reporting no tracks as error."),c({constraintName:"",name:"OverconstrainedError",message:""})):(f.LogTelemetryDevice_(a),b(d))})["catch"](function(a){f.logRemoteInvokeError(a,".getUserMediaPrivate() failed!");n.getRedirector().getFeatureValue(d.FEATURE_ms_teams_1912)?
f.param0&&a?c(f.param0(a)):c({constraintName:"",name:"OverconstrainedError",message:""}):c({constraintName:"",name:"OverconstrainedError",message:""})})};b.prototype.SendTelemetryData=function(a,b,d){n.getRedirector().telemetry.SendTelemetryData(k.tel_cmd.Data,a,b,d)};b.capabilities=new G;return b}(w.ProxyObject);a.NavigatorUserMedia=b},650:function(b,a,c){Object.defineProperty(a,"__esModule",{value:!0});a.RemoteSession=a.SessionInfo=a.RemoteType=void 0;var e=c(946),l=c(550),h=c(9),d=c(851),w=c(550),
q=c(394),n;(function(a){a[a.Unknown=0]="Unknown";a[a.Windows=1]="Windows";a[a.Linux=2]="Linux"})(n=a.RemoteType||(a.RemoteType={}));var k=function(){return function(){}}();a.SessionInfo=k;b=function(){function a(b,d){var c=this;this.isremote_=!1;this.isremote_=!0;this.type_=n.Windows;this.address_="0.0.0.0";this.sessioninfo_=null;e.getRedirector().setRemoteSessionInfoCb(function(){return c.remoteSessionInfo()});this.enginecontrol_=new h.EngineControl(b+"::"+d)}a.prototype.release=function(){e.getRedirector().setRemoteSessionInfoCb(null)};
a.prototype.user_friendly_id=function(){return"[RemoteSession]"};a.prototype.getFeatureFlags=function(){var a={};null!==this.enginecontrol_&&null!==this.enginecontrol_.features_&&void 0!==this.enginecontrol_.features_&&this.enginecontrol_.features_.forEach(function(b){a[b.name]=b.value});return a};a.prototype.isFeatureSupported=function(a){if("video"===a)return!0;if("givecontrol"===a&&this.sessioninfo_.clientPlatform.includes("Linux")||!(a in w.featureNameMap))return!1;for(var b=w.featureNameMap[a],
d=this.getFeatureFlags(),c=0;c<b.length;c++)if(!(b[c]in d)||!0!==d[b[c]])return!1;return a in w.vdaFeatureNameMap?w.vdaFeatureNameMap[a].map(function(a){return e.getRedirector().getVDAFeatureValue(a)}).reduce(function(a,b){return a&&b},!0):!0};a.isFeaturePstnSupported=function(){return a.pstn_};a.isFeatureDtmfSupported=function(){return a.dtmfswitch_};a.isFeaturAppshareSupported=function(){return a.appshare_};a.isFeatureWebrtc1dot0Supported=function(){return a.webrtc1dot0_};a.isFeatureDataChannelSupported=
function(){return a.datachannel_};a.isFeatureVdNoBufferLimitSupported=function(){return a.vdnobuflimit_};a.isFeatureCallConstraintsSupported=function(){return a.callconstraints_};a.isFeatureTrackCloneWithIdSupported=function(){return a.trackclonewithid_};a.isFeatureSenderStatsFixSupported=function(){return a.senderstatsfix_};a.prototype.getSessionInfo=function(){d.logger.log(this.user_friendly_id()+".getSessionInfo() called.");return null!=this.sessioninfo_?Promise.resolve(this.sessioninfo_):Promise.reject()};
a.prototype.remoteSessionInfo=function(){var b=this,c=this;d.logger.log(c.user_friendly_id()+".remoteSessionInfo() called.");return new Promise(function(n,t){c.enginecontrol_.syncBarrier().then(function(e){d.logger.log(c.user_friendly_id()+"enginecontrol info received!");c.sessioninfo_=new k;c.sessioninfo_.type_script=l.HDXMS_VERSION;c.sessioninfo_.webrpc=e.version_.major.toString()+"."+e.version_.minor.toString()+"."+e.version_.revision.toString()+"."+e.version_.build.toString();if(void 0!=e.versions_&&
null!=e.versions_){c.SendTelemetryData(q.tel_key_VerTypeScript,l.HDXMS_VERSION,0);for(var t=0,y=0,x=e.versions_;y<x.length;y++){var r=x[y],r=r.major.toString()+"."+r.minor.toString()+"."+r.revision.toString()+"."+r.build.toString();switch(t){case h.VersionType.Webrpc:c.sessioninfo_.webrpc=r;c.SendTelemetryData(q.tel_key_VerWebrpc,r,0);break;case h.VersionType.WebrtcCodecs:c.sessioninfo_.webrtc_codecs=r;c.SendTelemetryData(q.tel_key_VerWebrtcCodecs,r,0);break;case h.VersionType.Receiver:c.sessioninfo_.receiver=
r;c.SendTelemetryData(q.tel_key_VerReceiver,r,0);break;case h.VersionType.Vda:c.sessioninfo_.vda=r;c.SendTelemetryData(q.tel_key_VerVda,r,0);break;case h.VersionType.Endpoint:c.sessioninfo_.endpoint=r;c.SendTelemetryData(q.tel_key_VerEndpoint,r,0);break;case h.VersionType.HdxRtcEngine:c.sessioninfo_.hdxrtcengine=r;c.SendTelemetryData(q.tel_key_VerHdxRtcEngine,r,0);break;default:d.logger.log(c.user_friendly_id()+"Unknown version type!")}t++}}void 0!=e.osinfo_&&null!=e.osinfo_&&(c.sessioninfo_.osinfo=
e.osinfo_,e.osinfo_.family.includes("Darwin")&&["Mac OS X","macOS","OS X"].some(function(a){return e.osinfo_.edition.startsWith(a)})?c.sessioninfo_.clientPlatform="Mac":c.sessioninfo_.clientPlatform=e.osinfo_.family,c.SendTelemetryData(q.tel_key_OSFamily,e.osinfo_.family,0),c.SendTelemetryData(q.tel_key_OSVersion,e.osinfo_.version,0),c.SendTelemetryData(q.tel_key_OSArchitecture,e.osinfo_.architecture,0),c.SendTelemetryData(q.tel_key_OSDistro,e.osinfo_.distro,0),c.SendTelemetryData(q.tel_key_OSEdition,
e.osinfo_.edition,0));void 0!=e.endpointid_&&null!=e.endpointid_&&(c.sessioninfo_.endpointId=e.endpointid_.machine_id);void 0!=e.hardwareinfo_&&null!=e.hardwareinfo_&&(c.sessioninfo_.hardware_info=e.hardwareinfo_,c.SendTelemetryData(q.tel_key_CPUModel,e.hardwareinfo_.cpu_info.cpumodel,0),c.SendTelemetryData(q.tel_key_CPUProcessors,e.hardwareinfo_.cpu_info.numberofprocessors,0),c.SendTelemetryData(q.tel_key_CPUGpuinfo,JSON.stringify(e.hardwareinfo_.gpu_info.gpus),0),c.SendTelemetryData(q.tel_key_CPUTotalmemory,
e.hardwareinfo_.memory_info.totalmemory,0));a.pstn_=b.isFeatureSupported(l.Features.FEATURE_public_pstn);a.dtmfswitch_=b.isFeatureSupported(l.Features.FEATURE_public_dtmf);a.appshare_=b.isFeatureSupported(l.Features.FEATURE_public_app_sharing);a.webrtc1dot0_=b.isFeatureSupported(l.Features.FEATURE_public_webrtc1dot0);a.datachannel_=b.isFeatureSupported(l.Features.FEATURE_public_data_channel);a.vdnobuflimit_=b.isFeatureSupported(l.Features.FEATURE_public_vdnobuflimit);a.callconstraints_=b.isFeatureSupported(l.Features.FEATURE_public_stream_resolution);
a.trackclonewithid_=b.isFeatureSupported(l.Features.FEATURE_public_track_clone_with_id);a.senderstatsfix_=b.isFeatureSupported(l.Features.FEATURE_public_sender_stats_fix);n(c.sessioninfo_);c.enginecontrol_.release()})["catch"](function(){e.getRedirector().isPingActive()?c.retrySessionInfo():(t(),c.enginecontrol_.release(),c.enginecontrol_=null)})})};a.prototype.retrySessionInfo=function(){var a=this;setTimeout(function(){d.logger.log("checking if we are connected...");a.enginecontrol_.bind();e.getRedirector().handleRemoteSessionInfo()},
15E3)};a.prototype.SendTelemetryData=function(a,b,d){e.getRedirector().telemetry.SendTelemetryData(q.tel_cmd.Data,a,b,d)};a.pstn_=!1;a.dtmfswitch_=!1;a.appshare_=!1;a.webrtc1dot0_=!1;a.datachannel_=!1;a.vdnobuflimit_=!1;a.callconstraints_=!1;a.trackclonewithid_=!1;a.senderstatsfix_=!1;return a}();a.RemoteSession=b},24:function(b,a,c){var e=this&&this.__extends||function(){var a=function(b,d){a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var d in b)b.hasOwnProperty(d)&&
(a[d]=b[d])};return a(b,d)};return function(b,d){function c(){this.constructor=b}a(b,d);b.prototype=null===d?Object.create(d):(c.prototype=d.prototype,new c)}}();Object.defineProperty(a,"__esModule",{value:!0});a.RtcDataChannel=a.RTCSctpTransport=void 0;var l=c(658),h=c(550),d=c(851),w=c(589),q;(function(a){a[a["new"]=0]="new";a[a.connecting=1]="connecting";a[a.connected=2]="connected";a[a.closed=3]="closed";a[a.max=4]="max"})(q||(q={}));b=function(a){function b(c,g){var e=a.call(this,c,h.class_id_t.RTCSctpTransport,
g,l.ProxyMode.Remote)||this;d.logger.log(e.user_friendly_id()+".constructor");return e}e(b,a);b.prototype.syncBarrier=function(){var a=this;d.logger.log(this.user_friendly_id()+".syncBarrier() called.");return new Promise(function(b,c){a.syncBarrierDeep(b,c)&&a.waitUntilConnected("RTCSctpTransport.syncBarrier").then(function(){d.logger.log(a.user_friendly_id()+".syncBarrierBase success.");return Promise.all([a.remoteInvoke(!1,h.method_id_RTCSctpTransport_t.transport,{oid:0}),a.remoteInvoke(!1,h.method_id_RTCSctpTransport_t.state,
0),a.remoteInvoke(!1,h.method_id_RTCSctpTransport_t.maxMessageSize,0),a.remoteInvoke(!1,h.method_id_RTCSctpTransport_t.maxChannels,0)])}).then(function(b){var c;c=b.map(function(b){return a.param0(b)});b=c[0];a.sctpstate_=c[1];a.maxMessageSize_=c[2];a.maxChannels_=c[3];c=a.transport_;void 0==b||!1!==b.is_null||null!==a.transport_&&a.transport_.object_id()==b.oid||(c=new w.DtlsTransport(a,b.oid));c.syncBarrier().then(function(b){d.logger.log(a.user_friendly_id()+"transport.syncBarrier(): success");
a.transport_=b;a.syncBarrierResolve(a)})["catch"](function(){d.logger.log(a.user_friendly_id()+"transport.syncBarrier(): failed!");a.transport_=null;a.syncBarrierResolve(a)})})["catch"](function(b){b=a.logRemoteInvokeError(b,".syncBarrier() failed!");a.syncBarrierReject(b)})})};Object.defineProperty(b.prototype,"transport",{get:function(){d.logger.log(this.user_friendly_id()+".get_transport() called: "+this.transport_);return this.transport_},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,
"state",{get:function(){d.logger.log(this.user_friendly_id()+".get_state() called: "+this.sctpstate_);return this.sctpstate_},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"maxMessageSize",{get:function(){d.logger.log(this.user_friendly_id()+".get_maxMessageSize() called: "+this.maxMessageSize_);return this.maxMessageSize_},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"maxChannels",{get:function(){d.logger.log(this.user_friendly_id()+".get_maxChannels() called: "+
this.maxChannels_);return this.maxChannels_},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"onstatechange",{get:function(){d.logger.log(this.user_friendly_id()+".get_onstatechange() called: "+this.onstatechange_);return this.onstatechange_},set:function(a){var c=this;d.logger.log(this.user_friendly_id()+".set_onstatechange() called.");this.onstatechange_=a;this.waitUntilConnected(this.user_friendly_id()+".onstatechange").then(function(){var e=c.registerCallbacks(!1,c.isNullCallback(a),
h.method_id_RTCSctpTransport_t.onstatechange);e.then(function(a){d.logger.log(c.user_friendly_id()+".onstatechange callback received!!!");c.sctpstate_=b.convertState(c.param0(a));d.logger.log(c.user_friendly_id()+"sctpstate_: "+c.sctpstate_);a=new Event("onstatechange");c.onstatechange_(a)});return c.remoteInvoke(!0,h.method_id_RTCSctpTransport_t.onstatechange,e.success)})["catch"](function(){d.logger.log(c.user_friendly_id()+".onstatechange() failed.")})},enumerable:!1,configurable:!0});b.convertState=
function(a){return a==q["new"]?"closed":a==q.connecting?"connecting":a==q.connected?"connected":"closed"};return b}(l.ProxyObject);a.RTCSctpTransport=b;var n;(function(a){a[a.connecting=0]="connecting";a[a.open=1]="open";a[a.closing=2]="closing";a[a.closed=3]="closed"})(n||(n={}));b=function(a){function b(c,g,e){c=a.call(this,c,h.class_id_t.RTCDataChannel,g,e)||this;c.binaryType_="blob";d.logger.log(c.user_friendly_id()+".constructor");return c}e(b,a);b.prototype.syncBarrier=function(){var a=this;
d.logger.log(this.user_friendly_id()+".syncBarrier() called.");return new Promise(function(b,c){a.syncBarrierDeep(b,c)&&a.waitUntilConnected("RtcDataChannel.syncBarrier").then(function(){d.logger.log(a.user_friendly_id()+".syncBarrier remote invoking.");return Promise.all([a.remoteInvoke(!1,h.method_id_RTCDataChannel_t.label,""),a.remoteInvoke(!1,h.method_id_RTCDataChannel_t.ordered,!0),a.remoteInvoke(!1,h.method_id_RTCDataChannel_t.maxPacketLifeTime,0),a.remoteInvoke(!1,h.method_id_RTCDataChannel_t.maxRetransmits,
0),a.remoteInvoke(!1,h.method_id_RTCDataChannel_t.protocol,""),a.remoteInvoke(!1,h.method_id_RTCDataChannel_t.negotiated,!1),a.remoteInvoke(!1,h.method_id_RTCDataChannel_t.id,0),a.remoteInvoke(!1,h.method_id_RTCDataChannel_t.readyState,0),a.remoteInvoke(!1,h.method_id_RTCDataChannel_t.bufferedAmount,0),a.remoteInvoke(!1,h.method_id_RTCDataChannel_t.bufferedAmountLowThreshold,0)])}).then(function(b){d.logger.log(a.user_friendly_id()+".syncBarrier success.");var c;b=b.map(function(b){return a.param0(b)});
a.label_=b[0];a.ordered_=b[1];a.maxPacketLifeTime_=b[2];a.maxRetransmits_=b[3];a.protocol_=b[4];a.negotiated_=b[5];a.id_=b[6];c=b[7];a.bufferedAmount_=b[8];a.bufferedAmountLowThreshold_=b[9];a.readyState_=a.toRTCDataChannelState(c);a.syncBarrierResolve(a)})["catch"](function(b){b=a.logRemoteInvokeError(b,".syncBarrier() failed!");a.syncBarrierReject(b)})})};Object.defineProperty(b.prototype,"label",{get:function(){d.logger.log(this.user_friendly_id()+".get_label() called: "+this.label_);return this.label_},
enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"ordered",{get:function(){d.logger.log(this.user_friendly_id()+".get_ordered() called: "+this.ordered_);return this.ordered_},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"maxPacketLifeTime",{get:function(){d.logger.log(this.user_friendly_id()+".get_maxPacketLifeTime() called: "+this.maxPacketLifeTime_);return this.maxPacketLifeTime_},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"maxRetransmits",
{get:function(){d.logger.log(this.user_friendly_id()+".get_maxRetransmits() called: "+this.maxRetransmits_);return this.maxRetransmits_},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"protocol",{get:function(){d.logger.log(this.user_friendly_id()+".get_protocol() called: "+this.protocol_);return this.protocol_},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"negotiated",{get:function(){d.logger.log(this.user_friendly_id()+".get_negotiated() called: "+this.negotiated_);
return this.negotiated_},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"id",{get:function(){d.logger.log(this.user_friendly_id()+".get_id() called: "+this.id_);return this.id_},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"readyState",{get:function(){d.logger.log(this.user_friendly_id()+".get_readyState() called: "+this.readyState_);return this.readyState_},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"bufferedAmount",{get:function(){d.logger.log(this.user_friendly_id()+
".get_bufferedAmount() called: "+this.bufferedAmount_);return this.bufferedAmount_},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"bufferedAmountLowThreshold",{get:function(){d.logger.log(this.user_friendly_id()+".get_bufferedAmountLowThreshold() called: "+this.bufferedAmountLowThreshold_);return this.bufferedAmountLowThreshold_},set:function(a){d.logger.log(this.user_friendly_id()+".get_bufferedAmountLowThreshold() called: "+a);this.bufferedAmountLowThreshold_=a},enumerable:!1,
configurable:!0});Object.defineProperty(b.prototype,"binaryType",{get:function(){d.logger.log(this.user_friendly_id()+".get_binaryType() called: "+this.binaryType_);return this.binaryType_},set:function(a){d.logger.log(this.user_friendly_id()+".set_binaryType() called: "+a);this.binaryType_="blob"==a||"arraybuffer"==a?a:"blob"},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"onopen",{get:function(){d.logger.log(this.user_friendly_id()+".get_onopen() called.");return this.onopen_},
set:function(a){var b=this;d.logger.log(this.user_friendly_id()+".set_onopen() called.");this.onopen_=a;this.waitUntilConnected(this.user_friendly_id()+".onopen").then(function(){var c=b.registerCallbacks(!1,b.isNullCallback(a),h.method_id_RTCDataChannel_t.onopen);c.then(function(a){d.logger.log(b.user_friendly_id()+".onopen callback received!!!");b.syncBarrier().then(function(){d.logger.log(b.user_friendly_id()+".onopen notifying...");var a=new Event("open",{});Object.defineProperty(a,"target",{writable:!1,
value:b});b.onopen_(a)})["catch"](function(){d.logger.log(b.user_friendly_id()+".syncBarrier(): failed!")})});return b.remoteInvoke(!0,h.method_id_RTCDataChannel_t.onopen,c.success)})["catch"](function(){d.logger.log(b.user_friendly_id()+".onopen() failed.")})},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"onbufferedamountlow",{get:function(){d.logger.log(this.user_friendly_id()+".get_onbufferedamountlow() called.");return this.onbufferedamountlow_},set:function(a){var b=this;
d.logger.log(this.user_friendly_id()+".set_onbufferedamountlow() called.");this.onbufferedamountlow_=a;this.waitUntilConnected(this.user_friendly_id()+".onbufferedamountlow").then(function(){var c=b.registerCallbacks(!1,b.isNullCallback(a),h.method_id_RTCDataChannel_t.onbufferedamountlow);c.then(function(a){d.logger.log(b.user_friendly_id()+".onbufferedamountlow callback received!!!");a=new Event("onbufferedamountlow");Object.defineProperty(a,"target",{writable:!1,value:b});b.onbufferedamountlow_(a)});
return b.remoteInvoke(!0,h.method_id_RTCDataChannel_t.onbufferedamountlow,c.success)})["catch"](function(){d.logger.log(b.user_friendly_id()+".onbufferedamountlows() failed.")})},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"onerror",{get:function(){d.logger.log(this.user_friendly_id()+".get_onerror() called.");return this.onerror_},set:function(a){var b=this;d.logger.log(this.user_friendly_id()+".set_onerror() called.");this.onerror_=a;this.waitUntilConnected(this.user_friendly_id()+
".onerror").then(function(){var c=b.registerCallbacks(!1,b.isNullCallback(a),h.method_id_RTCDataChannel_t.onerror);c.then(function(a){d.logger.log(b.user_friendly_id()+".onerror callback received!");a=b.param0(a);d.logger.log(b.user_friendly_id()+"error: "+a);a=new Event("onerror");Object.defineProperty(a,"target",{writable:!1,value:b});b.onerror_(a)});return b.remoteInvoke(!0,h.method_id_RTCDataChannel_t.onerror,c.success)})["catch"](function(){d.logger.log(b.user_friendly_id()+".onerror() failed.")})},
enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"onclosing",{get:function(){d.logger.log(this.user_friendly_id()+".get_onclosing() called.");return this.onclosing_},set:function(a){var b=this;d.logger.log(this.user_friendly_id()+".set_onclosing() called.");this.onclosing_=a;this.waitUntilConnected(this.user_friendly_id()+".onclosing").then(function(){var c=b.registerCallbacks(!1,b.isNullCallback(a),h.method_id_RTCDataChannel_t.onclosing);c.then(function(a){d.logger.log(b.user_friendly_id()+
".onclosing callback received!!!");a=new Event("onclosing");Object.defineProperty(a,"target",{writable:!1,value:b});b.onclosing_(a)});return b.remoteInvoke(!0,h.method_id_RTCDataChannel_t.onclosing,c.success)})["catch"](function(){d.logger.log(b.user_friendly_id()+".onclosing() failed.")})},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"onclose",{get:function(){d.logger.log(this.user_friendly_id()+".get_onclose() called.");return this.onclose_},set:function(a){var b=this;d.logger.log(this.user_friendly_id()+
".set_onclose() called.");this.onclose_=a;this.waitUntilConnected(this.user_friendly_id()+".onclose").then(function(){var c=b.registerCallbacks(!1,b.isNullCallback(a),h.method_id_RTCDataChannel_t.onclose);c.then(function(a){d.logger.log(b.user_friendly_id()+".onclose callback received!!!");a=new Event("onclose");Object.defineProperty(a,"target",{writable:!1,value:b});b.onclose_(a)});return b.remoteInvoke(!0,h.method_id_RTCDataChannel_t.onclose,c.success)})["catch"](function(){d.logger.log(b.user_friendly_id()+
".onclose() failed.")})},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"onmessage",{get:function(){d.logger.log(this.user_friendly_id()+".get_onmessage() called.");return this.onmessage_},set:function(a){var b=this;d.logger.log(this.user_friendly_id()+".set_onmessage() called.");this.onmessage_=a;this.waitUntilConnected(this.user_friendly_id()+".onmessage").then(function(){var c=b.registerCallbacks(!1,b.isNullCallback(a),h.method_id_RTCDataChannel_t.onmessage);c.then(function(a){d.logger.log(b.user_friendly_id()+
".onmessage callback received!!!");var c=b.param0(a);a=new Event("onmessage");c.binary?a.data=c.data_ab:(c=atob(c.data_sz),a.data=c);b.onmessage_(a)});return b.remoteInvoke(!0,h.method_id_RTCDataChannel_t.onmessage,c.success)})["catch"](function(){d.logger.log(b.user_friendly_id()+".onmessage() failed.")})},enumerable:!1,configurable:!0});b.prototype.close=function(){var a=this;d.logger.log(this.user_friendly_id()+".close() called.");this.waitUntilConnected("RTCDataChannel.close").then(function(){return a.remoteInvoke(!1,
h.method_id_RTCDataChannel_t.close)}).then(function(){d.logger.log(a.user_friendly_id()+".close: success.")})["catch"](function(){d.logger.log(a.user_friendly_id()+".close: failed.")})};b.prototype.toByteArray=function(a){var b=[];a=new Uint8Array(a instanceof ArrayBuffer?a:a.buffer);for(var d in a)b.push(a[d]);return b};b.prototype.send=function(a){var b=this;d.logger.log(this.user_friendly_id()+".send() called.");this.waitUntilConnected("RTCDataChannel.send").then(function(){if("string"===typeof a)return d.logger.log(b.user_friendly_id()+
"data(string): "+a),b.remoteInvoke(!1,h.method_id_RTCDataChannel_t.send_text,a);if(a instanceof Blob)a.arrayBuffer().then(function(a){a=b.toByteArray(a);return b.remoteInvoke(!1,h.method_id_RTCDataChannel_t.send_binary,a)})["catch"](function(){d.logger.log(b.user_friendly_id()+".arrayBuffer(): failed.")});else{var c=b.toByteArray(a);return b.remoteInvoke(!1,h.method_id_RTCDataChannel_t.send_binary,c)}}).then(function(){d.logger.log(b.user_friendly_id()+".send: success.")})["catch"](function(){d.logger.log(b.user_friendly_id()+
".send: failed.")})};b.prototype.toRTCDataChannelState=function(a){var b="closed";a==n.connecting?b="connecting":a==n.open?b="open":a==n.closing?b="closing":a==n.closed&&(b="closed");return b};return b}(l.ProxyObject);a.RtcDataChannel=b},484:function(b,a,c){var e=this&&this.__extends||function(){var a=function(b,d){a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var d in b)b.hasOwnProperty(d)&&(a[d]=b[d])};return a(b,d)};return function(b,d){function c(){this.constructor=
b}a(b,d);b.prototype=null===d?Object.create(d):(c.prototype=d.prototype,new c)}}();Object.defineProperty(a,"__esModule",{value:!0});a.RtcRtpReceiveParameters=a.RtcRtpSendParameters=a.RtcRtpEncodingParameters=a.RtcRtpParameters=a.RtcRtcpParameters=a.RtcRtpHeaderExtensionParameters=a.RtcRtpCodecParameters=void 0;var l=c(851),h=function(){function a(){}a.defRtcRtpCodecParameters=function(){return{mimeType:"",payloadType:0,sdpFmtpLine:""}};a.defRTCRtpCodecParameters=function(){return{clockRate:0,mimeType:"",
payloadType:0}};a.toRtcRtpCodecParameters=function(b){var d=a.defRtcRtpCodecParameters();b&&(b.channels&&(d.channels=b.channels),b.clockRate&&(d.clockRate=b.clockRate),b.mimeType&&(d.mimeType=b.mimeType),b.payloadType&&(d.payloadType=b.payloadType),b.sdpFmtpLine&&(d.sdpFmtpLine=b.sdpFmtpLine));return d};a.toRTCRtpCodecParameters=function(b){var d=a.defRTCRtpCodecParameters();b&&(b.channels&&(d.channels=b.channels),b.clockRate&&(d.clockRate=b.clockRate),b.mimeType&&(d.mimeType=b.mimeType),b.payloadType&&
(d.payloadType=b.payloadType),b.sdpFmtpLine&&(d.sdpFmtpLine=b.sdpFmtpLine));return d};return a}();a.RtcRtpCodecParameters=h;var d=function(){function a(){}a.defRtcRtpHeaderExtensionParameters=function(){return{encrypted:!1,id:0,uri:""}};a.defRTCRtpHeaderExtensionParameters=function(){return{id:0,uri:""}};a.toRtcRtpHeaderExtensionParameters=function(b){var d=a.defRtcRtpHeaderExtensionParameters();if(b){var c=b.encrypted;void 0!=c&&null!=c&&(d.encrypted=c);b.id&&(d.id=b.id);b.uri&&(d.uri=b.uri)}return d};
a.toRTCRtpHeaderExtensionParameters=function(b){var d=a.defRTCRtpHeaderExtensionParameters();if(b){var c=b.encrypted;void 0!=c&&null!=c&&(d.encrypted=c);b.id&&(d.id=b.id);b.uri&&(d.uri=b.uri)}return d};return a}();a.RtcRtpHeaderExtensionParameters=d;var w=function(){function a(){}a.defRtcRtcpParameters=function(){return{cname:"",reducedSize:!1}};a.defRTCRtcpParameters=function(){return{}};a.toRtcRtcpParameters=function(b){var d=a.defRtcRtcpParameters();b&&(b.cname&&(d.cname=b.cname),b=b.reducedSize,
void 0!=b&&null!=b&&(d.reducedSize=b));return d};a.toRTCRtcpParameters=function(b){var d=a.defRTCRtcpParameters();b&&(b.cname&&(d.cname=b.cname),b=b.reducedSize,void 0!=b&&null!=b&&(d.reducedSize=b));return d};return a}();a.RtcRtcpParameters=w;var q=function(){function a(){}a.defRtcRtpParameters=function(){return{codecs:[],headerExtensions:[],rtcp:w.defRtcRtcpParameters()}};a.defRTCRtpParameters=function(){return{codecs:[],headerExtensions:[],rtcp:w.defRTCRtcpParameters()}};a.toRtcRtpParameters=function(b){var c=
a.defRtcRtpParameters();if(b){if(b.codecs)for(var g=0,e=b.codecs;g<e.length;g++)c.codecs.push(h.toRtcRtpCodecParameters(e[g]));if(b.headerExtensions)for(g=0,e=b.headerExtensions;g<e.length;g++)c.headerExtensions.push(d.toRtcRtpHeaderExtensionParameters(e[g]));b.rtcp&&(c.rtcp=w.toRtcRtcpParameters(b.rtcp))}return c};a.toRTCRtpParameters=function(b){var c=a.defRTCRtpParameters();if(b){if(b.codecs)for(var e=0,n=b.codecs;e<n.length;e++)c.codecs.push(h.toRTCRtpCodecParameters(n[e]));if(b.headerExtensions)for(e=
0,n=b.headerExtensions;e<n.length;e++)c.headerExtensions.push(d.toRTCRtpHeaderExtensionParameters(n[e]));b.rtcp&&(c.rtcp=w.toRtcRtcpParameters(b.rtcp))}return c};return a}();a.RtcRtpParameters=q;var n=function(){function a(){}a.defRtcRtpEncodingParameters=function(){return{active:!0,rid:""}};a.defRTCRtpEncodingParameters=function(){return{}};a.toRtcRtpEncodingParameters=function(b){var d=a.defRtcRtpEncodingParameters();if(b){var c=b.active;void 0!=c&&null!=c&&(d.active=c);b.maxBitrate&&(d.maxBitrate=
b.maxBitrate);b.maxFramerate&&(d.maxFramerate=b.maxFramerate);b.scaleResolutionDownBy&&(d.scaleResolutionDownBy=b.scaleResolutionDownBy);b.rid&&(d.rid=b.rid);b.networkPriority&&(d.networkPriority=b.networkPriority)}return d};a.toRTCRtpEncodingParameters=function(b){var d=a.defRTCRtpEncodingParameters();if(b){var c=b.active;void 0!=c&&null!=c&&(d.active=c);b.maxBitrate&&(d.maxBitrate=b.maxBitrate);b.maxFramerate&&(d.maxFramerate=b.maxFramerate);b.scaleResolutionDownBy&&(d.scaleResolutionDownBy=b.scaleResolutionDownBy);
b.rid&&(d.rid=b.rid);b.networkPriority&&(d.networkPriority=b.networkPriority)}return d};return a}();a.RtcRtpEncodingParameters=n;b=function(a){function b(){return null!==a&&a.apply(this,arguments)||this}e(b,a);b.defRtcRtpSendParameters=function(){var a=q.defRtcRtpParameters();a.encodings=[];a.transaction_id="";return a};b.defRTCRtpSendParameters=function(){var a=q.defRTCRtpParameters();a.encodings=[];a.transactionId="";return a};b.toRtcRtpSendParameters=function(a){l.logger.log("RtcRtpSendParameters.toRtcRtpSendParameters() in param:"+
JSON.stringify(a));var d=b.defRtcRtpSendParameters(),c=q.toRtcRtpParameters(a);c.codecs.forEach(function(a){return d.codecs.push(a)});c.headerExtensions.forEach(function(a){return d.headerExtensions.push(a)});d.rtcp=c.rtcp;if(a){if(a.encodings)for(var c=0,e=a.encodings;c<e.length;c++)d.encodings.push(n.toRtcRtpEncodingParameters(e[c]));a.transactionId&&(d.transaction_id=a.transactionId)}l.logger.log("RtcRtpSendParameters.toRtcRtpSendParameters() out param:"+JSON.stringify(d));return d};b.toRTCRtpSendParameters=
function(a){l.logger.log("RtcRtpSendParameters.toRTCRtpSendParameters() in param:"+JSON.stringify(a));var d=b.defRTCRtpSendParameters(),c=q.toRTCRtpParameters(a);c.codecs.forEach(function(a){return d.codecs.push(a)});c.headerExtensions.forEach(function(a){return d.headerExtensions.push(a)});d.rtcp=c.rtcp;if(a){if(a.encodings)for(var c=0,e=a.encodings;c<e.length;c++)d.encodings.push(n.toRTCRtpEncodingParameters(e[c]));a.transaction_id&&(d.transactionId=a.transaction_id)}l.logger.log("RtcRtpSendParameters.toRTCRtpSendParameters() out param:"+
JSON.stringify(d));return d};return b}(q);a.RtcRtpSendParameters=b;b=function(a){function b(){return null!==a&&a.apply(this,arguments)||this}e(b,a);b.defRtcRtpReceiveParameters=function(){return q.defRtcRtpParameters()};b.defRTCRtpReceiveParameters=function(){return q.defRTCRtpParameters()};b.toRtcRtpReceiveParameters=function(a){l.logger.log("RtcRtpReceiveParameters.toRtcRtpReceiveParameters() in param:"+JSON.stringify(a));a=q.toRtcRtpParameters(a);l.logger.log("RtcRtpReceiveParameters.toRtcRtpReceiveParameters() out param:"+
JSON.stringify(a));return a};b.toRTCRtpReceiveParameters=function(a){l.logger.log("RtcRtpReceiveParameters.toRTCRtpReceiveParameters() in param:"+JSON.stringify(a));a=q.toRTCRtpParameters(a);l.logger.log("RtcRtpReceiveParameters.toRTCRtpReceiveParameters() out param:"+JSON.stringify(a));return a};return b}(q);a.RtcRtpReceiveParameters=b},589:function(b,a,c){var e=this&&this.__extends||function(){var a=function(b,d){a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=
b}||function(a,b){for(var d in b)b.hasOwnProperty(d)&&(a[d]=b[d])};return a(b,d)};return function(b,d){function c(){this.constructor=b}a(b,d);b.prototype=null===d?Object.create(d):(c.prototype=d.prototype,new c)}}();Object.defineProperty(a,"__esModule",{value:!0});a.RtpReceiver=a.RtpSender=a.RtpSenderReceiver=a.DtlsTransport=a.IceTransport=a.DtmfSender=a.DTMFToneChangeEvent=void 0;var l=c(658),h=c(550),d=c(851),w=c(144),q=c(517),n=c(650),k=c(484),v=function(a){function b(c,e){var g=a.call(this,c,
h.class_id_t.RTCDTMFToneChangeEvent,e,l.ProxyMode.Remote)||this;d.logger.log(g.user_friendly_id()+".constructor");return g}e(b,a);b.prototype.syncBarrier=function(){var a=this;d.logger.log(this.user_friendly_id()+".syncBarrier() called.");return new Promise(function(b,c){a.syncBarrierDeep(b,c)&&a.waitUntilConnected(a.user_friendly_id()+".syncBarrier").then(function(){Promise.all([a.remoteInvoke(!1,h.method_id_RTCDTMFToneChangeEvent_t.tone,""),a.remoteInvoke(!1,h.method_id_RTCDTMFToneChangeEvent_t.tone_buffer,
"")]).then(function(b){d.logger.log(a.user_friendly_id()+".syncBarrier(): success.");b=b.map(function(b){return a.param0(b)});a.tone=b[0];a.tone_buffer_=b[1];a.syncBarrierResolve(a)})["catch"](function(b){b=a.logRemoteInvokeError(b,".prop.syncBarrier() failed.");a.syncBarrierReject(b)})})["catch"](function(b){b=a.logRemoteInvokeError(b,".syncBarrier() failed.");a.syncBarrierReject(b)})})};Object.defineProperty(b.prototype,"tone_buffer",{get:function(){return this.tone_buffer_},enumerable:!1,configurable:!0});
return b}(l.ProxyObject);a.DTMFToneChangeEvent=v;var p=function(a){function b(c,e){var g=a.call(this,c,h.class_id_t.RTCDTMFSender,e,l.ProxyMode.Remote)||this;d.logger.log(g.user_friendly_id()+".constructor");g.canInsertDTMF=!0;g.toneBuffer_="";return g}e(b,a);b.prototype.insertDTMF=function(a,b,c){var e=this;void 0===b&&(b=100);void 0===c&&(c=70);d.logger.log(this.user_friendly_id()+".insertDTMF() called, tones: "+a);this.waitUntilConnected("DtmfSender.insertDTMF").then(function(){return e.remoteInvoke(!1,
h.method_id_RTCDTMFSender_t.insertDTMF,a,b,c)}).then(function(){d.logger.log(e.user_friendly_id()+".insertDTMF() success, tones: "+a)})["catch"](function(a){e.logRemoteInvokeError(a,".insertDTMF() failed!")})};Object.defineProperty(b.prototype,"ontonechange",{get:function(){return this.ontonechange_},set:function(a){var b=this;d.logger.log(this.user_friendly_id()+".set_ontonechange() called.");this.ontonechange_=a;this.waitUntilConnected("DtmfSender.ontonechange").then(function(){var c=b.registerCallbacks(!1,
b.isNullCallback(a),h.method_id_RTCDTMFSender_t.ontonechange);c.then(function(a){d.logger.log(b.user_friendly_id()+".ontonechange callback received!");(new v(b,b.param0(a).oid)).syncBarrier().then(function(a){d.logger.log(b.user_friendly_id()+"tone: "+a.tone+" tone_buffer: "+a.tone_buffer);b.toneBuffer_=a.tone_buffer;b.ontonechange_(a)})["catch"](function(a){b.logRemoteInvokeError(a,".toneEvt.syncBarrier() failed!")})});return b.remoteInvoke(!0,h.method_id_RTCDTMFSender_t.ontonechange,c.success)})["catch"](function(a){b.logRemoteInvokeError(a,
".set_ontonechange() failed!")})},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"toneBuffer",{get:function(){d.logger.log(this.user_friendly_id()+".toneBuffer() called.");return this.toneBuffer_},enumerable:!1,configurable:!0});return b}(l.ProxyObject);a.DtmfSender=p;var g=function(a){function b(c,e){var g=a.call(this,c,h.class_id_t.RTCIceTransport,e,l.ProxyMode.Remote)||this;d.logger.log(g.user_friendly_id()+".constructor");g.selectedPair=null;g.localCandidates_=[];g.remoteCandidates_=
[];return g}e(b,a);b.prototype.syncBarrier=function(){var a=this;d.logger.log(this.user_friendly_id()+".syncBarrier() called.");return new Promise(function(c,e){a.syncBarrierDeep(c,e)&&a.waitUntilConnected("IceTransport.syncBarrier").then(function(){return Promise.all([a.remoteInvoke(!1,h.method_id_RTCIceTransport_t.role,0),a.remoteInvoke(!1,h.method_id_RTCIceTransport_t.component,0),a.remoteInvoke(!1,h.method_id_RTCIceTransport_t.state,0),a.remoteInvoke(!1,h.method_id_RTCIceTransport_t.gatheringState,
0)])}).then(function(c){d.logger.log(a.user_friendly_id()+".syncBarrier success.");var e=0,g=0;c=c.map(function(b){return a.param0(b)});a.role_=c[0];a.component_=c[1];e=c[2];g=c[3];a.state_=b.convertState(e);a.gatheringState_=b.convertGatheringState(g);a.syncBarrierResolve(a)})["catch"](function(b){b=a.logRemoteInvokeError(b,".syncBarrier() failed!");a.syncBarrierReject(b)})})};b.prototype.syncCandidates=function(){var a=this;d.logger.log(this.user_friendly_id()+".syncCandidates() called.");return new Promise(function(b,
c){a.waitUntilConnected("IceTransport.syncCandidates").then(function(){return Promise.all([a.remoteInvoke(!1,h.method_id_RTCIceTransport_t.localcandidates,[]),a.remoteInvoke(!1,h.method_id_RTCIceTransport_t.remotecandidates,[])])}).then(function(c){d.logger.log(a.user_friendly_id()+".syncCandidates success.");c=c.map(function(b){return a.param0(b)});a.localCandidates_=c[0];a.remoteCandidates_=c[1];b(a)})["catch"](function(b){b=a.logRemoteInvokeError(b,".syncCandidates() failed!");c(b)})})};Object.defineProperty(b.prototype,
"role",{get:function(){return this.role_},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"component",{get:function(){return this.component_},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"State",{get:function(){return this.state_},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"gatheringState",{get:function(){return this.gatheringState_},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"onstatechange",{get:function(){return this.onstatechange_},
set:function(a){var c=this;d.logger.log(this.user_friendly_id()+".set_onstatechange() called.");this.onstatechange_=a;this.waitUntilConnected("IceTransport.onstatechange").then(function(){var e=c.registerCallbacks(!1,c.isNullCallback(a),h.method_id_RTCIceTransport_t.onstatechange);e.then(function(a){d.logger.log(c.user_friendly_id()+".onstatechange callback received!");c.syncCandidates().then(function(a){d.logger.log(c.user_friendly_id()+"received updated ice candidates!")});c.state_=b.convertState(c.param0(a));
d.logger.log(c.user_friendly_id()+"state: "+c.state_);c.onstatechange_()});return c.remoteInvoke(!0,h.method_id_RTCIceTransport_t.onstatechange,e.success)})["catch"](function(a){c.logRemoteInvokeError(a,".set_onstatechange failed!")})},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"ongatheringstatechange",{get:function(){return this.ongatheringstatechange_},set:function(a){var c=this;d.logger.log(this.user_friendly_id()+".set_ongatheringstatechange() called.");this.ongatheringstatechange_=
a;this.waitUntilConnected("IceTransport.ongatheringstatechange").then(function(){var e=c.registerCallbacks(!1,c.isNullCallback(a),h.method_id_RTCIceTransport_t.ongatheringstatechange);e.then(function(a){d.logger.log(c.user_friendly_id()+".ongatheringstatechange callback received!");c.syncCandidates().then(function(a){d.logger.log(c.user_friendly_id()+"received updated ice candidates!")});c.gatheringState_=b.convertGatheringState(c.param0(a));d.logger.log(c.user_friendly_id()+"gatheringState: "+c.gatheringState_);
c.ongatheringstatechange_()});return c.remoteInvoke(!0,h.method_id_RTCIceTransport_t.ongatheringstatechange,e.success)})["catch"](function(a){c.logRemoteInvokeError(a,".set_ongatheringstatechange failed!")})},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"onselectedcandidatepairchange",{get:function(){return this.onselectedcandidatepairchange_},set:function(a){var b=this;d.logger.log(this.user_friendly_id()+".set_onselectedcandidatepairchange() called.");this.onselectedcandidatepairchange_=
a;this.waitUntilConnected("IceTransport.onselectedcandidatepairchange").then(function(){var c=b.registerCallbacks(!1,b.isNullCallback(a),h.method_id_RTCIceTransport_t.onselectedcandidatepairchange);c.then(function(a){d.logger.log(b.user_friendly_id()+".onselectedcandidatepairchange callback received!");b.syncCandidates().then(function(a){d.logger.log(b.user_friendly_id()+"received updated ice candidates!")});b.selectedPair=b.param0(a);d.logger.log(b.user_friendly_id()+"selectedPair: "+b.selectedPair);
b.onselectedcandidatepairchange_()});return b.remoteInvoke(!0,h.method_id_RTCIceTransport_t.onselectedcandidatepairchange,c.success)})["catch"](function(a){b.logRemoteInvokeError(a,".set_onselectedcandidatepairchange failed!")})},enumerable:!1,configurable:!0});b.prototype.getLocalCandidates=function(){return this.localCandidates_};b.prototype.getRemoteCandidates=function(){return this.remoteCandidates_};b.prototype.getLocalParameters=function(){return null};b.prototype.getRemoteParameters=function(){return null};
b.prototype.getSelectedCandidatePair=function(){return this.selectedPair};b.convertState=function(a){return 0==a?"new":1==a?"checking":2==a?"connected":3==a?"completed":4==a?"failed":5==a?"disconnected":"closed"};b.convertGatheringState=function(a){return 0==a?"new":1==a?"gathering":"complete"};return b}(l.ProxyObject);a.IceTransport=g;var B;(function(a){a[a["new"]=0]="new";a[a.connecting=1]="connecting";a[a.connected=2]="connected";a[a.closed=3]="closed";a[a.failed=4]="failed";a[a.max=5]="max"})(B||
(B={}));var t=function(a){function b(c,e){var g=a.call(this,c,h.class_id_t.RTCDtlsTransport,e,l.ProxyMode.Remote)||this;d.logger.log(g.user_friendly_id()+".constructor");g.state_="new";g.transport_=null;g.remoteCertificates_=[];return g}e(b,a);b.prototype.dumpInfo=function(){d.logger.log("DtlsTransport["+this.object_id()+"].dumpInfo():");d.logger.log("    - state:"+this.state_);d.logger.log("    - transport:"+this.transport_)};b.prototype.syncBarrier=function(){var a=this;d.logger.log(this.user_friendly_id()+
".syncBarrier() called.");return new Promise(function(c,e){a.syncBarrierDeep(c,e)&&a.waitUntilConnected("DtlsTransport.syncBarrier").then(function(){return Promise.all([a.remoteInvoke(!1,h.method_id_RTCDtlsTransport_t.transport,{}),a.remoteInvoke(!1,h.method_id_RTCDtlsTransport_t.state,0),a.remoteInvoke(!1,h.method_id_RTCDtlsTransport_t.getRemoteCertificates)])}).then(function(c){var e;d.logger.log(a.user_friendly_id()+".syncBarrier remote success.");var h;e=c.map(function(b){return a.param0(b)});
c=e[0];h=e[1];a.remoteCertificates_=e[2];a.state_=b.convertState(h);e=[];if(void 0!=c&&0==c.is_null){h=a.transport_;if(null===a.transport_||a.transport_.object_id()!=c.oid)h=new g(a,c.oid);e.push(h.syncBarrier())}else e.push(Promise.resolve(null));Promise.all(e).then(function(b){d.logger.log(a.user_friendly_id()+".syncBarrier success");a.transport_=b[0];a.syncBarrierResolve(a)})["catch"](function(b){b=a.logRemoteInvokeError(b,".prop.syncBarrier failed!");a.syncBarrierReject(b)})})["catch"](function(b){b=
a.logRemoteInvokeError(b,".syncBarrier failed!");a.syncBarrierReject(b)})})};Object.defineProperty(b.prototype,"transport",{get:function(){return this.transport_},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"state",{get:function(){d.logger.log(this.user_friendly_id()+".get_state() called: "+this.state_);return this.state_},enumerable:!1,configurable:!0});b.prototype.getRemoteCertificates=function(){return this.remoteCertificates_};Object.defineProperty(b.prototype,"onstatechange",
{get:function(){return this.onstatechange_},set:function(a){var c=this;d.logger.log(this.user_friendly_id()+".set_onstatechange() called.");this.onstatechange_=a;this.waitUntilConnected("DtlsTransport.onstatechange").then(function(){var e=c.registerCallbacks(!1,c.isNullCallback(a),h.method_id_RTCDtlsTransport_t.onstatechange);e.then(function(a){d.logger.log(c.user_friendly_id()+".onstatechange callback received!");c.state_=b.convertState(c.param0(a));d.logger.log(c.user_friendly_id()+"state_: "+c.state_);
c.onstatechange_()});return c.remoteInvoke(!0,h.method_id_RTCDtlsTransport_t.onstatechange,e.success)})["catch"](function(a){c.logRemoteInvokeError(a,".set_onstatechange failed!")})},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"onerror",{get:function(){return this.onerror_},set:function(a){var b=this;d.logger.log(this.user_friendly_id()+".set_onerror() called.");this.onerror_=a;this.waitUntilConnected("DtlsTransport.onerror").then(function(){var c=b.registerCallbacks(!1,b.isNullCallback(a),
h.method_id_RTCDtlsTransport_t.onerror);c.then(function(a){d.logger.log(b.user_friendly_id()+".onerror callback received!");a=b.param0(a);d.logger.log(b.user_friendly_id()+"error: "+a);b.onerror_(a)});return b.remoteInvoke(!0,h.method_id_RTCDtlsTransport_t.onerror,c.success)})["catch"](function(a){b.logRemoteInvokeError(a,".set_onerror failed!")})},enumerable:!1,configurable:!0});b.convertState=function(a){return a==B["new"]?"new":a==B.connecting?"connecting":a==B.connected?"connected":a==B.closed?
"closed":"failed"};return b}(l.ProxyObject);a.DtlsTransport=t;b=function(a){function b(c,e,g,h){c=a.call(this,c,e,g,h)||this;d.logger.log(c.user_friendly_id()+".constructor base");c.track_=null;c.transport_=null;return c}e(b,a);b.prototype.syncBarrierBase=function(){d.logger.log(this.user_friendly_id()+".syncBarrierBase() called.");var a=[],b,c;this instanceof m?(b=h.method_id_RTCRtpSender_t.track,c=h.method_id_RTCRtpSender_t.transport):this instanceof D&&(b=h.method_id_RTCRtpReceiver_t.track,c=h.method_id_RTCRtpReceiver_t.transport);
n.RemoteSession.isFeaturePstnSupported()&&n.RemoteSession.isFeatureDtmfSupported()?(a.push(this.remoteInvoke(!1,b,{oid:0})),a.push(this.remoteInvoke(!1,c,{oid:0}))):a.push(this.remoteInvoke(!1,b,{oid:0}));return a};b.prototype.syncBarrierBaseResults=function(a){var b,c=this;b=0;d.logger.log(this.user_friendly_id()+".syncBarrierBaseResults");var e;n.RemoteSession.isFeaturePstnSupported()&&n.RemoteSession.isFeatureDtmfSupported()?(b=a.map(function(a){return c.param0(a)}),a=b[0],e=b[1],b=2):(a=a.map(function(a){return c.param0(a)})[0],
b=1);var g=[];if(void 0!=a&&!1===a.is_null){var h=this.track_;null===this.track_||this.track_.object_id()!=a.oid?h=new w.RemoteMediaTrack(this,a.oid):this.track_.bind(this,a.oid);g.push(h.syncBarrier())}else g.push(Promise.resolve(null));if(void 0!=e&&!1===e.is_null){a=this.transport_;if(null===this.transport_||this.transport_.object_id()!=e.oid)a=new t(this,e.oid);g.push(a.syncBarrier())}else g.push(Promise.resolve(null));return[b,g]};b.prototype.syncBarrierBaseResultsWithAllPromisesFulFilled=function(a){this.track_=
a[0];this.transport_=a[1]};Object.defineProperty(b.prototype,"transport",{get:function(){d.logger.log(this.user_friendly_id()+".get transport() called.");return this.transport_},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"rtcpTransport",{get:function(){d.logger.log(this.user_friendly_id()+".get rtcpTransport() called.");return this.transport_},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"track",{get:function(){return this.track_},enumerable:!1,configurable:!0});
b.prototype.reinitTrack=function(a){this.track_=a};b.prototype.getStats=function(){d.logger.log(this.user_friendly_id()+".getStats() called.");var a=this;return new Promise(function(b,c){a.isRedirected()?a.waitUntilConnected("RtpReceiver.getStats").then(function(){if(n.RemoteSession.isFeatureSenderStatsFixSupported()){var d;a instanceof m?d=h.method_id_RTCRtpSender_t.getStats:a instanceof D&&(d=h.method_id_RTCRtpReceiver_t.getStats);var c=a.registerCallbacks(!0,!1,d);c.then(function(a){void 0===a.params||
0===a.params.length||0===a.params[0].length?b():b(q.StatsReport.fromJSON(JSON.parse(a.params[0])))});return a.remoteInvoke(!1,d,c.success)}b()})["catch"](function(b){b=a.logRemoteInvokeError(b,".getStats() failed!");c(b)}):(d.logger.log(a.user_friendly_id()+".getStats(): not in active redirection!"),b())})};return b}(l.ProxyObject);a.RtpSenderReceiver=b;var m=function(a){function b(c,e,g,m){c=a.call(this,c,h.class_id_t.RTCRtpSender,e,g)||this;d.logger.log(c.user_friendly_id()+".constructor");c.dtmf_=
null;c.params_=k.RtcRtpSendParameters.defRtcRtpSendParameters();c.unified_=m;return c}e(b,a);b.prototype.dumpInfo=function(){d.logger.log("RtpSender["+this.object_id()+"].dumpInfo():");this.track&&this.track.dumpInfo()};b.prototype.syncBarrier=function(){var b=this;d.logger.log(this.user_friendly_id()+".syncBarrier() called.");return new Promise(function(c,e){b.syncBarrierDeep(c,e)&&b.waitUntilConnected("RtpSender.syncBarrier").then(function(){var c=a.prototype.syncBarrierBase.call(b);n.RemoteSession.isFeaturePstnSupported()&&
n.RemoteSession.isFeatureDtmfSupported()&&(c.push(b.remoteInvoke(!1,h.method_id_RTCRtpSender_t.dtmf,{oid:0})),c.push(b.remoteInvoke(!1,h.method_id_RTCRtpSender_t.getParameters)));return Promise.all(c)}).then(function(a){var c,e;c=b.syncBarrierBaseResults(a);e=c[0];c=c[1];a=a.slice(e).map(function(a){return b.param0(a)});e=a[0];b.params_=a[1];void 0==e||!1!==e.is_null||null!==b.dtmf_&&b.dtmf_.object_id()==e.oid||(b.dtmf_=new p(b,e.oid));Promise.all(c).then(function(a){b.syncBarrierBaseResultsWithAllPromisesFulFilled(a);
d.logger.log(b.user_friendly_id()+".syncBarrierBase success.");b.syncBarrierResolve(b)})["catch"](function(a){a=b.logRemoteInvokeError(a,".syncBarrier() promises_base failed!");b.syncBarrierReject(a)})})["catch"](function(a){a=b.logRemoteInvokeError(a,".syncBarrier failed!");b.syncBarrierReject(a)})})};b.getCapabilities=function(a){d.logger.log(this.constructor.name+".getCapabilities() called.");return w.NavigatorUserMedia.getCapabilities(a)};Object.defineProperty(b.prototype,"dtmf",{get:function(){d.logger.log(this.user_friendly_id()+
".get dtmf() called.");return this.dtmf_},enumerable:!1,configurable:!0});b.prototype.setParameters=function(a){return this.setParametersAsync(a)};b.prototype.setParametersAsync=function(a){var b=this;d.logger.log(this.user_friendly_id()+".setParametersAsync() called.");return new Promise(function(c,e){b.waitUntilConnected("RtpSender.setParametersAsync").then(function(){return Promise.all([b.remoteInvoke(!1,h.method_id_RTCRtpSender_t.setParameters,k.RtcRtpSendParameters.toRtcRtpSendParameters(a))])}).then(function(e){d.logger.log(b.user_friendly_id()+
".setParametersAsync(): success.");c();b.params_=k.RtcRtpSendParameters.toRtcRtpSendParameters(a)})["catch"](function(a){a=b.logRemoteInvokeError(a,".setParametersAsync() failed!");e(a)})})};b.prototype.getParameters=function(){d.logger.log(this.user_friendly_id()+".getParameters() called.");return this.getParametersInternal(!1)};b.prototype.getParametersAsync=function(){d.logger.log(this.user_friendly_id()+".getParametersAsync() called.");return this.getParametersInternal(!0)};b.prototype.getParametersInternal=
function(a){var b=this,c=new Promise(function(a,c){b.waitUntilConnected(b.user_friendly_id()+".getParametersInternal").then(function(){d.logger.log(b.user_friendly_id()+".getParametersInternal() remote invoking");return b.remoteInvoke(!1,h.method_id_RTCRtpSender_t.getParameters)}).then(function(c){b.params_=b.param0(c);d.logger.log(b.user_friendly_id()+".getParametersInternal() success returning: "+b.params_);a(k.RtcRtpSendParameters.toRTCRtpSendParameters(b.params_))})["catch"](function(a){a=b.logRemoteInvokeError(a,
".getParametersInternal() failed!");c(a)})});if(a)return c;d.logger.log(this.user_friendly_id()+".getParametersInternal() returning: "+this.params_);return k.RtcRtpSendParameters.toRTCRtpSendParameters(this.params_)};b.prototype.replaceTrack=function(a){var b=this;d.logger.log(this.user_friendly_id()+".replaceTrack() called. current track:"+(this.track_?this.track_.object_id():"null")+" with track="+(a?a.object_id():"null"));return new Promise(function(c,e){b.waitUntilConnected("RtpSender.replaceTrack").then(function(){return a||
n.RemoteSession.isFeatureWebrtc1dot0Supported()?a?b.remoteInvokeEx(!1,h.method_id_RTCRtpSender_t.replaceTrack,[a]):b.remoteInvoke(!1,h.method_id_RTCRtpSender_t.replaceTrack,{oid:-1}):Promise.reject(new DOMException("Does not support replace track with null in non-Unified SDP semantic!"))}).then(function(e){d.logger.log(b.user_friendly_id()+".replaceTrack(): success.");c();b.reinitTrack(a)})["catch"](function(a){a=b.logRemoteInvokeError(a,".replaceTrack() failed!");e(a)})})};return b}(b);a.RtpSender=
m;var D=function(a){function b(c,e,g,m,x){c=a.call(this,c,h.class_id_t.RTCRtpReceiver,e,g)||this;d.logger.log(c.user_friendly_id()+".constructor");c.contribsources_=[];c.syncsources_=[];c.params_=k.RtcRtpParameters.defRtcRtpParameters();c.unified_=m;x&&(c.track_=x);return c}e(b,a);b.prototype.dumpInfo=function(){d.logger.log("RtpReceiver["+this.object_id()+"].dumpInfo():");this.track&&this.track.dumpInfo();this.transport&&this.transport.dumpInfo()};b.prototype.syncBarrier=function(){var b=this;d.logger.log(this.user_friendly_id()+
".syncBarrier() called.");return new Promise(function(c,e){b.syncBarrierDeep(c,e)&&b.waitUntilConnected("RtpReceiver.syncBarrier").then(function(){var c=a.prototype.syncBarrierBase.call(b);n.RemoteSession.isFeaturePstnSupported()&&n.RemoteSession.isFeatureDtmfSupported()?(c.push(b.remoteInvoke(!1,h.method_id_RTCRtpReceiver_t.getContributingSources)),c.push(b.remoteInvoke(!1,h.method_id_RTCRtpReceiver_t.getSynchronizationSources)),c.push(b.remoteInvoke(!1,h.method_id_RTCRtpReceiver_t.getParameters))):
c.push(b.remoteInvoke(!1,h.method_id_RTCRtpReceiver_t.getContributingSources));return Promise.all(c)}).then(function(a){var c,e;c=b.syncBarrierBaseResults(a);e=c[0];c=c[1];a=a.slice(e).map(function(a){return b.param0(a)});b.contribsources_=a[0];b.syncsources_=a[1];b.params_=a[2];Promise.all(c).then(function(a){b.syncBarrierBaseResultsWithAllPromisesFulFilled(a);d.logger.log(b.user_friendly_id()+".syncBarrier success.");b.syncBarrierResolve(b)})["catch"](function(a){a=b.logRemoteInvokeError(a,".syncBarrier() promises_base failed!");
b.syncBarrierReject(a)})})["catch"](function(a){a=b.logRemoteInvokeError(a,".syncBarrier() failed!");b.syncBarrierReject(a)})})};b.getCapabilities=function(a){d.logger.log(this.constructor.name+".getCapabilities() called.");return w.NavigatorUserMedia.getCapabilities(a)};b.prototype.getContributingSources=function(){var a=this;d.logger.log(this.user_friendly_id()+".getContributingSources() called. "+JSON.stringify(this.contribsources_));this.waitUntilConnected("RtpReceiver.getContributingSources").then(function(){return Promise.all([a.remoteInvoke(!1,
h.method_id_RTCRtpReceiver_t.getContributingSources)])}).then(function(b){a.contribsources_=b.map(function(b){return a.param0(b)})[0];d.logger.log(a.user_friendly_id(),".getContributingSources() success: "+JSON.stringify(a.contribsources_))})["catch"](function(b){a.logRemoteInvokeError(b,".getContributingSources() failed!");a.contribsources_=[]});return this.contribsources_};b.prototype.getParameters=function(){var a=this;d.logger.log(this.user_friendly_id()+".getParameters() called.");this.waitUntilConnected(this.user_friendly_id()+
".getParameters").then(function(){d.logger.log(a.user_friendly_id()+".getParameters() remote invoking");return a.remoteInvoke(!1,h.method_id_RTCRtpReceiver_t.getParameters)}).then(function(b){d.logger.log(a.user_friendly_id()+".getParameters() success");a.params_=a.param0(b)})["catch"](function(b){a.logRemoteInvokeError(b,".getParameters() failed!")});d.logger.log(this.user_friendly_id()+".getParameters() returning: "+this.params_);return k.RtcRtpReceiveParameters.toRTCRtpReceiveParameters(this.params_)};
b.prototype.getSynchronizationSources=function(){d.logger.log(this.user_friendly_id()+".getSynchronizationSources() called.");return this.syncsources_};return b}(b);a.RtpReceiver=D},377:function(b,a,c){var e=this&&this.__extends||function(){var a=function(b,c){a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return a(b,c)};return function(b,c){function d(){this.constructor=b}a(b,c);b.prototype=null===
c?Object.create(c):(d.prototype=c.prototype,new d)}}();Object.defineProperty(a,"__esModule",{value:!0});a.RtpTransceiver=a.RtcRtpTransceiverInit=a.RtcRtpTransceiverDirection=void 0;var l=c(658),h=c(550),d=c(851),w=c(589),q=c(484),n;(function(a){a[a.sendrecv=0]="sendrecv";a[a.sendonly=1]="sendonly";a[a.recvonly=2]="recvonly";a[a.inactive=3]="inactive";a[a.stopped=4]="stopped"})(n=a.RtcRtpTransceiverDirection||(a.RtcRtpTransceiverDirection={}));var k=function(){function a(){}a.toRtcRtpTransceiverDirection=
function(a){switch(a){case "inactive":a=n.inactive;break;case "recvonly":a=n.recvonly;break;case "sendonly":a=n.sendonly;break;case "sendrecv":a=n.sendrecv;break;case "stopped":a=n.stopped;break;default:a=n.sendrecv}return a};a.toRTCRtpTransceiverDirection=function(a){switch(a){case n.inactive:a="inactive";break;case n.recvonly:a="recvonly";break;case n.sendonly:a="sendonly";break;case n.sendrecv:a="sendrecv";break;case n.stopped:a="stopped";break;default:a="sendrecv"}return a};a.toRtcRtpTransceiverInit=
function(b){d.logger.log("RtcRtpTransceiverInit.toRtcRtpTransceiverInit() in init:"+JSON.stringify(b));var c={};b&&(b.direction&&(c.direction=a.toRtcRtpTransceiverDirection(b.direction)),b.sendEncodings&&(c.sendEncodings=[],b.sendEncodings.forEach(function(a){return c.sendEncodings.push(q.RtcRtpEncodingParameters.toRtcRtpEncodingParameters(a))})),b.streams&&(c.streams=b.streams));d.logger.log("RtcRtpTransceiverInit.toRtcRtpTransceiverInit() out init:"+JSON.stringify(c));return c};return a}();a.RtcRtpTransceiverInit=
k;b=function(a){function b(c,e,k,m,q,y){c=a.call(this,c,h.class_id_t.RTCRtpTransceiver,e,k)||this;d.logger.log(c.user_friendly_id()+".constructor");c.unified_=m;c.sender_=new w.RtpSender(c,0,l.ProxyMode.Pseudo,m);c.receiver_=y?y:new w.RtpReceiver(c,0,l.ProxyMode.Pseudo,m);q?(c.direction_=q,c.currentDirection_=q):(c.direction_=n.sendrecv,c.currentDirection_=n.sendrecv);return c}e(b,a);b.prototype.dumpInfo=function(){d.logger.log(this.user_friendly_id()+".dumpInfo() [id="+this.mid+"] direction="+k.toRTCRtpTransceiverDirection(this.direction_)+
" currentDirection="+k.toRTCRtpTransceiverDirection(this.currentDirection_));this.sender&&this.sender.dumpInfo();this.receiver&&this.receiver.dumpInfo()};b.prototype.syncBarrier=function(){var a=this;d.logger.log(this.user_friendly_id()+".syncBarrier() called.");return new Promise(function(b,c){a.syncBarrierDeep(b,c)&&a.waitUntilConnected("RtpTransceiver.syncBarrier").then(function(){return Promise.all([a.remoteInvoke(!1,h.method_id_RTCRtpTransceiver_t.mid,""),a.remoteInvoke(!1,h.method_id_RTCRtpTransceiver_t.direction,
0),a.remoteInvoke(!1,h.method_id_RTCRtpTransceiver_t.currentDirection,0),a.remoteInvoke(!1,h.method_id_RTCRtpTransceiver_t.sender,{oid:0}),a.remoteInvoke(!1,h.method_id_RTCRtpTransceiver_t.receiver,{oid:0})])}).then(function(b){var c;d.logger.log(a.user_friendly_id()+".syncBarrier remote success.");c=b.map(function(b){return a.param0(b)});a.mid_=c[0];a.direction_=c[1];a.currentDirection_=c[2];b=c[3];c=c[4];var e=[];void 0!=b&&!1===b.is_null&&(a.sender_.bind(a,b.oid),e.push(a.sender_.syncBarrier()));
void 0!=c&&!1===c.is_null&&(a.receiver_.bind(a,c.oid),e.push(a.receiver_.syncBarrier()));if(0==e.length)d.logger.log(a.user_friendly_id()+".syncBarrier success"),a.syncBarrierResolve(a);else return d.logger.log(a.user_friendly_id()+".prop.syncBarrier start"),Promise.all(e)}).then(function(){d.logger.log(a.user_friendly_id()+".syncBarrier success");a.syncBarrierResolve(a)})["catch"](function(b){b=a.logRemoteInvokeError(b,".syncBarrier() failed!");a.syncBarrierReject(b)})})};Object.defineProperty(b.prototype,
"mid",{get:function(){d.logger.log(this.user_friendly_id()+".get_mid() called: "+this.mid_);return this.mid_},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"sender",{get:function(){return this.sender_},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"receiver",{get:function(){return this.receiver_},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"direction",{get:function(){d.logger.log(this.user_friendly_id()+".get_direction() called. "+k.toRTCRtpTransceiverDirection(this.direction_));
return k.toRTCRtpTransceiverDirection(this.direction_)},set:function(a){var b=this;d.logger.log(this.user_friendly_id()+".set_direction() called. "+a);this.direction_=k.toRtcRtpTransceiverDirection(a);this.waitUntilConnected("RtpTransceiver.set_direction").then(function(){return b.remoteInvoke(!0,h.method_id_RTCRtpTransceiver_t.direction,k.toRtcRtpTransceiverDirection(a))}).then(function(){d.logger.log(b.user_friendly_id()+".set_direction: success.")})["catch"](function(a){b.logRemoteInvokeError(a,
".set_direction() failed!")})},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"currentDirection",{get:function(){d.logger.log(this.user_friendly_id()+".get_currentDirection() called. "+k.toRTCRtpTransceiverDirection(this.currentDirection_));return k.toRTCRtpTransceiverDirection(this.currentDirection_)},enumerable:!1,configurable:!0});b.prototype.stop=function(){var a=this;d.logger.log(this.user_friendly_id()+".stop() called.");this.waitUntilConnected("RtpTransceiver.stop").then(function(){return a.remoteInvoke(!0,
h.method_id_RTCRtpTransceiver_t.stop)}).then(function(){d.logger.log(a.user_friendly_id()+".stop: success.")})["catch"](function(b){a.logRemoteInvokeError(b,".stop() failed!")})};b.prototype.setCodecPreferences=function(a){var b=this;d.logger.log(this.user_friendly_id()+".setCodecPreferences() called.");this.waitUntilConnected("RtpTransceiver.setCodecPreferences").then(function(){return b.remoteInvoke(!0,h.method_id_RTCRtpTransceiver_t.setCodecPreferences,a)}).then(function(){d.logger.log(b.user_friendly_id()+
".setCodecPreferences: success.")})["catch"](function(a){b.logRemoteInvokeError(a,".setCodecPreferences() failed!")})};return b}(l.ProxyObject);a.RtpTransceiver=b},973:function(b,a,c){function e(a,b){return void 0!==a.find(function(a){return a===b})}function l(a,b,c){b/=a.width;c/=a.height;var d=document.createElement("canvas"),e=d.getContext("2d");d.width=a.width*b;d.height=a.height*c;e.putImageData(a,0,0);if(1!=b||1!=c)e.scale(b,c),e.drawImage(d,0,0);return d}function h(a,b,c){a=l(a,b,c);b=document.createElement("img");
b.src=a.toDataURL();return b}function d(a,b,c,d){c="undefined"!==typeof c?c:D.Width;d="undefined"!==typeof d?d:D.Height;if(!0===b)return h(a,c,d);b=null;c==a.width&&d===a.height?b=a:(a=l(a,c,d),b=a.getContext("2d").getImageData(0,0,a.width,a.height));return b}var w=this&&this.__extends||function(){var a=function(b,c){a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return a(b,c)};return function(b,
c){function d(){this.constructor=b}a(b,c);b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}();Object.defineProperty(a,"__esModule",{value:!0});a.ScreenSource=a.ScreenSourceVda=a.ScreenSharingVda=a.ScreenSharingRemote=a.ScreenSharing=a.ImageDataRemote=void 0;var q=c(658),n=c(550),k=c(851),p=c(946),z=c(691),g=c(650),B;(function(a){a[a.Legacy=0]="Legacy";a[a.MonitorsAndApps=10]="MonitorsAndApps"})(B||(B={}));b=function(){return function(a,b,c){this.data=a;this.height=b;this.width=
c}}();a.ImageDataRemote=b;b=function(){function a(){this.local_=this.remote_=null}a.screenSharingInstance=function(b){a.instance||(a.instance=new a,b&&(a.instance.onscreentopologychanged=b));return a.instance};a.destroyInstance=function(){a.instance&&a.instance.remote_&&a.instance.remote_.release();a.instance=null};a.prototype.user_friendly_id=function(){return this.constructor.name+"[]"};Object.defineProperty(a.prototype,"onscreentopologychanged",{set:function(a){this.remote_||(this.remote_=new t);
this.remote_.onscreentopologychanged=a;this.local_||(this.local_=new m);this.local_.onscreentopologychanged=a},enumerable:!1,configurable:!0});a.prototype.getWindowsAsync=function(){var a=this;k.logger.log(this.user_friendly_id()+".getWindowsAsync() called.");null==this.local_&&(this.local_=new m);return new Promise(function(b,c){var d=[];a.local_.getWindowsAsync().then(function(c){c&&(d=c);k.logger.log(a.user_friendly_id()+".getWindowsAsync() returning sources");b(d)})["catch"](function(){k.logger.log("ScreenSharing.getWindowsAsync(): rejected");
b(d)})})};a.prototype.getScreensAsync=function(){var a=this;k.logger.log(this.user_friendly_id()+".getScreensAsync() called.");null==this.remote_&&(this.remote_=new t);return new Promise(function(b,c){var d=[];a.remote_.getScreensAsync().then(function(c){c&&(d=c);k.logger.log(a.user_friendly_id()+".getScreensAsync() returning sources");b(d)})["catch"](function(){k.logger.log("ScreenSharing.getScreensAsync(): rejected");b(d)})})};a.prototype.setActiveSource=function(a,b){var c=this;k.logger.log(this.user_friendly_id()+
".setActiveSource() called. id="+a+" appshare="+b);return new Promise(function(d,e){c.remote_.contains(a)?c.remote_.setActive(a).then(function(a){d(a)})["catch"](function(){k.logger.log("ScreenSharing.setActiveSource(): rejected");e()}):b?c.local_.contains(a)?c.local_.setActive(!0,a).then(function(a){d(a)})["catch"](function(){k.logger.log("ScreenSharing.setActiveSource(): rejected");e()}):(k.logger.log("ScreenSharing.setActiveSource(): legacy screen sharing"),d("")):(k.logger.log("ScreenSharing.setActiveSource(): legacy screen sharing"),
d(""))})};a.prototype.isAppshareActive=function(){return this.local_&&-1!==this.local_.lastActive};a.prototype.stopAppshare=function(){k.logger.log(this.user_friendly_id()+".stopAppshare() called.");this.local_&&this.local_.setActive(!1).then(function(a){k.logger.log("ScreenSharing.stopAppshare(): success, deviceid=",a)})["catch"](function(){k.logger.log("ScreenSharing.stopAppshare(): failure or timeout due to nonresponsive WS Agent")})};a.instance=null;return a}();a.ScreenSharing=b;var t=function(a){function b(){var c=
a.call(this,null,n.class_id_t.ScreenSharingRemote,0,q.ProxyMode.Local)||this;k.logger.log(c.user_friendly_id()+".constructor");c.sources_=[];return c}w(b,a);b.prototype.getSourceById=function(a){return this.sources_.find(function(b){return b.getId()==a})};b.prototype.contains=function(a){return void 0!==this.getSourceById(a)};Object.defineProperty(b.prototype,"onscreentopologychanged",{get:function(){return this.onscreentopologychanged_},set:function(a){var b=this;this.onscreentopologychanged_=a;
this.waitUntilConnected(this.user_friendly_id()+".onscreentopologychanged").then(function(){var a=b.registerCallbacks(!1,b.isNullCallback(b.onscreentopologychanged_),n.method_id_VDISharingRemote_t.onscreentopologychanged);a.then(function(){k.logger.log(b.user_friendly_id()+"onscreentopologychanged event received!!!");b.onscreentopologychanged_&&b.onscreentopologychanged_()});return b.remoteInvoke(!0,n.method_id_VDISharingRemote_t.onscreentopologychanged,a.success)})["catch"](function(a){b.logRemoteInvokeError(a,
".set_onscreentopologychanged() failed!")})},enumerable:!1,configurable:!0});b.prototype.getScreensAsync=function(){var a=this;k.logger.log(this.user_friendly_id()+".getScreensAsync() called.");var b=this.sources_;this.sources_=[];var c=p.getRedirector().vdabufferNoLimit()&&g.RemoteSession.isFeatureVdNoBufferLimitSupported();return new Promise(function(d,g){a.waitUntilConnected(a.user_friendly_id()+".getScreensAsync").then(function(){return a.remoteInvoke(!1,n.method_id_VDISharingRemote_t.getScreensAsync,
c)}).then(function(c){var h=[];c.params[0].forEach(function(c){var d=b.find(function(a){return a.object_id()===c.oid});void 0===d&&(k.logger.log(a.user_friendly_id()+" create a ScreenSource with oid:"+c.oid),d=new y(a,c.oid,q.ProxyMode.Remote));h.push(d.syncBarrier())});Promise.all(h.map(function(a){return a.then(function(a){return{value:a,status:"fulfilled"}},function(a){return{value:a,status:"rejected"}})})).then(function(c){var g=c.filter(function(a){return"fulfilled"===a.status}).map(function(a){return a.value});
a.sources_=g;b.filter(function(a){return!e(g,a)}).forEach(function(a){return a.release()});d(g)})["catch"](function(c){c=a.logRemoteInvokeError(c,".getScreensAsync() failed!");b.forEach(function(a){a.release()});g(c)})})["catch"](function(c){c=a.logRemoteInvokeError(c,".getScreensAsync() failed!");b.forEach(function(a){a.release()});g(c)})})};b.prototype.setActive=function(a){var b=this;k.logger.log(this.user_friendly_id()+".setActive() called. uniqueid="+a);return new Promise(function(c,d){-1!=a?
c(b.getSourceById(a).getDeviceId()):d()})};return b}(q.ProxyObject);a.ScreenSharingRemote=t;var m=function(){function a(){k.logger.log(this.user_friendly_id()+".constructor");this.sources_=[];this.lastactive_=-1}a.prototype.user_friendly_id=function(){return this.constructor.name+"[]"};Object.defineProperty(a.prototype,"onscreentopologychanged",{set:function(a){p.getRedirector().screenshare.setTopologyChangeCB(a)},enumerable:!1,configurable:!0});Object.defineProperty(a.prototype,"lastActive",{get:function(){return this.lastactive_},
enumerable:!1,configurable:!0});a.prototype.getSourceById=function(a){return this.sources_.find(function(b){return b.getId()==a})};a.prototype.contains=function(a){return void 0!==this.getSourceById(a)};a.prototype.getWindowsAsync=function(){var a=this;k.logger.log(this.user_friendly_id()+".getWindowsAsync() called.");var b=this.sources_;this.sources_=[];return new Promise(function(c,d){p.getRedirector().screenshare.getSources(new z.getSourcesReqData(2)).then(function(d){d=d.map(function(c){var d=
b.find(function(a){return a.equivalent(c)});return void 0!==d?(d.setDescription(c.getDescription()),c.getIcon().then(function(a){d.setIcon(a)})["catch"](function(){k.logger.log(a.user_friendly_id()+".getWindowsAsync() failed to retrieve new icon.")}),c.getPreviewAsync().then(function(a){d.setPreview(a)})["catch"](function(){k.logger.log(a.user_friendly_id()+".getWindowsAsync() failed to retrieve new preview.")}),d):c});if(-1!=a.lastactive_){var e=b.find(function(b){return b.getId()==a.lastactive_}),
g=d.find(function(b){return b.getId()==a.lastactive_});void 0!==e&&void 0===g&&d.push(e)}a.sources_=d;c(a.sources_)})["catch"](function(){k.logger.log(a.user_friendly_id()+".getWindowsAsync(): rejected");d()})})};a.prototype.activateSource=function(a,b){var c=this;return new Promise(function(d,e){var g=b?"activate":"deactivate";k.logger.log(c.user_friendly_id()+".activateSource() called. action="+g);var h=new z.setActiveReqData(a.srcid,a.hwnd,a.origin,a.pid,!0,!0,b);p.getRedirector().screenshare.setActive(h).then(function(b){k.logger.log(c.user_friendly_id()+
": "+g+" success: srcid="+b.srcid+" deviceid="+b.bufferid);a.deviceid=b.bufferid;d(b.bufferid)})["catch"](function(){k.logger.log(c.user_friendly_id()+"failed to "+g+": srcid="+a.srcid+", maybe WS Agent is too slow to respond");e()})})};a.prototype.setActive=function(a,b){var c=this;k.logger.log(this.user_friendly_id()+".setActive() called. uniqueid="+b);return new Promise(function(d,e){a||(b=c.lastactive_);-1!=b?(a?(b!=c.lastactive_&&-1!=c.lastactive_&&c.activateSource(c.getSourceById(c.lastactive_),
!1),c.lastactive_=b):c.lastactive_=-1,c.activateSource(c.getSourceById(b),a).then(function(b){d(a?"RemoteApplication-"+b:b)})["catch"](function(){e()})):e()})};return a}();a.ScreenSharingVda=m;var D=function(){function a(){}a.Width=140;a.Height=90;return a}();b=function(){function a(b,c,d,e,g,h,k,m,n,l){this.uniqueid_=y.nextId_++;this.srcid_=b;this.deviceid_=c;this.type_=d;this.imagedata_=e;this.icon_=g;this.name_=h;this.hwnd_=k;this.origin_=m;this.caption_=n;this.pid_=l}a.prototype.user_friendly_id=
function(){return this.constructor.name+"["+this.uniqueid_+"]"};Object.defineProperty(a.prototype,"srcid",{get:function(){return this.srcid_},enumerable:!1,configurable:!0});Object.defineProperty(a.prototype,"hwnd",{get:function(){return this.hwnd_},enumerable:!1,configurable:!0});Object.defineProperty(a.prototype,"origin",{get:function(){return this.origin_},enumerable:!1,configurable:!0});Object.defineProperty(a.prototype,"pid",{get:function(){return this.pid_},enumerable:!1,configurable:!0});a.prototype.getId=
function(){return this.uniqueid_};a.prototype.getDeviceId=function(){return this.deviceid_};Object.defineProperty(a.prototype,"deviceid",{set:function(a){this.deviceid_=a},enumerable:!1,configurable:!0});a.prototype.getType=function(){return 2};a.prototype.getPreview=function(a,b,c){k.logger.log(this.user_friendly_id()+".getPreview() called, width:"+a+" height:"+b+" asImage:"+c);return Promise.reject(null)};a.prototype.setPreview=function(a){this.imagedata_=a};a.prototype.getPreviewAsync=function(a,
b,c){k.logger.log(this.user_friendly_id()+".getPreviewAsync() called, width:"+a+" height:"+b);return!0===c?(a=h(this.imagedata_,D.Width,D.Height),Promise.resolve({data:a.src.replace(/^data:image\/(png|jpg);base64,/,"")})):Promise.resolve(this.imagedata_)};a.prototype.getPreviewImage=function(a,b,c){k.logger.log(this.user_friendly_id()+".getPreviewImage() called, width:"+b+" height:"+c);return Promise.resolve(d(this.imagedata_,a,b,c))};a.prototype.getDescription=function(){return this.name_};a.prototype.setDescription=
function(a){this.name_=a};a.prototype.getIcon=function(a,b,c){return!0===c?(a=h(this.icon_,D.Width,D.Height),Promise.resolve({data:a.src.replace(/^data:image\/(png|jpg);base64,/,"")})):Promise.resolve(this.icon_)};a.prototype.getIconImage=function(a,b,c){k.logger.log(this.user_friendly_id()+".getIconImage() called, width:"+b+" height:"+c);return Promise.resolve(d(this.icon_,a,"undefined"!==typeof b?b:this.icon_.width,"undefined"!==typeof c?c:this.icon_.height))};a.prototype.setIcon=function(a){this.icon_=
a};a.prototype.getBounds=function(){return{x:0,y:0,width:0,height:0}};a.prototype.equivalent=function(a){return this.pid_===a.pid_&&this.hwnd_===a.hwnd_};return a}();a.ScreenSourceVda=b;var y=function(a){function b(c,d,e){c=a.call(this,c,n.class_id_t.ScreenSource,d,e)||this;c.screenshare_=new z.ScreenShareUtil;c.uniqueid_=b.nextId_++;k.logger.log(c.user_friendly_id()+".constructor");return c}w(b,a);b.prototype.user_friendly_id=function(){return this.constructor.name+"["+this.uniqueid_+"]"};b.prototype.toJSImageData=
function(a){var b=atob(a.data.toString()),b=this.screenshare_.str2ab(b),b=new Uint8ClampedArray(b,0,b.byteLength);this.imagedata_=new ImageData(b,a.width,a.height)};b.prototype.syncBarrier=function(){var a=this;k.logger.log(this.user_friendly_id()+".syncBarrier() called.");return new Promise(function(b,c){a.syncBarrierDeep(b,c)&&a.waitUntilConnected(a.user_friendly_id()+".syncBarrier").then(function(){Promise.all([a.remoteInvoke(!1,n.method_id_ScreenSource_t.srcid,0),a.remoteInvoke(!1,n.method_id_ScreenSource_t.deviceid,
""),a.remoteInvoke(!1,n.method_id_ScreenSource_t.type,0),a.remoteInvoke(!1,n.method_id_ScreenSource_t.name,""),a.remoteInvoke(!1,n.method_id_ScreenSource_t.imagedata),a.remoteInvoke(!1,n.method_id_ScreenSource_t.hwnd,""),a.remoteInvoke(!1,n.method_id_ScreenSource_t.origin,0),a.remoteInvoke(!1,n.method_id_ScreenSource_t.caption,""),a.remoteInvoke(!1,n.method_id_ScreenSource_t.pid,0)]).then(function(b){k.logger.log(a.user_friendly_id()+".syncBarrier(): success.");var c;b=b.map(function(b){return a.param0(b)});
a.srcid_=b[0];a.deviceid_=b[1];a.type_=b[2];a.name_=b[3];c=b[4];a.hwnd_=b[5];a.origin_=b[6];a.caption_=b[7];a.pid_=b[8];a.toJSImageData(c);a.remoteInvoke(!1,n.method_id_ScreenSource_t.bounds,0).then(function(b){a.bounds_=a.param0(b);a.syncBarrierResolve(a)})["catch"](function(b){a.bounds_=void 0;b=a.logRemoteInvokeError(b,".prop.syncBarrier() getBounds failed.");a.syncBarrierReject(b)})})["catch"](function(b){b=a.logRemoteInvokeError(b,".prop.syncBarrier() failed.");a.syncBarrierReject(b)})})["catch"](function(b){b=
a.logRemoteInvokeError(b,".syncBarrier() failed.");a.syncBarrierReject(b)})})};b.prototype.getId=function(){return this.uniqueid_};b.prototype.getDeviceId=function(){return this.deviceid_};b.prototype.getType=function(){return 1};b.prototype.getPreview=function(a,b,c){k.logger.log(this.user_friendly_id()+".getPreview() called, width:"+a+" height:"+b+" asImage:"+c);return Promise.reject(null)};b.prototype.getPreviewAsync=function(a,b,c){k.logger.log(this.user_friendly_id()+".getPreviewAsync() called, width:"+
a+" height:"+b);return!0===c?(a=h(this.imagedata_,D.Width,D.Height),Promise.resolve({data:a.src.replace(/^data:image\/(png|jpg);base64,/,"")})):Promise.resolve(this.imagedata_)};b.prototype.getPreviewImage=function(a,b,c){k.logger.log(this.user_friendly_id()+".getPreviewImage() called, width:"+b+" height:"+c);return Promise.resolve(d(this.imagedata_,a,b,c))};b.prototype.getDescription=function(){return this.name_};b.prototype.getIcon=function(a,b){return Promise.resolve(this.imagedata_)};b.prototype.getBounds=
function(){return this.bounds_||{x:0,y:0,width:0,height:0}};b.nextId_=B.MonitorsAndApps;return b}(q.ProxyObject);a.ScreenSource=y},691:function(b,a,c){Object.defineProperty(a,"__esModule",{value:!0});a.ScreenShareUtil=a.Bitmap=a.BitmapInfoHeader=a.BitmapFileHeader=a.setActiveRespData=a.setActiveReqData=a.getSourcesReqData=a.sshare_state=a.sshare_cmd=void 0;var e=c(946),l=c(973),h=c(851),d;(function(a){a[a.Unknown=0]="Unknown";a[a.Cap=1]="Cap";a[a.GetSources=2]="GetSources";a[a.SetActive=3]="SetActive";
a[a.TopologyChanged=4]="TopologyChanged"})(d=a.sshare_cmd||(a.sshare_cmd={}));var w;(function(a){a[a.Unknown=0]="Unknown";a[a.Initialized=1]="Initialized";a[a.Error=2]="Error"})(w=a.sshare_state||(a.sshare_state={}));b=function(){return function(a){this.origin=a}}();a.getSourcesReqData=b;b=function(){return function(a,b,c,d,e,h,k){this.srcid=a;this.hwnd=b;this.origin=c;this.pid=d;this.border=e;this.cursor=h;this.activate=k}}();a.setActiveReqData=b;var q=function(){return function(a,b,c){this.srcid=
a;this.origin=b;this.bufferid=c}}();a.setActiveRespData=q;var n=function(){function a(b,c,d,e,g){this.id_=b;this.resolve_=c;this.reject_=d;this.cmd_=e;this.data_=g;this.sent_=!1;this.timeoutId=void 0}a.prototype.user_friendly_id=function(){return this.constructor.name+"["+this.id_+"]"};a.prototype.cmdString=function(){return this.cmd_==d.Cap?"Cap":this.cmd_==d.GetSources?"GetSources":this.cmd_==d.SetActive?"SetActive":"Unknown"};return a}(),k=function(){return function(){}}();a.BitmapFileHeader=k;
var p=function(){return function(){}}();a.BitmapInfoHeader=p;var z=function(){return function(){}}();a.Bitmap=z;b=function(){function a(){this.cmdque_=[]}a.prototype.reqid=function(){return a.nextId++};a.prototype.user_friendly_id=function(){return this.constructor.name+"[]"};a.prototype.stateString=function(){return a.state_==w.Initialized?"Initialized":a.state_==w.Error?"Error":"Unknown"};a.prototype.reset=function(){a.state_=w.Unknown;this.cmdque_=[]};a.prototype.dispatchCmds=function(){var b=
this;a.state_==w.Initialized?this.cmdque_.forEach(function(a){0==a.sent_&&(a.cmd_==d.GetSources?(b.WSSendGetSources(a.id_,a.data_),a.sent_=!0,a.timeoutId=setTimeout(b.abortCmd.bind(b,a.id_),5E3)):a.cmd_==d.SetActive?(b.WSSendSetActive(a.id_,a.data_),a.sent_=!0,a.timeoutId=setTimeout(b.abortCmd.bind(b,a.id_),5E3)):h.logger.log(a.user_friendly_id()+".dispatchCmds(): invalid cmd: "+a.cmdString()))}):a.state_==w.Error?(this.cmdque_.forEach(function(a){h.logger.log(a.user_friendly_id()+".dispatchCmds(): purging cmd: "+
a.cmdString());a.reject_()}),this.cmdque_=[]):h.logger.log(this.user_friendly_id()+".dispatchCmds(): invalid state: "+this.stateString())};a.prototype.abortCmd=function(a){var b=this.cmdque_.findIndex(function(b){return b.id_===a});-1!==b?(b=this.cmdque_.splice(b,1)[0],h.logger.log(b.user_friendly_id()+NaN+b.cmdString()+"]: aborted due to nonresponsive WS Agent!"),b.cmd_===d.SetActive&&b.data_.activate&&l.ScreenSharing.screenSharingInstance().stopAppshare(),b.reject_()):h.logger.log(this.user_friendly_id()+
".abortCmd(): Cmd not found!")};a.prototype.finalizeCmd=function(a,b,c){for(var d=0;d<this.cmdque_.length;d++){var e=this.cmdque_[d];if(void 0!=b&&b==e.id_&&1==e.sent_||void 0==b&&1==e.sent_){clearTimeout(e.timeoutId);h.logger.log(e.user_friendly_id()+".finalizeCmd(): purging cmd: "+e.cmdString());a?void 0!=c?e.resolve_(c):e.resolve_():e.reject_();this.cmdque_.splice(d,1);break}}};a.prototype.onInitialized=function(b){h.logger.log(this.user_friendly_id()+".onInitialized(): init: "+b+" state:"+this.stateString());
a.state_!=w.Initialized&&(a.state_=b?w.Initialized:w.Error);this.dispatchCmds()};a.prototype.onInitComplete=function(){h.logger.log(this.user_friendly_id()+".onInitComplete(): state:"+this.stateString());a.state_==w.Unknown&&(a.state_=w.Error,h.logger.log(this.user_friendly_id()+".onInitComplete(): items in queue:"+this.cmdque_.length),this.dispatchCmds())};a.prototype.onError=function(b){h.logger.log(this.user_friendly_id()+".onError(): state: "+this.stateString());a.state_==w.Unknown?(a.state_=
w.Error,this.dispatchCmds()):a.state_==w.Initialized&&this.finalizeCmd(!1,b)};a.prototype.ab2str=function(a){return String.fromCharCode.apply(null,new Uint8Array(a))};a.prototype.str2ab=function(a){for(var b=new ArrayBuffer(a.length),c=new Uint8Array(b),d=0,e=a.length;d<e;d++)c[d]=a.charCodeAt(d);return b};a.prototype.getBMP=function(a){var b=new DataView(a),c=new z;c.fileheader=new k;c.fileheader.bfType=b.getUint16(0,!0);c.fileheader.bfSize=b.getUint32(2,!0);c.fileheader.bfReserved1=b.getUint16(6,
!0);c.fileheader.bfReserved2=b.getUint16(8,!0);c.fileheader.bfOffBits=b.getUint32(10,!0);c.infoheader=new p;c.infoheader.biSize=b.getUint32(14,!0);c.infoheader.biWidth=b.getUint32(18,!0);c.infoheader.biHeight=b.getUint32(22,!0);c.infoheader.biPlanes=b.getUint16(26,!0);c.infoheader.biBitCount=b.getUint16(28,!0);c.infoheader.biCompression=b.getUint32(30,!0);c.infoheader.biSizeImage=b.getUint32(34,!0);c.infoheader.biXPelsPerMeter=b.getUint32(38,!0);c.infoheader.biYPelsPerMeter=b.getUint32(42,!0);c.infoheader.biClrUsed=
b.getUint32(46,!0);c.infoheader.biClrImportant=b.getUint32(50,!0);b=c.fileheader.bfOffBits;c.stride=4*Math.floor((c.infoheader.biBitCount*c.infoheader.biWidth+31)/32);c.pixels=new Uint8Array(a,b);return c};a.prototype.convertToImageData=function(a){var b=document.createElement("canvas").getContext("2d"),c=a.infoheader.biWidth,d=a.infoheader.biHeight,b=b.createImageData(c,d),e=b.data,g=a.pixels;a=a.stride;for(var h=0;h<d;++h)for(var k=0;k<c;++k){var l=4*(k+c*(d-h)),n=4*k+a*h;e[l]=g[n+2];e[l+1]=g[n+
1];e[l+2]=g[n];e[l+3]=255}return b};a.prototype.onGetSources=function(a,b){this.sources_=[];var c=this;b.sources.forEach(function(a){var b=a.image,d=atob(b.data),d=c.str2ab(d),d=new Uint8ClampedArray(d,0,d.byteLength),b=new ImageData(d,b.width,b.height),d=a.icon,e=atob(d.data),e=c.str2ab(e),e=new Uint8ClampedArray(e,0,e.byteLength),d=new ImageData(e,d.width,d.height);a=new l.ScreenSourceVda(a.srcid,a.devicdid,a.type,b,d,a.name,a.hwnd,a.origin,a.caption,a.pid);c.sources_.push(a)});this.finalizeCmd(!0,
a,this.sources_)};a.prototype.getSources=function(b){var c=this;return new Promise(function(e,h){if(a.state_!=w.Error){var k=new n(c.reqid(),e,h,d.GetSources,b);c.cmdque_.push(k)}else h();a.state_==w.Initialized&&c.dispatchCmds()})};a.prototype.onSetActive=function(a,b){var c=new q(b.srcid,b.origin,b.bufferid);this.finalizeCmd(!0,a,c)};a.prototype.setActive=function(b){var c=this;return new Promise(function(e,h){if(a.state_!=w.Error){var k=new n(c.reqid(),e,h,d.SetActive,b);c.cmdque_.push(k)}else h();
a.state_==w.Initialized&&c.dispatchCmds()})};a.prototype.setTopologyChangeCB=function(a){this.onwindowtopologychanged_=a};a.prototype.onToplogyChanged=function(){if(this.onwindowtopologychanged_)this.onwindowtopologychanged_()};a.prototype.WSSendGetSources=function(a,b){try{e.getRedirector().WSSendObject({v:"appsharing",hdr:{command:d.GetSources,id:a},data:{origin:b.origin}})}catch(c){h.logger.log(c)}};a.prototype.WSSendSetActive=function(a,b){try{e.getRedirector().WSSendObject({v:"appsharing",hdr:{command:d.SetActive,
id:a},data:{srcid:b.srcid,hwnd:b.hwnd,origin:b.origin,pid:b.pid,border:b.border,cursor:b.cursor,activate:b.activate}})}catch(c){h.logger.log(c)}};a.state_=w.Unknown;a.nextId=0;return a}();a.ScreenShareUtil=b},517:function(b,a){Object.defineProperty(a,"__esModule",{value:!0});a.Stats=a.StatsReport=void 0;var c=function(){function a(){this.items=[]}a.fromJSON=function(b){for(var c=new a,l=0;l<b.length;l++){var q=e.fromJSON(b[l]);c.items.push(q)}return c};a.toRTCStatsReport=function(a){return a};a.prototype.toJSON=
function(){return JSON.stringify(this.items)};a.prototype.result=function(){return this.items};return a}();a.StatsReport=c;var e=function(){function a(){this.names_=[];this.stat_=new Map;this.id="";this.timestamp=0;this.type=""}a.fromJSON=function(b){var c=new a;c.id=b.id||"";c.timestamp=b.timestamp||"";c.type=b.type||"";Object.keys(b).forEach(function(a){"id"!==a&&"timestamp"!==a&&"type"!==a&&(c.names_.push(a),c.stat_.set(a,b[a]))});return c};a.prototype.toJSON=function(){return JSON.stringify({id:this.id,
timestamp:this.timestamp,type:this.type,stat:this.stat_})};a.prototype.names=function(){return this.names_};a.prototype.stat=function(a){return this.stat_.get(a)};return a}();a.Stats=e},704:function(b,a,c){var e=this&&this.__extends||function(){var a=function(b,c){a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return a(b,c)};return function(b,c){function d(){this.constructor=b}a(b,c);b.prototype=
null===c?Object.create(c):(d.prototype=c.prototype,new d)}}();Object.defineProperty(a,"__esModule",{value:!0});a.StreamResolution=a.RemoteCallConstraints=void 0;var l=c(550),h=c(658),d=c(851);b=function(){return function(){}}();a.RemoteCallConstraints=b;b=function(a){function b(){var c=a.call(this,null,l.class_id_t.StreamResolution,0,h.ProxyMode.Local)||this;c.lastSentConstraints_=null;return c}e(b,a);Object.defineProperty(b.prototype,"onupdate",{get:function(){return this.onupdate_},set:function(a){var c=
this;this.onupdate_=a;this.waitUntilConnected(this.user_friendly_id()+".onupdate").then(function(){var a=c.registerCallbacks(!1,c.isNullCallback(c.onupdate_),l.method_id_StreamResolution_t.onupdate);a.then(function(a){a=a.params;var e=a[0];a.slice(1);d.logger.log(c.user_friendly_id()+".onupdate",JSON.stringify(e));c.lastSentConstraints_&&JSON.stringify(c.lastSentConstraints_)==JSON.stringify(e)?d.logger.log(c.user_friendly_id()+".onupdate constraints unchanged, ignoring"):c.onupdate_&&(b.isValidRemoteConstraints(e)?
(c.lastSentConstraints_=e,c.onupdate_(c.toICallConstraints(c.lastSentConstraints_))):d.logger.log(c.user_friendly_id()+".onupdate invalid RemoteCallConstraints"))});return c.remoteInvoke(!0,l.method_id_StreamResolution_t.onupdate,a.success)})["catch"](function(){return d.logger.log(c.user_friendly_id()+".onupdate, could not set listener")})},enumerable:!1,configurable:!0});b.prototype.toICallConstraints=function(a){var b={maxParticipantResolutions:null};if(a.max_participant_resolutions_dynamic){b.maxParticipantResolutions=
{};for(var c=0,e=a.max_participant_resolutions_dynamic;c<e.length;c++){var g=e[c];b.maxParticipantResolutions[g.count]=g.resolution}}else a.max_participant_resolutions_static&&(b.maxParticipantResolutions=a.max_participant_resolutions_static);b.maxIncomingStreams=a.max_incoming_streams;b.maxOutgoingResolution=a.max_outgoing_resolution;b.maxSimulcastLayers=a.max_simulcast_layers;d.logger.log(this.user_friendly_id()+".toICallConstraints: "+JSON.stringify(b));return b};b.isValidRemoteConstraints=function(a){return null!=
a&&(null!=a.max_participant_resolutions_dynamic||null!=a.max_participant_resolutions_static)&&null!=a.max_incoming_streams&&null!=a.max_outgoing_resolution&&null!=a.max_simulcast_layers};b.prototype.getCallConstraints=function(){var a=this;return new Promise(function(c,e){a.waitUntilConnected(a.user_friendly_id()+".getCallConstraints").then(function(){return a.remoteInvoke(!1,l.method_id_StreamResolution_t.getCallConstraints)}).then(function(h){h=a.param0(h);d.logger.log(a.user_friendly_id()+".getCallConstraints",
JSON.stringify(h));b.isValidRemoteConstraints(h)?(a.onupdate_&&(a.lastSentConstraints_=h),c(a.toICallConstraints(h))):(d.logger.log(a.user_friendly_id()+".getCallConstraints invalid RemoteCallConstraints"),e())})["catch"](function(){d.logger.log(a.user_friendly_id()+".getCallConstraints promise rejected");e()})})};b.getDefaultConstraints=function(){var a={maxParticipantResolutions:{1:720,2:720,3:360,more:360},maxIncomingStreams:4,maxOutgoingResolution:720,maxSimulcastLayers:0};d.logger.log("StreamResolution.getDefaultConstraints: "+
JSON.stringify(a));return a};b.prototype.updateStreamResolution=function(){var a=this;this.getCallConstraints().then(function(b){return a.onupdate&&a.onupdate(b)})["catch"](function(){return d.logger.log("Failed to get stream resolution information!")})};return b}(h.ProxyObject);a.StreamResolution=b},394:function(b,a,c){Object.defineProperty(a,"__esModule",{value:!0});a.Telemetry=a.tel_key_CPUTotalmemory=a.tel_key_CPUGpuinfo=a.tel_key_CPUMachineid=a.tel_key_CPUProcessors=a.tel_key_CPUCores=a.tel_key_CPUModel=
a.tel_key_CPUSpeed=a.tel_key_OSEdition=a.tel_key_OSDistro=a.tel_key_OSArchitecture=a.tel_key_OSVersion=a.tel_key_OSFamily=a.tel_key_VerHdxRtcEngine=a.tel_key_VerTypeScript=a.tel_key_VerEndpoint=a.tel_key_VerVda=a.tel_key_VerReceiver=a.tel_key_VerWebrtcCodecs=a.tel_key_VerWebrpc=a.tel_key_PerfCallType=a.tel_key_PerfCallState=a.tel_key_PerfCallDirection=a.tel_key_SpeakerDeviceUsed=a.tel_key_VideoDeviceUsed=a.tel_key_AudioDeviceUsed=a.tel_key_CallEstOutgoing=a.tel_key_CallEstIncoming=a.tel_key_ScreensharingCallDuration=
a.tel_key_VideoCallDuration=a.tel_key_AudioCallDuration=a.tel_key_ConferenceCallDuration=a.tel_cmd=a.tel_CallType=a.tel_CallDirection=a.tel_CallState=void 0;var e=c(946),l=c(851);(function(a){a[a.unknown=0]="unknown";a[a.active=1]="active";a[a.idle=2]="idle"})(a.tel_CallState||(a.tel_CallState={}));(function(a){a[a.unknown=0]="unknown";a[a.incoming=1]="incoming";a[a.outgoing=2]="outgoing"})(a.tel_CallDirection||(a.tel_CallDirection={}));(function(a){a[a.unknown=0]="unknown";a[a.audio=1]="audio";a[a.video=
2]="video";a[a.multi=3]="multi";a[a.dshare=4]="dshare"})(a.tel_CallType||(a.tel_CallType={}));var h;(function(a){a[a.Unknown=0]="Unknown";a[a.Cap=1]="Cap";a[a.Init=2]="Init";a[a.Data=3]="Data"})(h=a.tel_cmd||(a.tel_cmd={}));a.tel_key_ConferenceCallDuration="ConferenceCallDuration";a.tel_key_AudioCallDuration="AudioCallDuration";a.tel_key_VideoCallDuration="VideoCallDuration";a.tel_key_ScreensharingCallDuration="ScreensharingCallDuration";a.tel_key_CallEstIncoming="CallEstIncoming";a.tel_key_CallEstOutgoing=
"CallEstOutgoing";a.tel_key_AudioDeviceUsed="AudioDeviceUsed";a.tel_key_VideoDeviceUsed="VideoDeviceUsed";a.tel_key_SpeakerDeviceUsed="SpeakerDeviceUsed";a.tel_key_PerfCallDirection="PerfCallDirection";a.tel_key_PerfCallState="PerfCallState";a.tel_key_PerfCallType="PerfCallType";a.tel_key_VerWebrpc="VerWebrpc";a.tel_key_VerWebrtcCodecs="VerWebrtcCodecs";a.tel_key_VerReceiver="VerReceiver";a.tel_key_VerVda="VerVda";a.tel_key_VerEndpoint="VerEndpoint";a.tel_key_VerTypeScript="VerTypeScript";a.tel_key_VerHdxRtcEngine=
"VerHdxRtcEngine";a.tel_key_OSFamily="OSFamily";a.tel_key_OSVersion="OSVersion";a.tel_key_OSArchitecture="OSArchitecture";a.tel_key_OSDistro="OSDistro";a.tel_key_OSEdition="OSEdition";a.tel_key_CPUSpeed="CPUSpeed";a.tel_key_CPUModel="CPUModel";a.tel_key_CPUCores="CPUCores";a.tel_key_CPUProcessors="CPUProcessors";a.tel_key_CPUMachineid="CPUMachineid";a.tel_key_CPUGpuinfo="CPUGpuinfo";a.tel_key_CPUTotalmemory="CPUTotalmemory";var d=function(){function a(b,c,d,e){this.cmd=b;this.key=c;this.value=d;this.flags=
e}a.prototype.SendTelemetryData=function(a){a.SendTelemetryData(this.cmd,this.key,this.value,this.flags)};return a}();b=function(){function a(){this.id=0;this.deferredData=[]}a.prototype.reset=function(){this.id=0;this.deferredData=[]};a.prototype.onInitialized=function(a){for(this.id=a;this.deferredData&&0<this.deferredData.length;)this.deferredData.shift().SendTelemetryData(this)};a.prototype.SendTelemetryInit=function(){0<this.id&&this.reset();try{e.getRedirector().WSSendObject({v:"telemetry",
hdr:{command:h.Init,id:0},init:{domain:"HDXMM Teams",subdomain:"Teams",feature:"msteams",version:"1.1.1.1"}})}catch(a){l.logger.log(a)}};a.prototype.SendTelemetryData=function(a,b,c,w){if(a!=h.Data)l.logger.log("invalid telemetry command!");else if(0==this.id)this.deferredData.push(new d(a,b,c,w));else try{e.getRedirector().WSSendObject({v:"telemetry",hdr:{command:a,id:this.id},data:{key:b,value:c,flags:w}})}catch(p){l.logger.log(p)}};return a}();a.Telemetry=b},259:function(b,a,c){Object.defineProperty(a,
"__esModule",{value:!0});a.Util=void 0;var e=c(851);b=function(){function a(){}a.stringifyArray=function(a){for(var b="[",c=0;c<a.length;++c)0!=c&&(b+=","),b+=this.stringify(a[c]);return b+"]"};a.stringifyObject=function(a){var b="{",c=!0,e;for(e in a)c?c=!1:b+=",",b=b+'"'+e+'":',b=a[e]instanceof Array?b+this.stringifyArray(a[e]):"object"==typeof a[e]?b+this.stringifyObject(a[e]):b+JSON.stringify(a[e]);return b+"}"};a.stringify=function(a){return"object"==typeof a?"[object Array]"==Object.prototype.toString.call(a)?
this.stringifyArray(a):this.stringifyObject(a):JSON.stringify(a)};a.GetObjectPropertyDescriptor=function(a,b){for(var c=void 0;a!=Object.prototype;){c=Object.getOwnPropertyDescriptor(a,b);if(void 0!==c)break;a=a.__proto__}return c};a.sendEvent=function(a,b){try{var c=document.createEvent("Event");c.initEvent(b,!0,!0);a.dispatchEvent(c)}catch(l){e.logger.log('sendEvent(): exception dispatching "'+b+'" event: '+l.message)}};a.hasValue=function(a){var b=!1;null!==a&&void 0!==a&&(b=!0);return b};return a}();
a.Util=b},307:function(b,a,c){var e=this&&this.__awaiter||function(a,b,c,d){function e(a){return a instanceof c?a:new c(function(b){b(a)})}return new (c||(c=Promise))(function(c,g){function h(a){try{l(d.next(a))}catch(b){g(b)}}function k(a){try{l(d["throw"](a))}catch(b){g(b)}}function l(a){a.done?c(a.value):e(a.value).then(h,k)}l((d=d.apply(a,b||[])).next())})},l=this&&this.__generator||function(a,b){function c(a){return function(b){return d([a,b])}}function d(c){if(g)throw new TypeError("Generator is already executing.");
for(;e;)try{if(g=1,h&&(k=c[0]&2?h["return"]:c[0]?h["throw"]||((k=h["return"])&&k.call(h),0):h.next)&&!(k=k.call(h,c[1])).done)return k;if(h=0,k)c=[c[0]&2,k.value];switch(c[0]){case 0:case 1:k=c;break;case 4:return e.label++,{value:c[1],done:!1};case 5:e.label++;h=c[1];c=[0];continue;case 7:c=e.ops.pop();e.trys.pop();continue;default:if(!(k=e.trys,k=0<k.length&&k[k.length-1])&&(6===c[0]||2===c[0])){e=0;continue}if(3===c[0]&&(!k||c[1]>k[0]&&c[1]<k[3]))e.label=c[1];else if(6===c[0]&&e.label<k[1])e.label=
k[1],k=c;else if(k&&e.label<k[2])e.label=k[2],e.ops.push(c);else{k[2]&&e.ops.pop();e.trys.pop();continue}}c=b.call(a,e)}catch(l){c=[6,l],h=0}finally{g=k=0}if(c[0]&5)throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}var e={label:0,sent:function(){if(k[0]&1)throw k[1];return k[1]},trys:[],ops:[]},g,h,k,l;$jscomp.initSymbol();$jscomp.initSymbol();$jscomp.initSymbolIterator();return l={next:c(0),"throw":c(1),"return":c(2)},"function"===typeof Symbol&&(l[Symbol.iterator]=function(){return this}),l},h=
c(360),d=c(144);c(679);var p=c(945),q=c(368),n=c(851).logger,k=c(650),v=c(973),z=c(247).getGC,g=c(946),B=c(613).E911Service;b=c(550);var t=b.Features,m=b.FEATURE_vda_delete_viewport,D=c(704).StreamResolution,y=c(239).E;(function(a,b){a.CitrixWebRTC=b()})("undefined"!==typeof self?self:this,function(){function a(b,c){n.log("VDI Shim createMediaStreamInternal");G();var f=new d.RemoteStream(null,0,0,b),e=new Promise(function(a,b){f.syncBarrier().then(function(b){n.log("stream.syncBarrier(): success.");
a(b)})["catch"](function(a){n.log("stream.syncBarrier(): failed with error: "+JSON.stringify(a));f.release();b()})});return c?e:f}function b(a){null==Y&&(Y=new q.Frames(!O.isFeatureSupported(t.FEATURE_public_multi_window)));a(Y)}function c(a,d){b(function(b){var c=b.findFrame(a);void 0==c&&(c=b.newFrame(a));d(c)})}function M(a,c){b(function(b){b=b.findFrame(a);null!=b&&c(b)})}function F(a){g.getRedirector().SendTelemetryData_Speaker(a)}function J(a,b){if(S)try{"vdiE911InfoChanged"===a?a="vdiE911DataChanged":
"vdiCallConstraintsChanged"===a&&(a="vdiStreamConstraintsChanged");var c=Object.assign({event:a},b);n.log("Dispatching VM event:"+JSON.stringify(c));S(c)}catch(d){n.log("Exception onVMEvent(), eventName:"+a+" message:"+d.message)}}function G(){var a=window.getCitrixWebrtcRedir;void 0!==a?a().then(function(a){n.log("sucesss on connect, getCitrixWebrtcRedir reg value:"+a);"1"!==a||O||(n.log("supported client"),P(W))})["catch"](function(){n.log("Failure to Read Webrtc redir Reg Key");f()}):(n.log("window.getCitrixWebrtcRedir() method is not available yet"),
f())}function L(a){n.log("VDI Event: vdiClientDisconnected");ba();if(!0===a&&!1===aa){n.log("VDI Event: vdiClientDisconnected with failure reported");aa=!0;try{S({event:"vdiClientDisconnected",reason:"failure",msg:"Websocket Connection Failure"})}catch(b){n.log("onVMEvent(): exception: "+b.message)}}else{aa=!1;try{S({event:"vdiClientDisconnected",reason:"endpointDisconnected"})}catch(b){n.log("onVMEvent(): exception: "+b.message)}}}function P(a){n.log("initRemoteSession with vendor:"+a);O||(O=new k.RemoteSession("CitrixWebRTCSDK",
a))}function C(){n.log("VDI Event: onVdiClientDisconnectedTimer");P(W)}function R(){var a=this;n.log("VDI Shim onVdiClientConnected...");O?O.getSessionInfo().then(function(c){return e(a,void 0,void 0,function(){return l(this,function(a){switch(a.label){case 0:return n.log("VDI Shim onVdiClientConnected, client endpoint info:"+JSON.stringify(c)),H&&H.isValid()||(H=new d.RemoteDevices),I&&I.isValid()||(I=new d.NavigatorUserMedia),b(function(a){a.reconnect()}),J("vdiClientConnected",{version:c,endpointId:c.endpointId}),
[4,I.getCapabilities().then(function(a){n.log("VDI Shim onVdiClientConnected, caps = "+a)})["catch"](function(){n.log("VDI Shim onVdiClientConnected, could not get capabilities")})];case 1:return a.sent(),T||(T=new B,T.onupdate=function(a){J("vdiE911InfoChanged",a)},T.updateE911Info()),U||(J("vdiCallConstraintsChanged",D.getDefaultConstraints()),null!==O&&k.RemoteSession.isFeatureCallConstraintsSupported()&&(U=new D,U.onupdate=function(a){J("vdiCallConstraintsChanged",a)},U.updateStreamResolution())),
navigator.mediaDevices.dispatchEvent(new CustomEvent("devicechange")),[2]}})})})["catch"](function(){n.log("VDI Shim onVdiClientConnected, getSessionInfo failure! Session is not fully connected yet...")}):n.log("VDI Shim onVdiClientConnected, remoteSession does not exist")}function K(a){if("1"===a)n.log("Supported client"),g.getRedirector().pingConnectionBegin(!0);else if("0"===a){n.log("VDI Event: Unsupported client reported");try{S({event:"vdiClientDisconnected",reason:"endpointUnsupported",msg:"Unsupported endpoint connected"})}catch(b){n.log("onVMEvent(): exception: "+
b.message)}}else n.log("Citrix Webrtc Redir Reg Key value is incorrect")}function f(){!1===Z&&(n.log("starting MS Reg retry..."),Z=!0,X(10))}function X(a){if(0>=a){Z=!1;n.log("VDI Event: Reg Key not Updated after timer reported, Fallback");try{S({event:"vdiClientDisconnected",reason:"failure",msg:"Citrix Webrtc Redir Reg Key not Present"})}catch(b){n.log("onVMEvent(): exception: "+b.message)}}else{var c=window.getCitrixWebrtcRedir;void 0!==c?c().then(function(b){n.log("CitrixMSTeamsRedir reg value:"+
b);"0"===b||"1"===b?(K(b),Z=!1):(n.log("MS Teams Redir Reg key not updated - Start timer"),setTimeout(function(){n.log("Timer waiting for registry to be updated count :"+a);X(--a)},1E3))})["catch"](function(){n.log("Failure to Read MS Teams redir Reg Key - Start timer");setTimeout(function(){n.log("Timer waiting for registry to be updated count :"+a);X(--a)},1E3)}):(n.log("window.getCitrixWebrtcRedir() method is not available yet"),setTimeout(function(){n.log("Timer waiting for registry to be updated count :"+
a);X(--a)},1E3))}}function ba(){n.log("VDI : cleanup");g.getRedirector().clearReqs();d.NavigatorUserMedia.resetCapabilities();Y=H=I=null;N&&N.release();O&&O.release();O=null;v.ScreenSharing.destroyInstance();T&&(T.release(),T=null);U&&(U.release(),U=null);z().reset();n.log("VDI : cleanup done")}function ca(){return v.ScreenSharing.screenSharingInstance(function(){if(S)try{S({event:"vdiScreenTopologyChanged"})}catch(a){n.log("onVMEvent('vdiScreenTopologyChanged'): exception: "+a.message)}})}function E(a){if(!V)throw n.log("VDI Shim "+
a+": throwing exception: not initialized!!"),new DOMException("UCSDK is not initialized!!!");}var I=null,da=d.NavigatorUserMedia.getCapabilities,H=null,Y=null,N=null,S=null,T=null,U=null,aa=!1,O=void 0,Z=!1,V=!1,W=void 0;return{Features:t,CitrixPeerConnection:h.PeerConnection,getUserMedia:function(a,b,c){E("getUserMedia");G();n.log("VDI Shim getUserMedia");null!==I&&I.isValid()||(I=new d.NavigatorUserMedia);var f=d.RemoteMediaStreamConstraints.isConstraintsAudioDeviceIdEmpty(a),e=d.RemoteMediaStreamConstraints.isConstraintsVideoSourceIdEmpty(a);
return f||e?new Promise(function(d,f){H.enumerateDevices().then(function(d){return I.webkitGetUserMedia(a,b,c)}).then(function(a){n.log("webkitGetUserMedia for default was resolved");d(a)})["catch"](function(a){n.log("getUserMedia() for default failed with error:"+JSON.stringify(a));f()})}):I.webkitGetUserMedia(a,b,c)},getDisplayMedia:function(a){E("getDisplayMedia");G();n.log("VDI Shim getDisplayMedia");null!==H&&H.isValid()||(H=new d.RemoteDevices);return H.getDisplayMedia(a)},enumerateDevices:function(){E("enumerateDevices");
G();n.log("VDI Shim enumerateDevices");null!==H&&H.isValid()||(H=new d.RemoteDevices);return H.enumerateDevices()},onWindowClose:function(a,c,d){E("onWindowClose");n.log("VDI Shim onWindowClose: (handle: "+a+")");g.getRedirector().getVDAFeatureValue(m)&&b(function(b){b.disposeFrame(a)})},setClientAreaOffset:function(a,b,d){E("setClientAreaOffset");n.log("VDI setClientAreaOffset with xOffset = "+a+", yOffset = "+b+", windowHandle = "+d);G();c(d,function(c){c.setClientAreaOffset(a,b)})},mapVideoElement:function(a,
b){E("mapVideoElement");n.log("VDI New Video Element Created, Creating Mapping to Thin Client DOM");G();c(b,function(b){b.newVideoElement(a)})},mapAudioElement:function(a){E("mapAudioElement");n.log("VDI New Audio Element Created, Creating Mapping to VDA");if(void 0!==a.remoteAudioElement)n.log("Audio element is already configured!");else{G();delete a.remoteAudioElement;Object.defineProperty(a,"remoteAudioElement",{writable:!0,configurable:!0,value:null});a.remoteAudioElement=new p.AudioElement;delete a.sinkId;
Object.defineProperty(a,"sinkId",{configurable:!0,get:function(){return a.remoteAudioElement?a.remoteAudioElement.sinkId:void 0},set:function(b){n.log("VDI Shim set audio element SinkId value = "+b);a.setSinkId(b).then(function(){n.log("VDI Shim set audio element SinkId success")})["catch"](function(){n.log("VDI Shim set audio element SinkId failure")})}});var b=a.remoteAudioElement.play;a.play=function(){n.log("VDI Shim remote audio play");return b.apply(a.remoteAudioElement,arguments)};var c=a.remoteAudioElement.pause;
a.pause=function(){n.log("VDI Shim remote audio pause");return c.apply(a.remoteAudioElement,arguments)};a.setSinkId=function(b){n.log("VDI Shim set audio element SinkId value = "+b);var c=a.remoteAudioElement.setSinkId(b),f;d.enumeratedDevices.forEach(function(a){b===a.deviceId&&(f=a.label)});F(f);return c};delete a.srcObject;Object.defineProperty(a,"srcObject",{configurable:!0,get:function(){return a.remoteAudioElement?a.remoteAudioElement.srcObject:void 0},set:function(b){n.log("VDI Shim set audio element srcObject "+
JSON.stringify(b));a.remoteAudioElement.srcObject=b}})}},disposeVideoElement:function(a,b){E("disposeVideoElement");n.log("VDI Shim disposeVideoElement: ");M(b,function(b){b.disposeVideoElement(a)})},disposeAudioElement:function(a,b,c){E("disposeAudioElement");n.log("VDI Shim disposeAudioElement: ");a&&(b=a.remoteAudioElement)&&(b.dispose(),a.remoteAudioElement=void 0)},setVMEventCallback:function(a){var b=this;S=a;g.getRedirector().isConnected()&&O.getSessionInfo().then(function(a){return e(b,void 0,
void 0,function(){return l(this,function(b){n.log("VDI Shim onVdiClientConnected, client endpoint info:"+JSON.stringify(a));J("vdiClientConnected",{version:a,endpointId:a.endpointId});return[2]})})});n.log("VDI Event Callback Set")},playNotifyAudio:function(a,b){E("playNotifyAudio");n.log("VDI Shim Audio playNotifyAudio audioId:"+a+" src:"+b);N&&N.playNotifyAudio(a,b)},stopNotifyAudio:function(a,b){E("stopNotifyAudio");n.log("VDI Shim Audio pauseNotifyAudio audioId:"+a+" src:"+b);N&&N.pauseNotifyAudio(a,
b)},setSinkId:function(a,b){E("setSinkId");n.log("VDI Shim Audio setSinkId audioId:"+a+" sinkId:"+b);N&&N.setSinkId(a,b)},getLoop:function(a){E("getLoop");var b;N&&(b=N.getLoop(a));n.log("VDI Shim Audio getLoop audioId:"+a+" loop: "+b);return b},setLoop:function(a,b){E("setLoop");n.log("VDI Shim Audio setLoop audioId:"+a+" bool:"+b);N&&N.setLoop(a,b)},addClipRect:function(a,b){E("addClipRect");n.log("VDI Adding Occlusion "+JSON.stringify(a));c(b,function(b){b.addOcclusion(a)})},removeClipRect:function(a,
b){E("removeClipRect");n.log("VDI Removing Occlusion "+JSON.stringify(a));c(b,function(b){b.removeOcclusion(a)})},initLog:function(a,b){n.setMSLogger(a,b);n.log("VDI init logger")},isFeatureOn:function(a){E("isFeatureOn");return O?O.isFeatureSupported(a):!1},onConnectionChange:function(a){E("onConnectionChange");n.log("VDI : onConnectionChange to "+a);!1===a?n.log("Disconnecting from the VDA"):(n.log("Connecting to the VDA"),a=window.getCitrixWebrtcRedir,void 0!==a?a().then(function(a){n.log("Sucesss on connect, CitrixRedir reg value:"+
a);"0"===a||"1"===a?K(a):(n.log("MS Teams Redir Reg key not updated yet"),f())})["catch"](function(){n.log("Failure to Read MS Teams redir Reg Key");f()}):(n.log("window.getCitrixWebrtcRedir() method is not available yet"),f()))},getScreensAsync:function(){E("getScreensAsync");n.log("VDI Shim getScreensAsync");G();var a=ca();return a.getScreensAsync.apply(a,arguments)},getWindowsAsync:function(){E("getWindowsAsync");n.log("VDI Shim getWindowsAsync");G();var a=ca();return a.getWindowsAsync.apply(a,
arguments)},setScreenSharePanelId:function(a){E("setScreenSharePanelId");n.log("VDI: setScreenSharePanelId set to "+JSON.stringify(a));G();null!==H&&H.isValid()||(H=new d.RemoteDevices);H.panelid=a},setCodecCapabilities:function(a){E("setCodecCapabilities");G();n.log("VDI Shim setCodecCapabilities");null!==I&&I.isValid()||(I=new d.NavigatorUserMedia);return I.setCodecCapabilities(a)},getE911Data:function(){E("getE911Data");return T?T.getE911Info():null},createMediaStream:function(b){E("createMediaStream");
n.log("VDI Shim createMediaStream");return a(b,!1)},createMediaStreamAsync:function(b){E("createMediaStreamAsync");n.log("VDI Shim createMediaStreamAsync");return a(b,!0)},disposeMediaStream:function(a){E("disposeMediaStream");n.log("VDI Shim disposeMediaStream: ");for(var b=0;b<a.length;b++){var c=a[b];c&&c.dispose()}},getCapabilities:function(a){E("getCapabilities");G();n.log("VDI Shim getCapabilities");null!==I&&I.isValid()||(I=new d.NavigatorUserMedia,da=d.NavigatorUserMedia.getCapabilities);
return da.apply(I,arguments)},initUCSDK:function(a){n.log("VDI Shim initUCSDK vendor:"+a);var b=!0;void 0==a||null==a||"string"!==typeof a||0==a.length?b=!1:0==a.split(" ").join("").length&&(b=!1);if(!b)throw n.log("VDI Shim initUCSDK: throwing exception: vendor info cannot be empty!!!"),new DOMException("vendor info cannot be empty, please pass vendor info string!!!");V||(W=a,I=new d.NavigatorUserMedia,H=new d.RemoteDevices,N=new y,H=new d.RemoteDevices,P(W),window.onVdiClientDisconnected=L,window.onVdiClientDisconnectedTimer=
C,window.onVdiClientConnected=R,V=!0)},deinitUCSDK:function(){n.log("VDI Shim deinitUCSDK");V&&(g.getRedirector().terminateOptimization(),ba(),window.onVdiClientDisconnected=void 0,window.onVdiClientDisconnectedTimer=void 0,W=window.onVdiClientConnected=void 0,V=!1)}}})},679:function(b,a,c){var e=this&&this.__extends||function(){var a=function(b,c){a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};
return a(b,c)};return function(b,c){function d(){this.constructor=b}a(b,c);b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}();Object.defineProperty(a,"__esModule",{value:!0});a.VideoElement=a.VideoRect=void 0;var l=c(658),h=c(550),d=c(851),p=c(946),q=c(550),n=function(){return function(a,b){this.x=Math.round(a.x)*b.devicePixelRatio;this.y=Math.round(a.y)*b.devicePixelRatio;this.width=Math.round(a.width)*b.devicePixelRatio;this.height=Math.round(a.height)*b.devicePixelRatio}}();
a.VideoRect=n;var k;(function(a){a[a.pixels=0]="pixels";a[a.percent=1]="percent"})(k||(k={}));var v=function(){function a(b){this.value=parseInt(b);this.units=this.detectUnits(b)}a.prototype.detectUnits=function(a){return-1===a.toLowerCase().indexOf("px")?k.pixels:k.percent};return a}(),z;(function(a){a[a.fill=0]="fill";a[a.contain=1]="contain";a[a.cover=2]="cover"})(z||(z={}));var g=function(){return function(a,b){this.x=a;this.y=b}}(),B=function(){function a(b,c,d){this.fit=this.convertFit(b);this.position=
new g(c,d)}a.prototype.convertFit=function(a){return"fill"==a?z.fill:"contain"==a?z.contain:"cover"==a?z.cover:z.fill};return a}(),t;(function(a){a[a.NotReady=0]="NotReady";a[a.Ready=1]="Ready"})(t||(t={}));b=function(a){function b(c,e){var g=a.call(this,null,h.class_id_t.VideoElement,0,l.ProxyMode.Local)||this;g.srcObject_=null;g.sinkId_="";g.videoWidth=0;g.videoHeight=0;g.isLoaded=!1;g.connectionState="disconnected";g.styleObserver=null;g.readyState_=t.NotReady;g.deferredVideoActions=[];g.pendingRelease_=
!1;g.activeConnectionEvent_=null;g.connectionEventQueue_=[];g.window_=e;g.elementId=c;d.logger.log("VideoElement.constructor (elementid: "+c+")");return g}e(b,a);b.prototype.dispose=function(){var a=this;d.logger.log("VideoElement.dispose (elementId: "+this.elementId+" oid: "+this.object_id()+")");this.pendingRelease_=!0;this.srcObject=this.ontimeupdate=this.onloadedmetadata=null;this.waitUntilReady("VideoElement.dispose").then(function(){})["catch"](function(){a.pendingRelease_=!1;a.setState("disconnected");
a.onconnectionstatechange=null;a.release()});this.onReady()};b.prototype.setState=function(a){this.connectionState=a;if(this.onconnectionstatechange_)this.onconnectionstatechange_()};Object.defineProperty(b.prototype,"Id",{get:function(){return this.elementId},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"sinkId",{get:function(){return this.sinkId_},set:function(a){var b=this;d.logger.log("VideoElement.sinkId: (id="+a+")");this.waitUntilConnected("VideoElement.sinkId").then(function(){return void 0!=
a?b.remoteInvoke(!0,h.method_id_VideoElement_t.sinkId,a):new Promise(function(a){return a(void 0)})}).then(function(){d.logger.log("videoElement: setting state to ready. (oid: "+b.object_id()+")");b.sinkId_=a;b.readyState_=t.Ready;b.onReady()})["catch"](function(a){b.logRemoteInvokeError(a,".set_sinkId() failed!")})},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"srcObject",{get:function(){return this.srcObject_},set:function(a){d.logger.log(this.user_friendly_id()+".srcObject: set srcObject... this.srcObject:"+
this.srcObject+" obj:"+a);if(this.srcObject_!==a){var b=p.getRedirector().getFeatureValue(q.FEATURE_ms_teams_1911);null!==this.srcObject_&&(null===a&&b&&this.disconnect(),b||this.disconnect(),this.isLoaded=!1);this.srcObject_=a;null!==this.srcObject_&&this.connectTo(this.srcObject_)}},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"onconnectionstatechange",{get:function(){return this.onconnectionstatechange_},set:function(a){d.logger.log(this.user_friendly_id()+".set_onconnectionstatechange() called.");
this.onconnectionstatechange_=a},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"onloadedmetadata",{set:function(a){d.logger.log(this.user_friendly_id()+".set_onloadedmetadata() called.");this.onloadedmetadata_=a},enumerable:!1,configurable:!0});b.prototype.setupOnVideoFrameChanged=function(){var a=this,b=this.registerCallbacks(!1,!1,h.method_id_VideoElement_t.onvideoframechanged);b.then(function(b){d.logger.log(a.user_friendly_id()+".onvideoframechanged",b.params);a.videoWidth=
b.params[0]||0;a.videoHeight=b.params[1]||0;a.isLoaded||(a.isLoaded=!0,a.onloadedmetadata_&&a.onloadedmetadata_())});this.remoteInvoke(!0,h.method_id_VideoElement_t.onvideoframechanged,b.success)};b.prototype.processConnectionEvent=function(){var a=this;if(0!==this.connectionEventQueue_.length&&!this.activeConnectionEvent_){var b=this.connectionEventQueue_.pop();"connectTo"==b.operation?this.activeConnectionEvent_=this.connectToAsync(b.param):"disconnect"==b.operation&&(this.activeConnectionEvent_=
this.disconnectAsync());this.activeConnectionEvent_.then(function(){a.activeConnectionEvent_=void 0;a.processConnectionEvent()})["catch"](function(){d.logger.log(a.user_friendly_id()+" : Failed to handle connection event! ");a.activeConnectionEvent_=void 0;a.processConnectionEvent()})}};b.prototype.connectTo=function(a){this.connectionEventQueue_.push({operation:"connectTo",param:a});this.processConnectionEvent()};b.prototype.disconnect=function(){this.connectionEventQueue_.push({operation:"disconnect",
param:null});this.processConnectionEvent()};b.prototype.connectToAsync=function(a){var b=this;return new Promise(function(c,e){d.logger.log(b.user_friendly_id()+".connectTo: connect media stream with id = "+a.id+", clone_id = "+a.clone_state.clone_id);b.streamId_=a.id;b.waitUntilReady("VideoElement.connectTo").then(function(){return a.waitUntilConnected("MediaStream.connectTo")}).then(function(){b.setupOnVideoFrameChanged();return a.clone_state.synchronize(a)}).then(function(a){d.logger.log(b.user_friendly_id()+
".connectTo: remote invoking");var c=b.registerCallbacks(!0,!1,h.method_id_VideoElement_t.connectTo);return Promise.all([b.remoteInvokeEx(!1,h.method_id_VideoElement_t.connectTo,[a],c.success,c.fail),c.prom()])}).then(function(a){d.logger.log(b.user_friendly_id()+".connectTo: remote media stream is connected!");b.setState("connected");b.watch();b.updateTimer=setInterval(function(){b.ontimeupdate&&b.ontimeupdate()},250);(a=b.window_.document.getElementById(b.elementId))&&b.updateStyle(a);c()})["catch"](function(a){b.logRemoteInvokeError(a,
".connectTo: failed to connect!");e()})})};b.prototype.disconnectAsync=function(){var a=this;return new Promise(function(b,c){d.logger.log(a.user_friendly_id()+".disconnect: disconnecting stream : "+a.streamId_);a.unwatch();a.waitUntilReady("VideoElement.disconnect").then(function(){a.updateTimer&&clearInterval(a.updateTimer);var b=a.registerCallbacks(!1,!0,h.method_id_VideoElement_t.onvideoframechanged);a.remoteInvoke(!0,h.method_id_VideoElement_t.onvideoframechanged,b.success);return a.remoteInvoke(!1,
h.method_id_VideoElement_t.disconnect)}).then(function(){d.logger.log(a.user_friendly_id()+".disconnect: remote media stream is disconnected!");a.setState("disconnected");1==a.pendingRelease_&&(a.pendingRelease_=!1,a.onconnectionstatechange=null,a.release());b()})["catch"](function(b){a.logRemoteInvokeError(b,".disconnect: failed to connect!");c()})})};b.prototype.setFrame=function(a){var b=this;d.logger.log(this.user_friendly_id()+".setFrame: set video frame to",a.x,a.y,a.width,a.height);this.waitUntilReady("VideoElement.setFrame").then(function(){var c=
new n(a,b.window_);return b.remoteInvoke(!1,h.method_id_VideoElement_t.setFrame,c)}).then(function(){d.logger.log(b.user_friendly_id()+".setFrame: success!")})["catch"](function(a){b.logRemoteInvokeError(a,".setFrame: failed to connect!")})};b.prototype.addClipRect=function(a){var b=this;d.logger.log(this.user_friendly_id()+".addClipRect: ",JSON.stringify(a));this.waitUntilReady("VideoElement.addClipRect").then(function(){var c=new n(a,b.window_);return b.remoteInvoke(!1,h.method_id_VideoElement_t.addClipRect,
c)})["catch"](function(a){b.logRemoteInvokeError(a,".addClipRect failed!")})};b.prototype.removeClipRect=function(a){var b=this;d.logger.log(this.user_friendly_id()+".removeClipRect: ",JSON.stringify(a));this.waitUntilReady("VideoElement.removeClipRect").then(function(){var c=new n(a,b.window_);return b.remoteInvoke(!1,h.method_id_VideoElement_t.removeClipRect,c)})["catch"](function(a){b.logRemoteInvokeError(a,".removeClipRect failed!")})};b.prototype.watch=function(){var a=this;if(p.getRedirector().getFeatureValue(q.FEATURE_ms_teams_video_placement)){var b=
this.window_.document.getElementById(this.elementId);b&&(this.unwatch(),this.styleObserver=new MutationObserver(function(b){b.forEach(function(b){"style"==b.attributeName?a.updateStyle(b.target):a.elementId=b.target.id})}),this.styleObserver.observe(b,{attributes:!0,attributeOldValue:!0,attributeFilter:["style","id"]}))}};b.prototype.unwatch=function(){this.styleObserver&&(this.styleObserver.disconnect(),this.styleObserver=null)};b.prototype.updateStyle=function(a){if("connected"==this.connectionState){var b=
this.window_.getComputedStyle(a).getPropertyValue("object-fit"),c=this.window_.getComputedStyle(a).getPropertyValue("object-position").split(" ");a=new v(c[0]);c=new v(c[1]);this.placement=new B(b,a,c)}else d.logger.log(this.user_friendly_id()+".updateStyle: video element is not connected")};Object.defineProperty(b.prototype,"placement",{get:function(){return this.placement_},set:function(a){var b=this;p.getRedirector().getFeatureValue(q.FEATURE_ms_teams_video_placement)?this.waitUntilReady("VideoElement.placement").then(function(){return b.remoteInvoke(!0,
h.method_id_VideoElement_t.placement,a)}).then(function(){b.placement_=a})["catch"](function(a){b.logRemoteInvokeError(a,".placement setter: failed to connect!")}):d.logger.log(this.user_friendly_id()+".placement: video placement feature is not supported on a client")},enumerable:!1,configurable:!0});b.prototype.waitUntilReady=function(a){var b=this;return new Promise(function(c,e){d.logger.log("VideoElement.waitUntilReady(): readyState="+b.readyState_+". (oid: "+b.object_id()+")");b.readyState_==
t.Ready?c():(d.logger.log('videoElement.waitUntilReady(): deferring action "'+a+'". (oid: '+b.object_id()+")"),b.deferredVideoActions.push(new l.deferred_action(c,e,a)))})};b.prototype.onReady=function(){for(;this.deferredVideoActions&&0<this.deferredVideoActions.length;)this.deferredVideoActions.shift().post(this.readyState_==t.Ready)};return b}(l.ProxyObject);a.VideoElement=b},269:function(b,a){Object.defineProperty(a,"__esModule",{value:!0});a.HardwareInfo=a.MemoryInfo=a.GPUInfo=a.GPU=a.CPUInfo=
a.WebrpcClassLibInfo=a.WebrpcClassInfo=a.WebrpcMethodInfo=a.EndpointId=a.OSInfo=a.WebrpcFeatureInfo=a.FeatureData=a.VersionData=a.FEATURE_unsupported=a.FEATURE_ms_teams_redirection=void 0;a.FEATURE_ms_teams_redirection="ms_teams_redirection";a.FEATURE_unsupported="unsupported";var c=function(){return function(a,b,c,d){this.major=a;this.minor=b;this.revision=c;this.build=d}}();a.VersionData=c;c=function(){return function(){}}();a.FeatureData=c;c=function(){return function(a,b){this.fature=a;this.version=
b}}();a.WebrpcFeatureInfo=c;c=function(){return function(a,b,c,d,e){this.family=a;this.version=b;this.architecture=c;this.distro=d;this.edition=e}}();a.OSInfo=c;c=function(){return function(a,b){this.machine_id=a;this.user_id=b}}();a.EndpointId=c;c=function(){return function(b,c,e,d,l){void 0===l&&(l=a.FEATURE_ms_teams_redirection);this.iid=b;this.mid=c;this.name=e;this.isprop=d;this.feature=l}}();a.WebrpcMethodInfo=c;c=function(){return function(a,b,c){this.id=a;this.name=b;this.methods=c}}();a.WebrpcClassInfo=
c;c=function(){return function(a,b){this.name=a;this.classes=b}}();a.WebrpcClassLibInfo=c;c=function(){return function(a,b){this.cpumodel=a;this.numberofprocessors=b}}();a.CPUInfo=c;c=function(){return function(a,b){this.name=a;this.driver=b}}();a.GPU=c;c=function(){return function(a){this.gpus=a}}();a.GPUInfo=c;c=function(){return function(a){this.totalmemory=a}}();a.MemoryInfo=c;c=function(){return function(a,b,c){this.cpu_info=a;this.gpu_info=b;this.memory_info=c}}();a.HardwareInfo=c},550:function(b,
a,c){var e=this&&this.__createBinding||(Object.create?function(a,b,c,e){void 0===e&&(e=c);Object.defineProperty(a,e,{enumerable:!0,get:function(){return b[c]}})}:function(a,b,c,e){void 0===e&&(e=c);a[e]=b[c]});b=this&&this.__exportStar||function(a,b){for(var c in a)"default"===c||b.hasOwnProperty(c)||e(b,a,c)};Object.defineProperty(a,"__esModule",{value:!0});a.WebrpcClassLibInfoUtil=void 0;var l=c(187);b(c(187),a);c=function(){function a(){}a.getInterfaceByid=function(a){for(var b=0,c=l.class_lib_info.classes;b<
c.length;b++){var e=c[b];if(e.id==a)return e}return null};a.getMethodByid=function(a,b){var c=this.getInterfaceByid(a);if(null!=c)for(var e=0,c=c.methods;e<c.length;e++){var k=c[e];if(k.mid==b)return k}return null};a.getMethodFeatureByid=function(a,b){var c=this.getInterfaceByid(a);if(null!=c)for(var e=0,c=c.methods;e<c.length;e++){var k=c[e];if(k.mid==b)return k.feature}return null};a.composeClassInfoData=function(a){a=a.hdr;if(void 0==a)return"*** Invalid packet: Couldn't find hdr object ***";var b=
a.proc;if(void 0==b)return"";a=b.iid;for(var b=b.methodid,c=0,e=l.class_lib_info.classes;c<e.length;c++){var k=e[c];if(k.id==a)for(var h=0,p=k.methods;h<p.length;h++){var g=p[h];if(g.mid==b)return k.name+"::"+g.name}}return""};return a}();a.WebrpcClassLibInfoUtil=c},187:function(b,a,c){Object.defineProperty(a,"__esModule",{value:!0});a.class_lib_info=a.method_id_StreamResolution_t=a.method_id_RTCSctpTransport_t=a.method_id_RTCDataChannel_t=a.method_id_E911Service_t=a.method_id_ScreenSource_t=a.method_id_VDISharingRemote_t=
a.method_id_RTCRtpTransceiver_t=a.method_id_RTCIceCandidatePair_t=a.method_id_RTCDTMFToneChangeEvent_t=a.method_id_RTCDTMFSender_t=a.method_id_RTCIceTransport_t=a.method_id_RTCDtlsTransport_t=a.method_id_RTCRtpSender_t=a.method_id_RTCRtpReceiver_t=a.method_id_AudioElement_t=a.method_id_VideoElement_t=a.method_id_MediaStreamEvent_t=a.method_id_RTCIceCandidateEvent_t=a.method_id_RTCIceCandidate_t=a.method_id_NavigatorUserMedia_t=a.method_id_MediaStream_t=a.method_id_MediaStreamTrack_t=a.method_id_RTCSessionDescription_t=
a.method_id_MediaDeviceInfo_t=a.method_id_MediaDevices_t=a.method_id_RTCPeerConnection_t=a.method_id_EngineControl_t=a.class_id_t=a.vdaFeatureNameMap=a.featureNameMap=a.Features=a.FEATURE_ms_teams_sender_stats_fix=a.FEATURE_ms_teams_enumerate_devices_v2=a.FEATURE_ms_teams_track_clone_with_id=a.FEATURE_ms_teams_audio_notifications_loop=a.FEATURE_ms_teams_share_system_audio=a.FEATURE_ms_teams_stream_active_status=a.FEATURE_ms_teams_hardware_info=a.FEATURE_ms_teams_secondary_audio_notifications=a.FEATURE_ms_teams_stream_resolution=
a.FEATURE_ms_teams_client_info=a.FEATURE_ms_teams_no_vd_buffer_limit=a.FEATURE_ms_teams_data_channel=a.FEATURE_ms_teams_webrtc_1dot0=a.FEATURE_ms_teams_multi_window=a.FEATURE_ms_teams_gtc=a.FEATURE_ms_teams_e911=a.FEATURE_ms_teams_codec_capability=a.FEATURE_ms_teams_app_sharing=a.FEATURE_ms_teams_monitor_sharing=a.FEATURE_ms_teams_video_placement=a.FEATURE_ms_teams_dtmf=a.FEATURE_ms_teams_device_group_id=a.FEATURE_ms_teams_remote_audio_notifications=a.FEATURE_ms_teams_endpoint_id=a.FEATURE_ms_teams_osinfo=
a.FEATURE_ms_teams_mstrack_constraints=a.FEATURE_ms_teams_1912=a.FEATURE_ms_teams_pstn=a.FEATURE_ms_teams_1911=a.FEATURE_ms_teams_common_media_constraints=a.FEATURE_ms_teams_speaking_indicator=a.FEATURE_ms_teams_desktop_sharing=a.FEATURE_vda_delete_viewport=a.FEATURE_vda_multi_window=a.FEATURE_vda_app_sharing=a.FEATURE_vda_service_no_buffer_limit=a.HDXMS_VERSION=a.BUILD_TYPE_SDK=void 0;b=c(269);var e=c(269);Object.defineProperty(a,"VersionData",{enumerable:!0,get:function(){return e.VersionData}});
Object.defineProperty(a,"FeatureData",{enumerable:!0,get:function(){return e.FeatureData}});Object.defineProperty(a,"OSInfo",{enumerable:!0,get:function(){return e.OSInfo}});Object.defineProperty(a,"EndpointId",{enumerable:!0,get:function(){return e.EndpointId}});Object.defineProperty(a,"HardwareInfo",{enumerable:!0,get:function(){return e.HardwareInfo}});a.BUILD_TYPE_SDK=!0;a.HDXMS_VERSION="3.1.0";a.FEATURE_vda_service_no_buffer_limit="wsservice_no_buffer_limit";a.FEATURE_vda_app_sharing="webrtc_app_sharing";
a.FEATURE_vda_multi_window="webrtc_multi_window";a.FEATURE_vda_delete_viewport="overlay_delete_viewport";a.FEATURE_ms_teams_desktop_sharing="ms_teams_desktop_sharing";a.FEATURE_ms_teams_speaking_indicator="ms_teams_speaking_indicator";a.FEATURE_ms_teams_common_media_constraints="ms_teams_common_media_constraints";a.FEATURE_ms_teams_1911="ms_teams_1911";a.FEATURE_ms_teams_pstn="ms_teams_pstn";a.FEATURE_ms_teams_1912="ms_teams_1912";a.FEATURE_ms_teams_mstrack_constraints="ms_teams_mstrack_constraints";
a.FEATURE_ms_teams_osinfo="ms_teams_osinfo";a.FEATURE_ms_teams_endpoint_id="ms_teams_endpoint_id";a.FEATURE_ms_teams_remote_audio_notifications="ms_teams_remote_audio_notifications";a.FEATURE_ms_teams_device_group_id="ms_teams_device_group_id";a.FEATURE_ms_teams_dtmf="ms_teams_dtmf";a.FEATURE_ms_teams_video_placement="ms_teams_video_placement";a.FEATURE_ms_teams_monitor_sharing="ms_teams_multi_monitor_sharing";a.FEATURE_ms_teams_app_sharing="ms_teams_app_sharing";a.FEATURE_ms_teams_codec_capability=
"ms_teams_codec_capability";a.FEATURE_ms_teams_e911="ms_teams_e911";a.FEATURE_ms_teams_gtc="ms_teams_gtc";a.FEATURE_ms_teams_multi_window="ms_teams_multi_windows";a.FEATURE_ms_teams_webrtc_1dot0="ms_teams_webrtc_1.0";a.FEATURE_ms_teams_data_channel="ms_teams_data_channel";a.FEATURE_ms_teams_no_vd_buffer_limit="ms_teams_no_vd_buffer_limit";a.FEATURE_ms_teams_client_info="ms_teams_client_info";a.FEATURE_ms_teams_stream_resolution="ms_teams_stream_resolution";a.FEATURE_ms_teams_secondary_audio_notifications=
"ms_teams_secondary_audio_notifications";a.FEATURE_ms_teams_hardware_info="ms_teams_hardware_info";a.FEATURE_ms_teams_stream_active_status="ms_teams_stream_active_status";a.FEATURE_ms_teams_share_system_audio="ms_teams_share_system_audio";a.FEATURE_ms_teams_audio_notifications_loop="ms_teams_audio_notifications_loop";a.FEATURE_ms_teams_track_clone_with_id="ms_teams_track_clone_with_id";a.FEATURE_ms_teams_enumerate_devices_v2="ms_teams_enumerate_devices_v2";a.FEATURE_ms_teams_sender_stats_fix="ms_teams_sender_stats_fix";
new b.WebrpcFeatureInfo(b.FEATURE_ms_teams_redirection,new b.VersionData(1,1,0,0));new b.WebrpcFeatureInfo(a.FEATURE_ms_teams_desktop_sharing,new b.VersionData(1,2,0,0));new b.WebrpcFeatureInfo(a.FEATURE_ms_teams_speaking_indicator,new b.VersionData(1,2,0,0));new b.WebrpcFeatureInfo(a.FEATURE_ms_teams_common_media_constraints,new b.VersionData(1,4,0,0));new b.WebrpcFeatureInfo(a.FEATURE_ms_teams_1911,new b.VersionData(1,4,0,0));new b.WebrpcFeatureInfo(a.FEATURE_ms_teams_1912,new b.VersionData(1,5,
0,0));new b.WebrpcFeatureInfo(a.FEATURE_ms_teams_mstrack_constraints,new b.VersionData(1,6,0,0));new b.WebrpcFeatureInfo(a.FEATURE_ms_teams_pstn,new b.VersionData(1,6,0,0));new b.WebrpcFeatureInfo(a.FEATURE_ms_teams_osinfo,new b.VersionData(1,7,0,0));new b.WebrpcFeatureInfo(a.FEATURE_ms_teams_endpoint_id,new b.VersionData(1,7,0,0));new b.WebrpcFeatureInfo(a.FEATURE_ms_teams_remote_audio_notifications,new b.VersionData(1,7,0,0));new b.WebrpcFeatureInfo(a.FEATURE_ms_teams_device_group_id,new b.VersionData(1,
7,0,0));new b.WebrpcFeatureInfo(a.FEATURE_ms_teams_codec_capability,new b.VersionData(1,7,0,0));new b.WebrpcFeatureInfo(a.FEATURE_ms_teams_dtmf,new b.VersionData(1,7,0,0));new b.WebrpcFeatureInfo(a.FEATURE_ms_teams_video_placement,new b.VersionData(1,7,0,0));new b.WebrpcFeatureInfo(a.FEATURE_ms_teams_monitor_sharing,new b.VersionData(1,7,0,0));new b.WebrpcFeatureInfo(a.FEATURE_ms_teams_app_sharing,new b.VersionData(1,8,0,0));new b.WebrpcFeatureInfo(a.FEATURE_ms_teams_webrtc_1dot0,new b.VersionData(1,
8,0,0));new b.WebrpcFeatureInfo(a.FEATURE_ms_teams_data_channel,new b.VersionData(1,8,0,0));new b.WebrpcFeatureInfo(a.FEATURE_ms_teams_e911,new b.VersionData(1,13,0,0));new b.WebrpcFeatureInfo(a.FEATURE_ms_teams_multi_window,new b.VersionData(1,14,0,0));new b.WebrpcFeatureInfo(a.FEATURE_ms_teams_client_info,new b.VersionData(1,19,0,0));new b.WebrpcFeatureInfo(a.FEATURE_ms_teams_stream_resolution,new b.VersionData(1,25,0,0));new b.WebrpcFeatureInfo(a.FEATURE_ms_teams_secondary_audio_notifications,
new b.VersionData(1,21,0,0));new b.WebrpcFeatureInfo(a.FEATURE_ms_teams_hardware_info,new b.VersionData(1,35,0,0));new b.WebrpcFeatureInfo(a.FEATURE_ms_teams_stream_active_status,new b.VersionData(1,32,0,0));new b.WebrpcFeatureInfo(a.FEATURE_ms_teams_audio_notifications_loop,new b.VersionData(1,33,0,0));new b.WebrpcFeatureInfo(a.FEATURE_ms_teams_track_clone_with_id,new b.VersionData(1,33,0,0));new b.WebrpcFeatureInfo(a.FEATURE_ms_teams_enumerate_devices_v2,new b.VersionData(1,35,0,0));new b.WebrpcFeatureInfo(a.FEATURE_ms_teams_sender_stats_fix,
new b.VersionData(1,36,0,0));c=function(){function a(){}a.FEATURE_public_screenshare="screenshare";a.FEATURE_public_redirection="redirection";a.FEATURE_public_speaking_indicator="speaking_indicator";a.FEATURE_public_pstn="pstn";a.FEATURE_public_osinfo="osinfo";a.FEATURE_public_endpoint_id="endpointid";a.FEATURE_public_remote_audio_notifications="remoteaudionotifications";a.FEATURE_public_device_group_id="compositedevices";a.FEATURE_public_dtmf="dtmf";a.FEATURE_public_monitor_sharing="multimonitorscreenshare";
a.FEATURE_public_app_sharing="appshare";a.FEATURE_public_codec_capability="codec_capability";a.FEATURE_public_e911="e911";a.FEATURE_public_webrtc1dot0="webrtc1.0";a.FEATURE_public_data_channel="datachannel";a.FEATURE_public_vdnobuflimit="vdnobuflimit";a.FEATURE_public_multi_window="multiwindow";a.FEATURE_public_secondary_audio_notifications="secondaryringer";a.FEATURE_public_stream_resolution="streamresolution";a.FEATURE_public_track_clone_with_id="track_clone_with_id";a.FEATURE_public_sender_stats_fix=
"sender_stats_fix";a.FEATURE_public_audio_notification_loop="loop";return a}();a.Features=c;a.featureNameMap={};a.featureNameMap[c.FEATURE_public_screenshare]=[a.FEATURE_ms_teams_desktop_sharing];a.featureNameMap[c.FEATURE_public_redirection]=[b.FEATURE_ms_teams_redirection];a.featureNameMap[c.FEATURE_public_speaking_indicator]=[a.FEATURE_ms_teams_speaking_indicator];a.featureNameMap[c.FEATURE_public_pstn]=[a.FEATURE_ms_teams_pstn];a.featureNameMap[c.FEATURE_public_osinfo]=[a.FEATURE_ms_teams_osinfo];
a.featureNameMap[c.FEATURE_public_endpoint_id]=[a.FEATURE_ms_teams_endpoint_id];a.featureNameMap[c.FEATURE_public_remote_audio_notifications]=[a.FEATURE_ms_teams_remote_audio_notifications,a.FEATURE_ms_teams_secondary_audio_notifications];a.featureNameMap[c.FEATURE_public_device_group_id]=[a.FEATURE_ms_teams_device_group_id];a.featureNameMap[c.FEATURE_public_dtmf]=[a.FEATURE_ms_teams_dtmf];a.featureNameMap[c.FEATURE_public_monitor_sharing]=[a.FEATURE_ms_teams_monitor_sharing];a.featureNameMap[c.FEATURE_public_app_sharing]=
[a.FEATURE_ms_teams_app_sharing];a.featureNameMap[c.FEATURE_public_codec_capability]=[a.FEATURE_ms_teams_codec_capability];a.featureNameMap[c.FEATURE_public_e911]=[a.FEATURE_ms_teams_e911];a.featureNameMap[c.FEATURE_public_webrtc1dot0]=[a.FEATURE_ms_teams_webrtc_1dot0];a.featureNameMap[c.FEATURE_public_multi_window]=[a.FEATURE_ms_teams_multi_window];a.featureNameMap[c.FEATURE_public_data_channel]=[a.FEATURE_ms_teams_data_channel];a.featureNameMap[c.FEATURE_public_vdnobuflimit]=[a.FEATURE_ms_teams_no_vd_buffer_limit];
a.featureNameMap[c.FEATURE_public_secondary_audio_notifications]=[a.FEATURE_ms_teams_remote_audio_notifications,a.FEATURE_ms_teams_secondary_audio_notifications];a.featureNameMap[c.FEATURE_public_stream_resolution]=[a.FEATURE_ms_teams_stream_resolution];a.featureNameMap[c.FEATURE_public_track_clone_with_id]=[a.FEATURE_ms_teams_track_clone_with_id];a.featureNameMap[c.FEATURE_public_sender_stats_fix]=[a.FEATURE_ms_teams_sender_stats_fix];a.featureNameMap[c.FEATURE_public_audio_notification_loop]=[a.FEATURE_ms_teams_audio_notifications_loop];
a.vdaFeatureNameMap={};a.vdaFeatureNameMap[c.FEATURE_public_multi_window]=[a.FEATURE_vda_multi_window];a.vdaFeatureNameMap[c.FEATURE_public_app_sharing]=[a.FEATURE_vda_app_sharing];(function(a){a[a.EngineControl=0]="EngineControl";a[a.RTCPeerConnection=1]="RTCPeerConnection";a[a.RTCSessionDescription=2]="RTCSessionDescription";a[a.RTCIceCandidate=3]="RTCIceCandidate";a[a.RTCIceCandidateEvent=4]="RTCIceCandidateEvent";a[a.MediaDevices=5]="MediaDevices";a[a.MediaDeviceInfo=6]="MediaDeviceInfo";a[a.MediaStreamTrack=
7]="MediaStreamTrack";a[a.MediaStreamEvent=8]="MediaStreamEvent";a[a.MediaStream=9]="MediaStream";a[a.NavigatorUserMedia=10]="NavigatorUserMedia";a[a.VideoElement=11]="VideoElement";a[a.AudioElement=12]="AudioElement";a[a.RTCRtpReceiver=13]="RTCRtpReceiver";a[a.RTCRtpSender=14]="RTCRtpSender";a[a.RTCDtlsTransport=15]="RTCDtlsTransport";a[a.RTCIceTransport=16]="RTCIceTransport";a[a.RTCDTMFSender=17]="RTCDTMFSender";a[a.RTCDTMFToneChangeEvent=18]="RTCDTMFToneChangeEvent";a[a.RTCIceCandidatePair=19]=
"RTCIceCandidatePair";a[a.RTCRtpTransceiver=20]="RTCRtpTransceiver";a[a.ScreenSharingRemote=21]="ScreenSharingRemote";a[a.ScreenSource=22]="ScreenSource";a[a.E911Service=23]="E911Service";a[a.reserved2=24]="reserved2";a[a.RTCDataChannel=25]="RTCDataChannel";a[a.RTCSctpTransport=26]="RTCSctpTransport";a[a.StreamResolution=27]="StreamResolution";a[a.VideoEffect=28]="VideoEffect";a[a.reserved6=29]="reserved6";a[a.reserved7=30]="reserved7";a[a.reserved8=31]="reserved8"})(c=a.class_id_t||(a.class_id_t=
{}));var l;(function(a){a[a.ctor=0]="ctor";a[a.version=1]="version";a[a.feature_flags=2]="feature_flags";a[a.version_info=3]="version_info";a[a.osinfo=4]="osinfo";a[a.endpoint_id=5]="endpoint_id";a[a.set_client_info=6]="set_client_info";a[a.hardware_info=7]="hardware_info"})(l=a.method_id_EngineControl_t||(a.method_id_EngineControl_t={}));var h;(function(a){a[a.ctor=0]="ctor";a[a.localDescription=1]="localDescription";a[a.remoteDescription=2]="remoteDescription";a[a.readyState=3]="readyState";a[a.iceState=
4]="iceState";a[a.localStreams=5]="localStreams";a[a.remoteStreams=6]="remoteStreams";a[a.createOffer=7]="createOffer";a[a.createAnswer=8]="createAnswer";a[a.setLocalDescription=9]="setLocalDescription";a[a.setRemoteDescription=10]="setRemoteDescription";a[a.updateIce=11]="updateIce";a[a.addIceCandidate=12]="addIceCandidate";a[a.addStream=13]="addStream";a[a.removeStream=14]="removeStream";a[a.close=15]="close";a[a.iceConnectionState=16]="iceConnectionState";a[a.iceGatheringState=17]="iceGatheringState";
a[a.signalingState=18]="signalingState";a[a.onaddstream=19]="onaddstream";a[a.onicecandidate=20]="onicecandidate";a[a.oniceconnectionstatechange=21]="oniceconnectionstatechange";a[a.onicegatheringstatechange=22]="onicegatheringstatechange";a[a.onsignalingstatechange=23]="onsignalingstatechange";a[a.onnegotiationneeded=24]="onnegotiationneeded";a[a.onremovestream=25]="onremovestream";a[a.getStats=26]="getStats";a[a.getReceivers=27]="getReceivers";a[a.getSenders=28]="getSenders";a[a.addTrack=29]="addTrack";
a[a.removeTrack=30]="removeTrack";a[a.ontrack=31]="ontrack";a[a.setLocalDescription_v2=32]="setLocalDescription_v2";a[a.setRemoteDescription_v2=33]="setRemoteDescription_v2";a[a.addTransceiverWithTrack=34]="addTransceiverWithTrack";a[a.addTransceiverWithKind=35]="addTransceiverWithKind";a[a.getTransceivers=36]="getTransceivers";a[a.onconnectionstatechange=37]="onconnectionstatechange";a[a.sctp=38]="sctp";a[a.ondatachannel=39]="ondatachannel";a[a.createDataChannel=40]="createDataChannel";a[a.getStats_v2=
41]="getStats_v2"})(h=a.method_id_RTCPeerConnection_t||(a.method_id_RTCPeerConnection_t={}));var d;(function(a){a[a.ctor=0]="ctor";a[a.enumerateDevices=1]="enumerateDevices";a[a.getDisplayMedia=2]="getDisplayMedia";a[a.ondevicechange=3]="ondevicechange";a[a.enumerateDevicesV2=4]="enumerateDevicesV2"})(d=a.method_id_MediaDevices_t||(a.method_id_MediaDevices_t={}));var p;(function(a){a[a.ctor=0]="ctor";a[a.deviceId=1]="deviceId";a[a.kind=2]="kind";a[a.label=3]="label";a[a.groupId=4]="groupId"})(p=a.method_id_MediaDeviceInfo_t||
(a.method_id_MediaDeviceInfo_t={}));var q;(function(a){a[a.ctor=0]="ctor";a[a.type=1]="type";a[a.sdp=2]="sdp"})(q=a.method_id_RTCSessionDescription_t||(a.method_id_RTCSessionDescription_t={}));var n;(function(a){a[a.ctor=0]="ctor";a[a.kind=1]="kind";a[a.id=2]="id";a[a.label=3]="label";a[a.enabled=4]="enabled";a[a.muted=5]="muted";a[a.readyState=6]="readyState";a[a.onended=7]="onended";a[a.onmute=8]="onmute";a[a.onunmute=9]="onunmute";a[a.clone=10]="clone";a[a.stop=11]="stop";a[a.getCapabilities=12]=
"getCapabilities";a[a.getSettings=13]="getSettings";a[a.applyConstraints=14]="applyConstraints";a[a.getConstraints=15]="getConstraints"})(n=a.method_id_MediaStreamTrack_t||(a.method_id_MediaStreamTrack_t={}));var k;(function(a){a[a.ctor=0]="ctor";a[a.id=1]="id";a[a.getAudioTracks=2]="getAudioTracks";a[a.getVideoTracks=3]="getVideoTracks";a[a.getTracks=4]="getTracks";a[a.getTrackById=5]="getTrackById";a[a.addTrack=6]="addTrack";a[a.removeTrack=7]="removeTrack";a[a.clone=8]="clone";a[a.active=9]="active"})(k=
a.method_id_MediaStream_t||(a.method_id_MediaStream_t={}));var v;(function(a){a[a.ctor=0]="ctor";a[a.getUserMedia=1]="getUserMedia";a[a.setCodecCapabilities=2]="setCodecCapabilities";a[a.getCapabilities=3]="getCapabilities"})(v=a.method_id_NavigatorUserMedia_t||(a.method_id_NavigatorUserMedia_t={}));var z;(function(a){a[a.ctor=0]="ctor";a[a.candidate=1]="candidate";a[a.sdpMid=2]="sdpMid";a[a.sdpMLineIndex=3]="sdpMLineIndex"})(z=a.method_id_RTCIceCandidate_t||(a.method_id_RTCIceCandidate_t={}));var g;
(function(a){a[a.ctor=0]="ctor";a[a.candidate=1]="candidate"})(g=a.method_id_RTCIceCandidateEvent_t||(a.method_id_RTCIceCandidateEvent_t={}));var B;(function(a){a[a.ctor=0]="ctor";a[a.stream=1]="stream"})(B=a.method_id_MediaStreamEvent_t||(a.method_id_MediaStreamEvent_t={}));var t;(function(a){a[a.ctor=0]="ctor";a[a.sinkId=1]="sinkId";a[a.connectTo=2]="connectTo";a[a.disconnect=3]="disconnect";a[a.setFrame=4]="setFrame";a[a.addClipRect=5]="addClipRect";a[a.removeClipRect=6]="removeClipRect";a[a.onerror=
7]="onerror";a[a.onvideoframechanged=8]="onvideoframechanged";a[a.placement=9]="placement"})(t=a.method_id_VideoElement_t||(a.method_id_VideoElement_t={}));var m;(function(a){a[a.ctor=0]="ctor";a[a.sinkId=1]="sinkId";a[a.srcObject=2]="srcObject";a[a.src=3]="src";a[a.play=4]="play";a[a.pause=5]="pause";a[a.loop=6]="loop"})(m=a.method_id_AudioElement_t||(a.method_id_AudioElement_t={}));var D;(function(a){a[a.ctor=0]="ctor";a[a.track=1]="track";a[a.getContributingSources=2]="getContributingSources";
a[a.getSynchronizationSources=3]="getSynchronizationSources";a[a.transport=4]="transport";a[a.rtcpTransport=5]="rtcpTransport";a[a.getCapabilities=6]="getCapabilities";a[a.getParameters=7]="getParameters";a[a.getStats=8]="getStats";a[a.getCapabilities_v2=9]="getCapabilities_v2"})(D=a.method_id_RTCRtpReceiver_t||(a.method_id_RTCRtpReceiver_t={}));var y;(function(a){a[a.ctor=0]="ctor";a[a.track=1]="track";a[a.transport=2]="transport";a[a.rtcpTransport=3]="rtcpTransport";a[a.dtmf=4]="dtmf";a[a.getCapabilities=
5]="getCapabilities";a[a.getParameters=6]="getParameters";a[a.setParameters=7]="setParameters";a[a.replaceTrack=8]="replaceTrack";a[a.getStats=9]="getStats";a[a.setStreams=10]="setStreams";a[a.getCapabilities_v2=11]="getCapabilities_v2"})(y=a.method_id_RTCRtpSender_t||(a.method_id_RTCRtpSender_t={}));var x;(function(a){a[a.ctor=0]="ctor";a[a.transport=1]="transport";a[a.state=2]="state";a[a.getRemoteCertificates=3]="getRemoteCertificates";a[a.onstatechange=4]="onstatechange";a[a.onerror=5]="onerror"})(x=
a.method_id_RTCDtlsTransport_t||(a.method_id_RTCDtlsTransport_t={}));var r;(function(a){a[a.ctor=0]="ctor";a[a.role=1]="role";a[a.component=2]="component";a[a.state=3]="state";a[a.gatheringState=4]="gatheringState";a[a.localcandidates=5]="localcandidates";a[a.remotecandidates=6]="remotecandidates";a[a.onstatechange=7]="onstatechange";a[a.ongatheringstatechange=8]="ongatheringstatechange";a[a.onselectedcandidatepairchange=9]="onselectedcandidatepairchange"})(r=a.method_id_RTCIceTransport_t||(a.method_id_RTCIceTransport_t=
{}));var A;(function(a){a[a.ctor=0]="ctor";a[a.insertDTMF=1]="insertDTMF";a[a.ontonechange=2]="ontonechange";a[a.canInsertDTMF=3]="canInsertDTMF";a[a.toneBuffer=4]="toneBuffer"})(A=a.method_id_RTCDTMFSender_t||(a.method_id_RTCDTMFSender_t={}));var M;(function(a){a[a.ctor=0]="ctor";a[a.tone=1]="tone";a[a.tone_buffer=2]="tone_buffer"})(M=a.method_id_RTCDTMFToneChangeEvent_t||(a.method_id_RTCDTMFToneChangeEvent_t={}));var F;(function(a){a[a.ctor=0]="ctor";a[a.local=1]="local";a[a.remote=2]="remote"})(F=
a.method_id_RTCIceCandidatePair_t||(a.method_id_RTCIceCandidatePair_t={}));var J;(function(a){a[a.ctor=0]="ctor";a[a.mid=1]="mid";a[a.sender=2]="sender";a[a.receiver=3]="receiver";a[a.direction=4]="direction";a[a.currentDirection=5]="currentDirection";a[a.stop=6]="stop";a[a.setCodecPreferences=7]="setCodecPreferences"})(J=a.method_id_RTCRtpTransceiver_t||(a.method_id_RTCRtpTransceiver_t={}));var G;(function(a){a[a.ctor=0]="ctor";a[a.getScreensAsync=1]="getScreensAsync";a[a.onscreentopologychanged=
2]="onscreentopologychanged"})(G=a.method_id_VDISharingRemote_t||(a.method_id_VDISharingRemote_t={}));var L;(function(a){a[a.ctor=0]="ctor";a[a.srcid=1]="srcid";a[a.deviceid=2]="deviceid";a[a.type=3]="type";a[a.name=4]="name";a[a.imagedata=5]="imagedata";a[a.hwnd=6]="hwnd";a[a.origin=7]="origin";a[a.caption=8]="caption";a[a.pid=9]="pid";a[a.bounds=10]="bounds"})(L=a.method_id_ScreenSource_t||(a.method_id_ScreenSource_t={}));var P;(function(a){a[a.ctor=0]="ctor";a[a.getE911Info=1]="getE911Info";a[a.onupdate=
2]="onupdate"})(P=a.method_id_E911Service_t||(a.method_id_E911Service_t={}));var C;(function(a){a[a.ctor=0]="ctor";a[a.label=1]="label";a[a.ordered=2]="ordered";a[a.maxPacketLifeTime=3]="maxPacketLifeTime";a[a.maxRetransmits=4]="maxRetransmits";a[a.protocol=5]="protocol";a[a.negotiated=6]="negotiated";a[a.id=7]="id";a[a.readyState=8]="readyState";a[a.bufferedAmount=9]="bufferedAmount";a[a.bufferedAmountLowThreshold=10]="bufferedAmountLowThreshold";a[a.onopen=11]="onopen";a[a.onbufferedamountlow=12]=
"onbufferedamountlow";a[a.onerror=13]="onerror";a[a.onclosing=14]="onclosing";a[a.onclose=15]="onclose";a[a.onmessage=16]="onmessage";a[a.close=17]="close";a[a.send_text=18]="send_text";a[a.send_binary=19]="send_binary"})(C=a.method_id_RTCDataChannel_t||(a.method_id_RTCDataChannel_t={}));var R;(function(a){a[a.ctor=0]="ctor";a[a.transport=1]="transport";a[a.state=2]="state";a[a.maxMessageSize=3]="maxMessageSize";a[a.maxChannels=4]="maxChannels";a[a.onstatechange=5]="onstatechange"})(R=a.method_id_RTCSctpTransport_t||
(a.method_id_RTCSctpTransport_t={}));var K;(function(a){a[a.ctor=0]="ctor";a[a.getCallConstraints=1]="getCallConstraints";a[a.onupdate=2]="onupdate"})(K=a.method_id_StreamResolution_t||(a.method_id_StreamResolution_t={}));a.class_lib_info=new b.WebrpcClassLibInfo("webrpc_class_library",[new b.WebrpcClassInfo(c.EngineControl,"EngineControl",[new b.WebrpcMethodInfo(c.EngineControl,l.ctor,"ctor",!1),new b.WebrpcMethodInfo(c.EngineControl,l.version,"version",!0),new b.WebrpcMethodInfo(c.EngineControl,
l.feature_flags,"feature_flags",!0),new b.WebrpcMethodInfo(c.EngineControl,l.version_info,"version_info",!0,a.FEATURE_ms_teams_desktop_sharing),new b.WebrpcMethodInfo(c.EngineControl,l.osinfo,"osinfo",!0,a.FEATURE_ms_teams_osinfo),new b.WebrpcMethodInfo(c.EngineControl,l.endpoint_id,"endpoint_id",!0,a.FEATURE_ms_teams_endpoint_id),new b.WebrpcMethodInfo(c.EngineControl,l.set_client_info,"set_client_info",!1,a.FEATURE_ms_teams_client_info),new b.WebrpcMethodInfo(c.EngineControl,l.hardware_info,"hardware_info",
!0,a.FEATURE_ms_teams_hardware_info)]),new b.WebrpcClassInfo(c.RTCPeerConnection,"RTCPeerConnection",[new b.WebrpcMethodInfo(c.RTCPeerConnection,h.ctor,"ctor",!1),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.localDescription,"localDescription",!0),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.remoteDescription,"remoteDescription",!0),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.readyState,"readyState",!0),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.iceState,"iceState",!0),new b.WebrpcMethodInfo(c.RTCPeerConnection,
h.localStreams,"localStreams",!0),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.remoteStreams,"remoteStreams",!0),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.createOffer,"createOffer",!1),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.createAnswer,"createAnswer",!1),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.setLocalDescription,"setLocalDescription",!1),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.setRemoteDescription,"setRemoteDescription",!1),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.updateIce,
"updateIce",!0),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.addIceCandidate,"addIceCandidate",!0),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.addStream,"addStream",!0),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.removeStream,"removeStream",!0),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.close,"close",!0),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.iceConnectionState,"iceConnectionState",!0),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.iceGatheringState,"iceGatheringState",!0),new b.WebrpcMethodInfo(c.RTCPeerConnection,
h.signalingState,"signalingState",!0),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.onaddstream,"onaddstream",!0),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.onicecandidate,"onicecandidate",!0),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.oniceconnectionstatechange,"oniceconnectionstatechange",!0),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.onicegatheringstatechange,"onicegatheringstatechange",!0),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.onsignalingstatechange,"onsignalingstatechange",!0),new b.WebrpcMethodInfo(c.RTCPeerConnection,
h.onnegotiationneeded,"onnegotiationneeded",!0),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.onremovestream,"onremovestream",!0),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.getStats,"getStats",!1),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.getReceivers,"getReceivers",!1,a.FEATURE_ms_teams_speaking_indicator),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.getSenders,"getSenders",!1,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.addTrack,"addTrack",!1,a.FEATURE_ms_teams_pstn),
new b.WebrpcMethodInfo(c.RTCPeerConnection,h.removeTrack,"removeTrack",!1,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.ontrack,"ontrack",!0,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.setLocalDescription_v2,"setLocalDescription_v2",!1,a.FEATURE_ms_teams_webrtc_1dot0),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.setRemoteDescription_v2,"setRemoteDescription_v2",!1,a.FEATURE_ms_teams_webrtc_1dot0),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.addTransceiverWithTrack,
"addTransceiverWithTrack",!1,a.FEATURE_ms_teams_webrtc_1dot0),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.addTransceiverWithKind,"addTransceiverWithKind",!1,a.FEATURE_ms_teams_webrtc_1dot0),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.getTransceivers,"getTransceivers",!1,a.FEATURE_ms_teams_webrtc_1dot0),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.onconnectionstatechange,"onconnectionstatechange",!0,a.FEATURE_ms_teams_webrtc_1dot0),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.sctp,"sctp",!0,a.FEATURE_ms_teams_data_channel),
new b.WebrpcMethodInfo(c.RTCPeerConnection,h.ondatachannel,"ondatachannel",!0,a.FEATURE_ms_teams_data_channel),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.createDataChannel,"createDataChannel",!1,a.FEATURE_ms_teams_data_channel),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.getStats_v2,"getStats_v2",!1,a.FEATURE_ms_teams_webrtc_1dot0)]),new b.WebrpcClassInfo(c.RTCSessionDescription,"RTCSessionDescription",[new b.WebrpcMethodInfo(c.RTCSessionDescription,q.ctor,"ctor",!1),new b.WebrpcMethodInfo(c.RTCSessionDescription,
q.type,"type",!0),new b.WebrpcMethodInfo(c.RTCSessionDescription,q.sdp,"sdp",!0)]),new b.WebrpcClassInfo(c.RTCIceCandidate,"RTCIceCandidate",[new b.WebrpcMethodInfo(c.RTCIceCandidate,z.ctor,"ctor",!1),new b.WebrpcMethodInfo(c.RTCIceCandidate,z.candidate,"candidate",!0),new b.WebrpcMethodInfo(c.RTCIceCandidate,z.sdpMid,"sdpMid",!0),new b.WebrpcMethodInfo(c.RTCIceCandidate,z.sdpMLineIndex,"sdpMLineIndex",!0)]),new b.WebrpcClassInfo(c.RTCIceCandidateEvent,"RTCIceCandidateEvent",[new b.WebrpcMethodInfo(c.RTCIceCandidateEvent,
g.ctor,"ctor",!1),new b.WebrpcMethodInfo(c.RTCIceCandidateEvent,g.candidate,"candidate",!0)]),new b.WebrpcClassInfo(c.MediaDevices,"MediaDevices",[new b.WebrpcMethodInfo(c.MediaDevices,d.ctor,"ctor",!1),new b.WebrpcMethodInfo(c.MediaDevices,d.enumerateDevices,"enumerateDevices",!1),new b.WebrpcMethodInfo(c.MediaDevices,d.getDisplayMedia,"getDisplayMedia",!1,a.FEATURE_ms_teams_desktop_sharing),new b.WebrpcMethodInfo(c.MediaDevices,d.ondevicechange,"ondevicechange",!0,a.FEATURE_ms_teams_speaking_indicator),
new b.WebrpcMethodInfo(c.MediaDevices,d.enumerateDevicesV2,"enuerateDevicesV2",!1,a.FEATURE_ms_teams_enumerate_devices_v2)]),new b.WebrpcClassInfo(c.MediaDeviceInfo,"MediaDeviceInfo",[new b.WebrpcMethodInfo(c.MediaDeviceInfo,p.ctor,"ctor",!1),new b.WebrpcMethodInfo(c.MediaDeviceInfo,p.deviceId,"deviceId",!0),new b.WebrpcMethodInfo(c.MediaDeviceInfo,p.kind,"kind",!0),new b.WebrpcMethodInfo(c.MediaDeviceInfo,p.label,"label",!0),new b.WebrpcMethodInfo(c.MediaDeviceInfo,p.groupId,"groupId",!0)]),new b.WebrpcClassInfo(c.MediaStreamTrack,
"MediaStreamTrack",[new b.WebrpcMethodInfo(c.MediaStreamTrack,n.ctor,"ctor",!1),new b.WebrpcMethodInfo(c.MediaStreamTrack,n.clone,"clone",!1),new b.WebrpcMethodInfo(c.MediaStreamTrack,n.stop,"stop",!1),new b.WebrpcMethodInfo(c.MediaStreamTrack,n.getCapabilities,"getCapabilities",!1),new b.WebrpcMethodInfo(c.MediaStreamTrack,n.getSettings,"getSettings",!1),new b.WebrpcMethodInfo(c.MediaStreamTrack,n.applyConstraints,"applyConstraints",!1,a.FEATURE_ms_teams_desktop_sharing),new b.WebrpcMethodInfo(c.MediaStreamTrack,
n.kind,"kind",!0),new b.WebrpcMethodInfo(c.MediaStreamTrack,n.id,"id",!0),new b.WebrpcMethodInfo(c.MediaStreamTrack,n.label,"label",!0),new b.WebrpcMethodInfo(c.MediaStreamTrack,n.enabled,"enabled",!0),new b.WebrpcMethodInfo(c.MediaStreamTrack,n.muted,"muted",!0),new b.WebrpcMethodInfo(c.MediaStreamTrack,n.readyState,"readyState",!0),new b.WebrpcMethodInfo(c.MediaStreamTrack,n.onended,"onended",!0),new b.WebrpcMethodInfo(c.MediaStreamTrack,n.onmute,"onmute",!0),new b.WebrpcMethodInfo(c.MediaStreamTrack,
n.onunmute,"onunmute",!0),new b.WebrpcMethodInfo(c.MediaStreamTrack,n.getConstraints,"getConstraints",!1,a.FEATURE_ms_teams_mstrack_constraints)]),new b.WebrpcClassInfo(c.MediaStream,"MediaStream",[new b.WebrpcMethodInfo(c.MediaStream,k.ctor,"ctor",!1),new b.WebrpcMethodInfo(c.MediaStream,k.id,"id",!0),new b.WebrpcMethodInfo(c.MediaStream,k.getAudioTracks,"getAudioTracks",!1),new b.WebrpcMethodInfo(c.MediaStream,k.getVideoTracks,"getVideoTracks",!1),new b.WebrpcMethodInfo(c.MediaStream,k.getTracks,
"getTracks",!1),new b.WebrpcMethodInfo(c.MediaStream,k.getTrackById,"getTrackById",!1),new b.WebrpcMethodInfo(c.MediaStream,k.addTrack,"addTrack",!1),new b.WebrpcMethodInfo(c.MediaStream,k.removeTrack,"removeTrack",!1),new b.WebrpcMethodInfo(c.MediaStream,k.clone,"clone",!0),new b.WebrpcMethodInfo(c.MediaStream,k.active,"active",!0)]),new b.WebrpcClassInfo(c.NavigatorUserMedia,"NavigatorUserMedia",[new b.WebrpcMethodInfo(c.NavigatorUserMedia,v.ctor,"ctor",!1),new b.WebrpcMethodInfo(c.NavigatorUserMedia,
v.getUserMedia,"getUserMedia",!1),new b.WebrpcMethodInfo(c.NavigatorUserMedia,v.setCodecCapabilities,"setCodecCapabilities",!1,a.FEATURE_ms_teams_codec_capability),new b.WebrpcMethodInfo(c.NavigatorUserMedia,v.getCapabilities,"getRtpCapabilities",!1,a.FEATURE_ms_teams_webrtc_1dot0)]),new b.WebrpcClassInfo(c.MediaStreamEvent,"MediaStreamEvent",[new b.WebrpcMethodInfo(c.MediaStreamEvent,B.ctor,"ctor",!1),new b.WebrpcMethodInfo(c.MediaStreamEvent,B.stream,"stream",!0)]),new b.WebrpcClassInfo(c.VideoElement,
"VideoElement",[new b.WebrpcMethodInfo(c.VideoElement,t.ctor,"ctor",!1),new b.WebrpcMethodInfo(c.VideoElement,t.sinkId,"sinkId",!0),new b.WebrpcMethodInfo(c.VideoElement,t.connectTo,"connectTo",!1),new b.WebrpcMethodInfo(c.VideoElement,t.disconnect,"disconnect",!1),new b.WebrpcMethodInfo(c.VideoElement,t.setFrame,"setFrame",!1),new b.WebrpcMethodInfo(c.VideoElement,t.addClipRect,"addClipRect",!1),new b.WebrpcMethodInfo(c.VideoElement,t.removeClipRect,"removeClipRect",!1),new b.WebrpcMethodInfo(c.VideoElement,
t.onerror,"onerror",!0),new b.WebrpcMethodInfo(c.VideoElement,t.onvideoframechanged,"onvideoframechanged",!0),new b.WebrpcMethodInfo(c.VideoElement,t.placement,"placement",!0,a.FEATURE_ms_teams_video_placement)]),new b.WebrpcClassInfo(c.AudioElement,"AudioElement",[new b.WebrpcMethodInfo(c.AudioElement,m.ctor,"ctor",!1),new b.WebrpcMethodInfo(c.AudioElement,m.sinkId,"sinkId",!0),new b.WebrpcMethodInfo(c.AudioElement,m.srcObject,"srcObject",!0),new b.WebrpcMethodInfo(c.AudioElement,m.src,"src",!0),
new b.WebrpcMethodInfo(c.AudioElement,m.play,"play",!1),new b.WebrpcMethodInfo(c.AudioElement,m.pause,"pause",!1),new b.WebrpcMethodInfo(c.AudioElement,m.loop,"loop",!0,a.FEATURE_ms_teams_audio_notifications_loop)]),new b.WebrpcClassInfo(c.RTCRtpReceiver,"RTCRtpReceiver",[new b.WebrpcMethodInfo(c.RTCRtpReceiver,D.ctor,"ctor",!1,a.FEATURE_ms_teams_speaking_indicator),new b.WebrpcMethodInfo(c.RTCRtpReceiver,D.track,"track",!0,a.FEATURE_ms_teams_speaking_indicator),new b.WebrpcMethodInfo(c.RTCRtpReceiver,
D.getContributingSources,"getContributingSources",!1,a.FEATURE_ms_teams_speaking_indicator),new b.WebrpcMethodInfo(c.RTCRtpReceiver,D.getSynchronizationSources,"getSynchronizationSources",!1,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCRtpReceiver,D.transport,"transport",!0,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCRtpReceiver,D.rtcpTransport,"rtcptransport",!0,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCRtpReceiver,D.getCapabilities,"getCapabilities",!1,a.FEATURE_ms_teams_pstn),
new b.WebrpcMethodInfo(c.RTCRtpReceiver,D.getParameters,"getParameters",!1,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCRtpReceiver,D.getStats,"getStats",!1,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCRtpReceiver,D.getCapabilities_v2,"getCapabilities_v2",!1,a.FEATURE_ms_teams_webrtc_1dot0)]),new b.WebrpcClassInfo(c.RTCRtpSender,"RTCRtpSender",[new b.WebrpcMethodInfo(c.RTCRtpSender,y.ctor,"ctor",!1,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCRtpSender,y.track,"track",!0,a.FEATURE_ms_teams_pstn),
new b.WebrpcMethodInfo(c.RTCRtpSender,y.transport,"transport",!0,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCRtpSender,y.rtcpTransport,"rtcpTransport",!0,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCRtpSender,y.dtmf,"dtmf",!0,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCRtpSender,y.getCapabilities,"getCapabilities",!1,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCRtpSender,y.getParameters,"getParameters",!1,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCRtpSender,
y.setParameters,"setParameters",!1,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCRtpSender,y.replaceTrack,"replaceTrack",!1,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCRtpSender,y.getStats,"getStats",!1,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCRtpSender,y.setStreams,"setStreams",!1,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCRtpSender,y.getCapabilities_v2,"getCapabilities_v2",!1,a.FEATURE_ms_teams_webrtc_1dot0)]),new b.WebrpcClassInfo(c.RTCDtlsTransport,"RTCDtlsTransport",
[new b.WebrpcMethodInfo(c.RTCDtlsTransport,x.ctor,"ctor",!1,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCDtlsTransport,x.transport,"transport",!0,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCDtlsTransport,x.state,"state",!0,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCDtlsTransport,x.getRemoteCertificates,"getRemoteCertificates",!1,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCDtlsTransport,x.onstatechange,"onstatechange",!0,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCDtlsTransport,
x.onerror,"onerror",!0,a.FEATURE_ms_teams_pstn)]),new b.WebrpcClassInfo(c.RTCIceTransport,"RTCIceTransport",[new b.WebrpcMethodInfo(c.RTCIceTransport,r.ctor,"ctor",!1,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCIceTransport,r.role,"role",!0,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCIceTransport,r.component,"component",!0,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCIceTransport,r.state,"state",!0,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCIceTransport,r.gatheringState,
"gatheringState",!0,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCIceTransport,r.localcandidates,"localcandidates",!0,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCIceTransport,r.remotecandidates,"remotecandidates",!0,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCIceTransport,r.onstatechange,"onstatechange",!0,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCIceTransport,r.ongatheringstatechange,"ongatheringstatechange",!0,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCIceTransport,
r.onselectedcandidatepairchange,"onselectedcandidatepairchange",!0,a.FEATURE_ms_teams_pstn)]),new b.WebrpcClassInfo(c.RTCDTMFSender,"RTCDTMFSender",[new b.WebrpcMethodInfo(c.RTCDTMFSender,A.ctor,"ctor",!1,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCDTMFSender,A.insertDTMF,"insertDTMF",!1,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCDTMFSender,A.ontonechange,"ontonechange",!0,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCDTMFSender,A.canInsertDTMF,"canInsertDTMF",!0,a.FEATURE_ms_teams_pstn),
new b.WebrpcMethodInfo(c.RTCDTMFSender,A.toneBuffer,"toneBuffer",!0,a.FEATURE_ms_teams_pstn)]),new b.WebrpcClassInfo(c.RTCDTMFToneChangeEvent,"RTCDTMFToneChangeEvent",[new b.WebrpcMethodInfo(c.RTCDTMFToneChangeEvent,M.ctor,"ctor",!1,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCDTMFToneChangeEvent,M.tone,"tone",!0,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCDTMFToneChangeEvent,M.tone_buffer,"tone_buffer",!0,a.FEATURE_ms_teams_pstn)]),new b.WebrpcClassInfo(c.RTCIceCandidatePair,"RTCIceCandidatePair",
[new b.WebrpcMethodInfo(c.RTCIceCandidatePair,F.ctor,"ctor",!1,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCIceCandidatePair,F.local,"local",!0,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCIceCandidatePair,F.remote,"remote",!0,a.FEATURE_ms_teams_pstn)]),new b.WebrpcClassInfo(c.RTCRtpTransceiver,"RTCRtpTransceiver",[new b.WebrpcMethodInfo(c.RTCRtpTransceiver,J.ctor,"ctor",!1,a.FEATURE_ms_teams_webrtc_1dot0),new b.WebrpcMethodInfo(c.RTCRtpTransceiver,J.mid,"mid",!0,a.FEATURE_ms_teams_webrtc_1dot0),
new b.WebrpcMethodInfo(c.RTCRtpTransceiver,J.sender,"sender",!0,a.FEATURE_ms_teams_webrtc_1dot0),new b.WebrpcMethodInfo(c.RTCRtpTransceiver,J.receiver,"receiver",!0,a.FEATURE_ms_teams_webrtc_1dot0),new b.WebrpcMethodInfo(c.RTCRtpTransceiver,J.direction,"direction",!0,a.FEATURE_ms_teams_webrtc_1dot0),new b.WebrpcMethodInfo(c.RTCRtpTransceiver,J.currentDirection,"currentDirection",!0,a.FEATURE_ms_teams_webrtc_1dot0),new b.WebrpcMethodInfo(c.RTCRtpTransceiver,J.stop,"stop",!1,a.FEATURE_ms_teams_webrtc_1dot0),
new b.WebrpcMethodInfo(c.RTCRtpTransceiver,J.setCodecPreferences,"setCodecPreferences",!1,a.FEATURE_ms_teams_webrtc_1dot0)]),new b.WebrpcClassInfo(c.ScreenSharingRemote,"ScreenSharingRemote",[new b.WebrpcMethodInfo(c.ScreenSharingRemote,G.ctor,"ctor",!1,a.FEATURE_ms_teams_monitor_sharing),new b.WebrpcMethodInfo(c.ScreenSharingRemote,G.getScreensAsync,"getScreensAsync",!1,a.FEATURE_ms_teams_monitor_sharing),new b.WebrpcMethodInfo(c.ScreenSharingRemote,G.onscreentopologychanged,"onscreentopologychanged",
!0,a.FEATURE_ms_teams_monitor_sharing)]),new b.WebrpcClassInfo(c.ScreenSource,"ScreenSource",[new b.WebrpcMethodInfo(c.ScreenSource,L.ctor,"ctor",!1,a.FEATURE_ms_teams_monitor_sharing),new b.WebrpcMethodInfo(c.ScreenSource,L.srcid,"srcid",!0,a.FEATURE_ms_teams_monitor_sharing),new b.WebrpcMethodInfo(c.ScreenSource,L.deviceid,"deviceid",!0,a.FEATURE_ms_teams_monitor_sharing),new b.WebrpcMethodInfo(c.ScreenSource,L.type,"type",!0,a.FEATURE_ms_teams_monitor_sharing),new b.WebrpcMethodInfo(c.ScreenSource,
L.name,"name",!0,a.FEATURE_ms_teams_monitor_sharing),new b.WebrpcMethodInfo(c.ScreenSource,L.imagedata,"imagedata",!0,a.FEATURE_ms_teams_monitor_sharing),new b.WebrpcMethodInfo(c.ScreenSource,L.hwnd,"hwnd",!0,a.FEATURE_ms_teams_monitor_sharing),new b.WebrpcMethodInfo(c.ScreenSource,L.origin,"origin",!0,a.FEATURE_ms_teams_monitor_sharing),new b.WebrpcMethodInfo(c.ScreenSource,L.caption,"caption",!0,a.FEATURE_ms_teams_monitor_sharing),new b.WebrpcMethodInfo(c.ScreenSource,L.pid,"pid",!0,a.FEATURE_ms_teams_monitor_sharing),
new b.WebrpcMethodInfo(c.ScreenSource,L.bounds,"bounds",!0,a.FEATURE_ms_teams_gtc)]),new b.WebrpcClassInfo(c.E911Service,"E911Service",[new b.WebrpcMethodInfo(c.E911Service,P.ctor,"ctor",!1,a.FEATURE_ms_teams_e911),new b.WebrpcMethodInfo(c.E911Service,P.getE911Info,"getE911Info",!1,a.FEATURE_ms_teams_e911),new b.WebrpcMethodInfo(c.E911Service,P.onupdate,"onupdate",!0,a.FEATURE_ms_teams_e911)]),new b.WebrpcClassInfo(c.RTCDataChannel,"RTCDataChannel",[new b.WebrpcMethodInfo(c.RTCDataChannel,C.ctor,
"ctor",!1,a.FEATURE_ms_teams_data_channel),new b.WebrpcMethodInfo(c.RTCDataChannel,C.label,"label",!0,a.FEATURE_ms_teams_data_channel),new b.WebrpcMethodInfo(c.RTCDataChannel,C.ordered,"ordered",!0,a.FEATURE_ms_teams_data_channel),new b.WebrpcMethodInfo(c.RTCDataChannel,C.maxPacketLifeTime,"maxPacketLifeTime",!0,a.FEATURE_ms_teams_data_channel),new b.WebrpcMethodInfo(c.RTCDataChannel,C.maxRetransmits,"maxRetransmits",!0,a.FEATURE_ms_teams_data_channel),new b.WebrpcMethodInfo(c.RTCDataChannel,C.protocol,
"protocol",!0,a.FEATURE_ms_teams_data_channel),new b.WebrpcMethodInfo(c.RTCDataChannel,C.negotiated,"negotiated",!0,a.FEATURE_ms_teams_data_channel),new b.WebrpcMethodInfo(c.RTCDataChannel,C.id,"id",!0,a.FEATURE_ms_teams_data_channel),new b.WebrpcMethodInfo(c.RTCDataChannel,C.readyState,"readyState",!0,a.FEATURE_ms_teams_data_channel),new b.WebrpcMethodInfo(c.RTCDataChannel,C.bufferedAmount,"bufferedAmount",!0,a.FEATURE_ms_teams_data_channel),new b.WebrpcMethodInfo(c.RTCDataChannel,C.bufferedAmountLowThreshold,
"bufferedAmountLowThreshold",!0,a.FEATURE_ms_teams_data_channel),new b.WebrpcMethodInfo(c.RTCDataChannel,C.onopen,"onopen",!0,a.FEATURE_ms_teams_data_channel),new b.WebrpcMethodInfo(c.RTCDataChannel,C.onbufferedamountlow,"onbufferedamountlow",!0,a.FEATURE_ms_teams_data_channel),new b.WebrpcMethodInfo(c.RTCDataChannel,C.onerror,"onerror",!0,a.FEATURE_ms_teams_data_channel),new b.WebrpcMethodInfo(c.RTCDataChannel,C.onclosing,"onclosing",!0,a.FEATURE_ms_teams_data_channel),new b.WebrpcMethodInfo(c.RTCDataChannel,
C.onclose,"onclose",!0,a.FEATURE_ms_teams_data_channel),new b.WebrpcMethodInfo(c.RTCDataChannel,C.onmessage,"onmessage",!0,a.FEATURE_ms_teams_data_channel),new b.WebrpcMethodInfo(c.RTCDataChannel,C.close,"close",!1,a.FEATURE_ms_teams_data_channel),new b.WebrpcMethodInfo(c.RTCDataChannel,C.send_text,"send_text",!1,a.FEATURE_ms_teams_data_channel),new b.WebrpcMethodInfo(c.RTCDataChannel,C.send_binary,"send_binary",!1,a.FEATURE_ms_teams_data_channel)]),new b.WebrpcClassInfo(c.RTCSctpTransport,"RTCSctpTransport",
[new b.WebrpcMethodInfo(c.RTCSctpTransport,R.ctor,"ctor",!1,a.FEATURE_ms_teams_data_channel),new b.WebrpcMethodInfo(c.RTCSctpTransport,R.transport,"transport",!0,a.FEATURE_ms_teams_data_channel),new b.WebrpcMethodInfo(c.RTCSctpTransport,R.state,"state",!0,a.FEATURE_ms_teams_data_channel),new b.WebrpcMethodInfo(c.RTCSctpTransport,R.maxMessageSize,"maxMessageSize",!0,a.FEATURE_ms_teams_data_channel),new b.WebrpcMethodInfo(c.RTCSctpTransport,R.maxChannels,"maxChannels",!0,a.FEATURE_ms_teams_data_channel),
new b.WebrpcMethodInfo(c.RTCSctpTransport,R.onstatechange,"onstatechange",!0,a.FEATURE_ms_teams_data_channel)]),new b.WebrpcClassInfo(c.StreamResolution,"StreamResolution",[new b.WebrpcMethodInfo(c.StreamResolution,K.ctor,"ctor",!1,a.FEATURE_ms_teams_stream_resolution),new b.WebrpcMethodInfo(c.StreamResolution,K.getCallConstraints,"getCallConstraints",!1,a.FEATURE_ms_teams_stream_resolution),new b.WebrpcMethodInfo(c.StreamResolution,K.onupdate,"onupdate",!0,a.FEATURE_ms_teams_stream_resolution)])])},
545:function(b,a,c){var e=this&&this.__spreadArrays||function(){for(var a=0,b=0,c=arguments.length;b<c;b++)a+=arguments[b].length;for(var a=Array(a),e=0,b=0;b<c;b++)for(var k=arguments[b],h=0,l=k.length;h<l;h++,e++)a[e]=k[h];return a};Object.defineProperty(a,"__esModule",{value:!0});a.WsJsonUtil=a.ws_msg_type_t=void 0;var l=c(550),h;(function(a){a[a.req=0]="req";a[a.reply=1]="reply";a[a.event_req=2]="event_req";a[a.event_reply=3]="event_reply"})(h=a.ws_msg_type_t||(a.ws_msg_type_t={}));b=function(){function a(){}
a.createMessageByid=function(a,b,c,d,h,p){for(var g=[],B=6;B<arguments.length;B++)g[B-6]=arguments[B];(B=l.WebrpcClassLibInfoUtil.getMethodByid(d,h))&&B.isprop||(a=!1);return this.createMessage.apply(this,e([c,a,b,d,h,p],g))};a.createMessage=function(a,b,c,d,h,l){for(var g=[],p=6;p<arguments.length;p++)g[p-6]=arguments[p];return{v:"webrtc",hdr:{version:this._version,msg_type:this.getMsgType(a),modifier:b,destroy:c,proc:{iid:d,methodid:h}},objref:{oid:l},params:e(g)}};a.getMsgType=function(a){var b=
"";switch(a){default:b="req";break;case h.reply:b="reply";break;case h.event_req:b="event-req";break;case h.event_reply:b="event-reply"}return b};a._version=1;return a}();a.WsJsonUtil=b}},p={};return e(307)}()});

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],3:[function(require,module,exports){
/*
 * Copyright (c) 2018 Omnissa, LLC. All rights reserved.
 * This product is protected by copyright and intellectual property laws in the
 * United States and other countries as well as by international treaties.
 * -- Omnissa Restricted
 */
/**
 *
 * HorizonSDKforWebRTCRedir.js
 * Build: 14122140117
 *
 */
!function(e){("function"!=typeof define||!define.amd)&&"object"==typeof module&&module.exports?module.exports=e():window.HorizonWebRtcRedirectionAPI=e()}(function(e,t){"use strict";var C={createInstance:30,createInstanceResult:31,newVideoElement:32,removeVideoElement:33,updateVideoElement:34,newFrame:36,removeFrame:37,version:40,enumDevices:41,enumVideoDevice:42,createPeerConnection:43,createOffer:44,createAnswer:45,setLocalDescription:46,setRemoteDescription:47,addIceCandidate:48,addStream:49,getLocalStreams:50,getStats:51,removeStream:52,close:53,getUserMediaShim:54,mediaTrkStop:55,trackEnabled:56,newAudioElement:57,setSinkId:58,updateSrcObject:59,notifyAudio:60,mediaStreamClone:61,mediaTrackClone:62,getDisplayMediaShim:63,setDefaultSinkId:64,shimLogToWebSocket:65,insertDTMF:66,getReceivers:67,customClipRect:69,applyConstraints:70,getScreens:71,setScreenId:72,addTrack:74,removeTrack:75,senderCmd:76,createMediaStream:77,connectedStateChanged:78,updateObjectFit:79,transceiverCmd:300,dataChannelCmd:301,dataChannelEvent:302,getHWND:309,pcCmd:310},S={ERROR:0,WARN:1,INFO:2,DEBUG:3},G=2,y=0,T=1,_=2,d={DURATION:100,INTERTONEGAP:70},o=0,a=1,f=1,g=2,q="unified-plan",m={TRANSCEIVER_ADD_TRANSCEIVER:1,TRANSCEIVER_SET_CODECPREFERENCE:2,TRANSCEIVER_STOP:3,TRANSCEIVER_SET_DIRECTION:4},l=0,v=1,s=1,c=2,X=4,K=16,u={RPF_ACTIVE:1,RPF_CODEPAYLOADTYPE:2,RPF_DTX:4,RPF_MAXBITRATE:8,RPF_MAXFRAMERATE:16,RPF_PTIME:32,RPF_RID:64,RPF_SCALE_RESOLUTION_DOWNBY:128},Y=0,Z=1,b=0,w=1,Q=4,$=32,ee=2,n="52406081",E="1.0.",k=(E+="@"===n[0]?"00000":n,{UNSUPPORTED:"unsupported",CHROME:"chrome",CHROMIUM_EDGE:"chromium_edge",ELECTRON:"electron"}),te=2,ne=4,ie=1,re=2;const I="0";function oe(e){setTimeout(e,0)}function ae(e){if(!e||!e.ownerDocument)return 1;if((t=e.ownerDocument.defaultView)&&"function"==typeof t.getZoomFactor)return t.getZoomFactor(e);var{innerWidth:e,outerWidth:t}=t;if(0===e)return t;var n=document.body&&document.body.clientWidth?document.body.clientWidth:e;let i,r;return x==k.ELECTRON?i=Math.round((t-(e-n))/e*1e3)/1e3:x==k.CHROME||x==k.CHROMIUM_EDGE?(i=(t-8)/e*100,r=Ee(i),Math.round(r||i)/100):1}function se(e){var t;F.multiwindow&&j?(t=_e(e))?we[t]?L.debug("ensureFrame skipped due to frame already registered."):(j.send({cmd:"newFrame",frame:t,browser:x,customClipRect:1},-1),we[t]=e):L.debug("ensureFrame skipped due to no frameWnd"):L.debug("ensureFrame skipped due to feature not enabled or no connection.")}var de,p=-1,R=-1,ce=-1,ue=0,le=0,he=0,fe=0,ge=0,ve=0,i={},O={},P={},pe={},me={},be=window.navigator.mediaDevices.enumerateDevices,Ce=null,D={},Se={},M={},ye={},j=null,r=null,A=[],V=[],F={},we={},N={},Re={},Te=[],x=0<navigator.userAgent.indexOf("Electron")?k.ELECTRON:0<navigator.userAgent.indexOf("Chrome")?0<navigator.userAgent.indexOf("Edg")?k.CHROMIUM_EDGE:k.CHROME:k.UNSUPPORTED,L={logLevel:S.DEBUG,websocketlogLevel:S.INFO,logToConsole:!0,updateLogLevel:function(e,t){L.logLevel=e,L.websocketlogLevel=t},error:function(e){L.log("ERROR",e),r&&"function"==typeof r.error&&r.error(e)},warn:function(e){L.log("WARN",e),r&&"function"==typeof r.warn&&r.warn(e)},info:function(e){L.log("INFO",e),r&&"function"==typeof r.info&&r.info(e)},debug:function(e){L.log("DEBUG",e)},log:function(e,t){try{S[e]<=L.logLevel&&(L.logToConsole&&console&&("object"==typeof t?console.log(t):console.log(e+": "+t)),"string"==typeof t)&&S[e]<=L.websocketlogLevel&&j&&j.sendLogToWebSocket(t,e)}catch(e){}}},_e=function(e){return e},Ee=function(e){for(var t=[25,33,50,67,75,80,90,100,110,125,150,175,200,250,300,400,500],n=0;n<t.length;n++){var i=t[n],r=.05*i;if(Math.abs(i-e)<r)return i}};function ke(e,t,n){var i,r,o="_id#",a=e.indexOf(t);return-1==a?e+t+"1"+o+n:(i=e.substring(0,a),r=e.indexOf(o,a+t.length),e=Number(e.substring(a+t.length,r)),i+t+((e=isNaN(e)?0:e)+1)+o+n)}function Ie(e,t){function n(){return 1<=arguments.length&&"function"==typeof arguments[0]}function i(){return 2<=arguments.length&&"function"==typeof arguments[1]}function r(a,s,d,c){return new Promise(function(e,t){var n=new DOMException("createOffer cancelled","OperationError"),i=new DOMException("The RTCPeerConnection is closed","InvalidStateError"),r=a?e:d,o=a?t:c;j.send({cmd:"createOffer",options:s},u.id,function(e){O[u.id]?void 0===e.error?(L.debug("createOffer done"),L.debug(e.desc),e.transceivers&&v(e.transceivers),r(e.desc)):o(n):o(i)})})}function o(a,s,d,c){return new Promise(function(e,t){var n=new DOMException("createAnswer cancelled","OperationError"),i=new DOMException("The RTCPeerConnection is closed","InvalidStateError"),r=a?e:d,o=a?t:c;j.send({cmd:"createAnswer",options:s},u.id,function(e){O[u.id]?void 0===e.error?(L.debug("createAnswer done"),L.debug(e.desc),e.transceivers&&v(e.transceivers),r(e.desc)):o(n):o(i)})})}function a(a,s,d,c){return u._remoteDescription=s,new Promise(function(e,t){var n=new DOMException("setRemoteDescription cancelled","OperationError"),i=new DOMException("The RTCPeerConnection is closed","InvalidStateError"),r=a?e:d,o=a?t:c;j.send({cmd:"setRemoteDescription",desc:s},u.id,function(e){O[u.id]?void 0===e.error?(e.transceivers&&v(e.transceivers,e.transceiversRemoved),r()):o(n):o(i)})})}function s(a,s,d,c){return u._localDescription=s,new Promise(function(e,t){var n=new DOMException("setLocalDescription cancelled","OperationError"),i=new DOMException("The RTCPeerConnection is closed","InvalidStateError"),r=a?e:d,o=a?t:c;j.send({cmd:"setLocalDescription",desc:s},u.id,function(e){O[u.id]?void 0===e.error?(e.transceivers&&v(e.transceivers,e.transceiversRemoved),r()):o(n):o(i)})})}function d(a,s,d,c){return new Promise(function(e,t){var n=new DOMException("addIceCandidate cancelled","OperationError"),i=new DOMException("The RTCPeerConnection is closed","InvalidStateError"),r=a?e:d,o=a?t:c;j.send({cmd:"addIceCandidate",candidate:s},u.id,function(e){O[u.id]?void 0===e.error?r():o(n):o(i)})})}function c(i,r){return new Promise(function(e,t){new DOMException("getStats cancelled","InvalidAccessError");var n=i?e:r,e={cmd:"getStats"};i==w&&(e.capability=Q),j.send(e,u.id,function(e){var t;"function"==typeof n&&(void 0===e.error&&void 0!==e.stats&&void 0!==O[u.id]?i==w?n(e.stats):((t=new Oe)._create(e.stats),n(t)):n({}))})})}var u=this,l={},h={},f={},g=!1,v=(this.id=++ce,this._localStreams=[],this._remoteStreams=[],this._dataChannelMap={},this._dataChannelIdToShimIdMap={},this._iceConnectionState="new",e&&e.sdpSemantics===q&&(g=!0),this.isUnifiedPlan=function(){return g},Object.defineProperty(this,"iceConnectionState",{get:function(){return L.debug("get iceConnectionState:"+this._iceConnectionState),this._iceConnectionState},configurable:!0}),this._iceGatheringState="new",Object.defineProperty(this,"iceGatheringState",{get:function(){return L.debug("get iceGatheringState:"+this._iceGatheringState),this._iceGatheringState},configurable:!0}),this._signalingState="stable",Object.defineProperty(this,"signalingState",{get:function(){return L.debug("get signalingState:"+this._signalingState),this._signalingState},configurable:!0}),this._connectionState="new",F.connectionState&&Object.defineProperty(this,"connectionState",{get:function(){return L.debug("get connectionState:"+this._connectionState),this._connectionState},configurable:!0}),this._localDescription=null,Object.defineProperty(this,"localDescription",{get:function(){return L.debug("get localDescription:"+this._localDescription),this._localDescription},configurable:!0}),this._remoteDescription=null,Object.defineProperty(this,"remoteDescription",{get:function(){return L.debug("get remoteDescription:"+this._remoteDescription),this._remoteDescription},configurable:!0}),this.cleanUp=function(){var e,t;"complete"!==this._iceGatheringState&&(t={type:"icecandidate",candidate:null,target:this},this.onicecandidate&&this.onicecandidate(t),this._iceGatheringState="complete",e={type:"icegatheringstatechange",target:this},this.onicegatheringstatechange)&&this.onicegatheringstatechange(e),"disconnected"!=this._iceConnectionState&&(this._iceConnectionState="disconnected",t={type:"iceconnectionstatechange",target:this},this.oniceconnectionstatechange)&&this.oniceconnectionstatechange(t),this._localStreams=[],this._remoteStreams=[]},this.createOfferV0=function(e,t,n){r(b,n,e,t)},this.createOfferV1=function(){return n.apply(null,arguments)?this.createOfferV0.apply(this,arguments):r(w,arguments[0])},this.createAnswerV0=function(e,t,n){o(b,n,e,t)},this.createAnswerV1=function(){return n.apply(null,arguments)?this.createAnswerV0.apply(this,arguments):o(w,arguments[0])},this.setRemoteDescriptionV0=function(e,t,n){a(b,e,t,n)},this.setRemoteDescriptionV1=function(){return i.apply(null,arguments)?this.setRemoteDescriptionV0.apply(this,arguments):a(w,arguments[0])},this.setLocalDescriptionV0=function(e,t,n){s(b,e,t,n)},this.setLocalDescriptionV1=function(){return i.apply(null,arguments)?this.setLocalDescriptionV0.apply(this,arguments):s(w,arguments[0])},this.addIceCandidateV0=function(e,t,n){d(b,e,t,n)},this.addIceCandidateV1=function(){return i.apply(null,arguments)?this.addIceCandidateV0.apply(this,arugments):d(w,arguments[0])},this.createDTMFSender=function(e){var t;return"audio"!==e.kind?(L.error("DTMF only could be associated with audio track."),null):((t=new Pe).initPlanB(u.id,e),me[e.id]=t)},this.getStatsV0=function(e){return c(b,e)},this.getStatsV1=function(){return n.apply(null,arguments)?this.getStatsV0.apply(this,arguments):c(w)},this.getLocalStreams=function(){return g?(L.warn("getLocalStreams is not supported in the unified plan, use getSenders()"),[]):(L.debug("getLocalStreams():"+this._localStreams.length),this._localStreams)},this.getRemoteStreams=function(){return g?(L.warn("getRemoteStreams is not supported in the unified plan, use getReceivers()"),[]):(L.debug("getRemoteStreams():"+this._remoteStreams.length),this._remoteStreams)},this.addStream=function(e){this._localStreams.push(e),j.send({cmd:"addStream",sid:e.id},u.id)},this.removeStream=function(e){L.debug("RTCPeerConnection.removeStream(): "+e.id);var t=this._localStreams.indexOf(e);-1!=t?this._localStreams.splice(t,1):L.error("RTCPeerConnection.removeStream(): Failed to find stream: "+e.id),j.send({cmd:"removeStream",sid:e.id},u.id)},this.addTrackImplV1=function(e,t){var n,i;if(e&&t)return g?((n=new W(u)).initTrackOrKind(e),(i=(f[n.id]=n).sender).setTrack(e,t),j.send({cmd:"addTrack",transceiverId:n.id,tid:e.id,sid:t.id},u.id,function(e){void 0===e.error?v(e.transceivers):delete f[n.id]})):(i=h[e.id])?L.warn("RTCPeerConnection.addTrack: sender already exists."):((i=new J(u)).initPlanB(e,t),h[i.id]=i,j.send({cmd:"addTrack",transceiverId:"",tid:e.id,sid:t.id},u.id,function(e){void 0!==e.error&&delete h[i.id]})),i;throw new Error("both media track and stream need to be provided")},this.removeTrackImplV1=function(e){e?void 0===e._cap?L.error("sender object doesn't have the capability bits"):e.id?(e.removeTrack(),g||delete h[e.id]):L.error("RTCPeerConnection.removeTrack: not a valid sender object"):L.error("RTCPeerConnection.removeTrack: invalid sender.")},this.getSendersImplV1=function(){L.debug("RTCPeerConnection.getSendersImplV1");var e=[];if(g)for(var t in f){var n=f[t].sender;n&&e.push(n)}else for(var t in h)h[t]&&e.push(h[t]);return e},this.getTranceiversImplV1=function(){L.debug("RTCPeerConnection.getTranceiversImplV1");var e,t=[];for(e in f)L.debug("RTCPeerConnection.getTranceiversImplV1 id="+e),t.push(f[e]);return t},this.addTransceiverImplV1=function(e,t){var n=new W(u),i=(n.initTrackOrKind(e,t),f[n.id]=n,{cmd:"transceiverCmd",transceiverCmd:m.TRANSCEIVER_ADD_TRANSCEIVER,hint:"RTCRtpTransceiver.addTransceiver",transceiverId:n.id});if("audio"===e||"video"===e)i.trackOrKind=e;else{if(!(e instanceof B))return L.error("addTranceiver: Unknown type"),null;L.debug("addTranceiver with track is not Implemented"),i.trackOrKind=e.id}e={};if(t.direction&&(e.direction=t.direction),t.sendEncodings&&(e.sendEncodings=t.sendEncodings),t.streams){for(var r in streamIds=[],t.streams)streamIds.push(r.id);e.streams=streamIds}return i.init=e,j.send(i,u.id,function(e){void 0===e.error&&v(e.transceivers)}),n},this.createDataChannelImplV1=function(e,t){var n,i;return L.debug("RTCPeerConnection.createDataChannel: "+e+" option: "+JSON.stringify(this.options)),e?(n=++ve,(i=new Ve(u.id,n))._createChannel(e,t),u._dataChannelMap[n]=i):(L.error("RTCPeerConnection.createDataChannel: missing label"),null)},this._untrackDataChannel=function(e,t){void 0!==t&&u._dataChannelMap[t]&&(L.debug("Untrack datachannel: "+e+" shimId: "+t),delete u._dataChannelMap[t]),e!=R&&u._dataChannelIdToShimIdMap[e]&&(L.debug("Remove mapped datachannel: "+e+" shimId:"+t),delete u._dataChannelIdToShimIdMap[e])},function(e,t){for(var n in e){var i,r=e[n],o=f[r.id];(o||(o=r.id,L.debug("_updateTransceivers: addTransceiver id="+o),(i=new W(u)).initId(o),f[o]=i)).update(r)}if(t)for(var n in t){var a=t[n];L.debug("_updateTransceivers: removeTransceiver id="+a),delete f[a]}}),p=(this.close=function(){p=null,j.send({cmd:"close"},u.id,function(e){delete O[u.id]},!0)},null);this.getReceivers=function(){if(g){var e=[];if(f)for(var t in f){var n=f[t].receiver;n&&e.push(n)}}else{p||(p={},j.send({cmd:"getReceivers"},u.id,function(e){},!0));e=[];for(t in p)p[t]&&e.push(p[t])}return e},this.addEventListener=function(e,t){L.debug("RTCPeerConnection.addEventListener(): "+e),"function"!=typeof t?L.error("RTCPeerConnection.addEventListener(): The listener handler is invalid."):"string"!=typeof e?L.error("RTCPeerConnection.addEventListener(): The event name is invalid."):(void 0===l[e]&&(l[event]={listeners:[]}),l[e].listeners.push(t))},this.removeEventListener=function(e,t){L.debug("RTCPeerConnection.removeEventListener(): "+e),void 0===l[e]?L.error("RTCPeerConnection.removeEventListener(): Event does not exist = "+e):l[e].listeners=l[e].listeners.filter(function(e){return e.toString()!==t.toString()})},this._onReceiveDataChannelEvent=function(e){var t;void 0===e.shimId?L.error("RTCPeerConnection._onReceiveDataChannelEvent: missing shimId"):((t=e.shimId)==R&&e.channel&&void 0!==e.channel.id&&(L.debug("Try to find mapped "+e.channel.id+" in:"+JSON.stringify(u._dataChannelIdToShimIdMap)),void 0!==u._dataChannelIdToShimIdMap[e.channel.id])&&(t=u._dataChannelIdToShimIdMap[e.channel.id],L.debug("RTCPeerConnection._onReceiveDataChannelEvent: use mapped shimId: "+t)),t!=R&&u._dataChannelMap[t]?u._dataChannelMap[t]._onReceiveEvent(e):L.error("RTCPeerConnection._onReceiveDataChannelEvent: dataChannle "+t+" not existed"))},this._onReceiveEvent=function(e){if(void 0===e||void 0===e.evt)L.error("_onReceiveEvent(): evt property is invalid.");else{var t={type:e.evt,target:this};switch(e.details&&this._updateVars(e.details),e.evt){case"connectionstatechange":this.onconnectionstatechange&&this.onconnectionstatechange(t);break;case"negotiationneeded":this.onnegotiationneeded&&this.onnegotiationneeded(t);break;case"icecandidate":t.candidate=e.candidate,this.onicecandidate&&this.onicecandidate(t);break;case"icegatheringstatechange":this.onicegatheringstatechange&&this.onicegatheringstatechange(t);break;case"iceconnectionstatechange":this.oniceconnectionstatechange&&this.oniceconnectionstatechange(t);break;case"signalingstatechange":this.onsignalingstatechange&&this.onsignalingstatechange(t);break;case"ondatachannel":e.channel?this.ondatachannel&&(r=++ve,o=new Ve(u.id,r),void 0!==e.channel.id&&(L.debug("ondatachannel shimId: "+e.channel.id+" mapped to "+r),u._dataChannelIdToShimIdMap[e.channel.id]=r),(u._dataChannelMap[r]=o)._updateChannel(e.channel),t.channel=o,L.debug("ondatachannel shimId: "+r+" channel:"+JSON.stringify(e.channel)),this.ondatachannel(t)):L.warn("ondatachannel from legacy client");break;case"addStream":void 0===e.stream?L.debug("_onReceiveEvent(): stream property is invalid."):(t.stream=new U,t.stream._create(e.stream,e.peer),this._remoteStreams.push(t.stream),this.onaddstream&&this.onaddstream(t));break;case"removeStream":void 0===e.stream?L.debug("_onReceiveEvent(): stream property is invalid."):(t.stream=pe[e.stream],void 0===t.stream?L.debug("_onReceiveEvent(): no stream found."):(-1!=(o=this._remoteStreams.indexOf(t.stream))&&(e.trackId&&t.stream.removeTrackById(e.trackId),this._remoteStreams.splice(o,1)),this.onremovestream&&this.onremovestream(t)));break;case"ontrack":void 0===e.transceiver||void 0===e.stream?L.error("_onReceiveEvent ontrack property is invalid"):(n=e.transceiver.id,(i=f[n])||(L.debug("ontrack: add transceiver id="+n),(i=new W(u)).initId(n),f[n]=i),i.update(e.transceiver),(r=new U)._create(e.stream,e.peer),this._remoteStreams.push(r),t.transceiver=i,t.receiver=i.receiver,t.streams=[r],t.track=r.track[0],this.ontrack&&this.ontrack(t));break;case"tonechange":var n,i,r,o=null;(o=g?(n=e.transceiverId,(r=(i=f?f[n]:null)?i.sender:null)?r.dtmf:null):me[e.tid])?o.ontonechange&&o.ontonechange(e):L.debug("_onReceiveEvent(): tonechange, dtmfId is invalid  or not found.");break;case"onreceivers":(n=e.receivers)&&n.forEach(function(e){var t,n;e.id&&(t=e.id,"-"===e.op?delete p[t]:("+"===e.op&&delete p[t],(n=p[t])||(n=new z,p[t]=n),n.update(e)))});break;case"onsenders":(i=e.senders)&&i.forEach(function(e){var t=h[e.id];t&&t.update(e)});break;case"ontransceivers":v(e.transceivers)}}},this._updateVars=function(e){e.iceConnectionState&&(this._iceConnectionState=e.iceConnectionState),e.iceGatheringState&&(this._iceGatheringState=e.iceGatheringState),e.signalingState&&(this._signalingState=e.signalingState),e.connectionState&&(this._connectionState=e.connectionState),e.localDescription&&(this._localDescription=e.localDescription),e.remoteDescription&&(this._remoteDescription=e.remoteDescription)},this.setConfigurationImpl=function(e){j.send({cmd:"pcCmd",pcCmdId:ie,hint:"peerConnection.setConfiguration",config:e},u.id,function(e){null==e.error&&e.configuration})},this.restartIceImpl=function(){j.send({cmd:"pcCmd",pcCmdId:re,hint:"peerConnection.restartIce"},u.id)}}function Oe(){this.reports=[],this.result=function(){return this.reports},this._create=function(e){var n=this;e.forEach(function(e){var t=new Fe;t._create(e),n.reports.push(t)})}}function Pe(){this.canInsertDTMF=!0;var r=void 0,o=null,t="",a=null,s=null;this.initPlanB=function(e,t){r=e,o=t},this.initUnifiedPlan=function(e,t,n,i){t&&n?(r=e,o=i,a=t,s=n):L.error("RTCDTMFSender.initUnifiedPlan: invalid transceiver or sender")},Object.defineProperty(this,"toneBuffer",{get:function(){return L.debug("get DTMF tone buffer"+t),t},set:function(e){void 0===e&&L.warn("Set RTCDTMFSender.toneBuffer to undefined."),L.debug("set DTMF tone buffer"+e),t=e},configurable:!0}),this.insertDTMF=function(e,t,n){L.debug("insertDTMF audio tones: "+e),void 0===t&&(L.debug("Duration is not set, use default"),t=d.DURATION),void 0===n&&(L.debug("Gap is not set, use default"),n=d.INTERTONEGAP),j.send({cmd:"insertDTMF",transceiverId:a?a.id:"",senderId:s?s.id:"",tid:o.id,tones:e,duration:t,gap:n},r)}}function W(e){function t(e){L.info(e+"("+i+")")}var i,r=this,o=e,n="inactive",a="inactive",s=null,d=!1,c=null,u=null;this.initId=function(e){i=e,(c=new J(o)).initUnifiedPlan(r,null),u=new z},this.initTrackOrKind=function(e,t){var e=e instanceof B?e.kind:e,n="";"audio"===e?n="A":"video"===e&&(n="V"),i="Transceiver#"+n+ge.toString(),ge++,(c=new J(o)).initUnifiedPlan(r,t),u=new z,t&&t.direction&&(a=t.direction),t&&t.stream&&L.debug("RTCRtpTransceiver.init with stream is not implemented.")},this.update=function(e){e.currentDirection&&(n=e.currentDirection),e.direction&&(a=e.direction),e.mid&&(s=e.mid),void 0!==e.stopped&&(d=e.stopped),e.sender&&c&&c.update(e.sender),e.receiver&&u&&u.update(e.receiver)},Object.defineProperty(this,"id",{get:function(){return i},configurable:!0}),Object.defineProperty(this,"mid",{get:function(){return t("RTCRtpTransceiver.mid="+s),s}}),Object.defineProperty(this,"currentDirection",{get:function(){return t("RTCRtpTransceiver.currentDirection"),n},configurable:!0}),Object.defineProperty(this,"direction",{get:function(){return t("RTCRtpTransceiver.direction="+a),a},set:function(e){t("RTCRtpTransceiver.direction setter"),a=e;e={cmd:"transceiverCmd",transceiverCmd:m.TRANSCEIVER_SET_DIRECTION,hint:"RTCRtpTransceiver.direction",transceiverId:i,value:e};j.send(e,o.id)},configurable:!0}),Object.defineProperty(this,"receiver",{get:function(){return t("RTCRtpTransceiver.receiver"),u},configurable:!0}),Object.defineProperty(this,"sender",{get:function(){return t("RTCRtpTransceiver.sender"),c},configurable:!0}),Object.defineProperty(this,"stopped",{get:function(){return t("RTCRtpTransceiver stopped"),d},set:function(e){t("RTCRtpTransceiver stopped setter"),d=e},configurable:!0}),this.setCodecPreferences=function(e){t("RTCRtpTransceiver setCodecPreferences"),j.send({cmd:"transceiverCmd",transceiverCmd:m.TRANSCEIVER_SET_CODECPREFERENCE,hint:"RTCRtpTransceiver.setCodecPreference",transceiverId:i,codecs:e},o.id,function(e){void 0!==e.error&&t("RTCRtpTransceiver.setCodecPreferences failed.")})},this.stop=function(){t("RTCRtpTransceiver stop"),j.send({cmd:"transceiverCmd",transceiverCmd:m.TRANSCEIVER_STOP,hint:"RTCRtpTransceiver.stop",transceiverId:i},o.id,function(e){void 0!==e.error&&t("RTCRtpTransceiver.stop failed.")})}}function De(t,e){var r=this,n=e;this._srcObject=t.srcObject,this._id=le++,this._rawAudio=t,this.sendAudioElement=function(){var e={cmd:"newAudioElement",audioId:this._id};t.setAttribute("data-vdi_audioid",this._id),j.send(e,-1)},Object.defineProperty(t,"srcObject",{get:function(){return r._srcObject},set:function(e){void 0===e&&L.warn("Set audio.srcObject to undefined."),L.debug("Setting srcObject for audio element: "+r._id),L.debug(e),r._srcObject=void 0===e?null:e,r.sendSrcObject()},configurable:!0}),this.sendSrcObject=function(){var e=this._srcObject?this._srcObject.id:"null",t=this._srcObject?this._srcObject.peer:p;j.send({cmd:"updateSrcObject",mediaStreamId:e,audioId:this._id,type:"audio",streamPeer:t},-1)},Object.defineProperty(t,"sinkId",{get:function(){return r._sinkId},set:function(e){},configurable:!0}),t.setSinkId=function(i){return r._sinkId=i,L.debug("Audio.setSinkId for ID = "+r._id+" Value = "+i),0===(void 0!==F.setSinkId?F.setSinkId:0)?new Promise(function(e,t){j.send({cmd:"setSinkId",deviceId:i,audioId:r._id,context:"audioElement"},-1),e()}):new Promise(function(t,n){j.send({cmd:"setSinkId",deviceId:i,audioId:r._id,context:"audioElement"},-1,function(e){void 0===e.error?t():n(e.error)})})},t.play=function(){return Promise.resolve()},this.init=function(){se(n),this.sendAudioElement(),this._srcObject&&(L.debug("srcObject already set for audio: "+this._id),this.sendSrcObject()),L.debug(t)},this.init()}function Me(r,e){var t=this,n=e,o=_e(e),i=!1,s=(this._srcObject=r.srcObject,this._videoWidth=r.videoWidth,this._videoHeight=r.videoHeight,this._cloaked=!1,this._id=ue++,this._clientRect=null,this._bodyClientRect=null,this._colorKey=null,this._rawVideo=r,this._removeTimer=null,this._removed=!1,this._objectFit=r.style.objectFit,this._transform,this._dpiServerTranslate=!!F.multiwindow&&0!=(F.multiwindow&ee),this._styleObserver=new MutationObserver(function(e){e.forEach(function(e){t.handleStyleChanges(e,r)})}),function(e){e=Number(e).toString(16);return e=e.length<2?"0"+e:e});this.sendVideoElement=function(){this._colorKey=function(){for(var e="";""==e;){var t,n=Math.floor(16*Math.random())+1,i=Math.floor(16*Math.random())+1,r=Math.floor(16*Math.random())+1,e="#"+s(n)+s(i)+s(r),o=Object.keys(D);for(t in o){var a=D[o[t]];if(a&&a._colorKey==e){e="";break}}}return e}();var e,t={cmd:"newVideoElement",videoId:this._id,colorKey:this._colorKey,requestDpiTranslate:this._dpiServerTranslate?1:0,body:{},zoomFactor:ae(this._rawVideo)};for(e in o&&(t.frame=o),this._clientRect)t[e]=this._clientRect[e];for(e in this._bodyClientRect)t.body[e]=this._bodyClientRect[e];""!==this._objectFit&&(t.objectFit=this._objectFit),r.setAttribute("data-vdi_videoid",this._id),r.setAttribute("data-vmw_videoid",this._id),j.send(t,-1)},this.updateVideoElement=function(){var e=this.getBoundingClientRect(r),t=(this._cloaked||(e.right=e.left,e.bottom=e.top),this.getBoundingClientRect(document.body));if(e.left==this._clientRect.left&&e.right==this._clientRect.right&&e.top==this._clientRect.top&&e.bottom==this._clientRect.bottom&&t.left==this._bodyClientRect.left&&t.right==this._bodyClientRect.right&&t.top==this._bodyClientRect.top&&t.bottom==this._bodyClientRect.bottom)return!1;this._clientRect=e,this._bodyClientRect=t;var n,i={cmd:"updateVideoElement",videoId:this._id,requestDpiTranslate:this._dpiServerTranslate?1:0,transform:r.style.transform,body:{}};for(n in o&&(i.frame=o),e)i[n]=e[n];for(n in t)i.body[n]=t[n];""!==this._objectFit&&(i.objectFit=this._objectFit),i.zoomFactor=ae(this._rawVideo),L.debug(i),j.send(i,-1)},this.removeVideoElement=function(){var e={cmd:"removeVideoElement",videoId:t._id};o&&(e.frame=o),L.debug("RemoveVideoElement: "+t._id),j.send(e,-1),delete D[t._id],t._removeTimer=null,t._removed=!0},this.disposeVideo=function(){i=!0},this.cloak=function(){!0!==this._cloaked&&(this._colorKey?(r.style.backgroundColor=this._colorKey,this._styleObserver.observe(r,{attributes:!0,attributeFilter:["style"]}),this._cloaked=!0,this._poll=setInterval(function(){t.updateVideoElement()},500)):L.error("cloak(): Invalid color key."))},this.uncloak=function(){if(!1===this._cloaked)return!1;r.style.backgroundColor="",this._styleObserver.disconnect(),clearInterval(this._poll),this._cloaked=!1,this.updateVideoElement()},this.getBoundingClientRect=function(e){var e=e.getBoundingClientRect(),t=1;return this._dpiServerTranslate||"number"!=typeof window.devicePixelRatio||(t=window.devicePixelRatio),{left:e.left*t,top:e.top*t,bottom:e.bottom*t,right:e.right*t,width:e.width*t,height:e.height*t}},this.onReceiveEvent=function(e){var t;void 0===e||void 0===e.evt?L.error("onReceiveEvent(): evt property is invalid."):this._rawVideo?"loadedmetadata"===e.evt&&(""==this._objectFit&&""!==(t=window.getComputedStyle(this._rawVideo).objectFit)&&(L.debug("onReceiveEvent(): updating objectfit to "+t),this._objectFit=t,this.sendObjectFit()),void 0!==e.videoWidth&&(this._videoWidth=e.videoWidth),void 0!==e.videoHeight&&(this._videoHeight=e.videoHeight),t=new Event(e.evt),this._rawVideo.dispatchEvent(t)):L.error("onReceiveEvent(): Invalid rawVideo object.")},this.sendSrcObject=function(){var e=this._srcObject?this._srcObject.id:"null",t=this._srcObject?this._srcObject.peer:p;j.send({cmd:"updateSrcObject",mediaStreamId:e,videoId:this._id,type:"video",streamPeer:t},-1),this._srcObject?this.cloak():this.uncloak()},this.sendObjectFit=function(){j.send({cmd:"updateObjectFit",videoId:this._id,objectFit:this._objectFit},-1)},Object.defineProperty(r,"srcObject",{get:function(){return t._srcObject},set:function(e){t._removed?L.warn("Setting srcObject of zombie video element: "+t._id):(t._removeTimer&&(clearTimeout(t._removeTimer),t._removeTimer=null),void 0===e&&L.warn("Set video.srcObject to undefined."),L.debug("Setting srcObject for video element: "+t._id),L.debug(e),t._srcObject=e,t.sendSrcObject(),t._srcObject||(i?t.removeVideoElement():(L.debug("srcObject is null, setup removeTimer for "+t._id),t._removeTimer=setTimeout(t.removeVideoElement,5e3))))},configurable:!0}),Object.defineProperty(r,"videoWidth",{get:function(){return t._videoWidth},configurable:!0}),Object.defineProperty(r,"videoHeight",{get:function(){return t._videoHeight},configurable:!0}),Object.defineProperty(r.style,"objectFit",{get:function(){return console.log("keyword defineProperty get objectFit "+t._objectFit),t._objectFit},set:function(e){console.log("keyword defineProperty set objectFit "+e),t._objectFit=e,t.sendObjectFit()},configurable:!0}),Me.prototype.handleStyleChanges=function(e,t){"attributes"===e.type&&"style"===e.attributeName&&(L.debug("video style change in id = "+this._id+", object-fit = "+t.style.objectFit),L.debug(t),this._objectFit!==t.style.objectFit&&(L.debug("change in object-fit. Old = "+this._objectFit+", new = "+t.style.objectFit),this._objectFit=t.style.objectFit,this.sendObjectFit()),this._transform!=t.style.transform)&&(this._transform=t.style.transform,this.updateVideoElement())},this.init=function(){this._clientRect=this.getBoundingClientRect(r),this._bodyClientRect=this.getBoundingClientRect(document.body),se(n),this.sendVideoElement(),this._srcObject&&(L.debug("srcObject already set for video: "+this._id),this.sendSrcObject()),L.debug(r)},this.init()}function H(e){"function"==typeof Ce?(L.info("onVMEvent(): Fire event = "+JSON.stringify(e)),Ce(e)):L.warn("onVMEvent(): setVMEventCallback is not called yet.")}function je(){var a=this,o=null,s=y,w={},d=0,r=null,c=!1,u=void 0,t=!0,n=(Object.defineProperty(this,"state",{get:function(){return s},configurable:!0}),Object.defineProperty(this,"shortPollingIntervalMs",{get:function(){return 500}}),Object.defineProperty(this,"shortPollingTimeout",{get:function(){return 1e4}}),Object.defineProperty(this,"longPollingIntervalMs",{get:function(){return 5e3}}),Object.defineProperty(this,"isHorizonRegistryPresent",{get:function(){return c},set:function(e){c=e},configurable:!0}),Object.defineProperty(this,"sendVdiClientEventsOnError",{get:function(){return t},set:function(e){t=e},configurable:!0}),this.sendLogToWebSocket=function(e,t){return"string"==typeof e&&0!==e.length&&s===_&&(p({cmd:"shimLogToWebSocket",message:e,level:t},-1),!0)},this.isSocketConnected=function(){return s===_},this.isSocketOpen=function(){return!!o&&o.readyState===WebSocket.OPEN},this.init=function(){L.info("RequestManager.init(): Initializing Request Manager."),this.startPolling(500,1e4,this.sendEvents)},this.startPolling=function(e,t,n){var i;L.info("RequestManager.startPolling(): stop the old polling timer(if there is any) and start a new one"),a.stopPolling(),s!==y?L.info("RequestManager.startPolling(): Socket state not disconnected, exiting"):(i=t,L.info("intervalMs "+e+" timeout "+t),r=setInterval(function(){L.info("RequestManager: connectToHorizon"),a.connectToHorizon(),void 0!==i&&(i-=e,c||a.queryHorizonRegistry()),void 0!==i&&i<=0&&(a.stopPolling(),n)&&!0===c&&n()},e))},this.stopPolling=function(){L.info("RequestManager.stopPolling()"),null!==r&&(clearInterval(r),r=null,L.info("Stopped polling websocket"))},this.sendEvents=function(){var e={},e=(e.shimVersion=E,{event:"vdiClientConnected",version:e});try{H(e)}catch(e){L.warn("Catch exception in onVMEvent()"+JSON.stringify(e))}try{H({event:"vdiClientDisconnected",reason:"endpointUnsupported"})}catch(e){L.warn("Catch exception in onVMEvent()"+JSON.stringify(e))}j.startPolling(5e3)},this.queryHorizonRegistry=function(){window.getHorizonClientID().then(function(e){L.info("queryHorizonRegistry(): Horizon Client ID "+e),e&&j&&(j.isHorizonRegistryPresent=!0,L.info("queryHorizonRegistry(): isHorizonRegistryPresent true"))},function(){return L.error("queryHorizonRegistry(): Failed to query Horizon Client ID"),!1})},this.connectToHorizon=function(){s===y&&window.getHorizonWSSPort().then(function(e){"string"!=typeof e||0===e.length?(L.error("connectToHorizon(): Port is not valid"),b("Horizon HTML5 Server port not valid")):(L.info("connectToHorizon(): port is "+e),s=T,(o=new WebSocket("wss://view-localhost:"+e+"/")).binaryType="arraybuffer",o.onopen=h,o.onclose=f,o.onerror=g,o.onmessage=v)},function(){L.error("connectToHorizon(): Failed to receive port number"),b("Failed to receive port number")})},function(){return new Promise(function(e,t){x===k.ELECTRON?(L.error("getWindowHandleByTitle: function called on unsupported browser"),t("function called on unsupported browser")):u=setInterval(function(){i(e,t,u)},500)})}),i=function(t,e,n){var i="function"==typeof window.getHorizonWindowTitle?window.getHorizonWindowTitle():document.title;void 0===i?L.error("getWindowHandleByTitle:: cannot find the window with undefined title"):a.send({cmd:"getHWND",title:i},-1,function(e){void 0===e.error&&void 0!==e.hwnd&&e.hwnd!=I?(L.debug("getWindowHandleByTitle: received window handle"+e.hwnd),clearInterval(n),u=void 0,t(e.hwnd)):L.error("getWindowHandleByTitle:: cannot find the window that matches the title"+e.error)})},l=async function(e,t){e===I&&(L.info("Start polling window from server"),e=await n()),L.info("window handle ="+e),M.hwnd=e,window.getWindowReference=function(){return Promise.resolve(M.hwnd)},H(t)},h=function(){L.info("onWebSocketOpen(): Websocket opened"),j.stopPolling();var e="function"==typeof window.getHorizonWindowTitle?window.getHorizonWindowTitle():document.title;p({cmd:"createInstance",hwnd:M.hwnd,shimVersion:E,shimMinAgentVersion:1,customClipRect:1,allowFeatureChange:1,supportObjectFit:1,supportE911:0,streamBundleWithPeer:1,sdkConfig:Re,appName:de,appType:G,title:e,browser:x},-1,function(t){if(s!=y){t.uid&&L.info("onWebSocketOpen(): ["+t.uid+"] createInstanceDone"),"true"===t.traceEnabled&&L.updateLogLevel(S.DEBUG,S.DEBUG);var e=["agentOsVersion","clientOsVersion","haVersion","hcVersion","shimVersion","webrtcClientVer","webRTCRedirAgentVersion","webRTCRedirClientVersion"],n={};L.logToConsole=!!t.logToConsole,L.debug("VDI Shim: Log to console = "+L.logToConsole),L.debug("VDI createInstance = "+JSON.stringify(t));for(var i=0;i<e.length;i++)t[e[i]]?(n[e[i]]=t[e[i]],L.debug("onWebSocketOpen(): "+e[i]+" = "+t[e[i]])):L.warn("onWebSocketOpen(): Could not find property "+e[i]);t.clientOsVersion?t.clientOsVersion.startsWith("Win")?n.clientPlatform="Windows":t.clientOsVersion.startsWith("mac")?n.clientPlatform="Mac":t.clientOsVersion.startsWith("Lin")?n.clientPlatform="Linux":(L.error("Unknown client os: "+t.clientOsVersion),n.clientPlatform="Unknown"):(L.error("Missing client os information."),n.clientPlatform="Unknown"),L.debug("onWebSocketOpen(): clientPlatform = "+n.clientPlatform);var r={event:"vdiClientConnected",version:n};if(t.hcId&&(r.endpointId=t.hcId,L.debug("onWebSocketOpen(): ClientId = "+t.hcId)),"true"===t.allow&&"Mac"!==n.clientPlatform&&"Unknown"!==n.clientPlatform){s=_,F=t["api-capabilities"]||{},N=t.rtpCapabilities||{},Te=t.callConfigs||[],Array.isArray(t.featuresSupported)?(A=t.featuresSupported,L.info("onWebSocketOpen(): Supported features = "+JSON.stringify(A))):L.warn("onWebSocketOpen(): featureSupported property not valid");try{M.hwnd!==I?H(r):oe(function(){var e=t.hwnd||I;l(e,r)})}catch(e){L.warn("Catch exception in onVMEvent()"+JSON.stringify(e))}a.invokeDeviceChange()}else{try{H(r)}catch(e){L.warn("Catch exception in onVMEvent()"+JSON.stringify(e))}for(var o="",e=["errorCode","errorMsg"],i=0;i<e.length;i++)void 0!==t[e[i]]?(L.debug("onWebSocketOpen(): "+e[i]+": "+t[e[i]]),o+=e[i]+" = "+t[e[i]],i!=e.length-1&&(o+="; ")):L.warn("onWebSocketOpen(): Could not find property "+e[i]);try{H({event:"vdiClientDisconnected",reason:"endpointUnsupported",msg:o})}catch(e){L.warn("Catch exception in onVMEvent()"+JSON.stringify(e))}b("Horizon HTML5 Server connection not allowed")}}})},f=function(){L.info("onWebSocketClose(): Websocket closed"),b("Horizon HTML5 Server connection closed")},g=function(e){L.debug("onWebSocketError(): Websocket error");var t=y;j&&(t=j.state),b("Horizon HTML5 Server connection error: "+e.message),t==T&&(L.debug("Error in connecting socket"),j)&&j.sendVdiClientEventsOnError&&(L.error("Error in connecting to websocket"),j.stopPolling(),j.sendEvents(),j.sendVdiClientEventsOnError=!1)},v=function(e){if("object"==typeof e.data){var t=new Uint8Array(e.data),n=new DataView(e.data),i=n.getInt32(0),r=n.getInt32(36);if(1396920910!=i)L.warn("Unsupport binary data: "+i.toString(16));else{F.getScreens&&F.getScreens&$&&L.warn("New client should return string for getScreen.");for(var o=40,a=[];o+12<t.length;){var s=n.getInt32(o),d=(v=n.getInt32(o+4))*(p=n.getInt32(o+8))*4;if(v<0||p<0||o+12+d>t.length){L.warn("Invalid screen "+v+"X"+p+" offs:"+o+" size:"+d+" len:"+t.length);break}o+=12;var c=new Uint8ClampedArray(t.buffer,o,d),u=new ImageData(c,v,p),l=new Ae(s,"Screen "+s,u);o+=d,a.push(l),L.debug("Screen:"+s+": "+v+"X"+p+" offs:"+o+" size:"+d+" len:"+t.length)}var h=w[r];delete w[r],void 0!==h&&"function"==typeof h.responseCb&&h.responseCb(a)}}else if("string"!=typeof e.data)L.error("onWebSocketMessage(): invalid data type: "+typeof e.data);else{var i=e.data,f=JSON.parse(i);if(L.logToConsole&&console.log("onWebSocketMessage(): "+i),"number"==typeof f.id&&0<f.id){h=w[f.id];if(delete w[f.id],h&&"function"==typeof h.responseCb)if("getScreens"!==f.evt||f.screens)h.responseCb(f);else if(f.error)h.responseCb(f);else{var a=[],g="number"==typeof f.screens?f.screens:1;for(s=1;s<=g;s++){for(var v,p,m=4*(v=100)*(p=100),c=new Uint8ClampedArray(m),b=0;b<m;b+=4)c[b]=81,c[b+1]=144,c[b+2]=201,c[b+3]=255;u=new ImageData(c,v,p),l=new Ae(s,"Screen "+s,u);a.push(l)}h.responseCb(a)}}else if(void 0===f.evt)L.error("onWebSocketMessage(): evt property is invalid");else switch(f.evt){case"version":void 0===f.ver?L.error("onWebSocketMessage(): ver property is invalid."):L.info("onWebSocketMessage(): version = "+f.ver);break;case"negotiationneeded":case"icecandidate":case"icegatheringstatechange":case"iceconnectionstatechange":case"signalingstatechange":case"connectionstatechange":case"addStream":case"ontrack":case"tonechange":case"onreceivers":case"onsenders":case"ontransceivers":case"ondatachannel":case"removeStream":void 0!==f.peer&&void 0!==O[f.peer]?O[f.peer]._onReceiveEvent(f):L.error("onWebSocketMessage(): peerConnection is invalid.");break;case"loadedmetadata":void 0!==f.videoId&&void 0!==D[f.videoId]?D[f.videoId].onReceiveEvent(f):L.error("onReceiveCommand(): Invalid context.");break;case"devicechange":var C=new Event("devicechange");navigator.mediaDevices.dispatchEvent(C);break;case"vdiScreenTopologyChanged":try{H({event:"vdiScreenTopologyChanged"})}catch(e){L.warn("Catch exception in onVMEvent()"+JSON.stringify(e))}break;case"featuresSupportedChanged":for(var b in f.features){var S=f.features[b],y=A.indexOf(S.feature);"+"==S.op&&y<0?A.push(S.feature):"-"==S.op&&0<=y&&A.splice(y,1)}H({event:"vdiFeatureSupportedChanged",reason:f.reason||"endpoint changes supported features"});break;case"vdiE911InfoChanged":f.event="vdiE911InfoChanged",H(f);break;case"powerevent":C=f.eventData;R(C);break;case"dconopen":case"dconbufferedamountlow":case"dconclosing":case"dconerror":case"dconmessage":case"dconclose":void 0!==f.peer&&void 0!==O[f.peer]?O[f.peer]._onReceiveDataChannelEvent(f):L.error("Datachannel event: peerConnection is invalid.")}}},p=function(e,t,n,i){var r;t=null==t?-1:t,void 0===e?(r=new DOMException("Invalid command, operation cancelled","OperationError"),n?n({error:r}):L.error(r)):-1===t||O[t]?(e.feature=3,e.commandId=C[e.cmd],e.id=++d,e.peer=t,e.browser=x,e.player=1,"createInstance"===e.cmd&&(e.uid=2147483647&Date.now(),L.info("sendHelper(): ["+e.uid+"] createInstance")),"createInstance"!==e.cmd&&s!==_||(n&&(i?n():w[e.id]={id:e.id,webCommandId:e.commandId,responseCb:n}),o.send(JSON.stringify(e)))):(r=new DOMException("peer Id is not found, operation cancelled","OperationError"),n?n({error:r}):L.error(r))},m=(this.send=function(e,t,n,i){"getStats"!=e.cmd&&L.debug(JSON.stringify(e)),p(e,t,n,i)},this.invokeDeviceChange=function(){oe(function(){L.info("invokeDeviceChange(): Fire devicechange event");var e=new Event("devicechange");navigator.mediaDevices.dispatchEvent(e)})},this.sendBinary=function(e){s===_?o.send(e):L.warn("sendBinary(): WSS is not connected.")},function(){var e=Math.random()*Number.MAX_SAFE_INTEGER,e=Math.floor(e),e="v=0\no=- "+String(e)+" 2 IP4 127.0.0.1\n";return(e+="s=-\n")+"t= 0 0\n"+"a=msid-semantic: WMS"}),R=function(e){if(e==Y)try{L.info("onPowerEvent(): received suspend"),H({event:"vdiRequestEndCalls",reason:"vdiClientPowerEventSuspend"})}catch(e){L.warn("Catch exception in onVMEvent()"+JSON.stringify(e))}else if(e==Z){L.info("onPowerEvent(): received resume");try{H({event:"vdiRequestEndCalls",reason:"vdiClientPowerEventResume"})}catch(e){L.warn("Catch exception in onVMEvent()"+JSON.stringify(e))}}else L.error("powerevent: Invalid param.")},b=function(i,e){L.info("cleanup: Clean up all script resources");var t=s;if(s=e?T:y,Object.keys(w).forEach(function(e){var t,n=new DOMException(i,"OperationError");w[e].responseCb?w[e].webCommandId===C.createOffer||w[e].webCommandId===C.createAnswer?(t={desc:{sdp:m()}},L.debug("Resolving createoffer/createAnswer with desc "+t.desc),w[e].responseCb(t)):w[e].responseCb({error:n}):L.error(n)}),w={},o&&o.readyState===WebSocket.OPEN&&s==y&&o.close(),o=null,Object.keys(O).forEach(function(e){O[e].cleanUp()}),O={},Object.keys(P).forEach(function(e){e=P[e];e.onended&&e.onended()}),P={},pe={},A=[],V=[],we={},N={},Te=[],t===_){try{H({event:"vdiClientDisconnected",reason:"endpointDisconnected"})}catch(e){L.warn("Catch exception in onVMEvent()"+JSON.stringify(e))}a.invokeDeviceChange()}F={}}}function Ae(e,t,n,i){var r=this;this.id=e,this.name=t,this.image=n,this.icon=void 0,this.bounds=i||{x:0,y:0,width:0,height:0},this.getId=function(){return L.debug("getId "+r.id),r.id},this.getDeviceId=function(){return L.debug("getDeviceId "+r.id),We+"-"+r.id},this.getType=function(){return Le.Monitor},this.getPreview=function(e,t,n){return L.debug("ScreensAsync getPreview "),new Promise(function(e,t){t()})},this.getPreviewAsync=function(e,t,n){return L.debug("ScreensAsync getPreviewAsync"),n?new Promise(function(e,t){var n=document.createElement("canvas");n.getContext("2d").putImageData(r.image,0,0),e({data:n.toDataURL().replace("data:image/png;base64,","")})}):new Promise(function(e,t){e(r.image)})},this.getDescription=function(){return L.debug("ScreensAsync getDescription "),r.name},this.getIcon=function(e,t){return L.debug("ScreensAsync getIcon"),new Promise(function(e,t){e(r.image)})},this.getAppName=function(){return L.warn("getAppName: not support."),null},this.getBounds=function(){return(r.bounds.width<=0||r.bounds.height<=0)&&L.warn("getBounds: invalid bounds."),r.bounds}}function Ve(e,t){var s=this,d=(this.id=R,this.binaryType="arraybuffer",this.bufferedAmount=0,this.maxPacketLifeTime=0,this.maxRetransmits=0,this.negotiated=!1,this.ordered=!0,this.protocol="",this.readyState=!1,this.reliable=!0,this.label="",t),c=e,n=0;Object.defineProperty(this,"bufferedAmountLowThreshold",{get:function(){return n},set:function(e){void 0===e&&L.warn("RTCDataChannel bufferedAmountLowThreshold value undefined."),s.id!=R&&j.send({cmd:"dataChannelCmd",hint:"setBufferAmountLowThreshold",dataChannelCmd:h.SET_BUFFER_AMOUNT_LOW_THRESHOLD,dataChannelId:s.id,shimId:d,label:s.label,threshold:e},c),n=e},configurable:!0}),this._createChannel=function(e,t){s.id==R?(s.label=e,j.send({cmd:"dataChannelCmd",hint:"create",label:e,shimId:d,options:t,dataChannelCmd:h.CREATE},c)):L.warn("RTCDataChannel.create channel "+s.id+" already existed")},this._updateChannel=function(e){s.id=e.id,s.binaryType=e.binaryType,s.bufferedAmount=e.bufferedAmount,s.maxPacketLifeTime=e.maxPacketLifeTime,s.maxRetransmits=e.maxRetransmits,s.negotiated=e.negotiated,s.ordered=e.ordered,s.protocol=e.protocol,s.readyState=e.readyState,s.reliable=e.reliable,s.label=e.label},this.send=function(e){if(s.id!=R)if(e instanceof Blob){e.arrayBuffer();e.arrayBuffer().then(function(e){for(var t=new Uint8Array(e),n=t.byteLength,i="",r=0;r<n;r++)i+=String.fromCharCode(t[r]);j.send({cmd:"dataChannelCmd",label:s.label,dataChannelId:s.id,shimId:d,dataChannelCmd:h.SEND,hint:"send",data:window.btoa(i),dataType:"binary",dataLen:n},c)})}else{var t=null,n=0,i="binary";if("string"==typeof e||e instanceof String)t=window.btoa(e),i="string",n=e.length;else{for(var r=new Uint8Array(e),n=r.byteLength,o="",a=0;a<n;a++)o+=String.fromCharCode(r[a]);o&&(t=window.btoa(o))}t?j.send({cmd:"dataChannelCmd",label:s.label,dataChannelId:s.id,shimId:d,hint:"send",dataChannelCmd:h.SEND,data:t,dataType:i,dataLen:n},c):L.warn("RTCDataChannel.send: Unsupported data format")}else L.error("RTCDataChannel.send: invalid datachannel id.")},this.close=function(){O[c]?(j.send({cmd:"dataChannelCmd",hint:"close",label:s.label,dataChannelId:s.id,shimId:d,dataChannelCmd:h.CLOSE},c),O[c]._untrackDataChannel(s.id,d)):L.warn("RTCDataChannel.close: peerconnection is untracked.")},this._onReceiveEvent=function(e){if(void 0===e||void 0===e.evt)L.error("_onReceiveEvent(): evt property is invalid.");else{var t={target:this};switch(e.evt){case"dconopen":this.onopen&&(this._updateChannel(e.channel),this.onopen(t));break;case"dconbufferedamountlow":this.onbufferedamountlow&&this.onbufferedamountlow(t);break;case"dconerror":this.onerror&&this.onerror(t);break;case"dconmessage":if(this.onmessage){if("string"===e.dataType)t.data=window.atob(e.data);else{var n=window.atob(e.data),i=n.length;t.data=new Uint8Array(i);for(var r=0;r<i;r++)t.data[r]=n.charCodeAt(r)}this.onmessage(t)}break;case"dconclose":this.onclose&&this.onclose(t)}}}}var U=function(e){var n=this,i={};this._objectId=++he,this.id="",this.peer=p,this.active=!1,this.ended=!1,this.cloned=null,this.track=[],this.createMediaStream=function(e){void 0===e||Array.isArray(e)?(this.id="Stream#"+n._objectId,L.debug("MediaStream.createMediaStream() with "+n.id+"MediaStreamTracks num ="+!(e=e)?0:e.length),this.active=!1,this.track=[],void 0!==e&&e.forEach(function(e){e&&e instanceof B&&n.track.push(e)}),j.send({cmd:"createMediaStream",sid:n.id,tracks:n.track},-1)):L.debug("MediaStream.createMediaStream failed with invalid parameter")},this._create=function(e,t){this.id=e.id,this.peer=t,this.active=e.active,this.track=[],e.track.forEach(function(e){var t=new B;t._create(e),n.track.push(t)}),pe[this.id]=this},this.dispatchEvent=function(t){L.debug("MediaStream.dispatchEvent(): "+t.type),void 0!==i[event.type]&&i[event.type].listeners.forEach(function(e){e(t)}),"active"===t.type?this.onactive&&this.onactive(t):"addtrack"===t.type?this.onaddtrack&&this.onaddtrack(t):"inactive"===t.type?this.oninactive&&this.oninactive(t):"removetrack"===t.type?this.onremovetrack&&this.onremovetrack(t):L.debug("MediaStream.dispatchEvent(): Undefined event: ",t.type)},this.addEventListener=function(e,t){L.debug("MediaStream.addEventListener(): "+e),"function"!=typeof t?L.error("MediaStream.addEventListener(): The listener handler is invalid."):"string"!=typeof e?L.error("MediaStream.addEventListener(): The event name is invalid."):(void 0===i[e]&&(i[event]={listeners:[]}),i[e].listeners.push(t))},this.removeEventListener=function(e,t){L.debug("MediaStream.removeEventListener(): "+e),void 0===i[e]?L.error("MediaStream.removeEventListener(): Event does not exist = "+e):i[e].listeners=i[e].listeners.filter(function(e){return e.toString()!==t.toString()})},this.addTrack=function(t){L.debug("MediaStream.addTrack(): "+t.id);var n=!1;this.track.forEach(function(e){e.id==t.id&&(n=!0)}),n||this.track.push(t)},this.removeTrack=function(e){L.debug("MediaStream.removeTrack(): "+e.id);for(var t=0;t<this.track.length;t++)if(this.track[t].id==e.id)return void this.track.splice(t,1)},this.removeTrackById=function(e){L.debug("MediaStream.removeTrackById(): "+e);for(var t,n=0;n<this.track.length;n++)if(this.track[n].id==e)return t={type:"removetrack",track:this.track[n]},this.dispatchEvent(t),void this.track.splice(n,1)},this.getTracks=function(){return L.debug("["+this.id+"]MediaStream.getTracks(): "+this.track.length),L.debug(this.track),this.track},this.getAudioTracks=function(){var t=[];return this.track.forEach(function(e){"audio"==e.kind&&t.push(e)}),L.debug("MediaStream.getAudioTracks(): Audio tracks = "+t.length),t},this.getVideoTracks=function(){var t=[];return this.track.forEach(function(e){"video"==e.kind&&t.push(e)}),L.debug("MediaStream.getVideoTracks(): Video tracks = "+t.length),t},this.getTrackById=function(t){var n=null;return L.debug("MediaStream.getTrackById(): "+t),this.track.forEach(function(e){e.id==t&&(n=e)}),n},this.clone=function(){if(L.debug("MediaStream.clone(): Clone mediaStream = "+this.id),this.cloned)return L.debug("MediaStream.clone(): Use cached clone: "+this.cloned.id),this.cloned;var e=new U,t=ke(this.id,"StreamCln#",e._objectId),n=[];e._create({id:t,active:this.active,track:[]},this.peer);for(var i=0;i<this.track.length;i++){var r=this.track[i]._internalClone();e.track.push(r),n.push({tid:this.track[i].id,cid:r.id})}return j.send({cmd:"mediaStreamClone",sid:this.id,cid:e.id,streamPeer:this.peer,trackClones:n},-1),L.debug("MediaStream.clone(): MediaStream cloned = "+e.id+" from = "+this.id),e}},B=function(){var n={};this._objectId=++fe,this.remote=!1,this.readonly=!1,this.contentHint="",this.id="",this.kind="",this.label="",this.muted=!1,this.readyState="",this._enabled=!1,Object.defineProperty(this,"enabled",{get:function(){return this._enabled},set:function(e){void 0===(this._enabled=e)&&L.warn("Set MediaStreamTrack.enabled to undefined."),j.send({cmd:"trackEnabled",trackId:this.id,enabled:e},-1)},configurable:!0}),this._create=function(e){this._update(e),P[this.id]=this},this._update=function(e){e&&(this.contentHint=e.contentHint,this.id=e.id,this.kind=e.kind,this.label=e.label,this._enabled=e.enabled,this.muted=e.muted,this.readyState=e.readyState,this.remote=e.remote,this.readonly=e.readonly,this.settings=e.settings)},this.dispatchEvent=function(e){"started"==e.type?this.onstarted&&this.onstarted(e):"ended"==e.type?this.onended&&this.onended(e):"isolationchange"==e.type?this.onisolationchange&&this.onisolationchange(e):"mute"==e.type?this.onmute&&this.onmute(e):"unmute"==e.type?this.onunmute&&this.onunmute(e):"overconstrained"==e.type?this.onoverconstrained&&this.onoverconstrained(e):L.debug("Undefined media track evt: ",e.type)},this.addEventListener=function(e,t){L.debug("MediaStreamTrack.addEventListener(): "+e),"function"!=typeof t?L.error("MediaStreamTrack.addEventListener(): The listener handler is invalid."):"string"!=typeof e?L.error("MediaStreamTrack.addEventListener(): The event name is invalid."):(void 0===n[e]&&(n[event]={listeners:[]}),n[e].listeners.push(t))},this.removeEventListener=function(e,t){L.debug("MediaStreamTrack.removeEventListener(): "+e),void 0===n[e]?L.error("MediaStreamTrack.removeEventListener(): Event does not exist = "+e):n[e].listeners=n[e].listeners.filter(function(e){return e.toString()!==t.toString()})},this.applyConstraints=function(e){var r=this.id,o=this.settings;return L.debug("MediaStreamTrack.applyConstraints()"),new Promise(function(t,n){var i=new DOMException("applyConstraints failed","OperationError");j.send({cmd:"applyConstraints",constraints:e,trkid:r},-1,function(e){void 0===e.error?(void 0!==e.settings.width&&void 0!==e.settings.height&&(o.width=e.settings.width,o.height=e.settings.height),t()):n(i)})})},this.getConstraints=function(){L.debug("MediaStreamTrack.getConstraints(): Not implemented")},this.getCapabilities=function(){L.debug("MediaStreamTrack.getCapabilities(): Not implemented")},this.getSettings=function(){return L.debug("MediaStreamTrack.getSettings(): "+JSON.stringify(this.settings)),this.settings},this.stop=function(){j.send({cmd:"mediaTrkStop",trkid:this.id})},this._internalClone=function(){var e=new B,t=ke(this.id,"TrackCln#",e._objectId);return e._create({id:t,kind:this.kind,label:this.label,enabled:this.enabled,muted:this.muted,readyState:this.readyState,remote:this.remote,readonly:this.readonly,settings:this.settings}),e},this.clone=function(){var e=this._internalClone();return j.send({cmd:"mediaTrackClone",tid:this.id,cid:e.id},-1),e}},Fe=function(){this.stats={},this._create=function(e){this.stats=e,this.type=e.type,this.id=e.id,this.timestamp=e.timestamp,delete this.stats.type,delete this.stats.id,delete this.stats.timestamp},this.names=function(){return Object.keys(this.stats)},this.stat=function(e){return this.stats[e]}},z=function(){function e(e){var t,n=[];for(t in r){var i=r[t];i.type&&i.type===e&&n.push(i)}return n}var n={},r={};this.update=function(e){var t;(t=e)&&("+"===t.op&&(n=null,r={}),t.track&&(n?Object.keys(t.track).forEach(function(e){"enabled"!=e?n[e]=t.track[e]:n._enabled=t.track[e]}):(n=new B)._update(t.track)),t.sources)&&t.sources.forEach(function(t){var n,e=t.source;"-"===t.op?delete r[e]:("+"===t.op&&(delete r[e],r[e]={}),n=r[e],Object.keys(t).forEach(function(e){n[e]=t[e]}))})},Object.defineProperty(this,"track",{get:function(){return n},configurable:!0}),this.getContributingSources=function(){return e(a)},this.getSynchronizationSources=function(){return e(o)}},J=(z.getCapabilities=function(e){if(L.info("RTCRtpReceiver.getCapabilities for kind = "+e),N.receiver&&N.receiver[e])return N.receiver[e]},function(e){var i=this,n=!1,r=(this._cap=F.sender||0,e),o=null,a=null,t=l,s="",d=null,c=null,u=null;this.initPlanB=function(e,t){L.debug("RtcRtpSender.initPlanB"),n=!1,o=t,s=e?e.id:"",a=e,d=new Ne(i)},this.initUnifiedPlan=function(e,t){e?(n=!0,c=e,d=new Ne(i),t&&t.sendEncodings):L.error("RTCRtpSender.initUnifiedPlan: Invalid transceiver")},Object.defineProperty(this,"dtmf",{get:function(){return n?(u||(u=new Pe).initUnifiedPlan(r.id,c,this,a),u):r?r.createDTMFSender(a):null},configurable:!0}),Object.defineProperty(this,"rtcpTransport",{get:function(){L.debug("RTCRtpSender.rtcpTransport getter: Not implemented")},configurable:!0}),Object.defineProperty(this,"track",{get:function(){return L.debug("RTCRtpSender.track Transceiver="+(c?c.id:"")+")"),a},configurable:!0}),Object.defineProperty(this,"transport",{get:function(){L.debug("RTCRtpSender.transport getter: Not implemented")},configurable:!0}),Object.defineProperty(this,"id",{get:function(){return L.debug("RTCRtpSender.id:"+s),s},configurable:!0}),Object.defineProperty(this,"proxyState",{get:function(){return t},configurable:!0}),this.setTrack=function(e,t){a=e,o=t},this.removeTrack=function(){a?r?(j.send({cmd:"removeTrack",transceiverId:c?c.id:"",senderId:s},r.id),a=d=null):L.error("RTCRtpSender.removeTrack: invalid peer object."):L.error("RTCRtpSender.removeTrack: track is already removed.")},this.update=function(e){if(r)if(e){if(c)e.id?s=e.id:L.error("RTCRtpSender.update invalid id");else if(s!=e.id||!d)return void L.error("RTCRtpSender.update Invalid state detected, self = "+JSON.stringify(i));e.track&&a&&a._update(e.track),e.parameters&&d&&d.update(e.parameters),t=v}else L.error("RTCRtpSender.update: invalid sender object.");else L.error("RTCRtpSender.update: invalid peer object.")},this.getParameters=function(){return L.debug("RTCRtpSender.getParameters"),r?(t===l&&L.warn("RTCRtpSender.getParameters without peer, use cached value and the behavior will be undefined."),d):(L.error("RTCRtpSender.getParameters: invalid peer object."),null)},this.setParameters=function(e){return L.debug("RTCRtpSender.setParameters"),new Promise(function(n,i){r?j.send({cmd:"senderCmd",senderCmd:f,hint:"setParameter",transceiverId:c?c.id:"",senderId:s,parameters:e.modifiedValues()},r.id,function(e){var t;void 0===e.error?(t=Array.isArray(e.senders)&&0<e.senders.length?e.senders[0]:null)&&t.id==s?(d.update(t.parameters),n()):(L.debug("RTCRtpSender.setParameters invaild response."),t=new DOMException("setParameters failed","OperationError"),i(t)):i(e.error)}):i(new DOMException("RTCRtpSender.setParameters: invalid peer object","OperationError"))})},this.getStats=function(){L.debug("RTCRtpSender.getStats: Not implemented")},this.replaceTrack=function(e){return L.debug("RTCRtpSender.replaceTrack"),new Promise(function(t,n){r?(j.send({cmd:"senderCmd",senderCmd:g,hint:"replaceTrack",transceiverId:c?c.id:"",senderId:s,sid:o?o.id:"",trackId:a?a.id:"",newTrackId:e?e.id:""},r.id,function(e){void 0===e.error?t():n(e.error)}),a=e,d=new Ne(i)):n(new DOMException("RTCRtpSender.replaceTrack no peer","OperationError"))})}}),Ne=(J.getCapabilities=function(e){if(L.info("RTCRtpSender.getCapabilities for kind = "+e),N.sender&&N.sender[e])return N.sender[e]},function(t){function e(e){t&&t.proxyState!=l?L.debug("RTCRtpSendParameters."+e):L.warn("RTCRtpSendParameters."+e+": sender is pending.")}var n,i,r,o=[],a=0;o[0]=new xe;Object.defineProperty(this,"degradationPreference",{get:function(){return e("degradationPreference getter"),n},set:function(e){n=e,a|=s},configurable:!0}),Object.defineProperty(this,"encodings",{get:function(){return e("encodings getter"),o},set:function(e){o=e,a|=c},configurable:!0}),Object.defineProperty(this,"priority",{get:function(){return e("priority getter"),i},set:function(e){i=e,a|=X},configurable:!0}),Object.defineProperty(this,"transactionId",{get:function(){return e("transactionId getter"),r},set:function(e){r=e,a|=K},configurable:!0}),this.update=function(e){0==(a&s)&&(n=e.degradationPreference),0==(a&c)&&e.encodings&&(o=[],e.encodings.forEach(function(e){var t=new xe;t.update(e),o.push(t)})),0==(a&X)&&(i=e.priority),0==(a&K)&&(r=e.transactionId)},this.modifiedValues=function(){var e={},t=((a&s||void 0!==n)&&(e.degradationPreference=n),[]);return o.forEach(function(e){e=e.modifiedValues();Object.keys(e).length&&t.push(e)}),t.length&&(e.encodings=t),(a&X||void 0!==i)&&(e.priority=i),a=0,e}}),xe=function(){var t,n,i,r,o,a,s,d=!0,c=0;Object.defineProperty(this,"active",{get:function(){return d},set:function(e){d=e,c|=u.RPF_ACTIVE},configurable:!0}),Object.defineProperty(this,"codecPayloadType",{get:function(){return t},configurable:!0}),Object.defineProperty(this,"dtx",{get:function(){return n},set:function(e){dtx=e,c|=u.RPF_DTX},configurable:!0}),Object.defineProperty(this,"maxBitrate",{get:function(){return i},set:function(e){i=e,c|=u.RPF_MAXBITRATE},configurable:!0}),Object.defineProperty(this,"maxFramerate",{get:function(){return r},set:function(e){r=e,c|=u.RPF_MAXFRAMERATE},configurable:!0}),Object.defineProperty(this,"ptime",{get:function(){return o},set:function(e){o=e,c|=u.RPF_PTIME},configurable:!0}),Object.defineProperty(this,"rid",{get:function(){return a},set:function(e){a=e,c|=u.RPF_RID},configurable:!0}),Object.defineProperty(this,"scaleResolutionDownBy",{get:function(){return s},set:function(e){s=e,c|=u.RPF_SCALE_RESOLUTION_DOWNBY},configurable:!0}),this.update=function(e){0==(c&u.RPF_ACTIVE)&&(d=e.active),0==(c&u.RPF_CODEPAYLOADTYPE)&&(t=e.codecPayloadType),0==(c&u.RPF_DTX)&&(n=e.dtx),0==(c&u.RPF_MAXBITRATE)&&(i=e.maxBitrate),0==(c&u.RPF_MAXFRAMERATE)&&(r=e.maxFramerate),0==(c&u.RPF_PTIME_)&&(o=e.ptime),0==(c&u.RPF_RID)&&(a=e.rid),0==(c&u.RPF_SCALE_RESOLUTION_DOWNBY)&&(s=e.scaleResolutionDownBy)},this.modifiedValues=function(){var e={};return(c&u.RPF_ACTIVE||void 0!==d)&&(e.active=d),(c&u.RPF_CODEPAYLOADTYPE||void 0!==t)&&(e.codecPayloadType=t),(c&u.RPF_DTX||void 0!==n)&&(e.dtx=n),(c&u.RPF_MAXBITRATE||void 0!==i)&&(e.maxBitrate=i),(c&u.RPF_MAXFRAMERATE||void 0!==r)&&(e.maxFramerate=r),(c&u.RPF_PTIME||void 0!==o)&&(e.ptime=o),(c&u.RPF_RID||void 0!==a)&&(e.rid=a),(c&u.RPF_SCALE_RESOLUTION_DOWNBY||void 0!==s)&&(e.scaleResolutionDownBy=s),c=0,e}},Le={Monitor:1,Window:2,Camera:3},We="VDI_Mon",h={CREATE:1,SEND:2,SET_BUFFER_AMOUNT_LOW_THRESHOLD:3,CLOSE:4};return{initSDK:function(e,t,n,i){if("function"!=typeof n)return L.error("initSDK(): The event callback function is not valid."),!1;L.info("setVMEventCallback(): Set event callback"),Ce=n,de=t||"",r=e,L.info("init(): VMware VDI shim version = "+E),i&&(Re=i);n=1;return i&&!isNaN(i.numOfCallConfigs)&&(n=t=(t=0<(t=parseInt(Number(i.numOfCallConfigs)))?t:1)<=3?t:3),Re.numOfCallConfigs=n,"function"==typeof window.getWindowReference?window.getWindowReference().then(function(e){L.info("init(): HWND: "+e),M.hwnd=e,(j=new je).init()},function(e){L.error("init(): Failed to retrieve window handle: "+e.message)}):(L.info("init() webapp with HWND: 0"),M.hwnd=I,(j=new je).init()),!0},getCallConfig:function(e){return Te[e]},newPeerConnection:function(e,t){return this.newPeerConnectionEx(e,t)},newPeerConnectionEx:function(e,t,n){if(j){if(j.isSocketConnected()){var i=new Ie(e);if(F.sender)i.createOffer=i.createOfferV1,i.createAnswer=i.createAnswerV1,i.setRemoteDescription=i.setRemoteDescriptionV1,i.setLocalDescription=i.setLocalDescriptionV1,i.addIceCandidate=i.addIceCandidateV1,i.getStats=i.getStatsV1,i.addTrack=i.addTrackImplV1,i.removeTrack=i.removeTrackImplV1,i.getSenders=i.getSendersImplV1,i.getTransceivers=i.getTranceiversImplV1,i.addTransceiver=i.addTransceiverImplV1,F.pcCapability&ne&&(i.setConfiguration=i.setConfigurationImpl),F.pcCapability&te&&(i.restartIce=i.restartIceImpl);else{if(i.isUnifiedPlan())throw L.error("createPeerConnection failed due to endpoint does not support unified plan"),"endpoint does not support unified plan";i.createOffer=i.createOfferV0,i.createAnswer=i.createAnswerV0,i.setRemoteDescription=i.setRemoteDescriptionV0,i.setLocalDescription=i.setLocalDescriptionV0,i.addIceCandidate=i.addIceCandidateV0,i.getStats=i.getStatsV0}return i.createDataChannel=i.createDataChannelImplV1,O[i.id]=i,j.send({cmd:"createPeerConnection",arg1:e,arg2:t,callConfig:n},i.id),L.debug("createPeerConnection(): Create peer: "+i.id),i}L.error("createPeerConnection: WebSocket is not in connected state")}else L.error("createPeerConnection: gRequestManager is not created yet.")},newMediaStream:function(e){var t=new U;return t.createMediaStream(e),t},getDisplayMedia:function(e){return this.getDisplayMediaEx(e)},getDisplayMediaEx:function(e,t){if(j.isSocketConnected())return new Promise(function(n,i){L.debug("getDisplayMediaShim(): Constraints = "+JSON.stringify(e)),j.send({cmd:"getDisplayMediaShim",constraints:e,callConfig:t},-1,function(e){var t;void 0===e.error?((t=new U)._create(e.stream,p),L.debug("getDisplayMediaShim(): Media ="+t.id),n(t)):i(e.error)})});L.error("getDisplayMediaShim: WebSocket is not in connected state")},getUserMedia:function(e){return this.getUserMediaEx(e)},getUserMediaEx:function(e,t){if(!j.isSocketConnected())return Promise.reject({name:"NotFoundError",message:"WebSocket is not in connected state"});if(void 0!==e.video&&void 0!==e.video.mandatory&&void 0!==e.video.mandatory.sourceId&&void 0!==ye[e.video.mandatory.sourceId]){var n=0,i=0,r=0,o=!1,a=e.video.mandatory.sourceId,s=e.video.mandatory.minWidth,d=e.video.mandatory.maxWidth,c=e.video.mandatory.minHeight,u=e.video.mandatory.maxHeight,l=e.video.mandatory.maxFrameRate,h=s,f=c,g={width:0,height:0},v={width:0,height:0},a=(ye[a].forEach(function(e){(void 0===s||e.width>=s)&&(void 0===d||e.width<=d)&&(void 0===c||e.height>=c)&&(void 0===u||e.height<=u)&&(void 0===l||e.fps>=l)?(e.width*e.height>g.width*g.height&&(g=e),h&&f&&h*e.height==f*e.width&&e.width*e.height>v.width*v.height&&(v=e)):(void 0!==s&&e.width>=s||void 0!==d&&e.width>=d)&&(o=!0)}),0<v.width?v:g);if(a&&(n=a.width,i=a.height,r=a.fps),0<n&&0<i&&0<r)L.debug("Constraints: "+JSON.stringify(e)+" ==> "+n+"x"+i+" @"+r+":"+(l||"undefined")),l&&(e.video.mandatory.origFps=l),e.video.mandatory.maxFrameRate=r,e.video.mandatory.maxWidth=e.video.mandatory.minWidth=n,e.video.mandatory.maxHeight=e.video.mandatory.minHeight=i;else{if(!o)return L.debug("getUserMediaShim(): constraints does not match."),void reject({name:"OverconstrainedError",message:null});L.debug("getUserMediaShim(): low resolution video forward to client.")}}return new Promise(function(i,r){j.send({cmd:"getUserMediaShim",constraints:e,callConfig:t},-1,function(e){var t,n;void 0===e.error?(t=null,void 0!==e.clone&&((t=new U)._create(e.clone,p),L.debug("Media cloned:"+t.id)),(n=new U)._create(e.stream,p),n.cloned=t,L.debug("Media:"+n.id),i(n)):(new DOMException("Abort","AbortError"),r(e.error))})})},enumerateDevices:function(){return j.isSocketConnected()?new Promise(function(e,n){j.send({cmd:"enumDevices"},-1,function(t){void 0===t.error?(e(t.devices),void 0!==t.caps&&Object.keys(t.caps).forEach(function(e){ye[e]=t.caps[e]})):n("enumDevices cancelled.")})}):(L.info("enumerateDevicesShim(): Use fallback mode."),new Promise(function(t,n){be.call(navigator.mediaDevices).then(function(e){t(e),j.isSocketConnected()&&(L.info("enumerateDevicesShim(): [Resolve] Fallback cancelled. Invoke device change."),j.invokeDeviceChange())},function(e){j.isSocketConnected()?(L.info("enumerateDevicesShim(): [Reject] Fallback cancelled. Invoke device change."),t([]),j.invokeDeviceChange()):n(e)})}))},onVideoCreated:function(e,t){if(j.isSocketConnected()){L.debug("newVideoElement: New video element from app.");for(var n=Object.keys(D),i=0;i<n.length;i++){var r=n[i];if(D[r]._rawVideo===e)return void L.debug("newVideoElement(): Video already found")}t=new Me(e,t);D[t._id]=t,e._context=t}else L.error("newVideoElement: WebSocket is not in connected state")},onAudioCreated:function(e,t){if(j.isSocketConnected()){L.debug("newAudioElement(): A new audio element created.");for(var n=Object.keys(Se),i=0;i<n.length;i++){var r=n[i];if(Se[r]._rawAudio===e)return void L.debug("newAudioElement(): Audio already found")}t=new De(e,t);Se[t._id]=t,e._context=t}else L.error("newAudioElement: WebSocket is not in connected state")},onVideoDisposed:function(e,t){e&&e._context&&e._context.disposeVideo();e=e&&e._context?e._context._id:void 0;L.info("disposeElement video id="+e)},onAudioDisposed:function(e,t){e&&e._context&&e._context._id;L.info("disposeElement audio id="+_id)},playRingtone:function(e,r,t){var o,a;j.isSocketConnected()?r?(e,L.debug("playNotifyAudio(): id = "+e+" src = "+r+" loop = "+t),void 0===(o=i[e])&&(o=le++,i[e]=o),j.send({cmd:"notifyAudio",action:"play",src:r,audid:o,loop:t},-1),(a=new XMLHttpRequest).open("GET",r,!0),a.responseType="arraybuffer",a.onreadystatechange=function(){var e,t,n,i;a.readyState==XMLHttpRequest.DONE&&200==a.status?(e=16+a.response.byteLength,(t=new Uint8Array(16))[0]=65,t[1]=78,t[2]=84,t[3]=70,t[4]=e>>24&255,t[5]=e>>16&255,t[6]=e>>8&255,t[7]=255&e,t[8]=o>>24&255,t[9]=o>>16&255,t[10]=o>>8&255,t[11]=255&o,n=new Uint8Array(e),i=new Uint8Array(a.response),n.set(t,0),n.set(i,16),j.sendBinary(n),L.debug("onreadystatechange(): Send "+e+"bytes")):L.debug("onreadystatechange(): Download "+r+" status = "+a.status)},a.send()):L.error("playNotifyAudio(): src cannot be null or undefined"):L.error("playNotifyAudio(): WebSocket is not in connected state")},pauseRingtone:function(e){var t;j.isSocketConnected()?(L.debug("pauseNotifyAudio(): id = "+e),void 0===(t=i[e])?L.warn("pauseNotifyAudio(): id = "+e+" did not play yet."):j.send({cmd:"notifyAudio",action:"pause",audid:t},-1)):L.error("playNotifyAudio: WebSocket is not in connected state")},setVideoClipRegion:function(e,t,n){L.debug("setVideoClipRegion: "+e+", "+JSON.stringify(t)),j.isSocketConnected()?(e={cmd:"customClipRect",op:e?0:1,clip:JSON.parse(JSON.stringify(t))},(t=_e(n))&&(se(n),e.frame=t),j.send(e,-1)):L.error("setVideoClipRegion: WebSocket is not in connected state.")},getReceiverCapabilities:function(e){return L.debug("getCapabilitiesShim"),z.getCapabilities(e)},setSinkId:function(e,t){var n;j.isSocketConnected()?(void 0===(n=i[e])&&(n=le++,i[e]=n),L.debug("setSinkId id = "+n+" srcId = "+e+" Value = "+t),j.send({cmd:"setSinkId",deviceId:t,audioId:n,srcId:e,context:"global"},-1,function(e){})):L.error("setSinkId: WebSocket is not in connected state")},setPrimarySinkId:function(e){L.debug("setDefaultSinkId = "+e),j.isSocketConnected()?j.send({cmd:"setDefaultSinkId",deviceId:e},-1):L.error("setDefaultSinkId: WebSocket is not in connected state")},isFeatureSupported:function(e){var t;return"string"!=typeof e?(L.debug("isFeatureSupported(): Invalid feature parameter"),!1):!(!j||j.state!==_)&&("datachannel"===e?F.datachannel?1==F.datachannel||(L.debug("isFeatureSupported(): disable datachannel by settings."),!1):(L.debug("isFeatureSupported(): disable datachannel for old client."),!1):(t=!1,(t=Array.isArray(A)&&-1!=A.indexOf(e)?!0:t)||L.debug("isFeatureSupported(): Input feature string not supported = "+e),t))},getScreensInfo:function(){if(L.debug("getScreensAsync get called."),j.isSocketConnected())return new Promise(function(f,g){var e=0;F.getScreens&&F.getScreens&$&&(e=1),j.send({cmd:"getScreens",bounds:e},-1,function(e){if(Array.isArray(e))f(V=t=e);else if(e.screens&&Array.isArray(e.screens)){for(var t=[],n=0;n<e.screens.length;n++){var i=e.screens[n].w,r=e.screens[n].h,o=e.screens[n].id,a=e.screens[n].bounds,s=e.screens[n].imageData;if(0<i&&0<r&&o&&a&&s){for(var d=window.atob(s),c=d.length,u=new Uint8ClampedArray(c),l=0;l<c;l++)u[l]=d.charCodeAt(l);s=new ImageData(u,i,r),i=new Ae(o,"Screen "+o,s,a);t.push(i),L.debug("Screen:"+o+":  image size:"+c)}else L.error("Invalid screen data:"+JSON.stringify(e.screens[n]))}f(V=t)}else{var h=e.error&&e.error.message?e.error.message:"Invalid getScreen response";g(new DOMException(h,"OperationError"))}})});L.error("getScreensAsync: WebSocket is not in connected state")},onScreenSelected:function(e){L.debug("setScreenSharePanelId = "+e+" for getDisplayMedia"),j.isSocketConnected()?j.send({cmd:"setScreenId",scrnId:e,numScreens:V.length},-1):L.error("setScreenSharePanelId: WebSocket is not in connected state")},onWindowSessionConnected:function(e){L.info("connectedStateChanged called "+e),j&&(j.state===_&&j.send({cmd:"connectedStateChanged",connectionState:!0===e?1:0},-1),!0===e?(j.sendVdiClientEventsOnError=!0,j.startPolling(j.shortPollingIntervalMs,j.shortPollingTimeout,j.sendEvents)):(j.sendVdiClientEventsOnError=!1,j.isHorizonRegistryPresent=!1,L.info("connectedStateChanged(): isHorizonRegistryPresent false"),j.stopPolling()))}}});
},{}],4:[function(require,module,exports){
/*
 * Copyright (c) 2018 Omnissa, LLC. All rights reserved.
 * This product is protected by copyright and intellectual property laws in the
 * United States and other countries as well as by international treaties.
 * -- Omnissa Restricted
 */
/**
 *
 * HorizonWebRTCExtension.js
 * Build: 14122140117
 *
 */
!function(n){("function"!=typeof define||!define.amd)&&"object"==typeof module&&module.exports?module.exports=n():window.HorizonWebRTCExtension=n()}(function(n,o){"use strict";const T={GET_CLIENT_ID:"getClientId",GET_WSS_PORT:"getWssPort",GET_INFO:"getInfo",NOTIFY_CONTENT_READY:"notifyContentReady",NOTIFY_WINDOW_SESSION_CONNECTED:"notifyWindowSessionConnected",PAGE_UNLOADED:"pageUnloaded",POLL_CONTENT_READY:"pollContentReady",STOP_REDIRECTION:"stopRedir"},E={FOREGROUND_TO_CONTENT:"horizon.webrtcsdk.foregroundToContent",CONTENT_TO_FOREGROUND:"horizon.webrtcsdk.contentToForeground"};return new function(){var t,o=this,i=0,r={},d=!0,s=(this.onWindowSessionConnected,this.getHorizonClientID=function(){return new Promise(function(o,e){s({cmd:T.GET_CLIENT_ID},function(n){void 0!==n.clientId?o(n.clientId):e(n.error||"getHorizonClientID failed")})})},this.getHorizonWSSPort=function(){return new Promise(function(o,e){s({cmd:T.GET_WSS_PORT},function(n){void 0!==n.wssPort?o(n.wssPort):e(n.error||"getHorizonWSSPort failed")})})},function(n,o){var e;n.cmd==T.POLL_CONTENT_READY||t?(e=++i,n.seqId=e,r[e]=o,e={detail:void 0!==n?n:{}},window.dispatchEvent(new CustomEvent(E.FOREGROUND_TO_CONTENT,e))):(n.error="content is not ready",o(n),void 0===t&&(console.log("HorizonWebRTCExtension.toContentScript: content ready state is undefined, Start content state poll"),new Promise(function(o,e){s({cmd:T.POLL_CONTENT_READY},function(n){void 0!==n.ready?(t=n.ready,o(t)):e(n.error||"fail to pollContentReady")})})))}),c=function(n){"function"==typeof o.onWindowSessionConnected&&o.onWindowSessionConnected(n)};console.log("HorizonWebRTCExtension foreground register content callback"),window.addEventListener(E.CONTENT_TO_FOREGROUND,function(n){if(null===n.detail)console.log("HorizonWebRTCExtension.onContentScript: data is null in injected script");else{var o,e=n.detail;if(console.log("HorizonWebRTCExtension.onContentScript(): Received message from content script "+JSON.stringify(e)),"number"==typeof e.seqId&&0<e.seqId)n=e.seqId,o=r[n],delete r[n],void 0!==o&&"function"==typeof o&&o(e);else switch(e.cmd){case T.NOTIFY_CONTENT_READY:t=e.state;break;case T.NOTIFY_WINDOW_SESSION_CONNECTED:d=e.connected,c(d)}}})}});
},{}],5:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/array/from"), __esModule: true };
},{"core-js/library/fn/array/from":28}],6:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/get-iterator"), __esModule: true };
},{"core-js/library/fn/get-iterator":29}],7:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/is-iterable"), __esModule: true };
},{"core-js/library/fn/is-iterable":30}],8:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/create"), __esModule: true };
},{"core-js/library/fn/object/create":31}],9:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/define-property"), __esModule: true };
},{"core-js/library/fn/object/define-property":32}],10:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/get-own-property-descriptor"), __esModule: true };
},{"core-js/library/fn/object/get-own-property-descriptor":33}],11:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/get-prototype-of"), __esModule: true };
},{"core-js/library/fn/object/get-prototype-of":34}],12:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/set-prototype-of"), __esModule: true };
},{"core-js/library/fn/object/set-prototype-of":35}],13:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/promise"), __esModule: true };
},{"core-js/library/fn/promise":36}],14:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/symbol"), __esModule: true };
},{"core-js/library/fn/symbol":37}],15:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/symbol/iterator"), __esModule: true };
},{"core-js/library/fn/symbol/iterator":38}],16:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _promise = require("../core-js/promise");

var _promise2 = _interopRequireDefault(_promise);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (fn) {
  return function () {
    var gen = fn.apply(this, arguments);
    return new _promise2.default(function (resolve, reject) {
      function step(key, arg) {
        try {
          var info = gen[key](arg);
          var value = info.value;
        } catch (error) {
          reject(error);
          return;
        }

        if (info.done) {
          resolve(value);
        } else {
          return _promise2.default.resolve(value).then(function (value) {
            step("next", value);
          }, function (err) {
            step("throw", err);
          });
        }
      }

      return step("next");
    });
  };
};
},{"../core-js/promise":13}],17:[function(require,module,exports){
"use strict";

exports.__esModule = true;

exports.default = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};
},{}],18:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _defineProperty = require("../core-js/object/define-property");

var _defineProperty2 = _interopRequireDefault(_defineProperty);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      (0, _defineProperty2.default)(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();
},{"../core-js/object/define-property":9}],19:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _getPrototypeOf = require("../core-js/object/get-prototype-of");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _getOwnPropertyDescriptor = require("../core-js/object/get-own-property-descriptor");

var _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function get(object, property, receiver) {
  if (object === null) object = Function.prototype;
  var desc = (0, _getOwnPropertyDescriptor2.default)(object, property);

  if (desc === undefined) {
    var parent = (0, _getPrototypeOf2.default)(object);

    if (parent === null) {
      return undefined;
    } else {
      return get(parent, property, receiver);
    }
  } else if ("value" in desc) {
    return desc.value;
  } else {
    var getter = desc.get;

    if (getter === undefined) {
      return undefined;
    }

    return getter.call(receiver);
  }
};
},{"../core-js/object/get-own-property-descriptor":10,"../core-js/object/get-prototype-of":11}],20:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _setPrototypeOf = require("../core-js/object/set-prototype-of");

var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);

var _create = require("../core-js/object/create");

var _create2 = _interopRequireDefault(_create);

var _typeof2 = require("../helpers/typeof");

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
  }

  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
};
},{"../core-js/object/create":8,"../core-js/object/set-prototype-of":12,"../helpers/typeof":24}],21:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _typeof2 = require("../helpers/typeof");

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
};
},{"../helpers/typeof":24}],22:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _isIterable2 = require("../core-js/is-iterable");

var _isIterable3 = _interopRequireDefault(_isIterable2);

var _getIterator2 = require("../core-js/get-iterator");

var _getIterator3 = _interopRequireDefault(_getIterator2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  function sliceIterator(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = (0, _getIterator3.default)(arr), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if ((0, _isIterable3.default)(Object(arr))) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();
},{"../core-js/get-iterator":6,"../core-js/is-iterable":7}],23:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _from = require("../core-js/array/from");

var _from2 = _interopRequireDefault(_from);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (arr) {
  return Array.isArray(arr) ? arr : (0, _from2.default)(arr);
};
},{"../core-js/array/from":5}],24:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _iterator = require("../core-js/symbol/iterator");

var _iterator2 = _interopRequireDefault(_iterator);

var _symbol = require("../core-js/symbol");

var _symbol2 = _interopRequireDefault(_symbol);

var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
} : function (obj) {
  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
};
},{"../core-js/symbol":14,"../core-js/symbol/iterator":15}],25:[function(require,module,exports){
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// This method of obtaining a reference to the global object needs to be
// kept identical to the way it is obtained in runtime.js
var g = (function() { return this })() || Function("return this")();

// Use `getOwnPropertyNames` because not all browsers support calling
// `hasOwnProperty` on the global `self` object in a worker. See #183.
var hadRuntime = g.regeneratorRuntime &&
  Object.getOwnPropertyNames(g).indexOf("regeneratorRuntime") >= 0;

// Save the old regeneratorRuntime in case it needs to be restored later.
var oldRuntime = hadRuntime && g.regeneratorRuntime;

// Force reevalutation of runtime.js.
g.regeneratorRuntime = undefined;

module.exports = require("./runtime");

if (hadRuntime) {
  // Restore the original runtime.
  g.regeneratorRuntime = oldRuntime;
} else {
  // Remove the global property added by runtime.js.
  try {
    delete g.regeneratorRuntime;
  } catch(e) {
    g.regeneratorRuntime = undefined;
  }
}

},{"./runtime":26}],26:[function(require,module,exports){
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

!(function(global) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    }
    // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.
    return;
  }

  // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  runtime.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  runtime.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration. If the Promise is rejected, however, the
          // result for this iteration will be rejected with the same
          // reason. Note that rejections of yielded Promises are not
          // thrown back into the generator function, as is the case
          // when an awaited Promise is rejected. This difference in
          // behavior between yield and await is important, because it
          // allows the consumer to decide what to do with the yielded
          // rejection (swallow it and continue, manually .throw it back
          // into the generator, abandon iteration, whatever). With
          // await, by contrast, there is no opportunity to examine the
          // rejection reason outside the generator function, so the
          // only option is to throw it from the await expression, and
          // let the generator function handle the exception.
          result.value = unwrapped;
          resolve(result);
        }, reject);
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  runtime.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return runtime.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        if (delegate.iterator.return) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };
})(
  // In sloppy mode, unbound `this` refers to the global object, fallback to
  // Function constructor if we're in global strict mode. That is sadly a form
  // of indirect eval which violates Content Security Policy.
  (function() { return this })() || Function("return this")()
);

},{}],27:[function(require,module,exports){
module.exports = require("regenerator-runtime");

},{"regenerator-runtime":25}],28:[function(require,module,exports){
require('../../modules/es6.string.iterator');
require('../../modules/es6.array.from');
module.exports = require('../../modules/_core').Array.from;

},{"../../modules/_core":46,"../../modules/es6.array.from":116,"../../modules/es6.string.iterator":125}],29:[function(require,module,exports){
require('../modules/web.dom.iterable');
require('../modules/es6.string.iterator');
module.exports = require('../modules/core.get-iterator');

},{"../modules/core.get-iterator":114,"../modules/es6.string.iterator":125,"../modules/web.dom.iterable":131}],30:[function(require,module,exports){
require('../modules/web.dom.iterable');
require('../modules/es6.string.iterator');
module.exports = require('../modules/core.is-iterable');

},{"../modules/core.is-iterable":115,"../modules/es6.string.iterator":125,"../modules/web.dom.iterable":131}],31:[function(require,module,exports){
require('../../modules/es6.object.create');
var $Object = require('../../modules/_core').Object;
module.exports = function create(P, D) {
  return $Object.create(P, D);
};

},{"../../modules/_core":46,"../../modules/es6.object.create":118}],32:[function(require,module,exports){
require('../../modules/es6.object.define-property');
var $Object = require('../../modules/_core').Object;
module.exports = function defineProperty(it, key, desc) {
  return $Object.defineProperty(it, key, desc);
};

},{"../../modules/_core":46,"../../modules/es6.object.define-property":119}],33:[function(require,module,exports){
require('../../modules/es6.object.get-own-property-descriptor');
var $Object = require('../../modules/_core').Object;
module.exports = function getOwnPropertyDescriptor(it, key) {
  return $Object.getOwnPropertyDescriptor(it, key);
};

},{"../../modules/_core":46,"../../modules/es6.object.get-own-property-descriptor":120}],34:[function(require,module,exports){
require('../../modules/es6.object.get-prototype-of');
module.exports = require('../../modules/_core').Object.getPrototypeOf;

},{"../../modules/_core":46,"../../modules/es6.object.get-prototype-of":121}],35:[function(require,module,exports){
require('../../modules/es6.object.set-prototype-of');
module.exports = require('../../modules/_core').Object.setPrototypeOf;

},{"../../modules/_core":46,"../../modules/es6.object.set-prototype-of":122}],36:[function(require,module,exports){
require('../modules/es6.object.to-string');
require('../modules/es6.string.iterator');
require('../modules/web.dom.iterable');
require('../modules/es6.promise');
require('../modules/es7.promise.finally');
require('../modules/es7.promise.try');
module.exports = require('../modules/_core').Promise;

},{"../modules/_core":46,"../modules/es6.object.to-string":123,"../modules/es6.promise":124,"../modules/es6.string.iterator":125,"../modules/es7.promise.finally":127,"../modules/es7.promise.try":128,"../modules/web.dom.iterable":131}],37:[function(require,module,exports){
require('../../modules/es6.symbol');
require('../../modules/es6.object.to-string');
require('../../modules/es7.symbol.async-iterator');
require('../../modules/es7.symbol.observable');
module.exports = require('../../modules/_core').Symbol;

},{"../../modules/_core":46,"../../modules/es6.object.to-string":123,"../../modules/es6.symbol":126,"../../modules/es7.symbol.async-iterator":129,"../../modules/es7.symbol.observable":130}],38:[function(require,module,exports){
require('../../modules/es6.string.iterator');
require('../../modules/web.dom.iterable');
module.exports = require('../../modules/_wks-ext').f('iterator');

},{"../../modules/_wks-ext":111,"../../modules/es6.string.iterator":125,"../../modules/web.dom.iterable":131}],39:[function(require,module,exports){
module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};

},{}],40:[function(require,module,exports){
module.exports = function () { /* empty */ };

},{}],41:[function(require,module,exports){
module.exports = function (it, Constructor, name, forbiddenField) {
  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};

},{}],42:[function(require,module,exports){
var isObject = require('./_is-object');
module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};

},{"./_is-object":66}],43:[function(require,module,exports){
// false -> Array#indexOf
// true  -> Array#includes
var toIObject = require('./_to-iobject');
var toLength = require('./_to-length');
var toAbsoluteIndex = require('./_to-absolute-index');
module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
      if (O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};

},{"./_to-absolute-index":102,"./_to-iobject":104,"./_to-length":105}],44:[function(require,module,exports){
// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = require('./_cof');
var TAG = require('./_wks')('toStringTag');
// ES3 wrong here
var ARG = cof(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (e) { /* empty */ }
};

module.exports = function (it) {
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};

},{"./_cof":45,"./_wks":112}],45:[function(require,module,exports){
var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};

},{}],46:[function(require,module,exports){
var core = module.exports = { version: '2.6.12' };
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef

},{}],47:[function(require,module,exports){
'use strict';
var $defineProperty = require('./_object-dp');
var createDesc = require('./_property-desc');

module.exports = function (object, index, value) {
  if (index in object) $defineProperty.f(object, index, createDesc(0, value));
  else object[index] = value;
};

},{"./_object-dp":78,"./_property-desc":91}],48:[function(require,module,exports){
// optional / simple context binding
var aFunction = require('./_a-function');
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};

},{"./_a-function":39}],49:[function(require,module,exports){
// 7.2.1 RequireObjectCoercible(argument)
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};

},{}],50:[function(require,module,exports){
// Thank's IE8 for his funny defineProperty
module.exports = !require('./_fails')(function () {
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
});

},{"./_fails":55}],51:[function(require,module,exports){
var isObject = require('./_is-object');
var document = require('./_global').document;
// typeof document.createElement is 'object' in old IE
var is = isObject(document) && isObject(document.createElement);
module.exports = function (it) {
  return is ? document.createElement(it) : {};
};

},{"./_global":57,"./_is-object":66}],52:[function(require,module,exports){
// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');

},{}],53:[function(require,module,exports){
// all enumerable object keys, includes symbols
var getKeys = require('./_object-keys');
var gOPS = require('./_object-gops');
var pIE = require('./_object-pie');
module.exports = function (it) {
  var result = getKeys(it);
  var getSymbols = gOPS.f;
  if (getSymbols) {
    var symbols = getSymbols(it);
    var isEnum = pIE.f;
    var i = 0;
    var key;
    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
  } return result;
};

},{"./_object-gops":83,"./_object-keys":86,"./_object-pie":87}],54:[function(require,module,exports){
var global = require('./_global');
var core = require('./_core');
var ctx = require('./_ctx');
var hide = require('./_hide');
var has = require('./_has');
var PROTOTYPE = 'prototype';

var $export = function (type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var IS_WRAP = type & $export.W;
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE];
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];
  var key, own, out;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    if (own && has(exports, key)) continue;
    // export native or passed
    out = own ? target[key] : source[key];
    // prevent global pollution for namespaces
    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
    // bind timers to global for call from export context
    : IS_BIND && own ? ctx(out, global)
    // wrap global constructors for prevent change them in library
    : IS_WRAP && target[key] == out ? (function (C) {
      var F = function (a, b, c) {
        if (this instanceof C) {
          switch (arguments.length) {
            case 0: return new C();
            case 1: return new C(a);
            case 2: return new C(a, b);
          } return new C(a, b, c);
        } return C.apply(this, arguments);
      };
      F[PROTOTYPE] = C[PROTOTYPE];
      return F;
    // make static versions for prototype methods
    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
    if (IS_PROTO) {
      (exports.virtual || (exports.virtual = {}))[key] = out;
      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);
    }
  }
};
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;

},{"./_core":46,"./_ctx":48,"./_global":57,"./_has":58,"./_hide":59}],55:[function(require,module,exports){
module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};

},{}],56:[function(require,module,exports){
var ctx = require('./_ctx');
var call = require('./_iter-call');
var isArrayIter = require('./_is-array-iter');
var anObject = require('./_an-object');
var toLength = require('./_to-length');
var getIterFn = require('./core.get-iterator-method');
var BREAK = {};
var RETURN = {};
var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);
  var f = ctx(fn, that, entries ? 2 : 1);
  var index = 0;
  var length, step, iterator, result;
  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if (result === BREAK || result === RETURN) return result;
  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
    result = call(iterator, f, step.value, entries);
    if (result === BREAK || result === RETURN) return result;
  }
};
exports.BREAK = BREAK;
exports.RETURN = RETURN;

},{"./_an-object":42,"./_ctx":48,"./_is-array-iter":64,"./_iter-call":67,"./_to-length":105,"./core.get-iterator-method":113}],57:[function(require,module,exports){
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self
  // eslint-disable-next-line no-new-func
  : Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef

},{}],58:[function(require,module,exports){
var hasOwnProperty = {}.hasOwnProperty;
module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};

},{}],59:[function(require,module,exports){
var dP = require('./_object-dp');
var createDesc = require('./_property-desc');
module.exports = require('./_descriptors') ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};

},{"./_descriptors":50,"./_object-dp":78,"./_property-desc":91}],60:[function(require,module,exports){
var document = require('./_global').document;
module.exports = document && document.documentElement;

},{"./_global":57}],61:[function(require,module,exports){
module.exports = !require('./_descriptors') && !require('./_fails')(function () {
  return Object.defineProperty(require('./_dom-create')('div'), 'a', { get: function () { return 7; } }).a != 7;
});

},{"./_descriptors":50,"./_dom-create":51,"./_fails":55}],62:[function(require,module,exports){
// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function (fn, args, that) {
  var un = that === undefined;
  switch (args.length) {
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return fn.apply(that, args);
};

},{}],63:[function(require,module,exports){
// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = require('./_cof');
// eslint-disable-next-line no-prototype-builtins
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return cof(it) == 'String' ? it.split('') : Object(it);
};

},{"./_cof":45}],64:[function(require,module,exports){
// check on default Array iterator
var Iterators = require('./_iterators');
var ITERATOR = require('./_wks')('iterator');
var ArrayProto = Array.prototype;

module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};

},{"./_iterators":72,"./_wks":112}],65:[function(require,module,exports){
// 7.2.2 IsArray(argument)
var cof = require('./_cof');
module.exports = Array.isArray || function isArray(arg) {
  return cof(arg) == 'Array';
};

},{"./_cof":45}],66:[function(require,module,exports){
module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};

},{}],67:[function(require,module,exports){
// call something on iterator step with safe closing on error
var anObject = require('./_an-object');
module.exports = function (iterator, fn, value, entries) {
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch (e) {
    var ret = iterator['return'];
    if (ret !== undefined) anObject(ret.call(iterator));
    throw e;
  }
};

},{"./_an-object":42}],68:[function(require,module,exports){
'use strict';
var create = require('./_object-create');
var descriptor = require('./_property-desc');
var setToStringTag = require('./_set-to-string-tag');
var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
require('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function () { return this; });

module.exports = function (Constructor, NAME, next) {
  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
  setToStringTag(Constructor, NAME + ' Iterator');
};

},{"./_hide":59,"./_object-create":77,"./_property-desc":91,"./_set-to-string-tag":96,"./_wks":112}],69:[function(require,module,exports){
'use strict';
var LIBRARY = require('./_library');
var $export = require('./_export');
var redefine = require('./_redefine');
var hide = require('./_hide');
var Iterators = require('./_iterators');
var $iterCreate = require('./_iter-create');
var setToStringTag = require('./_set-to-string-tag');
var getPrototypeOf = require('./_object-gpo');
var ITERATOR = require('./_wks')('iterator');
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function () { return this; };

module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME, next);
  var getMethod = function (kind) {
    if (!BUGGY && kind in proto) return proto[kind];
    switch (kind) {
      case KEYS: return function keys() { return new Constructor(this, kind); };
      case VALUES: return function values() { return new Constructor(this, kind); };
    } return function entries() { return new Constructor(this, kind); };
  };
  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype;
  // Fix native
  if ($anyNative) {
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;
    $default = function values() { return $native.call(this); };
  }
  // Define iterator
  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG] = returnThis;
  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) for (key in methods) {
      if (!(key in proto)) redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};

},{"./_export":54,"./_hide":59,"./_iter-create":68,"./_iterators":72,"./_library":73,"./_object-gpo":84,"./_redefine":93,"./_set-to-string-tag":96,"./_wks":112}],70:[function(require,module,exports){
var ITERATOR = require('./_wks')('iterator');
var SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function () { SAFE_CLOSING = true; };
  // eslint-disable-next-line no-throw-literal
  Array.from(riter, function () { throw 2; });
} catch (e) { /* empty */ }

module.exports = function (exec, skipClosing) {
  if (!skipClosing && !SAFE_CLOSING) return false;
  var safe = false;
  try {
    var arr = [7];
    var iter = arr[ITERATOR]();
    iter.next = function () { return { done: safe = true }; };
    arr[ITERATOR] = function () { return iter; };
    exec(arr);
  } catch (e) { /* empty */ }
  return safe;
};

},{"./_wks":112}],71:[function(require,module,exports){
module.exports = function (done, value) {
  return { value: value, done: !!done };
};

},{}],72:[function(require,module,exports){
module.exports = {};

},{}],73:[function(require,module,exports){
module.exports = true;

},{}],74:[function(require,module,exports){
var META = require('./_uid')('meta');
var isObject = require('./_is-object');
var has = require('./_has');
var setDesc = require('./_object-dp').f;
var id = 0;
var isExtensible = Object.isExtensible || function () {
  return true;
};
var FREEZE = !require('./_fails')(function () {
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function (it) {
  setDesc(it, META, { value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  } });
};
var fastKey = function (it, create) {
  // return primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function (it, create) {
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function (it) {
  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY: META,
  NEED: false,
  fastKey: fastKey,
  getWeak: getWeak,
  onFreeze: onFreeze
};

},{"./_fails":55,"./_has":58,"./_is-object":66,"./_object-dp":78,"./_uid":108}],75:[function(require,module,exports){
var global = require('./_global');
var macrotask = require('./_task').set;
var Observer = global.MutationObserver || global.WebKitMutationObserver;
var process = global.process;
var Promise = global.Promise;
var isNode = require('./_cof')(process) == 'process';

module.exports = function () {
  var head, last, notify;

  var flush = function () {
    var parent, fn;
    if (isNode && (parent = process.domain)) parent.exit();
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (e) {
        if (head) notify();
        else last = undefined;
        throw e;
      }
    } last = undefined;
    if (parent) parent.enter();
  };

  // Node.js
  if (isNode) {
    notify = function () {
      process.nextTick(flush);
    };
  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
  } else if (Observer && !(global.navigator && global.navigator.standalone)) {
    var toggle = true;
    var node = document.createTextNode('');
    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
    notify = function () {
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if (Promise && Promise.resolve) {
    // Promise.resolve without an argument throws an error in LG WebOS 2
    var promise = Promise.resolve(undefined);
    notify = function () {
      promise.then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function () {
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function (fn) {
    var task = { fn: fn, next: undefined };
    if (last) last.next = task;
    if (!head) {
      head = task;
      notify();
    } last = task;
  };
};

},{"./_cof":45,"./_global":57,"./_task":101}],76:[function(require,module,exports){
'use strict';
// 25.4.1.5 NewPromiseCapability(C)
var aFunction = require('./_a-function');

function PromiseCapability(C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject = aFunction(reject);
}

module.exports.f = function (C) {
  return new PromiseCapability(C);
};

},{"./_a-function":39}],77:[function(require,module,exports){
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject = require('./_an-object');
var dPs = require('./_object-dps');
var enumBugKeys = require('./_enum-bug-keys');
var IE_PROTO = require('./_shared-key')('IE_PROTO');
var Empty = function () { /* empty */ };
var PROTOTYPE = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = require('./_dom-create')('iframe');
  var i = enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';
  require('./_html').appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};

},{"./_an-object":42,"./_dom-create":51,"./_enum-bug-keys":52,"./_html":60,"./_object-dps":79,"./_shared-key":97}],78:[function(require,module,exports){
var anObject = require('./_an-object');
var IE8_DOM_DEFINE = require('./_ie8-dom-define');
var toPrimitive = require('./_to-primitive');
var dP = Object.defineProperty;

exports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};

},{"./_an-object":42,"./_descriptors":50,"./_ie8-dom-define":61,"./_to-primitive":107}],79:[function(require,module,exports){
var dP = require('./_object-dp');
var anObject = require('./_an-object');
var getKeys = require('./_object-keys');

module.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = getKeys(Properties);
  var length = keys.length;
  var i = 0;
  var P;
  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
  return O;
};

},{"./_an-object":42,"./_descriptors":50,"./_object-dp":78,"./_object-keys":86}],80:[function(require,module,exports){
var pIE = require('./_object-pie');
var createDesc = require('./_property-desc');
var toIObject = require('./_to-iobject');
var toPrimitive = require('./_to-primitive');
var has = require('./_has');
var IE8_DOM_DEFINE = require('./_ie8-dom-define');
var gOPD = Object.getOwnPropertyDescriptor;

exports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P) {
  O = toIObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return gOPD(O, P);
  } catch (e) { /* empty */ }
  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
};

},{"./_descriptors":50,"./_has":58,"./_ie8-dom-define":61,"./_object-pie":87,"./_property-desc":91,"./_to-iobject":104,"./_to-primitive":107}],81:[function(require,module,exports){
// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = require('./_to-iobject');
var gOPN = require('./_object-gopn').f;
var toString = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return gOPN(it);
  } catch (e) {
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};

},{"./_object-gopn":82,"./_to-iobject":104}],82:[function(require,module,exports){
// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys = require('./_object-keys-internal');
var hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return $keys(O, hiddenKeys);
};

},{"./_enum-bug-keys":52,"./_object-keys-internal":85}],83:[function(require,module,exports){
exports.f = Object.getOwnPropertySymbols;

},{}],84:[function(require,module,exports){
// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has = require('./_has');
var toObject = require('./_to-object');
var IE_PROTO = require('./_shared-key')('IE_PROTO');
var ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};

},{"./_has":58,"./_shared-key":97,"./_to-object":106}],85:[function(require,module,exports){
var has = require('./_has');
var toIObject = require('./_to-iobject');
var arrayIndexOf = require('./_array-includes')(false);
var IE_PROTO = require('./_shared-key')('IE_PROTO');

module.exports = function (object, names) {
  var O = toIObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};

},{"./_array-includes":43,"./_has":58,"./_shared-key":97,"./_to-iobject":104}],86:[function(require,module,exports){
// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = require('./_object-keys-internal');
var enumBugKeys = require('./_enum-bug-keys');

module.exports = Object.keys || function keys(O) {
  return $keys(O, enumBugKeys);
};

},{"./_enum-bug-keys":52,"./_object-keys-internal":85}],87:[function(require,module,exports){
exports.f = {}.propertyIsEnumerable;

},{}],88:[function(require,module,exports){
// most Object methods by ES6 should accept primitives
var $export = require('./_export');
var core = require('./_core');
var fails = require('./_fails');
module.exports = function (KEY, exec) {
  var fn = (core.Object || {})[KEY] || Object[KEY];
  var exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);
};

},{"./_core":46,"./_export":54,"./_fails":55}],89:[function(require,module,exports){
module.exports = function (exec) {
  try {
    return { e: false, v: exec() };
  } catch (e) {
    return { e: true, v: e };
  }
};

},{}],90:[function(require,module,exports){
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var newPromiseCapability = require('./_new-promise-capability');

module.exports = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};

},{"./_an-object":42,"./_is-object":66,"./_new-promise-capability":76}],91:[function(require,module,exports){
module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};

},{}],92:[function(require,module,exports){
var hide = require('./_hide');
module.exports = function (target, src, safe) {
  for (var key in src) {
    if (safe && target[key]) target[key] = src[key];
    else hide(target, key, src[key]);
  } return target;
};

},{"./_hide":59}],93:[function(require,module,exports){
module.exports = require('./_hide');

},{"./_hide":59}],94:[function(require,module,exports){
// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var isObject = require('./_is-object');
var anObject = require('./_an-object');
var check = function (O, proto) {
  anObject(O);
  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function (test, buggy, set) {
      try {
        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch (e) { buggy = true; }
      return function setPrototypeOf(O, proto) {
        check(O, proto);
        if (buggy) O.__proto__ = proto;
        else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
  check: check
};

},{"./_an-object":42,"./_ctx":48,"./_is-object":66,"./_object-gopd":80}],95:[function(require,module,exports){
'use strict';
var global = require('./_global');
var core = require('./_core');
var dP = require('./_object-dp');
var DESCRIPTORS = require('./_descriptors');
var SPECIES = require('./_wks')('species');

module.exports = function (KEY) {
  var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];
  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
    configurable: true,
    get: function () { return this; }
  });
};

},{"./_core":46,"./_descriptors":50,"./_global":57,"./_object-dp":78,"./_wks":112}],96:[function(require,module,exports){
var def = require('./_object-dp').f;
var has = require('./_has');
var TAG = require('./_wks')('toStringTag');

module.exports = function (it, tag, stat) {
  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
};

},{"./_has":58,"./_object-dp":78,"./_wks":112}],97:[function(require,module,exports){
var shared = require('./_shared')('keys');
var uid = require('./_uid');
module.exports = function (key) {
  return shared[key] || (shared[key] = uid(key));
};

},{"./_shared":98,"./_uid":108}],98:[function(require,module,exports){
var core = require('./_core');
var global = require('./_global');
var SHARED = '__core-js_shared__';
var store = global[SHARED] || (global[SHARED] = {});

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: core.version,
  mode: require('./_library') ? 'pure' : 'global',
  copyright: '© 2020 Denis Pushkarev (zloirock.ru)'
});

},{"./_core":46,"./_global":57,"./_library":73}],99:[function(require,module,exports){
// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject = require('./_an-object');
var aFunction = require('./_a-function');
var SPECIES = require('./_wks')('species');
module.exports = function (O, D) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};

},{"./_a-function":39,"./_an-object":42,"./_wks":112}],100:[function(require,module,exports){
var toInteger = require('./_to-integer');
var defined = require('./_defined');
// true  -> String#at
// false -> String#codePointAt
module.exports = function (TO_STRING) {
  return function (that, pos) {
    var s = String(defined(that));
    var i = toInteger(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};

},{"./_defined":49,"./_to-integer":103}],101:[function(require,module,exports){
var ctx = require('./_ctx');
var invoke = require('./_invoke');
var html = require('./_html');
var cel = require('./_dom-create');
var global = require('./_global');
var process = global.process;
var setTask = global.setImmediate;
var clearTask = global.clearImmediate;
var MessageChannel = global.MessageChannel;
var Dispatch = global.Dispatch;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer, channel, port;
var run = function () {
  var id = +this;
  // eslint-disable-next-line no-prototype-builtins
  if (queue.hasOwnProperty(id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function (event) {
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!setTask || !clearTask) {
  setTask = function setImmediate(fn) {
    var args = [];
    var i = 1;
    while (arguments.length > i) args.push(arguments[i++]);
    queue[++counter] = function () {
      // eslint-disable-next-line no-new-func
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (require('./_cof')(process) == 'process') {
    defer = function (id) {
      process.nextTick(ctx(run, id, 1));
    };
  // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if (MessageChannel) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
    defer = function (id) {
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listener, false);
  // IE8-
  } else if (ONREADYSTATECHANGE in cel('script')) {
    defer = function (id) {
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set: setTask,
  clear: clearTask
};

},{"./_cof":45,"./_ctx":48,"./_dom-create":51,"./_global":57,"./_html":60,"./_invoke":62}],102:[function(require,module,exports){
var toInteger = require('./_to-integer');
var max = Math.max;
var min = Math.min;
module.exports = function (index, length) {
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};

},{"./_to-integer":103}],103:[function(require,module,exports){
// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;
module.exports = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};

},{}],104:[function(require,module,exports){
// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = require('./_iobject');
var defined = require('./_defined');
module.exports = function (it) {
  return IObject(defined(it));
};

},{"./_defined":49,"./_iobject":63}],105:[function(require,module,exports){
// 7.1.15 ToLength
var toInteger = require('./_to-integer');
var min = Math.min;
module.exports = function (it) {
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};

},{"./_to-integer":103}],106:[function(require,module,exports){
// 7.1.13 ToObject(argument)
var defined = require('./_defined');
module.exports = function (it) {
  return Object(defined(it));
};

},{"./_defined":49}],107:[function(require,module,exports){
// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = require('./_is-object');
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};

},{"./_is-object":66}],108:[function(require,module,exports){
var id = 0;
var px = Math.random();
module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};

},{}],109:[function(require,module,exports){
var global = require('./_global');
var navigator = global.navigator;

module.exports = navigator && navigator.userAgent || '';

},{"./_global":57}],110:[function(require,module,exports){
var global = require('./_global');
var core = require('./_core');
var LIBRARY = require('./_library');
var wksExt = require('./_wks-ext');
var defineProperty = require('./_object-dp').f;
module.exports = function (name) {
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
};

},{"./_core":46,"./_global":57,"./_library":73,"./_object-dp":78,"./_wks-ext":111}],111:[function(require,module,exports){
exports.f = require('./_wks');

},{"./_wks":112}],112:[function(require,module,exports){
var store = require('./_shared')('wks');
var uid = require('./_uid');
var Symbol = require('./_global').Symbol;
var USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function (name) {
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;

},{"./_global":57,"./_shared":98,"./_uid":108}],113:[function(require,module,exports){
var classof = require('./_classof');
var ITERATOR = require('./_wks')('iterator');
var Iterators = require('./_iterators');
module.exports = require('./_core').getIteratorMethod = function (it) {
  if (it != undefined) return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};

},{"./_classof":44,"./_core":46,"./_iterators":72,"./_wks":112}],114:[function(require,module,exports){
var anObject = require('./_an-object');
var get = require('./core.get-iterator-method');
module.exports = require('./_core').getIterator = function (it) {
  var iterFn = get(it);
  if (typeof iterFn != 'function') throw TypeError(it + ' is not iterable!');
  return anObject(iterFn.call(it));
};

},{"./_an-object":42,"./_core":46,"./core.get-iterator-method":113}],115:[function(require,module,exports){
var classof = require('./_classof');
var ITERATOR = require('./_wks')('iterator');
var Iterators = require('./_iterators');
module.exports = require('./_core').isIterable = function (it) {
  var O = Object(it);
  return O[ITERATOR] !== undefined
    || '@@iterator' in O
    // eslint-disable-next-line no-prototype-builtins
    || Iterators.hasOwnProperty(classof(O));
};

},{"./_classof":44,"./_core":46,"./_iterators":72,"./_wks":112}],116:[function(require,module,exports){
'use strict';
var ctx = require('./_ctx');
var $export = require('./_export');
var toObject = require('./_to-object');
var call = require('./_iter-call');
var isArrayIter = require('./_is-array-iter');
var toLength = require('./_to-length');
var createProperty = require('./_create-property');
var getIterFn = require('./core.get-iterator-method');

$export($export.S + $export.F * !require('./_iter-detect')(function (iter) { Array.from(iter); }), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
    var O = toObject(arrayLike);
    var C = typeof this == 'function' ? this : Array;
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var index = 0;
    var iterFn = getIterFn(O);
    var length, result, step, iterator;
    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
    // if object isn't iterable or it's array with default iterator - use simple case
    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
      }
    } else {
      length = toLength(O.length);
      for (result = new C(length); length > index; index++) {
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }
    result.length = index;
    return result;
  }
});

},{"./_create-property":47,"./_ctx":48,"./_export":54,"./_is-array-iter":64,"./_iter-call":67,"./_iter-detect":70,"./_to-length":105,"./_to-object":106,"./core.get-iterator-method":113}],117:[function(require,module,exports){
'use strict';
var addToUnscopables = require('./_add-to-unscopables');
var step = require('./_iter-step');
var Iterators = require('./_iterators');
var toIObject = require('./_to-iobject');

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = require('./_iter-define')(Array, 'Array', function (iterated, kind) {
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var kind = this._k;
  var index = this._i++;
  if (!O || index >= O.length) {
    this._t = undefined;
    return step(1);
  }
  if (kind == 'keys') return step(0, index);
  if (kind == 'values') return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');

},{"./_add-to-unscopables":40,"./_iter-define":69,"./_iter-step":71,"./_iterators":72,"./_to-iobject":104}],118:[function(require,module,exports){
var $export = require('./_export');
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
$export($export.S, 'Object', { create: require('./_object-create') });

},{"./_export":54,"./_object-create":77}],119:[function(require,module,exports){
var $export = require('./_export');
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperty: require('./_object-dp').f });

},{"./_descriptors":50,"./_export":54,"./_object-dp":78}],120:[function(require,module,exports){
// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
var toIObject = require('./_to-iobject');
var $getOwnPropertyDescriptor = require('./_object-gopd').f;

require('./_object-sap')('getOwnPropertyDescriptor', function () {
  return function getOwnPropertyDescriptor(it, key) {
    return $getOwnPropertyDescriptor(toIObject(it), key);
  };
});

},{"./_object-gopd":80,"./_object-sap":88,"./_to-iobject":104}],121:[function(require,module,exports){
// 19.1.2.9 Object.getPrototypeOf(O)
var toObject = require('./_to-object');
var $getPrototypeOf = require('./_object-gpo');

require('./_object-sap')('getPrototypeOf', function () {
  return function getPrototypeOf(it) {
    return $getPrototypeOf(toObject(it));
  };
});

},{"./_object-gpo":84,"./_object-sap":88,"./_to-object":106}],122:[function(require,module,exports){
// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export = require('./_export');
$export($export.S, 'Object', { setPrototypeOf: require('./_set-proto').set });

},{"./_export":54,"./_set-proto":94}],123:[function(require,module,exports){

},{}],124:[function(require,module,exports){
'use strict';
var LIBRARY = require('./_library');
var global = require('./_global');
var ctx = require('./_ctx');
var classof = require('./_classof');
var $export = require('./_export');
var isObject = require('./_is-object');
var aFunction = require('./_a-function');
var anInstance = require('./_an-instance');
var forOf = require('./_for-of');
var speciesConstructor = require('./_species-constructor');
var task = require('./_task').set;
var microtask = require('./_microtask')();
var newPromiseCapabilityModule = require('./_new-promise-capability');
var perform = require('./_perform');
var userAgent = require('./_user-agent');
var promiseResolve = require('./_promise-resolve');
var PROMISE = 'Promise';
var TypeError = global.TypeError;
var process = global.process;
var versions = process && process.versions;
var v8 = versions && versions.v8 || '';
var $Promise = global[PROMISE];
var isNode = classof(process) == 'process';
var empty = function () { /* empty */ };
var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;

var USE_NATIVE = !!function () {
  try {
    // correct subclassing with @@species support
    var promise = $Promise.resolve(1);
    var FakePromise = (promise.constructor = {})[require('./_wks')('species')] = function (exec) {
      exec(empty, empty);
    };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function')
      && promise.then(empty) instanceof FakePromise
      // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
      // we can't detect it synchronously, so just check versions
      && v8.indexOf('6.6') !== 0
      && userAgent.indexOf('Chrome/66') === -1;
  } catch (e) { /* empty */ }
}();

// helpers
var isThenable = function (it) {
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var notify = function (promise, isReject) {
  if (promise._n) return;
  promise._n = true;
  var chain = promise._c;
  microtask(function () {
    var value = promise._v;
    var ok = promise._s == 1;
    var i = 0;
    var run = function (reaction) {
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then, exited;
      try {
        if (handler) {
          if (!ok) {
            if (promise._h == 2) onHandleUnhandled(promise);
            promise._h = 1;
          }
          if (handler === true) result = value;
          else {
            if (domain) domain.enter();
            result = handler(value); // may throw
            if (domain) {
              domain.exit();
              exited = true;
            }
          }
          if (result === reaction.promise) {
            reject(TypeError('Promise-chain cycle'));
          } else if (then = isThenable(result)) {
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch (e) {
        if (domain && !exited) domain.exit();
        reject(e);
      }
    };
    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if (isReject && !promise._h) onUnhandled(promise);
  });
};
var onUnhandled = function (promise) {
  task.call(global, function () {
    var value = promise._v;
    var unhandled = isUnhandled(promise);
    var result, handler, console;
    if (unhandled) {
      result = perform(function () {
        if (isNode) {
          process.emit('unhandledRejection', value, promise);
        } else if (handler = global.onunhandledrejection) {
          handler({ promise: promise, reason: value });
        } else if ((console = global.console) && console.error) {
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    } promise._a = undefined;
    if (unhandled && result.e) throw result.v;
  });
};
var isUnhandled = function (promise) {
  return promise._h !== 1 && (promise._a || promise._c).length === 0;
};
var onHandleUnhandled = function (promise) {
  task.call(global, function () {
    var handler;
    if (isNode) {
      process.emit('rejectionHandled', promise);
    } else if (handler = global.onrejectionhandled) {
      handler({ promise: promise, reason: promise._v });
    }
  });
};
var $reject = function (value) {
  var promise = this;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if (!promise._a) promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function (value) {
  var promise = this;
  var then;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if (promise === value) throw TypeError("Promise can't be resolved itself");
    if (then = isThenable(value)) {
      microtask(function () {
        var wrapper = { _w: promise, _d: false }; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch (e) {
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch (e) {
    $reject.call({ _w: promise, _d: false }, e); // wrap
  }
};

// constructor polyfill
if (!USE_NATIVE) {
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor) {
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);
    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch (err) {
      $reject.call(this, err);
    }
  };
  // eslint-disable-next-line no-unused-vars
  Internal = function Promise(executor) {
    this._c = [];             // <- awaiting reactions
    this._a = undefined;      // <- checked in isUnhandled reactions
    this._s = 0;              // <- state
    this._d = false;          // <- done
    this._v = undefined;      // <- value
    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false;          // <- notify
  };
  Internal.prototype = require('./_redefine-all')($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected) {
      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if (this._a) this._a.push(reaction);
      if (this._s) notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function (onRejected) {
      return this.then(undefined, onRejected);
    }
  });
  OwnPromiseCapability = function () {
    var promise = new Internal();
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject = ctx($reject, promise, 1);
  };
  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
    return C === $Promise || C === Wrapper
      ? new OwnPromiseCapability(C)
      : newGenericPromiseCapability(C);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });
require('./_set-to-string-tag')($Promise, PROMISE);
require('./_set-species')(PROMISE);
Wrapper = require('./_core')[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r) {
    var capability = newPromiseCapability(this);
    var $$reject = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x) {
    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
  }
});
$export($export.S + $export.F * !(USE_NATIVE && require('./_iter-detect')(function (iter) {
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var values = [];
      var index = 0;
      var remaining = 1;
      forOf(iterable, false, function (promise) {
        var $index = index++;
        var alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.e) reject(result.v);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var reject = capability.reject;
    var result = perform(function () {
      forOf(iterable, false, function (promise) {
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if (result.e) reject(result.v);
    return capability.promise;
  }
});

},{"./_a-function":39,"./_an-instance":41,"./_classof":44,"./_core":46,"./_ctx":48,"./_export":54,"./_for-of":56,"./_global":57,"./_is-object":66,"./_iter-detect":70,"./_library":73,"./_microtask":75,"./_new-promise-capability":76,"./_perform":89,"./_promise-resolve":90,"./_redefine-all":92,"./_set-species":95,"./_set-to-string-tag":96,"./_species-constructor":99,"./_task":101,"./_user-agent":109,"./_wks":112}],125:[function(require,module,exports){
'use strict';
var $at = require('./_string-at')(true);

// 21.1.3.27 String.prototype[@@iterator]()
require('./_iter-define')(String, 'String', function (iterated) {
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var index = this._i;
  var point;
  if (index >= O.length) return { value: undefined, done: true };
  point = $at(O, index);
  this._i += point.length;
  return { value: point, done: false };
});

},{"./_iter-define":69,"./_string-at":100}],126:[function(require,module,exports){
'use strict';
// ECMAScript 6 symbols shim
var global = require('./_global');
var has = require('./_has');
var DESCRIPTORS = require('./_descriptors');
var $export = require('./_export');
var redefine = require('./_redefine');
var META = require('./_meta').KEY;
var $fails = require('./_fails');
var shared = require('./_shared');
var setToStringTag = require('./_set-to-string-tag');
var uid = require('./_uid');
var wks = require('./_wks');
var wksExt = require('./_wks-ext');
var wksDefine = require('./_wks-define');
var enumKeys = require('./_enum-keys');
var isArray = require('./_is-array');
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var toObject = require('./_to-object');
var toIObject = require('./_to-iobject');
var toPrimitive = require('./_to-primitive');
var createDesc = require('./_property-desc');
var _create = require('./_object-create');
var gOPNExt = require('./_object-gopn-ext');
var $GOPD = require('./_object-gopd');
var $GOPS = require('./_object-gops');
var $DP = require('./_object-dp');
var $keys = require('./_object-keys');
var gOPD = $GOPD.f;
var dP = $DP.f;
var gOPN = gOPNExt.f;
var $Symbol = global.Symbol;
var $JSON = global.JSON;
var _stringify = $JSON && $JSON.stringify;
var PROTOTYPE = 'prototype';
var HIDDEN = wks('_hidden');
var TO_PRIMITIVE = wks('toPrimitive');
var isEnum = {}.propertyIsEnumerable;
var SymbolRegistry = shared('symbol-registry');
var AllSymbols = shared('symbols');
var OPSymbols = shared('op-symbols');
var ObjectProto = Object[PROTOTYPE];
var USE_NATIVE = typeof $Symbol == 'function' && !!$GOPS.f;
var QObject = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function () {
  return _create(dP({}, 'a', {
    get: function () { return dP(this, 'a', { value: 7 }).a; }
  })).a != 7;
}) ? function (it, key, D) {
  var protoDesc = gOPD(ObjectProto, key);
  if (protoDesc) delete ObjectProto[key];
  dP(it, key, D);
  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function (tag) {
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D) {
  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if (has(AllSymbols, key)) {
    if (!D.enumerable) {
      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
      D = _create(D, { enumerable: createDesc(0, false) });
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P) {
  anObject(it);
  var keys = enumKeys(P = toIObject(P));
  var i = 0;
  var l = keys.length;
  var key;
  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P) {
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key) {
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
  it = toIObject(it);
  key = toPrimitive(key, true);
  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
  var D = gOPD(it, key);
  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it) {
  var names = gOPN(toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
  var IS_OP = it === ObjectProto;
  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if (!USE_NATIVE) {
  $Symbol = function Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function (value) {
      if (this === ObjectProto) $set.call(OPSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f = $defineProperty;
  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;
  require('./_object-pie').f = $propertyIsEnumerable;
  $GOPS.f = $getOwnPropertySymbols;

  if (DESCRIPTORS && !require('./_library')) {
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function (name) {
    return wrap(wks(name));
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

for (var es6Symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);

for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function (key) {
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
  },
  useSetter: function () { setter = true; },
  useSimple: function () { setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
// https://bugs.chromium.org/p/v8/issues/detail?id=3443
var FAILS_ON_PRIMITIVES = $fails(function () { $GOPS.f(1); });

$export($export.S + $export.F * FAILS_ON_PRIMITIVES, 'Object', {
  getOwnPropertySymbols: function getOwnPropertySymbols(it) {
    return $GOPS.f(toObject(it));
  }
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it) {
    var args = [it];
    var i = 1;
    var replacer, $replacer;
    while (arguments.length > i) args.push(arguments[i++]);
    $replacer = replacer = args[1];
    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
    if (!isArray(replacer)) replacer = function (key, value) {
      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
      if (!isSymbol(value)) return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);

},{"./_an-object":42,"./_descriptors":50,"./_enum-keys":53,"./_export":54,"./_fails":55,"./_global":57,"./_has":58,"./_hide":59,"./_is-array":65,"./_is-object":66,"./_library":73,"./_meta":74,"./_object-create":77,"./_object-dp":78,"./_object-gopd":80,"./_object-gopn":82,"./_object-gopn-ext":81,"./_object-gops":83,"./_object-keys":86,"./_object-pie":87,"./_property-desc":91,"./_redefine":93,"./_set-to-string-tag":96,"./_shared":98,"./_to-iobject":104,"./_to-object":106,"./_to-primitive":107,"./_uid":108,"./_wks":112,"./_wks-define":110,"./_wks-ext":111}],127:[function(require,module,exports){
// https://github.com/tc39/proposal-promise-finally
'use strict';
var $export = require('./_export');
var core = require('./_core');
var global = require('./_global');
var speciesConstructor = require('./_species-constructor');
var promiseResolve = require('./_promise-resolve');

$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {
  var C = speciesConstructor(this, core.Promise || global.Promise);
  var isFunction = typeof onFinally == 'function';
  return this.then(
    isFunction ? function (x) {
      return promiseResolve(C, onFinally()).then(function () { return x; });
    } : onFinally,
    isFunction ? function (e) {
      return promiseResolve(C, onFinally()).then(function () { throw e; });
    } : onFinally
  );
} });

},{"./_core":46,"./_export":54,"./_global":57,"./_promise-resolve":90,"./_species-constructor":99}],128:[function(require,module,exports){
'use strict';
// https://github.com/tc39/proposal-promise-try
var $export = require('./_export');
var newPromiseCapability = require('./_new-promise-capability');
var perform = require('./_perform');

$export($export.S, 'Promise', { 'try': function (callbackfn) {
  var promiseCapability = newPromiseCapability.f(this);
  var result = perform(callbackfn);
  (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);
  return promiseCapability.promise;
} });

},{"./_export":54,"./_new-promise-capability":76,"./_perform":89}],129:[function(require,module,exports){
require('./_wks-define')('asyncIterator');

},{"./_wks-define":110}],130:[function(require,module,exports){
require('./_wks-define')('observable');

},{"./_wks-define":110}],131:[function(require,module,exports){
require('./es6.array.iterator');
var global = require('./_global');
var hide = require('./_hide');
var Iterators = require('./_iterators');
var TO_STRING_TAG = require('./_wks')('toStringTag');

var DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' +
  'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' +
  'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' +
  'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' +
  'TextTrackList,TouchList').split(',');

for (var i = 0; i < DOMIterables.length; i++) {
  var NAME = DOMIterables[i];
  var Collection = global[NAME];
  var proto = Collection && Collection.prototype;
  if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
  Iterators[NAME] = Iterators.Array;
}

},{"./_global":57,"./_hide":59,"./_iterators":72,"./_wks":112,"./es6.array.iterator":117}],132:[function(require,module,exports){
/*
 *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */
'use strict';

var SDPUtils = require('sdp');

function fixStatsType(stat) {
  return {
    inboundrtp: 'inbound-rtp',
    outboundrtp: 'outbound-rtp',
    candidatepair: 'candidate-pair',
    localcandidate: 'local-candidate',
    remotecandidate: 'remote-candidate'
  }[stat.type] || stat.type;
}

function writeMediaSection(transceiver, caps, type, stream, dtlsRole) {
  var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps);

  // Map ICE parameters (ufrag, pwd) to SDP.
  sdp += SDPUtils.writeIceParameters(
      transceiver.iceGatherer.getLocalParameters());

  // Map DTLS parameters to SDP.
  sdp += SDPUtils.writeDtlsParameters(
      transceiver.dtlsTransport.getLocalParameters(),
      type === 'offer' ? 'actpass' : dtlsRole || 'active');

  sdp += 'a=mid:' + transceiver.mid + '\r\n';

  if (transceiver.rtpSender && transceiver.rtpReceiver) {
    sdp += 'a=sendrecv\r\n';
  } else if (transceiver.rtpSender) {
    sdp += 'a=sendonly\r\n';
  } else if (transceiver.rtpReceiver) {
    sdp += 'a=recvonly\r\n';
  } else {
    sdp += 'a=inactive\r\n';
  }

  if (transceiver.rtpSender) {
    var trackId = transceiver.rtpSender._initialTrackId ||
        transceiver.rtpSender.track.id;
    transceiver.rtpSender._initialTrackId = trackId;
    // spec.
    var msid = 'msid:' + (stream ? stream.id : '-') + ' ' +
        trackId + '\r\n';
    sdp += 'a=' + msid;
    // for Chrome. Legacy should no longer be required.
    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +
        ' ' + msid;

    // RTX
    if (transceiver.sendEncodingParameters[0].rtx) {
      sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +
          ' ' + msid;
      sdp += 'a=ssrc-group:FID ' +
          transceiver.sendEncodingParameters[0].ssrc + ' ' +
          transceiver.sendEncodingParameters[0].rtx.ssrc +
          '\r\n';
    }
  }
  // FIXME: this should be written by writeRtpDescription.
  sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +
      ' cname:' + SDPUtils.localCName + '\r\n';
  if (transceiver.rtpSender && transceiver.sendEncodingParameters[0].rtx) {
    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +
        ' cname:' + SDPUtils.localCName + '\r\n';
  }
  return sdp;
}

// Edge does not like
// 1) stun: filtered after 14393 unless ?transport=udp is present
// 2) turn: that does not have all of turn:host:port?transport=udp
// 3) turn: with ipv6 addresses
// 4) turn: occurring muliple times
function filterIceServers(iceServers, edgeVersion) {
  var hasTurn = false;
  iceServers = JSON.parse(JSON.stringify(iceServers));
  return iceServers.filter(function(server) {
    if (server && (server.urls || server.url)) {
      var urls = server.urls || server.url;
      if (server.url && !server.urls) {
        console.warn('RTCIceServer.url is deprecated! Use urls instead.');
      }
      var isString = typeof urls === 'string';
      if (isString) {
        urls = [urls];
      }
      urls = urls.filter(function(url) {
        var validTurn = url.indexOf('turn:') === 0 &&
            url.indexOf('transport=udp') !== -1 &&
            url.indexOf('turn:[') === -1 &&
            !hasTurn;

        if (validTurn) {
          hasTurn = true;
          return true;
        }
        return url.indexOf('stun:') === 0 && edgeVersion >= 14393 &&
            url.indexOf('?transport=udp') === -1;
      });

      delete server.url;
      server.urls = isString ? urls[0] : urls;
      return !!urls.length;
    }
  });
}

// Determines the intersection of local and remote capabilities.
function getCommonCapabilities(localCapabilities, remoteCapabilities) {
  var commonCapabilities = {
    codecs: [],
    headerExtensions: [],
    fecMechanisms: []
  };

  var findCodecByPayloadType = function(pt, codecs) {
    pt = parseInt(pt, 10);
    for (var i = 0; i < codecs.length; i++) {
      if (codecs[i].payloadType === pt ||
          codecs[i].preferredPayloadType === pt) {
        return codecs[i];
      }
    }
  };

  var rtxCapabilityMatches = function(lRtx, rRtx, lCodecs, rCodecs) {
    var lCodec = findCodecByPayloadType(lRtx.parameters.apt, lCodecs);
    var rCodec = findCodecByPayloadType(rRtx.parameters.apt, rCodecs);
    return lCodec && rCodec &&
        lCodec.name.toLowerCase() === rCodec.name.toLowerCase();
  };

  localCapabilities.codecs.forEach(function(lCodec) {
    for (var i = 0; i < remoteCapabilities.codecs.length; i++) {
      var rCodec = remoteCapabilities.codecs[i];
      if (lCodec.name.toLowerCase() === rCodec.name.toLowerCase() &&
          lCodec.clockRate === rCodec.clockRate) {
        if (lCodec.name.toLowerCase() === 'rtx' &&
            lCodec.parameters && rCodec.parameters.apt) {
          // for RTX we need to find the local rtx that has a apt
          // which points to the same local codec as the remote one.
          if (!rtxCapabilityMatches(lCodec, rCodec,
              localCapabilities.codecs, remoteCapabilities.codecs)) {
            continue;
          }
        }
        rCodec = JSON.parse(JSON.stringify(rCodec)); // deepcopy
        // number of channels is the highest common number of channels
        rCodec.numChannels = Math.min(lCodec.numChannels,
            rCodec.numChannels);
        // push rCodec so we reply with offerer payload type
        commonCapabilities.codecs.push(rCodec);

        // determine common feedback mechanisms
        rCodec.rtcpFeedback = rCodec.rtcpFeedback.filter(function(fb) {
          for (var j = 0; j < lCodec.rtcpFeedback.length; j++) {
            if (lCodec.rtcpFeedback[j].type === fb.type &&
                lCodec.rtcpFeedback[j].parameter === fb.parameter) {
              return true;
            }
          }
          return false;
        });
        // FIXME: also need to determine .parameters
        //  see https://github.com/openpeer/ortc/issues/569
        break;
      }
    }
  });

  localCapabilities.headerExtensions.forEach(function(lHeaderExtension) {
    for (var i = 0; i < remoteCapabilities.headerExtensions.length;
         i++) {
      var rHeaderExtension = remoteCapabilities.headerExtensions[i];
      if (lHeaderExtension.uri === rHeaderExtension.uri) {
        commonCapabilities.headerExtensions.push(rHeaderExtension);
        break;
      }
    }
  });

  // FIXME: fecMechanisms
  return commonCapabilities;
}

// is action=setLocalDescription with type allowed in signalingState
function isActionAllowedInSignalingState(action, type, signalingState) {
  return {
    offer: {
      setLocalDescription: ['stable', 'have-local-offer'],
      setRemoteDescription: ['stable', 'have-remote-offer']
    },
    answer: {
      setLocalDescription: ['have-remote-offer', 'have-local-pranswer'],
      setRemoteDescription: ['have-local-offer', 'have-remote-pranswer']
    }
  }[type][action].indexOf(signalingState) !== -1;
}

function maybeAddCandidate(iceTransport, candidate) {
  // Edge's internal representation adds some fields therefore
  // not all fieldѕ are taken into account.
  var alreadyAdded = iceTransport.getRemoteCandidates()
      .find(function(remoteCandidate) {
        return candidate.foundation === remoteCandidate.foundation &&
            candidate.ip === remoteCandidate.ip &&
            candidate.port === remoteCandidate.port &&
            candidate.priority === remoteCandidate.priority &&
            candidate.protocol === remoteCandidate.protocol &&
            candidate.type === remoteCandidate.type;
      });
  if (!alreadyAdded) {
    iceTransport.addRemoteCandidate(candidate);
  }
  return !alreadyAdded;
}


function makeError(name, description) {
  var e = new Error(description);
  e.name = name;
  // legacy error codes from https://heycam.github.io/webidl/#idl-DOMException-error-names
  e.code = {
    NotSupportedError: 9,
    InvalidStateError: 11,
    InvalidAccessError: 15,
    TypeError: undefined,
    OperationError: undefined
  }[name];
  return e;
}

module.exports = function(window, edgeVersion) {
  // https://w3c.github.io/mediacapture-main/#mediastream
  // Helper function to add the track to the stream and
  // dispatch the event ourselves.
  function addTrackToStreamAndFireEvent(track, stream) {
    stream.addTrack(track);
    stream.dispatchEvent(new window.MediaStreamTrackEvent('addtrack',
        {track: track}));
  }

  function removeTrackFromStreamAndFireEvent(track, stream) {
    stream.removeTrack(track);
    stream.dispatchEvent(new window.MediaStreamTrackEvent('removetrack',
        {track: track}));
  }

  function fireAddTrack(pc, track, receiver, streams) {
    var trackEvent = new Event('track');
    trackEvent.track = track;
    trackEvent.receiver = receiver;
    trackEvent.transceiver = {receiver: receiver};
    trackEvent.streams = streams;
    window.setTimeout(function() {
      pc._dispatchEvent('track', trackEvent);
    });
  }

  var RTCPeerConnection = function(config) {
    var pc = this;

    var _eventTarget = document.createDocumentFragment();
    ['addEventListener', 'removeEventListener', 'dispatchEvent']
        .forEach(function(method) {
          pc[method] = _eventTarget[method].bind(_eventTarget);
        });

    this.canTrickleIceCandidates = null;

    this.needNegotiation = false;

    this.localStreams = [];
    this.remoteStreams = [];

    this._localDescription = null;
    this._remoteDescription = null;

    this.signalingState = 'stable';
    this.iceConnectionState = 'new';
    this.connectionState = 'new';
    this.iceGatheringState = 'new';

    config = JSON.parse(JSON.stringify(config || {}));

    this.usingBundle = config.bundlePolicy === 'max-bundle';
    if (config.rtcpMuxPolicy === 'negotiate') {
      throw(makeError('NotSupportedError',
          'rtcpMuxPolicy \'negotiate\' is not supported'));
    } else if (!config.rtcpMuxPolicy) {
      config.rtcpMuxPolicy = 'require';
    }

    switch (config.iceTransportPolicy) {
      case 'all':
      case 'relay':
        break;
      default:
        config.iceTransportPolicy = 'all';
        break;
    }

    switch (config.bundlePolicy) {
      case 'balanced':
      case 'max-compat':
      case 'max-bundle':
        break;
      default:
        config.bundlePolicy = 'balanced';
        break;
    }

    config.iceServers = filterIceServers(config.iceServers || [], edgeVersion);

    this._iceGatherers = [];
    if (config.iceCandidatePoolSize) {
      for (var i = config.iceCandidatePoolSize; i > 0; i--) {
        this._iceGatherers.push(new window.RTCIceGatherer({
          iceServers: config.iceServers,
          gatherPolicy: config.iceTransportPolicy
        }));
      }
    } else {
      config.iceCandidatePoolSize = 0;
    }

    this._config = config;

    // per-track iceGathers, iceTransports, dtlsTransports, rtpSenders, ...
    // everything that is needed to describe a SDP m-line.
    this.transceivers = [];

    this._sdpSessionId = SDPUtils.generateSessionId();
    this._sdpSessionVersion = 0;

    this._dtlsRole = undefined; // role for a=setup to use in answers.

    this._isClosed = false;
  };

  Object.defineProperty(RTCPeerConnection.prototype, 'localDescription', {
    configurable: true,
    get: function() {
      return this._localDescription;
    }
  });
  Object.defineProperty(RTCPeerConnection.prototype, 'remoteDescription', {
    configurable: true,
    get: function() {
      return this._remoteDescription;
    }
  });

  // set up event handlers on prototype
  RTCPeerConnection.prototype.onicecandidate = null;
  RTCPeerConnection.prototype.onaddstream = null;
  RTCPeerConnection.prototype.ontrack = null;
  RTCPeerConnection.prototype.onremovestream = null;
  RTCPeerConnection.prototype.onsignalingstatechange = null;
  RTCPeerConnection.prototype.oniceconnectionstatechange = null;
  RTCPeerConnection.prototype.onconnectionstatechange = null;
  RTCPeerConnection.prototype.onicegatheringstatechange = null;
  RTCPeerConnection.prototype.onnegotiationneeded = null;
  RTCPeerConnection.prototype.ondatachannel = null;

  RTCPeerConnection.prototype._dispatchEvent = function(name, event) {
    if (this._isClosed) {
      return;
    }
    this.dispatchEvent(event);
    if (typeof this['on' + name] === 'function') {
      this['on' + name](event);
    }
  };

  RTCPeerConnection.prototype._emitGatheringStateChange = function() {
    var event = new Event('icegatheringstatechange');
    this._dispatchEvent('icegatheringstatechange', event);
  };

  RTCPeerConnection.prototype.getConfiguration = function() {
    return this._config;
  };

  RTCPeerConnection.prototype.getLocalStreams = function() {
    return this.localStreams;
  };

  RTCPeerConnection.prototype.getRemoteStreams = function() {
    return this.remoteStreams;
  };

  // internal helper to create a transceiver object.
  // (which is not yet the same as the WebRTC 1.0 transceiver)
  RTCPeerConnection.prototype._createTransceiver = function(kind, doNotAdd) {
    var hasBundleTransport = this.transceivers.length > 0;
    var transceiver = {
      track: null,
      iceGatherer: null,
      iceTransport: null,
      dtlsTransport: null,
      localCapabilities: null,
      remoteCapabilities: null,
      rtpSender: null,
      rtpReceiver: null,
      kind: kind,
      mid: null,
      sendEncodingParameters: null,
      recvEncodingParameters: null,
      stream: null,
      associatedRemoteMediaStreams: [],
      wantReceive: true
    };
    if (this.usingBundle && hasBundleTransport) {
      transceiver.iceTransport = this.transceivers[0].iceTransport;
      transceiver.dtlsTransport = this.transceivers[0].dtlsTransport;
    } else {
      var transports = this._createIceAndDtlsTransports();
      transceiver.iceTransport = transports.iceTransport;
      transceiver.dtlsTransport = transports.dtlsTransport;
    }
    if (!doNotAdd) {
      this.transceivers.push(transceiver);
    }
    return transceiver;
  };

  RTCPeerConnection.prototype.addTrack = function(track, stream) {
    if (this._isClosed) {
      throw makeError('InvalidStateError',
          'Attempted to call addTrack on a closed peerconnection.');
    }

    var alreadyExists = this.transceivers.find(function(s) {
      return s.track === track;
    });

    if (alreadyExists) {
      throw makeError('InvalidAccessError', 'Track already exists.');
    }

    var transceiver;
    for (var i = 0; i < this.transceivers.length; i++) {
      if (!this.transceivers[i].track &&
          this.transceivers[i].kind === track.kind) {
        transceiver = this.transceivers[i];
      }
    }
    if (!transceiver) {
      transceiver = this._createTransceiver(track.kind);
    }

    this._maybeFireNegotiationNeeded();

    if (this.localStreams.indexOf(stream) === -1) {
      this.localStreams.push(stream);
    }

    transceiver.track = track;
    transceiver.stream = stream;
    transceiver.rtpSender = new window.RTCRtpSender(track,
        transceiver.dtlsTransport);
    return transceiver.rtpSender;
  };

  RTCPeerConnection.prototype.addStream = function(stream) {
    var pc = this;
    if (edgeVersion >= 15025) {
      stream.getTracks().forEach(function(track) {
        pc.addTrack(track, stream);
      });
    } else {
      // Clone is necessary for local demos mostly, attaching directly
      // to two different senders does not work (build 10547).
      // Fixed in 15025 (or earlier)
      var clonedStream = stream.clone();
      stream.getTracks().forEach(function(track, idx) {
        var clonedTrack = clonedStream.getTracks()[idx];
        track.addEventListener('enabled', function(event) {
          clonedTrack.enabled = event.enabled;
        });
      });
      clonedStream.getTracks().forEach(function(track) {
        pc.addTrack(track, clonedStream);
      });
    }
  };

  RTCPeerConnection.prototype.removeTrack = function(sender) {
    if (this._isClosed) {
      throw makeError('InvalidStateError',
          'Attempted to call removeTrack on a closed peerconnection.');
    }

    if (!(sender instanceof window.RTCRtpSender)) {
      throw new TypeError('Argument 1 of RTCPeerConnection.removeTrack ' +
          'does not implement interface RTCRtpSender.');
    }

    var transceiver = this.transceivers.find(function(t) {
      return t.rtpSender === sender;
    });

    if (!transceiver) {
      throw makeError('InvalidAccessError',
          'Sender was not created by this connection.');
    }
    var stream = transceiver.stream;

    transceiver.rtpSender.stop();
    transceiver.rtpSender = null;
    transceiver.track = null;
    transceiver.stream = null;

    // remove the stream from the set of local streams
    var localStreams = this.transceivers.map(function(t) {
      return t.stream;
    });
    if (localStreams.indexOf(stream) === -1 &&
        this.localStreams.indexOf(stream) > -1) {
      this.localStreams.splice(this.localStreams.indexOf(stream), 1);
    }

    this._maybeFireNegotiationNeeded();
  };

  RTCPeerConnection.prototype.removeStream = function(stream) {
    var pc = this;
    stream.getTracks().forEach(function(track) {
      var sender = pc.getSenders().find(function(s) {
        return s.track === track;
      });
      if (sender) {
        pc.removeTrack(sender);
      }
    });
  };

  RTCPeerConnection.prototype.getSenders = function() {
    return this.transceivers.filter(function(transceiver) {
      return !!transceiver.rtpSender;
    })
    .map(function(transceiver) {
      return transceiver.rtpSender;
    });
  };

  RTCPeerConnection.prototype.getReceivers = function() {
    return this.transceivers.filter(function(transceiver) {
      return !!transceiver.rtpReceiver;
    })
    .map(function(transceiver) {
      return transceiver.rtpReceiver;
    });
  };


  RTCPeerConnection.prototype._createIceGatherer = function(sdpMLineIndex,
      usingBundle) {
    var pc = this;
    if (usingBundle && sdpMLineIndex > 0) {
      return this.transceivers[0].iceGatherer;
    } else if (this._iceGatherers.length) {
      return this._iceGatherers.shift();
    }
    var iceGatherer = new window.RTCIceGatherer({
      iceServers: this._config.iceServers,
      gatherPolicy: this._config.iceTransportPolicy
    });
    Object.defineProperty(iceGatherer, 'state',
        {value: 'new', writable: true}
    );

    this.transceivers[sdpMLineIndex].bufferedCandidateEvents = [];
    this.transceivers[sdpMLineIndex].bufferCandidates = function(event) {
      var end = !event.candidate || Object.keys(event.candidate).length === 0;
      // polyfill since RTCIceGatherer.state is not implemented in
      // Edge 10547 yet.
      iceGatherer.state = end ? 'completed' : 'gathering';
      if (pc.transceivers[sdpMLineIndex].bufferedCandidateEvents !== null) {
        pc.transceivers[sdpMLineIndex].bufferedCandidateEvents.push(event);
      }
    };
    iceGatherer.addEventListener('localcandidate',
      this.transceivers[sdpMLineIndex].bufferCandidates);
    return iceGatherer;
  };

  // start gathering from an RTCIceGatherer.
  RTCPeerConnection.prototype._gather = function(mid, sdpMLineIndex) {
    var pc = this;
    var iceGatherer = this.transceivers[sdpMLineIndex].iceGatherer;
    if (iceGatherer.onlocalcandidate) {
      return;
    }
    var bufferedCandidateEvents =
      this.transceivers[sdpMLineIndex].bufferedCandidateEvents;
    this.transceivers[sdpMLineIndex].bufferedCandidateEvents = null;
    iceGatherer.removeEventListener('localcandidate',
      this.transceivers[sdpMLineIndex].bufferCandidates);
    iceGatherer.onlocalcandidate = function(evt) {
      if (pc.usingBundle && sdpMLineIndex > 0) {
        // if we know that we use bundle we can drop candidates with
        // ѕdpMLineIndex > 0. If we don't do this then our state gets
        // confused since we dispose the extra ice gatherer.
        return;
      }
      var event = new Event('icecandidate');
      event.candidate = {sdpMid: mid, sdpMLineIndex: sdpMLineIndex};

      var cand = evt.candidate;
      // Edge emits an empty object for RTCIceCandidateComplete‥
      var end = !cand || Object.keys(cand).length === 0;
      if (end) {
        // polyfill since RTCIceGatherer.state is not implemented in
        // Edge 10547 yet.
        if (iceGatherer.state === 'new' || iceGatherer.state === 'gathering') {
          iceGatherer.state = 'completed';
        }
      } else {
        if (iceGatherer.state === 'new') {
          iceGatherer.state = 'gathering';
        }
        // RTCIceCandidate doesn't have a component, needs to be added
        cand.component = 1;
        // also the usernameFragment. TODO: update SDP to take both variants.
        cand.ufrag = iceGatherer.getLocalParameters().usernameFragment;

        var serializedCandidate = SDPUtils.writeCandidate(cand);
        event.candidate = Object.assign(event.candidate,
            SDPUtils.parseCandidate(serializedCandidate));

        event.candidate.candidate = serializedCandidate;
        event.candidate.toJSON = function() {
          return {
            candidate: event.candidate.candidate,
            sdpMid: event.candidate.sdpMid,
            sdpMLineIndex: event.candidate.sdpMLineIndex,
            usernameFragment: event.candidate.usernameFragment
          };
        };
      }

      // update local description.
      var sections = SDPUtils.getMediaSections(pc._localDescription.sdp);
      if (!end) {
        sections[event.candidate.sdpMLineIndex] +=
            'a=' + event.candidate.candidate + '\r\n';
      } else {
        sections[event.candidate.sdpMLineIndex] +=
            'a=end-of-candidates\r\n';
      }
      pc._localDescription.sdp =
          SDPUtils.getDescription(pc._localDescription.sdp) +
          sections.join('');
      var complete = pc.transceivers.every(function(transceiver) {
        return transceiver.iceGatherer &&
            transceiver.iceGatherer.state === 'completed';
      });

      if (pc.iceGatheringState !== 'gathering') {
        pc.iceGatheringState = 'gathering';
        pc._emitGatheringStateChange();
      }

      // Emit candidate. Also emit null candidate when all gatherers are
      // complete.
      if (!end) {
        pc._dispatchEvent('icecandidate', event);
      }
      if (complete) {
        pc._dispatchEvent('icecandidate', new Event('icecandidate'));
        pc.iceGatheringState = 'complete';
        pc._emitGatheringStateChange();
      }
    };

    // emit already gathered candidates.
    window.setTimeout(function() {
      bufferedCandidateEvents.forEach(function(e) {
        iceGatherer.onlocalcandidate(e);
      });
    }, 0);
  };

  // Create ICE transport and DTLS transport.
  RTCPeerConnection.prototype._createIceAndDtlsTransports = function() {
    var pc = this;
    var iceTransport = new window.RTCIceTransport(null);
    iceTransport.onicestatechange = function() {
      pc._updateIceConnectionState();
      pc._updateConnectionState();
    };

    var dtlsTransport = new window.RTCDtlsTransport(iceTransport);
    dtlsTransport.ondtlsstatechange = function() {
      pc._updateConnectionState();
    };
    dtlsTransport.onerror = function() {
      // onerror does not set state to failed by itself.
      Object.defineProperty(dtlsTransport, 'state',
          {value: 'failed', writable: true});
      pc._updateConnectionState();
    };

    return {
      iceTransport: iceTransport,
      dtlsTransport: dtlsTransport
    };
  };

  // Destroy ICE gatherer, ICE transport and DTLS transport.
  // Without triggering the callbacks.
  RTCPeerConnection.prototype._disposeIceAndDtlsTransports = function(
      sdpMLineIndex) {
    var iceGatherer = this.transceivers[sdpMLineIndex].iceGatherer;
    if (iceGatherer) {
      delete iceGatherer.onlocalcandidate;
      delete this.transceivers[sdpMLineIndex].iceGatherer;
    }
    var iceTransport = this.transceivers[sdpMLineIndex].iceTransport;
    if (iceTransport) {
      delete iceTransport.onicestatechange;
      delete this.transceivers[sdpMLineIndex].iceTransport;
    }
    var dtlsTransport = this.transceivers[sdpMLineIndex].dtlsTransport;
    if (dtlsTransport) {
      delete dtlsTransport.ondtlsstatechange;
      delete dtlsTransport.onerror;
      delete this.transceivers[sdpMLineIndex].dtlsTransport;
    }
  };

  // Start the RTP Sender and Receiver for a transceiver.
  RTCPeerConnection.prototype._transceive = function(transceiver,
      send, recv) {
    var params = getCommonCapabilities(transceiver.localCapabilities,
        transceiver.remoteCapabilities);
    if (send && transceiver.rtpSender) {
      params.encodings = transceiver.sendEncodingParameters;
      params.rtcp = {
        cname: SDPUtils.localCName,
        compound: transceiver.rtcpParameters.compound
      };
      if (transceiver.recvEncodingParameters.length) {
        params.rtcp.ssrc = transceiver.recvEncodingParameters[0].ssrc;
      }
      transceiver.rtpSender.send(params);
    }
    if (recv && transceiver.rtpReceiver && params.codecs.length > 0) {
      // remove RTX field in Edge 14942
      if (transceiver.kind === 'video'
          && transceiver.recvEncodingParameters
          && edgeVersion < 15019) {
        transceiver.recvEncodingParameters.forEach(function(p) {
          delete p.rtx;
        });
      }
      if (transceiver.recvEncodingParameters.length) {
        params.encodings = transceiver.recvEncodingParameters;
      } else {
        params.encodings = [{}];
      }
      params.rtcp = {
        compound: transceiver.rtcpParameters.compound
      };
      if (transceiver.rtcpParameters.cname) {
        params.rtcp.cname = transceiver.rtcpParameters.cname;
      }
      if (transceiver.sendEncodingParameters.length) {
        params.rtcp.ssrc = transceiver.sendEncodingParameters[0].ssrc;
      }
      transceiver.rtpReceiver.receive(params);
    }
  };

  RTCPeerConnection.prototype.setLocalDescription = function(description) {
    var pc = this;

    // Note: pranswer is not supported.
    if (['offer', 'answer'].indexOf(description.type) === -1) {
      return Promise.reject(makeError('TypeError',
          'Unsupported type "' + description.type + '"'));
    }

    if (!isActionAllowedInSignalingState('setLocalDescription',
        description.type, pc.signalingState) || pc._isClosed) {
      return Promise.reject(makeError('InvalidStateError',
          'Can not set local ' + description.type +
          ' in state ' + pc.signalingState));
    }

    var sections;
    var sessionpart;
    if (description.type === 'offer') {
      // VERY limited support for SDP munging. Limited to:
      // * changing the order of codecs
      sections = SDPUtils.splitSections(description.sdp);
      sessionpart = sections.shift();
      sections.forEach(function(mediaSection, sdpMLineIndex) {
        var caps = SDPUtils.parseRtpParameters(mediaSection);
        pc.transceivers[sdpMLineIndex].localCapabilities = caps;
      });

      pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {
        pc._gather(transceiver.mid, sdpMLineIndex);
      });
    } else if (description.type === 'answer') {
      sections = SDPUtils.splitSections(pc._remoteDescription.sdp);
      sessionpart = sections.shift();
      var isIceLite = SDPUtils.matchPrefix(sessionpart,
          'a=ice-lite').length > 0;
      sections.forEach(function(mediaSection, sdpMLineIndex) {
        var transceiver = pc.transceivers[sdpMLineIndex];
        var iceGatherer = transceiver.iceGatherer;
        var iceTransport = transceiver.iceTransport;
        var dtlsTransport = transceiver.dtlsTransport;
        var localCapabilities = transceiver.localCapabilities;
        var remoteCapabilities = transceiver.remoteCapabilities;

        // treat bundle-only as not-rejected.
        var rejected = SDPUtils.isRejected(mediaSection) &&
            SDPUtils.matchPrefix(mediaSection, 'a=bundle-only').length === 0;

        if (!rejected && !transceiver.rejected) {
          var remoteIceParameters = SDPUtils.getIceParameters(
              mediaSection, sessionpart);
          var remoteDtlsParameters = SDPUtils.getDtlsParameters(
              mediaSection, sessionpart);
          if (isIceLite) {
            remoteDtlsParameters.role = 'server';
          }

          if (!pc.usingBundle || sdpMLineIndex === 0) {
            pc._gather(transceiver.mid, sdpMLineIndex);
            if (iceTransport.state === 'new') {
              iceTransport.start(iceGatherer, remoteIceParameters,
                  isIceLite ? 'controlling' : 'controlled');
            }
            if (dtlsTransport.state === 'new') {
              dtlsTransport.start(remoteDtlsParameters);
            }
          }

          // Calculate intersection of capabilities.
          var params = getCommonCapabilities(localCapabilities,
              remoteCapabilities);

          // Start the RTCRtpSender. The RTCRtpReceiver for this
          // transceiver has already been started in setRemoteDescription.
          pc._transceive(transceiver,
              params.codecs.length > 0,
              false);
        }
      });
    }

    pc._localDescription = {
      type: description.type,
      sdp: description.sdp
    };
    if (description.type === 'offer') {
      pc._updateSignalingState('have-local-offer');
    } else {
      pc._updateSignalingState('stable');
    }

    return Promise.resolve();
  };

  RTCPeerConnection.prototype.setRemoteDescription = function(description) {
    var pc = this;

    // Note: pranswer is not supported.
    if (['offer', 'answer'].indexOf(description.type) === -1) {
      return Promise.reject(makeError('TypeError',
          'Unsupported type "' + description.type + '"'));
    }

    if (!isActionAllowedInSignalingState('setRemoteDescription',
        description.type, pc.signalingState) || pc._isClosed) {
      return Promise.reject(makeError('InvalidStateError',
          'Can not set remote ' + description.type +
          ' in state ' + pc.signalingState));
    }

    var streams = {};
    pc.remoteStreams.forEach(function(stream) {
      streams[stream.id] = stream;
    });
    var receiverList = [];
    var sections = SDPUtils.splitSections(description.sdp);
    var sessionpart = sections.shift();
    var isIceLite = SDPUtils.matchPrefix(sessionpart,
        'a=ice-lite').length > 0;
    var usingBundle = SDPUtils.matchPrefix(sessionpart,
        'a=group:BUNDLE ').length > 0;
    pc.usingBundle = usingBundle;
    var iceOptions = SDPUtils.matchPrefix(sessionpart,
        'a=ice-options:')[0];
    if (iceOptions) {
      pc.canTrickleIceCandidates = iceOptions.substr(14).split(' ')
          .indexOf('trickle') >= 0;
    } else {
      pc.canTrickleIceCandidates = false;
    }

    sections.forEach(function(mediaSection, sdpMLineIndex) {
      var lines = SDPUtils.splitLines(mediaSection);
      var kind = SDPUtils.getKind(mediaSection);
      // treat bundle-only as not-rejected.
      var rejected = SDPUtils.isRejected(mediaSection) &&
          SDPUtils.matchPrefix(mediaSection, 'a=bundle-only').length === 0;
      var protocol = lines[0].substr(2).split(' ')[2];

      var direction = SDPUtils.getDirection(mediaSection, sessionpart);
      var remoteMsid = SDPUtils.parseMsid(mediaSection);

      var mid = SDPUtils.getMid(mediaSection) || SDPUtils.generateIdentifier();

      // Reject datachannels which are not implemented yet.
      if (rejected || (kind === 'application' && (protocol === 'DTLS/SCTP' ||
          protocol === 'UDP/DTLS/SCTP'))) {
        // TODO: this is dangerous in the case where a non-rejected m-line
        //     becomes rejected.
        pc.transceivers[sdpMLineIndex] = {
          mid: mid,
          kind: kind,
          protocol: protocol,
          rejected: true
        };
        return;
      }

      if (!rejected && pc.transceivers[sdpMLineIndex] &&
          pc.transceivers[sdpMLineIndex].rejected) {
        // recycle a rejected transceiver.
        pc.transceivers[sdpMLineIndex] = pc._createTransceiver(kind, true);
      }

      var transceiver;
      var iceGatherer;
      var iceTransport;
      var dtlsTransport;
      var rtpReceiver;
      var sendEncodingParameters;
      var recvEncodingParameters;
      var localCapabilities;

      var track;
      // FIXME: ensure the mediaSection has rtcp-mux set.
      var remoteCapabilities = SDPUtils.parseRtpParameters(mediaSection);
      var remoteIceParameters;
      var remoteDtlsParameters;
      if (!rejected) {
        remoteIceParameters = SDPUtils.getIceParameters(mediaSection,
            sessionpart);
        remoteDtlsParameters = SDPUtils.getDtlsParameters(mediaSection,
            sessionpart);
        remoteDtlsParameters.role = 'client';
      }
      recvEncodingParameters =
          SDPUtils.parseRtpEncodingParameters(mediaSection);

      var rtcpParameters = SDPUtils.parseRtcpParameters(mediaSection);

      var isComplete = SDPUtils.matchPrefix(mediaSection,
          'a=end-of-candidates', sessionpart).length > 0;
      var cands = SDPUtils.matchPrefix(mediaSection, 'a=candidate:')
          .map(function(cand) {
            return SDPUtils.parseCandidate(cand);
          })
          .filter(function(cand) {
            return cand.component === 1;
          });

      // Check if we can use BUNDLE and dispose transports.
      if ((description.type === 'offer' || description.type === 'answer') &&
          !rejected && usingBundle && sdpMLineIndex > 0 &&
          pc.transceivers[sdpMLineIndex]) {
        pc._disposeIceAndDtlsTransports(sdpMLineIndex);
        pc.transceivers[sdpMLineIndex].iceGatherer =
            pc.transceivers[0].iceGatherer;
        pc.transceivers[sdpMLineIndex].iceTransport =
            pc.transceivers[0].iceTransport;
        pc.transceivers[sdpMLineIndex].dtlsTransport =
            pc.transceivers[0].dtlsTransport;
        if (pc.transceivers[sdpMLineIndex].rtpSender) {
          pc.transceivers[sdpMLineIndex].rtpSender.setTransport(
              pc.transceivers[0].dtlsTransport);
        }
        if (pc.transceivers[sdpMLineIndex].rtpReceiver) {
          pc.transceivers[sdpMLineIndex].rtpReceiver.setTransport(
              pc.transceivers[0].dtlsTransport);
        }
      }
      if (description.type === 'offer' && !rejected) {
        transceiver = pc.transceivers[sdpMLineIndex] ||
            pc._createTransceiver(kind);
        transceiver.mid = mid;

        if (!transceiver.iceGatherer) {
          transceiver.iceGatherer = pc._createIceGatherer(sdpMLineIndex,
              usingBundle);
        }

        if (cands.length && transceiver.iceTransport.state === 'new') {
          if (isComplete && (!usingBundle || sdpMLineIndex === 0)) {
            transceiver.iceTransport.setRemoteCandidates(cands);
          } else {
            cands.forEach(function(candidate) {
              maybeAddCandidate(transceiver.iceTransport, candidate);
            });
          }
        }

        localCapabilities = window.RTCRtpReceiver.getCapabilities(kind);

        // filter RTX until additional stuff needed for RTX is implemented
        // in adapter.js
        if (edgeVersion < 15019) {
          localCapabilities.codecs = localCapabilities.codecs.filter(
              function(codec) {
                return codec.name !== 'rtx';
              });
        }

        sendEncodingParameters = transceiver.sendEncodingParameters || [{
          ssrc: (2 * sdpMLineIndex + 2) * 1001
        }];

        // TODO: rewrite to use http://w3c.github.io/webrtc-pc/#set-associated-remote-streams
        var isNewTrack = false;
        if (direction === 'sendrecv' || direction === 'sendonly') {
          isNewTrack = !transceiver.rtpReceiver;
          rtpReceiver = transceiver.rtpReceiver ||
              new window.RTCRtpReceiver(transceiver.dtlsTransport, kind);

          if (isNewTrack) {
            var stream;
            track = rtpReceiver.track;
            // FIXME: does not work with Plan B.
            if (remoteMsid && remoteMsid.stream === '-') {
              // no-op. a stream id of '-' means: no associated stream.
            } else if (remoteMsid) {
              if (!streams[remoteMsid.stream]) {
                streams[remoteMsid.stream] = new window.MediaStream();
                Object.defineProperty(streams[remoteMsid.stream], 'id', {
                  get: function() {
                    return remoteMsid.stream;
                  }
                });
              }
              Object.defineProperty(track, 'id', {
                get: function() {
                  return remoteMsid.track;
                }
              });
              stream = streams[remoteMsid.stream];
            } else {
              if (!streams.default) {
                streams.default = new window.MediaStream();
              }
              stream = streams.default;
            }
            if (stream) {
              addTrackToStreamAndFireEvent(track, stream);
              transceiver.associatedRemoteMediaStreams.push(stream);
            }
            receiverList.push([track, rtpReceiver, stream]);
          }
        } else if (transceiver.rtpReceiver && transceiver.rtpReceiver.track) {
          transceiver.associatedRemoteMediaStreams.forEach(function(s) {
            var nativeTrack = s.getTracks().find(function(t) {
              return t.id === transceiver.rtpReceiver.track.id;
            });
            if (nativeTrack) {
              removeTrackFromStreamAndFireEvent(nativeTrack, s);
            }
          });
          transceiver.associatedRemoteMediaStreams = [];
        }

        transceiver.localCapabilities = localCapabilities;
        transceiver.remoteCapabilities = remoteCapabilities;
        transceiver.rtpReceiver = rtpReceiver;
        transceiver.rtcpParameters = rtcpParameters;
        transceiver.sendEncodingParameters = sendEncodingParameters;
        transceiver.recvEncodingParameters = recvEncodingParameters;

        // Start the RTCRtpReceiver now. The RTPSender is started in
        // setLocalDescription.
        pc._transceive(pc.transceivers[sdpMLineIndex],
            false,
            isNewTrack);
      } else if (description.type === 'answer' && !rejected) {
        transceiver = pc.transceivers[sdpMLineIndex];
        iceGatherer = transceiver.iceGatherer;
        iceTransport = transceiver.iceTransport;
        dtlsTransport = transceiver.dtlsTransport;
        rtpReceiver = transceiver.rtpReceiver;
        sendEncodingParameters = transceiver.sendEncodingParameters;
        localCapabilities = transceiver.localCapabilities;

        pc.transceivers[sdpMLineIndex].recvEncodingParameters =
            recvEncodingParameters;
        pc.transceivers[sdpMLineIndex].remoteCapabilities =
            remoteCapabilities;
        pc.transceivers[sdpMLineIndex].rtcpParameters = rtcpParameters;

        if (cands.length && iceTransport.state === 'new') {
          if ((isIceLite || isComplete) &&
              (!usingBundle || sdpMLineIndex === 0)) {
            iceTransport.setRemoteCandidates(cands);
          } else {
            cands.forEach(function(candidate) {
              maybeAddCandidate(transceiver.iceTransport, candidate);
            });
          }
        }

        if (!usingBundle || sdpMLineIndex === 0) {
          if (iceTransport.state === 'new') {
            iceTransport.start(iceGatherer, remoteIceParameters,
                'controlling');
          }
          if (dtlsTransport.state === 'new') {
            dtlsTransport.start(remoteDtlsParameters);
          }
        }

        // If the offer contained RTX but the answer did not,
        // remove RTX from sendEncodingParameters.
        var commonCapabilities = getCommonCapabilities(
          transceiver.localCapabilities,
          transceiver.remoteCapabilities);

        var hasRtx = commonCapabilities.codecs.filter(function(c) {
          return c.name.toLowerCase() === 'rtx';
        }).length;
        if (!hasRtx && transceiver.sendEncodingParameters[0].rtx) {
          delete transceiver.sendEncodingParameters[0].rtx;
        }

        pc._transceive(transceiver,
            direction === 'sendrecv' || direction === 'recvonly',
            direction === 'sendrecv' || direction === 'sendonly');

        // TODO: rewrite to use http://w3c.github.io/webrtc-pc/#set-associated-remote-streams
        if (rtpReceiver &&
            (direction === 'sendrecv' || direction === 'sendonly')) {
          track = rtpReceiver.track;
          if (remoteMsid) {
            if (!streams[remoteMsid.stream]) {
              streams[remoteMsid.stream] = new window.MediaStream();
            }
            addTrackToStreamAndFireEvent(track, streams[remoteMsid.stream]);
            receiverList.push([track, rtpReceiver, streams[remoteMsid.stream]]);
          } else {
            if (!streams.default) {
              streams.default = new window.MediaStream();
            }
            addTrackToStreamAndFireEvent(track, streams.default);
            receiverList.push([track, rtpReceiver, streams.default]);
          }
        } else {
          // FIXME: actually the receiver should be created later.
          delete transceiver.rtpReceiver;
        }
      }
    });

    if (pc._dtlsRole === undefined) {
      pc._dtlsRole = description.type === 'offer' ? 'active' : 'passive';
    }

    pc._remoteDescription = {
      type: description.type,
      sdp: description.sdp
    };
    if (description.type === 'offer') {
      pc._updateSignalingState('have-remote-offer');
    } else {
      pc._updateSignalingState('stable');
    }
    Object.keys(streams).forEach(function(sid) {
      var stream = streams[sid];
      if (stream.getTracks().length) {
        if (pc.remoteStreams.indexOf(stream) === -1) {
          pc.remoteStreams.push(stream);
          var event = new Event('addstream');
          event.stream = stream;
          window.setTimeout(function() {
            pc._dispatchEvent('addstream', event);
          });
        }

        receiverList.forEach(function(item) {
          var track = item[0];
          var receiver = item[1];
          if (stream.id !== item[2].id) {
            return;
          }
          fireAddTrack(pc, track, receiver, [stream]);
        });
      }
    });
    receiverList.forEach(function(item) {
      if (item[2]) {
        return;
      }
      fireAddTrack(pc, item[0], item[1], []);
    });

    // check whether addIceCandidate({}) was called within four seconds after
    // setRemoteDescription.
    window.setTimeout(function() {
      if (!(pc && pc.transceivers)) {
        return;
      }
      pc.transceivers.forEach(function(transceiver) {
        if (transceiver.iceTransport &&
            transceiver.iceTransport.state === 'new' &&
            transceiver.iceTransport.getRemoteCandidates().length > 0) {
          console.warn('Timeout for addRemoteCandidate. Consider sending ' +
              'an end-of-candidates notification');
          transceiver.iceTransport.addRemoteCandidate({});
        }
      });
    }, 4000);

    return Promise.resolve();
  };

  RTCPeerConnection.prototype.close = function() {
    this.transceivers.forEach(function(transceiver) {
      /* not yet
      if (transceiver.iceGatherer) {
        transceiver.iceGatherer.close();
      }
      */
      if (transceiver.iceTransport) {
        transceiver.iceTransport.stop();
      }
      if (transceiver.dtlsTransport) {
        transceiver.dtlsTransport.stop();
      }
      if (transceiver.rtpSender) {
        transceiver.rtpSender.stop();
      }
      if (transceiver.rtpReceiver) {
        transceiver.rtpReceiver.stop();
      }
    });
    // FIXME: clean up tracks, local streams, remote streams, etc
    this._isClosed = true;
    this._updateSignalingState('closed');
  };

  // Update the signaling state.
  RTCPeerConnection.prototype._updateSignalingState = function(newState) {
    this.signalingState = newState;
    var event = new Event('signalingstatechange');
    this._dispatchEvent('signalingstatechange', event);
  };

  // Determine whether to fire the negotiationneeded event.
  RTCPeerConnection.prototype._maybeFireNegotiationNeeded = function() {
    var pc = this;
    if (this.signalingState !== 'stable' || this.needNegotiation === true) {
      return;
    }
    this.needNegotiation = true;
    window.setTimeout(function() {
      if (pc.needNegotiation) {
        pc.needNegotiation = false;
        var event = new Event('negotiationneeded');
        pc._dispatchEvent('negotiationneeded', event);
      }
    }, 0);
  };

  // Update the ice connection state.
  RTCPeerConnection.prototype._updateIceConnectionState = function() {
    var newState;
    var states = {
      'new': 0,
      closed: 0,
      checking: 0,
      connected: 0,
      completed: 0,
      disconnected: 0,
      failed: 0
    };
    this.transceivers.forEach(function(transceiver) {
      if (transceiver.iceTransport && !transceiver.rejected) {
        states[transceiver.iceTransport.state]++;
      }
    });

    newState = 'new';
    if (states.failed > 0) {
      newState = 'failed';
    } else if (states.checking > 0) {
      newState = 'checking';
    } else if (states.disconnected > 0) {
      newState = 'disconnected';
    } else if (states.new > 0) {
      newState = 'new';
    } else if (states.connected > 0) {
      newState = 'connected';
    } else if (states.completed > 0) {
      newState = 'completed';
    }

    if (newState !== this.iceConnectionState) {
      this.iceConnectionState = newState;
      var event = new Event('iceconnectionstatechange');
      this._dispatchEvent('iceconnectionstatechange', event);
    }
  };

  // Update the connection state.
  RTCPeerConnection.prototype._updateConnectionState = function() {
    var newState;
    var states = {
      'new': 0,
      closed: 0,
      connecting: 0,
      connected: 0,
      completed: 0,
      disconnected: 0,
      failed: 0
    };
    this.transceivers.forEach(function(transceiver) {
      if (transceiver.iceTransport && transceiver.dtlsTransport &&
          !transceiver.rejected) {
        states[transceiver.iceTransport.state]++;
        states[transceiver.dtlsTransport.state]++;
      }
    });
    // ICETransport.completed and connected are the same for this purpose.
    states.connected += states.completed;

    newState = 'new';
    if (states.failed > 0) {
      newState = 'failed';
    } else if (states.connecting > 0) {
      newState = 'connecting';
    } else if (states.disconnected > 0) {
      newState = 'disconnected';
    } else if (states.new > 0) {
      newState = 'new';
    } else if (states.connected > 0) {
      newState = 'connected';
    }

    if (newState !== this.connectionState) {
      this.connectionState = newState;
      var event = new Event('connectionstatechange');
      this._dispatchEvent('connectionstatechange', event);
    }
  };

  RTCPeerConnection.prototype.createOffer = function() {
    var pc = this;

    if (pc._isClosed) {
      return Promise.reject(makeError('InvalidStateError',
          'Can not call createOffer after close'));
    }

    var numAudioTracks = pc.transceivers.filter(function(t) {
      return t.kind === 'audio';
    }).length;
    var numVideoTracks = pc.transceivers.filter(function(t) {
      return t.kind === 'video';
    }).length;

    // Determine number of audio and video tracks we need to send/recv.
    var offerOptions = arguments[0];
    if (offerOptions) {
      // Reject Chrome legacy constraints.
      if (offerOptions.mandatory || offerOptions.optional) {
        throw new TypeError(
            'Legacy mandatory/optional constraints not supported.');
      }
      if (offerOptions.offerToReceiveAudio !== undefined) {
        if (offerOptions.offerToReceiveAudio === true) {
          numAudioTracks = 1;
        } else if (offerOptions.offerToReceiveAudio === false) {
          numAudioTracks = 0;
        } else {
          numAudioTracks = offerOptions.offerToReceiveAudio;
        }
      }
      if (offerOptions.offerToReceiveVideo !== undefined) {
        if (offerOptions.offerToReceiveVideo === true) {
          numVideoTracks = 1;
        } else if (offerOptions.offerToReceiveVideo === false) {
          numVideoTracks = 0;
        } else {
          numVideoTracks = offerOptions.offerToReceiveVideo;
        }
      }
    }

    pc.transceivers.forEach(function(transceiver) {
      if (transceiver.kind === 'audio') {
        numAudioTracks--;
        if (numAudioTracks < 0) {
          transceiver.wantReceive = false;
        }
      } else if (transceiver.kind === 'video') {
        numVideoTracks--;
        if (numVideoTracks < 0) {
          transceiver.wantReceive = false;
        }
      }
    });

    // Create M-lines for recvonly streams.
    while (numAudioTracks > 0 || numVideoTracks > 0) {
      if (numAudioTracks > 0) {
        pc._createTransceiver('audio');
        numAudioTracks--;
      }
      if (numVideoTracks > 0) {
        pc._createTransceiver('video');
        numVideoTracks--;
      }
    }

    var sdp = SDPUtils.writeSessionBoilerplate(pc._sdpSessionId,
        pc._sdpSessionVersion++);
    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {
      // For each track, create an ice gatherer, ice transport,
      // dtls transport, potentially rtpsender and rtpreceiver.
      var track = transceiver.track;
      var kind = transceiver.kind;
      var mid = transceiver.mid || SDPUtils.generateIdentifier();
      transceiver.mid = mid;

      if (!transceiver.iceGatherer) {
        transceiver.iceGatherer = pc._createIceGatherer(sdpMLineIndex,
            pc.usingBundle);
      }

      var localCapabilities = window.RTCRtpSender.getCapabilities(kind);
      // filter RTX until additional stuff needed for RTX is implemented
      // in adapter.js
      if (edgeVersion < 15019) {
        localCapabilities.codecs = localCapabilities.codecs.filter(
            function(codec) {
              return codec.name !== 'rtx';
            });
      }
      localCapabilities.codecs.forEach(function(codec) {
        // work around https://bugs.chromium.org/p/webrtc/issues/detail?id=6552
        // by adding level-asymmetry-allowed=1
        if (codec.name === 'H264' &&
            codec.parameters['level-asymmetry-allowed'] === undefined) {
          codec.parameters['level-asymmetry-allowed'] = '1';
        }

        // for subsequent offers, we might have to re-use the payload
        // type of the last offer.
        if (transceiver.remoteCapabilities &&
            transceiver.remoteCapabilities.codecs) {
          transceiver.remoteCapabilities.codecs.forEach(function(remoteCodec) {
            if (codec.name.toLowerCase() === remoteCodec.name.toLowerCase() &&
                codec.clockRate === remoteCodec.clockRate) {
              codec.preferredPayloadType = remoteCodec.payloadType;
            }
          });
        }
      });
      localCapabilities.headerExtensions.forEach(function(hdrExt) {
        var remoteExtensions = transceiver.remoteCapabilities &&
            transceiver.remoteCapabilities.headerExtensions || [];
        remoteExtensions.forEach(function(rHdrExt) {
          if (hdrExt.uri === rHdrExt.uri) {
            hdrExt.id = rHdrExt.id;
          }
        });
      });

      // generate an ssrc now, to be used later in rtpSender.send
      var sendEncodingParameters = transceiver.sendEncodingParameters || [{
        ssrc: (2 * sdpMLineIndex + 1) * 1001
      }];
      if (track) {
        // add RTX
        if (edgeVersion >= 15019 && kind === 'video' &&
            !sendEncodingParameters[0].rtx) {
          sendEncodingParameters[0].rtx = {
            ssrc: sendEncodingParameters[0].ssrc + 1
          };
        }
      }

      if (transceiver.wantReceive) {
        transceiver.rtpReceiver = new window.RTCRtpReceiver(
            transceiver.dtlsTransport, kind);
      }

      transceiver.localCapabilities = localCapabilities;
      transceiver.sendEncodingParameters = sendEncodingParameters;
    });

    // always offer BUNDLE and dispose on return if not supported.
    if (pc._config.bundlePolicy !== 'max-compat') {
      sdp += 'a=group:BUNDLE ' + pc.transceivers.map(function(t) {
        return t.mid;
      }).join(' ') + '\r\n';
    }
    sdp += 'a=ice-options:trickle\r\n';

    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {
      sdp += writeMediaSection(transceiver, transceiver.localCapabilities,
          'offer', transceiver.stream, pc._dtlsRole);
      sdp += 'a=rtcp-rsize\r\n';

      if (transceiver.iceGatherer && pc.iceGatheringState !== 'new' &&
          (sdpMLineIndex === 0 || !pc.usingBundle)) {
        transceiver.iceGatherer.getLocalCandidates().forEach(function(cand) {
          cand.component = 1;
          sdp += 'a=' + SDPUtils.writeCandidate(cand) + '\r\n';
        });

        if (transceiver.iceGatherer.state === 'completed') {
          sdp += 'a=end-of-candidates\r\n';
        }
      }
    });

    var desc = new window.RTCSessionDescription({
      type: 'offer',
      sdp: sdp
    });
    return Promise.resolve(desc);
  };

  RTCPeerConnection.prototype.createAnswer = function() {
    var pc = this;

    if (pc._isClosed) {
      return Promise.reject(makeError('InvalidStateError',
          'Can not call createAnswer after close'));
    }

    if (!(pc.signalingState === 'have-remote-offer' ||
        pc.signalingState === 'have-local-pranswer')) {
      return Promise.reject(makeError('InvalidStateError',
          'Can not call createAnswer in signalingState ' + pc.signalingState));
    }

    var sdp = SDPUtils.writeSessionBoilerplate(pc._sdpSessionId,
        pc._sdpSessionVersion++);
    if (pc.usingBundle) {
      sdp += 'a=group:BUNDLE ' + pc.transceivers.map(function(t) {
        return t.mid;
      }).join(' ') + '\r\n';
    }
    sdp += 'a=ice-options:trickle\r\n';

    var mediaSectionsInOffer = SDPUtils.getMediaSections(
        pc._remoteDescription.sdp).length;
    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {
      if (sdpMLineIndex + 1 > mediaSectionsInOffer) {
        return;
      }
      if (transceiver.rejected) {
        if (transceiver.kind === 'application') {
          if (transceiver.protocol === 'DTLS/SCTP') { // legacy fmt
            sdp += 'm=application 0 DTLS/SCTP 5000\r\n';
          } else {
            sdp += 'm=application 0 ' + transceiver.protocol +
                ' webrtc-datachannel\r\n';
          }
        } else if (transceiver.kind === 'audio') {
          sdp += 'm=audio 0 UDP/TLS/RTP/SAVPF 0\r\n' +
              'a=rtpmap:0 PCMU/8000\r\n';
        } else if (transceiver.kind === 'video') {
          sdp += 'm=video 0 UDP/TLS/RTP/SAVPF 120\r\n' +
              'a=rtpmap:120 VP8/90000\r\n';
        }
        sdp += 'c=IN IP4 0.0.0.0\r\n' +
            'a=inactive\r\n' +
            'a=mid:' + transceiver.mid + '\r\n';
        return;
      }

      // FIXME: look at direction.
      if (transceiver.stream) {
        var localTrack;
        if (transceiver.kind === 'audio') {
          localTrack = transceiver.stream.getAudioTracks()[0];
        } else if (transceiver.kind === 'video') {
          localTrack = transceiver.stream.getVideoTracks()[0];
        }
        if (localTrack) {
          // add RTX
          if (edgeVersion >= 15019 && transceiver.kind === 'video' &&
              !transceiver.sendEncodingParameters[0].rtx) {
            transceiver.sendEncodingParameters[0].rtx = {
              ssrc: transceiver.sendEncodingParameters[0].ssrc + 1
            };
          }
        }
      }

      // Calculate intersection of capabilities.
      var commonCapabilities = getCommonCapabilities(
          transceiver.localCapabilities,
          transceiver.remoteCapabilities);

      var hasRtx = commonCapabilities.codecs.filter(function(c) {
        return c.name.toLowerCase() === 'rtx';
      }).length;
      if (!hasRtx && transceiver.sendEncodingParameters[0].rtx) {
        delete transceiver.sendEncodingParameters[0].rtx;
      }

      sdp += writeMediaSection(transceiver, commonCapabilities,
          'answer', transceiver.stream, pc._dtlsRole);
      if (transceiver.rtcpParameters &&
          transceiver.rtcpParameters.reducedSize) {
        sdp += 'a=rtcp-rsize\r\n';
      }
    });

    var desc = new window.RTCSessionDescription({
      type: 'answer',
      sdp: sdp
    });
    return Promise.resolve(desc);
  };

  RTCPeerConnection.prototype.addIceCandidate = function(candidate) {
    var pc = this;
    var sections;
    if (candidate && !(candidate.sdpMLineIndex !== undefined ||
        candidate.sdpMid)) {
      return Promise.reject(new TypeError('sdpMLineIndex or sdpMid required'));
    }

    // TODO: needs to go into ops queue.
    return new Promise(function(resolve, reject) {
      if (!pc._remoteDescription) {
        return reject(makeError('InvalidStateError',
            'Can not add ICE candidate without a remote description'));
      } else if (!candidate || candidate.candidate === '') {
        for (var j = 0; j < pc.transceivers.length; j++) {
          if (pc.transceivers[j].rejected) {
            continue;
          }
          pc.transceivers[j].iceTransport.addRemoteCandidate({});
          sections = SDPUtils.getMediaSections(pc._remoteDescription.sdp);
          sections[j] += 'a=end-of-candidates\r\n';
          pc._remoteDescription.sdp =
              SDPUtils.getDescription(pc._remoteDescription.sdp) +
              sections.join('');
          if (pc.usingBundle) {
            break;
          }
        }
      } else {
        var sdpMLineIndex = candidate.sdpMLineIndex;
        if (candidate.sdpMid) {
          for (var i = 0; i < pc.transceivers.length; i++) {
            if (pc.transceivers[i].mid === candidate.sdpMid) {
              sdpMLineIndex = i;
              break;
            }
          }
        }
        var transceiver = pc.transceivers[sdpMLineIndex];
        if (transceiver) {
          if (transceiver.rejected) {
            return resolve();
          }
          var cand = Object.keys(candidate.candidate).length > 0 ?
              SDPUtils.parseCandidate(candidate.candidate) : {};
          // Ignore Chrome's invalid candidates since Edge does not like them.
          if (cand.protocol === 'tcp' && (cand.port === 0 || cand.port === 9)) {
            return resolve();
          }
          // Ignore RTCP candidates, we assume RTCP-MUX.
          if (cand.component && cand.component !== 1) {
            return resolve();
          }
          // when using bundle, avoid adding candidates to the wrong
          // ice transport. And avoid adding candidates added in the SDP.
          if (sdpMLineIndex === 0 || (sdpMLineIndex > 0 &&
              transceiver.iceTransport !== pc.transceivers[0].iceTransport)) {
            if (!maybeAddCandidate(transceiver.iceTransport, cand)) {
              return reject(makeError('OperationError',
                  'Can not add ICE candidate'));
            }
          }

          // update the remoteDescription.
          var candidateString = candidate.candidate.trim();
          if (candidateString.indexOf('a=') === 0) {
            candidateString = candidateString.substr(2);
          }
          sections = SDPUtils.getMediaSections(pc._remoteDescription.sdp);
          sections[sdpMLineIndex] += 'a=' +
              (cand.type ? candidateString : 'end-of-candidates')
              + '\r\n';
          pc._remoteDescription.sdp =
              SDPUtils.getDescription(pc._remoteDescription.sdp) +
              sections.join('');
        } else {
          return reject(makeError('OperationError',
              'Can not add ICE candidate'));
        }
      }
      resolve();
    });
  };

  RTCPeerConnection.prototype.getStats = function(selector) {
    if (selector && selector instanceof window.MediaStreamTrack) {
      var senderOrReceiver = null;
      this.transceivers.forEach(function(transceiver) {
        if (transceiver.rtpSender &&
            transceiver.rtpSender.track === selector) {
          senderOrReceiver = transceiver.rtpSender;
        } else if (transceiver.rtpReceiver &&
            transceiver.rtpReceiver.track === selector) {
          senderOrReceiver = transceiver.rtpReceiver;
        }
      });
      if (!senderOrReceiver) {
        throw makeError('InvalidAccessError', 'Invalid selector.');
      }
      return senderOrReceiver.getStats();
    }

    var promises = [];
    this.transceivers.forEach(function(transceiver) {
      ['rtpSender', 'rtpReceiver', 'iceGatherer', 'iceTransport',
          'dtlsTransport'].forEach(function(method) {
            if (transceiver[method]) {
              promises.push(transceiver[method].getStats());
            }
          });
    });
    return Promise.all(promises).then(function(allStats) {
      var results = new Map();
      allStats.forEach(function(stats) {
        stats.forEach(function(stat) {
          results.set(stat.id, stat);
        });
      });
      return results;
    });
  };

  // fix low-level stat names and return Map instead of object.
  var ortcObjects = ['RTCRtpSender', 'RTCRtpReceiver', 'RTCIceGatherer',
    'RTCIceTransport', 'RTCDtlsTransport'];
  ortcObjects.forEach(function(ortcObjectName) {
    var obj = window[ortcObjectName];
    if (obj && obj.prototype && obj.prototype.getStats) {
      var nativeGetstats = obj.prototype.getStats;
      obj.prototype.getStats = function() {
        return nativeGetstats.apply(this)
        .then(function(nativeStats) {
          var mapStats = new Map();
          Object.keys(nativeStats).forEach(function(id) {
            nativeStats[id].type = fixStatsType(nativeStats[id]);
            mapStats.set(id, nativeStats[id]);
          });
          return mapStats;
        });
      };
    }
  });

  // legacy callback shims. Should be moved to adapter.js some days.
  var methods = ['createOffer', 'createAnswer'];
  methods.forEach(function(method) {
    var nativeMethod = RTCPeerConnection.prototype[method];
    RTCPeerConnection.prototype[method] = function() {
      var args = arguments;
      if (typeof args[0] === 'function' ||
          typeof args[1] === 'function') { // legacy
        return nativeMethod.apply(this, [arguments[2]])
        .then(function(description) {
          if (typeof args[0] === 'function') {
            args[0].apply(null, [description]);
          }
        }, function(error) {
          if (typeof args[1] === 'function') {
            args[1].apply(null, [error]);
          }
        });
      }
      return nativeMethod.apply(this, arguments);
    };
  });

  methods = ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate'];
  methods.forEach(function(method) {
    var nativeMethod = RTCPeerConnection.prototype[method];
    RTCPeerConnection.prototype[method] = function() {
      var args = arguments;
      if (typeof args[1] === 'function' ||
          typeof args[2] === 'function') { // legacy
        return nativeMethod.apply(this, arguments)
        .then(function() {
          if (typeof args[1] === 'function') {
            args[1].apply(null);
          }
        }, function(error) {
          if (typeof args[2] === 'function') {
            args[2].apply(null, [error]);
          }
        });
      }
      return nativeMethod.apply(this, arguments);
    };
  });

  // getStats is special. It doesn't have a spec legacy method yet we support
  // getStats(something, cb) without error callbacks.
  ['getStats'].forEach(function(method) {
    var nativeMethod = RTCPeerConnection.prototype[method];
    RTCPeerConnection.prototype[method] = function() {
      var args = arguments;
      if (typeof args[1] === 'function') {
        return nativeMethod.apply(this, arguments)
        .then(function() {
          if (typeof args[1] === 'function') {
            args[1].apply(null);
          }
        });
      }
      return nativeMethod.apply(this, arguments);
    };
  });

  return RTCPeerConnection;
};

},{"sdp":133}],133:[function(require,module,exports){
/* eslint-env node */
'use strict';

// SDP helpers.
var SDPUtils = {};

// Generate an alphanumeric identifier for cname or mids.
// TODO: use UUIDs instead? https://gist.github.com/jed/982883
SDPUtils.generateIdentifier = function() {
  return Math.random().toString(36).substr(2, 10);
};

// The RTCP CNAME used by all peerconnections from the same JS.
SDPUtils.localCName = SDPUtils.generateIdentifier();

// Splits SDP into lines, dealing with both CRLF and LF.
SDPUtils.splitLines = function(blob) {
  return blob.trim().split('\n').map(function(line) {
    return line.trim();
  });
};
// Splits SDP into sessionpart and mediasections. Ensures CRLF.
SDPUtils.splitSections = function(blob) {
  var parts = blob.split('\nm=');
  return parts.map(function(part, index) {
    return (index > 0 ? 'm=' + part : part).trim() + '\r\n';
  });
};

// returns the session description.
SDPUtils.getDescription = function(blob) {
  var sections = SDPUtils.splitSections(blob);
  return sections && sections[0];
};

// returns the individual media sections.
SDPUtils.getMediaSections = function(blob) {
  var sections = SDPUtils.splitSections(blob);
  sections.shift();
  return sections;
};

// Returns lines that start with a certain prefix.
SDPUtils.matchPrefix = function(blob, prefix) {
  return SDPUtils.splitLines(blob).filter(function(line) {
    return line.indexOf(prefix) === 0;
  });
};

// Parses an ICE candidate line. Sample input:
// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8
// rport 55996"
SDPUtils.parseCandidate = function(line) {
  var parts;
  // Parse both variants.
  if (line.indexOf('a=candidate:') === 0) {
    parts = line.substring(12).split(' ');
  } else {
    parts = line.substring(10).split(' ');
  }

  var candidate = {
    foundation: parts[0],
    component: parseInt(parts[1], 10),
    protocol: parts[2].toLowerCase(),
    priority: parseInt(parts[3], 10),
    ip: parts[4],
    address: parts[4], // address is an alias for ip.
    port: parseInt(parts[5], 10),
    // skip parts[6] == 'typ'
    type: parts[7]
  };

  for (var i = 8; i < parts.length; i += 2) {
    switch (parts[i]) {
      case 'raddr':
        candidate.relatedAddress = parts[i + 1];
        break;
      case 'rport':
        candidate.relatedPort = parseInt(parts[i + 1], 10);
        break;
      case 'tcptype':
        candidate.tcpType = parts[i + 1];
        break;
      case 'ufrag':
        candidate.ufrag = parts[i + 1]; // for backward compability.
        candidate.usernameFragment = parts[i + 1];
        break;
      default: // extension handling, in particular ufrag
        candidate[parts[i]] = parts[i + 1];
        break;
    }
  }
  return candidate;
};

// Translates a candidate object into SDP candidate attribute.
SDPUtils.writeCandidate = function(candidate) {
  var sdp = [];
  sdp.push(candidate.foundation);
  sdp.push(candidate.component);
  sdp.push(candidate.protocol.toUpperCase());
  sdp.push(candidate.priority);
  sdp.push(candidate.address || candidate.ip);
  sdp.push(candidate.port);

  var type = candidate.type;
  sdp.push('typ');
  sdp.push(type);
  if (type !== 'host' && candidate.relatedAddress &&
      candidate.relatedPort) {
    sdp.push('raddr');
    sdp.push(candidate.relatedAddress);
    sdp.push('rport');
    sdp.push(candidate.relatedPort);
  }
  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {
    sdp.push('tcptype');
    sdp.push(candidate.tcpType);
  }
  if (candidate.usernameFragment || candidate.ufrag) {
    sdp.push('ufrag');
    sdp.push(candidate.usernameFragment || candidate.ufrag);
  }
  return 'candidate:' + sdp.join(' ');
};

// Parses an ice-options line, returns an array of option tags.
// a=ice-options:foo bar
SDPUtils.parseIceOptions = function(line) {
  return line.substr(14).split(' ');
};

// Parses an rtpmap line, returns RTCRtpCoddecParameters. Sample input:
// a=rtpmap:111 opus/48000/2
SDPUtils.parseRtpMap = function(line) {
  var parts = line.substr(9).split(' ');
  var parsed = {
    payloadType: parseInt(parts.shift(), 10) // was: id
  };

  parts = parts[0].split('/');

  parsed.name = parts[0];
  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate
  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;
  // legacy alias, got renamed back to channels in ORTC.
  parsed.numChannels = parsed.channels;
  return parsed;
};

// Generate an a=rtpmap line from RTCRtpCodecCapability or
// RTCRtpCodecParameters.
SDPUtils.writeRtpMap = function(codec) {
  var pt = codec.payloadType;
  if (codec.preferredPayloadType !== undefined) {
    pt = codec.preferredPayloadType;
  }
  var channels = codec.channels || codec.numChannels || 1;
  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +
      (channels !== 1 ? '/' + channels : '') + '\r\n';
};

// Parses an a=extmap line (headerextension from RFC 5285). Sample input:
// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset
// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset
SDPUtils.parseExtmap = function(line) {
  var parts = line.substr(9).split(' ');
  return {
    id: parseInt(parts[0], 10),
    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',
    uri: parts[1]
  };
};

// Generates a=extmap line from RTCRtpHeaderExtensionParameters or
// RTCRtpHeaderExtension.
SDPUtils.writeExtmap = function(headerExtension) {
  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +
      (headerExtension.direction && headerExtension.direction !== 'sendrecv'
        ? '/' + headerExtension.direction
        : '') +
      ' ' + headerExtension.uri + '\r\n';
};

// Parses an ftmp line, returns dictionary. Sample input:
// a=fmtp:96 vbr=on;cng=on
// Also deals with vbr=on; cng=on
SDPUtils.parseFmtp = function(line) {
  var parsed = {};
  var kv;
  var parts = line.substr(line.indexOf(' ') + 1).split(';');
  for (var j = 0; j < parts.length; j++) {
    kv = parts[j].trim().split('=');
    parsed[kv[0].trim()] = kv[1];
  }
  return parsed;
};

// Generates an a=ftmp line from RTCRtpCodecCapability or RTCRtpCodecParameters.
SDPUtils.writeFmtp = function(codec) {
  var line = '';
  var pt = codec.payloadType;
  if (codec.preferredPayloadType !== undefined) {
    pt = codec.preferredPayloadType;
  }
  if (codec.parameters && Object.keys(codec.parameters).length) {
    var params = [];
    Object.keys(codec.parameters).forEach(function(param) {
      if (codec.parameters[param]) {
        params.push(param + '=' + codec.parameters[param]);
      } else {
        params.push(param);
      }
    });
    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\r\n';
  }
  return line;
};

// Parses an rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:
// a=rtcp-fb:98 nack rpsi
SDPUtils.parseRtcpFb = function(line) {
  var parts = line.substr(line.indexOf(' ') + 1).split(' ');
  return {
    type: parts.shift(),
    parameter: parts.join(' ')
  };
};
// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.
SDPUtils.writeRtcpFb = function(codec) {
  var lines = '';
  var pt = codec.payloadType;
  if (codec.preferredPayloadType !== undefined) {
    pt = codec.preferredPayloadType;
  }
  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {
    // FIXME: special handling for trr-int?
    codec.rtcpFeedback.forEach(function(fb) {
      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +
      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +
          '\r\n';
    });
  }
  return lines;
};

// Parses an RFC 5576 ssrc media attribute. Sample input:
// a=ssrc:3735928559 cname:something
SDPUtils.parseSsrcMedia = function(line) {
  var sp = line.indexOf(' ');
  var parts = {
    ssrc: parseInt(line.substr(7, sp - 7), 10)
  };
  var colon = line.indexOf(':', sp);
  if (colon > -1) {
    parts.attribute = line.substr(sp + 1, colon - sp - 1);
    parts.value = line.substr(colon + 1);
  } else {
    parts.attribute = line.substr(sp + 1);
  }
  return parts;
};

SDPUtils.parseSsrcGroup = function(line) {
  var parts = line.substr(13).split(' ');
  return {
    semantics: parts.shift(),
    ssrcs: parts.map(function(ssrc) {
      return parseInt(ssrc, 10);
    })
  };
};

// Extracts the MID (RFC 5888) from a media section.
// returns the MID or undefined if no mid line was found.
SDPUtils.getMid = function(mediaSection) {
  var mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];
  if (mid) {
    return mid.substr(6);
  }
};

SDPUtils.parseFingerprint = function(line) {
  var parts = line.substr(14).split(' ');
  return {
    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.
    value: parts[1]
  };
};

// Extracts DTLS parameters from SDP media section or sessionpart.
// FIXME: for consistency with other functions this should only
//   get the fingerprint line as input. See also getIceParameters.
SDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {
  var lines = SDPUtils.matchPrefix(mediaSection + sessionpart,
    'a=fingerprint:');
  // Note: a=setup line is ignored since we use the 'auto' role.
  // Note2: 'algorithm' is not case sensitive except in Edge.
  return {
    role: 'auto',
    fingerprints: lines.map(SDPUtils.parseFingerprint)
  };
};

// Serializes DTLS parameters to SDP.
SDPUtils.writeDtlsParameters = function(params, setupType) {
  var sdp = 'a=setup:' + setupType + '\r\n';
  params.fingerprints.forEach(function(fp) {
    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\r\n';
  });
  return sdp;
};

// Parses a=crypto lines into
//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members
SDPUtils.parseCryptoLine = function(line) {
  var parts = line.substr(9).split(' ');
  return {
    tag: parseInt(parts[0], 10),
    cryptoSuite: parts[1],
    keyParams: parts[2],
    sessionParams: parts.slice(3),
  };
};

SDPUtils.writeCryptoLine = function(parameters) {
  return 'a=crypto:' + parameters.tag + ' ' +
    parameters.cryptoSuite + ' ' +
    (typeof parameters.keyParams === 'object'
      ? SDPUtils.writeCryptoKeyParams(parameters.keyParams)
      : parameters.keyParams) +
    (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') +
    '\r\n';
};

// Parses the crypto key parameters into
//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*
SDPUtils.parseCryptoKeyParams = function(keyParams) {
  if (keyParams.indexOf('inline:') !== 0) {
    return null;
  }
  var parts = keyParams.substr(7).split('|');
  return {
    keyMethod: 'inline',
    keySalt: parts[0],
    lifeTime: parts[1],
    mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,
    mkiLength: parts[2] ? parts[2].split(':')[1] : undefined,
  };
};

SDPUtils.writeCryptoKeyParams = function(keyParams) {
  return keyParams.keyMethod + ':'
    + keyParams.keySalt +
    (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') +
    (keyParams.mkiValue && keyParams.mkiLength
      ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength
      : '');
};

// Extracts all SDES paramters.
SDPUtils.getCryptoParameters = function(mediaSection, sessionpart) {
  var lines = SDPUtils.matchPrefix(mediaSection + sessionpart,
    'a=crypto:');
  return lines.map(SDPUtils.parseCryptoLine);
};

// Parses ICE information from SDP media section or sessionpart.
// FIXME: for consistency with other functions this should only
//   get the ice-ufrag and ice-pwd lines as input.
SDPUtils.getIceParameters = function(mediaSection, sessionpart) {
  var ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart,
    'a=ice-ufrag:')[0];
  var pwd = SDPUtils.matchPrefix(mediaSection + sessionpart,
    'a=ice-pwd:')[0];
  if (!(ufrag && pwd)) {
    return null;
  }
  return {
    usernameFragment: ufrag.substr(12),
    password: pwd.substr(10),
  };
};

// Serializes ICE parameters to SDP.
SDPUtils.writeIceParameters = function(params) {
  return 'a=ice-ufrag:' + params.usernameFragment + '\r\n' +
      'a=ice-pwd:' + params.password + '\r\n';
};

// Parses the SDP media section and returns RTCRtpParameters.
SDPUtils.parseRtpParameters = function(mediaSection) {
  var description = {
    codecs: [],
    headerExtensions: [],
    fecMechanisms: [],
    rtcp: []
  };
  var lines = SDPUtils.splitLines(mediaSection);
  var mline = lines[0].split(' ');
  for (var i = 3; i < mline.length; i++) { // find all codecs from mline[3..]
    var pt = mline[i];
    var rtpmapline = SDPUtils.matchPrefix(
      mediaSection, 'a=rtpmap:' + pt + ' ')[0];
    if (rtpmapline) {
      var codec = SDPUtils.parseRtpMap(rtpmapline);
      var fmtps = SDPUtils.matchPrefix(
        mediaSection, 'a=fmtp:' + pt + ' ');
      // Only the first a=fmtp:<pt> is considered.
      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};
      codec.rtcpFeedback = SDPUtils.matchPrefix(
        mediaSection, 'a=rtcp-fb:' + pt + ' ')
        .map(SDPUtils.parseRtcpFb);
      description.codecs.push(codec);
      // parse FEC mechanisms from rtpmap lines.
      switch (codec.name.toUpperCase()) {
        case 'RED':
        case 'ULPFEC':
          description.fecMechanisms.push(codec.name.toUpperCase());
          break;
        default: // only RED and ULPFEC are recognized as FEC mechanisms.
          break;
      }
    }
  }
  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(function(line) {
    description.headerExtensions.push(SDPUtils.parseExtmap(line));
  });
  // FIXME: parse rtcp.
  return description;
};

// Generates parts of the SDP media section describing the capabilities /
// parameters.
SDPUtils.writeRtpDescription = function(kind, caps) {
  var sdp = '';

  // Build the mline.
  sdp += 'm=' + kind + ' ';
  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.
  sdp += ' UDP/TLS/RTP/SAVPF ';
  sdp += caps.codecs.map(function(codec) {
    if (codec.preferredPayloadType !== undefined) {
      return codec.preferredPayloadType;
    }
    return codec.payloadType;
  }).join(' ') + '\r\n';

  sdp += 'c=IN IP4 0.0.0.0\r\n';
  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\r\n';

  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.
  caps.codecs.forEach(function(codec) {
    sdp += SDPUtils.writeRtpMap(codec);
    sdp += SDPUtils.writeFmtp(codec);
    sdp += SDPUtils.writeRtcpFb(codec);
  });
  var maxptime = 0;
  caps.codecs.forEach(function(codec) {
    if (codec.maxptime > maxptime) {
      maxptime = codec.maxptime;
    }
  });
  if (maxptime > 0) {
    sdp += 'a=maxptime:' + maxptime + '\r\n';
  }
  sdp += 'a=rtcp-mux\r\n';

  if (caps.headerExtensions) {
    caps.headerExtensions.forEach(function(extension) {
      sdp += SDPUtils.writeExtmap(extension);
    });
  }
  // FIXME: write fecMechanisms.
  return sdp;
};

// Parses the SDP media section and returns an array of
// RTCRtpEncodingParameters.
SDPUtils.parseRtpEncodingParameters = function(mediaSection) {
  var encodingParameters = [];
  var description = SDPUtils.parseRtpParameters(mediaSection);
  var hasRed = description.fecMechanisms.indexOf('RED') !== -1;
  var hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;

  // filter a=ssrc:... cname:, ignore PlanB-msid
  var ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
    .map(function(line) {
      return SDPUtils.parseSsrcMedia(line);
    })
    .filter(function(parts) {
      return parts.attribute === 'cname';
    });
  var primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;
  var secondarySsrc;

  var flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')
    .map(function(line) {
      var parts = line.substr(17).split(' ');
      return parts.map(function(part) {
        return parseInt(part, 10);
      });
    });
  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {
    secondarySsrc = flows[0][1];
  }

  description.codecs.forEach(function(codec) {
    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {
      var encParam = {
        ssrc: primarySsrc,
        codecPayloadType: parseInt(codec.parameters.apt, 10)
      };
      if (primarySsrc && secondarySsrc) {
        encParam.rtx = {ssrc: secondarySsrc};
      }
      encodingParameters.push(encParam);
      if (hasRed) {
        encParam = JSON.parse(JSON.stringify(encParam));
        encParam.fec = {
          ssrc: primarySsrc,
          mechanism: hasUlpfec ? 'red+ulpfec' : 'red'
        };
        encodingParameters.push(encParam);
      }
    }
  });
  if (encodingParameters.length === 0 && primarySsrc) {
    encodingParameters.push({
      ssrc: primarySsrc
    });
  }

  // we support both b=AS and b=TIAS but interpret AS as TIAS.
  var bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');
  if (bandwidth.length) {
    if (bandwidth[0].indexOf('b=TIAS:') === 0) {
      bandwidth = parseInt(bandwidth[0].substr(7), 10);
    } else if (bandwidth[0].indexOf('b=AS:') === 0) {
      // use formula from JSEP to convert b=AS to TIAS value.
      bandwidth = parseInt(bandwidth[0].substr(5), 10) * 1000 * 0.95
          - (50 * 40 * 8);
    } else {
      bandwidth = undefined;
    }
    encodingParameters.forEach(function(params) {
      params.maxBitrate = bandwidth;
    });
  }
  return encodingParameters;
};

// parses http://draft.ortc.org/#rtcrtcpparameters*
SDPUtils.parseRtcpParameters = function(mediaSection) {
  var rtcpParameters = {};

  // Gets the first SSRC. Note tha with RTX there might be multiple
  // SSRCs.
  var remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
    .map(function(line) {
      return SDPUtils.parseSsrcMedia(line);
    })
    .filter(function(obj) {
      return obj.attribute === 'cname';
    })[0];
  if (remoteSsrc) {
    rtcpParameters.cname = remoteSsrc.value;
    rtcpParameters.ssrc = remoteSsrc.ssrc;
  }

  // Edge uses the compound attribute instead of reducedSize
  // compound is !reducedSize
  var rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');
  rtcpParameters.reducedSize = rsize.length > 0;
  rtcpParameters.compound = rsize.length === 0;

  // parses the rtcp-mux attrіbute.
  // Note that Edge does not support unmuxed RTCP.
  var mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');
  rtcpParameters.mux = mux.length > 0;

  return rtcpParameters;
};

// parses either a=msid: or a=ssrc:... msid lines and returns
// the id of the MediaStream and MediaStreamTrack.
SDPUtils.parseMsid = function(mediaSection) {
  var parts;
  var spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');
  if (spec.length === 1) {
    parts = spec[0].substr(7).split(' ');
    return {stream: parts[0], track: parts[1]};
  }
  var planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
    .map(function(line) {
      return SDPUtils.parseSsrcMedia(line);
    })
    .filter(function(msidParts) {
      return msidParts.attribute === 'msid';
    });
  if (planB.length > 0) {
    parts = planB[0].value.split(' ');
    return {stream: parts[0], track: parts[1]};
  }
};

// SCTP
// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back
// to draft-ietf-mmusic-sctp-sdp-05
SDPUtils.parseSctpDescription = function(mediaSection) {
  var mline = SDPUtils.parseMLine(mediaSection);
  var maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');
  var maxMessageSize;
  if (maxSizeLine.length > 0) {
    maxMessageSize = parseInt(maxSizeLine[0].substr(19), 10);
  }
  if (isNaN(maxMessageSize)) {
    maxMessageSize = 65536;
  }
  var sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');
  if (sctpPort.length > 0) {
    return {
      port: parseInt(sctpPort[0].substr(12), 10),
      protocol: mline.fmt,
      maxMessageSize: maxMessageSize
    };
  }
  var sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');
  if (sctpMapLines.length > 0) {
    var parts = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:')[0]
      .substr(10)
      .split(' ');
    return {
      port: parseInt(parts[0], 10),
      protocol: parts[1],
      maxMessageSize: maxMessageSize
    };
  }
};

// SCTP
// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers
// support by now receiving in this format, unless we originally parsed
// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line
// protocol of DTLS/SCTP -- without UDP/ or TCP/)
SDPUtils.writeSctpDescription = function(media, sctp) {
  var output = [];
  if (media.protocol !== 'DTLS/SCTP') {
    output = [
      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\r\n',
      'c=IN IP4 0.0.0.0\r\n',
      'a=sctp-port:' + sctp.port + '\r\n'
    ];
  } else {
    output = [
      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\r\n',
      'c=IN IP4 0.0.0.0\r\n',
      'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\r\n'
    ];
  }
  if (sctp.maxMessageSize !== undefined) {
    output.push('a=max-message-size:' + sctp.maxMessageSize + '\r\n');
  }
  return output.join('');
};

// Generate a session ID for SDP.
// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1
// recommends using a cryptographically random +ve 64-bit value
// but right now this should be acceptable and within the right range
SDPUtils.generateSessionId = function() {
  return Math.random().toString().substr(2, 21);
};

// Write boilder plate for start of SDP
// sessId argument is optional - if not supplied it will
// be generated randomly
// sessVersion is optional and defaults to 2
// sessUser is optional and defaults to 'thisisadapterortc'
SDPUtils.writeSessionBoilerplate = function(sessId, sessVer, sessUser) {
  var sessionId;
  var version = sessVer !== undefined ? sessVer : 2;
  if (sessId) {
    sessionId = sessId;
  } else {
    sessionId = SDPUtils.generateSessionId();
  }
  var user = sessUser || 'thisisadapterortc';
  // FIXME: sess-id should be an NTP timestamp.
  return 'v=0\r\n' +
      'o=' + user + ' ' + sessionId + ' ' + version +
        ' IN IP4 127.0.0.1\r\n' +
      's=-\r\n' +
      't=0 0\r\n';
};

SDPUtils.writeMediaSection = function(transceiver, caps, type, stream) {
  var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps);

  // Map ICE parameters (ufrag, pwd) to SDP.
  sdp += SDPUtils.writeIceParameters(
    transceiver.iceGatherer.getLocalParameters());

  // Map DTLS parameters to SDP.
  sdp += SDPUtils.writeDtlsParameters(
    transceiver.dtlsTransport.getLocalParameters(),
    type === 'offer' ? 'actpass' : 'active');

  sdp += 'a=mid:' + transceiver.mid + '\r\n';

  if (transceiver.direction) {
    sdp += 'a=' + transceiver.direction + '\r\n';
  } else if (transceiver.rtpSender && transceiver.rtpReceiver) {
    sdp += 'a=sendrecv\r\n';
  } else if (transceiver.rtpSender) {
    sdp += 'a=sendonly\r\n';
  } else if (transceiver.rtpReceiver) {
    sdp += 'a=recvonly\r\n';
  } else {
    sdp += 'a=inactive\r\n';
  }

  if (transceiver.rtpSender) {
    // spec.
    var msid = 'msid:' + stream.id + ' ' +
        transceiver.rtpSender.track.id + '\r\n';
    sdp += 'a=' + msid;

    // for Chrome.
    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +
        ' ' + msid;
    if (transceiver.sendEncodingParameters[0].rtx) {
      sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +
          ' ' + msid;
      sdp += 'a=ssrc-group:FID ' +
          transceiver.sendEncodingParameters[0].ssrc + ' ' +
          transceiver.sendEncodingParameters[0].rtx.ssrc +
          '\r\n';
    }
  }
  // FIXME: this should be written by writeRtpDescription.
  sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +
      ' cname:' + SDPUtils.localCName + '\r\n';
  if (transceiver.rtpSender && transceiver.sendEncodingParameters[0].rtx) {
    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +
        ' cname:' + SDPUtils.localCName + '\r\n';
  }
  return sdp;
};

// Gets the direction from the mediaSection or the sessionpart.
SDPUtils.getDirection = function(mediaSection, sessionpart) {
  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.
  var lines = SDPUtils.splitLines(mediaSection);
  for (var i = 0; i < lines.length; i++) {
    switch (lines[i]) {
      case 'a=sendrecv':
      case 'a=sendonly':
      case 'a=recvonly':
      case 'a=inactive':
        return lines[i].substr(2);
      default:
        // FIXME: What should happen here?
    }
  }
  if (sessionpart) {
    return SDPUtils.getDirection(sessionpart);
  }
  return 'sendrecv';
};

SDPUtils.getKind = function(mediaSection) {
  var lines = SDPUtils.splitLines(mediaSection);
  var mline = lines[0].split(' ');
  return mline[0].substr(2);
};

SDPUtils.isRejected = function(mediaSection) {
  return mediaSection.split(' ', 2)[1] === '0';
};

SDPUtils.parseMLine = function(mediaSection) {
  var lines = SDPUtils.splitLines(mediaSection);
  var parts = lines[0].substr(2).split(' ');
  return {
    kind: parts[0],
    port: parseInt(parts[1], 10),
    protocol: parts[2],
    fmt: parts.slice(3).join(' ')
  };
};

SDPUtils.parseOLine = function(mediaSection) {
  var line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];
  var parts = line.substr(2).split(' ');
  return {
    username: parts[0],
    sessionId: parts[1],
    sessionVersion: parseInt(parts[2], 10),
    netType: parts[3],
    addressType: parts[4],
    address: parts[5]
  };
};

// a very naive interpretation of a valid SDP.
SDPUtils.isValidSDP = function(blob) {
  if (typeof blob !== 'string' || blob.length === 0) {
    return false;
  }
  var lines = SDPUtils.splitLines(blob);
  for (var i = 0; i < lines.length; i++) {
    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {
      return false;
    }
    // TODO: check the modifier a bit more.
  }
  return true;
};

// Expose public methods.
if (typeof module === 'object') {
  module.exports = SDPUtils;
}

},{}],134:[function(require,module,exports){
/////////////////////////////////////////////////////////////////////////////////
/* UAParser.js v1.0.40
   Copyright © 2012-2024 Faisal Salman <f@faisalman.com>
   MIT License *//*
   Detect Browser, Engine, OS, CPU, and Device type/model from User-Agent data.
   Supports browser & node.js environment. 
   Demo   : https://faisalman.github.io/ua-parser-js
   Source : https://github.com/faisalman/ua-parser-js */
/////////////////////////////////////////////////////////////////////////////////

(function (window, undefined) {

    'use strict';

    //////////////
    // Constants
    /////////////


    var LIBVERSION  = '1.0.40',
        EMPTY       = '',
        UNKNOWN     = '?',
        FUNC_TYPE   = 'function',
        UNDEF_TYPE  = 'undefined',
        OBJ_TYPE    = 'object',
        STR_TYPE    = 'string',
        MAJOR       = 'major',
        MODEL       = 'model',
        NAME        = 'name',
        TYPE        = 'type',
        VENDOR      = 'vendor',
        VERSION     = 'version',
        ARCHITECTURE= 'architecture',
        CONSOLE     = 'console',
        MOBILE      = 'mobile',
        TABLET      = 'tablet',
        SMARTTV     = 'smarttv',
        WEARABLE    = 'wearable',
        EMBEDDED    = 'embedded',
        UA_MAX_LENGTH = 500;

    var AMAZON  = 'Amazon',
        APPLE   = 'Apple',
        ASUS    = 'ASUS',
        BLACKBERRY = 'BlackBerry',
        BROWSER = 'Browser',
        CHROME  = 'Chrome',
        EDGE    = 'Edge',
        FIREFOX = 'Firefox',
        GOOGLE  = 'Google',
        HUAWEI  = 'Huawei',
        LG      = 'LG',
        MICROSOFT = 'Microsoft',
        MOTOROLA  = 'Motorola',
        OPERA   = 'Opera',
        SAMSUNG = 'Samsung',
        SHARP   = 'Sharp',
        SONY    = 'Sony',
        XIAOMI  = 'Xiaomi',
        ZEBRA   = 'Zebra',
        FACEBOOK    = 'Facebook',
        CHROMIUM_OS = 'Chromium OS',
        MAC_OS  = 'Mac OS',
        SUFFIX_BROWSER = ' Browser';

    ///////////
    // Helper
    //////////

    var extend = function (regexes, extensions) {
            var mergedRegexes = {};
            for (var i in regexes) {
                if (extensions[i] && extensions[i].length % 2 === 0) {
                    mergedRegexes[i] = extensions[i].concat(regexes[i]);
                } else {
                    mergedRegexes[i] = regexes[i];
                }
            }
            return mergedRegexes;
        },
        enumerize = function (arr) {
            var enums = {};
            for (var i=0; i<arr.length; i++) {
                enums[arr[i].toUpperCase()] = arr[i];
            }
            return enums;
        },
        has = function (str1, str2) {
            return typeof str1 === STR_TYPE ? lowerize(str2).indexOf(lowerize(str1)) !== -1 : false;
        },
        lowerize = function (str) {
            return str.toLowerCase();
        },
        majorize = function (version) {
            return typeof(version) === STR_TYPE ? version.replace(/[^\d\.]/g, EMPTY).split('.')[0] : undefined;
        },
        trim = function (str, len) {
            if (typeof(str) === STR_TYPE) {
                str = str.replace(/^\s\s*/, EMPTY);
                return typeof(len) === UNDEF_TYPE ? str : str.substring(0, UA_MAX_LENGTH);
            }
    };

    ///////////////
    // Map helper
    //////////////

    var rgxMapper = function (ua, arrays) {

            var i = 0, j, k, p, q, matches, match;

            // loop through all regexes maps
            while (i < arrays.length && !matches) {

                var regex = arrays[i],       // even sequence (0,2,4,..)
                    props = arrays[i + 1];   // odd sequence (1,3,5,..)
                j = k = 0;

                // try matching uastring with regexes
                while (j < regex.length && !matches) {

                    if (!regex[j]) { break; }
                    matches = regex[j++].exec(ua);

                    if (!!matches) {
                        for (p = 0; p < props.length; p++) {
                            match = matches[++k];
                            q = props[p];
                            // check if given property is actually array
                            if (typeof q === OBJ_TYPE && q.length > 0) {
                                if (q.length === 2) {
                                    if (typeof q[1] == FUNC_TYPE) {
                                        // assign modified match
                                        this[q[0]] = q[1].call(this, match);
                                    } else {
                                        // assign given value, ignore regex match
                                        this[q[0]] = q[1];
                                    }
                                } else if (q.length === 3) {
                                    // check whether function or regex
                                    if (typeof q[1] === FUNC_TYPE && !(q[1].exec && q[1].test)) {
                                        // call function (usually string mapper)
                                        this[q[0]] = match ? q[1].call(this, match, q[2]) : undefined;
                                    } else {
                                        // sanitize match using given regex
                                        this[q[0]] = match ? match.replace(q[1], q[2]) : undefined;
                                    }
                                } else if (q.length === 4) {
                                        this[q[0]] = match ? q[3].call(this, match.replace(q[1], q[2])) : undefined;
                                }
                            } else {
                                this[q] = match ? match : undefined;
                            }
                        }
                    }
                }
                i += 2;
            }
        },

        strMapper = function (str, map) {

            for (var i in map) {
                // check if current value is array
                if (typeof map[i] === OBJ_TYPE && map[i].length > 0) {
                    for (var j = 0; j < map[i].length; j++) {
                        if (has(map[i][j], str)) {
                            return (i === UNKNOWN) ? undefined : i;
                        }
                    }
                } else if (has(map[i], str)) {
                    return (i === UNKNOWN) ? undefined : i;
                }
            }
            return map.hasOwnProperty('*') ? map['*'] : str;
    };

    ///////////////
    // String map
    //////////////

    // Safari < 3.0
    var oldSafariMap = {
            '1.0'   : '/8',
            '1.2'   : '/1',
            '1.3'   : '/3',
            '2.0'   : '/412',
            '2.0.2' : '/416',
            '2.0.3' : '/417',
            '2.0.4' : '/419',
            '?'     : '/'
        },
        windowsVersionMap = {
            'ME'        : '4.90',
            'NT 3.11'   : 'NT3.51',
            'NT 4.0'    : 'NT4.0',
            '2000'      : 'NT 5.0',
            'XP'        : ['NT 5.1', 'NT 5.2'],
            'Vista'     : 'NT 6.0',
            '7'         : 'NT 6.1',
            '8'         : 'NT 6.2',
            '8.1'       : 'NT 6.3',
            '10'        : ['NT 6.4', 'NT 10.0'],
            'RT'        : 'ARM'
    };

    //////////////
    // Regex map
    /////////////

    var regexes = {

        browser : [[

            /\b(?:crmo|crios)\/([\w\.]+)/i                                      // Chrome for Android/iOS
            ], [VERSION, [NAME, 'Chrome']], [
            /edg(?:e|ios|a)?\/([\w\.]+)/i                                       // Microsoft Edge
            ], [VERSION, [NAME, 'Edge']], [

            // Presto based
            /(opera mini)\/([-\w\.]+)/i,                                        // Opera Mini
            /(opera [mobiletab]{3,6})\b.+version\/([-\w\.]+)/i,                 // Opera Mobi/Tablet
            /(opera)(?:.+version\/|[\/ ]+)([\w\.]+)/i                           // Opera
            ], [NAME, VERSION], [
            /opios[\/ ]+([\w\.]+)/i                                             // Opera mini on iphone >= 8.0
            ], [VERSION, [NAME, OPERA+' Mini']], [
            /\bop(?:rg)?x\/([\w\.]+)/i                                          // Opera GX
            ], [VERSION, [NAME, OPERA+' GX']], [
            /\bopr\/([\w\.]+)/i                                                 // Opera Webkit
            ], [VERSION, [NAME, OPERA]], [

            // Mixed
            /\bb[ai]*d(?:uhd|[ub]*[aekoprswx]{5,6})[\/ ]?([\w\.]+)/i            // Baidu
            ], [VERSION, [NAME, 'Baidu']], [
            /\b(?:mxbrowser|mxios|myie2)\/?([-\w\.]*)\b/i                       // Maxthon
            ], [VERSION, [NAME, 'Maxthon']], [
            /(kindle)\/([\w\.]+)/i,                                             // Kindle
            /(lunascape|maxthon|netfront|jasmine|blazer|sleipnir)[\/ ]?([\w\.]*)/i,      
                                                                                // Lunascape/Maxthon/Netfront/Jasmine/Blazer/Sleipnir
            // Trident based
            /(avant|iemobile|slim(?:browser|boat|jet))[\/ ]?([\d\.]*)/i,        // Avant/IEMobile/SlimBrowser/SlimBoat/Slimjet
            /(?:ms|\()(ie) ([\w\.]+)/i,                                         // Internet Explorer

            // Blink/Webkit/KHTML based                                         // Flock/RockMelt/Midori/Epiphany/Silk/Skyfire/Bolt/Iron/Iridium/PhantomJS/Bowser/QupZilla/Falkon
            /(flock|rockmelt|midori|epiphany|silk|skyfire|ovibrowser|bolt|iron|vivaldi|iridium|phantomjs|bowser|qupzilla|falkon|rekonq|puffin|brave|whale(?!.+naver)|qqbrowserlite|duckduckgo|klar|helio|(?=comodo_)?dragon)\/([-\w\.]+)/i,
                                                                                // Rekonq/Puffin/Brave/Whale/QQBrowserLite/QQ//Vivaldi/DuckDuckGo/Klar/Helio/Dragon
            /(heytap|ovi|115)browser\/([\d\.]+)/i,                              // HeyTap/Ovi/115
            /(weibo)__([\d\.]+)/i                                               // Weibo
            ], [NAME, VERSION], [
            /quark(?:pc)?\/([-\w\.]+)/i                                         // Quark
            ], [VERSION, [NAME, 'Quark']], [
            /\bddg\/([\w\.]+)/i                                                 // DuckDuckGo
            ], [VERSION, [NAME, 'DuckDuckGo']], [
            /(?:\buc? ?browser|(?:juc.+)ucweb)[\/ ]?([\w\.]+)/i                 // UCBrowser
            ], [VERSION, [NAME, 'UC'+BROWSER]], [
            /microm.+\bqbcore\/([\w\.]+)/i,                                     // WeChat Desktop for Windows Built-in Browser
            /\bqbcore\/([\w\.]+).+microm/i,
            /micromessenger\/([\w\.]+)/i                                        // WeChat
            ], [VERSION, [NAME, 'WeChat']], [
            /konqueror\/([\w\.]+)/i                                             // Konqueror
            ], [VERSION, [NAME, 'Konqueror']], [
            /trident.+rv[: ]([\w\.]{1,9})\b.+like gecko/i                       // IE11
            ], [VERSION, [NAME, 'IE']], [
            /ya(?:search)?browser\/([\w\.]+)/i                                  // Yandex
            ], [VERSION, [NAME, 'Yandex']], [
            /slbrowser\/([\w\.]+)/i                                             // Smart Lenovo Browser
            ], [VERSION, [NAME, 'Smart Lenovo '+BROWSER]], [
            /(avast|avg)\/([\w\.]+)/i                                           // Avast/AVG Secure Browser
            ], [[NAME, /(.+)/, '$1 Secure '+BROWSER], VERSION], [
            /\bfocus\/([\w\.]+)/i                                               // Firefox Focus
            ], [VERSION, [NAME, FIREFOX+' Focus']], [
            /\bopt\/([\w\.]+)/i                                                 // Opera Touch
            ], [VERSION, [NAME, OPERA+' Touch']], [
            /coc_coc\w+\/([\w\.]+)/i                                            // Coc Coc Browser
            ], [VERSION, [NAME, 'Coc Coc']], [
            /dolfin\/([\w\.]+)/i                                                // Dolphin
            ], [VERSION, [NAME, 'Dolphin']], [
            /coast\/([\w\.]+)/i                                                 // Opera Coast
            ], [VERSION, [NAME, OPERA+' Coast']], [
            /miuibrowser\/([\w\.]+)/i                                           // MIUI Browser
            ], [VERSION, [NAME, 'MIUI' + SUFFIX_BROWSER]], [
            /fxios\/([\w\.-]+)/i                                                // Firefox for iOS
            ], [VERSION, [NAME, FIREFOX]], [
            /\bqihoobrowser\/?([\w\.]*)/i                                       // 360
            ], [VERSION, [NAME, '360']], [
            /\b(qq)\/([\w\.]+)/i                                                // QQ
            ], [[NAME, /(.+)/, '$1Browser'], VERSION], [
            /(oculus|sailfish|huawei|vivo|pico)browser\/([\w\.]+)/i
            ], [[NAME, /(.+)/, '$1' + SUFFIX_BROWSER], VERSION], [              // Oculus/Sailfish/HuaweiBrowser/VivoBrowser/PicoBrowser
            /samsungbrowser\/([\w\.]+)/i                                        // Samsung Internet
            ], [VERSION, [NAME, SAMSUNG + ' Internet']], [
            /metasr[\/ ]?([\d\.]+)/i                                            // Sogou Explorer
            ], [VERSION, [NAME, 'Sogou Explorer']], [
            /(sogou)mo\w+\/([\d\.]+)/i                                          // Sogou Mobile
            ], [[NAME, 'Sogou Mobile'], VERSION], [
            /(electron)\/([\w\.]+) safari/i,                                    // Electron-based App
            /(tesla)(?: qtcarbrowser|\/(20\d\d\.[-\w\.]+))/i,                   // Tesla
            /m?(qqbrowser|2345(?=browser|chrome|explorer))\w*[\/ ]?v?([\w\.]+)/i   // QQ/2345
            ], [NAME, VERSION], [
            /(lbbrowser|rekonq)/i,                                              // LieBao Browser/Rekonq
            /\[(linkedin)app\]/i                                                // LinkedIn App for iOS & Android
            ], [NAME], [
            /ome\/([\w\.]+) \w* ?(iron) saf/i,                                  // Iron
            /ome\/([\w\.]+).+qihu (360)[es]e/i                                  // 360
            ], [VERSION, NAME], [

            // WebView
            /((?:fban\/fbios|fb_iab\/fb4a)(?!.+fbav)|;fbav\/([\w\.]+);)/i       // Facebook App for iOS & Android
            ], [[NAME, FACEBOOK], VERSION], [
            /(Klarna)\/([\w\.]+)/i,                                             // Klarna Shopping Browser for iOS & Android
            /(kakao(?:talk|story))[\/ ]([\w\.]+)/i,                             // Kakao App
            /(naver)\(.*?(\d+\.[\w\.]+).*\)/i,                                  // Naver InApp
            /safari (line)\/([\w\.]+)/i,                                        // Line App for iOS
            /\b(line)\/([\w\.]+)\/iab/i,                                        // Line App for Android
            /(alipay)client\/([\w\.]+)/i,                                       // Alipay
            /(twitter)(?:and| f.+e\/([\w\.]+))/i,                               // Twitter
            /(chromium|instagram|snapchat)[\/ ]([-\w\.]+)/i                     // Chromium/Instagram/Snapchat
            ], [NAME, VERSION], [
            /\bgsa\/([\w\.]+) .*safari\//i                                      // Google Search Appliance on iOS
            ], [VERSION, [NAME, 'GSA']], [
            /musical_ly(?:.+app_?version\/|_)([\w\.]+)/i                        // TikTok
            ], [VERSION, [NAME, 'TikTok']], [

            /headlesschrome(?:\/([\w\.]+)| )/i                                  // Chrome Headless
            ], [VERSION, [NAME, CHROME+' Headless']], [

            / wv\).+(chrome)\/([\w\.]+)/i                                       // Chrome WebView
            ], [[NAME, CHROME+' WebView'], VERSION], [

            /droid.+ version\/([\w\.]+)\b.+(?:mobile safari|safari)/i           // Android Browser
            ], [VERSION, [NAME, 'Android '+BROWSER]], [

            /(chrome|omniweb|arora|[tizenoka]{5} ?browser)\/v?([\w\.]+)/i       // Chrome/OmniWeb/Arora/Tizen/Nokia
            ], [NAME, VERSION], [

            /version\/([\w\.\,]+) .*mobile\/\w+ (safari)/i                      // Mobile Safari
            ], [VERSION, [NAME, 'Mobile Safari']], [
            /version\/([\w(\.|\,)]+) .*(mobile ?safari|safari)/i                // Safari & Safari Mobile
            ], [VERSION, NAME], [
            /webkit.+?(mobile ?safari|safari)(\/[\w\.]+)/i                      // Safari < 3.0
            ], [NAME, [VERSION, strMapper, oldSafariMap]], [

            /(webkit|khtml)\/([\w\.]+)/i
            ], [NAME, VERSION], [

            // Gecko based
            /(navigator|netscape\d?)\/([-\w\.]+)/i                              // Netscape
            ], [[NAME, 'Netscape'], VERSION], [
            /(wolvic|librewolf)\/([\w\.]+)/i                                    // Wolvic/LibreWolf
            ], [NAME, VERSION], [
            /mobile vr; rv:([\w\.]+)\).+firefox/i                               // Firefox Reality
            ], [VERSION, [NAME, FIREFOX+' Reality']], [
            /ekiohf.+(flow)\/([\w\.]+)/i,                                       // Flow
            /(swiftfox)/i,                                                      // Swiftfox
            /(icedragon|iceweasel|camino|chimera|fennec|maemo browser|minimo|conkeror)[\/ ]?([\w\.\+]+)/i,
                                                                                // IceDragon/Iceweasel/Camino/Chimera/Fennec/Maemo/Minimo/Conkeror
            /(seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\/([-\w\.]+)$/i,
                                                                                // Firefox/SeaMonkey/K-Meleon/IceCat/IceApe/Firebird/Phoenix
            /(firefox)\/([\w\.]+)/i,                                            // Other Firefox-based
            /(mozilla)\/([\w\.]+) .+rv\:.+gecko\/\d+/i,                         // Mozilla

            // Other
            /(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|obigo|mosaic|(?:go|ice|up)[\. ]?browser)[-\/ ]?v?([\w\.]+)/i,
                                                                                // Polaris/Lynx/Dillo/iCab/Doris/Amaya/w3m/NetSurf/Obigo/Mosaic/Go/ICE/UP.Browser
            /(links) \(([\w\.]+)/i                                              // Links
            ], [NAME, [VERSION, /_/g, '.']], [
            
            /(cobalt)\/([\w\.]+)/i                                              // Cobalt
            ], [NAME, [VERSION, /master.|lts./, ""]]
        ],

        cpu : [[

            /(?:(amd|x(?:(?:86|64)[-_])?|wow|win)64)[;\)]/i                     // AMD64 (x64)
            ], [[ARCHITECTURE, 'amd64']], [

            /(ia32(?=;))/i                                                      // IA32 (quicktime)
            ], [[ARCHITECTURE, lowerize]], [

            /((?:i[346]|x)86)[;\)]/i                                            // IA32 (x86)
            ], [[ARCHITECTURE, 'ia32']], [

            /\b(aarch64|arm(v?8e?l?|_?64))\b/i                                 // ARM64
            ], [[ARCHITECTURE, 'arm64']], [

            /\b(arm(?:v[67])?ht?n?[fl]p?)\b/i                                   // ARMHF
            ], [[ARCHITECTURE, 'armhf']], [

            // PocketPC mistakenly identified as PowerPC
            /windows (ce|mobile); ppc;/i
            ], [[ARCHITECTURE, 'arm']], [

            /((?:ppc|powerpc)(?:64)?)(?: mac|;|\))/i                            // PowerPC
            ], [[ARCHITECTURE, /ower/, EMPTY, lowerize]], [

            /(sun4\w)[;\)]/i                                                    // SPARC
            ], [[ARCHITECTURE, 'sparc']], [

            /((?:avr32|ia64(?=;))|68k(?=\))|\barm(?=v(?:[1-7]|[5-7]1)l?|;|eabi)|(?=atmel )avr|(?:irix|mips|sparc)(?:64)?\b|pa-risc)/i
                                                                                // IA64, 68K, ARM/64, AVR/32, IRIX/64, MIPS/64, SPARC/64, PA-RISC
            ], [[ARCHITECTURE, lowerize]]
        ],

        device : [[

            //////////////////////////
            // MOBILES & TABLETS
            /////////////////////////

            // Samsung
            /\b(sch-i[89]0\d|shw-m380s|sm-[ptx]\w{2,4}|gt-[pn]\d{2,4}|sgh-t8[56]9|nexus 10)/i
            ], [MODEL, [VENDOR, SAMSUNG], [TYPE, TABLET]], [
            /\b((?:s[cgp]h|gt|sm)-(?![lr])\w+|sc[g-]?[\d]+a?|galaxy nexus)/i,
            /samsung[- ]((?!sm-[lr])[-\w]+)/i,
            /sec-(sgh\w+)/i
            ], [MODEL, [VENDOR, SAMSUNG], [TYPE, MOBILE]], [

            // Apple
            /(?:\/|\()(ip(?:hone|od)[\w, ]*)(?:\/|;)/i                          // iPod/iPhone
            ], [MODEL, [VENDOR, APPLE], [TYPE, MOBILE]], [
            /\((ipad);[-\w\),; ]+apple/i,                                       // iPad
            /applecoremedia\/[\w\.]+ \((ipad)/i,
            /\b(ipad)\d\d?,\d\d?[;\]].+ios/i
            ], [MODEL, [VENDOR, APPLE], [TYPE, TABLET]], [
            /(macintosh);/i
            ], [MODEL, [VENDOR, APPLE]], [

            // Sharp
            /\b(sh-?[altvz]?\d\d[a-ekm]?)/i
            ], [MODEL, [VENDOR, SHARP], [TYPE, MOBILE]], [

            // Honor
            /(?:honor)([-\w ]+)[;\)]/i
            ], [MODEL, [VENDOR, 'Honor'], [TYPE, MOBILE]], [

            // Huawei
            /\b((?:ag[rs][23]?|bah2?|sht?|btv)-a?[lw]\d{2})\b(?!.+d\/s)/i
            ], [MODEL, [VENDOR, HUAWEI], [TYPE, TABLET]], [
            /(?:huawei)([-\w ]+)[;\)]/i,
            /\b(nexus 6p|\w{2,4}e?-[atu]?[ln][\dx][012359c][adn]?)\b(?!.+d\/s)/i
            ], [MODEL, [VENDOR, HUAWEI], [TYPE, MOBILE]], [

            // Xiaomi
            /\b(poco[\w ]+|m2\d{3}j\d\d[a-z]{2})(?: bui|\))/i,                  // Xiaomi POCO
            /\b; (\w+) build\/hm\1/i,                                           // Xiaomi Hongmi 'numeric' models
            /\b(hm[-_ ]?note?[_ ]?(?:\d\w)?) bui/i,                             // Xiaomi Hongmi
            /\b(redmi[\-_ ]?(?:note|k)?[\w_ ]+)(?: bui|\))/i,                   // Xiaomi Redmi
            /oid[^\)]+; (m?[12][0-389][01]\w{3,6}[c-y])( bui|; wv|\))/i,        // Xiaomi Redmi 'numeric' models
            /\b(mi[-_ ]?(?:a\d|one|one[_ ]plus|note lte|max|cc)?[_ ]?(?:\d?\w?)[_ ]?(?:plus|se|lite|pro)?)(?: bui|\))/i // Xiaomi Mi
            ], [[MODEL, /_/g, ' '], [VENDOR, XIAOMI], [TYPE, MOBILE]], [
            /oid[^\)]+; (2\d{4}(283|rpbf)[cgl])( bui|\))/i,                     // Redmi Pad
            /\b(mi[-_ ]?(?:pad)(?:[\w_ ]+))(?: bui|\))/i                        // Mi Pad tablets
            ],[[MODEL, /_/g, ' '], [VENDOR, XIAOMI], [TYPE, TABLET]], [

            // OPPO
            /; (\w+) bui.+ oppo/i,
            /\b(cph[12]\d{3}|p(?:af|c[al]|d\w|e[ar])[mt]\d0|x9007|a101op)\b/i
            ], [MODEL, [VENDOR, 'OPPO'], [TYPE, MOBILE]], [
            /\b(opd2\d{3}a?) bui/i
            ], [MODEL, [VENDOR, 'OPPO'], [TYPE, TABLET]], [

            // Vivo
            /vivo (\w+)(?: bui|\))/i,
            /\b(v[12]\d{3}\w?[at])(?: bui|;)/i
            ], [MODEL, [VENDOR, 'Vivo'], [TYPE, MOBILE]], [

            // Realme
            /\b(rmx[1-3]\d{3})(?: bui|;|\))/i
            ], [MODEL, [VENDOR, 'Realme'], [TYPE, MOBILE]], [

            // Motorola
            /\b(milestone|droid(?:[2-4x]| (?:bionic|x2|pro|razr))?:?( 4g)?)\b[\w ]+build\//i,
            /\bmot(?:orola)?[- ](\w*)/i,
            /((?:moto[\w\(\) ]+|xt\d{3,4}|nexus 6)(?= bui|\)))/i
            ], [MODEL, [VENDOR, MOTOROLA], [TYPE, MOBILE]], [
            /\b(mz60\d|xoom[2 ]{0,2}) build\//i
            ], [MODEL, [VENDOR, MOTOROLA], [TYPE, TABLET]], [

            // LG
            /((?=lg)?[vl]k\-?\d{3}) bui| 3\.[-\w; ]{10}lg?-([06cv9]{3,4})/i
            ], [MODEL, [VENDOR, LG], [TYPE, TABLET]], [
            /(lm(?:-?f100[nv]?|-[\w\.]+)(?= bui|\))|nexus [45])/i,
            /\blg[-e;\/ ]+((?!browser|netcast|android tv)\w+)/i,
            /\blg-?([\d\w]+) bui/i
            ], [MODEL, [VENDOR, LG], [TYPE, MOBILE]], [

            // Lenovo
            /(ideatab[-\w ]+)/i,
            /lenovo ?(s[56]000[-\w]+|tab(?:[\w ]+)|yt[-\d\w]{6}|tb[-\d\w]{6})/i
            ], [MODEL, [VENDOR, 'Lenovo'], [TYPE, TABLET]], [

            // Nokia
            /(?:maemo|nokia).*(n900|lumia \d+)/i,
            /nokia[-_ ]?([-\w\.]*)/i
            ], [[MODEL, /_/g, ' '], [VENDOR, 'Nokia'], [TYPE, MOBILE]], [

            // Google
            /(pixel c)\b/i                                                      // Google Pixel C
            ], [MODEL, [VENDOR, GOOGLE], [TYPE, TABLET]], [
            /droid.+; (pixel[\daxl ]{0,6})(?: bui|\))/i                         // Google Pixel
            ], [MODEL, [VENDOR, GOOGLE], [TYPE, MOBILE]], [

            // Sony
            /droid.+; (a?\d[0-2]{2}so|[c-g]\d{4}|so[-gl]\w+|xq-a\w[4-7][12])(?= bui|\).+chrome\/(?![1-6]{0,1}\d\.))/i
            ], [MODEL, [VENDOR, SONY], [TYPE, MOBILE]], [
            /sony tablet [ps]/i,
            /\b(?:sony)?sgp\w+(?: bui|\))/i
            ], [[MODEL, 'Xperia Tablet'], [VENDOR, SONY], [TYPE, TABLET]], [

            // OnePlus
            / (kb2005|in20[12]5|be20[12][59])\b/i,
            /(?:one)?(?:plus)? (a\d0\d\d)(?: b|\))/i
            ], [MODEL, [VENDOR, 'OnePlus'], [TYPE, MOBILE]], [

            // Amazon
            /(alexa)webm/i,
            /(kf[a-z]{2}wi|aeo(?!bc)\w\w)( bui|\))/i,                           // Kindle Fire without Silk / Echo Show
            /(kf[a-z]+)( bui|\)).+silk\//i                                      // Kindle Fire HD
            ], [MODEL, [VENDOR, AMAZON], [TYPE, TABLET]], [
            /((?:sd|kf)[0349hijorstuw]+)( bui|\)).+silk\//i                     // Fire Phone
            ], [[MODEL, /(.+)/g, 'Fire Phone $1'], [VENDOR, AMAZON], [TYPE, MOBILE]], [

            // BlackBerry
            /(playbook);[-\w\),; ]+(rim)/i                                      // BlackBerry PlayBook
            ], [MODEL, VENDOR, [TYPE, TABLET]], [
            /\b((?:bb[a-f]|st[hv])100-\d)/i,
            /\(bb10; (\w+)/i                                                    // BlackBerry 10
            ], [MODEL, [VENDOR, BLACKBERRY], [TYPE, MOBILE]], [

            // Asus
            /(?:\b|asus_)(transfo[prime ]{4,10} \w+|eeepc|slider \w+|nexus 7|padfone|p00[cj])/i
            ], [MODEL, [VENDOR, ASUS], [TYPE, TABLET]], [
            / (z[bes]6[027][012][km][ls]|zenfone \d\w?)\b/i
            ], [MODEL, [VENDOR, ASUS], [TYPE, MOBILE]], [

            // HTC
            /(nexus 9)/i                                                        // HTC Nexus 9
            ], [MODEL, [VENDOR, 'HTC'], [TYPE, TABLET]], [
            /(htc)[-;_ ]{1,2}([\w ]+(?=\)| bui)|\w+)/i,                         // HTC

            // ZTE
            /(zte)[- ]([\w ]+?)(?: bui|\/|\))/i,
            /(alcatel|geeksphone|nexian|panasonic(?!(?:;|\.))|sony(?!-bra))[-_ ]?([-\w]*)/i         // Alcatel/GeeksPhone/Nexian/Panasonic/Sony
            ], [VENDOR, [MODEL, /_/g, ' '], [TYPE, MOBILE]], [

            // TCL
            /droid [\w\.]+; ((?:8[14]9[16]|9(?:0(?:48|60|8[01])|1(?:3[27]|66)|2(?:6[69]|9[56])|466))[gqswx])\w*(\)| bui)/i
            ], [MODEL, [VENDOR, 'TCL'], [TYPE, TABLET]], [

            // itel
            /(itel) ((\w+))/i
            ], [[VENDOR, lowerize], MODEL, [TYPE, strMapper, { 'tablet' : ['p10001l', 'w7001'], '*' : 'mobile' }]], [

            // Acer
            /droid.+; ([ab][1-7]-?[0178a]\d\d?)/i
            ], [MODEL, [VENDOR, 'Acer'], [TYPE, TABLET]], [

            // Meizu
            /droid.+; (m[1-5] note) bui/i,
            /\bmz-([-\w]{2,})/i
            ], [MODEL, [VENDOR, 'Meizu'], [TYPE, MOBILE]], [
                
            // Ulefone
            /; ((?:power )?armor(?:[\w ]{0,8}))(?: bui|\))/i
            ], [MODEL, [VENDOR, 'Ulefone'], [TYPE, MOBILE]], [

            // Energizer
            /; (energy ?\w+)(?: bui|\))/i,
            /; energizer ([\w ]+)(?: bui|\))/i
            ], [MODEL, [VENDOR, 'Energizer'], [TYPE, MOBILE]], [

            // Cat
            /; cat (b35);/i,
            /; (b15q?|s22 flip|s48c|s62 pro)(?: bui|\))/i
            ], [MODEL, [VENDOR, 'Cat'], [TYPE, MOBILE]], [

            // Smartfren
            /((?:new )?andromax[\w- ]+)(?: bui|\))/i
            ], [MODEL, [VENDOR, 'Smartfren'], [TYPE, MOBILE]], [

            // Nothing
            /droid.+; (a(?:015|06[35]|142p?))/i
            ], [MODEL, [VENDOR, 'Nothing'], [TYPE, MOBILE]], [

            // MIXED
            /(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron|infinix|tecno|micromax|advan)[-_ ]?([-\w]*)/i,
                                                                                // BlackBerry/BenQ/Palm/Sony-Ericsson/Acer/Asus/Dell/Meizu/Motorola/Polytron/Infinix/Tecno/Micromax/Advan
            /; (imo) ((?!tab)[\w ]+?)(?: bui|\))/i,                             // IMO
            /(hp) ([\w ]+\w)/i,                                                 // HP iPAQ
            /(asus)-?(\w+)/i,                                                   // Asus
            /(microsoft); (lumia[\w ]+)/i,                                      // Microsoft Lumia
            /(lenovo)[-_ ]?([-\w]+)/i,                                          // Lenovo
            /(jolla)/i,                                                         // Jolla
            /(oppo) ?([\w ]+) bui/i                                             // OPPO
            ], [VENDOR, MODEL, [TYPE, MOBILE]], [

            /(imo) (tab \w+)/i,                                                 // IMO
            /(kobo)\s(ereader|touch)/i,                                         // Kobo
            /(archos) (gamepad2?)/i,                                            // Archos
            /(hp).+(touchpad(?!.+tablet)|tablet)/i,                             // HP TouchPad
            /(kindle)\/([\w\.]+)/i,                                             // Kindle
            /(nook)[\w ]+build\/(\w+)/i,                                        // Nook
            /(dell) (strea[kpr\d ]*[\dko])/i,                                   // Dell Streak
            /(le[- ]+pan)[- ]+(\w{1,9}) bui/i,                                  // Le Pan Tablets
            /(trinity)[- ]*(t\d{3}) bui/i,                                      // Trinity Tablets
            /(gigaset)[- ]+(q\w{1,9}) bui/i,                                    // Gigaset Tablets
            /(vodafone) ([\w ]+)(?:\)| bui)/i                                   // Vodafone
            ], [VENDOR, MODEL, [TYPE, TABLET]], [

            /(surface duo)/i                                                    // Surface Duo
            ], [MODEL, [VENDOR, MICROSOFT], [TYPE, TABLET]], [
            /droid [\d\.]+; (fp\du?)(?: b|\))/i                                 // Fairphone
            ], [MODEL, [VENDOR, 'Fairphone'], [TYPE, MOBILE]], [
            /(u304aa)/i                                                         // AT&T
            ], [MODEL, [VENDOR, 'AT&T'], [TYPE, MOBILE]], [
            /\bsie-(\w*)/i                                                      // Siemens
            ], [MODEL, [VENDOR, 'Siemens'], [TYPE, MOBILE]], [
            /\b(rct\w+) b/i                                                     // RCA Tablets
            ], [MODEL, [VENDOR, 'RCA'], [TYPE, TABLET]], [
            /\b(venue[\d ]{2,7}) b/i                                            // Dell Venue Tablets
            ], [MODEL, [VENDOR, 'Dell'], [TYPE, TABLET]], [
            /\b(q(?:mv|ta)\w+) b/i                                              // Verizon Tablet
            ], [MODEL, [VENDOR, 'Verizon'], [TYPE, TABLET]], [
            /\b(?:barnes[& ]+noble |bn[rt])([\w\+ ]*) b/i                       // Barnes & Noble Tablet
            ], [MODEL, [VENDOR, 'Barnes & Noble'], [TYPE, TABLET]], [
            /\b(tm\d{3}\w+) b/i
            ], [MODEL, [VENDOR, 'NuVision'], [TYPE, TABLET]], [
            /\b(k88) b/i                                                        // ZTE K Series Tablet
            ], [MODEL, [VENDOR, 'ZTE'], [TYPE, TABLET]], [
            /\b(nx\d{3}j) b/i                                                   // ZTE Nubia
            ], [MODEL, [VENDOR, 'ZTE'], [TYPE, MOBILE]], [
            /\b(gen\d{3}) b.+49h/i                                              // Swiss GEN Mobile
            ], [MODEL, [VENDOR, 'Swiss'], [TYPE, MOBILE]], [
            /\b(zur\d{3}) b/i                                                   // Swiss ZUR Tablet
            ], [MODEL, [VENDOR, 'Swiss'], [TYPE, TABLET]], [
            /\b((zeki)?tb.*\b) b/i                                              // Zeki Tablets
            ], [MODEL, [VENDOR, 'Zeki'], [TYPE, TABLET]], [
            /\b([yr]\d{2}) b/i,
            /\b(dragon[- ]+touch |dt)(\w{5}) b/i                                // Dragon Touch Tablet
            ], [[VENDOR, 'Dragon Touch'], MODEL, [TYPE, TABLET]], [
            /\b(ns-?\w{0,9}) b/i                                                // Insignia Tablets
            ], [MODEL, [VENDOR, 'Insignia'], [TYPE, TABLET]], [
            /\b((nxa|next)-?\w{0,9}) b/i                                        // NextBook Tablets
            ], [MODEL, [VENDOR, 'NextBook'], [TYPE, TABLET]], [
            /\b(xtreme\_)?(v(1[045]|2[015]|[3469]0|7[05])) b/i                  // Voice Xtreme Phones
            ], [[VENDOR, 'Voice'], MODEL, [TYPE, MOBILE]], [
            /\b(lvtel\-)?(v1[12]) b/i                                           // LvTel Phones
            ], [[VENDOR, 'LvTel'], MODEL, [TYPE, MOBILE]], [
            /\b(ph-1) /i                                                        // Essential PH-1
            ], [MODEL, [VENDOR, 'Essential'], [TYPE, MOBILE]], [
            /\b(v(100md|700na|7011|917g).*\b) b/i                               // Envizen Tablets
            ], [MODEL, [VENDOR, 'Envizen'], [TYPE, TABLET]], [
            /\b(trio[-\w\. ]+) b/i                                              // MachSpeed Tablets
            ], [MODEL, [VENDOR, 'MachSpeed'], [TYPE, TABLET]], [
            /\btu_(1491) b/i                                                    // Rotor Tablets
            ], [MODEL, [VENDOR, 'Rotor'], [TYPE, TABLET]], [
            /(shield[\w ]+) b/i                                                 // Nvidia Shield Tablets
            ], [MODEL, [VENDOR, 'Nvidia'], [TYPE, TABLET]], [
            /(sprint) (\w+)/i                                                   // Sprint Phones
            ], [VENDOR, MODEL, [TYPE, MOBILE]], [
            /(kin\.[onetw]{3})/i                                                // Microsoft Kin
            ], [[MODEL, /\./g, ' '], [VENDOR, MICROSOFT], [TYPE, MOBILE]], [
            /droid.+; (cc6666?|et5[16]|mc[239][23]x?|vc8[03]x?)\)/i             // Zebra
            ], [MODEL, [VENDOR, ZEBRA], [TYPE, TABLET]], [
            /droid.+; (ec30|ps20|tc[2-8]\d[kx])\)/i
            ], [MODEL, [VENDOR, ZEBRA], [TYPE, MOBILE]], [

            ///////////////////
            // SMARTTVS
            ///////////////////

            /smart-tv.+(samsung)/i                                              // Samsung
            ], [VENDOR, [TYPE, SMARTTV]], [
            /hbbtv.+maple;(\d+)/i
            ], [[MODEL, /^/, 'SmartTV'], [VENDOR, SAMSUNG], [TYPE, SMARTTV]], [
            /(nux; netcast.+smarttv|lg (netcast\.tv-201\d|android tv))/i        // LG SmartTV
            ], [[VENDOR, LG], [TYPE, SMARTTV]], [
            /(apple) ?tv/i                                                      // Apple TV
            ], [VENDOR, [MODEL, APPLE+' TV'], [TYPE, SMARTTV]], [
            /crkey/i                                                            // Google Chromecast
            ], [[MODEL, CHROME+'cast'], [VENDOR, GOOGLE], [TYPE, SMARTTV]], [
            /droid.+aft(\w+)( bui|\))/i                                         // Fire TV
            ], [MODEL, [VENDOR, AMAZON], [TYPE, SMARTTV]], [
            /\(dtv[\);].+(aquos)/i,
            /(aquos-tv[\w ]+)\)/i                                               // Sharp
            ], [MODEL, [VENDOR, SHARP], [TYPE, SMARTTV]],[
            /(bravia[\w ]+)( bui|\))/i                                              // Sony
            ], [MODEL, [VENDOR, SONY], [TYPE, SMARTTV]], [
            /(mitv-\w{5}) bui/i                                                 // Xiaomi
            ], [MODEL, [VENDOR, XIAOMI], [TYPE, SMARTTV]], [
            /Hbbtv.*(technisat) (.*);/i                                         // TechniSAT
            ], [VENDOR, MODEL, [TYPE, SMARTTV]], [
            /\b(roku)[\dx]*[\)\/]((?:dvp-)?[\d\.]*)/i,                          // Roku
            /hbbtv\/\d+\.\d+\.\d+ +\([\w\+ ]*; *([\w\d][^;]*);([^;]*)/i         // HbbTV devices
            ], [[VENDOR, trim], [MODEL, trim], [TYPE, SMARTTV]], [
            /\b(android tv|smart[- ]?tv|opera tv|tv; rv:)\b/i                   // SmartTV from Unidentified Vendors
            ], [[TYPE, SMARTTV]], [

            ///////////////////
            // CONSOLES
            ///////////////////

            /(ouya)/i,                                                          // Ouya
            /(nintendo) ([wids3utch]+)/i                                        // Nintendo
            ], [VENDOR, MODEL, [TYPE, CONSOLE]], [
            /droid.+; (shield) bui/i                                            // Nvidia
            ], [MODEL, [VENDOR, 'Nvidia'], [TYPE, CONSOLE]], [
            /(playstation [345portablevi]+)/i                                   // Playstation
            ], [MODEL, [VENDOR, SONY], [TYPE, CONSOLE]], [
            /\b(xbox(?: one)?(?!; xbox))[\); ]/i                                // Microsoft Xbox
            ], [MODEL, [VENDOR, MICROSOFT], [TYPE, CONSOLE]], [

            ///////////////////
            // WEARABLES
            ///////////////////

            /\b(sm-[lr]\d\d[05][fnuw]?s?)\b/i                                   // Samsung Galaxy Watch
            ], [MODEL, [VENDOR, SAMSUNG], [TYPE, WEARABLE]], [
            /((pebble))app/i                                                    // Pebble
            ], [VENDOR, MODEL, [TYPE, WEARABLE]], [
            /(watch)(?: ?os[,\/]|\d,\d\/)[\d\.]+/i                              // Apple Watch
            ], [MODEL, [VENDOR, APPLE], [TYPE, WEARABLE]], [
            /droid.+; (glass) \d/i                                              // Google Glass
            ], [MODEL, [VENDOR, GOOGLE], [TYPE, WEARABLE]], [
            /droid.+; (wt63?0{2,3})\)/i
            ], [MODEL, [VENDOR, ZEBRA], [TYPE, WEARABLE]], [

            ///////////////////
            // XR
            ///////////////////

            /droid.+; (glass) \d/i                                              // Google Glass
            ], [MODEL, [VENDOR, GOOGLE], [TYPE, WEARABLE]], [
            /(pico) (4|neo3(?: link|pro)?)/i                                    // Pico
            ], [VENDOR, MODEL, [TYPE, WEARABLE]], [
            /; (quest( \d| pro)?)/i                                             // Oculus Quest
            ], [MODEL, [VENDOR, FACEBOOK], [TYPE, WEARABLE]], [

            ///////////////////
            // EMBEDDED
            ///////////////////

            /(tesla)(?: qtcarbrowser|\/[-\w\.]+)/i                              // Tesla
            ], [VENDOR, [TYPE, EMBEDDED]], [
            /(aeobc)\b/i                                                        // Echo Dot
            ], [MODEL, [VENDOR, AMAZON], [TYPE, EMBEDDED]], [

            ////////////////////
            // MIXED (GENERIC)
            ///////////////////

            /droid .+?; ([^;]+?)(?: bui|; wv\)|\) applew).+? mobile safari/i    // Android Phones from Unidentified Vendors
            ], [MODEL, [TYPE, MOBILE]], [
            /droid .+?; ([^;]+?)(?: bui|\) applew).+?(?! mobile) safari/i       // Android Tablets from Unidentified Vendors
            ], [MODEL, [TYPE, TABLET]], [
            /\b((tablet|tab)[;\/]|focus\/\d(?!.+mobile))/i                      // Unidentifiable Tablet
            ], [[TYPE, TABLET]], [
            /(phone|mobile(?:[;\/]| [ \w\/\.]*safari)|pda(?=.+windows ce))/i    // Unidentifiable Mobile
            ], [[TYPE, MOBILE]], [
            /(android[-\w\. ]{0,9});.+buil/i                                    // Generic Android Device
            ], [MODEL, [VENDOR, 'Generic']]
        ],

        engine : [[

            /windows.+ edge\/([\w\.]+)/i                                       // EdgeHTML
            ], [VERSION, [NAME, EDGE+'HTML']], [

            /(arkweb)\/([\w\.]+)/i                                              // ArkWeb
            ], [NAME, VERSION], [

            /webkit\/537\.36.+chrome\/(?!27)([\w\.]+)/i                         // Blink
            ], [VERSION, [NAME, 'Blink']], [

            /(presto)\/([\w\.]+)/i,                                             // Presto
            /(webkit|trident|netfront|netsurf|amaya|lynx|w3m|goanna|servo)\/([\w\.]+)/i, // WebKit/Trident/NetFront/NetSurf/Amaya/Lynx/w3m/Goanna/Servo
            /ekioh(flow)\/([\w\.]+)/i,                                          // Flow
            /(khtml|tasman|links)[\/ ]\(?([\w\.]+)/i,                           // KHTML/Tasman/Links
            /(icab)[\/ ]([23]\.[\d\.]+)/i,                                      // iCab
            /\b(libweb)/i
            ], [NAME, VERSION], [

            /rv\:([\w\.]{1,9})\b.+(gecko)/i                                     // Gecko
            ], [VERSION, NAME]
        ],

        os : [[

            // Windows
            /microsoft (windows) (vista|xp)/i                                   // Windows (iTunes)
            ], [NAME, VERSION], [
            /(windows (?:phone(?: os)?|mobile))[\/ ]?([\d\.\w ]*)/i             // Windows Phone
            ], [NAME, [VERSION, strMapper, windowsVersionMap]], [
            /windows nt 6\.2; (arm)/i,                                        // Windows RT
            /windows[\/ ]?([ntce\d\. ]+\w)(?!.+xbox)/i,
            /(?:win(?=3|9|n)|win 9x )([nt\d\.]+)/i
            ], [[VERSION, strMapper, windowsVersionMap], [NAME, 'Windows']], [

            // iOS/macOS
            /ip[honead]{2,4}\b(?:.*os ([\w]+) like mac|; opera)/i,              // iOS
            /(?:ios;fbsv\/|iphone.+ios[\/ ])([\d\.]+)/i,
            /cfnetwork\/.+darwin/i
            ], [[VERSION, /_/g, '.'], [NAME, 'iOS']], [
            /(mac os x) ?([\w\. ]*)/i,
            /(macintosh|mac_powerpc\b)(?!.+haiku)/i                             // Mac OS
            ], [[NAME, MAC_OS], [VERSION, /_/g, '.']], [

            // Mobile OSes
            /droid ([\w\.]+)\b.+(android[- ]x86|harmonyos)/i                    // Android-x86/HarmonyOS
            ], [VERSION, NAME], [                                               // Android/WebOS/QNX/Bada/RIM/Maemo/MeeGo/Sailfish OS/OpenHarmony
            /(android|webos|qnx|bada|rim tablet os|maemo|meego|sailfish|openharmony)[-\/ ]?([\w\.]*)/i,
            /(blackberry)\w*\/([\w\.]*)/i,                                      // Blackberry
            /(tizen|kaios)[\/ ]([\w\.]+)/i,                                     // Tizen/KaiOS
            /\((series40);/i                                                    // Series 40
            ], [NAME, VERSION], [
            /\(bb(10);/i                                                        // BlackBerry 10
            ], [VERSION, [NAME, BLACKBERRY]], [
            /(?:symbian ?os|symbos|s60(?=;)|series60)[-\/ ]?([\w\.]*)/i         // Symbian
            ], [VERSION, [NAME, 'Symbian']], [
            /mozilla\/[\d\.]+ \((?:mobile|tablet|tv|mobile; [\w ]+); rv:.+ gecko\/([\w\.]+)/i // Firefox OS
            ], [VERSION, [NAME, FIREFOX+' OS']], [
            /web0s;.+rt(tv)/i,
            /\b(?:hp)?wos(?:browser)?\/([\w\.]+)/i                              // WebOS
            ], [VERSION, [NAME, 'webOS']], [
            /watch(?: ?os[,\/]|\d,\d\/)([\d\.]+)/i                              // watchOS
            ], [VERSION, [NAME, 'watchOS']], [

            // Google Chromecast
            /crkey\/([\d\.]+)/i                                                 // Google Chromecast
            ], [VERSION, [NAME, CHROME+'cast']], [
            /(cros) [\w]+(?:\)| ([\w\.]+)\b)/i                                  // Chromium OS
            ], [[NAME, CHROMIUM_OS], VERSION],[

            // Smart TVs
            /panasonic;(viera)/i,                                               // Panasonic Viera
            /(netrange)mmh/i,                                                   // Netrange
            /(nettv)\/(\d+\.[\w\.]+)/i,                                         // NetTV

            // Console
            /(nintendo|playstation) ([wids345portablevuch]+)/i,                 // Nintendo/Playstation
            /(xbox); +xbox ([^\);]+)/i,                                         // Microsoft Xbox (360, One, X, S, Series X, Series S)

            // Other
            /\b(joli|palm)\b ?(?:os)?\/?([\w\.]*)/i,                            // Joli/Palm
            /(mint)[\/\(\) ]?(\w*)/i,                                           // Mint
            /(mageia|vectorlinux)[; ]/i,                                        // Mageia/VectorLinux
            /([kxln]?ubuntu|debian|suse|opensuse|gentoo|arch(?= linux)|slackware|fedora|mandriva|centos|pclinuxos|red ?hat|zenwalk|linpus|raspbian|plan 9|minix|risc os|contiki|deepin|manjaro|elementary os|sabayon|linspire)(?: gnu\/linux)?(?: enterprise)?(?:[- ]linux)?(?:-gnu)?[-\/ ]?(?!chrom|package)([-\w\.]*)/i,
                                                                                // Ubuntu/Debian/SUSE/Gentoo/Arch/Slackware/Fedora/Mandriva/CentOS/PCLinuxOS/RedHat/Zenwalk/Linpus/Raspbian/Plan9/Minix/RISCOS/Contiki/Deepin/Manjaro/elementary/Sabayon/Linspire
            /(hurd|linux) ?([\w\.]*)/i,                                         // Hurd/Linux
            /(gnu) ?([\w\.]*)/i,                                                // GNU
            /\b([-frentopcghs]{0,5}bsd|dragonfly)[\/ ]?(?!amd|[ix346]{1,2}86)([\w\.]*)/i, // FreeBSD/NetBSD/OpenBSD/PC-BSD/GhostBSD/DragonFly
            /(haiku) (\w+)/i                                                    // Haiku
            ], [NAME, VERSION], [
            /(sunos) ?([\w\.\d]*)/i                                             // Solaris
            ], [[NAME, 'Solaris'], VERSION], [
            /((?:open)?solaris)[-\/ ]?([\w\.]*)/i,                              // Solaris
            /(aix) ((\d)(?=\.|\)| )[\w\.])*/i,                                  // AIX
            /\b(beos|os\/2|amigaos|morphos|openvms|fuchsia|hp-ux|serenityos)/i, // BeOS/OS2/AmigaOS/MorphOS/OpenVMS/Fuchsia/HP-UX/SerenityOS
            /(unix) ?([\w\.]*)/i                                                // UNIX
            ], [NAME, VERSION]
        ]
    };

    /////////////////
    // Constructor
    ////////////////

    var UAParser = function (ua, extensions) {

        if (typeof ua === OBJ_TYPE) {
            extensions = ua;
            ua = undefined;
        }

        if (!(this instanceof UAParser)) {
            return new UAParser(ua, extensions).getResult();
        }

        var _navigator = (typeof window !== UNDEF_TYPE && window.navigator) ? window.navigator : undefined;
        var _ua = ua || ((_navigator && _navigator.userAgent) ? _navigator.userAgent : EMPTY);
        var _uach = (_navigator && _navigator.userAgentData) ? _navigator.userAgentData : undefined;
        var _rgxmap = extensions ? extend(regexes, extensions) : regexes;
        var _isSelfNav = _navigator && _navigator.userAgent == _ua;

        this.getBrowser = function () {
            var _browser = {};
            _browser[NAME] = undefined;
            _browser[VERSION] = undefined;
            rgxMapper.call(_browser, _ua, _rgxmap.browser);
            _browser[MAJOR] = majorize(_browser[VERSION]);
            // Brave-specific detection
            if (_isSelfNav && _navigator && _navigator.brave && typeof _navigator.brave.isBrave == FUNC_TYPE) {
                _browser[NAME] = 'Brave';
            }
            return _browser;
        };
        this.getCPU = function () {
            var _cpu = {};
            _cpu[ARCHITECTURE] = undefined;
            rgxMapper.call(_cpu, _ua, _rgxmap.cpu);
            return _cpu;
        };
        this.getDevice = function () {
            var _device = {};
            _device[VENDOR] = undefined;
            _device[MODEL] = undefined;
            _device[TYPE] = undefined;
            rgxMapper.call(_device, _ua, _rgxmap.device);
            if (_isSelfNav && !_device[TYPE] && _uach && _uach.mobile) {
                _device[TYPE] = MOBILE;
            }
            // iPadOS-specific detection: identified as Mac, but has some iOS-only properties
            if (_isSelfNav && _device[MODEL] == 'Macintosh' && _navigator && typeof _navigator.standalone !== UNDEF_TYPE && _navigator.maxTouchPoints && _navigator.maxTouchPoints > 2) {
                _device[MODEL] = 'iPad';
                _device[TYPE] = TABLET;
            }
            return _device;
        };
        this.getEngine = function () {
            var _engine = {};
            _engine[NAME] = undefined;
            _engine[VERSION] = undefined;
            rgxMapper.call(_engine, _ua, _rgxmap.engine);
            return _engine;
        };
        this.getOS = function () {
            var _os = {};
            _os[NAME] = undefined;
            _os[VERSION] = undefined;
            rgxMapper.call(_os, _ua, _rgxmap.os);
            if (_isSelfNav && !_os[NAME] && _uach && _uach.platform && _uach.platform != 'Unknown') {
                _os[NAME] = _uach.platform  
                                    .replace(/chrome os/i, CHROMIUM_OS)
                                    .replace(/macos/i, MAC_OS);           // backward compatibility
            }
            return _os;
        };
        this.getResult = function () {
            return {
                ua      : this.getUA(),
                browser : this.getBrowser(),
                engine  : this.getEngine(),
                os      : this.getOS(),
                device  : this.getDevice(),
                cpu     : this.getCPU()
            };
        };
        this.getUA = function () {
            return _ua;
        };
        this.setUA = function (ua) {
            _ua = (typeof ua === STR_TYPE && ua.length > UA_MAX_LENGTH) ? trim(ua, UA_MAX_LENGTH) : ua;
            return this;
        };
        this.setUA(_ua);
        return this;
    };

    UAParser.VERSION = LIBVERSION;
    UAParser.BROWSER =  enumerize([NAME, VERSION, MAJOR]);
    UAParser.CPU = enumerize([ARCHITECTURE]);
    UAParser.DEVICE = enumerize([MODEL, VENDOR, TYPE, CONSOLE, MOBILE, SMARTTV, TABLET, WEARABLE, EMBEDDED]);
    UAParser.ENGINE = UAParser.OS = enumerize([NAME, VERSION]);

    ///////////
    // Export
    //////////

    // check js environment
    if (typeof(exports) !== UNDEF_TYPE) {
        // nodejs env
        if (typeof module !== UNDEF_TYPE && module.exports) {
            exports = module.exports = UAParser;
        }
        exports.UAParser = UAParser;
    } else {
        // requirejs env (optional)
        if (typeof(define) === FUNC_TYPE && define.amd) {
            define(function () {
                return UAParser;
            });
        } else if (typeof window !== UNDEF_TYPE) {
            // browser env
            window.UAParser = UAParser;
        }
    }

    // jQuery/Zepto specific (optional)
    // Note:
    //   In AMD env the global scope should be kept clean, but jQuery is an exception.
    //   jQuery always exports to global scope, unless jQuery.noConflict(true) is used,
    //   and we should catch that.
    var $ = typeof window !== UNDEF_TYPE && (window.jQuery || window.Zepto);
    if ($ && !$.ua) {
        var parser = new UAParser();
        $.ua = parser.getResult();
        $.ua.get = function () {
            return parser.getUA();
        };
        $.ua.set = function (ua) {
            parser.setUA(ua);
            var result = parser.getResult();
            for (var prop in result) {
                $.ua[prop] = result[prop];
            }
        };
    }

})(typeof window === 'object' ? window : this);

},{}],135:[function(require,module,exports){
/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */
var byteToHex = [];
for (var i = 0; i < 256; ++i) {
  byteToHex[i] = (i + 0x100).toString(16).substr(1);
}

function bytesToUuid(buf, offset) {
  var i = offset || 0;
  var bth = byteToHex;
  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4
  return ([
    bth[buf[i++]], bth[buf[i++]],
    bth[buf[i++]], bth[buf[i++]], '-',
    bth[buf[i++]], bth[buf[i++]], '-',
    bth[buf[i++]], bth[buf[i++]], '-',
    bth[buf[i++]], bth[buf[i++]], '-',
    bth[buf[i++]], bth[buf[i++]],
    bth[buf[i++]], bth[buf[i++]],
    bth[buf[i++]], bth[buf[i++]]
  ]).join('');
}

module.exports = bytesToUuid;

},{}],136:[function(require,module,exports){
// Unique ID creation requires a high quality random # generator.  In the
// browser this is a little complicated due to unknown quality of Math.random()
// and inconsistent support for the `crypto` API.  We do the best we can via
// feature-detection

// getRandomValues needs to be invoked in a context where "this" is a Crypto
// implementation. Also, find the complete implementation of crypto on IE11.
var getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||
                      (typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));

if (getRandomValues) {
  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto
  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef

  module.exports = function whatwgRNG() {
    getRandomValues(rnds8);
    return rnds8;
  };
} else {
  // Math.random()-based (RNG)
  //
  // If all else fails, use Math.random().  It's fast, but is of unspecified
  // quality.
  var rnds = new Array(16);

  module.exports = function mathRNG() {
    for (var i = 0, r; i < 16; i++) {
      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
    }

    return rnds;
  };
}

},{}],137:[function(require,module,exports){
var rng = require('./lib/rng');
var bytesToUuid = require('./lib/bytesToUuid');

function v4(options, buf, offset) {
  var i = buf && offset || 0;

  if (typeof(options) == 'string') {
    buf = options === 'binary' ? new Array(16) : null;
    options = null;
  }
  options = options || {};

  var rnds = options.random || (options.rng || rng)();

  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
  rnds[6] = (rnds[6] & 0x0f) | 0x40;
  rnds[8] = (rnds[8] & 0x3f) | 0x80;

  // Copy bytes to buffer, if provided
  if (buf) {
    for (var ii = 0; ii < 16; ++ii) {
      buf[i + ii] = rnds[ii];
    }
  }

  return buf || bytesToUuid(rnds);
}

module.exports = v4;

},{"./lib/bytesToUuid":135,"./lib/rng":136}],138:[function(require,module,exports){
(function (global){(function (){
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */

'use strict';

var adapterFactory = require('./adapter_factory.js');
module.exports = adapterFactory({window: global.window});

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./adapter_factory.js":139}],139:[function(require,module,exports){
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */

'use strict';

var utils = require('./utils');
// Shimming starts here.
module.exports = function(dependencies, opts) {
  var window = dependencies && dependencies.window;

  var options = {
    shimChrome: true,
    shimFirefox: true,
    shimEdge: true,
    shimSafari: true,
  };

  for (var key in opts) {
    if (hasOwnProperty.call(opts, key)) {
      options[key] = opts[key];
    }
  }

  // Utils.
  var logging = utils.log;
  var browserDetails = utils.detectBrowser(window);

  // Uncomment the line below if you want logging to occur, including logging
  // for the switch statement below. Can also be turned on in the browser via
  // adapter.disableLog(false), but then logging from the switch statement below
  // will not appear.
  // require('./utils').disableLog(false);

  // Browser shims.
  var chromeShim = require('./chrome/chrome_shim') || null;
  var edgeShim = require('./edge/edge_shim') || null;
  var firefoxShim = require('./firefox/firefox_shim') || null;
  var safariShim = require('./safari/safari_shim') || null;
  var commonShim = require('./common_shim') || null;

  // Export to the adapter global object visible in the browser.
  var adapter = {
    browserDetails: browserDetails,
    commonShim: commonShim,
    extractVersion: utils.extractVersion,
    disableLog: utils.disableLog,
    disableWarnings: utils.disableWarnings
  };

  // Shim browser if found.
  switch (browserDetails.browser) {
    case 'chrome':
      if (!chromeShim || !chromeShim.shimPeerConnection ||
          !options.shimChrome) {
        logging('Chrome shim is not included in this adapter release.');
        return adapter;
      }
      logging('adapter.js shimming chrome.');
      // Export to the adapter global object visible in the browser.
      adapter.browserShim = chromeShim;
      commonShim.shimCreateObjectURL(window);

      chromeShim.shimGetUserMedia(window);
      chromeShim.shimMediaStream(window);
      chromeShim.shimSourceObject(window);
      chromeShim.shimPeerConnection(window);
      chromeShim.shimOnTrack(window);
      chromeShim.shimAddTrackRemoveTrack(window);
      chromeShim.shimGetSendersWithDtmf(window);
      chromeShim.shimSenderReceiverGetStats(window);
      chromeShim.fixNegotiationNeeded(window);

      commonShim.shimRTCIceCandidate(window);
      commonShim.shimMaxMessageSize(window);
      commonShim.shimSendThrowTypeError(window);
      break;
    case 'firefox':
      if (!firefoxShim || !firefoxShim.shimPeerConnection ||
          !options.shimFirefox) {
        logging('Firefox shim is not included in this adapter release.');
        return adapter;
      }
      logging('adapter.js shimming firefox.');
      // Export to the adapter global object visible in the browser.
      adapter.browserShim = firefoxShim;
      commonShim.shimCreateObjectURL(window);

      firefoxShim.shimGetUserMedia(window);
      firefoxShim.shimSourceObject(window);
      firefoxShim.shimPeerConnection(window);
      firefoxShim.shimOnTrack(window);
      firefoxShim.shimRemoveStream(window);
      firefoxShim.shimSenderGetStats(window);
      firefoxShim.shimReceiverGetStats(window);
      firefoxShim.shimRTCDataChannel(window);

      commonShim.shimRTCIceCandidate(window);
      commonShim.shimMaxMessageSize(window);
      commonShim.shimSendThrowTypeError(window);
      break;
    case 'edge':
      if (!edgeShim || !edgeShim.shimPeerConnection || !options.shimEdge) {
        logging('MS edge shim is not included in this adapter release.');
        return adapter;
      }
      logging('adapter.js shimming edge.');
      // Export to the adapter global object visible in the browser.
      adapter.browserShim = edgeShim;
      commonShim.shimCreateObjectURL(window);

      edgeShim.shimGetUserMedia(window);
      edgeShim.shimPeerConnection(window);
      edgeShim.shimReplaceTrack(window);
      edgeShim.shimGetDisplayMedia(window);

      // the edge shim implements the full RTCIceCandidate object.

      commonShim.shimMaxMessageSize(window);
      commonShim.shimSendThrowTypeError(window);
      break;
    case 'safari':
      if (!safariShim || !options.shimSafari) {
        logging('Safari shim is not included in this adapter release.');
        return adapter;
      }
      logging('adapter.js shimming safari.');
      // Export to the adapter global object visible in the browser.
      adapter.browserShim = safariShim;
      commonShim.shimCreateObjectURL(window);

      safariShim.shimRTCIceServerUrls(window);
      safariShim.shimCreateOfferLegacy(window);
      safariShim.shimCallbacksAPI(window);
      safariShim.shimLocalStreamsAPI(window);
      safariShim.shimRemoteStreamsAPI(window);
      safariShim.shimTrackEventTransceiver(window);
      safariShim.shimGetUserMedia(window);

      commonShim.shimRTCIceCandidate(window);
      commonShim.shimMaxMessageSize(window);
      commonShim.shimSendThrowTypeError(window);
      break;
    default:
      logging('Unsupported browser!');
      break;
  }

  return adapter;
};

},{"./chrome/chrome_shim":140,"./common_shim":142,"./edge/edge_shim":143,"./firefox/firefox_shim":146,"./safari/safari_shim":148,"./utils":149}],140:[function(require,module,exports){

/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */
'use strict';
var utils = require('../utils.js');
var logging = utils.log;

/* iterates the stats graph recursively. */
function walkStats(stats, base, resultSet) {
  if (!base || resultSet.has(base.id)) {
    return;
  }
  resultSet.set(base.id, base);
  Object.keys(base).forEach(function(name) {
    if (name.endsWith('Id')) {
      walkStats(stats, stats.get(base[name]), resultSet);
    } else if (name.endsWith('Ids')) {
      base[name].forEach(function(id) {
        walkStats(stats, stats.get(id), resultSet);
      });
    }
  });
}

/* filter getStats for a sender/receiver track. */
function filterStats(result, track, outbound) {
  var streamStatsType = outbound ? 'outbound-rtp' : 'inbound-rtp';
  var filteredResult = new Map();
  if (track === null) {
    return filteredResult;
  }
  var trackStats = [];
  result.forEach(function(value) {
    if (value.type === 'track' &&
        value.trackIdentifier === track.id) {
      trackStats.push(value);
    }
  });
  trackStats.forEach(function(trackStat) {
    result.forEach(function(stats) {
      if (stats.type === streamStatsType && stats.trackId === trackStat.id) {
        walkStats(result, stats, filteredResult);
      }
    });
  });
  return filteredResult;
}

module.exports = {
  shimGetUserMedia: require('./getusermedia'),
  shimMediaStream: function(window) {
    window.MediaStream = window.MediaStream || window.webkitMediaStream;
  },

  shimOnTrack: function(window) {
    if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in
        window.RTCPeerConnection.prototype)) {
      Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {
        get: function() {
          return this._ontrack;
        },
        set: function(f) {
          if (this._ontrack) {
            this.removeEventListener('track', this._ontrack);
          }
          this.addEventListener('track', this._ontrack = f);
        },
        enumerable: true,
        configurable: true
      });
      var origSetRemoteDescription =
          window.RTCPeerConnection.prototype.setRemoteDescription;
      window.RTCPeerConnection.prototype.setRemoteDescription = function() {
        var pc = this;
        if (!pc._ontrackpoly) {
          pc._ontrackpoly = function(e) {
            // onaddstream does not fire when a track is added to an existing
            // stream. But stream.onaddtrack is implemented so we use that.
            e.stream.addEventListener('addtrack', function(te) {
              var receiver;
              if (window.RTCPeerConnection.prototype.getReceivers) {
                receiver = pc.getReceivers().find(function(r) {
                  return r.track && r.track.id === te.track.id;
                });
              } else {
                receiver = {track: te.track};
              }

              var event = new Event('track');
              event.track = te.track;
              event.receiver = receiver;
              event.transceiver = {receiver: receiver};
              event.streams = [e.stream];
              pc.dispatchEvent(event);
            });
            e.stream.getTracks().forEach(function(track) {
              var receiver;
              if (window.RTCPeerConnection.prototype.getReceivers) {
                receiver = pc.getReceivers().find(function(r) {
                  return r.track && r.track.id === track.id;
                });
              } else {
                receiver = {track: track};
              }
              var event = new Event('track');
              event.track = track;
              event.receiver = receiver;
              event.transceiver = {receiver: receiver};
              event.streams = [e.stream];
              pc.dispatchEvent(event);
            });
          };
          pc.addEventListener('addstream', pc._ontrackpoly);
        }
        return origSetRemoteDescription.apply(pc, arguments);
      };
    } else {
      // even if RTCRtpTransceiver is in window, it is only used and
      // emitted in unified-plan. Unfortunately this means we need
      // to unconditionally wrap the event.
      utils.wrapPeerConnectionEvent(window, 'track', function(e) {
        if (!e.transceiver) {
          Object.defineProperty(e, 'transceiver',
            {value: {receiver: e.receiver}});
        }
        return e;
      });
    }
  },

  shimGetSendersWithDtmf: function(window) {
    // Overrides addTrack/removeTrack, depends on shimAddTrackRemoveTrack.
    if (typeof window === 'object' && window.RTCPeerConnection &&
        !('getSenders' in window.RTCPeerConnection.prototype) &&
        'createDTMFSender' in window.RTCPeerConnection.prototype) {
      var shimSenderWithDtmf = function(pc, track) {
        return {
          track: track,
          get dtmf() {
            if (this._dtmf === undefined) {
              if (track.kind === 'audio') {
                this._dtmf = pc.createDTMFSender(track);
              } else {
                this._dtmf = null;
              }
            }
            return this._dtmf;
          },
          _pc: pc
        };
      };

      // augment addTrack when getSenders is not available.
      if (!window.RTCPeerConnection.prototype.getSenders) {
        window.RTCPeerConnection.prototype.getSenders = function() {
          this._senders = this._senders || [];
          return this._senders.slice(); // return a copy of the internal state.
        };
        var origAddTrack = window.RTCPeerConnection.prototype.addTrack;
        window.RTCPeerConnection.prototype.addTrack = function(track, stream) {
          var pc = this;
          var sender = origAddTrack.apply(pc, arguments);
          if (!sender) {
            sender = shimSenderWithDtmf(pc, track);
            pc._senders.push(sender);
          }
          return sender;
        };

        var origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;
        window.RTCPeerConnection.prototype.removeTrack = function(sender) {
          var pc = this;
          origRemoveTrack.apply(pc, arguments);
          var idx = pc._senders.indexOf(sender);
          if (idx !== -1) {
            pc._senders.splice(idx, 1);
          }
        };
      }
      var origAddStream = window.RTCPeerConnection.prototype.addStream;
      window.RTCPeerConnection.prototype.addStream = function(stream) {
        var pc = this;
        pc._senders = pc._senders || [];
        origAddStream.apply(pc, [stream]);
        stream.getTracks().forEach(function(track) {
          pc._senders.push(shimSenderWithDtmf(pc, track));
        });
      };

      var origRemoveStream = window.RTCPeerConnection.prototype.removeStream;
      window.RTCPeerConnection.prototype.removeStream = function(stream) {
        var pc = this;
        pc._senders = pc._senders || [];
        origRemoveStream.apply(pc, [stream]);

        stream.getTracks().forEach(function(track) {
          var sender = pc._senders.find(function(s) {
            return s.track === track;
          });
          if (sender) {
            pc._senders.splice(pc._senders.indexOf(sender), 1); // remove sender
          }
        });
      };
    } else if (typeof window === 'object' && window.RTCPeerConnection &&
               'getSenders' in window.RTCPeerConnection.prototype &&
               'createDTMFSender' in window.RTCPeerConnection.prototype &&
               window.RTCRtpSender &&
               !('dtmf' in window.RTCRtpSender.prototype)) {
      var origGetSenders = window.RTCPeerConnection.prototype.getSenders;
      window.RTCPeerConnection.prototype.getSenders = function() {
        var pc = this;
        var senders = origGetSenders.apply(pc, []);
        senders.forEach(function(sender) {
          sender._pc = pc;
        });
        return senders;
      };

      Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {
        get: function() {
          if (this._dtmf === undefined) {
            if (this.track.kind === 'audio') {
              this._dtmf = this._pc.createDTMFSender(this.track);
            } else {
              this._dtmf = null;
            }
          }
          return this._dtmf;
        }
      });
    }
  },

  shimSenderReceiverGetStats: function(window) {
    if (!(typeof window === 'object' && window.RTCPeerConnection &&
        window.RTCRtpSender && window.RTCRtpReceiver)) {
      return;
    }

    // shim sender stats.
    if (!('getStats' in window.RTCRtpSender.prototype)) {
      var origGetSenders = window.RTCPeerConnection.prototype.getSenders;
      if (origGetSenders) {
        window.RTCPeerConnection.prototype.getSenders = function() {
          var pc = this;
          var senders = origGetSenders.apply(pc, []);
          senders.forEach(function(sender) {
            sender._pc = pc;
          });
          return senders;
        };
      }

      var origAddTrack = window.RTCPeerConnection.prototype.addTrack;
      if (origAddTrack) {
        window.RTCPeerConnection.prototype.addTrack = function() {
          var sender = origAddTrack.apply(this, arguments);
          sender._pc = this;
          return sender;
        };
      }
      window.RTCRtpSender.prototype.getStats = function() {
        var sender = this;
        return this._pc.getStats().then(function(result) {
          /* Note: this will include stats of all senders that
           *   send a track with the same id as sender.track as
           *   it is not possible to identify the RTCRtpSender.
           */
          return filterStats(result, sender.track, true);
        });
      };
    }

    // shim receiver stats.
    if (!('getStats' in window.RTCRtpReceiver.prototype)) {
      var origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;
      if (origGetReceivers) {
        window.RTCPeerConnection.prototype.getReceivers = function() {
          var pc = this;
          var receivers = origGetReceivers.apply(pc, []);
          receivers.forEach(function(receiver) {
            receiver._pc = pc;
          });
          return receivers;
        };
      }
      utils.wrapPeerConnectionEvent(window, 'track', function(e) {
        e.receiver._pc = e.srcElement;
        return e;
      });
      window.RTCRtpReceiver.prototype.getStats = function() {
        var receiver = this;
        return this._pc.getStats().then(function(result) {
          return filterStats(result, receiver.track, false);
        });
      };
    }

    if (!('getStats' in window.RTCRtpSender.prototype &&
        'getStats' in window.RTCRtpReceiver.prototype)) {
      return;
    }

    // shim RTCPeerConnection.getStats(track).
    var origGetStats = window.RTCPeerConnection.prototype.getStats;
    window.RTCPeerConnection.prototype.getStats = function() {
      var pc = this;
      if (arguments.length > 0 &&
          arguments[0] instanceof window.MediaStreamTrack) {
        var track = arguments[0];
        var sender;
        var receiver;
        var err;
        pc.getSenders().forEach(function(s) {
          if (s.track === track) {
            if (sender) {
              err = true;
            } else {
              sender = s;
            }
          }
        });
        pc.getReceivers().forEach(function(r) {
          if (r.track === track) {
            if (receiver) {
              err = true;
            } else {
              receiver = r;
            }
          }
          return r.track === track;
        });
        if (err || (sender && receiver)) {
          return Promise.reject(new DOMException(
            'There are more than one sender or receiver for the track.',
            'InvalidAccessError'));
        } else if (sender) {
          return sender.getStats();
        } else if (receiver) {
          return receiver.getStats();
        }
        return Promise.reject(new DOMException(
          'There is no sender or receiver for the track.',
          'InvalidAccessError'));
      }
      return origGetStats.apply(pc, arguments);
    };
  },

  shimSourceObject: function(window) {
    var URL = window && window.URL;

    if (typeof window === 'object') {
      if (window.HTMLMediaElement &&
        !('srcObject' in window.HTMLMediaElement.prototype)) {
        // Shim the srcObject property, once, when HTMLMediaElement is found.
        Object.defineProperty(window.HTMLMediaElement.prototype, 'srcObject', {
          get: function() {
            return this._srcObject;
          },
          set: function(stream) {
            var self = this;
            // Use _srcObject as a private property for this shim
            this._srcObject = stream;
            if (this.src) {
              URL.revokeObjectURL(this.src);
            }

            if (!stream) {
              this.src = '';
              return undefined;
            }
            this.src = URL.createObjectURL(stream);
            // We need to recreate the blob url when a track is added or
            // removed. Doing it manually since we want to avoid a recursion.
            stream.addEventListener('addtrack', function() {
              if (self.src) {
                URL.revokeObjectURL(self.src);
              }
              self.src = URL.createObjectURL(stream);
            });
            stream.addEventListener('removetrack', function() {
              if (self.src) {
                URL.revokeObjectURL(self.src);
              }
              self.src = URL.createObjectURL(stream);
            });
          }
        });
      }
    }
  },

  shimAddTrackRemoveTrackWithNative: function(window) {
    // shim addTrack/removeTrack with native variants in order to make
    // the interactions with legacy getLocalStreams behave as in other browsers.
    // Keeps a mapping stream.id => [stream, rtpsenders...]
    window.RTCPeerConnection.prototype.getLocalStreams = function() {
      var pc = this;
      this._shimmedLocalStreams = this._shimmedLocalStreams || {};
      return Object.keys(this._shimmedLocalStreams).map(function(streamId) {
        return pc._shimmedLocalStreams[streamId][0];
      });
    };

    var origAddTrack = window.RTCPeerConnection.prototype.addTrack;
    window.RTCPeerConnection.prototype.addTrack = function(track, stream) {
      if (!stream) {
        return origAddTrack.apply(this, arguments);
      }
      this._shimmedLocalStreams = this._shimmedLocalStreams || {};

      var sender = origAddTrack.apply(this, arguments);
      if (!this._shimmedLocalStreams[stream.id]) {
        this._shimmedLocalStreams[stream.id] = [stream, sender];
      } else if (this._shimmedLocalStreams[stream.id].indexOf(sender) === -1) {
        this._shimmedLocalStreams[stream.id].push(sender);
      }
      return sender;
    };

    var origAddStream = window.RTCPeerConnection.prototype.addStream;
    window.RTCPeerConnection.prototype.addStream = function(stream) {
      var pc = this;
      this._shimmedLocalStreams = this._shimmedLocalStreams || {};

      stream.getTracks().forEach(function(track) {
        var alreadyExists = pc.getSenders().find(function(s) {
          return s.track === track;
        });
        if (alreadyExists) {
          throw new DOMException('Track already exists.',
              'InvalidAccessError');
        }
      });
      var existingSenders = pc.getSenders();
      origAddStream.apply(this, arguments);
      var newSenders = pc.getSenders().filter(function(newSender) {
        return existingSenders.indexOf(newSender) === -1;
      });
      this._shimmedLocalStreams[stream.id] = [stream].concat(newSenders);
    };

    var origRemoveStream = window.RTCPeerConnection.prototype.removeStream;
    window.RTCPeerConnection.prototype.removeStream = function(stream) {
      this._shimmedLocalStreams = this._shimmedLocalStreams || {};
      delete this._shimmedLocalStreams[stream.id];
      return origRemoveStream.apply(this, arguments);
    };

    var origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;
    window.RTCPeerConnection.prototype.removeTrack = function(sender) {
      var pc = this;
      this._shimmedLocalStreams = this._shimmedLocalStreams || {};
      if (sender) {
        Object.keys(this._shimmedLocalStreams).forEach(function(streamId) {
          var idx = pc._shimmedLocalStreams[streamId].indexOf(sender);
          if (idx !== -1) {
            pc._shimmedLocalStreams[streamId].splice(idx, 1);
          }
          if (pc._shimmedLocalStreams[streamId].length === 1) {
            delete pc._shimmedLocalStreams[streamId];
          }
        });
      }
      return origRemoveTrack.apply(this, arguments);
    };
  },

  shimAddTrackRemoveTrack: function(window) {
    if (!window.RTCPeerConnection) {
      return;
    }
    var browserDetails = utils.detectBrowser(window);
    // shim addTrack and removeTrack.
    if (window.RTCPeerConnection.prototype.addTrack &&
        browserDetails.version >= 65) {
      return this.shimAddTrackRemoveTrackWithNative(window);
    }

    // also shim pc.getLocalStreams when addTrack is shimmed
    // to return the original streams.
    var origGetLocalStreams = window.RTCPeerConnection.prototype
        .getLocalStreams;
    window.RTCPeerConnection.prototype.getLocalStreams = function() {
      var pc = this;
      var nativeStreams = origGetLocalStreams.apply(this);
      pc._reverseStreams = pc._reverseStreams || {};
      return nativeStreams.map(function(stream) {
        return pc._reverseStreams[stream.id];
      });
    };

    var origAddStream = window.RTCPeerConnection.prototype.addStream;
    window.RTCPeerConnection.prototype.addStream = function(stream) {
      var pc = this;
      pc._streams = pc._streams || {};
      pc._reverseStreams = pc._reverseStreams || {};

      stream.getTracks().forEach(function(track) {
        var alreadyExists = pc.getSenders().find(function(s) {
          return s.track === track;
        });
        if (alreadyExists) {
          throw new DOMException('Track already exists.',
              'InvalidAccessError');
        }
      });
      // Add identity mapping for consistency with addTrack.
      // Unless this is being used with a stream from addTrack.
      if (!pc._reverseStreams[stream.id]) {
        var newStream = new window.MediaStream(stream.getTracks());
        pc._streams[stream.id] = newStream;
        pc._reverseStreams[newStream.id] = stream;
        stream = newStream;
      }
      origAddStream.apply(pc, [stream]);
    };

    var origRemoveStream = window.RTCPeerConnection.prototype.removeStream;
    window.RTCPeerConnection.prototype.removeStream = function(stream) {
      var pc = this;
      pc._streams = pc._streams || {};
      pc._reverseStreams = pc._reverseStreams || {};

      origRemoveStream.apply(pc, [(pc._streams[stream.id] || stream)]);
      delete pc._reverseStreams[(pc._streams[stream.id] ?
          pc._streams[stream.id].id : stream.id)];
      delete pc._streams[stream.id];
    };

    window.RTCPeerConnection.prototype.addTrack = function(track, stream) {
      var pc = this;
      if (pc.signalingState === 'closed') {
        throw new DOMException(
          'The RTCPeerConnection\'s signalingState is \'closed\'.',
          'InvalidStateError');
      }
      var streams = [].slice.call(arguments, 1);
      if (streams.length !== 1 ||
          !streams[0].getTracks().find(function(t) {
            return t === track;
          })) {
        // this is not fully correct but all we can manage without
        // [[associated MediaStreams]] internal slot.
        throw new DOMException(
          'The adapter.js addTrack polyfill only supports a single ' +
          ' stream which is associated with the specified track.',
          'NotSupportedError');
      }

      var alreadyExists = pc.getSenders().find(function(s) {
        return s.track === track;
      });
      if (alreadyExists) {
        throw new DOMException('Track already exists.',
            'InvalidAccessError');
      }

      pc._streams = pc._streams || {};
      pc._reverseStreams = pc._reverseStreams || {};
      var oldStream = pc._streams[stream.id];
      if (oldStream) {
        // this is using odd Chrome behaviour, use with caution:
        // https://bugs.chromium.org/p/webrtc/issues/detail?id=7815
        // Note: we rely on the high-level addTrack/dtmf shim to
        // create the sender with a dtmf sender.
        oldStream.addTrack(track);

        // Trigger ONN async.
        Promise.resolve().then(function() {
          pc.dispatchEvent(new Event('negotiationneeded'));
        });
      } else {
        var newStream = new window.MediaStream([track]);
        pc._streams[stream.id] = newStream;
        pc._reverseStreams[newStream.id] = stream;
        pc.addStream(newStream);
      }
      return pc.getSenders().find(function(s) {
        return s.track === track;
      });
    };

    // replace the internal stream id with the external one and
    // vice versa.
    function replaceInternalStreamId(pc, description) {
      var sdp = description.sdp;
      Object.keys(pc._reverseStreams || []).forEach(function(internalId) {
        var externalStream = pc._reverseStreams[internalId];
        var internalStream = pc._streams[externalStream.id];
        sdp = sdp.replace(new RegExp(internalStream.id, 'g'),
            externalStream.id);
      });
      return new RTCSessionDescription({
        type: description.type,
        sdp: sdp
      });
    }
    function replaceExternalStreamId(pc, description) {
      var sdp = description.sdp;
      Object.keys(pc._reverseStreams || []).forEach(function(internalId) {
        var externalStream = pc._reverseStreams[internalId];
        var internalStream = pc._streams[externalStream.id];
        sdp = sdp.replace(new RegExp(externalStream.id, 'g'),
            internalStream.id);
      });
      return new RTCSessionDescription({
        type: description.type,
        sdp: sdp
      });
    }
    ['createOffer', 'createAnswer'].forEach(function(method) {
      var nativeMethod = window.RTCPeerConnection.prototype[method];
      window.RTCPeerConnection.prototype[method] = function() {
        var pc = this;
        var args = arguments;
        var isLegacyCall = arguments.length &&
            typeof arguments[0] === 'function';
        if (isLegacyCall) {
          return nativeMethod.apply(pc, [
            function(description) {
              var desc = replaceInternalStreamId(pc, description);
              args[0].apply(null, [desc]);
            },
            function(err) {
              if (args[1]) {
                args[1].apply(null, err);
              }
            }, arguments[2]
          ]);
        }
        return nativeMethod.apply(pc, arguments)
        .then(function(description) {
          return replaceInternalStreamId(pc, description);
        });
      };
    });

    var origSetLocalDescription =
        window.RTCPeerConnection.prototype.setLocalDescription;
    window.RTCPeerConnection.prototype.setLocalDescription = function() {
      var pc = this;
      if (!arguments.length || !arguments[0].type) {
        return origSetLocalDescription.apply(pc, arguments);
      }
      arguments[0] = replaceExternalStreamId(pc, arguments[0]);
      return origSetLocalDescription.apply(pc, arguments);
    };

    // TODO: mangle getStats: https://w3c.github.io/webrtc-stats/#dom-rtcmediastreamstats-streamidentifier

    var origLocalDescription = Object.getOwnPropertyDescriptor(
        window.RTCPeerConnection.prototype, 'localDescription');
    Object.defineProperty(window.RTCPeerConnection.prototype,
        'localDescription', {
          get: function() {
            var pc = this;
            var description = origLocalDescription.get.apply(this);
            if (description.type === '') {
              return description;
            }
            return replaceInternalStreamId(pc, description);
          }
        });

    window.RTCPeerConnection.prototype.removeTrack = function(sender) {
      var pc = this;
      if (pc.signalingState === 'closed') {
        throw new DOMException(
          'The RTCPeerConnection\'s signalingState is \'closed\'.',
          'InvalidStateError');
      }
      // We can not yet check for sender instanceof RTCRtpSender
      // since we shim RTPSender. So we check if sender._pc is set.
      if (!sender._pc) {
        throw new DOMException('Argument 1 of RTCPeerConnection.removeTrack ' +
            'does not implement interface RTCRtpSender.', 'TypeError');
      }
      var isLocal = sender._pc === pc;
      if (!isLocal) {
        throw new DOMException('Sender was not created by this connection.',
            'InvalidAccessError');
      }

      // Search for the native stream the senders track belongs to.
      pc._streams = pc._streams || {};
      var stream;
      Object.keys(pc._streams).forEach(function(streamid) {
        var hasTrack = pc._streams[streamid].getTracks().find(function(track) {
          return sender.track === track;
        });
        if (hasTrack) {
          stream = pc._streams[streamid];
        }
      });

      if (stream) {
        if (stream.getTracks().length === 1) {
          // if this is the last track of the stream, remove the stream. This
          // takes care of any shimmed _senders.
          pc.removeStream(pc._reverseStreams[stream.id]);
        } else {
          // relying on the same odd chrome behaviour as above.
          stream.removeTrack(sender.track);
        }
        pc.dispatchEvent(new Event('negotiationneeded'));
      }
    };
  },

  shimPeerConnection: function(window) {
    var browserDetails = utils.detectBrowser(window);

    // The RTCPeerConnection object.
    if (!window.RTCPeerConnection && window.webkitRTCPeerConnection) {
      window.RTCPeerConnection = function(pcConfig, pcConstraints) {
        // Translate iceTransportPolicy to iceTransports,
        // see https://code.google.com/p/webrtc/issues/detail?id=4869
        // this was fixed in M56 along with unprefixing RTCPeerConnection.
        logging('PeerConnection');
        if (pcConfig && pcConfig.iceTransportPolicy) {
          pcConfig.iceTransports = pcConfig.iceTransportPolicy;
        }

        return new window.webkitRTCPeerConnection(pcConfig, pcConstraints);
      };
      window.RTCPeerConnection.prototype =
          window.webkitRTCPeerConnection.prototype;
      // wrap static methods. Currently just generateCertificate.
      if (window.webkitRTCPeerConnection.generateCertificate) {
        Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {
          get: function() {
            return window.webkitRTCPeerConnection.generateCertificate;
          }
        });
      }
    }
    if (!window.RTCPeerConnection) {
      return;
    }

    var origGetStats = window.RTCPeerConnection.prototype.getStats;
    window.RTCPeerConnection.prototype.getStats = function(selector,
        successCallback, errorCallback) {
      var pc = this;
      var args = arguments;

      // If selector is a function then we are in the old style stats so just
      // pass back the original getStats format to avoid breaking old users.
      if (arguments.length > 0 && typeof selector === 'function') {
        return origGetStats.apply(this, arguments);
      }

      // When spec-style getStats is supported, return those when called with
      // either no arguments or the selector argument is null.
      if (origGetStats.length === 0 && (arguments.length === 0 ||
          typeof arguments[0] !== 'function')) {
        return origGetStats.apply(this, []);
      }

      var fixChromeStats_ = function(response) {
        var standardReport = {};
        var reports = response.result();
        reports.forEach(function(report) {
          var standardStats = {
            id: report.id,
            timestamp: report.timestamp,
            type: {
              localcandidate: 'local-candidate',
              remotecandidate: 'remote-candidate'
            }[report.type] || report.type
          };
          report.names().forEach(function(name) {
            standardStats[name] = report.stat(name);
          });
          standardReport[standardStats.id] = standardStats;
        });

        return standardReport;
      };

      // shim getStats with maplike support
      var makeMapStats = function(stats) {
        return new Map(Object.keys(stats).map(function(key) {
          return [key, stats[key]];
        }));
      };

      if (arguments.length >= 2) {
        var successCallbackWrapper_ = function(response) {
          args[1](makeMapStats(fixChromeStats_(response)));
        };

        return origGetStats.apply(this, [successCallbackWrapper_,
          arguments[0]]);
      }

      // promise-support
      return new Promise(function(resolve, reject) {
        origGetStats.apply(pc, [
          function(response) {
            resolve(makeMapStats(fixChromeStats_(response)));
          }, reject]);
      }).then(successCallback, errorCallback);
    };

    // add promise support -- natively available in Chrome 51
    if (browserDetails.version < 51) {
      ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']
          .forEach(function(method) {
            var nativeMethod = window.RTCPeerConnection.prototype[method];
            window.RTCPeerConnection.prototype[method] = function() {
              var args = arguments;
              var pc = this;
              var promise = new Promise(function(resolve, reject) {
                nativeMethod.apply(pc, [args[0], resolve, reject]);
              });
              if (args.length < 2) {
                return promise;
              }
              return promise.then(function() {
                args[1].apply(null, []);
              },
              function(err) {
                if (args.length >= 3) {
                  args[2].apply(null, [err]);
                }
              });
            };
          });
    }

    // promise support for createOffer and createAnswer. Available (without
    // bugs) since M52: crbug/619289
    if (browserDetails.version < 52) {
      ['createOffer', 'createAnswer'].forEach(function(method) {
        var nativeMethod = window.RTCPeerConnection.prototype[method];
        window.RTCPeerConnection.prototype[method] = function() {
          var pc = this;
          if (arguments.length < 1 || (arguments.length === 1 &&
              typeof arguments[0] === 'object')) {
            var opts = arguments.length === 1 ? arguments[0] : undefined;
            return new Promise(function(resolve, reject) {
              nativeMethod.apply(pc, [resolve, reject, opts]);
            });
          }
          return nativeMethod.apply(this, arguments);
        };
      });
    }

    // shim implicit creation of RTCSessionDescription/RTCIceCandidate
    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']
        .forEach(function(method) {
          var nativeMethod = window.RTCPeerConnection.prototype[method];
          window.RTCPeerConnection.prototype[method] = function() {
            arguments[0] = new ((method === 'addIceCandidate') ?
                window.RTCIceCandidate :
                window.RTCSessionDescription)(arguments[0]);
            return nativeMethod.apply(this, arguments);
          };
        });

    // support for addIceCandidate(null or undefined)
    var nativeAddIceCandidate =
        window.RTCPeerConnection.prototype.addIceCandidate;
    window.RTCPeerConnection.prototype.addIceCandidate = function() {
      if (!arguments[0]) {
        if (arguments[1]) {
          arguments[1].apply(null);
        }
        return Promise.resolve();
      }
      return nativeAddIceCandidate.apply(this, arguments);
    };
  },

  fixNegotiationNeeded: function(window) {
    utils.wrapPeerConnectionEvent(window, 'negotiationneeded', function(e) {
      var pc = e.target;
      if (pc.signalingState !== 'stable') {
        return;
      }
      return e;
    });
  },

  shimGetDisplayMedia: function(window, getSourceId) {
    if (!window.navigator || !window.navigator.mediaDevices ||
        'getDisplayMedia' in window.navigator.mediaDevices) {
      return;
    }
    // getSourceId is a function that returns a promise resolving with
    // the sourceId of the screen/window/tab to be shared.
    if (typeof getSourceId !== 'function') {
      console.error('shimGetDisplayMedia: getSourceId argument is not ' +
          'a function');
      return;
    }
    window.navigator.mediaDevices.getDisplayMedia = function(constraints) {
      return getSourceId(constraints)
        .then(function(sourceId) {
          var widthSpecified = constraints.video && constraints.video.width;
          var heightSpecified = constraints.video && constraints.video.height;
          var frameRateSpecified = constraints.video &&
            constraints.video.frameRate;
          constraints.video = {
            mandatory: {
              chromeMediaSource: 'desktop',
              chromeMediaSourceId: sourceId,
              maxFrameRate: frameRateSpecified || 3
            }
          };
          if (widthSpecified) {
            constraints.video.mandatory.maxWidth = widthSpecified;
          }
          if (heightSpecified) {
            constraints.video.mandatory.maxHeight = heightSpecified;
          }
          return window.navigator.mediaDevices.getUserMedia(constraints);
        });
    };
    window.navigator.getDisplayMedia = function(constraints) {
      utils.deprecated('navigator.getDisplayMedia',
          'navigator.mediaDevices.getDisplayMedia');
      return window.navigator.mediaDevices.getDisplayMedia(constraints);
    };
  }
};

},{"../utils.js":149,"./getusermedia":141}],141:[function(require,module,exports){
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */
'use strict';
var utils = require('../utils.js');
var logging = utils.log;

// Expose public methods.
module.exports = function(window) {
  var browserDetails = utils.detectBrowser(window);
  var navigator = window && window.navigator;

  var constraintsToChrome_ = function(c) {
    if (typeof c !== 'object' || c.mandatory || c.optional) {
      return c;
    }
    var cc = {};
    Object.keys(c).forEach(function(key) {
      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {
        return;
      }
      var r = (typeof c[key] === 'object') ? c[key] : {ideal: c[key]};
      if (r.exact !== undefined && typeof r.exact === 'number') {
        r.min = r.max = r.exact;
      }
      var oldname_ = function(prefix, name) {
        if (prefix) {
          return prefix + name.charAt(0).toUpperCase() + name.slice(1);
        }
        return (name === 'deviceId') ? 'sourceId' : name;
      };
      if (r.ideal !== undefined) {
        cc.optional = cc.optional || [];
        var oc = {};
        if (typeof r.ideal === 'number') {
          oc[oldname_('min', key)] = r.ideal;
          cc.optional.push(oc);
          oc = {};
          oc[oldname_('max', key)] = r.ideal;
          cc.optional.push(oc);
        } else {
          oc[oldname_('', key)] = r.ideal;
          cc.optional.push(oc);
        }
      }
      if (r.exact !== undefined && typeof r.exact !== 'number') {
        cc.mandatory = cc.mandatory || {};
        cc.mandatory[oldname_('', key)] = r.exact;
      } else {
        ['min', 'max'].forEach(function(mix) {
          if (r[mix] !== undefined) {
            cc.mandatory = cc.mandatory || {};
            cc.mandatory[oldname_(mix, key)] = r[mix];
          }
        });
      }
    });
    if (c.advanced) {
      cc.optional = (cc.optional || []).concat(c.advanced);
    }
    return cc;
  };

  var shimConstraints_ = function(constraints, func) {
    if (browserDetails.version >= 61) {
      return func(constraints);
    }
    constraints = JSON.parse(JSON.stringify(constraints));
    if (constraints && typeof constraints.audio === 'object') {
      var remap = function(obj, a, b) {
        if (a in obj && !(b in obj)) {
          obj[b] = obj[a];
          delete obj[a];
        }
      };
      constraints = JSON.parse(JSON.stringify(constraints));
      remap(constraints.audio, 'autoGainControl', 'googAutoGainControl');
      remap(constraints.audio, 'noiseSuppression', 'googNoiseSuppression');
      constraints.audio = constraintsToChrome_(constraints.audio);
    }
    if (constraints && typeof constraints.video === 'object') {
      // Shim facingMode for mobile & surface pro.
      var face = constraints.video.facingMode;
      face = face && ((typeof face === 'object') ? face : {ideal: face});
      var getSupportedFacingModeLies = browserDetails.version < 66;

      if ((face && (face.exact === 'user' || face.exact === 'environment' ||
                    face.ideal === 'user' || face.ideal === 'environment')) &&
          !(navigator.mediaDevices.getSupportedConstraints &&
            navigator.mediaDevices.getSupportedConstraints().facingMode &&
            !getSupportedFacingModeLies)) {
        delete constraints.video.facingMode;
        var matches;
        if (face.exact === 'environment' || face.ideal === 'environment') {
          matches = ['back', 'rear'];
        } else if (face.exact === 'user' || face.ideal === 'user') {
          matches = ['front'];
        }
        if (matches) {
          // Look for matches in label, or use last cam for back (typical).
          return navigator.mediaDevices.enumerateDevices()
          .then(function(devices) {
            devices = devices.filter(function(d) {
              return d.kind === 'videoinput';
            });
            var dev = devices.find(function(d) {
              return matches.some(function(match) {
                return d.label.toLowerCase().indexOf(match) !== -1;
              });
            });
            if (!dev && devices.length && matches.indexOf('back') !== -1) {
              dev = devices[devices.length - 1]; // more likely the back cam
            }
            if (dev) {
              constraints.video.deviceId = face.exact ? {exact: dev.deviceId} :
                                                        {ideal: dev.deviceId};
            }
            constraints.video = constraintsToChrome_(constraints.video);
            logging('chrome: ' + JSON.stringify(constraints));
            return func(constraints);
          });
        }
      }
      constraints.video = constraintsToChrome_(constraints.video);
    }
    logging('chrome: ' + JSON.stringify(constraints));
    return func(constraints);
  };

  var shimError_ = function(e) {
    if (browserDetails.version >= 64) {
      return e;
    }
    return {
      name: {
        PermissionDeniedError: 'NotAllowedError',
        PermissionDismissedError: 'NotAllowedError',
        InvalidStateError: 'NotAllowedError',
        DevicesNotFoundError: 'NotFoundError',
        ConstraintNotSatisfiedError: 'OverconstrainedError',
        TrackStartError: 'NotReadableError',
        MediaDeviceFailedDueToShutdown: 'NotAllowedError',
        MediaDeviceKillSwitchOn: 'NotAllowedError',
        TabCaptureError: 'AbortError',
        ScreenCaptureError: 'AbortError',
        DeviceCaptureError: 'AbortError'
      }[e.name] || e.name,
      message: e.message,
      constraint: e.constraint || e.constraintName,
      toString: function() {
        return this.name + (this.message && ': ') + this.message;
      }
    };
  };

  var getUserMedia_ = function(constraints, onSuccess, onError) {
    shimConstraints_(constraints, function(c) {
      navigator.webkitGetUserMedia(c, onSuccess, function(e) {
        if (onError) {
          onError(shimError_(e));
        }
      });
    });
  };

  navigator.getUserMedia = getUserMedia_;

  // Returns the result of getUserMedia as a Promise.
  var getUserMediaPromise_ = function(constraints) {
    return new Promise(function(resolve, reject) {
      navigator.getUserMedia(constraints, resolve, reject);
    });
  };

  if (!navigator.mediaDevices) {
    navigator.mediaDevices = {
      getUserMedia: getUserMediaPromise_,
      enumerateDevices: function() {
        return new Promise(function(resolve) {
          var kinds = {audio: 'audioinput', video: 'videoinput'};
          return window.MediaStreamTrack.getSources(function(devices) {
            resolve(devices.map(function(device) {
              return {label: device.label,
                kind: kinds[device.kind],
                deviceId: device.id,
                groupId: ''};
            }));
          });
        });
      },
      getSupportedConstraints: function() {
        return {
          deviceId: true, echoCancellation: true, facingMode: true,
          frameRate: true, height: true, width: true
        };
      }
    };
  }

  // A shim for getUserMedia method on the mediaDevices object.
  // TODO(KaptenJansson) remove once implemented in Chrome stable.
  if (!navigator.mediaDevices.getUserMedia) {
    navigator.mediaDevices.getUserMedia = function(constraints) {
      return getUserMediaPromise_(constraints);
    };
  } else {
    // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia
    // function which returns a Promise, it does not accept spec-style
    // constraints.
    var origGetUserMedia = navigator.mediaDevices.getUserMedia.
        bind(navigator.mediaDevices);
    navigator.mediaDevices.getUserMedia = function(cs) {
      return shimConstraints_(cs, function(c) {
        return origGetUserMedia(c).then(function(stream) {
          if (c.audio && !stream.getAudioTracks().length ||
              c.video && !stream.getVideoTracks().length) {
            stream.getTracks().forEach(function(track) {
              track.stop();
            });
            throw new DOMException('', 'NotFoundError');
          }
          return stream;
        }, function(e) {
          return Promise.reject(shimError_(e));
        });
      });
    };
  }

  // Dummy devicechange event methods.
  // TODO(KaptenJansson) remove once implemented in Chrome stable.
  if (typeof navigator.mediaDevices.addEventListener === 'undefined') {
    navigator.mediaDevices.addEventListener = function() {
      logging('Dummy mediaDevices.addEventListener called.');
    };
  }
  if (typeof navigator.mediaDevices.removeEventListener === 'undefined') {
    navigator.mediaDevices.removeEventListener = function() {
      logging('Dummy mediaDevices.removeEventListener called.');
    };
  }
};

},{"../utils.js":149}],142:[function(require,module,exports){
/*
 *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */
'use strict';

var SDPUtils = require('sdp');
var utils = require('./utils');

module.exports = {
  shimRTCIceCandidate: function(window) {
    // foundation is arbitrarily chosen as an indicator for full support for
    // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface
    if (!window.RTCIceCandidate || (window.RTCIceCandidate && 'foundation' in
        window.RTCIceCandidate.prototype)) {
      return;
    }

    var NativeRTCIceCandidate = window.RTCIceCandidate;
    window.RTCIceCandidate = function(args) {
      // Remove the a= which shouldn't be part of the candidate string.
      if (typeof args === 'object' && args.candidate &&
          args.candidate.indexOf('a=') === 0) {
        args = JSON.parse(JSON.stringify(args));
        args.candidate = args.candidate.substr(2);
      }

      if (args.candidate && args.candidate.length) {
        // Augment the native candidate with the parsed fields.
        var nativeCandidate = new NativeRTCIceCandidate(args);
        var parsedCandidate = SDPUtils.parseCandidate(args.candidate);
        var augmentedCandidate = Object.assign(nativeCandidate,
            parsedCandidate);

        // Add a serializer that does not serialize the extra attributes.
        augmentedCandidate.toJSON = function() {
          return {
            candidate: augmentedCandidate.candidate,
            sdpMid: augmentedCandidate.sdpMid,
            sdpMLineIndex: augmentedCandidate.sdpMLineIndex,
            usernameFragment: augmentedCandidate.usernameFragment,
          };
        };
        return augmentedCandidate;
      }
      return new NativeRTCIceCandidate(args);
    };
    window.RTCIceCandidate.prototype = NativeRTCIceCandidate.prototype;

    // Hook up the augmented candidate in onicecandidate and
    // addEventListener('icecandidate', ...)
    utils.wrapPeerConnectionEvent(window, 'icecandidate', function(e) {
      if (e.candidate) {
        Object.defineProperty(e, 'candidate', {
          value: new window.RTCIceCandidate(e.candidate),
          writable: 'false'
        });
      }
      return e;
    });
  },

  // shimCreateObjectURL must be called before shimSourceObject to avoid loop.

  shimCreateObjectURL: function(window) {
    var URL = window && window.URL;

    if (!(typeof window === 'object' && window.HTMLMediaElement &&
          'srcObject' in window.HTMLMediaElement.prototype &&
        URL.createObjectURL && URL.revokeObjectURL)) {
      // Only shim CreateObjectURL using srcObject if srcObject exists.
      return undefined;
    }

    var nativeCreateObjectURL = URL.createObjectURL.bind(URL);
    var nativeRevokeObjectURL = URL.revokeObjectURL.bind(URL);
    var streams = new Map(), newId = 0;

    URL.createObjectURL = function(stream) {
      if ('getTracks' in stream) {
        var url = 'polyblob:' + (++newId);
        streams.set(url, stream);
        utils.deprecated('URL.createObjectURL(stream)',
            'elem.srcObject = stream');
        return url;
      }
      return nativeCreateObjectURL(stream);
    };
    URL.revokeObjectURL = function(url) {
      nativeRevokeObjectURL(url);
      streams.delete(url);
    };

    var dsc = Object.getOwnPropertyDescriptor(window.HTMLMediaElement.prototype,
                                              'src');
    Object.defineProperty(window.HTMLMediaElement.prototype, 'src', {
      get: function() {
        return dsc.get.apply(this);
      },
      set: function(url) {
        this.srcObject = streams.get(url) || null;
        return dsc.set.apply(this, [url]);
      }
    });

    var nativeSetAttribute = window.HTMLMediaElement.prototype.setAttribute;
    window.HTMLMediaElement.prototype.setAttribute = function() {
      if (arguments.length === 2 &&
          ('' + arguments[0]).toLowerCase() === 'src') {
        this.srcObject = streams.get(arguments[1]) || null;
      }
      return nativeSetAttribute.apply(this, arguments);
    };
  },

  shimMaxMessageSize: function(window) {
    if (window.RTCSctpTransport || !window.RTCPeerConnection) {
      return;
    }
    var browserDetails = utils.detectBrowser(window);

    if (!('sctp' in window.RTCPeerConnection.prototype)) {
      Object.defineProperty(window.RTCPeerConnection.prototype, 'sctp', {
        get: function() {
          return typeof this._sctp === 'undefined' ? null : this._sctp;
        }
      });
    }

    var sctpInDescription = function(description) {
      var sections = SDPUtils.splitSections(description.sdp);
      sections.shift();
      return sections.some(function(mediaSection) {
        var mLine = SDPUtils.parseMLine(mediaSection);
        return mLine && mLine.kind === 'application'
            && mLine.protocol.indexOf('SCTP') !== -1;
      });
    };

    var getRemoteFirefoxVersion = function(description) {
      // TODO: Is there a better solution for detecting Firefox?
      var match = description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\d+)/);
      if (match === null || match.length < 2) {
        return -1;
      }
      var version = parseInt(match[1], 10);
      // Test for NaN (yes, this is ugly)
      return version !== version ? -1 : version;
    };

    var getCanSendMaxMessageSize = function(remoteIsFirefox) {
      // Every implementation we know can send at least 64 KiB.
      // Note: Although Chrome is technically able to send up to 256 KiB, the
      //       data does not reach the other peer reliably.
      //       See: https://bugs.chromium.org/p/webrtc/issues/detail?id=8419
      var canSendMaxMessageSize = 65536;
      if (browserDetails.browser === 'firefox') {
        if (browserDetails.version < 57) {
          if (remoteIsFirefox === -1) {
            // FF < 57 will send in 16 KiB chunks using the deprecated PPID
            // fragmentation.
            canSendMaxMessageSize = 16384;
          } else {
            // However, other FF (and RAWRTC) can reassemble PPID-fragmented
            // messages. Thus, supporting ~2 GiB when sending.
            canSendMaxMessageSize = 2147483637;
          }
        } else if (browserDetails.version < 60) {
          // Currently, all FF >= 57 will reset the remote maximum message size
          // to the default value when a data channel is created at a later
          // stage. :(
          // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831
          canSendMaxMessageSize =
            browserDetails.version === 57 ? 65535 : 65536;
        } else {
          // FF >= 60 supports sending ~2 GiB
          canSendMaxMessageSize = 2147483637;
        }
      }
      return canSendMaxMessageSize;
    };

    var getMaxMessageSize = function(description, remoteIsFirefox) {
      // Note: 65536 bytes is the default value from the SDP spec. Also,
      //       every implementation we know supports receiving 65536 bytes.
      var maxMessageSize = 65536;

      // FF 57 has a slightly incorrect default remote max message size, so
      // we need to adjust it here to avoid a failure when sending.
      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1425697
      if (browserDetails.browser === 'firefox'
           && browserDetails.version === 57) {
        maxMessageSize = 65535;
      }

      var match = SDPUtils.matchPrefix(description.sdp, 'a=max-message-size:');
      if (match.length > 0) {
        maxMessageSize = parseInt(match[0].substr(19), 10);
      } else if (browserDetails.browser === 'firefox' &&
                  remoteIsFirefox !== -1) {
        // If the maximum message size is not present in the remote SDP and
        // both local and remote are Firefox, the remote peer can receive
        // ~2 GiB.
        maxMessageSize = 2147483637;
      }
      return maxMessageSize;
    };

    var origSetRemoteDescription =
        window.RTCPeerConnection.prototype.setRemoteDescription;
    window.RTCPeerConnection.prototype.setRemoteDescription = function() {
      var pc = this;
      pc._sctp = null;

      if (sctpInDescription(arguments[0])) {
        // Check if the remote is FF.
        var isFirefox = getRemoteFirefoxVersion(arguments[0]);

        // Get the maximum message size the local peer is capable of sending
        var canSendMMS = getCanSendMaxMessageSize(isFirefox);

        // Get the maximum message size of the remote peer.
        var remoteMMS = getMaxMessageSize(arguments[0], isFirefox);

        // Determine final maximum message size
        var maxMessageSize;
        if (canSendMMS === 0 && remoteMMS === 0) {
          maxMessageSize = Number.POSITIVE_INFINITY;
        } else if (canSendMMS === 0 || remoteMMS === 0) {
          maxMessageSize = Math.max(canSendMMS, remoteMMS);
        } else {
          maxMessageSize = Math.min(canSendMMS, remoteMMS);
        }

        // Create a dummy RTCSctpTransport object and the 'maxMessageSize'
        // attribute.
        var sctp = {};
        Object.defineProperty(sctp, 'maxMessageSize', {
          get: function() {
            return maxMessageSize;
          }
        });
        pc._sctp = sctp;
      }

      return origSetRemoteDescription.apply(pc, arguments);
    };
  },

  shimSendThrowTypeError: function(window) {
    if (!(window.RTCPeerConnection &&
        'createDataChannel' in window.RTCPeerConnection.prototype)) {
      return;
    }

    // Note: Although Firefox >= 57 has a native implementation, the maximum
    //       message size can be reset for all data channels at a later stage.
    //       See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831

    function wrapDcSend(dc, pc) {
      var origDataChannelSend = dc.send;
      dc.send = function() {
        var data = arguments[0];
        var length = data.length || data.size || data.byteLength;
        if (dc.readyState === 'open' &&
            pc.sctp && length > pc.sctp.maxMessageSize) {
          throw new TypeError('Message too large (can send a maximum of ' +
            pc.sctp.maxMessageSize + ' bytes)');
        }
        return origDataChannelSend.apply(dc, arguments);
      };
    }
    var origCreateDataChannel =
      window.RTCPeerConnection.prototype.createDataChannel;
    window.RTCPeerConnection.prototype.createDataChannel = function() {
      var pc = this;
      var dataChannel = origCreateDataChannel.apply(pc, arguments);
      wrapDcSend(dataChannel, pc);
      return dataChannel;
    };
    utils.wrapPeerConnectionEvent(window, 'datachannel', function(e) {
      wrapDcSend(e.channel, e.target);
      return e;
    });
  }
};

},{"./utils":149,"sdp":133}],143:[function(require,module,exports){
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */
'use strict';

var utils = require('../utils');
var filterIceServers = require('./filtericeservers');
var shimRTCPeerConnection = require('rtcpeerconnection-shim');

module.exports = {
  shimGetUserMedia: require('./getusermedia'),
  shimPeerConnection: function(window) {
    var browserDetails = utils.detectBrowser(window);

    if (window.RTCIceGatherer) {
      if (!window.RTCIceCandidate) {
        window.RTCIceCandidate = function(args) {
          return args;
        };
      }
      if (!window.RTCSessionDescription) {
        window.RTCSessionDescription = function(args) {
          return args;
        };
      }
      // this adds an additional event listener to MediaStrackTrack that signals
      // when a tracks enabled property was changed. Workaround for a bug in
      // addStream, see below. No longer required in 15025+
      if (browserDetails.version < 15025) {
        var origMSTEnabled = Object.getOwnPropertyDescriptor(
            window.MediaStreamTrack.prototype, 'enabled');
        Object.defineProperty(window.MediaStreamTrack.prototype, 'enabled', {
          set: function(value) {
            origMSTEnabled.set.call(this, value);
            var ev = new Event('enabled');
            ev.enabled = value;
            this.dispatchEvent(ev);
          }
        });
      }
    }

    // ORTC defines the DTMF sender a bit different.
    // https://github.com/w3c/ortc/issues/714
    if (window.RTCRtpSender && !('dtmf' in window.RTCRtpSender.prototype)) {
      Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {
        get: function() {
          if (this._dtmf === undefined) {
            if (this.track.kind === 'audio') {
              this._dtmf = new window.RTCDtmfSender(this);
            } else if (this.track.kind === 'video') {
              this._dtmf = null;
            }
          }
          return this._dtmf;
        }
      });
    }
    // Edge currently only implements the RTCDtmfSender, not the
    // RTCDTMFSender alias. See http://draft.ortc.org/#rtcdtmfsender2*
    if (window.RTCDtmfSender && !window.RTCDTMFSender) {
      window.RTCDTMFSender = window.RTCDtmfSender;
    }

    var RTCPeerConnectionShim = shimRTCPeerConnection(window,
        browserDetails.version);
    window.RTCPeerConnection = function(config) {
      if (config && config.iceServers) {
        config.iceServers = filterIceServers(config.iceServers);
      }
      return new RTCPeerConnectionShim(config);
    };
    window.RTCPeerConnection.prototype = RTCPeerConnectionShim.prototype;
  },
  shimReplaceTrack: function(window) {
    // ORTC has replaceTrack -- https://github.com/w3c/ortc/issues/614
    if (window.RTCRtpSender &&
        !('replaceTrack' in window.RTCRtpSender.prototype)) {
      window.RTCRtpSender.prototype.replaceTrack =
          window.RTCRtpSender.prototype.setTrack;
    }
  },
  shimGetDisplayMedia: function(window, preferredMediaSource) {
    if (!('getDisplayMedia' in window.navigator) ||
        !window.navigator.mediaDevices ||
        'getDisplayMedia' in window.navigator.mediaDevices) {
      return;
    }
    var origGetDisplayMedia = window.navigator.getDisplayMedia;
    window.navigator.mediaDevices.getDisplayMedia = function(constraints) {
      return origGetDisplayMedia.call(window.navigator, constraints);
    };
    window.navigator.getDisplayMedia = function(constraints) {
      utils.deprecated('navigator.getDisplayMedia',
          'navigator.mediaDevices.getDisplayMedia');
      return origGetDisplayMedia.call(window.navigator, constraints);
    };
  }
};

},{"../utils":149,"./filtericeservers":144,"./getusermedia":145,"rtcpeerconnection-shim":132}],144:[function(require,module,exports){
/*
 *  Copyright (c) 2018 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */
'use strict';

var utils = require('../utils');
// Edge does not like
// 1) stun: filtered after 14393 unless ?transport=udp is present
// 2) turn: that does not have all of turn:host:port?transport=udp
// 3) turn: with ipv6 addresses
// 4) turn: occurring muliple times
module.exports = function(iceServers, edgeVersion) {
  var hasTurn = false;
  iceServers = JSON.parse(JSON.stringify(iceServers));
  return iceServers.filter(function(server) {
    if (server && (server.urls || server.url)) {
      var urls = server.urls || server.url;
      if (server.url && !server.urls) {
        utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');
      }
      var isString = typeof urls === 'string';
      if (isString) {
        urls = [urls];
      }
      urls = urls.filter(function(url) {
        var validTurn = url.indexOf('turn:') === 0 &&
            url.indexOf('transport=udp') !== -1 &&
            url.indexOf('turn:[') === -1 &&
            !hasTurn;

        if (validTurn) {
          hasTurn = true;
          return true;
        }
        return url.indexOf('stun:') === 0 && edgeVersion >= 14393 &&
            url.indexOf('?transport=udp') === -1;
      });

      delete server.url;
      server.urls = isString ? urls[0] : urls;
      return !!urls.length;
    }
  });
};

},{"../utils":149}],145:[function(require,module,exports){
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */
'use strict';

// Expose public methods.
module.exports = function(window) {
  var navigator = window && window.navigator;

  var shimError_ = function(e) {
    return {
      name: {PermissionDeniedError: 'NotAllowedError'}[e.name] || e.name,
      message: e.message,
      constraint: e.constraint,
      toString: function() {
        return this.name;
      }
    };
  };

  // getUserMedia error shim.
  var origGetUserMedia = navigator.mediaDevices.getUserMedia.
      bind(navigator.mediaDevices);
  navigator.mediaDevices.getUserMedia = function(c) {
    return origGetUserMedia(c).catch(function(e) {
      return Promise.reject(shimError_(e));
    });
  };
};

},{}],146:[function(require,module,exports){
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */
'use strict';

var utils = require('../utils');

module.exports = {
  shimGetUserMedia: require('./getusermedia'),
  shimOnTrack: function(window) {
    if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in
        window.RTCPeerConnection.prototype)) {
      Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {
        get: function() {
          return this._ontrack;
        },
        set: function(f) {
          if (this._ontrack) {
            this.removeEventListener('track', this._ontrack);
            this.removeEventListener('addstream', this._ontrackpoly);
          }
          this.addEventListener('track', this._ontrack = f);
          this.addEventListener('addstream', this._ontrackpoly = function(e) {
            e.stream.getTracks().forEach(function(track) {
              var event = new Event('track');
              event.track = track;
              event.receiver = {track: track};
              event.transceiver = {receiver: event.receiver};
              event.streams = [e.stream];
              this.dispatchEvent(event);
            }.bind(this));
          }.bind(this));
        },
        enumerable: true,
        configurable: true
      });
    }
    if (typeof window === 'object' && window.RTCTrackEvent &&
        ('receiver' in window.RTCTrackEvent.prototype) &&
        !('transceiver' in window.RTCTrackEvent.prototype)) {
      Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {
        get: function() {
          return {receiver: this.receiver};
        }
      });
    }
  },

  shimSourceObject: function(window) {
    // Firefox has supported mozSrcObject since FF22, unprefixed in 42.
    if (typeof window === 'object') {
      if (window.HTMLMediaElement &&
        !('srcObject' in window.HTMLMediaElement.prototype)) {
        // Shim the srcObject property, once, when HTMLMediaElement is found.
        Object.defineProperty(window.HTMLMediaElement.prototype, 'srcObject', {
          get: function() {
            return this.mozSrcObject;
          },
          set: function(stream) {
            this.mozSrcObject = stream;
          }
        });
      }
    }
  },

  shimPeerConnection: function(window) {
    var browserDetails = utils.detectBrowser(window);

    if (typeof window !== 'object' || !(window.RTCPeerConnection ||
        window.mozRTCPeerConnection)) {
      return; // probably media.peerconnection.enabled=false in about:config
    }
    // The RTCPeerConnection object.
    if (!window.RTCPeerConnection) {
      window.RTCPeerConnection = function(pcConfig, pcConstraints) {
        if (browserDetails.version < 38) {
          // .urls is not supported in FF < 38.
          // create RTCIceServers with a single url.
          if (pcConfig && pcConfig.iceServers) {
            var newIceServers = [];
            for (var i = 0; i < pcConfig.iceServers.length; i++) {
              var server = pcConfig.iceServers[i];
              if (server.hasOwnProperty('urls')) {
                for (var j = 0; j < server.urls.length; j++) {
                  var newServer = {
                    url: server.urls[j]
                  };
                  if (server.urls[j].indexOf('turn') === 0) {
                    newServer.username = server.username;
                    newServer.credential = server.credential;
                  }
                  newIceServers.push(newServer);
                }
              } else {
                newIceServers.push(pcConfig.iceServers[i]);
              }
            }
            pcConfig.iceServers = newIceServers;
          }
        }
        return new window.mozRTCPeerConnection(pcConfig, pcConstraints);
      };
      window.RTCPeerConnection.prototype =
          window.mozRTCPeerConnection.prototype;

      // wrap static methods. Currently just generateCertificate.
      if (window.mozRTCPeerConnection.generateCertificate) {
        Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {
          get: function() {
            return window.mozRTCPeerConnection.generateCertificate;
          }
        });
      }

      window.RTCSessionDescription = window.mozRTCSessionDescription;
      window.RTCIceCandidate = window.mozRTCIceCandidate;
    }

    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.
    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']
        .forEach(function(method) {
          var nativeMethod = window.RTCPeerConnection.prototype[method];
          window.RTCPeerConnection.prototype[method] = function() {
            arguments[0] = new ((method === 'addIceCandidate') ?
                window.RTCIceCandidate :
                window.RTCSessionDescription)(arguments[0]);
            return nativeMethod.apply(this, arguments);
          };
        });

    // support for addIceCandidate(null or undefined)
    var nativeAddIceCandidate =
        window.RTCPeerConnection.prototype.addIceCandidate;
    window.RTCPeerConnection.prototype.addIceCandidate = function() {
      if (!arguments[0]) {
        if (arguments[1]) {
          arguments[1].apply(null);
        }
        return Promise.resolve();
      }
      return nativeAddIceCandidate.apply(this, arguments);
    };

    // shim getStats with maplike support
    var makeMapStats = function(stats) {
      var map = new Map();
      Object.keys(stats).forEach(function(key) {
        map.set(key, stats[key]);
        map[key] = stats[key];
      });
      return map;
    };

    var modernStatsTypes = {
      inboundrtp: 'inbound-rtp',
      outboundrtp: 'outbound-rtp',
      candidatepair: 'candidate-pair',
      localcandidate: 'local-candidate',
      remotecandidate: 'remote-candidate'
    };

    var nativeGetStats = window.RTCPeerConnection.prototype.getStats;
    window.RTCPeerConnection.prototype.getStats = function(
      selector,
      onSucc,
      onErr
    ) {
      return nativeGetStats.apply(this, [selector || null])
        .then(function(stats) {
          if (browserDetails.version < 48) {
            stats = makeMapStats(stats);
          }
          if (browserDetails.version < 53 && !onSucc) {
            // Shim only promise getStats with spec-hyphens in type names
            // Leave callback version alone; misc old uses of forEach before Map
            try {
              stats.forEach(function(stat) {
                stat.type = modernStatsTypes[stat.type] || stat.type;
              });
            } catch (e) {
              if (e.name !== 'TypeError') {
                throw e;
              }
              // Avoid TypeError: "type" is read-only, in old versions. 34-43ish
              stats.forEach(function(stat, i) {
                stats.set(i, Object.assign({}, stat, {
                  type: modernStatsTypes[stat.type] || stat.type
                }));
              });
            }
          }
          return stats;
        })
        .then(onSucc, onErr);
    };
  },

  shimSenderGetStats: function(window) {
    if (!(typeof window === 'object' && window.RTCPeerConnection &&
        window.RTCRtpSender)) {
      return;
    }
    if (window.RTCRtpSender && 'getStats' in window.RTCRtpSender.prototype) {
      return;
    }
    var origGetSenders = window.RTCPeerConnection.prototype.getSenders;
    if (origGetSenders) {
      window.RTCPeerConnection.prototype.getSenders = function() {
        var pc = this;
        var senders = origGetSenders.apply(pc, []);
        senders.forEach(function(sender) {
          sender._pc = pc;
        });
        return senders;
      };
    }

    var origAddTrack = window.RTCPeerConnection.prototype.addTrack;
    if (origAddTrack) {
      window.RTCPeerConnection.prototype.addTrack = function() {
        var sender = origAddTrack.apply(this, arguments);
        sender._pc = this;
        return sender;
      };
    }
    window.RTCRtpSender.prototype.getStats = function() {
      return this.track ? this._pc.getStats(this.track) :
          Promise.resolve(new Map());
    };
  },

  shimReceiverGetStats: function(window) {
    if (!(typeof window === 'object' && window.RTCPeerConnection &&
        window.RTCRtpSender)) {
      return;
    }
    if (window.RTCRtpSender && 'getStats' in window.RTCRtpReceiver.prototype) {
      return;
    }
    var origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;
    if (origGetReceivers) {
      window.RTCPeerConnection.prototype.getReceivers = function() {
        var pc = this;
        var receivers = origGetReceivers.apply(pc, []);
        receivers.forEach(function(receiver) {
          receiver._pc = pc;
        });
        return receivers;
      };
    }
    utils.wrapPeerConnectionEvent(window, 'track', function(e) {
      e.receiver._pc = e.srcElement;
      return e;
    });
    window.RTCRtpReceiver.prototype.getStats = function() {
      return this._pc.getStats(this.track);
    };
  },

  shimRemoveStream: function(window) {
    if (!window.RTCPeerConnection ||
        'removeStream' in window.RTCPeerConnection.prototype) {
      return;
    }
    window.RTCPeerConnection.prototype.removeStream = function(stream) {
      var pc = this;
      utils.deprecated('removeStream', 'removeTrack');
      this.getSenders().forEach(function(sender) {
        if (sender.track && stream.getTracks().indexOf(sender.track) !== -1) {
          pc.removeTrack(sender);
        }
      });
    };
  },

  shimRTCDataChannel: function(window) {
    // rename DataChannel to RTCDataChannel (native fix in FF60):
    // https://bugzilla.mozilla.org/show_bug.cgi?id=1173851
    if (window.DataChannel && !window.RTCDataChannel) {
      window.RTCDataChannel = window.DataChannel;
    }
  },

  shimGetDisplayMedia: function(window, preferredMediaSource) {
    if (!window.navigator || !window.navigator.mediaDevices ||
        'getDisplayMedia' in window.navigator.mediaDevices) {
      return;
    }
    window.navigator.mediaDevices.getDisplayMedia = function(constraints) {
      if (!(constraints && constraints.video)) {
        var err = new DOMException('getDisplayMedia without video ' +
            'constraints is undefined');
        err.name = 'NotFoundError';
        // from https://heycam.github.io/webidl/#idl-DOMException-error-names
        err.code = 8;
        return Promise.reject(err);
      }
      if (constraints.video === true) {
        constraints.video = {mediaSource: preferredMediaSource};
      } else {
        constraints.video.mediaSource = preferredMediaSource;
      }
      return window.navigator.mediaDevices.getUserMedia(constraints);
    };
    window.navigator.getDisplayMedia = function(constraints) {
      utils.deprecated('navigator.getDisplayMedia',
          'navigator.mediaDevices.getDisplayMedia');
      return window.navigator.mediaDevices.getDisplayMedia(constraints);
    };
  }
};

},{"../utils":149,"./getusermedia":147}],147:[function(require,module,exports){
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */
'use strict';

var utils = require('../utils');
var logging = utils.log;

// Expose public methods.
module.exports = function(window) {
  var browserDetails = utils.detectBrowser(window);
  var navigator = window && window.navigator;
  var MediaStreamTrack = window && window.MediaStreamTrack;

  var shimError_ = function(e) {
    return {
      name: {
        InternalError: 'NotReadableError',
        NotSupportedError: 'TypeError',
        PermissionDeniedError: 'NotAllowedError',
        SecurityError: 'NotAllowedError'
      }[e.name] || e.name,
      message: {
        'The operation is insecure.': 'The request is not allowed by the ' +
        'user agent or the platform in the current context.'
      }[e.message] || e.message,
      constraint: e.constraint,
      toString: function() {
        return this.name + (this.message && ': ') + this.message;
      }
    };
  };

  // getUserMedia constraints shim.
  var getUserMedia_ = function(constraints, onSuccess, onError) {
    var constraintsToFF37_ = function(c) {
      if (typeof c !== 'object' || c.require) {
        return c;
      }
      var require = [];
      Object.keys(c).forEach(function(key) {
        if (key === 'require' || key === 'advanced' || key === 'mediaSource') {
          return;
        }
        var r = c[key] = (typeof c[key] === 'object') ?
            c[key] : {ideal: c[key]};
        if (r.min !== undefined ||
            r.max !== undefined || r.exact !== undefined) {
          require.push(key);
        }
        if (r.exact !== undefined) {
          if (typeof r.exact === 'number') {
            r. min = r.max = r.exact;
          } else {
            c[key] = r.exact;
          }
          delete r.exact;
        }
        if (r.ideal !== undefined) {
          c.advanced = c.advanced || [];
          var oc = {};
          if (typeof r.ideal === 'number') {
            oc[key] = {min: r.ideal, max: r.ideal};
          } else {
            oc[key] = r.ideal;
          }
          c.advanced.push(oc);
          delete r.ideal;
          if (!Object.keys(r).length) {
            delete c[key];
          }
        }
      });
      if (require.length) {
        c.require = require;
      }
      return c;
    };
    constraints = JSON.parse(JSON.stringify(constraints));
    if (browserDetails.version < 38) {
      logging('spec: ' + JSON.stringify(constraints));
      if (constraints.audio) {
        constraints.audio = constraintsToFF37_(constraints.audio);
      }
      if (constraints.video) {
        constraints.video = constraintsToFF37_(constraints.video);
      }
      logging('ff37: ' + JSON.stringify(constraints));
    }
    return navigator.mozGetUserMedia(constraints, onSuccess, function(e) {
      onError(shimError_(e));
    });
  };

  // Returns the result of getUserMedia as a Promise.
  var getUserMediaPromise_ = function(constraints) {
    return new Promise(function(resolve, reject) {
      getUserMedia_(constraints, resolve, reject);
    });
  };

  // Shim for mediaDevices on older versions.
  if (!navigator.mediaDevices) {
    navigator.mediaDevices = {getUserMedia: getUserMediaPromise_,
      addEventListener: function() { },
      removeEventListener: function() { }
    };
  }
  navigator.mediaDevices.enumerateDevices =
      navigator.mediaDevices.enumerateDevices || function() {
        return new Promise(function(resolve) {
          var infos = [
            {kind: 'audioinput', deviceId: 'default', label: '', groupId: ''},
            {kind: 'videoinput', deviceId: 'default', label: '', groupId: ''}
          ];
          resolve(infos);
        });
      };

  if (browserDetails.version < 41) {
    // Work around http://bugzil.la/1169665
    var orgEnumerateDevices =
        navigator.mediaDevices.enumerateDevices.bind(navigator.mediaDevices);
    navigator.mediaDevices.enumerateDevices = function() {
      return orgEnumerateDevices().then(undefined, function(e) {
        if (e.name === 'NotFoundError') {
          return [];
        }
        throw e;
      });
    };
  }
  if (browserDetails.version < 49) {
    var origGetUserMedia = navigator.mediaDevices.getUserMedia.
        bind(navigator.mediaDevices);
    navigator.mediaDevices.getUserMedia = function(c) {
      return origGetUserMedia(c).then(function(stream) {
        // Work around https://bugzil.la/802326
        if (c.audio && !stream.getAudioTracks().length ||
            c.video && !stream.getVideoTracks().length) {
          stream.getTracks().forEach(function(track) {
            track.stop();
          });
          throw new DOMException('The object can not be found here.',
                                 'NotFoundError');
        }
        return stream;
      }, function(e) {
        return Promise.reject(shimError_(e));
      });
    };
  }
  if (!(browserDetails.version > 55 &&
      'autoGainControl' in navigator.mediaDevices.getSupportedConstraints())) {
    var remap = function(obj, a, b) {
      if (a in obj && !(b in obj)) {
        obj[b] = obj[a];
        delete obj[a];
      }
    };

    var nativeGetUserMedia = navigator.mediaDevices.getUserMedia.
        bind(navigator.mediaDevices);
    navigator.mediaDevices.getUserMedia = function(c) {
      if (typeof c === 'object' && typeof c.audio === 'object') {
        c = JSON.parse(JSON.stringify(c));
        remap(c.audio, 'autoGainControl', 'mozAutoGainControl');
        remap(c.audio, 'noiseSuppression', 'mozNoiseSuppression');
      }
      return nativeGetUserMedia(c);
    };

    if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {
      var nativeGetSettings = MediaStreamTrack.prototype.getSettings;
      MediaStreamTrack.prototype.getSettings = function() {
        var obj = nativeGetSettings.apply(this, arguments);
        remap(obj, 'mozAutoGainControl', 'autoGainControl');
        remap(obj, 'mozNoiseSuppression', 'noiseSuppression');
        return obj;
      };
    }

    if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {
      var nativeApplyConstraints = MediaStreamTrack.prototype.applyConstraints;
      MediaStreamTrack.prototype.applyConstraints = function(c) {
        if (this.kind === 'audio' && typeof c === 'object') {
          c = JSON.parse(JSON.stringify(c));
          remap(c, 'autoGainControl', 'mozAutoGainControl');
          remap(c, 'noiseSuppression', 'mozNoiseSuppression');
        }
        return nativeApplyConstraints.apply(this, [c]);
      };
    }
  }
  navigator.getUserMedia = function(constraints, onSuccess, onError) {
    if (browserDetails.version < 44) {
      return getUserMedia_(constraints, onSuccess, onError);
    }
    // Replace Firefox 44+'s deprecation warning with unprefixed version.
    utils.deprecated('navigator.getUserMedia',
        'navigator.mediaDevices.getUserMedia');
    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);
  };
};

},{"../utils":149}],148:[function(require,module,exports){
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
'use strict';
var utils = require('../utils');

module.exports = {
  shimLocalStreamsAPI: function(window) {
    if (typeof window !== 'object' || !window.RTCPeerConnection) {
      return;
    }
    if (!('getLocalStreams' in window.RTCPeerConnection.prototype)) {
      window.RTCPeerConnection.prototype.getLocalStreams = function() {
        if (!this._localStreams) {
          this._localStreams = [];
        }
        return this._localStreams;
      };
    }
    if (!('getStreamById' in window.RTCPeerConnection.prototype)) {
      window.RTCPeerConnection.prototype.getStreamById = function(id) {
        var result = null;
        if (this._localStreams) {
          this._localStreams.forEach(function(stream) {
            if (stream.id === id) {
              result = stream;
            }
          });
        }
        if (this._remoteStreams) {
          this._remoteStreams.forEach(function(stream) {
            if (stream.id === id) {
              result = stream;
            }
          });
        }
        return result;
      };
    }
    if (!('addStream' in window.RTCPeerConnection.prototype)) {
      var _addTrack = window.RTCPeerConnection.prototype.addTrack;
      window.RTCPeerConnection.prototype.addStream = function(stream) {
        if (!this._localStreams) {
          this._localStreams = [];
        }
        if (this._localStreams.indexOf(stream) === -1) {
          this._localStreams.push(stream);
        }
        var pc = this;
        stream.getTracks().forEach(function(track) {
          _addTrack.call(pc, track, stream);
        });
      };

      window.RTCPeerConnection.prototype.addTrack = function(track, stream) {
        if (stream) {
          if (!this._localStreams) {
            this._localStreams = [stream];
          } else if (this._localStreams.indexOf(stream) === -1) {
            this._localStreams.push(stream);
          }
        }
        return _addTrack.call(this, track, stream);
      };
    }
    if (!('removeStream' in window.RTCPeerConnection.prototype)) {
      window.RTCPeerConnection.prototype.removeStream = function(stream) {
        if (!this._localStreams) {
          this._localStreams = [];
        }
        var index = this._localStreams.indexOf(stream);
        if (index === -1) {
          return;
        }
        this._localStreams.splice(index, 1);
        var pc = this;
        var tracks = stream.getTracks();
        this.getSenders().forEach(function(sender) {
          if (tracks.indexOf(sender.track) !== -1) {
            pc.removeTrack(sender);
          }
        });
      };
    }
  },
  shimRemoteStreamsAPI: function(window) {
    if (typeof window !== 'object' || !window.RTCPeerConnection) {
      return;
    }
    if (!('getRemoteStreams' in window.RTCPeerConnection.prototype)) {
      window.RTCPeerConnection.prototype.getRemoteStreams = function() {
        return this._remoteStreams ? this._remoteStreams : [];
      };
    }
    if (!('onaddstream' in window.RTCPeerConnection.prototype)) {
      Object.defineProperty(window.RTCPeerConnection.prototype, 'onaddstream', {
        get: function() {
          return this._onaddstream;
        },
        set: function(f) {
          if (this._onaddstream) {
            this.removeEventListener('addstream', this._onaddstream);
          }
          this.addEventListener('addstream', this._onaddstream = f);
        }
      });
      var origSetRemoteDescription =
          window.RTCPeerConnection.prototype.setRemoteDescription;
      window.RTCPeerConnection.prototype.setRemoteDescription = function() {
        var pc = this;
        if (!this._onaddstreampoly) {
          this.addEventListener('track', this._onaddstreampoly = function(e) {
            e.streams.forEach(function(stream) {
              if (!pc._remoteStreams) {
                pc._remoteStreams = [];
              }
              if (pc._remoteStreams.indexOf(stream) >= 0) {
                return;
              }
              pc._remoteStreams.push(stream);
              var event = new Event('addstream');
              event.stream = stream;
              pc.dispatchEvent(event);
            });
          });
        }
        return origSetRemoteDescription.apply(pc, arguments);
      };
    }
  },
  shimCallbacksAPI: function(window) {
    if (typeof window !== 'object' || !window.RTCPeerConnection) {
      return;
    }
    var prototype = window.RTCPeerConnection.prototype;
    var createOffer = prototype.createOffer;
    var createAnswer = prototype.createAnswer;
    var setLocalDescription = prototype.setLocalDescription;
    var setRemoteDescription = prototype.setRemoteDescription;
    var addIceCandidate = prototype.addIceCandidate;

    prototype.createOffer = function(successCallback, failureCallback) {
      var options = (arguments.length >= 2) ? arguments[2] : arguments[0];
      var promise = createOffer.apply(this, [options]);
      if (!failureCallback) {
        return promise;
      }
      promise.then(successCallback, failureCallback);
      return Promise.resolve();
    };

    prototype.createAnswer = function(successCallback, failureCallback) {
      var options = (arguments.length >= 2) ? arguments[2] : arguments[0];
      var promise = createAnswer.apply(this, [options]);
      if (!failureCallback) {
        return promise;
      }
      promise.then(successCallback, failureCallback);
      return Promise.resolve();
    };

    var withCallback = function(description, successCallback, failureCallback) {
      var promise = setLocalDescription.apply(this, [description]);
      if (!failureCallback) {
        return promise;
      }
      promise.then(successCallback, failureCallback);
      return Promise.resolve();
    };
    prototype.setLocalDescription = withCallback;

    withCallback = function(description, successCallback, failureCallback) {
      var promise = setRemoteDescription.apply(this, [description]);
      if (!failureCallback) {
        return promise;
      }
      promise.then(successCallback, failureCallback);
      return Promise.resolve();
    };
    prototype.setRemoteDescription = withCallback;

    withCallback = function(candidate, successCallback, failureCallback) {
      var promise = addIceCandidate.apply(this, [candidate]);
      if (!failureCallback) {
        return promise;
      }
      promise.then(successCallback, failureCallback);
      return Promise.resolve();
    };
    prototype.addIceCandidate = withCallback;
  },
  shimGetUserMedia: function(window) {
    var navigator = window && window.navigator;

    if (!navigator.getUserMedia) {
      if (navigator.webkitGetUserMedia) {
        navigator.getUserMedia = navigator.webkitGetUserMedia.bind(navigator);
      } else if (navigator.mediaDevices &&
          navigator.mediaDevices.getUserMedia) {
        navigator.getUserMedia = function(constraints, cb, errcb) {
          navigator.mediaDevices.getUserMedia(constraints)
          .then(cb, errcb);
        }.bind(navigator);
      }
    }
  },
  shimRTCIceServerUrls: function(window) {
    // migrate from non-spec RTCIceServer.url to RTCIceServer.urls
    var OrigPeerConnection = window.RTCPeerConnection;
    window.RTCPeerConnection = function(pcConfig, pcConstraints) {
      if (pcConfig && pcConfig.iceServers) {
        var newIceServers = [];
        for (var i = 0; i < pcConfig.iceServers.length; i++) {
          var server = pcConfig.iceServers[i];
          if (!server.hasOwnProperty('urls') &&
              server.hasOwnProperty('url')) {
            utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');
            server = JSON.parse(JSON.stringify(server));
            server.urls = server.url;
            delete server.url;
            newIceServers.push(server);
          } else {
            newIceServers.push(pcConfig.iceServers[i]);
          }
        }
        pcConfig.iceServers = newIceServers;
      }
      return new OrigPeerConnection(pcConfig, pcConstraints);
    };
    window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;
    // wrap static methods. Currently just generateCertificate.
    if ('generateCertificate' in window.RTCPeerConnection) {
      Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {
        get: function() {
          return OrigPeerConnection.generateCertificate;
        }
      });
    }
  },
  shimTrackEventTransceiver: function(window) {
    // Add event.transceiver member over deprecated event.receiver
    if (typeof window === 'object' && window.RTCPeerConnection &&
        ('receiver' in window.RTCTrackEvent.prototype) &&
        // can't check 'transceiver' in window.RTCTrackEvent.prototype, as it is
        // defined for some reason even when window.RTCTransceiver is not.
        !window.RTCTransceiver) {
      Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {
        get: function() {
          return {receiver: this.receiver};
        }
      });
    }
  },

  shimCreateOfferLegacy: function(window) {
    var origCreateOffer = window.RTCPeerConnection.prototype.createOffer;
    window.RTCPeerConnection.prototype.createOffer = function(offerOptions) {
      var pc = this;
      if (offerOptions) {
        if (typeof offerOptions.offerToReceiveAudio !== 'undefined') {
          // support bit values
          offerOptions.offerToReceiveAudio = !!offerOptions.offerToReceiveAudio;
        }
        var audioTransceiver = pc.getTransceivers().find(function(transceiver) {
          return transceiver.sender.track &&
              transceiver.sender.track.kind === 'audio';
        });
        if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {
          if (audioTransceiver.direction === 'sendrecv') {
            if (audioTransceiver.setDirection) {
              audioTransceiver.setDirection('sendonly');
            } else {
              audioTransceiver.direction = 'sendonly';
            }
          } else if (audioTransceiver.direction === 'recvonly') {
            if (audioTransceiver.setDirection) {
              audioTransceiver.setDirection('inactive');
            } else {
              audioTransceiver.direction = 'inactive';
            }
          }
        } else if (offerOptions.offerToReceiveAudio === true &&
            !audioTransceiver) {
          pc.addTransceiver('audio');
        }


        if (typeof offerOptions.offerToReceiveVideo !== 'undefined') {
          // support bit values
          offerOptions.offerToReceiveVideo = !!offerOptions.offerToReceiveVideo;
        }
        var videoTransceiver = pc.getTransceivers().find(function(transceiver) {
          return transceiver.sender.track &&
              transceiver.sender.track.kind === 'video';
        });
        if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {
          if (videoTransceiver.direction === 'sendrecv') {
            videoTransceiver.setDirection('sendonly');
          } else if (videoTransceiver.direction === 'recvonly') {
            videoTransceiver.setDirection('inactive');
          }
        } else if (offerOptions.offerToReceiveVideo === true &&
            !videoTransceiver) {
          pc.addTransceiver('video');
        }
      }
      return origCreateOffer.apply(pc, arguments);
    };
  }
};

},{"../utils":149}],149:[function(require,module,exports){
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */
'use strict';

var logDisabled_ = true;
var deprecationWarnings_ = true;

/**
 * Extract browser version out of the provided user agent string.
 *
 * @param {!string} uastring userAgent string.
 * @param {!string} expr Regular expression used as match criteria.
 * @param {!number} pos position in the version string to be returned.
 * @return {!number} browser version.
 */
function extractVersion(uastring, expr, pos) {
  var match = uastring.match(expr);
  return match && match.length >= pos && parseInt(match[pos], 10);
}

// Wraps the peerconnection event eventNameToWrap in a function
// which returns the modified event object (or false to prevent
// the event).
function wrapPeerConnectionEvent(window, eventNameToWrap, wrapper) {
  if (!window.RTCPeerConnection) {
    return;
  }
  var proto = window.RTCPeerConnection.prototype;
  var nativeAddEventListener = proto.addEventListener;
  proto.addEventListener = function(nativeEventName, cb) {
    if (nativeEventName !== eventNameToWrap) {
      return nativeAddEventListener.apply(this, arguments);
    }
    var wrappedCallback = function(e) {
      var modifiedEvent = wrapper(e);
      if (modifiedEvent) {
        cb(modifiedEvent);
      }
    };
    this._eventMap = this._eventMap || {};
    this._eventMap[cb] = wrappedCallback;
    return nativeAddEventListener.apply(this, [nativeEventName,
      wrappedCallback]);
  };

  var nativeRemoveEventListener = proto.removeEventListener;
  proto.removeEventListener = function(nativeEventName, cb) {
    if (nativeEventName !== eventNameToWrap || !this._eventMap
        || !this._eventMap[cb]) {
      return nativeRemoveEventListener.apply(this, arguments);
    }
    var unwrappedCb = this._eventMap[cb];
    delete this._eventMap[cb];
    return nativeRemoveEventListener.apply(this, [nativeEventName,
      unwrappedCb]);
  };

  Object.defineProperty(proto, 'on' + eventNameToWrap, {
    get: function() {
      return this['_on' + eventNameToWrap];
    },
    set: function(cb) {
      if (this['_on' + eventNameToWrap]) {
        this.removeEventListener(eventNameToWrap,
            this['_on' + eventNameToWrap]);
        delete this['_on' + eventNameToWrap];
      }
      if (cb) {
        this.addEventListener(eventNameToWrap,
            this['_on' + eventNameToWrap] = cb);
      }
    },
    enumerable: true,
    configurable: true
  });
}

// Utility methods.
module.exports = {
  extractVersion: extractVersion,
  wrapPeerConnectionEvent: wrapPeerConnectionEvent,
  disableLog: function(bool) {
    if (typeof bool !== 'boolean') {
      return new Error('Argument type: ' + typeof bool +
          '. Please use a boolean.');
    }
    logDisabled_ = bool;
    return (bool) ? 'adapter.js logging disabled' :
        'adapter.js logging enabled';
  },

  /**
   * Disable or enable deprecation warnings
   * @param {!boolean} bool set to true to disable warnings.
   */
  disableWarnings: function(bool) {
    if (typeof bool !== 'boolean') {
      return new Error('Argument type: ' + typeof bool +
          '. Please use a boolean.');
    }
    deprecationWarnings_ = !bool;
    return 'adapter.js deprecation warnings ' + (bool ? 'disabled' : 'enabled');
  },

  log: function() {
    if (typeof window === 'object') {
      if (logDisabled_) {
        return;
      }
      if (typeof console !== 'undefined' && typeof console.log === 'function') {
        console.log.apply(console, arguments);
      }
    }
  },

  /**
   * Shows a deprecation warning suggesting the modern and spec-compatible API.
   */
  deprecated: function(oldMethod, newMethod) {
    if (!deprecationWarnings_) {
      return;
    }
    console.warn(oldMethod + ' is deprecated, please use ' + newMethod +
        ' instead.');
  },

  /**
   * Browser detector.
   *
   * @return {object} result containing browser and version
   *     properties.
   */
  detectBrowser: function(window) {
    var navigator = window && window.navigator;

    // Returned result object.
    var result = {};
    result.browser = null;
    result.version = null;

    // Fail early if it's not a browser
    if (typeof window === 'undefined' || !window.navigator) {
      result.browser = 'Not a browser.';
      return result;
    }

    if (navigator.mozGetUserMedia) { // Firefox.
      result.browser = 'firefox';
      result.version = extractVersion(navigator.userAgent,
          /Firefox\/(\d+)\./, 1);
    } else if (navigator.webkitGetUserMedia) {
      // Chrome, Chromium, Webview, Opera.
      // Version matches Chrome/WebRTC version.
      result.browser = 'chrome';
      result.version = extractVersion(navigator.userAgent,
          /Chrom(e|ium)\/(\d+)\./, 2);
    } else if (navigator.mediaDevices &&
        navigator.userAgent.match(/Edge\/(\d+).(\d+)$/)) { // Edge.
      result.browser = 'edge';
      result.version = extractVersion(navigator.userAgent,
          /Edge\/(\d+).(\d+)$/, 2);
    } else if (window.RTCPeerConnection &&
        navigator.userAgent.match(/AppleWebKit\/(\d+)\./)) { // Safari.
      result.browser = 'safari';
      result.version = extractVersion(navigator.userAgent,
          /AppleWebKit\/(\d+)\./, 1);
    } else { // Default fallthrough: not supported.
      result.browser = 'Not a supported browser.';
      return result;
    }

    return result;
  }
};

},{}],150:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var UNDEFINED = exports.UNDEFINED = 'undefined';
var DCV_STRATEGY = exports.DCV_STRATEGY = 'DCVStrategy';
var AUDIO = exports.AUDIO = 'audio';
var ANSWER = exports.ANSWER = 'answer';
var CHROME = exports.CHROME = 'chrome';

},{}],151:[function(require,module,exports){
(function (global){(function (){
'use strict';

require('webrtc-adapter');

var _rtc_session = require('./rtc_session');

var _rtc_session2 = _interopRequireDefault(_rtc_session);

var _rtc_const = require('./rtc_const');

var _rtc_peer_connection_factory = require('./rtc_peer_connection_factory');

var _rtc_peer_connection_factory2 = _interopRequireDefault(_rtc_peer_connection_factory);

var _v = require('uuid/v4');

var _v2 = _interopRequireDefault(_v);

var _StandardStrategy = require('./strategies/StandardStrategy');

var _StandardStrategy2 = _interopRequireDefault(_StandardStrategy);

var _CitrixVDIStrategy = require('./strategies/CitrixVDIStrategy');

var _CitrixVDIStrategy2 = _interopRequireDefault(_CitrixVDIStrategy);

var _DCVWebRTCStrategy = require('./strategies/DCVWebRTCStrategy');

var _DCVWebRTCStrategy2 = _interopRequireDefault(_DCVWebRTCStrategy);

var _OmnissaVDIStrategy = require('./strategies/OmnissaVDIStrategy');

var _OmnissaVDIStrategy2 = _interopRequireDefault(_OmnissaVDIStrategy);

var _rtc_peer_connection_manager = require('./rtc_peer_connection_manager');

var _rtc_peer_connection_manager2 = _interopRequireDefault(_rtc_peer_connection_manager);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @license
 * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * @license
 * License info for webrtc-adapter module assembled into js bundle:
 *
 * Copyright (c) 2014, The WebRTC project authors. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 * Neither the name of Google nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/**
 * @license
 * License info for sdp module assembled into js bundle:
 *
 * See https://www.npmjs.com/package/sdp
 */
global.connect = global.connect || {};
/**
 * @license
 * License info for uuid module assembled into js bundle:
 *
 * The MIT License (MIT)
 *
 * Copyright (c) 2010-2016 Robert Kieffer and other contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

global.connect.RTCSession = _rtc_session2.default;
global.connect.RTCErrors = _rtc_const.RTC_ERRORS;
global.connect.RtcPeerConnectionFactory = _rtc_peer_connection_factory2.default;
global.connect.RtcPeerConnectionManager = _rtc_peer_connection_manager2.default;
global.connect.uuid = _v2.default;
global.connect.StandardStrategy = _StandardStrategy2.default;
global.connect.CitrixVDIStrategy = _CitrixVDIStrategy2.default;
global.connect.DCVWebRTCStrategy = _DCVWebRTCStrategy2.default;
global.connect.OmnissaVDIStrategy = _OmnissaVDIStrategy2.default;

global.lily = global.lily || {};
global.lily.RTCSession = _rtc_session2.default;
global.lily.RTCErrors = _rtc_const.RTC_ERRORS;

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./rtc_const":153,"./rtc_peer_connection_factory":154,"./rtc_peer_connection_manager":155,"./rtc_session":156,"./strategies/CitrixVDIStrategy":162,"./strategies/DCVWebRTCStrategy":163,"./strategies/OmnissaVDIStrategy":164,"./strategies/StandardStrategy":165,"uuid/v4":137,"webrtc-adapter":138}],152:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SignalingChannelDownError = exports.SignalingChannelDownErrorName = exports.AccessDeniedException = exports.AccessDeniedExceptionName = exports.UnknownSignalingError = exports.UnknownSignalingErrorName = exports.IdempotencyException = exports.IdempotencyExceptionName = exports.BadRequestException = exports.BadRequestExceptionName = exports.InternalServerException = exports.InternalServerExceptionName = exports.RequestTimeoutException = exports.RequestTimeoutExceptionName = exports.CallNotFoundException = exports.CallNotFoundExceptionName = exports.BusyException = exports.BusyExceptionName = exports.UnsupportedOperation = exports.UnsupportedOperationExceptionName = exports.IllegalState = exports.IllegalStateExceptionName = exports.IllegalParameters = exports.IllegalParametersExceptionName = exports.GumTimeout = exports.GumTimeoutExceptionName = exports.Timeout = exports.TimeoutExceptionName = undefined;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */
var TimeoutExceptionName = exports.TimeoutExceptionName = 'Timeout';

var Timeout = exports.Timeout = function (_Error) {
    (0, _inherits3.default)(Timeout, _Error);

    function Timeout(msg) {
        (0, _classCallCheck3.default)(this, Timeout);

        var _this = (0, _possibleConstructorReturn3.default)(this, (Timeout.__proto__ || Object.getPrototypeOf(Timeout)).call(this, msg));

        _this.name = TimeoutExceptionName;
        return _this;
    }

    return Timeout;
}(Error);

var GumTimeoutExceptionName = exports.GumTimeoutExceptionName = 'GumTimeout';

var GumTimeout = exports.GumTimeout = function (_Timeout) {
    (0, _inherits3.default)(GumTimeout, _Timeout);

    function GumTimeout(msg) {
        (0, _classCallCheck3.default)(this, GumTimeout);

        var _this2 = (0, _possibleConstructorReturn3.default)(this, (GumTimeout.__proto__ || Object.getPrototypeOf(GumTimeout)).call(this, msg));

        _this2.name = GumTimeoutExceptionName;
        return _this2;
    }

    return GumTimeout;
}(Timeout);

var IllegalParametersExceptionName = exports.IllegalParametersExceptionName = 'IllegalParameters';

var IllegalParameters = exports.IllegalParameters = function (_Error2) {
    (0, _inherits3.default)(IllegalParameters, _Error2);

    function IllegalParameters(msg) {
        (0, _classCallCheck3.default)(this, IllegalParameters);

        var _this3 = (0, _possibleConstructorReturn3.default)(this, (IllegalParameters.__proto__ || Object.getPrototypeOf(IllegalParameters)).call(this, msg));

        _this3.name = IllegalParametersExceptionName;
        return _this3;
    }

    return IllegalParameters;
}(Error);

var IllegalStateExceptionName = exports.IllegalStateExceptionName = 'IllegalState';

var IllegalState = exports.IllegalState = function (_Error3) {
    (0, _inherits3.default)(IllegalState, _Error3);

    function IllegalState(msg) {
        (0, _classCallCheck3.default)(this, IllegalState);

        var _this4 = (0, _possibleConstructorReturn3.default)(this, (IllegalState.__proto__ || Object.getPrototypeOf(IllegalState)).call(this, msg));

        _this4.name = IllegalStateExceptionName;
        return _this4;
    }

    return IllegalState;
}(Error);

var UnsupportedOperationExceptionName = exports.UnsupportedOperationExceptionName = 'UnsupportedOperation';

var UnsupportedOperation = exports.UnsupportedOperation = function (_Error4) {
    (0, _inherits3.default)(UnsupportedOperation, _Error4);

    function UnsupportedOperation(msg) {
        (0, _classCallCheck3.default)(this, UnsupportedOperation);

        var _this5 = (0, _possibleConstructorReturn3.default)(this, (UnsupportedOperation.__proto__ || Object.getPrototypeOf(UnsupportedOperation)).call(this, msg));

        _this5.name = UnsupportedOperationExceptionName;
        return _this5;
    }

    return UnsupportedOperation;
}(Error);

var BusyExceptionName = exports.BusyExceptionName = 'BusyException';

var BusyException = exports.BusyException = function (_Error5) {
    (0, _inherits3.default)(BusyException, _Error5);

    function BusyException(msg) {
        (0, _classCallCheck3.default)(this, BusyException);

        var _this6 = (0, _possibleConstructorReturn3.default)(this, (BusyException.__proto__ || Object.getPrototypeOf(BusyException)).call(this, msg));

        _this6.name = BusyExceptionName;
        return _this6;
    }

    return BusyException;
}(Error);

var CallNotFoundExceptionName = exports.CallNotFoundExceptionName = 'CallNotFoundException';

var CallNotFoundException = exports.CallNotFoundException = function (_Error6) {
    (0, _inherits3.default)(CallNotFoundException, _Error6);

    function CallNotFoundException(msg) {
        (0, _classCallCheck3.default)(this, CallNotFoundException);

        var _this7 = (0, _possibleConstructorReturn3.default)(this, (CallNotFoundException.__proto__ || Object.getPrototypeOf(CallNotFoundException)).call(this, msg));

        _this7.name = CallNotFoundExceptionName;
        return _this7;
    }

    return CallNotFoundException;
}(Error);

var RequestTimeoutExceptionName = exports.RequestTimeoutExceptionName = 'RequestTimeoutException';

var RequestTimeoutException = exports.RequestTimeoutException = function (_Error7) {
    (0, _inherits3.default)(RequestTimeoutException, _Error7);

    function RequestTimeoutException() {
        (0, _classCallCheck3.default)(this, RequestTimeoutException);

        var _this8 = (0, _possibleConstructorReturn3.default)(this, (RequestTimeoutException.__proto__ || Object.getPrototypeOf(RequestTimeoutException)).call(this));

        _this8.name = RequestTimeoutExceptionName;
        return _this8;
    }

    return RequestTimeoutException;
}(Error);

var InternalServerExceptionName = exports.InternalServerExceptionName = 'InternalServerException';

var InternalServerException = exports.InternalServerException = function (_Error8) {
    (0, _inherits3.default)(InternalServerException, _Error8);

    function InternalServerException() {
        (0, _classCallCheck3.default)(this, InternalServerException);

        var _this9 = (0, _possibleConstructorReturn3.default)(this, (InternalServerException.__proto__ || Object.getPrototypeOf(InternalServerException)).call(this));

        _this9.name = InternalServerExceptionName;
        return _this9;
    }

    return InternalServerException;
}(Error);

var BadRequestExceptionName = exports.BadRequestExceptionName = 'BadRequestException';

var BadRequestException = exports.BadRequestException = function (_Error9) {
    (0, _inherits3.default)(BadRequestException, _Error9);

    function BadRequestException(msg) {
        (0, _classCallCheck3.default)(this, BadRequestException);

        var _this10 = (0, _possibleConstructorReturn3.default)(this, (BadRequestException.__proto__ || Object.getPrototypeOf(BadRequestException)).call(this, msg));

        _this10.name = BadRequestExceptionName;
        return _this10;
    }

    return BadRequestException;
}(Error);

var IdempotencyExceptionName = exports.IdempotencyExceptionName = 'IdempotencyException';

var IdempotencyException = exports.IdempotencyException = function (_Error10) {
    (0, _inherits3.default)(IdempotencyException, _Error10);

    function IdempotencyException() {
        (0, _classCallCheck3.default)(this, IdempotencyException);

        var _this11 = (0, _possibleConstructorReturn3.default)(this, (IdempotencyException.__proto__ || Object.getPrototypeOf(IdempotencyException)).call(this));

        _this11.name = IdempotencyExceptionName;
        return _this11;
    }

    return IdempotencyException;
}(Error);

var UnknownSignalingErrorName = exports.UnknownSignalingErrorName = 'UnknownSignalingError';

var UnknownSignalingError = exports.UnknownSignalingError = function (_Error11) {
    (0, _inherits3.default)(UnknownSignalingError, _Error11);

    function UnknownSignalingError() {
        (0, _classCallCheck3.default)(this, UnknownSignalingError);

        var _this12 = (0, _possibleConstructorReturn3.default)(this, (UnknownSignalingError.__proto__ || Object.getPrototypeOf(UnknownSignalingError)).call(this));

        _this12.name = UnknownSignalingErrorName;
        return _this12;
    }

    return UnknownSignalingError;
}(Error);

var AccessDeniedExceptionName = exports.AccessDeniedExceptionName = 'AccessDeniedException';

var AccessDeniedException = exports.AccessDeniedException = function (_Error12) {
    (0, _inherits3.default)(AccessDeniedException, _Error12);

    function AccessDeniedException() {
        (0, _classCallCheck3.default)(this, AccessDeniedException);

        var _this13 = (0, _possibleConstructorReturn3.default)(this, (AccessDeniedException.__proto__ || Object.getPrototypeOf(AccessDeniedException)).call(this));

        _this13.name = AccessDeniedExceptionName;
        return _this13;
    }

    return AccessDeniedException;
}(Error);

var SignalingChannelDownErrorName = exports.SignalingChannelDownErrorName = 'SignalingChannelDownError';

var SignalingChannelDownError = exports.SignalingChannelDownError = function (_Error13) {
    (0, _inherits3.default)(SignalingChannelDownError, _Error13);

    function SignalingChannelDownError() {
        (0, _classCallCheck3.default)(this, SignalingChannelDownError);

        var _this14 = (0, _possibleConstructorReturn3.default)(this, (SignalingChannelDownError.__proto__ || Object.getPrototypeOf(SignalingChannelDownError)).call(this));

        _this14.name = SignalingChannelDownErrorName;
        return _this14;
    }

    return SignalingChannelDownError;
}(Error);

},{"babel-runtime/helpers/classCallCheck":17,"babel-runtime/helpers/inherits":20,"babel-runtime/helpers/possibleConstructorReturn":21}],153:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
/**
 * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * Timeout waiting for server response to accept/hangup request.
 */
var MAX_ACCEPT_BYE_DELAY_MS = exports.MAX_ACCEPT_BYE_DELAY_MS = 2000;
/**
 * Timeout waiting for server response to invite.
 */
var MAX_INVITE_DELAY_MS = exports.MAX_INVITE_DELAY_MS = 5000;
/**
 *  Default timeout on opening WebSocket connection.
 */
var DEFAULT_CONNECT_TIMEOUT_MS = exports.DEFAULT_CONNECT_TIMEOUT_MS = 10000;
/**
 * Default ice collection timeout in milliseconds.
 */
var DEFAULT_ICE_TIMEOUT_MS = exports.DEFAULT_ICE_TIMEOUT_MS = 8000;
/**
 * Default gum timeout in milliseconds to be enforced during start of a call.
 */
var DEFAULT_GUM_TIMEOUT_MS = exports.DEFAULT_GUM_TIMEOUT_MS = 10000;

var SOFTPHONE_ROUTE_KEY = exports.SOFTPHONE_ROUTE_KEY = "aws/softphone";

var INVITE_METHOD_NAME = exports.INVITE_METHOD_NAME = "invite";
var ACCEPT_METHOD_NAME = exports.ACCEPT_METHOD_NAME = "accept";
var BYE_METHOD_NAME = exports.BYE_METHOD_NAME = "bye";
var PC_BYE_METHOD_NAME = exports.PC_BYE_METHOD_NAME = "PCBye";
var CONNECT_CONTACT_METHOD_NAME = exports.CONNECT_CONTACT_METHOD_NAME = "connectContact";
var DISCONNECT_CONTACT_METHOD_NAME = exports.DISCONNECT_CONTACT_METHOD_NAME = "disconnectContact";

var RTC_PEER_CONNECTION_CONFIG = exports.RTC_PEER_CONNECTION_CONFIG = {
    iceTransportPolicy: 'relay',
    rtcpMuxPolicy: 'require',
    bundlePolicy: 'balanced',
    sdpSemantics: 'unified-plan',
    enableDtlsSrtp: true
};

var RTC_PEER_CONNECTION_OPTIONAL_CONFIG = exports.RTC_PEER_CONNECTION_OPTIONAL_CONFIG = {
    optional: [{
        googDscp: true

    }, {
        DtlsSrtpKeyAgreement: true
    }]
};

var DEFAULT_ICE_CANDIDATE_POOL_SIZE = exports.DEFAULT_ICE_CANDIDATE_POOL_SIZE = 1;

var RTC_PEER_CONNECTION_IDLE_TIMEOUT_MS = exports.RTC_PEER_CONNECTION_IDLE_TIMEOUT_MS = 1 * 60 * 1000;

var NETWORK_CONNECTIVITY_CHECK_INTERVAL_MS = exports.NETWORK_CONNECTIVITY_CHECK_INTERVAL_MS = 250;

var CHROME_SUPPORTED_VERSION = exports.CHROME_SUPPORTED_VERSION = 59;

/**
 * RTC error names.
 */
var RTC_ERRORS = exports.RTC_ERRORS = {
    ICE_COLLECTION_TIMEOUT: 'Ice Collection Timeout',
    USER_BUSY: 'User Busy',
    SIGNALLING_CONNECTION_FAILURE: 'Signalling Connection Failure',
    SIGNALLING_HANDSHAKE_FAILURE: 'Signalling Handshake Failure',
    SET_REMOTE_DESCRIPTION_FAILURE: 'Set Remote Description Failure',
    CREATE_OFFER_FAILURE: 'Create Offer Failure',
    SET_LOCAL_DESCRIPTION_FAILURE: 'Set Local Description Failure',
    INVALID_REMOTE_SDP: 'Invalid Remote SDP',
    NO_REMOTE_ICE_CANDIDATE: 'No Remote ICE Candidate',
    GUM_TIMEOUT_FAILURE: 'GUM Timeout Failure',
    GUM_OTHER_FAILURE: 'GUM Other Failure',
    CALL_NOT_FOUND: 'Call Not Found',
    ACCESS_DENIED: 'Access Denied'
};

var ICE_CONNECTION_STATE = exports.ICE_CONNECTION_STATE = {
    NEW: 'new',
    CHECKING: 'checking',
    CONNECTED: 'connected',
    COMPLETED: 'completed',
    FAILED: 'failed',
    DISCONNECTED: 'disconnected',
    CLOSED: 'closed'
};

var PEER_CONNECTION_STATE = exports.PEER_CONNECTION_STATE = {
    NEW: 'new',
    CONNECTING: 'connecting',
    CONNECTED: 'connected',
    FAILED: 'failed',
    DISCONNECTED: 'disconnected',
    CLOSED: 'closed'
};

var RTC_SESSION_STATE = exports.RTC_SESSION_STATE = {
    TALKING_STATE: 'TalkingState',
    GRAB_LOCAL_MEDIA_STATE: 'GrabLocalMediaState',
    CREATE_OFFER_STATE: 'CreateOfferState',
    SET_LOCAL_SESSION_DESCRIPTION_STATE: 'SetLocalSessionDescriptionState',
    CONNECT_SIGNALING_AND_ICE_COLLECTION_STATE: 'ConnectSignalingAndIceCollectionState',
    INVITE_ANSWER_STATE: 'InviteAnswerState',
    ACCEPT_STATE: 'AcceptState',
    CONNECT_CONTACT_STATE: 'ConnectContactState',
    CLEAN_UP_STATE: 'CleanUpState',
    DISCONNECTED_STATE: 'DisconnectedState'
};

var BROWSER_LIST = exports.BROWSER_LIST = ['Google Chrome', 'Microsoft Edge', 'Firefox'];

var FIREFOX = exports.FIREFOX = "Firefox";
var ACITVE_SOFTPHONE_TAB = exports.ACITVE_SOFTPHONE_TAB = "Active Softphone Tab";

},{}],154:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _utils = require('./utils');

var _rtc_const = require('./rtc_const');

var _CCPInitiationStrategyInterface = require('./strategies/CCPInitiationStrategyInterface');

var _CCPInitiationStrategyInterface2 = _interopRequireDefault(_CCPInitiationStrategyInterface);

var _StandardStrategy = require('./strategies/StandardStrategy');

var _StandardStrategy2 = _interopRequireDefault(_StandardStrategy);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var RtcPeerConnectionFactory = function () {

    //transportHandle must be a callback function which should return a promise which is going to return the iceServers. Please refer https://www.w3.org/TR/webrtc/#rtciceserver-dictionary for iceServer example
    //publishError(errorType, errorMessage) must be a callback function which will publish the passed error message to client browser
    function RtcPeerConnectionFactory(logger, wssManager, clientId, transportHandle, publishError) {
        var strategy = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : new _StandardStrategy2.default();
        (0, _classCallCheck3.default)(this, RtcPeerConnectionFactory);

        if (!(strategy instanceof _CCPInitiationStrategyInterface2.default)) {
            throw new Error('Expected a strategy of type CCPInitiationStrategyInterface');
        }
        (0, _utils.assertTrue)((0, _utils.isFunction)(transportHandle), 'transportHandle must be a function');
        (0, _utils.assertTrue)((0, _utils.isFunction)(publishError), 'publishError must be a function');
        this._strategy = strategy;
        this._logger = logger;
        this._clientId = clientId;
        this._wssManager = wssManager;
        this._requestIceAccess = transportHandle;
        this._publishError = publishError;
        this._earlyMediaConnectionSupported = this._isEarlyMediaConnectionSupported();
        this._initializeWebSocketEventListeners();
        this._requestPeerConnection();
        this._networkConnectivityChecker();

        this._logger.log("RTC.js is using " + strategy.getStrategyName());
    }

    (0, _createClass3.default)(RtcPeerConnectionFactory, [{
        key: '_isEarlyMediaConnectionSupported',
        value: function _isEarlyMediaConnectionSupported() {
            return this._strategy._isEarlyMediaConnectionSupported();
        }

        //This will handle the idleConnection and quota limits notification from the server

    }, {
        key: '_webSocketManagerOnMessage',
        value: function _webSocketManagerOnMessage(event) {
            var content = void 0;
            if (event.content) {
                content = JSON.parse(event.content);
            }
            if (content && this._clientId === content.clientId) {
                if (content.jsonRpcMsg.method === "idleConnection") {
                    this._clearIdleRtcPeerConnection();
                } else if (content.jsonRpcMsg.method === "quotaBreached") {
                    this._logger.log("Number of active sessions are more then allowed limit for the client " + this._clientId);
                    this._closeRTCPeerConnection();
                    this._publishError("multiple_softphone_active_sessions", "Number of active sessions are more then allowed limit.");
                }
            }
        }
    }, {
        key: '_initializeWebSocketEventListeners',
        value: function _initializeWebSocketEventListeners() {
            this._wssManager.subscribeTopics([_rtc_const.SOFTPHONE_ROUTE_KEY]);
            this._unSubscribe = this._wssManager.onMessage(_rtc_const.SOFTPHONE_ROUTE_KEY, (0, _utils.hitch)(this, this._webSocketManagerOnMessage));
        }

        // This method will create and return new peer connection if browser is not supporting early ice collection.
        // For the supported browser, this method will request for new peerConnection after returning the existing peerConnection

    }, {
        key: 'get',
        value: function get(iceServers) {
            var self = this;
            var pc = self._idlePc;
            self._idlePc = null;
            if (pc == null) {
                pc = self._createRtcPeerConnection(iceServers);
            }
            self.clearIdleRtcPeerConnectionTimerId();
            self._requestPeerConnection();
            return pc;
        }
    }, {
        key: 'clearIdleRtcPeerConnectionTimerId',
        value: function clearIdleRtcPeerConnectionTimerId() {
            var self = this;
            if (self._idleRtcPeerConnectionTimerId) {
                clearTimeout(self._idleRtcPeerConnectionTimerId);
                self._idleRtcPeerConnectionTimerId = null;
            }
        }
    }, {
        key: '_requestPeerConnection',
        value: function _requestPeerConnection() {
            var self = this;
            if (!self._peerConnectionRequestInFlight && self._earlyMediaConnectionSupported) {
                self._peerConnectionRequestInFlight = true;
                self._requestIceAccess().then(function (response) {
                    self._idlePc = self._createRtcPeerConnection(response);
                    self._peerConnectionRequestInFlight = false;
                    self._idleRtcPeerConnectionTimerId = setTimeout((0, _utils.hitch)(self, self._refreshRtcPeerConnection), _rtc_const.RTC_PEER_CONNECTION_IDLE_TIMEOUT_MS);
                },
                // eslint-disable-next-line no-unused-vars
                function (reason) {
                    self._peerConnectionRequestInFlight = false;
                });
            }
        }
    }, {
        key: '_networkConnectivityChecker',
        value: function _networkConnectivityChecker() {
            var self = this;
            setInterval(function () {
                if (!navigator.onLine && self._idlePc) {
                    self._logger.log("Network offline. Cleaning up early connection");
                    self._idlePc.close();
                    self._idlePc = null;
                }
            }, _rtc_const.NETWORK_CONNECTIVITY_CHECK_INTERVAL_MS);
        }
    }, {
        key: '_createRtcPeerConnection',
        value: function _createRtcPeerConnection(iceServers) {
            var rtcPeerConnectionConfig = JSON.parse(JSON.stringify(_rtc_const.RTC_PEER_CONNECTION_CONFIG));
            rtcPeerConnectionConfig.iceServers = iceServers;
            rtcPeerConnectionConfig.iceCandidatePoolSize = _rtc_const.DEFAULT_ICE_CANDIDATE_POOL_SIZE;
            return this._strategy._createRtcPeerConnection(rtcPeerConnectionConfig, _rtc_const.RTC_PEER_CONNECTION_OPTIONAL_CONFIG);
        }
    }, {
        key: '_clearIdleRtcPeerConnection',
        value: function _clearIdleRtcPeerConnection() {
            this._logger.log("session is idle from long time. closing the peer connection for client " + this._clientId);
            this._closeRTCPeerConnection();
        }
    }, {
        key: '_refreshRtcPeerConnection',
        value: function _refreshRtcPeerConnection() {
            this._idleRtcPeerConnectionTimerId = null;
            this._clearIdleRtcPeerConnection();
            this._logger.log("RtcPeerConnectionFactory is refreshing peer connection for client " + this._clientId);
            this._requestPeerConnection();
        }
    }, {
        key: '_closeRTCPeerConnection',
        value: function _closeRTCPeerConnection() {
            if (this._idlePc) {
                this._idlePc.close();
                this._idlePc = null;
            }
        }

        // Clear idle peer connection timer first and then close the idle peer connection.

    }, {
        key: 'close',
        value: function close() {
            this._logger.log("close method invoked. Clear timer and close idle peer connection " + this._clientId);
            this.clearIdleRtcPeerConnectionTimerId();
            this._closeRTCPeerConnection();
        }
    }]);
    return RtcPeerConnectionFactory;
}();

exports.default = RtcPeerConnectionFactory;

},{"./rtc_const":153,"./strategies/CCPInitiationStrategyInterface":161,"./strategies/StandardStrategy":165,"./utils":167,"babel-runtime/helpers/classCallCheck":17,"babel-runtime/helpers/createClass":18}],155:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _typeof2 = require("babel-runtime/helpers/typeof");

var _typeof3 = _interopRequireDefault(_typeof2);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _v = require("uuid/v4");

var _v2 = _interopRequireDefault(_v);

var _StandardStrategy = require("./strategies/StandardStrategy");

var _StandardStrategy2 = _interopRequireDefault(_StandardStrategy);

var _CCPInitiationStrategyInterface = require("./strategies/CCPInitiationStrategyInterface");

var _CCPInitiationStrategyInterface2 = _interopRequireDefault(_CCPInitiationStrategyInterface);

var _rtc_session = require("./rtc_session");

var _rtc_session2 = _interopRequireDefault(_rtc_session);

var _exceptions = require("./exceptions");

var _utils = require("./utils");

var _rtc_const = require("./rtc_const");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var RtcPeerConnectionManager = function () {

    /**
     * Create a PeerConnectionManager which manages the life cycle of RTCSession and peer connection
     * It will be initialized when agent logs into the CCP and be responsible for creating and closing peer connection and RTCSession
     *
     * @constructor
     * @param {string} signalingUri - signalingUri get from call config. (optional, param for CCPv1)
     * @param {*} iceServers - ice server credentials
     * @param {*} transportHandle - a callback function which returns a promise which is going to return the iceServers.
     * @param {*} publishError - a function which publishs errors on CCP.
     * @param {string} clientId - uuid for softphone client
     * @param {string} contactToken - contactoken sent from service side  (optional)
     * @param {object} logger - An object provides logging functions, such as console
     * @param {string} contactId - ContactId which uniquely identifies the session. (optional)
     * @param {string} connectionId - Represents media connection id (optional)
     * @param {string} wssManager - websocket manager
     * @param {object} strategy - VDI strategy indicates which WebRTC SDK to use: standard, Citrix, WorkSpace (optional, default to be standardStrategy)
     * @param {boolean} isPPCEnabled - flag indicates if persistent connection is enabled in agent configuration
     * @param {string} browserId - browser identifier read from local storage and is used for browser refresh and ICE restart
     */
    function RtcPeerConnectionManager(signalingUri, iceServers, transportHandle, publishError, clientId, contactToken, logger, contactId, connectionId, wssManager) {
        var strategy = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : new _StandardStrategy2.default();

        var _this = this;

        var isPPCEnabled = arguments[11];
        var browserId = arguments[12];
        (0, _classCallCheck3.default)(this, RtcPeerConnectionManager);

        // Check if a peer connection manager has already existed
        if (!RtcPeerConnectionManager.instance) {
            // check if transportHandle is function
            (0, _utils.assertTrue)((0, _utils.isFunction)(transportHandle), 'transportHandle must be a function');
            // check if publishError is function
            (0, _utils.assertTrue)((0, _utils.isFunction)(publishError), 'publishError must be a function');
            // check if logger is provided
            if (!logger || (typeof logger === "undefined" ? "undefined" : (0, _typeof3.default)(logger)) !== 'object') {
                throw new _exceptions.IllegalParameters('logger required');
            }
            // check if contactId is provided
            if (!contactId) {
                // if not provided will create an uuid
                this._callId = (0, _v2.default)();
            } else {
                this._callId = contactId;
            }

            if (!connectionId) {
                // if not provided will create an uuid
                this._connectionId = (0, _v2.default)();
            } else {
                this._connectionId = connectionId;
            }

            if (!(strategy instanceof _CCPInitiationStrategyInterface2.default)) {
                throw new Error('Expected a strategy of type CCPInitiationStrategyInterface');
            }

            this._strategy = strategy;
            this._wssManager = wssManager;
            this._signalingUri = signalingUri;
            this._iceServers = iceServers;
            this._contactToken = contactToken;
            this._originalLogger = logger;
            this._logger = (0, _utils.wrapLogger)(this._originalLogger, '', 'RtcPeerConnectionManager');
            this._isPPCEnabled = isPPCEnabled;
            this._isRTPSAllowlisted = false; // RTPSAllowlisted flag is false by default
            this._peerConnectionId = null;
            this._browserId = browserId;
            this._clientId = clientId;

            this._requestIceAccess = transportHandle;
            this._publishError = publishError;
            this._initializeWebSocketEventListeners();
            this.requestPeerConnection().then(function () {
                // request peer connection when initializing RtcPeerConnectionManager
                if (_this.isPersistentConnectionEnabled() && !_this._contactToken) {
                    _this.createSession();
                    _this._rtcSessionConnectPromise = _this.connect();
                }
            });
            this._networkConnectivityChecker();
            RtcPeerConnectionManager.instance = this;
            this._logger.info("Initializing Peer Connection Manager...");
            this._logger.log("RTC.js is using " + strategy.getStrategyName());
        } else {
            logger.info("Peer Connection Manager has already been initialized");
        }
        this.browserTabCloseEventListener();
        return RtcPeerConnectionManager.instance;
    }

    /** Check if current browser supports standby/early peer connection or not.
     * If persistent peer connection is enabled, standby peer will be disabled.
     * @returns {*|boolean}
     * @private
     */


    (0, _createClass3.default)(RtcPeerConnectionManager, [{
        key: "_isEarlyMediaConnectionSupported",
        value: function _isEarlyMediaConnectionSupported() {
            if (!this.isPersistentConnectionEnabled()) {
                return this._strategy._isEarlyMediaConnectionSupported();
            }
            return false;
        }

        /** This function handles the idleConnection and quota limits notification from the server
         *
         * @param event
         * @private
         */

    }, {
        key: "_webSocketManagerOnMessage",
        value: function _webSocketManagerOnMessage(event) {
            var content = void 0;
            if (event.content) {
                content = JSON.parse(event.content);
            }
            if (content && this._clientId === content.clientId) {
                if (content.jsonRpcMsg.method === "idleConnection") {
                    this._clearIdleRtcPeerConnection();
                } else if (content.jsonRpcMsg.method === "quotaBreached") {
                    this._logger.log("Number of active sessions are more then allowed limit for the client " + this._clientId);
                    this._closeIdleRTCPeerConnection();
                    this._publishError("multiple_softphone_active_sessions", "Number of active sessions are more then allowed limit.");
                }
            }
        }

        /**
         * This monitors the Softphone webSocket events
         * @private
         */

    }, {
        key: "_initializeWebSocketEventListeners",
        value: function _initializeWebSocketEventListeners() {
            this._wssManager.subscribeTopics([_rtc_const.SOFTPHONE_ROUTE_KEY]);
            this._unSubscribe = this._wssManager.onMessage(_rtc_const.SOFTPHONE_ROUTE_KEY, (0, _utils.hitch)(this, this._webSocketManagerOnMessage));
        }

        /**
         * Function to get RTCPeerConnection.
         * When persistent connection is enabled. If no RTCPeerConnection exists, it will create a new RTCPeerConnection
         *
         * @returns {RTCPeerConnection}
         */

    }, {
        key: "getPeerConnection",
        value: function getPeerConnection() {
            var self = this;
            var pc;
            if (self.isPersistentConnectionEnabled()) {
                pc = self._pc;
                if (pc === null || pc === undefined) {
                    pc = self._createRtcPeerConnection(this._iceServers);
                }
            } else {
                pc = self._idlePc;
                self._idlePc = null;
                if (pc === null || pc === undefined) {
                    pc = self._createRtcPeerConnection(this._iceServers);
                }
                self.clearIdleRtcPeerConnectionTimerId();
                self.requestPeerConnection();
            }
            self._pc = pc;
            return pc;
        }

        /**
         * Clear standby/idle peer connection refresh timer
         */

    }, {
        key: "clearIdleRtcPeerConnectionTimerId",
        value: function clearIdleRtcPeerConnectionTimerId() {
            var self = this;
            if (self._idleRtcPeerConnectionTimerId) {
                clearTimeout(self._idleRtcPeerConnectionTimerId);
                self._idleRtcPeerConnectionTimerId = null;
            }
        }

        /**
         * When persistent connection is enabled, it creates the persistent peer connection
         * When persistent connection is disabled and early media connection is supported,
         * it creates a standby/ideal peer connection which can be used when a call arrives
         */

    }, {
        key: "requestPeerConnection",
        value: function () {
            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
                var self, response;
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                self = this;

                                self._earlyMediaConnectionSupported = self._isEarlyMediaConnectionSupported();

                                if (!(self.isPersistentConnectionEnabled() && !self._contactToken)) {
                                    _context.next = 11;
                                    break;
                                }

                                // When requesting a peer connection with persistent connection enabled, it only creates new pc if no contact exist.
                                self._logger.info("RtcPeerConnectionManager initiates persistent peer connection");
                                _context.next = 6;
                                return self._requestIceAccess().catch(function (error) {
                                    self._logger.info("RtcPeerConnectionManager request ICE access failed for persistent peer connection creation. ", error);
                                });

                            case 6:
                                response = _context.sent;

                                self._iceServers = response;
                                self._pc = self._createRtcPeerConnection(response);
                                _context.next = 12;
                                break;

                            case 11:
                                if (!self.isPersistentConnectionEnabled() && !self._peerConnectionRequestInFlight && self._earlyMediaConnectionSupported) {
                                    self._logger.info("RtcPeerConnectionManager initiates idle peer connection for non-persistent connection");
                                    self._peerConnectionRequestInFlight = true;
                                    self._requestIceAccess().then(function (response) {
                                        self._idlePc = self._createRtcPeerConnection(response);
                                        self._peerConnectionRequestInFlight = false;
                                        self._idleRtcPeerConnectionTimerId = setTimeout((0, _utils.hitch)(self, self._refreshRtcPeerConnection), _rtc_const.RTC_PEER_CONNECTION_IDLE_TIMEOUT_MS);
                                    },
                                    // eslint-disable-next-line no-unused-vars
                                    function (reason) {
                                        self._peerConnectionRequestInFlight = false;
                                    }).catch(function (error) {
                                        self._logger.info("RtcPeerConnectionManager request ICE access failed for idle peer connection creation. ", error);
                                    });
                                }

                            case 12:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function requestPeerConnection() {
                return _ref.apply(this, arguments);
            }

            return requestPeerConnection;
        }()

        /**
         * Check network connectivity in every 250 ms
         * @private
         */

    }, {
        key: "_networkConnectivityChecker",
        value: function _networkConnectivityChecker() {
            var self = this;
            setInterval(function () {
                if (!navigator.onLine && self._idlePc) {
                    self._logger.log("Network offline. Cleaning up early connection");
                    self._idlePc.close();
                    self._idlePc = null;
                }
            }, _rtc_const.NETWORK_CONNECTIVITY_CHECK_INTERVAL_MS);
        }

        /**
         * Create RTCPeerConnection via WebRTC API or VDI WebRTC redirection SDK
         * @param iceServers
         * @returns {RTCPeerConnection}
         * @private
         */

    }, {
        key: "_createRtcPeerConnection",
        value: function _createRtcPeerConnection(iceServers) {
            var rtcPeerConnectionConfig = JSON.parse(JSON.stringify(_rtc_const.RTC_PEER_CONNECTION_CONFIG));
            rtcPeerConnectionConfig.iceServers = iceServers;
            rtcPeerConnectionConfig.iceCandidatePoolSize = _rtc_const.DEFAULT_ICE_CANDIDATE_POOL_SIZE;
            return this._strategy._createRtcPeerConnection(rtcPeerConnectionConfig, _rtc_const.RTC_PEER_CONNECTION_OPTIONAL_CONFIG);
        }

        /**
         * Clear the standby/Idle peer connection
         * @private
         */

    }, {
        key: "_clearIdleRtcPeerConnection",
        value: function _clearIdleRtcPeerConnection() {
            this._logger.log("session is idle from long time. closing the peer connection for client " + this._clientId);
            this._closeIdleRTCPeerConnection();
        }

        /**
         * Refresh standby/ideal peer connection
         * @private
         */

    }, {
        key: "_refreshRtcPeerConnection",
        value: function _refreshRtcPeerConnection() {
            this._idleRtcPeerConnectionTimerId = null;
            this._clearIdleRtcPeerConnection();
            this._logger.log("RtcPeerConnectionManager is refreshing peer connection for client " + this._clientId);
            this.requestPeerConnection();
        }
    }, {
        key: "_closeIdleRTCPeerConnection",
        value: function _closeIdleRTCPeerConnection() {
            if (this._idlePc) {
                this._idlePc.close();
                this._idlePc = null;
            }
        }

        // Clear idle peer connection timer first and then close the idle peer connection.

    }, {
        key: "closeEarlyMediaConnection",
        value: function closeEarlyMediaConnection() {
            this._logger.log("close method invoked. Clear timer and close idle peer connection " + this._clientId);
            this.clearIdleRtcPeerConnectionTimerId();
            this._closeIdleRTCPeerConnection();
        }
    }, {
        key: "createSession",


        /**
         * create a rtcSession object if none exists
         *
         * @return {RtcSession} rtcSession
         */
        value: function createSession(callId, iceServers, contactToken, connectionId, wssManager) {
            var rtcJsStrategy = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : new _StandardStrategy2.default();

            this._callId = callId ? callId : this._callId;
            this._iceServers = iceServers ? iceServers : this._iceServers;
            this._contactToken = contactToken ? contactToken : this._contactToken;
            this._connectionId = connectionId ? connectionId : this._connectionId;
            this._wssManager = wssManager ? wssManager : this._wssManager;
            this._strategy = rtcJsStrategy ? rtcJsStrategy : this._strategy;

            this._logger.info("PeerConnectionManager creates RtcSession");
            this._logger = (0, _utils.wrapLogger)(this._originalLogger, this._callId, 'RtcPeerConnectionManager');
            this._rtcSession = new _rtc_session2.default(this._signalingUri, this._iceServers, this._contactToken, this._logger, this._callId, this._connectionId, this._wssManager, this._strategy, this);

            // ontrack event will only be triggered once during the process of establishing the persistent connection.
            // This event won't be trigger when a call arrives at CCP with persistent connection enabled
            // So we need to attach remoteAudioElement when we initiate the persistent connection. TODO: We can move this to StreamsJS as a followup CR
            if (this.isPersistentConnectionEnabled()) {
                this._rtcSession.remoteAudioElement = document.getElementById('remote-audio') || window.parent.parent.document.getElementById('remote-audio');
                this._remoteAudioElement = this._rtcSession.remoteAudioElement;
            }
            return this._rtcSession;
        }

        /**
         * get rtcSession object
         *
         * @return {RtcSession} rtcSession manages by the peer connection manager
         */

    }, {
        key: "getSession",
        value: function getSession() {
            return this._rtcSession;
        }

        /**
         * This method aims to create a new peer connection or connect to the existing peer connection
         * which will start the signaling process
         *
         * @param {RTCPeerConnection} pc - An existing peer connection, it could be persistent peer connection
         * or a standby peer connection (optional)
         */

    }, {
        key: "connect",
        value: function () {
            var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4() {
                var _this2 = this;

                var self, onSessionFailedHandler, onSessionCompletedHandler, pc;
                return _regenerator2.default.wrap(function _callee4$(_context4) {
                    while (1) {
                        switch (_context4.prev = _context4.next) {
                            case 0:
                                self = this;
                                // check if the previous rtcSession.connect promise is fulfilled or not

                                if (!self._rtcSessionConnectPromise) {
                                    _context4.next = 19;
                                    break;
                                }

                                _context4.prev = 2;
                                _context4.next = 5;
                                return self._rtcSessionConnectPromise;

                            case 5:
                                _context4.next = 16;
                                break;

                            case 7:
                                _context4.prev = 7;
                                _context4.t0 = _context4["catch"](2);

                                // notify softphoneManger the current rtcSession is failed to trigger the retry strategy on SoftphoneManager side
                                this._rtcSession._onSessionFailed(this._rtcSession, _context4.t0.name);
                                self._rtcSession = null;
                                self.destroy();
                                self._contactToken = null;
                                self._iceServers = null;
                                self._callId = null;
                                return _context4.abrupt("return");

                            case 16:
                                _context4.prev = 16;

                                self._rtcSessionConnectPromise = null;
                                return _context4.finish(16);

                            case 19:

                                // reset inactivity timer before RTCSession state transition
                                if (self._inactivityTimer) {
                                    self.clearInactivityTimer();
                                }

                                // add session failed event handler
                                onSessionFailedHandler = self._rtcSession._onSessionFailed;

                                self._rtcSession.onSessionFailed = function (rtcSession, reason) {
                                    self.logger.error("Peer connection manager detects RtcSession failure: " + reason);
                                    // wrap the existing handler which is created in softphone manager
                                    if (onSessionFailedHandler) {
                                        onSessionFailedHandler(rtcSession, reason);
                                    }
                                    // clear local RtcSession
                                    self._rtcSession = null;
                                    self._iceServers = null;
                                    // close signaling channel and peer connection
                                    self.destroy(); // call destroy method before clean contactToken and callId
                                    self._contactToken = null;
                                    self._callId = null;
                                };

                                // add session completed event handler
                                onSessionCompletedHandler = self._rtcSession._onSessionCompleted;

                                self._rtcSession.onSessionCompleted = function (rtcSession) {
                                    self.logger.info("Peer connection manager detects RtcSession completed. Performing health check to decide if we want to keep the peer connection");
                                    // wrap the existing handler which is created in softphone manager
                                    if (onSessionCompletedHandler) {
                                        onSessionCompletedHandler(rtcSession);
                                    }
                                    if (self._signalingChannel._state.name === "FailedState" || self._pc.iceConnectionState === _rtc_const.ICE_CONNECTION_STATE.FAILED || self._pc.iceConnectionState === _rtc_const.ICE_CONNECTION_STATE.DISCONNECTED || self._pc.iceConnectionState === _rtc_const.ICE_CONNECTION_STATE.CLOSED) {
                                        self.logger.error("Peer connection manager detected unhealthy connection at call ends, tearing down the connection");
                                        // clear local RtcSession
                                        self._rtcSession = null;
                                        self._iceServers = null;
                                        // close signaling channel and peer connection
                                        self.destroy();
                                        self._contactToken = null;
                                        self._callId = null;
                                    }
                                };

                                // add signaling remote hangup listener
                                self._rtcSession._signalingRemoteHungup = function () {
                                    self.hangup();
                                };

                                if (this._userAgentData) {
                                    _context4.next = 29;
                                    break;
                                }

                                _context4.next = 28;
                                return (0, _utils.getUserAgentData)().catch(function (error) {
                                    self.logger.error("Peer connection manager failed to get user agent data", error);
                                });

                            case 28:
                                this._userAgentData = _context4.sent;

                            case 29:
                                // Add useragent to rtcSession report
                                this._rtcSession._sessionReport.userAgentData = JSON.stringify(this._userAgentData);

                                pc = this.getPeerConnection();

                                this._rtcSession.connect(pc);

                                return _context4.abrupt("return", new Promise(function (resolve, reject) {
                                    // resolve the Promise when signaling handshake is completed
                                    var signalingHandshaked = (0, _utils.hitch)(self._rtcSession, self._rtcSession._signalingHandshaked);
                                    self._rtcSession._signalingHandshaked = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
                                        return _regenerator2.default.wrap(function _callee2$(_context2) {
                                            while (1) {
                                                switch (_context2.prev = _context2.next) {
                                                    case 0:
                                                        signalingHandshaked();
                                                        resolve();

                                                    case 2:
                                                    case "end":
                                                        return _context2.stop();
                                                }
                                            }
                                        }, _callee2, _this2);
                                    }));

                                    // reject the Promise when signaling handshake is failed
                                    var signalingFailed = (0, _utils.hitch)(self._rtcSession, self._rtcSession._signalingFailed);
                                    self._rtcSession._signalingFailed = function () {
                                        var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(exception) {
                                            return _regenerator2.default.wrap(function _callee3$(_context3) {
                                                while (1) {
                                                    switch (_context3.prev = _context3.next) {
                                                        case 0:
                                                            signalingFailed(exception);
                                                            reject();

                                                        case 2:
                                                        case "end":
                                                            return _context3.stop();
                                                    }
                                                }
                                            }, _callee3, _this2);
                                        }));

                                        return function (_x3) {
                                            return _ref4.apply(this, arguments);
                                        };
                                    }();
                                }));

                            case 33:
                            case "end":
                                return _context4.stop();
                        }
                    }
                }, _callee4, this, [[2, 7, 16, 19]]);
            }));

            function connect() {
                return _ref2.apply(this, arguments);
            }

            return connect;
        }()

        /**
         * Start an inactivity timer for persistent connection
         *
         */

    }, {
        key: "startInactivityTimer",
        value: function startInactivityTimer() {
            var _this3 = this;

            this._logger.info("PeerConnectionManager start inactivity timer");
            this._inactivityTimer = setTimeout(function () {
                _this3._logger.info('Inactivity timer breached, teardown peer connection ');
                _this3.destroy();
            }, this._inactivityDuration);
        }

        /**
         * Reset inactivity timer for persistent connection
         */

    }, {
        key: "clearInactivityTimer",
        value: function clearInactivityTimer() {
            this._logger.info("PeerConnectionManager clear inactivity timer");
            clearTimeout(this._inactivityTimer);
            this._inactivityTimer = null;
        }

        /**
         * Hang up the RtcSession
         */

    }, {
        key: "hangup",
        value: function hangup() {
            this._logger.info("PeerConnectionManager hangs up RtcSession");
            if (this._rtcSession) {
                try {
                    this._rtcSession.hangup();
                } catch (error) {
                    this._logger.error("Error occurred while hanging up RtcSession:", error);
                }
            }
            this._contactToken = null;
            this._callId = null;
            this._rtcSession = null;
            if (!this.isPersistentConnectionEnabled()) {
                this._signalingChannel = null;
                this._iceServers = null;
                this._pc = null;
                this._peerConnectionId = null;
                this._peerConnectionToken = null;
                this._iceRestart = false;
            }
        }

        /**
         * Destroys the existing persistent peer connection.
         *
         * @param {string|undefined} peerConnectionId - The ID of the peer connection to destroy. 
         *        If provided, indicates that the method is triggered by a server-side PCBye.
         * 
         * This method is crucial for both RTPS allowlisted and not allowlisted paths.
         * It ensures proper cleanup of the signaling channel, which is essential because pcm.hangup is not guaranteed to be invoked.
         * TODO: refactor destroy(peerConnectionId) to destroy(shouldSendByeToServerBool=true),
         * 
         * Usage:
         * - Call with no arguments for client-initiated destruction (will send BYE to server).
         * - Call with a peerConnectionId for server-initiated destruction (will not send BYE).
         * 
         * Note: The presence of peerConnectionId is used to infer if the destroy method 
         * is triggered by a server-side event, in which case we do not send a BYE signal.
         * 
         * TODO: Refactor peerConnectionId parameter to be a boolean 'shouldSendByeToServer' with a default value of true.
         *       This should be set to false for AZ evacuation and server-side draining scenarios.
         *       In these cases, we receive a PCBYE from the server, so we don't want to send another BYE.
         */

    }, {
        key: "destroy",
        value: function destroy(peerConnectionId) {
            try {
                if (this._rtcSession && (this._rtcSession._state.name === _rtc_const.RTC_SESSION_STATE.TALKING_STATE || this._rtcSession._state.name === _rtc_const.RTC_SESSION_STATE.CONNECT_CONTACT_STATE)) {
                    this._logger.info("Peer connection is in use, PeerConnectionManager can NOT destroy persistent peer connection");
                } else if (this._pc) {
                    // if peer connection exists, destroy the persistent peer connection
                    this._logger.info("PeerConnectionManager destroy persistent peer connection");
                    if (!peerConnectionId && this._signalingChannel) {
                        // If peerConnectionId doesn't exist, we need to send a bye to the server. Otherwise, it doesn't need to send a bye since it receives the PCBye from server
                        try {
                            this._signalingChannel.bye();
                        } catch (byeError) {
                            this._logger.error("Error occurred while sending bye:", byeError);
                        }
                    }
                    this._signalingChannel = null;
                    this._pc.close();
                    this._pc = null;
                    this._peerConnectionId = null;
                    this._peerConnectionToken = null;
                    this._iceRestart = false;
                    // release media stream when existing persistent peer connection is destroyed
                    if (this._mediaStream) {
                        this._mediaStream.getTracks().forEach(function (track) {
                            return track.stop();
                        });
                        this._mediaStream = null;
                    }
                    // detach remote audio stream
                    if (this._remoteAudioElement) {
                        this._remoteAudioElement.srcObject = null;
                        this._remoteAudioStream = null;
                    }
                    this.clearInactivityTimer();
                }
            } catch (error) {
                this._logger.error("Error occurred in PeerConnectionManager destroy method:", error);
            }
        }
    }, {
        key: "handlePersistentPeerConnectionToggle",
        value: function handlePersistentPeerConnectionToggle(isPPCEnabled) {
            // change PPCEnabled only when agent is not in a call
            if (this._rtcSession === null && this.isPPCEnabled !== isPPCEnabled && this.isRTPSAllowlisted) {
                this.isPPCEnabled = isPPCEnabled;
                // if softphonePersistentConnection changed to true, use rtcPeerConnectionManager to initiate a new persistent peer connection
                if (this.isPPCEnabled) {
                    this._logger.info("softphonePersistentConnection changed to ture, initiate a persistent peer connection").sendInternalLogToServer();
                    this.activatePersistentPeerConnectionMode();
                } else {
                    // if softphonePersistentConnection changed to false, use rtcPeerConnectionManager to tear down the currentpersistent peer connection
                    this._logger.info("softphonePersistentConnection changed to false, destroy the existing persistent peer connection").sendInternalLogToServer();
                    this.deactivatePersistentPeerConnectionMode();
                }
            }
        }

        // activate persistent connection mode by creating the persistent connection and close standby peer connection

    }, {
        key: "activatePersistentPeerConnectionMode",
        value: function activatePersistentPeerConnectionMode() {
            var _this4 = this;

            // this.rtcJsStrategy = this.rtcJsStrategy;
            this.closeEarlyMediaConnection(); // close standby peer connection
            this.requestPeerConnection().then(function () {
                // request a new persistent peer connection
                _this4.createSession();
                _this4._rtcSessionConnectPromise = _this4.connect();
            });
        }

        // deactivate persistent connection mode by destroying the existing persistent peer connection and request for standby peer connection

    }, {
        key: "deactivatePersistentPeerConnectionMode",
        value: function deactivatePersistentPeerConnectionMode() {
            this.destroy();
            this.requestPeerConnection();
        }

        // function which checks if persistent connection feature is enabled and allowlisted, and browser is NOT Firefox

    }, {
        key: "isPersistentConnectionEnabled",
        value: function isPersistentConnectionEnabled() {
            return this._isPPCEnabled && this._isRTPSAllowlisted && !(0, _utils.isFirefoxBrowser)(this._userAgentData);
        }

        // This function closes the Early media connection and persistent peer connection

    }, {
        key: "close",
        value: function close() {
            if (this.isPersistentConnectionEnabled()) {
                this.destroy();
            } else {
                this.closeEarlyMediaConnection();
            }
        }

        /** This function is to listen beforeunload event. When we receive beforeunload
         * we will send a bye from CCP to Amazon Connect, but this is very unstable, we cannot
         * guarantee send bye every time when agent close the browser tab
         *
         */

    }, {
        key: "browserTabCloseEventListener",
        value: function browserTabCloseEventListener() {
            var _this5 = this;

            window.addEventListener('beforeunload', function () {
                _this5._logger.info('User leaves the page, destroy peer connection manager');
                _this5.destroy();
            });
        }
    }, {
        key: "signalingUri",
        get: function get() {
            return this._signalingUri;
        },
        set: function set(signalingUri) {
            this._signalingUri = signalingUri;
        }
    }, {
        key: "iceServers",
        get: function get() {
            return this._iceServers;
        },
        set: function set(iceServers) {
            this._iceServers = iceServers;
        }
    }, {
        key: "contactToken",
        get: function get() {
            return this._contactToken;
        },
        set: function set(contactToken) {
            this._contactToken = contactToken;
        }
    }, {
        key: "logger",
        get: function get() {
            return this._logger;
        },
        set: function set(logger) {
            this._logger = logger;
        }
    }, {
        key: "callId",
        get: function get() {
            return this._callId;
        },
        set: function set(callId) {
            this._callId = callId;
        }
    }, {
        key: "connectionId",
        get: function get() {
            return this._connectionId;
        },
        set: function set(connectionId) {
            this._connectionId = connectionId;
        }
    }, {
        key: "wssManager",
        get: function get() {
            return this._wssManager;
        },
        set: function set(wssManager) {
            this._wssManager = wssManager;
        }
    }, {
        key: "strategy",
        get: function get() {
            return this._strategy;
        },
        set: function set(strategy) {
            this._strategy = strategy;
        }
    }, {
        key: "isPPCEnabled",
        get: function get() {
            return this._isPPCEnabled;
        },
        set: function set(isPPCEnabled) {
            this._isPPCEnabled = isPPCEnabled;
        }
    }, {
        key: "isRTPSAllowlisted",
        get: function get() {
            return this._isRTPSAllowlisted;
        },
        set: function set(isRTPSAllowlisted) {
            this._isRTPSAllowlisted = isRTPSAllowlisted;
        }
    }, {
        key: "browserId",
        get: function get() {
            return this._browserId;
        },
        set: function set(browserId) {
            this._browserId = browserId;
        }
    }, {
        key: "peerConnectionId",
        get: function get() {
            return this._peerConnectionId;
        },
        set: function set(peerConnectionId) {
            this._peerConnectionId = peerConnectionId;
        }
    }, {
        key: "peerConnectionToken",
        get: function get() {
            return this._peerConnectionToken;
        },
        set: function set(peerConnectionToken) {
            this._peerConnectionToken = peerConnectionToken;
        }
    }, {
        key: "inactivityDuration",
        get: function get() {
            return this._inactivityDuration;
        },
        set: function set(inactivityDuration) {
            this._inactivityDuration = inactivityDuration;
        }
    }]);
    return RtcPeerConnectionManager;
}();

exports.default = RtcPeerConnectionManager;

},{"./exceptions":152,"./rtc_const":153,"./rtc_session":156,"./strategies/CCPInitiationStrategyInterface":161,"./strategies/StandardStrategy":165,"./utils":167,"babel-runtime/helpers/asyncToGenerator":16,"babel-runtime/helpers/classCallCheck":17,"babel-runtime/helpers/createClass":18,"babel-runtime/helpers/typeof":24,"babel-runtime/regenerator":27,"uuid/v4":137}],156:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.FailedState = exports.DisconnectedState = exports.CleanUpState = exports.TalkingState = exports.ConnectContactState = exports.AcceptState = exports.InviteAnswerState = exports.ConnectSignalingAndIceCollectionState = exports.SetLocalSessionDescriptionState = exports.CreateOfferState = exports.GrabLocalMediaState = exports.RTCSessionState = undefined;

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _get2 = require('babel-runtime/helpers/get');

var _get3 = _interopRequireDefault(_get2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _utils = require('./utils');

var _session_report = require('./session_report');

var _rtc_const = require('./rtc_const');

var _exceptions = require('./exceptions');

var _signaling = require('./signaling');

var _signaling2 = _interopRequireDefault(_signaling);

var _v = require('uuid/v4');

var _v2 = _interopRequireDefault(_v);

var _rtpStats = require('./rtp-stats');

var _sdp = require('sdp');

var _CCPInitiationStrategyInterface = require('./strategies/CCPInitiationStrategyInterface');

var _CCPInitiationStrategyInterface2 = _interopRequireDefault(_CCPInitiationStrategyInterface);

var _StandardStrategy = require('./strategies/StandardStrategy');

var _StandardStrategy2 = _interopRequireDefault(_StandardStrategy);

var _rtc_session_talking_substates = require('./rtc_session_talking_substates');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var RTCSessionState = exports.RTCSessionState = function () {
    /**
     *
     * @param {RtcSession} rtcSession
     */
    function RTCSessionState(rtcSession) {
        (0, _classCallCheck3.default)(this, RTCSessionState);

        this._rtcSession = rtcSession;
    }

    (0, _createClass3.default)(RTCSessionState, [{
        key: 'onEnter',
        value: function onEnter() {}
    }, {
        key: 'onExit',
        value: function onExit() {}
    }, {
        key: '_isCurrentState',
        value: function _isCurrentState() {
            return this._rtcSession._state === this;
        }
    }, {
        key: 'transit',
        value: function transit(nextState) {
            if (this._isCurrentState()) {
                this._rtcSession.transit(nextState);
            }
        }
    }, {
        key: 'hangup',
        value: function hangup() {
            this.transit(new FailedState(this._rtcSession));
        }
    }, {
        key: 'onIceCandidate',
        value: function onIceCandidate(evt) {// eslint-disable-line no-unused-vars
            //ignore candidate by default, ConnectSignalingAndIceCollectionState will override to collect candidates, but collecting process could last much longer than ConnectSignalingAndIceCollectionState
            //we don't want to spam the console log
        }
    }, {
        key: 'onRemoteHungup',
        value: function onRemoteHungup() {
            throw new _exceptions.UnsupportedOperation('onRemoteHungup not implemented by ' + this.name);
        }
    }, {
        key: 'onSignalingConnected',
        value: function onSignalingConnected() {
            throw new _exceptions.UnsupportedOperation('onSignalingConnected not implemented by ' + this.name);
        }
    }, {
        key: 'onSignalingHandshaked',
        value: function onSignalingHandshaked() {
            throw new _exceptions.UnsupportedOperation('onSignalingHandshaked not implemented by ' + this.name);
        }
    }, {
        key: 'onSignalingFailed',
        value: function onSignalingFailed(e) {
            // eslint-disable-line no-unused-vars
            throw new _exceptions.UnsupportedOperation('onSignalingFailed not implemented by ' + this.name);
        }
    }, {
        key: 'onIceStateChange',
        value: function onIceStateChange(evt) {// eslint-disable-line no-unused-vars
        }
    }, {
        key: 'logger',
        get: function get() {
            return this._rtcSession._logger;
        }
    }, {
        key: 'name',
        get: function get() {
            return "RTCSessionState";
        }
    }]);
    return RTCSessionState;
}(); /**
      * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
      *
      * SPDX-License-Identifier: Apache-2.0
      */


var GrabLocalMediaState = exports.GrabLocalMediaState = function (_RTCSessionState) {
    (0, _inherits3.default)(GrabLocalMediaState, _RTCSessionState);

    function GrabLocalMediaState() {
        (0, _classCallCheck3.default)(this, GrabLocalMediaState);
        return (0, _possibleConstructorReturn3.default)(this, (GrabLocalMediaState.__proto__ || Object.getPrototypeOf(GrabLocalMediaState)).apply(this, arguments));
    }

    (0, _createClass3.default)(GrabLocalMediaState, [{
        key: 'onEnter',
        value: function onEnter() {
            var self = this;
            var startTime = Date.now();
            if (self._rtcSession._isUserProvidedStream) {
                self.transit(new CreateOfferState(self._rtcSession));
            } else {
                var gumTimeoutPromise = new Promise(function (resolve, reject) {
                    setTimeout(function () {
                        reject(new _exceptions.GumTimeout('Local media has not been initialized yet.'));
                    }, self._rtcSession._gumTimeoutMillis);
                });
                var sessionGumPromise = self._gUM(self._rtcSession._buildMediaConstraints());

                Promise.race([sessionGumPromise, gumTimeoutPromise]).then(function (stream) {
                    self._rtcSession._sessionReport.gumTimeMillis = Date.now() - startTime;
                    self._rtcSession._onGumSuccess(self._rtcSession);
                    self._rtcSession._localStream = stream;
                    if (self._rtcSession._pcm) {
                        self._rtcSession._pcm._mediaStream = stream;
                    }
                    self._rtcSession._sessionReport.gumOtherFailure = false;
                    self._rtcSession._sessionReport.gumTimeoutFailure = false;
                    self.transit(new CreateOfferState(self._rtcSession));
                }).catch(function (e) {
                    self._rtcSession._sessionReport.gumTimeMillis = Date.now() - startTime;
                    var errorReason;
                    if (e instanceof _exceptions.GumTimeout) {
                        errorReason = _rtc_const.RTC_ERRORS.GUM_TIMEOUT_FAILURE;
                        self._rtcSession._sessionReport.gumTimeoutFailure = true;
                        self._rtcSession._sessionReport.gumOtherFailure = false;
                    } else {
                        errorReason = _rtc_const.RTC_ERRORS.GUM_OTHER_FAILURE;
                        self._rtcSession._sessionReport.gumOtherFailure = true;
                        self._rtcSession._sessionReport.gumTimeoutFailure = false;
                    }
                    self.logger.error('Local media initialization failed', e);
                    self._rtcSession._onGumError(self._rtcSession);
                    self.transit(new FailedState(self._rtcSession, errorReason));
                });
            }
        }
    }, {
        key: '_gUM',
        value: function _gUM(constraints) {
            return this._rtcSession._strategy._gUM(constraints);
        }
    }, {
        key: 'name',
        get: function get() {
            return "GrabLocalMediaState";
        }
    }]);
    return GrabLocalMediaState;
}(RTCSessionState);

var CreateOfferState = exports.CreateOfferState = function (_RTCSessionState2) {
    (0, _inherits3.default)(CreateOfferState, _RTCSessionState2);

    function CreateOfferState() {
        (0, _classCallCheck3.default)(this, CreateOfferState);
        return (0, _possibleConstructorReturn3.default)(this, (CreateOfferState.__proto__ || Object.getPrototypeOf(CreateOfferState)).apply(this, arguments));
    }

    (0, _createClass3.default)(CreateOfferState, [{
        key: 'onEnter',
        value: function onEnter() {
            var self = this;
            var stream = self._rtcSession._localStream;
            self._rtcSession._strategy.addStream(self._rtcSession._pc, stream);
            self._rtcSession._onLocalStreamAdded(self._rtcSession, stream);
            self._rtcSession._pc.createOffer().then(function (rtcSessionDescription) {
                self._rtcSession._localSessionDescription = rtcSessionDescription;
                self._rtcSession._sessionReport.createOfferFailure = false;
                self.transit(new SetLocalSessionDescriptionState(self._rtcSession));
            }).catch(function (e) {
                self.logger.error('CreateOffer failed', e);
                self._rtcSession._sessionReport.createOfferFailure = true;
                self.transit(new FailedState(self._rtcSession, _rtc_const.RTC_ERRORS.CREATE_OFFER_FAILURE));
            });
        }
    }, {
        key: 'name',
        get: function get() {
            return "CreateOfferState";
        }
    }]);
    return CreateOfferState;
}(RTCSessionState);

var SetLocalSessionDescriptionState = exports.SetLocalSessionDescriptionState = function (_RTCSessionState3) {
    (0, _inherits3.default)(SetLocalSessionDescriptionState, _RTCSessionState3);

    function SetLocalSessionDescriptionState() {
        (0, _classCallCheck3.default)(this, SetLocalSessionDescriptionState);
        return (0, _possibleConstructorReturn3.default)(this, (SetLocalSessionDescriptionState.__proto__ || Object.getPrototypeOf(SetLocalSessionDescriptionState)).apply(this, arguments));
    }

    (0, _createClass3.default)(SetLocalSessionDescriptionState, [{
        key: 'onEnter',
        value: function onEnter() {
            var self = this;

            // fix/modify SDP as needed here, before setLocalDescription
            var localDescription = self._rtcSession._localSessionDescription;
            var sdpOptions = new _utils.SdpOptions();
            // Set audio codec.
            if (self._rtcSession._forceAudioCodec) {
                sdpOptions.forceCodec['audio'] = self._rtcSession._forceAudioCodec;
            }
            // Set video codec.
            if (self._rtcSession._forceVideoCodec) {
                sdpOptions.forceCodec['video'] = self._rtcSession._forceVideoCodec;
            }
            sdpOptions.enableOpusDtx = self._rtcSession._enableOpusDtx;

            var transformedSdp = (0, _utils.transformSdp)(localDescription.sdp, sdpOptions);
            localDescription.sdp = transformedSdp.sdp;
            localDescription.sdp += 'a=ptime:20\r\n';
            localDescription.sdp += 'a=maxptime:20\r\n';
            localDescription.sdp = localDescription.sdp.replace("minptime=10", "minptime=20");

            self.logger.info('LocalSD', self._rtcSession._localSessionDescription);
            self._rtcSession._pc.setLocalDescription(self._rtcSession._localSessionDescription).then(function () {
                var initializationTime = Date.now() - self._rtcSession._connectTimeStamp;
                self._rtcSession._sessionReport.initializationTimeMillis = initializationTime;
                self._rtcSession._onSessionInitialized(self._rtcSession, initializationTime);
                self._rtcSession._sessionReport.setLocalDescriptionFailure = false;
                self.transit(new ConnectSignalingAndIceCollectionState(self._rtcSession, transformedSdp.mLines));
            }).catch(function (e) {
                self.logger.error('SetLocalDescription failed', e);
                self._rtcSession._sessionReport.setLocalDescriptionFailure = true;
                self.transit(new FailedState(self._rtcSession, _rtc_const.RTC_ERRORS.SET_LOCAL_DESCRIPTION_FAILURE));
            });
        }
    }, {
        key: 'name',
        get: function get() {
            return "SetLocalSessionDescriptionState";
        }
    }]);
    return SetLocalSessionDescriptionState;
}(RTCSessionState);

/**
 * Kick off signaling connection. Wait until signaling connects and ICE collection (which already started in previous state) completes.
 * ICE collection times out after user specified amount of time (default to DEFAULT_ICE_TIMEOUT_MS) in case user has complex network environment that blackholes STUN/TURN requests. In this case at least one candidate is required to move forward.
 * ICE collection could also wrap up before timeout if it's determined that RTP candidates from same TURN server have been collected for all m lines.
 */


var ConnectSignalingAndIceCollectionState = exports.ConnectSignalingAndIceCollectionState = function (_RTCSessionState4) {
    (0, _inherits3.default)(ConnectSignalingAndIceCollectionState, _RTCSessionState4);

    /**
     * Create ConnectSignalingAndIceCollectionState object.
     * @param {RtcSession} rtcSession
     * @param {number} mLines Number of m lines in SDP
     */
    function ConnectSignalingAndIceCollectionState(rtcSession, mLines) {
        (0, _classCallCheck3.default)(this, ConnectSignalingAndIceCollectionState);

        var _this4 = (0, _possibleConstructorReturn3.default)(this, (ConnectSignalingAndIceCollectionState.__proto__ || Object.getPrototypeOf(ConnectSignalingAndIceCollectionState)).call(this, rtcSession));

        _this4._iceCandidates = [];
        _this4._iceCandidateFoundationsMap = {};
        _this4._mLines = mLines;
        return _this4;
    }

    (0, _createClass3.default)(ConnectSignalingAndIceCollectionState, [{
        key: 'onEnter',
        value: function onEnter() {
            var self = this;
            self._startTime = Date.now();
            setTimeout(function () {
                if (self._isCurrentState() && !self._iceCompleted) {
                    self.logger.warn('ICE collection timed out');
                    self._reportIceCompleted(true);
                }
            }, self._rtcSession._iceTimeoutMillis);

            //if peer connection manager or signalingChannel doesn't exist, create a new signaling channel
            if (!self._rtcSession._pcm || !self._rtcSession._pcm._signalingChannel) {
                self._rtcSession._createSignalingChannel().connect();
            } else {
                // if signalingChannel exists, reset the contact id, connectionid and contact token
                self._rtcSession._bindSignalingChannel(); // binding the existing signaling channel
                self._rtcSession._pcm._signalingChannel._wss._connnectionId = self._rtcSession._connectionId;
                self._rtcSession._pcm._signalingChannel._contactToken = self._rtcSession._contactToken;
                self._rtcSession._pcm._signalingChannel._callId = self._rtcSession._callId;
            }
        }
    }, {
        key: 'onSignalingConnected',
        value: function onSignalingConnected() {
            this._rtcSession._signallingConnectTimestamp = Date.now();
            this._rtcSession._sessionReport.signallingConnectTimeMillis = this._rtcSession._signallingConnectTimestamp - this._startTime;
            this._signalingConnected = true;
            this._rtcSession._onSignalingConnected(this._rtcSession);
            this._rtcSession._sessionReport.signallingConnectionFailure = false;
            this._checkAndTransit();
        }
    }, {
        key: 'onSignalingFailed',
        value: function onSignalingFailed(e) {
            this._rtcSession._sessionReport.signallingConnectTimeMillis = Date.now() - this._startTime;
            this.logger.error('Failed connecting to signaling server', e);
            this._rtcSession._sessionReport.signallingConnectionFailure = true;
            this.transit(new FailedState(this._rtcSession, _rtc_const.RTC_ERRORS.SIGNALLING_CONNECTION_FAILURE));
        }
    }, {
        key: '_createLocalCandidate',
        value: function _createLocalCandidate(initDict) {
            return new RTCIceCandidate(initDict);
        }
    }, {
        key: 'onIceCandidate',
        value: function onIceCandidate(evt) {
            var candidate = evt.candidate;
            this.logger.log('onicecandidate ' + JSON.stringify(candidate));
            if (candidate) {
                if (candidate.candidate) {
                    this._iceCandidates.push(this._createLocalCandidate(candidate));
                    if (!this._iceCompleted) {
                        this._checkCandidatesSufficient(candidate);
                    }
                }
            } else {
                this._reportIceCompleted(false);
            }
        }
    }, {
        key: '_checkCandidatesSufficient',
        value: function _checkCandidatesSufficient(candidate) {
            //check if we collected sufficient candidates from single media server to start the call
            var candidateObj = (0, _sdp.parseCandidate)(candidate.candidate);
            if (candidateObj.component != 1) {
                return;
            }
            var candidateFoundation = candidateObj.foundation;
            var candidateMLineIndex = candidate.sdpMLineIndex;
            if (candidateFoundation && candidateMLineIndex >= 0 && candidateMLineIndex < this._mLines) {
                var mIndexList = this._iceCandidateFoundationsMap[candidateFoundation] || [];
                if (!mIndexList.includes(candidateMLineIndex)) {
                    mIndexList.push(candidateMLineIndex);
                }
                this._iceCandidateFoundationsMap[candidateFoundation] = mIndexList;

                if (this._mLines == mIndexList.length) {
                    this._reportIceCompleted(false);
                }
            }
        }
    }, {
        key: '_reportIceCompleted',
        value: function _reportIceCompleted(isTimeout) {
            this._rtcSession._sessionReport.iceCollectionTimeMillis = Date.now() - this._startTime;
            this._iceCompleted = true;
            this._rtcSession._onIceCollectionComplete(this._rtcSession, isTimeout, this._iceCandidates.length);
            if (this._iceCandidates.length > 0) {
                this._rtcSession._sessionReport.iceCollectionFailure = false;
                this._checkAndTransit();
            } else {
                this.logger.error('No ICE candidate');
                this._rtcSession._sessionReport.iceCollectionFailure = true;
                this.transit(new FailedState(this._rtcSession, _rtc_const.RTC_ERRORS.ICE_COLLECTION_TIMEOUT));
            }
        }
    }, {
        key: '_checkAndTransit',
        value: function _checkAndTransit() {
            if (this._iceCompleted && this._signalingConnected) {
                this.transit(new InviteAnswerState(this._rtcSession, this._iceCandidates));
            } else if (!this._iceCompleted) {
                this.logger.log('Pending ICE collection');
            } else {
                //implies _signalingConnected == false
                this.logger.log('Pending signaling connection');
            }
        }
    }, {
        key: 'name',
        get: function get() {
            return "ConnectSignalingAndIceCollectionState";
        }
    }]);
    return ConnectSignalingAndIceCollectionState;
}(RTCSessionState);

var InviteAnswerState = exports.InviteAnswerState = function (_RTCSessionState5) {
    (0, _inherits3.default)(InviteAnswerState, _RTCSessionState5);

    function InviteAnswerState(rtcSession, iceCandidates) {
        (0, _classCallCheck3.default)(this, InviteAnswerState);

        var _this5 = (0, _possibleConstructorReturn3.default)(this, (InviteAnswerState.__proto__ || Object.getPrototypeOf(InviteAnswerState)).call(this, rtcSession));

        _this5._iceCandidates = iceCandidates;
        return _this5;
    }

    (0, _createClass3.default)(InviteAnswerState, [{
        key: 'onEnter',
        value: function onEnter() {
            var rtcSession = this._rtcSession;
            rtcSession._onSignalingStarted(rtcSession);

            rtcSession._signalingChannel.invite(rtcSession._localSessionDescription.sdp, this._iceCandidates);
        }
    }, {
        key: 'onSignalingAnswered',
        value: function onSignalingAnswered(sdp, candidates, inactivityDuration, peerConnectionId, peerConnectionToken) {
            this._rtcSession._sessionReport.userBusyFailure = false;
            this._rtcSession._sessionReport.handshakingFailure = false;

            // signaling answered, set the inactivityDuration, peerConnectionId and peerConnectionToken
            if (this._rtcSession._pcm) {
                this._rtcSession._pcm.inactivityDuration = inactivityDuration;
                this._rtcSession._pcm.peerConnectionId = peerConnectionId;
                this._rtcSession._pcm.peerConnectionToken = peerConnectionToken;
            }

            this.transit(new AcceptState(this._rtcSession, sdp, candidates));
        }
    }, {
        key: 'onSignalingFailed',
        value: function onSignalingFailed(e) {
            var reason;
            if (e.name == _exceptions.BusyExceptionName) {
                this.logger.error('User Busy, possibly multiple CCP windows open', e);
                this._rtcSession._sessionReport.userBusyFailure = true;
                this._rtcSession._sessionReport.handshakingFailure = true;
                reason = _rtc_const.RTC_ERRORS.USER_BUSY;
            } else if (e.name == _exceptions.CallNotFoundExceptionName) {
                this.logger.error('Call not found. One of the participant probably hungup.', e);
                reason = _rtc_const.RTC_ERRORS.CALL_NOT_FOUND;
                this._rtcSession._sessionReport.handshakingFailure = true;
            } else {
                this.logger.error('Failed handshaking with signaling server', e);
                this._rtcSession._sessionReport.userBusyFailure = false;
                this._rtcSession._sessionReport.handshakingFailure = true;
                reason = _rtc_const.RTC_ERRORS.SIGNALLING_HANDSHAKE_FAILURE;
            }
            this.transit(new FailedState(this._rtcSession, reason));
        }
    }, {
        key: 'hangup',
        value: function hangup() {
            if (this._rtcSession._pcm) {
                this.transit(new FailedState(this._rtcSession, "Agent clicks hangs up"));
            }
        }
    }, {
        key: 'name',
        get: function get() {
            return "InviteAnswerState";
        }
    }]);
    return InviteAnswerState;
}(RTCSessionState);

var AcceptState = exports.AcceptState = function (_RTCSessionState6) {
    (0, _inherits3.default)(AcceptState, _RTCSessionState6);

    function AcceptState(rtcSession, sdp, candidates) {
        (0, _classCallCheck3.default)(this, AcceptState);

        var _this6 = (0, _possibleConstructorReturn3.default)(this, (AcceptState.__proto__ || Object.getPrototypeOf(AcceptState)).call(this, rtcSession));

        _this6._sdp = sdp;
        _this6._candidates = candidates;
        return _this6;
    }

    (0, _createClass3.default)(AcceptState, [{
        key: '_createSessionDescription',
        value: function _createSessionDescription(initDict) {
            return new RTCSessionDescription(initDict);
        }
    }, {
        key: '_createRemoteCandidate',
        value: function _createRemoteCandidate(initDict) {
            return new RTCIceCandidate(initDict);
        }
    }, {
        key: 'onEnter',
        value: function onEnter() {
            var self = this;
            var rtcSession = self._rtcSession;

            if (!self._sdp) {
                self.logger.error('Invalid remote SDP');
                rtcSession._stopSession();
                rtcSession._sessionReport.invalidRemoteSDPFailure = true;
                self.transit(new FailedState(rtcSession, _rtc_const.RTC_ERRORS.INVALID_REMOTE_SDP));
                return;
            } else if (!self._candidates || self._candidates.length < 1) {
                self.logger.error('No remote ICE candidate');
                rtcSession._stopSession();
                rtcSession._sessionReport.noRemoteIceCandidateFailure = true;
                self.transit(new FailedState(rtcSession, _rtc_const.RTC_ERRORS.NO_REMOTE_ICE_CANDIDATE));
                return;
            }

            rtcSession._sessionReport.invalidRemoteSDPFailure = false;
            rtcSession._sessionReport.noRemoteIceCandidateFailure = false;
            self._rtcSession._strategy.setRemoteDescription(self, rtcSession);
        }
    }, {
        key: 'onSignalingHandshaked',
        value: function onSignalingHandshaked() {
            this._rtcSession._sessionReport.handshakingTimeMillis = Date.now() - this._rtcSession._signallingConnectTimestamp;
            this._signalingHandshaked = true;
            this._checkAndTransit();
        }
    }, {
        key: '_checkAndTransit',
        value: function _checkAndTransit() {
            if (this._signalingHandshaked && this._remoteDescriptionSet) {
                // when peerConnectionManager initialized and contactToken doesn't exist, rtcSession will move to DisconnectedState
                if (this._rtcSession._pcm && !this._rtcSession._contactToken) {
                    this._rtcSession._pcm._rtcSession = null;
                    this.transit(new DisconnectedState(this._rtcSession));
                } else {
                    this.transit(new TalkingState(this._rtcSession));
                }
            } else if (!this._signalingHandshaked) {
                this.logger.log('Pending handshaking');
            } else {
                //implies _remoteDescriptionSet == false
                this.logger.log('Pending setting remote description');
            }
        }
    }, {
        key: 'onPeerConnectionStateChange',
        value: function onPeerConnectionStateChange() {
            // do nothing
        }
    }, {
        key: 'name',
        get: function get() {
            return "AcceptState";
        }
    }]);
    return AcceptState;
}(RTCSessionState);

/**
 * ConnectContactState
 * when persistent peer connection is enabled for the agent, CCP reuses the existing signaling channel to send
 * ConnectContact request to AmazonConnect and connects the call.
 *
 */


var ConnectContactState = exports.ConnectContactState = function (_RTCSessionState7) {
    (0, _inherits3.default)(ConnectContactState, _RTCSessionState7);

    function ConnectContactState(rtcSession) {
        (0, _classCallCheck3.default)(this, ConnectContactState);
        return (0, _possibleConstructorReturn3.default)(this, (ConnectContactState.__proto__ || Object.getPrototypeOf(ConnectContactState)).call(this, rtcSession));
    }

    (0, _createClass3.default)(ConnectContactState, [{
        key: 'onEnter',
        value: function onEnter() {
            var rtcSession = this._rtcSession;
            var logger = this.logger;
            var self = this;
            rtcSession._sessionReport.isExistingPersistentPeerConnection = true;
            rtcSession._pcm._signalingChannel.connectContact();
            try {
                rtcSession._pcm._mediaStream = self._createMediaStream(rtcSession._pc.getSenders()[0].track);
                rtcSession._onLocalStreamAdded(rtcSession, rtcSession._pcm._mediaStream);
            } catch (error) {
                logger.error("[connectContact] Failed to get audio track from existing peer connection").withException(error);
            }
            this.transit(new TalkingState(this._rtcSession));

            // if the rtcSession is using UserProvidedStream, we do not override it
            if (rtcSession._isUserProvidedStream) {
                logger.log("Not resetting media stream as user provided stream is being used");
            } else {
                var sessionGumPromise = this._gUM(rtcSession._buildMediaConstraints());
                sessionGumPromise.then(function (newMicrophoneStream) {
                    try {
                        var newMicrophoneTrack = newMicrophoneStream.getAudioTracks()[0];
                        // Replace the audio track in the RtcPeerConnection
                        if (rtcSession._isUserProvidedStream) {
                            logger.log("Not resetting media stream as user provided stream was set after rtcJs GUM");
                        } else {
                            rtcSession._pc.getSenders()[0].replaceTrack(newMicrophoneTrack).then(function () {
                                rtcSession._pcm._mediaStream = self._createMediaStream(rtcSession._pc.getSenders()[0].track);
                                rtcSession._onLocalStreamAdded(rtcSession, rtcSession._pcm._mediaStream);
                                logger.log("[connectContact] Audio device set successfully and _onLocalStreamAdded triggered");
                            });
                        }
                    } catch (e) {
                        logger.error("[connectContact] Failed to update audio track for the peer connection").withException(e);
                        return;
                    }
                }).catch(function (e) {
                    logger.error("[connectContact] Failed to get microphone stream from getUserMedia").withException(e);
                    return;
                });
            }
        }
    }, {
        key: '_gUM',
        value: function _gUM(constraints) {
            return this._rtcSession._strategy._gUM(constraints);
        }
    }, {
        key: '_createMediaStream',
        value: function _createMediaStream(track) {
            return this._rtcSession._strategy._createMediaStream(track);
        }
    }, {
        key: 'onSignalingHandshaked',
        value: function onSignalingHandshaked() {
            // do nothing
        }
    }, {
        key: 'name',
        get: function get() {
            return "ConnectContactState";
        }
    }]);
    return ConnectContactState;
}(RTCSessionState);

var TalkingState = exports.TalkingState = function (_RTCSessionState8) {
    (0, _inherits3.default)(TalkingState, _RTCSessionState8);

    function TalkingState() {
        (0, _classCallCheck3.default)(this, TalkingState);
        return (0, _possibleConstructorReturn3.default)(this, (TalkingState.__proto__ || Object.getPrototypeOf(TalkingState)).apply(this, arguments));
    }

    (0, _createClass3.default)(TalkingState, [{
        key: 'onEnter',
        value: function onEnter() {
            var _this9 = this;

            this._startTime = Date.now();
            this._rtcSession._sessionReport.preTalkingTimeMillis = this._startTime - this._rtcSession._connectTimeStamp;
            this._rtcSession._sessionReport.isMediaClusterPath = this._rtcSession._signalingChannel._isMediaClusterPath;
            this._rtcSession._sessionReport.isPersistentPeerConnection = !!(this._rtcSession._pcm && this._rtcSession._pcm.isPersistentConnectionEnabled());

            if (this._rtcSession._pcm) {
                // For persistnet connection, resume the local audio which was paused when the previous RtcSession was destroyed
                this._rtcSession.resumeLocalAudio();
            }
            this._rtcSession._onSessionConnected(this._rtcSession);

            // Calculate time taken to receive the first RTP packet
            var interval = void 0;
            var timeout = void 0;
            var getSynchronizationSourcesAndProcess = function () {
                var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
                    var rtcRtpReceiver, synchronizationSources;
                    return _regenerator2.default.wrap(function _callee$(_context) {
                        while (1) {
                            switch (_context.prev = _context.next) {
                                case 0:
                                    if (_this9._rtcSession && _this9._rtcSession._pc && _this9._rtcSession._pc.getReceivers().length !== 0) {
                                        rtcRtpReceiver = _this9._rtcSession._pc.getReceivers()[0];

                                        if (rtcRtpReceiver instanceof RTCRtpReceiver) {
                                            synchronizationSources = rtcRtpReceiver.getSynchronizationSources();

                                            synchronizationSources.forEach(function (source) {
                                                var firstRTPTimeMillis = source.timestamp - _this9._rtcSession._connectTimeStamp;
                                                if (firstRTPTimeMillis > 0) {
                                                    _this9._rtcSession._sessionReport.firstRTPTimeMillis = firstRTPTimeMillis;
                                                }
                                                // We break out and stop checking for RTP packets as soon as we receive the first packet.
                                                clearInterval(interval);
                                                clearTimeout(timeout);
                                            });
                                        }
                                    }

                                case 1:
                                case 'end':
                                    return _context.stop();
                            }
                        }
                    }, _callee, _this9);
                }));

                return function getSynchronizationSourcesAndProcess() {
                    return _ref.apply(this, arguments);
                };
            }();
            // Set up timeout to stop the interval after 1 seconds
            timeout = setTimeout(function () {
                clearInterval(interval);
                console.log('Timeout reached, stopping the interval');
            }, 1000);

            interval = setInterval(getSynchronizationSourcesAndProcess, 20);
            this.setSubState(new _rtc_session_talking_substates.ConnectedSubstate(this._rtcSession));
        }
    }, {
        key: 'onSignalingReconnected',
        value: function onSignalingReconnected() {}

        /**
         * TODO: after upgrading eslint, use optional chaining
         *  const signalingChannel = this._rtcSession._pcm?._signalingChannel || this._rtcSession._signalingChannel;
         *         signalingChannel.hangup();
         */

    }, {
        key: 'onRemoteHungup',
        value: function onRemoteHungup() {
            if (this._rtcSession._pcm) {
                //Unreachable code.
                this._rtcSession._pcm._signalingChannel.hangup();
            } else {
                this._rtcSession._signalingChannel.hangup();
            }
            this.transit(new DisconnectedState(this._rtcSession));
        }

        /**
         * TODO: after upgrading eslint, use optional chaining
         *  const signalingChannel = this._rtcSession._pcm?._signalingChannel || this._rtcSession._signalingChannel;
         *         signalingChannel.hangup();
         */

    }, {
        key: 'hangup',
        value: function hangup() {
            if (this._rtcSession._pcm) {
                this._rtcSession._pcm._signalingChannel.hangup();
            } else {
                this._rtcSession._signalingChannel.hangup();
            }
            this.transit(new DisconnectedState(this._rtcSession));
        }
    }, {
        key: 'onIceStateChange',
        value: function onIceStateChange(evt) {
            var iceState = this._rtcSession._strategy.onIceStateChange(evt, this._rtcSession._pc);
            this.logger.info('ICE Connection State: ', iceState);

            if (this._subState && typeof this._subState.onIceStateChange === 'function') {
                this._subState.onIceStateChange(evt);
            }

            if (iceState == _rtc_const.ICE_CONNECTION_STATE.DISCONNECTED) {
                this.logger.info('Lost ICE connection');
                this._rtcSession._sessionReport.iceConnectionsLost += 1;
            }

            if (iceState == _rtc_const.ICE_CONNECTION_STATE.FAILED) {
                this._rtcSession._sessionReport.iceConnectionsFailed = true;
            }
        }
    }, {
        key: 'onSignalingConnected',
        value: function onSignalingConnected() {
            if (this._subState && typeof this._subState.onSignalingConnected === 'function') {
                this._subState.onSignalingConnected();
            }
        }
    }, {
        key: 'onSignalingFailed',
        value: function onSignalingFailed(e) {
            if (this._subState && typeof this._subState.onSignalingFailed === 'function') {
                this._subState.onSignalingFailed(e);
            }
            var reason;
            if (e.name == _exceptions.AccessDeniedExceptionName) {
                this.logger.error('[TalkingState] Access Denied by server', e);
                this._rtcSession._sessionReport.handshakingFailure = true;
                reason = _rtc_const.RTC_ERRORS.SIGNALLING_HANDSHAKE_FAILURE;
                this.transit(new FailedState(this._rtcSession, reason));
            } else {
                this.logger.error('[TalkingState] Failed handshaking with signaling server', e);
            }
        }
    }, {
        key: 'onSignalingAnswered',
        value: function onSignalingAnswered(sdp, candidates) {
            if (this._subState && typeof this._subState.onSignalingAnswered === 'function') {
                this._subState.onSignalingAnswered(sdp, candidates);
            }
        }
    }, {
        key: 'onSignalingHandshaked',
        value: function onSignalingHandshaked() {
            if (this._subState && typeof this._subState.onSignalingHandshaked === 'function') {
                this._subState.onSignalingHandshaked();
            }
        }
    }, {
        key: 'onIceCandidate',
        value: function onIceCandidate(evt) {
            if (this._subState && typeof this._subState.onIceCandidate === 'function') {
                this._subState.onIceCandidate(evt);
            }
        }
    }, {
        key: 'onIceRestartFailure',
        value: function onIceRestartFailure() {
            if (this._subState && typeof this._subState.onIceRestartFailure === 'function') {
                this._subState.onIceRestartFailure();
            }
        }
    }, {
        key: '_checkAndTransit',
        value: function _checkAndTransit() {
            if (this._subState && typeof this._subState._checkAndTransit === 'function') {
                this._subState._checkAndTransit();
            }
        }
    }, {
        key: 'setSubState',
        value: function setSubState(nextState) {
            this.logger.info('Substate: ' + (this._subState ? this._subState.name : 'null') + ' => ' + nextState.name);
            if (this._subState) {
                this._subState.onExit();
            }
            this._subState = nextState;
            this._subState.onEnter();
        }
    }, {
        key: 'onPeerConnectionStateChange',
        value: function onPeerConnectionStateChange() {
            var peerConnectionState = this._rtcSession._strategy.onPeerConnectionStateChange(this._rtcSession._pc);
            this.logger.info('Peer Connection State: ', peerConnectionState);

            if (peerConnectionState == _rtc_const.PEER_CONNECTION_STATE.FAILED) {
                this._rtcSession._sessionReport.peerConnectionFailed = true;
            }
        }
    }, {
        key: 'onExit',
        value: function onExit() {
            this._rtcSession._sessionReport.talkingTimeMillis = Date.now() - this._startTime;
            if (!this._rtcSession._pcm || !this._rtcSession._pcm.isPersistentConnectionEnabled()) {
                this._rtcSession._detachMedia();
            }
            this._rtcSession._sessionReport.sessionEndTime = new Date();
            this._rtcSession._onSessionCompleted(this._rtcSession);
            if (this._subState) {
                this._subState.onExit();
            }
        }
    }, {
        key: 'name',
        get: function get() {
            return "TalkingState";
        }
    }]);
    return TalkingState;
}(RTCSessionState);

var CleanUpState = exports.CleanUpState = function (_RTCSessionState9) {
    (0, _inherits3.default)(CleanUpState, _RTCSessionState9);

    function CleanUpState() {
        (0, _classCallCheck3.default)(this, CleanUpState);
        return (0, _possibleConstructorReturn3.default)(this, (CleanUpState.__proto__ || Object.getPrototypeOf(CleanUpState)).apply(this, arguments));
    }

    (0, _createClass3.default)(CleanUpState, [{
        key: 'onEnter',
        value: function onEnter() {
            if (this._rtcSession._pcm) {
                try {
                    // rtcSession._pcm._mediaStream would be out of sync if the audio device changed during the call
                    this._rtcSession._pcm._mediaStream = this._rtcSession._strategy._createMediaStream(this._rtcSession._pc.getSenders()[0].track);
                } catch (error) {
                    this.logger.error("Creating MediaStream error: ", error);
                }
                // For persistent connection, pause the local audio when we destroy the RtcSession, because we don't want to transmit any audio when agent is idle
                this._rtcSession.pauseLocalAudio();
            }
            this._startTime = Date.now();
            this._rtcSession._stopSession();
            this._rtcSession._sessionReport.cleanupTimeMillis = Date.now() - this._startTime;
            this._rtcSession._onSessionDestroyed(this._rtcSession, this._rtcSession._sessionReport);
        }
    }, {
        key: 'hangup',
        value: function hangup() {
            //do nothing, already at the end of lifecycle
        }
    }, {
        key: 'name',
        get: function get() {
            return "CleanUpState";
        }
    }]);
    return CleanUpState;
}(RTCSessionState);

var DisconnectedState = exports.DisconnectedState = function (_CleanUpState) {
    (0, _inherits3.default)(DisconnectedState, _CleanUpState);

    function DisconnectedState() {
        (0, _classCallCheck3.default)(this, DisconnectedState);
        return (0, _possibleConstructorReturn3.default)(this, (DisconnectedState.__proto__ || Object.getPrototypeOf(DisconnectedState)).apply(this, arguments));
    }

    (0, _createClass3.default)(DisconnectedState, [{
        key: 'onSignalingHandshaked',
        value: function onSignalingHandshaked() {
            // do nothing
        }
    }, {
        key: 'onPeerConnectionStateChange',
        value: function onPeerConnectionStateChange() {
            // do nothing
        }
    }, {
        key: 'name',
        get: function get() {
            return "DisconnectedState";
        }
    }]);
    return DisconnectedState;
}(CleanUpState);

var FailedState = exports.FailedState = function (_CleanUpState2) {
    (0, _inherits3.default)(FailedState, _CleanUpState2);

    function FailedState(rtcSession, failureReason) {
        (0, _classCallCheck3.default)(this, FailedState);

        var _this12 = (0, _possibleConstructorReturn3.default)(this, (FailedState.__proto__ || Object.getPrototypeOf(FailedState)).call(this, rtcSession));

        _this12._failureReason = failureReason;
        return _this12;
    }

    (0, _createClass3.default)(FailedState, [{
        key: 'onEnter',
        value: function onEnter() {
            this._rtcSession._sessionReport.sessionEndTime = new Date();
            this._rtcSession._onSessionFailed(this._rtcSession, this._failureReason);
            if (this._rtcSession._pcm) {
                this._rtcSession._pcm.destroy();
            }
            (0, _get3.default)(FailedState.prototype.__proto__ || Object.getPrototypeOf(FailedState.prototype), 'onEnter', this).call(this);
        }
    }, {
        key: 'name',
        get: function get() {
            return "FailedState";
        }
    }]);
    return FailedState;
}(CleanUpState);

var RtcSession = function () {
    /**
     * Build an AmazonConnect RTC session.
     * @param {string} signalingUri (optional, applies to CCPv1)
     * @param {*} iceServers Array of ice servers
     * @param {string} contactToken A string representing the contact token (optional)
     * @param {object} logger An object provides logging functions, such as console
     * @param {string} contactId Must be UUID, uniquely identifies the session.
     * @param {string} connectionId Refers to media leg id
     * @param {string} wssManager - websocket manager
     * @param {object} strategy - VDI strategy indicates which WebRTC SDK to use: standard, Citrix, WorkSpace
     * @param {Object} peerConnectionManager - refers to the peerConnectionManager object which manages rtcSession and peer connection
     */
    function RtcSession(signalingUri, iceServers, contactToken, logger, contactId, connectionId, wssManager) {
        var strategy = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : new _StandardStrategy2.default();
        var peerConnectionManager = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : null;
        (0, _classCallCheck3.default)(this, RtcSession);

        if (!(strategy instanceof _CCPInitiationStrategyInterface2.default)) {
            throw new Error('Expected a strategy of type CCPInitiationStrategyInterface');
        }
        // throw IllegalParameters error when signalingUri is missing and peer connection manager is not defined
        if (!peerConnectionManager && typeof signalingUri !== 'string' || signalingUri && signalingUri.trim().length === 0) {
            throw new _exceptions.IllegalParameters('signalingUri required');
        }
        if (!iceServers) {
            throw new _exceptions.IllegalParameters('iceServers required');
        }
        if ((typeof logger === 'undefined' ? 'undefined' : (0, _typeof3.default)(logger)) !== 'object') {
            throw new _exceptions.IllegalParameters('logger required');
        }
        if (!contactId) {
            this._callId = (0, _v2.default)();
        } else {
            this._callId = contactId;
        }
        this._strategy = strategy;
        this._connectionId = connectionId;
        this._wssManager = wssManager;
        this._sessionReport = new _session_report.SessionReport();
        this._signalingUri = signalingUri;
        this._iceServers = iceServers;
        this._contactToken = contactToken;
        this._originalLogger = logger;
        this._logger = (0, _utils.wrapLogger)(this._originalLogger, this._callId, 'SESSION');
        this._pcm = peerConnectionManager;
        this._iceTimeoutMillis = _rtc_const.DEFAULT_ICE_TIMEOUT_MS;
        this._gumTimeoutMillis = _rtc_const.DEFAULT_GUM_TIMEOUT_MS;

        this._enableAudio = true;
        this._enableVideo = false;
        this._facingMode = 'user';
        this._legacyStatsReportSupport = false;
        /**
         * user may provide the stream to the RtcSession directly to connect to the other end.
         * user may also acquire the stream from the local device.
         * This flag is used to track where the stream is acquired.
         * If it's acquired from local devices, then we must close the stream when the session ends.
         * If it's provided by user (rather than local camera/microphone), then we should leave it open when the
         * session ends.
         */
        this._isUserProvidedStream = false;

        this._onGumError = this._onGumSuccess = this._onLocalStreamAdded = this._onSessionFailed = this._onSessionInitialized = this._onSignalingConnected = this._onIceCollectionComplete = this._onSignalingStarted = this._onSessionConnected = this._onRemoteStreamAdded = this._onSessionCompleted = this._onSessionDestroyed = function () {};
    }

    (0, _createClass3.default)(RtcSession, [{
        key: 'pauseLocalVideo',
        value: function pauseLocalVideo() {
            if (this._localStream) {
                var videoTrack = this._localStream.getVideoTracks()[0];
                if (videoTrack) {
                    videoTrack.enabled = false;
                }
            }
        }
    }, {
        key: 'resumeLocalVideo',
        value: function resumeLocalVideo() {
            if (this._localStream) {
                var videoTrack = this._localStream.getVideoTracks()[0];
                if (videoTrack) {
                    videoTrack.enabled = true;
                }
            }
        }
    }, {
        key: 'pauseRemoteVideo',
        value: function pauseRemoteVideo() {
            if (this._remoteVideoStream) {
                var videoTrack = this._remoteVideoStream.getTracks()[1];
                if (videoTrack) {
                    videoTrack.enabled = false;
                }
            }
        }
    }, {
        key: 'resumeRemoteVideo',
        value: function resumeRemoteVideo() {
            if (this._remoteVideoStream) {
                var videoTrack = this._remoteVideoStream.getTracks()[1];
                if (videoTrack) {
                    videoTrack.enabled = true;
                }
            }
        }

        /**
         * TODO: fix eslint version to use optional chaining
         * const audioTrack = this._pcm?._mediaStream?.getAudioTracks()[0] || this._localStream?.getAudioTracks()[0];
         *     if (audioTrack) {
         *         audioTrack.enabled = false;
         *     }
         */

    }, {
        key: 'pauseLocalAudio',
        value: function pauseLocalAudio() {
            var audioTrack;
            if (this._pcm) {
                if (this._pcm._mediaStream) {
                    audioTrack = this._pcm._mediaStream.getAudioTracks()[0];
                    if (audioTrack) {
                        audioTrack.enabled = false;
                    }
                }
            } else {
                if (this._localStream) {
                    audioTrack = this._localStream.getAudioTracks()[0];
                    if (audioTrack) {
                        audioTrack.enabled = false;
                    }
                }
            }
        }

        /**
         * TODO: fix eslint version to use optional chaining
         * const audioTrack = this._pcm?._mediaStream?.getAudioTracks()[0] || this._localStream?.getAudioTracks()[0];
         *     if (audioTrack) {
         *         audioTrack.enabled = true;
         *     }
         */

    }, {
        key: 'resumeLocalAudio',
        value: function resumeLocalAudio() {
            var audioTrack;
            if (this._pcm) {
                if (this._pcm._mediaStream) {
                    audioTrack = this._pcm._mediaStream.getAudioTracks()[0];
                    if (audioTrack) {
                        audioTrack.enabled = true;
                    }
                }
            } else {
                if (this._localStream) {
                    audioTrack = this._localStream.getAudioTracks()[0];
                    if (audioTrack) {
                        audioTrack.enabled = true;
                    }
                }
            }
        }
    }, {
        key: 'pauseRemoteAudio',
        value: function pauseRemoteAudio() {
            if (this._remoteAudioStream) {
                var audioTrack = this._remoteAudioStream.getTracks()[0];
                if (audioTrack) {
                    audioTrack.enabled = false;
                }
            }
        }
    }, {
        key: 'resumeRemoteAudio',
        value: function resumeRemoteAudio() {
            if (this._remoteAudioStream) {
                var audioTrack = this._remoteAudioStream.getTracks()[0];
                if (audioTrack) {
                    audioTrack.enabled = true;
                }
            }
        }
        /**
         * Callback when gUM succeeds.
         * First param is RtcSession object.
         */

    }, {
        key: 'transit',
        value: function transit(nextState) {
            try {
                this._logger.info((this._state ? this._state.name : 'null') + ' => ' + nextState.name);
                if (this._state && this._state.onExit) {
                    this._state.onExit();
                }
            } finally {
                this._state = nextState;
                if (nextState.onEnter) {
                    try {
                        nextState.onEnter();
                    } catch (e) {
                        this._logger.warn(nextState.name + '#onEnter failed', e);
                        throw e; // eslint-disable-line no-unsafe-finally
                    }
                }
            }
        }
    }, {
        key: '_createSignalingChannel',
        value: function _createSignalingChannel() {
            var signalingChannel = new _signaling2.default(this._callId, this._signalingUri, this._contactToken, this._originalLogger, this._signalingConnectTimeout, this._connectionId, this._wssManager, this._iceRestart, this._pcm);
            signalingChannel.onConnected = (0, _utils.hitch)(this, this._signalingConnected);
            signalingChannel.onAnswered = (0, _utils.hitch)(this, this._signalingAnswered);
            signalingChannel.onHandshaked = (0, _utils.hitch)(this, this._signalingHandshaked);
            signalingChannel.onRemoteHungup = (0, _utils.hitch)(this, this._signalingRemoteHungup);
            signalingChannel.onFailed = (0, _utils.hitch)(this, this._signalingFailed);
            signalingChannel.onDisconnected = (0, _utils.hitch)(this, this._signalingDisconnected);

            this._signalingChannel = signalingChannel;
            if (this._pcm) {
                this._pcm._signalingChannel = signalingChannel;
            }
            return signalingChannel;
        }
    }, {
        key: '_bindSignalingChannel',
        value: function _bindSignalingChannel() {
            var signalingChannel = this._pcm._signalingChannel;
            signalingChannel.onConnected = (0, _utils.hitch)(this, this._signalingConnected);
            signalingChannel.onAnswered = (0, _utils.hitch)(this, this._signalingAnswered);
            signalingChannel.onHandshaked = (0, _utils.hitch)(this, this._signalingHandshaked);
            signalingChannel.onRemoteHungup = (0, _utils.hitch)(this, this._signalingRemoteHungup);
            signalingChannel.onFailed = (0, _utils.hitch)(this, this._signalingFailed);
            signalingChannel.onDisconnected = (0, _utils.hitch)(this, this._signalingDisconnected);

            this._signalingChannel = signalingChannel;
            return signalingChannel;
        }
    }, {
        key: '_signalingConnected',
        value: function _signalingConnected() {
            this._state.onSignalingConnected();
        }
    }, {
        key: '_signalingAnswered',
        value: function _signalingAnswered(sdp, candidates, inactivityDuration, peerConnectionId, peerConnectionToken) {
            this._state.onSignalingAnswered(sdp, candidates, inactivityDuration, peerConnectionId, peerConnectionToken);
        }
    }, {
        key: '_signalingHandshaked',
        value: function _signalingHandshaked() {
            this._state.onSignalingHandshaked();
        }
    }, {
        key: '_signalingRemoteHungup',
        value: function _signalingRemoteHungup() {
            this._state.onRemoteHungup();
        }
    }, {
        key: '_signalingFailed',
        value: function _signalingFailed(e) {
            this._state.onSignalingFailed(e);
        }
    }, {
        key: '_signalingDisconnected',
        value: function _signalingDisconnected() {}
    }, {
        key: '_createPeerConnection',
        value: function _createPeerConnection(configuration, optionalConfiguration) {
            return this._strategy._createPeerConnection(configuration, optionalConfiguration);
        }
    }, {
        key: 'connect',
        value: function connect(pc) {
            var self = this;
            var now = new Date();
            self._sessionReport.sessionStartTime = now;
            self._connectTimeStamp = now.getTime();
            if (pc && pc.signalingState != 'closed') {
                self._pc = pc;
            } else {
                if (pc) {
                    pc.close();
                    pc = null;
                }
                _rtc_const.RTC_PEER_CONNECTION_CONFIG.iceServers = self._iceServers;
                _rtc_const.RTC_PEER_CONNECTION_CONFIG.iceCandidatePoolSize = _rtc_const.DEFAULT_ICE_CANDIDATE_POOL_SIZE;
                self._pc = self._createPeerConnection(_rtc_const.RTC_PEER_CONNECTION_CONFIG, _rtc_const.RTC_PEER_CONNECTION_OPTIONAL_CONFIG);
            }
            self._pc.ontrack = (0, _utils.hitch)(self, self._ontrack);
            self._pc.onicecandidate = (0, _utils.hitch)(self, self._onIceCandidate);
            self._pc.onconnectionstatechange = (0, _utils.hitch)(self, self._onPeerConnectionStateChange);
            self._pc.oniceconnectionstatechange = (0, _utils.hitch)(self, self._onIceStateChange);

            // PersistentConnection enabled transit to ConnectContactState
            if (self._pcm && self._pcm.isPersistentConnectionEnabled() && self._pcm._signalingChannel) {
                self._bindSignalingChannel(); // binding the existing signaling channel
                self.transit(new ConnectContactState(self));
            } else {
                self.transit(new GrabLocalMediaState(self));
            }
        }
    }, {
        key: 'accept',
        value: function accept() {
            throw new _exceptions.UnsupportedOperation('accept does not go through signaling channel at this moment');
        }
    }, {
        key: 'hangup',
        value: function hangup() {
            this._state.hangup();
        }

        /**
         * Get a promise containing an object with two named lists of audio stats, one for each channel on each
         * media type of 'video' and 'audio'.
         * @return Rejected promise if failed to get MediaRtpStats. The promise is never resolved with null value.
         */

    }, {
        key: 'getStats',
        value: function () {
            var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3() {
                var _this13 = this;

                var timestamp, getStatsForType, audioInputStats, audioOutputStats;
                return _regenerator2.default.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                timestamp = new Date();

                                getStatsForType = function () {
                                    var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(streamType) {
                                        var rawStats;
                                        return _regenerator2.default.wrap(function _callee2$(_context2) {
                                            while (1) {
                                                switch (_context2.prev = _context2.next) {
                                                    case 0:
                                                        _context2.next = 2;
                                                        return _this13._pc.getStats();

                                                    case 2:
                                                        rawStats = _context2.sent;
                                                        return _context2.abrupt('return', (0, _rtpStats.extractMediaStatsFromStats)(timestamp, rawStats, streamType));

                                                    case 4:
                                                    case 'end':
                                                        return _context2.stop();
                                                }
                                            }
                                        }, _callee2, _this13);
                                    }));

                                    return function getStatsForType(_x3) {
                                        return _ref3.apply(this, arguments);
                                    };
                                }();

                                if (!(this._pc && this._pc.signalingState === 'stable')) {
                                    _context3.next = 13;
                                    break;
                                }

                                _context3.next = 5;
                                return getStatsForType('audio_input');

                            case 5:
                                audioInputStats = _context3.sent;
                                _context3.next = 8;
                                return getStatsForType('audio_output');

                            case 8:
                                audioOutputStats = _context3.sent;


                                // For consistency's sake, coalesce rttMilliseconds into the output for audio
                                if (audioInputStats && audioInputStats.rttMilliseconds !== null) {
                                    audioOutputStats._rttMilliseconds = audioInputStats.rttMilliseconds;
                                }

                                return _context3.abrupt('return', {
                                    audioInputStats: audioInputStats,
                                    audioOutputStats: audioOutputStats
                                });

                            case 13:
                                return _context3.abrupt('return', Promise.reject(new _exceptions.IllegalState()));

                            case 14:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee3, this);
            }));

            function getStats() {
                return _ref2.apply(this, arguments);
            }

            return getStats;
        }()

        /**
         * Get a promise of MediaRtpStats object for remote audio (from Amazon Connect to client).
         * @return Rejected promise if failed to get MediaRtpStats. The promise is never resolved with null value.
         * @deprecated in favor of getStats()
         */

    }, {
        key: 'getRemoteAudioStats',
        value: function getRemoteAudioStats() {
            return this.getStats().then(function (stats) {
                if (stats.audioOutputStats) {
                    return stats.audioOutputStats;
                } else {
                    return Promise.reject(new _exceptions.IllegalState());
                }
            });
        }

        /**
         * Get a promise of MediaRtpStats object for user audio (from client to Amazon Connect).
         * @return Rejected promise if failed to get MediaRtpStats. The promise is never resolved with null value.
         * @deprecated in favor of getStats()
         */

    }, {
        key: 'getUserAudioStats',
        value: function getUserAudioStats() {
            return this.getStats().then(function (stats) {
                if (stats.audioInputStats) {
                    return stats.audioInputStats;
                } else {
                    return Promise.reject(new _exceptions.IllegalState());
                }
            });
        }
    }, {
        key: '_onIceCandidate',
        value: function _onIceCandidate(evt) {
            this._state.onIceCandidate(evt);
        }
    }, {
        key: '_onPeerConnectionStateChange',
        value: function _onPeerConnectionStateChange() {
            this._state.onPeerConnectionStateChange();
        }
    }, {
        key: '_onIceStateChange',
        value: function _onIceStateChange(evt) {
            this._state.onIceStateChange(evt);
        }

        /**
         * Attach remote media stream to web element.
         */

    }, {
        key: '_ontrack',
        value: function _ontrack(evt) {
            this._strategy._ontrack(this, evt);
            this._onRemoteStreamAdded(this, evt.streams[0]);
        }
    }, {
        key: '_detachMedia',
        value: function _detachMedia() {
            if (this._remoteVideoElement) {
                this._remoteVideoElement.srcObject = null;
            }
            if (this._remoteAudioElement) {
                this._remoteAudioElement.srcObject = null;
                this._remoteAudioStream = null;
            }
        }
    }, {
        key: '_stopSession',
        value: function _stopSession() {
            // When peerConnectionManager does not exist or PersistentConnection flag if false, we will close local  media stream
            if (!this._pcm || !this._pcm.isPersistentConnectionEnabled()) {
                try {
                    if (this._localStream && !this._isUserProvidedStream) {
                        (0, _utils.closeStream)(this._localStream);
                        this._localStream = null;
                        this._isUserProvidedStream = false;
                    }
                } finally {
                    try {
                        if (this._pc) {
                            this._pc.close();
                        }
                    } catch (e) {
                        // eat exception
                    } finally {
                        this._pc = null;
                    }
                }
            }
        }
    }, {
        key: '_buildMediaConstraints',
        value: function _buildMediaConstraints() {
            var self = this;
            var mediaConstraints = {};

            self._strategy._buildMediaConstraints(self, mediaConstraints);

            if (self._enableVideo) {
                var videoConstraints = {};
                var widthConstraints = {};
                var heightConstraints = {};
                var frameRateConstraints = {};

                //build video width constraints
                if (typeof self._idealVideoWidth !== 'undefined') {
                    widthConstraints.ideal = self._idealVideoWidth;
                }
                if (typeof self._maxVideoWidth !== 'undefined') {
                    widthConstraints.max = self._maxVideoWidth;
                }
                if (typeof self._minVideoWidth !== 'undefined') {
                    widthConstraints.min = self._minVideoWidth;
                }
                // build video height constraints
                if (typeof self._idealVideoHeight !== 'undefined') {
                    heightConstraints.ideal = self._idealVideoHeight;
                }
                if (typeof self._maxVideoHeight !== 'undefined') {
                    heightConstraints.max = self._maxVideoHeight;
                }
                if (typeof self._minVideoHeight !== 'undefined') {
                    heightConstraints.min = self._minVideoHeight;
                }
                if (Object.keys(widthConstraints).length > 0 && Object.keys(heightConstraints).length > 0) {
                    videoConstraints.width = widthConstraints;
                    videoConstraints.height = heightConstraints;
                }
                // build frame rate constraints
                if (typeof self._videoFrameRate !== 'undefined') {
                    frameRateConstraints.ideal = self._videoFrameRate;
                }
                if (typeof self._minVideoFrameRate !== 'undefined') {
                    frameRateConstraints.min = self._minVideoFrameRate;
                }
                if (typeof self._maxVideoFrameRate !== 'undefined') {
                    frameRateConstraints.max = self._maxVideoFrameRate;
                }
                if (Object.keys(frameRateConstraints).length > 0) {
                    videoConstraints.frameRate = frameRateConstraints;
                }

                // build facing mode constraints
                if (self._facingMode !== 'user' && self._facingMode !== "environment") {
                    self._facingMode = 'user';
                }
                videoConstraints.facingMode = self._facingMode;

                // set video constraints
                if (Object.keys(videoConstraints).length > 0) {
                    mediaConstraints.video = videoConstraints;
                } else {
                    mediaConstraints.video = true;
                }
            }

            return mediaConstraints;
        }
    }, {
        key: 'sessionReport',
        get: function get() {
            return this._sessionReport;
        }
    }, {
        key: 'callId',
        get: function get() {
            return this._callId;
        }
        /**
         * getMediaStream returns the local stream, which may be acquired from local device or from user provided stream.
         * Rather than getting a stream by calling getUserMedia (which gets a stream from local device such as camera),
         * user could also provide the stream to the RtcSession directly to connect to the other end.
         */

    }, {
        key: 'mediaStream',
        get: function get() {
            return this._localStream;
        },

        /**
         * Optional. RtcSession will grab input device if this is not specified.
         * Please note: this RtcSession class only support single audio track and/or single video track.
         */
        set: function set(input) {
            this._localStream = input;
            if (this._pcm) {
                this._pcm._mediaStream = input;
            }
            this._isUserProvidedStream = true;
        }
        /**
         * Needed, expect an audio element that can be used to play remote audio stream.
         */

    }, {
        key: 'remoteVideoStream',
        get: function get() {
            return this._remoteVideoStream;
        }
    }, {
        key: 'onGumSuccess',
        set: function set(handler) {
            this._onGumSuccess = handler;
        }
        /**
         * Callback when gUM fails.
         * First param is RtcSession object.
         * Second param is the error.
         */

    }, {
        key: 'onGumError',
        set: function set(handler) {
            this._onGumError = handler;
        }
        /**
         * Callback if failed initializing local resources
         * First param is RtcSession object.
         */

    }, {
        key: 'onSessionFailed',
        set: function set(handler) {
            this._onSessionFailed = handler;
        }
        /**
         * Callback after local user media stream is added to the session.
         * First param is RtcSession object.
         * Second param is media stream
         */

    }, {
        key: 'onLocalStreamAdded',
        set: function set(handler) {
            this._onLocalStreamAdded = handler;
        }
        /**
         * Callback when all local resources are ready. Establishing signaling chanel and ICE collection happens at the same time after this.
         * First param is RtcSession object.
         */

    }, {
        key: 'onSessionInitialized',
        set: function set(handler) {
            this._onSessionInitialized = handler;
        }
        /**
         * Callback when signaling channel is established.
         * RTC session will move forward only if onSignalingConnected and onIceCollectionComplete are both called.
         *
         * First param is RtcSession object.
         */

    }, {
        key: 'onSignalingConnected',
        set: function set(handler) {
            this._onSignalingConnected = handler;
        }
        /**
         * Callback when ICE collection completes either because there is no more candidate or collection timed out.
         * RTC session will move forward only if onSignalingConnected and onIceCollectionComplete are both called.
         *
         * First param is RtcSession object.
         * Second param is boolean, TRUE - ICE collection timed out.
         * Third param is number of candidates collected.
         */

    }, {
        key: 'onIceCollectionComplete',
        set: function set(handler) {
            this._onIceCollectionComplete = handler;
        }
        /**
         * Callback when signaling channel is established and ICE collection completed with at least one candidate.
         * First param is RtcSession object.
         */

    }, {
        key: 'onSignalingStarted',
        set: function set(handler) {
            this._onSignalingStarted = handler;
        }
        /**
         * Callback when the call is established (handshaked and media stream should be flowing)
         * First param is RtcSession object.
         */

    }, {
        key: 'onSessionConnected',
        set: function set(handler) {
            this._onSessionConnected = handler;
        }
        /**
         * Callback after remote media stream is added to the session.
         * This could be called multiple times with the same stream if multiple tracks are included in the same stream.
         *
         * First param is RtcSession object.
         * Second param is media stream track.
         */

    }, {
        key: 'onRemoteStreamAdded',
        set: function set(handler) {
            this._onRemoteStreamAdded = handler;
        }
        /**
         * Callback when the hangup is initiated (implies the call was successfully established).
         * First param is RtcSession object.
         */

    }, {
        key: 'onSessionCompleted',
        set: function set(handler) {
            this._onSessionCompleted = handler;
        }
        /**
         * Callback after session is cleaned up, no matter if the call was successfully established or not.
         * First param is RtcSession object.
         * Second param is SessionReport object.
         */

    }, {
        key: 'onSessionDestroyed',
        set: function set(handler) {
            this._onSessionDestroyed = handler;
        }
    }, {
        key: 'enableAudio',
        set: function set(flag) {
            this._enableAudio = flag;
        }
    }, {
        key: 'echoCancellation',
        set: function set(flag) {
            this._echoCancellation = flag;
        }
    }, {
        key: 'enableVideo',
        set: function set(flag) {
            this._enableVideo = flag;
        }
    }, {
        key: 'maxVideoFrameRate',
        set: function set(frameRate) {
            this._maxVideoFrameRate = frameRate;
        }
    }, {
        key: 'minVideoFrameRate',
        set: function set(frameRate) {
            this._minVideoFrameRate = frameRate;
        }
    }, {
        key: 'videoFrameRate',
        set: function set(frameRate) {
            this._videoFrameRate = frameRate;
        }
    }, {
        key: 'maxVideoWidth',
        set: function set(width) {
            this._maxVideoWidth = width;
        }
    }, {
        key: 'minVideoWidth',
        set: function set(width) {
            this._minVideoWidth = width;
        }
    }, {
        key: 'idealVideoWidth',
        set: function set(width) {
            this._idealVideoWidth = width;
        }
    }, {
        key: 'maxVideoHeight',
        set: function set(height) {
            this._maxVideoHeight = height;
        }
    }, {
        key: 'minVideoHeight',
        set: function set(height) {
            this._minVideoHeight = height;
        }
    }, {
        key: 'idealVideoHeight',
        set: function set(height) {
            this._idealVideoHeight = height;
        }
    }, {
        key: 'facingMode',
        set: function set(mode) {
            this._facingMode = mode;
        }
    }, {
        key: 'remoteAudioElement',
        set: function set(element) {
            this._remoteAudioElement = element;
        }
    }, {
        key: 'remoteVideoElement',
        set: function set(element) {
            this._remoteVideoElement = element;
        }
        /**
         * Override the default signaling connect time out.
         */

    }, {
        key: 'signalingConnectTimeout',
        set: function set(ms) {
            this._signalingConnectTimeout = ms;
        }
        /**
         * Override the default ICE collection time limit.
         */

    }, {
        key: 'iceTimeoutMillis',
        set: function set(timeoutMillis) {
            this._iceTimeoutMillis = timeoutMillis;
        }
        /**
         * Override the default GUM timeout time limit.
         */

    }, {
        key: 'gumTimeoutMillis',
        set: function set(timeoutMillis) {
            this._gumTimeoutMillis = timeoutMillis;
        }
        /**
         * connect-rtc-js initiate the handshaking with all browser supported codec by default, Amazon Connect service will choose the codec according to its preference setting.
         * Setting this attribute will force connect-rtc-js to only use specified codec.
         * WARNING: Setting this to unsupported codec will cause the failure of handshaking.
         * Supported audio codecs: opus.
         */

    }, {
        key: 'forceAudioCodec',
        set: function set(audioCodec) {
            this._forceAudioCodec = audioCodec;
        }

        /**
         * connect-rtc-js initiate the handshaking with all browser supported codec by default, Amazon Connect service will choose the codec according to its preference setting.
         * Setting this attribute will force connect-rtc-js to only use specified codec.
         * WARNING: Setting this to unsupported codec will cause the failure of handshaking.
         * Supported video codecs: VP8, VP9, H264.
         */

    }, {
        key: 'forceVideoCodec',
        set: function set(videoCodec) {
            this._forceVideoCodec = videoCodec;
        }

        /**
         * connect-rtc-js disables OPUS DTX by default because it harms audio quality.
         * @param flag boolean
         */

    }, {
        key: 'enableOpusDtx',
        set: function set(flag) {
            this._enableOpusDtx = flag;
        }
    }]);
    return RtcSession;
}();

exports.default = RtcSession;

},{"./exceptions":152,"./rtc_const":153,"./rtc_session_talking_substates":157,"./rtp-stats":158,"./session_report":159,"./signaling":160,"./strategies/CCPInitiationStrategyInterface":161,"./strategies/StandardStrategy":165,"./utils":167,"babel-runtime/helpers/asyncToGenerator":16,"babel-runtime/helpers/classCallCheck":17,"babel-runtime/helpers/createClass":18,"babel-runtime/helpers/get":19,"babel-runtime/helpers/inherits":20,"babel-runtime/helpers/possibleConstructorReturn":21,"babel-runtime/helpers/typeof":24,"babel-runtime/regenerator":27,"sdp":133,"uuid/v4":137}],157:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AcceptSubstate = exports.InviteAnswerSubstate = exports.ConnectSignalingAndIceCollectionSubstate = exports.SetLocalSessionDescriptionSubstate = exports.IceRestartSubstate = exports.ConnectedSubstate = undefined;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _rtc_const = require('./rtc_const');

var _utils = require('./utils');

var _exceptions = require('./exceptions');

var _sdp = require('sdp');

var _signaling = require('./signaling');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * ConnectedSubstate is the default substate of the rtcSession talking state
 * It monitors the peer connection ICE connection state and attempts to reconnect if disconnected.
 * If the ICE connection state changes to 'DISCONNECTED' more than 3 seconds, it triggers an ICE restart.
 */

var ConnectedSubstate = exports.ConnectedSubstate = function () {
    (0, _createClass3.default)(ConnectedSubstate, [{
        key: 'logger',
        get: function get() {
            return this._rtcSession._logger;
        }
    }]);

    function ConnectedSubstate(rtcSession) {
        (0, _classCallCheck3.default)(this, ConnectedSubstate);

        this._rtcSession = rtcSession;
        this.retryInterval = 3000; // Retry interval set to 3 seconds
    }

    (0, _createClass3.default)(ConnectedSubstate, [{
        key: 'onEnter',
        value: function onEnter() {}
        // onIceStateChange will be invoked when peer connection Ice Connection state change

    }, {
        key: 'onIceStateChange',
        value: function onIceStateChange(evt) {
            var _this = this;

            var iceState = this._rtcSession._strategy.onIceStateChange(evt, this._rtcSession._pc);
            this.logger.info('ICE Connection State: ', iceState);

            if (iceState == _rtc_const.ICE_CONNECTION_STATE.DISCONNECTED) {
                // Check if the rtcSession supports ICE restart
                if (this._rtcSession._pcm && this._rtcSession._pcm._peerConnectionToken) {
                    this.logger.info('Detected Lost ICE connection, pending IceRestart');
                    this.IceRestartTimeoutId = setTimeout(function () {
                        if (_this._rtcSession._pc.iceConnectionState === _rtc_const.ICE_CONNECTION_STATE.DISCONNECTED) {
                            _this.logger.info('Trying to restart ICE connection');
                            _this._rtcSession._sessionReport.iceRestartAttempts += 1;
                            _this._rtcSession._state.setSubState(new IceRestartSubstate(_this._rtcSession));
                        } else {
                            _this.logger.info('The network recovered, IceRestart cancelled');
                        }
                    }, this.retryInterval);
                } else {
                    this.logger.info('Detected Lost ICE connection, IceRestart not supported');
                }
            }
        }
    }, {
        key: 'onSignalingFailed',
        value: function onSignalingFailed(e) {
            if (this._rtcSession._pcm && this._rtcSession._pcm._peerConnectionToken) {
                if (e.name === _exceptions.BadRequestExceptionName && e.message.includes("Stale Peer Connection")) {
                    this.logger.error('Server detect peer connection being unhealthy, performing IceRestart', e);
                    this._rtcSession._sessionReport.iceRestartAttempts += 1;
                    this._rtcSession._state.setSubState(new IceRestartSubstate(this._rtcSession));
                }
            } else {
                this.logger.info('Server detect peer connection being unhealthy, IceRestart not supported');
            }
        }
    }, {
        key: 'onExit',
        value: function onExit() {
            if (this.IceRestartTimeoutId) {
                this.logger.info('Exiting, cleaning up IceRestart timeout');
                clearTimeout(this.IceRestartTimeoutId);
            }
        }
    }, {
        key: 'name',
        get: function get() {
            return "ConnectedSubstate";
        }
    }]);
    return ConnectedSubstate;
}();

/**
 * IceRestartSubstate manages the process of requesting ICE access and initiating an ICE restart.
 * It attempts to restart the ICE connection without retrying on failure.
 *
 * Possible failures include:
 *
 * 1. The `_requestIceAccess` API call fails due to the network not recovering within approximately 13 seconds.
 *    This is calculated based on the time from network loss to ICE connection failure (around 10 seconds),
 *    plus the 3-second `retryInterval` in the `ConnectedSubState`.
 *
 * 2. The `_requestIceAccess` API call is throttled.
 *
 * In case of failure, the ICE restart process is not retried, and the state transitions back to connected sub state
 */


var IceRestartSubstate = exports.IceRestartSubstate = function () {
    (0, _createClass3.default)(IceRestartSubstate, [{
        key: 'logger',
        get: function get() {
            return this._rtcSession._logger;
        }
    }]);

    function IceRestartSubstate(rtcSession) {
        (0, _classCallCheck3.default)(this, IceRestartSubstate);

        this._rtcSession = rtcSession;
    }

    (0, _createClass3.default)(IceRestartSubstate, [{
        key: 'onEnter',
        value: function onEnter() {
            this.performIceRestart();
        }
    }, {
        key: 'performIceRestart',
        value: function performIceRestart() {
            var _this2 = this;

            this._rtcSession._pcm._iceRestart = true;
            this._rtcSession._pcm._requestIceAccess().then(function (response) {
                var rtcPeerConnectionConfig = JSON.parse(JSON.stringify(_rtc_const.RTC_PEER_CONNECTION_CONFIG));
                rtcPeerConnectionConfig.iceServers = response;
                rtcPeerConnectionConfig.iceCandidatePoolSize = _rtc_const.DEFAULT_ICE_CANDIDATE_POOL_SIZE;
                _this2._rtcSession._pc.setConfiguration(rtcPeerConnectionConfig);
                return _this2._rtcSession._pc.createOffer({ iceRestart: true });
            }).then(function (rtcSessionDescription) {
                _this2._rtcSession._localSessionDescription = rtcSessionDescription;
                _this2.logger.info("ICE restart offer created and set as local description");
                _this2._rtcSession._state.setSubState(new SetLocalSessionDescriptionSubstate(_this2._rtcSession));
            }).catch(function (error) {
                _this2.logger.error("ICE restart failed", error);
                _this2._rtcSession._state.setSubState(new ConnectedSubstate(_this2._rtcSession));
            });
        }
    }, {
        key: 'onExit',
        value: function onExit() {}
    }, {
        key: 'name',
        get: function get() {
            return "IceRestartSubstate";
        }
    }]);
    return IceRestartSubstate;
}();

var SetLocalSessionDescriptionSubstate = exports.SetLocalSessionDescriptionSubstate = function () {
    (0, _createClass3.default)(SetLocalSessionDescriptionSubstate, [{
        key: 'logger',
        get: function get() {
            return this._rtcSession._logger;
        }
    }]);

    function SetLocalSessionDescriptionSubstate(rtcSession) {
        (0, _classCallCheck3.default)(this, SetLocalSessionDescriptionSubstate);

        this._rtcSession = rtcSession;
    }

    (0, _createClass3.default)(SetLocalSessionDescriptionSubstate, [{
        key: 'onEnter',
        value: function onEnter() {
            var _this3 = this;

            var localDescription = this._rtcSession._localSessionDescription;
            var sdpOptions = new _utils.SdpOptions();
            sdpOptions.enableOpusDtx = this._rtcSession._enableOpusDtx;

            var transformedSdp = (0, _utils.transformSdp)(localDescription.sdp, sdpOptions);
            localDescription.sdp = transformedSdp.sdp;
            localDescription.sdp += 'a=ptime:20\r\n';
            localDescription.sdp += 'a=maxptime:20\r\n';
            localDescription.sdp = localDescription.sdp.replace("minptime=10", "minptime=20");

            this.logger.info('LocalSD', this._rtcSession._localSessionDescription);

            this._rtcSession._pc.setLocalDescription(this._rtcSession._localSessionDescription).then(function () {
                _this3.logger.info("Local description set successfully");
                _this3._rtcSession._state.setSubState(new ConnectSignalingAndIceCollectionSubstate(_this3._rtcSession, transformedSdp.mLines));
            }).catch(function (error) {
                _this3.logger.error("Failed to set local description", error);
                _this3._rtcSession._state.setSubState(new ConnectedSubstate(_this3._rtcSession));
            });
        }
    }, {
        key: 'onExit',
        value: function onExit() {}
    }, {
        key: 'name',
        get: function get() {
            return "SetLocalSessionDescriptionSubstate";
        }
    }]);
    return SetLocalSessionDescriptionSubstate;
}();

/**
 * ConnectSignalingAndIceCollectionSubstate manages the signaling connection and ICE candidate collection.
 * It performs the following tasks:
 *
 * 1. Binds the RTCSession's signaling channel to the peer connection manager's signaling channel,
 *
 * 2. Collects ICE candidates and monitors for sufficient candidates to proceed with the ICE restart.
 *
 * 3. Transitions to the next state (InviteAnswerSubstate) upon successful ICE candidate collection.
 *    If no ICE candidates are collected, it transitions to the ConnectedSubstate and reports an ICE
 *    collection failure.
 *
 * 4. Sets a timeout for ICE collection to handle cases where the ICE gathering process gets stuck.
 */


var ConnectSignalingAndIceCollectionSubstate = exports.ConnectSignalingAndIceCollectionSubstate = function () {
    (0, _createClass3.default)(ConnectSignalingAndIceCollectionSubstate, [{
        key: 'logger',
        get: function get() {
            return this._rtcSession._logger;
        }
    }]);

    function ConnectSignalingAndIceCollectionSubstate(rtcSession, mLines) {
        (0, _classCallCheck3.default)(this, ConnectSignalingAndIceCollectionSubstate);

        this._rtcSession = rtcSession;
        this._iceCandidates = [];
        this._iceCandidateFoundationsMap = {};
        this._mLines = mLines;
        this._iceCompletedForIceRestart = false;

        // As the peer connection manager is enabled, the RTCSession is created without a signaling channel.
        // To utilize the existing signaling state machine for SDP exchange, the RTCSession's signaling channel
        // is bound to the peer connection manager's signaling channel.
        this._rtcSession._bindSignalingChannel();
    }

    (0, _createClass3.default)(ConnectSignalingAndIceCollectionSubstate, [{
        key: 'onEnter',
        value: function onEnter() {
            var _this4 = this;

            setTimeout(function () {
                if (_this4._isCurrentState() && !_this4._iceCompletedForIceRestart) {
                    _this4.logger.warn('ICE collection timed out');
                    _this4._reportIceCompleted(true);
                }
            }, this._rtcSession._iceTimeoutMillis);
        }
    }, {
        key: '_isCurrentState',
        value: function _isCurrentState() {
            return this._rtcSession._state._subState === this;
        }
    }, {
        key: '_createLocalCandidate',
        value: function _createLocalCandidate(initDict) {
            return new RTCIceCandidate(initDict);
        }
    }, {
        key: 'onIceCandidate',
        value: function onIceCandidate(evt) {
            var candidate = evt.candidate;
            this.logger.log('onicecandidate ' + JSON.stringify(candidate));
            if (candidate) {
                if (candidate.candidate) {
                    this._iceCandidates.push(this._createLocalCandidate(candidate));
                    if (!this._iceCompletedForIceRestart) {
                        this._checkCandidatesSufficient(candidate);
                    }
                }
            } else {
                this._reportIceCompleted(false);
            }
        }
    }, {
        key: '_checkCandidatesSufficient',
        value: function _checkCandidatesSufficient(candidate) {
            //check if we collected sufficient candidates from single media server to restart the call
            var candidateObj = (0, _sdp.parseCandidate)(candidate.candidate);
            if (candidateObj.component != 1) {
                return;
            }
            var candidateFoundation = candidateObj.foundation;
            var candidateMLineIndex = candidate.sdpMLineIndex;
            if (candidateFoundation && candidateMLineIndex >= 0 && candidateMLineIndex < this._mLines) {
                var mIndexList = this._iceCandidateFoundationsMap[candidateFoundation] || [];
                if (!mIndexList.includes(candidateMLineIndex)) {
                    mIndexList.push(candidateMLineIndex);
                }
                this._iceCandidateFoundationsMap[candidateFoundation] = mIndexList;

                if (this._mLines == mIndexList.length) {
                    this._reportIceCompleted(false);
                }
            }
        }
    }, {
        key: '_reportIceCompleted',
        value: function _reportIceCompleted(isTimeout) {
            this._iceCompletedForIceRestart = true;
            this._rtcSession._onIceCollectionComplete(this._rtcSession, isTimeout, this._iceCandidates.length);
            if (this._iceCandidates.length > 0) {
                this._checkAndTransit();
            } else {
                this.logger.error('No ICE candidate');
                this._rtcSession._sessionReport.iceCollectionFailure = true;
                this._rtcSession._state.setSubState(new ConnectedSubstate(this._rtcSession));
            }
        }
    }, {
        key: '_checkAndTransit',
        value: function _checkAndTransit() {
            if (this._iceCompletedForIceRestart) {
                this._rtcSession._state.setSubState(new InviteAnswerSubstate(this._rtcSession, this._iceCandidates));
            } else if (!this._iceCompletedForIceRestart) {
                this.logger.log('Pending ICE collection');
            }
        }
    }, {
        key: 'onExit',
        value: function onExit() {}
    }, {
        key: 'name',
        get: function get() {
            return "ConnectSignalingAndIceCollectionSubstate";
        }
    }]);
    return ConnectSignalingAndIceCollectionSubstate;
}();

/**
 * InviteAnswerSubstate handles the invitation and response during signaling.
 * It retries the invite process if it fails due to certain errors.
 */

var InviteAnswerSubstate = exports.InviteAnswerSubstate = function () {
    (0, _createClass3.default)(InviteAnswerSubstate, [{
        key: 'logger',
        get: function get() {
            return this._rtcSession._logger;
        }
    }]);

    function InviteAnswerSubstate(rtcSession, iceCandidates) {
        (0, _classCallCheck3.default)(this, InviteAnswerSubstate);

        this._rtcSession = rtcSession;
        this._iceCandidates = iceCandidates;
        this.retryCount = 0;
        this.maxRetries = 3; // Maximum number of retries for the invite process
        // The retry interval is set to 1 second. The actual interval between each invite attempt
        // will be the sum of the MAX_INVITE_DELAY_MS (5 seconds) and the retry interval (1 second).
        // For example, the timing for the three invite attempts would be:
        // 1. First invite: 0 seconds
        // 2. Second invite (after the first invite timeout): 6 seconds
        // 3. Third invite (after the second invite timeout): 12 seconds
        this.retryInterval = 1000;
    }

    (0, _createClass3.default)(InviteAnswerSubstate, [{
        key: 'onEnter',
        value: function onEnter() {
            this.attemptInvite();
        }
    }, {
        key: 'attemptInvite',
        value: function attemptInvite() {
            // Attempt to send an invite, as we do not know if the signaling (websocket connection) is down or not
            this._rtcSession._createSignalingChannel().connect();
            this._rtcSession._pcm._signalingChannel.transit(new _signaling.PendingInviteState(this._rtcSession._pcm._signalingChannel));
            this._rtcSession._pcm._signalingChannel.invite(this._rtcSession._localSessionDescription.sdp, this._iceCandidates);
        }
    }, {
        key: 'retryInvite',
        value: function retryInvite() {
            var _this5 = this;

            // Retry logic for invite attempts
            if (this.retryCount < this.maxRetries) {
                this.retryCount++;
                this.logger.info('Retrying invite in ' + this.retryInterval / 1000 + ' seconds. Attempt ' + this.retryCount);
                this.signalingRetryTimeoutId = setTimeout(function () {
                    return _this5.attemptInvite();
                }, this.retryInterval);
            } else {
                this.logger.error("Max invite attempts reached. Returning to ConnectedSubstate.");
                this._rtcSession._state.setSubState(new ConnectedSubstate(this._rtcSession));
            }
        }
    }, {
        key: 'onSignalingFailed',
        value: function onSignalingFailed(e) {
            // Handle signaling failures
            if (e.name === _exceptions.BusyExceptionName) {
                this.logger.error('User Busy, possibly multiple CCP windows open', e);
                this._rtcSession._state.setSubState(new ConnectedSubstate(this._rtcSession));
            } else if (e.name === _exceptions.CallNotFoundExceptionName) {
                this.logger.error('Call not found. One of the participant probably hung up.', e);
                this._rtcSession._state.setSubState(new ConnectedSubstate(this._rtcSession));
            } else {
                this.logger.error('Failed handshaking with signaling server', e);
                this.retryInvite();
            }
        }
    }, {
        key: 'onSignalingAnswered',
        value: function onSignalingAnswered(sdp, candidates) {
            this._rtcSession._state.setSubState(new AcceptSubstate(this._rtcSession, sdp, candidates));
        }
    }, {
        key: 'onExit',
        value: function onExit() {
            if (this.signalingRetryTimeoutId) {
                this.logger.info('Exiting, cleaning up invite retry timeout');
                clearTimeout(this.signalingRetryTimeoutId);
            }
        }
    }, {
        key: 'name',
        get: function get() {
            return "InviteAnswerSubstate";
        }
    }]);
    return InviteAnswerSubstate;
}();

/**
 * AcceptSubstate handles the remote SDP and remote ICE candidates.
 * It verifies the remote SDP and ICE candidates before proceeding.
 */


var AcceptSubstate = exports.AcceptSubstate = function () {
    (0, _createClass3.default)(AcceptSubstate, [{
        key: 'logger',
        get: function get() {
            return this._rtcSession._logger;
        }
    }]);

    function AcceptSubstate(rtcSession, sdp, candidates) {
        (0, _classCallCheck3.default)(this, AcceptSubstate);

        this._rtcSession = rtcSession;
        this._sdp = sdp;
        this._candidates = candidates;
    }

    (0, _createClass3.default)(AcceptSubstate, [{
        key: '_createSessionDescription',
        value: function _createSessionDescription(initDict) {
            return new RTCSessionDescription(initDict);
        }
    }, {
        key: '_createRemoteCandidate',
        value: function _createRemoteCandidate(initDict) {
            return new RTCIceCandidate(initDict);
        }
    }, {
        key: 'onEnter',
        value: function onEnter() {
            if (!this._sdp) {
                this.logger.error('Invalid remote SDP');
                this._rtcSession._state.setSubState(new ConnectedSubstate(this._rtcSession));
            } else if (!this._candidates || this._candidates.length < 1) {
                this.logger.error('No remote ICE candidate');
                this._rtcSession._state.setSubState(new ConnectedSubstate(this._rtcSession));
            }
            this._rtcSession._strategy.setRemoteDescriptionForIceRestart(this, this._rtcSession);
        }
    }, {
        key: 'onSignalingHandshaked',
        value: function onSignalingHandshaked() {
            this._signalingHandshakedForIceRestart = true;
            this._checkAndTransit();
        }
    }, {
        key: 'onIceRestartFailure',
        value: function onIceRestartFailure() {
            this._rtcSession._state.setSubState(new ConnectedSubstate(this._rtcSession));
        }
    }, {
        key: '_checkAndTransit',
        value: function _checkAndTransit() {
            if (this._signalingHandshakedForIceRestart && this._remoteDescriptionSetForIceRestart) {
                this._rtcSession._state.setSubState(new ConnectedSubstate(this._rtcSession));
            } else if (!this._signalingHandshakedForIceRestart) {
                this.logger.log('Pending handshaking');
            } else {
                //implies _remoteDescriptionSet == false
                this.logger.log('Pending setting remote description');
            }
        }
    }, {
        key: 'onExit',
        value: function onExit() {}
    }, {
        key: 'name',
        get: function get() {
            return "AcceptSubstate";
        }
    }]);
    return AcceptSubstate;
}();

},{"./exceptions":152,"./rtc_const":153,"./signaling":160,"./utils":167,"babel-runtime/helpers/classCallCheck":17,"babel-runtime/helpers/createClass":18,"sdp":133}],158:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

exports.extractMediaStatsFromStats = extractMediaStatsFromStats;

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function extractMediaStatsFromStats(timestamp, stats, streamType) {
    var extractedStats = null;
    var reportType = null;

    stats.forEach(function (statsReport) {
        if (statsReport) {
            if (statsReport.type === 'inbound-rtp' && streamType === 'audio_input') {
                // inbound-rtp: Stats for stream from Server to CCP, as seen on the browser
                reportType = statsReport.type;
                extractedStats = {
                    timestamp: timestamp,
                    packetsLost: statsReport.packetsLost,
                    // packetsCount: number of packet received by CCP, as seen on the browser
                    packetsCount: statsReport.packetsReceived,
                    jbMilliseconds: Math.floor((0, _utils.when_defined)(statsReport.jitter, 0) * 1000),
                    // Multiplying audioLevel by 32768 aligns its value with the legacy getStats API.
                    audioLevel: (0, _utils.is_defined)(statsReport.audioLevel) ? Math.floor(statsReport.audioLevel * 32768) : null
                };
            } else if (statsReport.type === 'outbound-rtp' && streamType === 'audio_output') {
                // outbound-rtp: Stats for stream from CCP to Server, as seen on the browser
                extractedStats = extractedStats || {};
                // packetsCount: number of packet sent by CCP, as seen on the browser
                extractedStats.packetsCount = statsReport.packetsSent;
            } else if (statsReport.type === 'media-source' && streamType === 'audio_output') {
                extractedStats = extractedStats || {};
                // Multiplying audioLevel by 32768 aligns its value with the legacy getStats API.
                extractedStats.audioLevel = (0, _utils.is_defined)(statsReport.audioLevel) ? Math.floor(statsReport.audioLevel * 32768) : null;
            } else if (statsReport.type === 'remote-inbound-rtp' && streamType === 'audio_output') {
                // remote-inbound-rtp: Stats for stream from CCP to Server, as seen on Server side
                reportType = statsReport.type;
                extractedStats = extractedStats || {};
                extractedStats.timestamp = timestamp;
                extractedStats.packetsLost = statsReport.packetsLost;
                extractedStats.rttMilliseconds = (0, _utils.is_defined)(statsReport.roundTripTime) ? Math.floor(statsReport.roundTripTime * 1000) : null;
                extractedStats.jbMilliseconds = Math.floor((0, _utils.when_defined)(statsReport.jitter, 0) * 1000);
            }
        }
    });

    return extractedStats ? new MediaRtpStats(extractedStats, reportType, streamType) : null;
}

/**
 * Basic RTP statistics object, represents statistics of an audio or video stream.
 */
/**
 * Extract rtp stats of specified stream from RTCStatsReport
 * Chrome reports all stream stats in statsReports whereas firefox reports only single stream stats in report
 * StreamType is passed only to pull right stream stats audio_input or audio_output.
 */

var MediaRtpStats = function () {
    function MediaRtpStats(paramsIn, statsReportType, streamType) {
        (0, _classCallCheck3.default)(this, MediaRtpStats);

        var params = paramsIn || {};

        this._timestamp = params.timestamp || new Date().getTime();
        this._packetsLost = (0, _utils.when_defined)(params.packetsLost);
        this._packetsCount = (0, _utils.when_defined)(params.packetsCount);
        this._audioLevel = (0, _utils.when_defined)(params.audioLevel);
        this._procMilliseconds = (0, _utils.when_defined)(params.procMilliseconds);
        this._rttMilliseconds = (0, _utils.when_defined)(params.rttMilliseconds);
        this._jbMilliseconds = (0, _utils.when_defined)(params.jbMilliseconds);
        this._bytesSent = (0, _utils.when_defined)(params.bytesSent);
        this._bytesReceived = (0, _utils.when_defined)(params.bytesReceived);
        this._framesEncoded = (0, _utils.when_defined)(params.framesEncoded);
        this._framesDecoded = (0, _utils.when_defined)(params.framesDecoded);
        this._frameRateSent = (0, _utils.when_defined)(params.frameRateSent);
        this._frameRateReceived = (0, _utils.when_defined)(params.frameRateReceived);
        this._statsReportType = statsReportType || params._statsReportType || "unknown";
        this._streamType = streamType || params.streamType || "unknown";
    }

    /** {number} number of packets sent to the channel */


    (0, _createClass3.default)(MediaRtpStats, [{
        key: 'packetsCount',
        get: function get() {
            return this._packetsCount;
        }
        /** {number} number of packets lost after travelling through the channel */

    }, {
        key: 'packetsLost',
        get: function get() {
            return this._packetsLost;
        }
        /** {number} number of packets lost after travelling through the channel */

    }, {
        key: 'packetLossPercentage',
        get: function get() {
            return this._packetsCount > 0 ? this._packetsLost / this._packetsCount : 0;
        }
        /** Audio volume level
         * Currently firefox doesn't provide audio level in rtp stats.
         */

    }, {
        key: 'audioLevel',
        get: function get() {
            return this._audioLevel;
        }
        /** Timestamp when stats are collected. */

    }, {
        key: 'timestamp',
        get: function get() {
            return this._timestamp;
        }
        /** {number} Processing delay calculated by time to process packet header */

    }, {
        key: 'procMilliseconds',
        get: function get() {
            return this._procMilliseconds;
        }
        /** {number} Round trip time calculated with RTCP reports */

    }, {
        key: 'rttMilliseconds',
        get: function get() {
            return this._rttMilliseconds;
        }
        /** {number} Statistical variance of RTP data packet inter-arrival time */

    }, {
        key: 'jbMilliseconds',
        get: function get() {
            return this._jbMilliseconds;
        }
        /** {number} number of bytes sent to the channel*/

    }, {
        key: 'bytesSent',
        get: function get() {
            return this._bytesSent;
        }
        /** {number} number of bytes received from the channel*/

    }, {
        key: 'bytesReceived',
        get: function get() {
            return this._bytesReceived;
        }
        /** {number} number of video frames encoded*/

    }, {
        key: 'framesEncoded',
        get: function get() {
            return this._framesEncoded;
        }
        /** {number} number of video frames decoded*/

    }, {
        key: 'framesDecoded',
        get: function get() {
            return this._framesDecoded;
        }
        /** {number} frames per second sent to the channel*/

    }, {
        key: 'frameRateSent',
        get: function get() {
            return this._frameRateSent;
        }
        /** {number} frames per second received from the channel*/

    }, {
        key: 'frameRateReceived',
        get: function get() {
            return this._frameRateReceived;
        }
        /** {string} the type of the stats report */

    }, {
        key: 'statsReportType',
        get: function get() {
            return this._statsReportType;
        }
        /** {string} the type of the stream */

    }, {
        key: 'streamType',
        get: function get() {
            return this._streamType;
        }
    }]);
    return MediaRtpStats;
}();

},{"./utils":167,"babel-runtime/helpers/classCallCheck":17,"babel-runtime/helpers/createClass":18}],159:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SessionReport = undefined;

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

var SessionReport = exports.SessionReport = function () {
    /**
     * @class Prototype for tracking various RTC session report
     * @constructs
     */
    function SessionReport() {
        (0, _classCallCheck3.default)(this, SessionReport);

        this._sessionStartTime = null;
        this._sessionEndTime = null;
        this._gumTimeMillis = null;
        this._initializationTimeMillis = null;
        this._iceCollectionTimeMillis = null;
        this._signallingConnectTimeMillis = null;
        this._handshakingTimeMillis = null;
        this._preTalkingTimeMillis = null;
        this._talkingTimeMillis = null;
        this._iceConnectionsLost = 0;
        this._iceConnectionsFailed = null;
        this._peerConnectionFailed = null;
        this._cleanupTimeMillis = null;
        this._iceCollectionFailure = null;
        this._signallingConnectionFailure = null;
        this._handshakingFailure = null;
        this._gumOtherFailure = null;
        this._gumTimeoutFailure = null;
        this._createOfferFailure = null;
        this._setLocalDescriptionFailure = null;
        this._userBusyFailure = null;
        this._invalidRemoteSDPFailure = null;
        this._noRemoteIceCandidateFailure = null;
        this._setRemoteDescriptionFailure = null;
        this._streamStats = [];
        this._rtcJsVersion = "1.2.1";
        this._userAgentData = null;
    }
    /**
     *Timestamp when RTCSession started.
     */


    (0, _createClass3.default)(SessionReport, [{
        key: "sessionStartTime",
        get: function get() {
            return this._sessionStartTime;
        }
        /**
         * Timestamp when RTCSession ended.
         */
        ,
        set: function set(value) {
            this._sessionStartTime = value;
        }
    }, {
        key: "sessionEndTime",
        get: function get() {
            return this._sessionEndTime;
        }
        /**
         * Time taken for grabbing user microphone at the time of connecting RTCSession.
         */
        ,
        set: function set(value) {
            this._sessionEndTime = value;
        }
    }, {
        key: "gumTimeMillis",
        get: function get() {
            return this._gumTimeMillis;
        }
        /**
         * Time taken for session initialization in millis. Includes time spent in GrabLocalMedia, SetLocalSDP states.
         */
        ,
        set: function set(value) {
            this._gumTimeMillis = value;
        }
    }, {
        key: "initializationTimeMillis",
        get: function get() {
            return this._initializationTimeMillis;
        }
        /**
         * Time spent on ICECollection in millis.
         */
        ,
        set: function set(value) {
            this._initializationTimeMillis = value;
        }
    }, {
        key: "iceCollectionTimeMillis",
        get: function get() {
            return this._iceCollectionTimeMillis;
        }
        /**
         * Time taken for connecting the signalling in millis.
         */
        ,
        set: function set(value) {
            this._iceCollectionTimeMillis = value;
        }
    }, {
        key: "signallingConnectTimeMillis",
        get: function get() {
            return this._signallingConnectTimeMillis;
        }
        /**
         * Times spent from RTCSession connection until entering Talking state in millis.
         */
        ,
        set: function set(value) {
            this._signallingConnectTimeMillis = value;
        }
    }, {
        key: "preTalkingTimeMillis",
        get: function get() {
            return this._preTalkingTimeMillis;
        }
        /**
         *  Times spent in completing handshaking process of the RTCSession in millis.
         */
        ,
        set: function set(value) {
            this._preTalkingTimeMillis = value;
        }
    }, {
        key: "handshakingTimeMillis",
        get: function get() {
            return this._handshakingTimeMillis;
        }
        /**
         *  Times spent in Talking state in millis.
         */
        ,
        set: function set(value) {
            this._handshakingTimeMillis = value;
        }
    }, {
        key: "talkingTimeMillis",
        get: function get() {
            return this._talkingTimeMillis;
        }
        /**
         * How many times the RTCSession has lost ICE connection in talking state.
         */
        ,
        set: function set(value) {
            this._talkingTimeMillis = value;
        }
    }, {
        key: "iceConnectionsLost",
        get: function get() {
            return this._iceConnectionsLost;
        }
        /**
         * Tells if the RTCSession has failed RTCPeerConnection.iceConnectionState
         */
        ,
        set: function set(value) {
            this._iceConnectionsLost = value;
        }
    }, {
        key: "iceConnectionsFailed",
        get: function get() {
            return this._iceConnectionsFailed;
        }
        /**
         * Tells if the RTCSession has failed RTCPeerConnection.connectionState
         */
        ,
        set: function set(value) {
            this._iceConnectionsFailed = value;
        }
    }, {
        key: "peerConnectionFailed",
        get: function get() {
            return this._peerConnectionFailed;
        }
        /**
         * Times spent in Cleanup state in millis
         */
        ,
        set: function set(value) {
            this._peerConnectionFailed = value;
        }
    }, {
        key: "cleanupTimeMillis",
        get: function get() {
            return this._cleanupTimeMillis;
        }
        /**
         * Tells if the RTCSession fails in ICECollection.
         */
        ,
        set: function set(value) {
            this._cleanupTimeMillis = value;
        }
    }, {
        key: "iceCollectionFailure",
        get: function get() {
            return this._iceCollectionFailure;
        }
        /**
         * Tells if the RTCSession failed in signalling connect stage.
         */
        ,
        set: function set(value) {
            this._iceCollectionFailure = value;
        }
    }, {
        key: "signallingConnectionFailure",
        get: function get() {
            return this._signallingConnectionFailure;
        }
        /**
         * Handshaking failure of the RTCSession
         */
        ,
        set: function set(value) {
            this._signallingConnectionFailure = value;
        }
    }, {
        key: "handshakingFailure",
        get: function get() {
            return this._handshakingFailure;
        }
        /**
         * Gum failed due to timeout at the time of new RTCSession connection
         */
        ,
        set: function set(value) {
            this._handshakingFailure = value;
        }
    }, {
        key: "gumTimeoutFailure",
        get: function get() {
            return this._gumTimeoutFailure;
        }
        /**
         * Gum failed due to other reasons (other than Timeout)
         */
        ,
        set: function set(value) {
            this._gumTimeoutFailure = value;
        }
    }, {
        key: "gumOtherFailure",
        get: function get() {
            return this._gumOtherFailure;
        }
        /**
         * RTC Session failed in create Offer state.
         */
        ,
        set: function set(value) {
            this._gumOtherFailure = value;
        }
    }, {
        key: "createOfferFailure",
        get: function get() {
            return this._createOfferFailure;
        }
        /**
         * Tells if setLocalDescription failed for the RTC Session.
         */
        ,
        set: function set(value) {
            this._createOfferFailure = value;
        }
    }, {
        key: "setLocalDescriptionFailure",
        get: function get() {
            return this._setLocalDescriptionFailure;
        }
        /**
         * Tells if handshaking failed due to user busy case,
         * happens when multiple softphone calls are initiated at same time.
         */
        ,
        set: function set(value) {
            this._setLocalDescriptionFailure = value;
        }
    }, {
        key: "userBusyFailure",
        get: function get() {
            return this._userBusyFailure;
        }
        /**
         * Tells it remote SDP is invalid.
         */
        ,
        set: function set(value) {
            this._userBusyFailure = value;
        }
    }, {
        key: "invalidRemoteSDPFailure",
        get: function get() {
            return this._invalidRemoteSDPFailure;
        }
        /**
         * Tells if the setRemoteDescription failed for the RTC Session.
         */
        ,
        set: function set(value) {
            this._invalidRemoteSDPFailure = value;
        }
    }, {
        key: "setRemoteDescriptionFailure",
        get: function get() {
            return this._setRemoteDescriptionFailure;
        }
        /**
         * A failure case when there is no RemoteIceCandidate.
         */
        ,
        set: function set(value) {
            this._setRemoteDescriptionFailure = value;
        }
    }, {
        key: "noRemoteIceCandidateFailure",
        get: function get() {
            return this._noRemoteIceCandidateFailure;
        }
        /**
         * Statistics for each stream(audio-in, audio-out, video-in, video-out) of the RTCSession.
         */
        ,
        set: function set(value) {
            this._noRemoteIceCandidateFailure = value;
        }
    }, {
        key: "streamStats",
        get: function get() {
            return this._streamStats;
        }
        /**
         * get current connect-rtc-js version
         */
        ,
        set: function set(value) {
            this._streamStats = value;
        }
    }, {
        key: "rtcJsVersion",
        get: function get() {
            return this._rtcJsVersion;
        }

        /**
         * userAgent data
         */
        ,
        set: function set(value) {
            this._rtcJsVersion = value;
        }
    }, {
        key: "userAgentData",
        get: function get() {
            return this._userAgentData;
        },
        set: function set(value) {
            this._userAgentData = value;
        }
    }]);
    return SessionReport;
}();

},{"babel-runtime/helpers/classCallCheck":17,"babel-runtime/helpers/createClass":18}],160:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.FailedState = exports.DisconnectedState = exports.PendingLocalHangupState = exports.PendingRemoteHangupState = exports.PendingReconnectState = exports.TalkingState = exports.IdleState = exports.PendingAcceptAckState = exports.PendingConnectContactState = exports.PendingAcceptState = exports.PendingAnswerState = exports.PendingInviteState = exports.PendingConnectState = exports.FailOnTimeoutState = exports.SignalingState = undefined;

var _get2 = require('babel-runtime/helpers/get');

var _get3 = _interopRequireDefault(_get2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _utils = require('./utils');

var _rtc_const = require('./rtc_const');

var _exceptions = require('./exceptions');

var _v = require('uuid/v4');

var _v2 = _interopRequireDefault(_v);

var _virtual_wss_connection_manager = require('./virtual_wss_connection_manager');

var _virtual_wss_connection_manager2 = _interopRequireDefault(_virtual_wss_connection_manager);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CONNECT_MAX_RETRIES = 3;
// TODO: Need to discuss with team the retry strategy for invite/accept/connectContact errors
/**
 * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

var INVITE_MAX_RETRIES = 0;
var ACCEPT_MAX_RETRIES = 0;
var CONNECT_CONTACT_MAX_RETRIES = 0;

/**
 * Abstract signaling state class.
 */

var SignalingState = exports.SignalingState = function () {
    /**
     * @param {AmznRtcSignaling} signaling Signaling object.
     */
    function SignalingState(signaling) {
        (0, _classCallCheck3.default)(this, SignalingState);

        this._signaling = signaling;
        this._createTime = new Date().getTime();
    }

    (0, _createClass3.default)(SignalingState, [{
        key: 'setStateTimeout',
        value: function setStateTimeout(timeoutMs) {
            setTimeout((0, _utils.hitch)(this, this._onTimeoutChecked), timeoutMs);
        }
    }, {
        key: 'onEnter',
        value: function onEnter() {}
    }, {
        key: '_onTimeoutChecked',
        value: function _onTimeoutChecked() {
            if (this.isCurrentState) {
                this.onTimeout();
            }
        }
    }, {
        key: 'onTimeout',
        value: function onTimeout() {
            throw new _exceptions.UnsupportedOperation();
        }
    }, {
        key: 'transit',
        value: function transit(newState) {
            this._signaling.transit(newState);
        }
    }, {
        key: 'onExit',
        value: function onExit() {}
    }, {
        key: 'onOpen',
        value: function onOpen() {
            throw new _exceptions.UnsupportedOperation('onOpen not supported by ' + this.name);
        }
    }, {
        key: 'onError',
        value: function onError() {
            this.channelDown();
        }
    }, {
        key: 'onClose',
        value: function onClose() {
            this.channelDown();
        }
    }, {
        key: 'channelDown',
        value: function channelDown() {
            throw new _exceptions.UnsupportedOperation('channelDown not supported by ' + this.name);
        }
    }, {
        key: 'onRpcMsg',
        value: function onRpcMsg(rpcMsg) {
            // eslint-disable-line no-unused-vars
            throw new _exceptions.UnsupportedOperation('onRpcMsg not supported by ' + this.name);
        }
    }, {
        key: 'invite',
        value: function invite(sdp, iceCandidates) {
            // eslint-disable-line no-unused-vars
            throw new _exceptions.UnsupportedOperation('invite not supported by ' + this.name);
        }
    }, {
        key: 'accept',
        value: function accept() {
            throw new _exceptions.UnsupportedOperation('accept not supported by ' + this.name);
        }
    }, {
        key: 'connectContact',
        value: function connectContact() {
            throw new _exceptions.UnsupportedOperation('connectContact not supported by ' + this.name);
        }
    }, {
        key: 'hangup',
        value: function hangup() {
            // do nothing
        }
    }, {
        key: 'bye',
        value: function bye() {
            // do nothing
        }
    }, {
        key: 'isCurrentState',
        get: function get() {
            return this === this._signaling.state;
        }
    }, {
        key: 'name',
        get: function get() {
            return "SignalingState";
        }
    }, {
        key: 'logger',
        get: function get() {
            return this._signaling._logger;
        }
    }]);
    return SignalingState;
}();

var FailOnTimeoutState = exports.FailOnTimeoutState = function (_SignalingState) {
    (0, _inherits3.default)(FailOnTimeoutState, _SignalingState);

    function FailOnTimeoutState(signaling, timeoutMs) {
        (0, _classCallCheck3.default)(this, FailOnTimeoutState);

        var _this = (0, _possibleConstructorReturn3.default)(this, (FailOnTimeoutState.__proto__ || Object.getPrototypeOf(FailOnTimeoutState)).call(this, signaling));

        _this._timeoutMs = timeoutMs;
        return _this;
    }

    (0, _createClass3.default)(FailOnTimeoutState, [{
        key: 'onEnter',
        value: function onEnter() {
            this.setStateTimeout(this._timeoutMs);
        }
    }, {
        key: 'onTimeout',
        value: function onTimeout() {
            this.transit(new FailedState(this._signaling, new _exceptions.Timeout()));
        }
    }, {
        key: 'name',
        get: function get() {
            return "FailOnTimeoutState";
        }
    }]);
    return FailOnTimeoutState;
}(SignalingState);

var PendingConnectState = exports.PendingConnectState = function (_FailOnTimeoutState) {
    (0, _inherits3.default)(PendingConnectState, _FailOnTimeoutState);

    function PendingConnectState(signaling, timeoutMs, initialStartTimeIn, retriesIn) {
        (0, _classCallCheck3.default)(this, PendingConnectState);

        var _this2 = (0, _possibleConstructorReturn3.default)(this, (PendingConnectState.__proto__ || Object.getPrototypeOf(PendingConnectState)).call(this, signaling, timeoutMs));

        _this2._initialStartTime = initialStartTimeIn || new Date().getTime();
        _this2._retries = retriesIn || 0;
        return _this2;
    }

    (0, _createClass3.default)(PendingConnectState, [{
        key: 'onOpen',
        value: function onOpen() {
            if (this._signaling._pcm && this._signaling._pcm.contactToken && this._signaling._pcm.isPersistentConnectionEnabled() && !this._signaling._isFirstTimeSetup) {
                this.transit(new PendingConnectContactState(this._signaling));
            } else {
                this.transit(new PendingInviteState(this._signaling));
            }
        }
    }, {
        key: 'channelDown',
        value: function channelDown() {
            var now = new Date().getTime();
            var untilTimeoutMs = this._initialStartTime + this._timeoutMs - now;
            if (untilTimeoutMs > 0 && ++this._retries < CONNECT_MAX_RETRIES) {
                this._signaling._connect();
                this.transit(new PendingConnectState(this._signaling, untilTimeoutMs, this._initialStartTime, this._retries));
            } else {
                this.transit(new FailedState(this._signaling, new _exceptions.SignalingChannelDownError()));
            }
        }
    }, {
        key: 'name',
        get: function get() {
            return "PendingConnectState";
        }
    }]);
    return PendingConnectState;
}(FailOnTimeoutState);

var PendingInviteState = exports.PendingInviteState = function (_SignalingState2) {
    (0, _inherits3.default)(PendingInviteState, _SignalingState2);

    function PendingInviteState(signaling, retiresIn) {
        (0, _classCallCheck3.default)(this, PendingInviteState);

        var _this3 = (0, _possibleConstructorReturn3.default)(this, (PendingInviteState.__proto__ || Object.getPrototypeOf(PendingInviteState)).call(this, signaling));

        _this3._retries = retiresIn;
        return _this3;
    }

    (0, _createClass3.default)(PendingInviteState, [{
        key: 'onEnter',
        value: function onEnter() {
            var self = this;
            new Promise(function notifyConnected(resolve) {
                self._signaling._connectedHandler();
                resolve();
            });
        }

        /**
         * Send RTC invite to backend service
         *
         * @param sdp
         * @param iceCandidates
         */

    }, {
        key: 'invite',
        value: function invite(sdp, iceCandidates) {
            var self = this;
            var inviteId = (0, _v2.default)();

            var inviteParams;

            if (self._signaling._pcm) {
                inviteParams = {
                    sdp: sdp,
                    candidates: iceCandidates,
                    callContextToken: self._signaling._contactToken, // could be null
                    contactId: typeof self._signaling.callId === "undefined" ? "" : self._signaling.callId, // could be null
                    browserId: self._signaling._pcm.browserId, // identical id for browser
                    persistentConnection: self._signaling._pcm.isPPCEnabled, // flag which indicates if persistent connection is enabled in agent configuration
                    peerConnectionId: self._signaling._pcm.peerConnectionId, // generate by peerconnection factory
                    iceRestart: self._signaling._pcm._iceRestart, // will be true, if ice connection failed
                    peerConnectionToken: self._signaling._pcm.peerConnectionToken
                };
            } else {
                inviteParams = {
                    sdp: sdp,
                    candidates: iceCandidates,
                    callContextToken: self._signaling._contactToken
                };
            }

            self.logger.log('Sending SDP', (0, _utils.getRedactedSdp)(sdp));

            self._signaling._wss.send(JSON.stringify({
                jsonrpc: '2.0',
                method: _rtc_const.INVITE_METHOD_NAME,
                params: inviteParams,
                id: inviteId
            }));
            self.transit(new PendingAnswerState(self._signaling, inviteId, this._retries));
        }
    }, {
        key: 'channelDown',
        value: function channelDown() {
            this.transit(new FailedState(this._signaling, new _exceptions.SignalingChannelDownError()));
        }
    }, {
        key: 'name',
        get: function get() {
            return "PendingInviteState";
        }
    }]);
    return PendingInviteState;
}(SignalingState);

var PendingAnswerState = exports.PendingAnswerState = function (_FailOnTimeoutState2) {
    (0, _inherits3.default)(PendingAnswerState, _FailOnTimeoutState2);

    /**
     * Creates PendingAnswerState which resolves the answer of invite request
     *
     * @param signaling
     * @param inviteId
     */
    function PendingAnswerState(signaling, inviteId, retriesIn) {
        (0, _classCallCheck3.default)(this, PendingAnswerState);

        var _this4 = (0, _possibleConstructorReturn3.default)(this, (PendingAnswerState.__proto__ || Object.getPrototypeOf(PendingAnswerState)).call(this, signaling, _rtc_const.MAX_INVITE_DELAY_MS));

        _this4._inviteId = inviteId;
        _this4._retries = retriesIn || 0;
        return _this4;
    }

    /**
     * RPC message event handler
     *
     * @param msg response of invite request sent by backend service
     * "result": {
     *                 "candidates": ["List of ICE candidates"]
     *                 "sdp": "SDP Object",
     *                 "inactivityDuration": 600000 or 0,
     *                 "peerConnectionId": "Peer Connection ID",
     *                 "peerConnectionToken": "Peer Connection Token from RTPS"
     *             }
     */


    (0, _createClass3.default)(PendingAnswerState, [{
        key: 'onRpcMsg',
        value: function onRpcMsg(msg) {
            var self = this;
            if (msg.id === this._inviteId) {
                // TODO: check peer connection id here
                if (msg.error || !msg.result) {
                    // Retry logic for invite error, currently is disabled
                    if (++this._retries < INVITE_MAX_RETRIES) {
                        this.transit(new PendingInviteState(this._signaling, this._retries));
                    } else {
                        this.transit(new FailedState(this._signaling, this.translateInviteError(msg)));
                    }
                } else {
                    new Promise(function notifyAnswered(resolve) {
                        self.logger.log('Received SDP', (0, _utils.getRedactedSdp)(msg.result.sdp));
                        if (self._signaling._pcm) {
                            self._signaling._pcm.peerConnectionToken = msg.result.peerConnectionToken;
                            self._signaling._pcm.peerConnectionId = msg.result.peerConnectionId;
                            var isRTPSAllowlisted = !!msg.result.peerConnectionId; // if peerConnectionId is defined, isRTPSAllowlisted will be set to true, otherwise, it will remain false
                            // when isRTPSAllowlisted flip from false to true, we need to close standby/early media connection
                            if (isRTPSAllowlisted !== self._signaling._pcm.isRTPSAllowlisted && isRTPSAllowlisted) {
                                self._signaling._pcm.closeEarlyMediaConnection();
                            }
                            self._signaling._pcm.isRTPSAllowlisted = isRTPSAllowlisted;
                            self._signaling._answeredHandler(msg.result.sdp, msg.result.candidates, msg.result.inactivityDuration, msg.result.peerConnectionId, msg.result.peerConnectionToken);
                        } else {
                            self._signaling._answeredHandler(msg.result.sdp, msg.result.candidates);
                        }
                        self._signaling._isMediaClusterPath = !(msg.result.sdp.includes('AmazonConnect') && msg.result.sdp.includes('silenceSupp'));
                        resolve();
                    });
                    this.transit(new PendingAcceptState(this._signaling, this._signaling._autoAnswer));
                }
            }
        }
    }, {
        key: 'translateInviteError',
        value: function translateInviteError(msg) {
            if (msg.error && msg.error.code == 403) {
                return new _exceptions.AccessDeniedException(msg.error.message);
            } else if (msg.error && msg.error.code == 486) {
                return new _exceptions.BusyException(msg.error.message);
            } else if (msg.error && msg.error.code == 404) {
                return new _exceptions.CallNotFoundException(msg.error.message); // ResourceNotFoundException
            } else if (msg.error && msg.error.code == 400) {
                return new _exceptions.BadRequestException(msg.error.message); // BadRequestException
            } else if (msg.error && msg.error.code == 408) {
                return new _exceptions.RequestTimeoutException(msg.error.message); // RequestTimeoutException
            } else if (msg.error && msg.error.code == 409) {
                return new _exceptions.IdempotencyException(msg.error.message); // IdempotencyException
            } else if (msg.error && msg.error.code == 500) {
                return new _exceptions.InternalServerException(msg.error.message); // InternalServerException
            } else {
                return new _exceptions.UnknownSignalingError();
            }
        }
    }, {
        key: 'hangup',
        value: function hangup() {
            this.transit(new FailedState(this._signaling, "Hangs up in PendingAnswerState"));
        }
    }, {
        key: 'name',
        get: function get() {
            return "PendingAnswerState";
        }
    }]);
    return PendingAnswerState;
}(FailOnTimeoutState);

var PendingAcceptState = exports.PendingAcceptState = function (_SignalingState3) {
    (0, _inherits3.default)(PendingAcceptState, _SignalingState3);

    /**
     * Creates PendingAcceptState which sends accpet request to backend server
     *
     * @param signaling - signaling Object
     * @param autoAnswer - boolean object
     * @param retriesIn - the number of retry times
     */
    function PendingAcceptState(signaling, autoAnswer, retriesIn) {
        (0, _classCallCheck3.default)(this, PendingAcceptState);

        var _this5 = (0, _possibleConstructorReturn3.default)(this, (PendingAcceptState.__proto__ || Object.getPrototypeOf(PendingAcceptState)).call(this, signaling));

        _this5._autoAnswer = autoAnswer;
        _this5._retries = retriesIn;
        return _this5;
    }

    (0, _createClass3.default)(PendingAcceptState, [{
        key: 'onEnter',
        value: function onEnter() {
            if (this._autoAnswer) {
                this.accept();
            }
        }
    }, {
        key: 'accept',
        value: function accept() {
            this.sendAcceptRequest();
            // if contactToken exists, signaling move to talking state. Otherwise, move to Idle state
            if (this._signaling._pcm && this._signaling._pcm.isPersistentConnectionEnabled() && this._signaling._pcm.contactToken === null && this._signaling._isFirstTimeSetup) {
                this.transit(new IdleState(this._signaling, this._acceptId, this._retries, _rtc_const.ACCEPT_METHOD_NAME));
            } else {
                this.transit(new TalkingState(this._signaling, this._acceptId, this._retries, _rtc_const.ACCEPT_METHOD_NAME));
            }
        }
    }, {
        key: 'channelDown',
        value: function channelDown() {
            this.transit(new FailedState(this._signaling, new _exceptions.SignalingChannelDownError()));
        }
    }, {
        key: 'sendAcceptRequest',
        value: function () {
            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
                var acceptParams;
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                this._acceptId = (0, _v2.default)();
                                acceptParams = {};

                                if (this._signaling._pcm) {
                                    acceptParams = {
                                        contactId: typeof this._signaling._pcm.callId === "undefined" ? null : this._signaling._pcm.callId,
                                        persistentConnection: this._signaling._pcm.isPPCEnabled,
                                        peerConnectionId: this._signaling._pcm.peerConnectionId,
                                        peerConnectionToken: this._signaling._pcm.peerConnectionToken
                                    };
                                }

                                this._signaling._wss.send(JSON.stringify({
                                    jsonrpc: '2.0',
                                    method: _rtc_const.ACCEPT_METHOD_NAME,
                                    params: acceptParams,
                                    id: this._acceptId
                                }));

                            case 4:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function sendAcceptRequest() {
                return _ref.apply(this, arguments);
            }

            return sendAcceptRequest;
        }()
    }, {
        key: 'name',
        get: function get() {
            return "PendingAcceptState";
        }
    }]);
    return PendingAcceptState;
}(SignalingState);

/**
 * PendingConnectContactState sends connectContact request to backend service
 * when the peer connection has already established instead of sending a new invite request.
 *
 */


var PendingConnectContactState = exports.PendingConnectContactState = function (_SignalingState4) {
    (0, _inherits3.default)(PendingConnectContactState, _SignalingState4);

    function PendingConnectContactState(signaling, retriesIn) {
        (0, _classCallCheck3.default)(this, PendingConnectContactState);

        var _this6 = (0, _possibleConstructorReturn3.default)(this, (PendingConnectContactState.__proto__ || Object.getPrototypeOf(PendingConnectContactState)).call(this, signaling));

        _this6._retries = retriesIn;
        return _this6;
    }

    (0, _createClass3.default)(PendingConnectContactState, [{
        key: 'onEnter',
        value: function onEnter() {
            (0, _get3.default)(PendingConnectContactState.prototype.__proto__ || Object.getPrototypeOf(PendingConnectContactState.prototype), 'onEnter', this).call(this);
            var self = this;
            self.connectContact();
        }
    }, {
        key: 'connectContact',
        value: function connectContact() {
            this._connectContactId = (0, _v2.default)();
            var connectContactParams = {
                contactId: this._signaling._pcm.callId,
                persistentConnection: this._signaling._pcm.isPPCEnabled,
                peerConnectionId: this._signaling._pcm.peerConnectionId,
                peerConnectionToken: this._signaling._pcm.peerConnectionToken,
                callContextToken: this._signaling._pcm.contactToken
            };
            this._signaling._wss._connectionId = this._signaling._pcm.connectionId;
            this._signaling._connectionId = this._signaling._pcm.connectionId;
            this._signaling._wss.send(JSON.stringify({
                jsonrpc: '2.0',
                method: _rtc_const.CONNECT_CONTACT_METHOD_NAME,
                params: connectContactParams,
                id: this._connectContactId
            }));
            this.transit(new TalkingState(this._signaling, this._connectContactId, this._retries, _rtc_const.CONNECT_CONTACT_METHOD_NAME));
        }
    }, {
        key: 'name',
        get: function get() {
            return "PendingConnectContactState";
        }
    }]);
    return PendingConnectContactState;
}(SignalingState);

// This State has never been initialized. (Can be deleted)


var PendingAcceptAckState = exports.PendingAcceptAckState = function (_FailOnTimeoutState3) {
    (0, _inherits3.default)(PendingAcceptAckState, _FailOnTimeoutState3);

    function PendingAcceptAckState(signaling, acceptId) {
        (0, _classCallCheck3.default)(this, PendingAcceptAckState);

        var _this7 = (0, _possibleConstructorReturn3.default)(this, (PendingAcceptAckState.__proto__ || Object.getPrototypeOf(PendingAcceptAckState)).call(this, signaling, _rtc_const.MAX_ACCEPT_BYE_DELAY_MS));

        _this7._acceptId = acceptId;
        return _this7;
    }

    (0, _createClass3.default)(PendingAcceptAckState, [{
        key: 'onRpcMsg',
        value: function onRpcMsg(msg) {
            if (msg.id === this._acceptId) {
                if (msg.error) {
                    this.transit(new FailedState(this._signaling, new _exceptions.SignalingChannelDownError()));
                } else {
                    this._signaling._clientToken = msg.result.clientToken;
                    this.transit(new TalkingState(this._signaling));
                }
            }
        }
    }, {
        key: 'name',
        get: function get() {
            return "PendingAcceptAckState";
        }
    }]);
    return PendingAcceptAckState;
}(FailOnTimeoutState);

/**
 * After signaling handshake completes, if persistent connection is enabled, signaling channel moves to Idle state
 *
 */


var IdleState = exports.IdleState = function (_SignalingState5) {
    (0, _inherits3.default)(IdleState, _SignalingState5);

    /**
     *
     * @param signaling - signaling channel
     * @param methodId - the id for the accept request
     * @param retriesIn - the number of retry times
     * @param retryMethod - the method we want to retry
     */
    function IdleState(signaling, methodId, retriesIn, retryMethod) {
        (0, _classCallCheck3.default)(this, IdleState);

        var _this8 = (0, _possibleConstructorReturn3.default)(this, (IdleState.__proto__ || Object.getPrototypeOf(IdleState)).call(this, signaling));

        _this8._methodId = methodId;
        _this8._retries = retriesIn || 0;
        _this8._retryMethod = retryMethod;
        return _this8;
    }

    (0, _createClass3.default)(IdleState, [{
        key: 'onEnter',
        value: function onEnter() {
            var self = this;
            new Promise(function notifyHandshaked(resolve) {
                self._signaling._handshakedHandler();
                resolve();
            });
            self._signaling._pcm.startInactivityTimer();
        }
    }, {
        key: 'connectContact',
        value: function connectContact() {
            this.transit(new PendingConnectContactState(this._signaling));
        }
    }, {
        key: 'hangup',
        value: function hangup() {
            this.bye();
        }
    }, {
        key: 'bye',
        value: function bye() {
            this._byeId = (0, _v2.default)();
            this._signaling._wss.send(JSON.stringify({
                jsonrpc: '2.0',
                method: _rtc_const.BYE_METHOD_NAME,
                params: {
                    contactId: typeof this._signaling._pcm.callId === "undefined" ? null : this._signaling._pcm.callId,
                    persistentConnection: this._signaling._pcm.isPPCEnabled,
                    peerConnectionId: this._signaling._pcm.peerConnectionId,
                    peerConnectionToken: this._signaling._pcm.peerConnectionToken,
                    callContextToken: this._signaling._pcm.contactToken
                },
                id: this._byeId
            }));

            this.transit(new PendingRemoteHangupState(this._signaling, this._byeId));
        }
    }, {
        key: 'onRpcMsg',
        value: function onRpcMsg(msg) {
            if (msg.method === _rtc_const.PC_BYE_METHOD_NAME) {
                this.logger.log("Received PC bye from server, tear down the peer connection");
                this.tearDownPeerConnection(msg.peerConnectionId);
            } else if (msg.method === _rtc_const.BYE_METHOD_NAME) {
                this.transit(new PendingLocalHangupState(this._signaling, msg.id));
            } else if (msg.method === 'renewClientToken') {
                this._signaling._clientToken = msg.params.clientToken;
            } else if (this._signaling._pcm && msg.error && msg.id === this._methodId) {
                if (this._retryMethod === _rtc_const.ACCEPT_METHOD_NAME && ++this._retries < ACCEPT_MAX_RETRIES) {
                    this.transit(new PendingAcceptState(this._signaling, this._retries));
                } else if (this._signaling._pcm._rtcSession) {
                    // destroy signaling channel and peer connection when receives DisconnectContact error
                    this._signaling._pcm.destroy();
                } else {
                    this.transit(new FailedState(this._signaling, this.translateResponseError(msg)));
                }
            }
        }
    }, {
        key: 'tearDownPeerConnection',
        value: function tearDownPeerConnection(peerConnectionId) {
            if (peerConnectionId === this._signaling._pcm.peerConnectionId) {
                this._signaling._pcm.destroy(peerConnectionId);
                this.transit(new DisconnectedState(this._signaling));
            } else {
                this.logger.log("peerConnectionId in the PCBye request does NOT match the peerConnectionId of the existing peer connection, failed to tear down peer connection");
            }
        }
    }, {
        key: 'translateResponseError',
        value: function translateResponseError(msg) {
            if (msg.error && msg.error.code == 403) {
                return new _exceptions.AccessDeniedException(msg.error.message);
            } else if (msg.error && msg.error.code == 404) {
                return new _exceptions.CallNotFoundException(msg.error.message); // ResourceNotFoundException
            } else if (msg.error && msg.error.code == 400) {
                return new _exceptions.BadRequestException(msg.error.message); // BadRequestException
            } else if (msg.error && msg.error.code == 408) {
                return new _exceptions.RequestTimeoutException(msg.error.message); // RequestTimeoutException
            } else if (msg.error && msg.error.code == 500) {
                return new _exceptions.InternalServerException(msg.error.message); // InternalServerException
            } else {
                return new _exceptions.UnknownSignalingError();
            }
        }
    }, {
        key: 'channelDown',
        value: function channelDown() {
            this._signaling._reconnect();
            this._signaling.transit(new PendingReconnectState(this._signaling));
        }
    }, {
        key: 'name',
        get: function get() {
            return "IdleState";
        }
    }]);
    return IdleState;
}(SignalingState);

var TalkingState = exports.TalkingState = function (_SignalingState6) {
    (0, _inherits3.default)(TalkingState, _SignalingState6);

    /**
     *
     * @param signaling - signaling channel
     * @param methodId - the id for the accept request
     * @param retriesIn - the number of retry times
     * @param retryMethod - the method we want to retry
     */
    function TalkingState(signaling, methodId, retriesIn, retryMethod) {
        (0, _classCallCheck3.default)(this, TalkingState);

        var _this9 = (0, _possibleConstructorReturn3.default)(this, (TalkingState.__proto__ || Object.getPrototypeOf(TalkingState)).call(this, signaling));

        _this9._methodId = methodId;
        _this9._retries = retriesIn || 0;
        _this9._retryMethod = retryMethod;
        return _this9;
    }

    (0, _createClass3.default)(TalkingState, [{
        key: 'onEnter',
        value: function onEnter() {
            var self = this;
            if (!self._signaling._pcm || !self._signaling._pcm.isPersistentConnectionEnabled() || self._signaling._isFirstTimeSetup) {
                new Promise(function notifyHandshaked(resolve) {
                    self._signaling._handshakedHandler();
                    resolve();
                });
            }
            self._signaling._isFirstTimeSetup = false;
        }
    }, {
        key: 'hangup',
        value: function hangup() {
            if (this._signaling._pcm && this._signaling._pcm.isPersistentConnectionEnabled()) {
                this.disconnectContact();
            } else {
                this.bye();
            }
        }
    }, {
        key: 'bye',
        value: function bye() {
            this._byeId = (0, _v2.default)();
            var byeParams = {};
            if (this._signaling._pcm) {
                byeParams = {
                    contactId: typeof this._signaling._pcm.callId === "undefined" ? null : this._signaling._pcm.callId,
                    persistentConnection: this._signaling._pcm.isPPCEnabled,
                    peerConnectionId: this._signaling._pcm.peerConnectionId,
                    peerConnectionToken: this._signaling._pcm.peerConnectionToken,
                    callContextToken: this._signaling._pcm.contactToken
                };
            } else {
                byeParams = { callContextToken: this._signaling._contactToken };
            }

            this._signaling._wss.send(JSON.stringify({
                jsonrpc: '2.0',
                method: _rtc_const.BYE_METHOD_NAME,
                params: byeParams,
                id: this._byeId
            }));

            this.transit(new PendingRemoteHangupState(this._signaling, this._byeId));
        }
    }, {
        key: 'disconnectContact',
        value: function disconnectContact() {
            this._disconnectContactId = (0, _v2.default)();
            var self = this;
            this._signaling._wss.send(JSON.stringify({
                jsonrpc: '2.0',
                method: _rtc_const.DISCONNECT_CONTACT_METHOD_NAME,
                params: {
                    contactId: self._signaling._pcm.callId,
                    peerConnectionId: self._signaling._pcm.peerConnectionId,
                    peerConnectionToken: self._signaling._pcm.peerConnectionToken
                },
                id: this._disconnectContactId
            }));
            this.transit(new IdleState(this._signaling, this._disconnectContactId));
        }
    }, {
        key: 'onRpcMsg',
        value: function onRpcMsg(msg) {
            if (msg.method === _rtc_const.BYE_METHOD_NAME) {
                this.transit(new PendingLocalHangupState(this._signaling, msg.id));
            } else if (msg.method === 'renewClientToken') {
                this._signaling._clientToken = msg.params.clientToken;
            } else if (this._signaling._pcm && msg.error && msg.id === this._methodId) {
                if (this._retryMethod === _rtc_const.CONNECT_CONTACT_METHOD_NAME && ++this._retries < CONNECT_CONTACT_MAX_RETRIES) {
                    this.transit(new PendingConnectContactState(this._signaling, this._retries));
                } else if (this._retryMethod === _rtc_const.ACCEPT_METHOD_NAME && ++this._retries < ACCEPT_MAX_RETRIES) {
                    this.transit(new PendingAcceptState(this._signaling, this._retries));
                } else {
                    this.transit(new FailedState(this._signaling, this.translateResponseError(msg)));
                }
            }
        }
    }, {
        key: 'translateResponseError',
        value: function translateResponseError(msg) {
            if (msg.error && msg.error.code == 403) {
                // AccessDeniedException
                return new _exceptions.AccessDeniedException(msg.error.message);
            } else if (msg.error.code == 404) {
                return new _exceptions.CallNotFoundException(msg.error.message); // ResourceNotFoundException
            } else if (msg.error.code == 400) {
                return new _exceptions.BadRequestException(msg.error.message); // BadRequestException
            } else if (msg.error.code == 408) {
                return new _exceptions.RequestTimeoutException(msg.error.message); // RequestTimeoutException
            } else if (msg.error.code == 500) {
                return new _exceptions.InternalServerException(msg.error.message); // InternalServerException
            } else {
                return new _exceptions.UnknownSignalingError();
            }
        }
    }, {
        key: 'channelDown',
        value: function channelDown() {
            this._signaling._reconnect();
            this._signaling.transit(new PendingReconnectState(this._signaling));
        }
    }, {
        key: 'name',
        get: function get() {
            return "TalkingState";
        }
    }]);
    return TalkingState;
}(SignalingState);

var PendingReconnectState = exports.PendingReconnectState = function (_FailOnTimeoutState4) {
    (0, _inherits3.default)(PendingReconnectState, _FailOnTimeoutState4);

    function PendingReconnectState(signaling) {
        (0, _classCallCheck3.default)(this, PendingReconnectState);
        return (0, _possibleConstructorReturn3.default)(this, (PendingReconnectState.__proto__ || Object.getPrototypeOf(PendingReconnectState)).call(this, signaling, _rtc_const.DEFAULT_CONNECT_TIMEOUT_MS));
    }

    (0, _createClass3.default)(PendingReconnectState, [{
        key: 'onOpen',
        value: function onOpen() {
            this.transit(new TalkingState(this._signaling));
        }
    }, {
        key: 'channelDown',
        value: function channelDown() {
            this.transit(new FailedState(this._signaling, new _exceptions.SignalingChannelDownError()));
        }
    }, {
        key: 'name',
        get: function get() {
            return "PendingReconnectState";
        }
    }]);
    return PendingReconnectState;
}(FailOnTimeoutState);

var PendingRemoteHangupState = exports.PendingRemoteHangupState = function (_FailOnTimeoutState5) {
    (0, _inherits3.default)(PendingRemoteHangupState, _FailOnTimeoutState5);

    function PendingRemoteHangupState(signaling, byeId) {
        (0, _classCallCheck3.default)(this, PendingRemoteHangupState);

        var _this11 = (0, _possibleConstructorReturn3.default)(this, (PendingRemoteHangupState.__proto__ || Object.getPrototypeOf(PendingRemoteHangupState)).call(this, signaling, _rtc_const.MAX_ACCEPT_BYE_DELAY_MS));

        _this11._byeId = byeId;
        return _this11;
    }
    // response


    (0, _createClass3.default)(PendingRemoteHangupState, [{
        key: 'onRpcMsg',
        value: function onRpcMsg(msg) {
            if (msg.id === this._byeId || msg.method === _rtc_const.BYE_METHOD_NAME) {
                this.transit(new DisconnectedState(this._signaling));
            }
        }
    }, {
        key: 'name',
        get: function get() {
            return "PendingRemoteHangupState";
        }
    }]);
    return PendingRemoteHangupState;
}(FailOnTimeoutState);

var PendingLocalHangupState = exports.PendingLocalHangupState = function (_SignalingState7) {
    (0, _inherits3.default)(PendingLocalHangupState, _SignalingState7);

    function PendingLocalHangupState(signaling, byeId) {
        (0, _classCallCheck3.default)(this, PendingLocalHangupState);

        var _this12 = (0, _possibleConstructorReturn3.default)(this, (PendingLocalHangupState.__proto__ || Object.getPrototypeOf(PendingLocalHangupState)).call(this, signaling));

        _this12._byeId = byeId;
        return _this12;
    }

    (0, _createClass3.default)(PendingLocalHangupState, [{
        key: 'onEnter',
        value: function onEnter() {
            var self = this;
            new Promise(function notifyRemoteHungup(resolve) {
                self._signaling._remoteHungupHandler();
                resolve();
            });
        }
    }, {
        key: 'hangup',
        value: function hangup() {
            var self = this;
            self._signaling._wss.send(JSON.stringify({
                jsonrpc: '2.0',
                result: {},
                id: self._byeId
            }));
            self.transit(new DisconnectedState(self._signaling));
        }
    }, {
        key: 'onRpcMsg',
        value: function onRpcMsg() {
            //Do nothing
        }
    }, {
        key: 'channelDown',
        value: function channelDown() {
            this.transit(new DisconnectedState(this._signaling));
        }
    }, {
        key: 'name',
        get: function get() {
            return "PendingLocalHangupState";
        }
    }]);
    return PendingLocalHangupState;
}(SignalingState);

var DisconnectedState = exports.DisconnectedState = function (_SignalingState8) {
    (0, _inherits3.default)(DisconnectedState, _SignalingState8);

    function DisconnectedState() {
        (0, _classCallCheck3.default)(this, DisconnectedState);
        return (0, _possibleConstructorReturn3.default)(this, (DisconnectedState.__proto__ || Object.getPrototypeOf(DisconnectedState)).apply(this, arguments));
    }

    (0, _createClass3.default)(DisconnectedState, [{
        key: 'onEnter',
        value: function onEnter() {
            var self = this;
            new Promise(function notifyDisconnected(resolve) {
                self._signaling._disconnectedHandler();
                resolve();
            });
            this._signaling._wss.close();
        }
    }, {
        key: 'channelDown',
        value: function channelDown() {
            //Do nothing
        }
    }, {
        key: 'onRpcMsg',
        value: function onRpcMsg() {
            //Do nothing
        }
    }, {
        key: 'name',
        get: function get() {
            return "DisconnectedState";
        }
    }]);
    return DisconnectedState;
}(SignalingState);

var FailedState = exports.FailedState = function (_SignalingState9) {
    (0, _inherits3.default)(FailedState, _SignalingState9);

    function FailedState(signaling, exception) {
        (0, _classCallCheck3.default)(this, FailedState);

        var _this14 = (0, _possibleConstructorReturn3.default)(this, (FailedState.__proto__ || Object.getPrototypeOf(FailedState)).call(this, signaling));

        _this14._exception = exception;
        return _this14;
    }

    (0, _createClass3.default)(FailedState, [{
        key: 'onEnter',
        value: function onEnter() {
            var self = this;
            new Promise(function notifyFailed(resolve) {
                if (self._signaling._pcm && self._exception.name === _exceptions.AccessDeniedExceptionName) {
                    self._signaling._pcm.isRTPSAllowlisted = false;
                    self._signaling._pcm.closeEarlyMediaConnection();
                }
                self._signaling._failedHandler(self._exception);
                resolve();
            });
            if (!self._signaling._pcm) {
                self._signaling._wss.close();
            }
        }
    }, {
        key: 'bye',
        value: function bye() {
            this._byeId = (0, _v2.default)();
            this._signaling._wss.send(JSON.stringify({
                jsonrpc: '2.0',
                method: _rtc_const.BYE_METHOD_NAME,
                params: {
                    contactId: typeof this._signaling._pcm.callId === "undefined" ? null : this._signaling._pcm.callId,
                    persistentConnection: this._signaling._pcm.isPPCEnabled,
                    peerConnectionId: this._signaling._pcm.peerConnectionId,
                    peerConnectionToken: this._signaling._pcm.peerConnectionToken,
                    callContextToken: this._signaling._pcm.contactToken
                },
                id: this._byeId
            }));
        }
    }, {
        key: 'hangup',
        value: function hangup() {
            this.bye();
        }
    }, {
        key: 'onRpcMsg',
        value: function onRpcMsg() {
            // Do nothing
        }
    }, {
        key: 'channelDown',
        value: function channelDown() {
            //Do nothing
        }
    }, {
        key: 'name',
        get: function get() {
            return "FailedState";
        }
    }, {
        key: 'exception',
        get: function get() {
            return this._exception;
        }
    }]);
    return FailedState;
}(SignalingState);

var AmznRtcSignaling = function () {
    // TODO: add javaScript doc here
    function AmznRtcSignaling(callId, signalingUri, contactToken, logger, connectTimeoutMs, connectionId, wssManager) {
        var iceRestart = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : false;
        var persistentConnectionManager = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : null;
        (0, _classCallCheck3.default)(this, AmznRtcSignaling);

        this._callId = callId;
        this._connectTimeoutMs = connectTimeoutMs || _rtc_const.DEFAULT_CONNECT_TIMEOUT_MS;
        this._autoAnswer = true;
        this._signalingUri = signalingUri;
        this._contactToken = contactToken;
        this._logger = (0, _utils.wrapLogger)(logger, callId, 'SIGNALING');
        this._connectionId = connectionId;
        this._wssManager = wssManager;
        this._iceRestart = iceRestart;
        this._pcm = persistentConnectionManager;
        this._isFirstTimeSetup = true;

        //empty event handlers
        this._connectedHandler = this._answeredHandler = this._handshakedHandler = this._reconnectedHandler = this._remoteHungupHandler = this._disconnectedHandler = this._failedHandler = function noOp() {};
    }

    (0, _createClass3.default)(AmznRtcSignaling, [{
        key: 'connect',
        value: function connect() {
            this._connect();
            this.transit(new PendingConnectState(this, this._connectTimeoutMs));
        }
    }, {
        key: '_connect',
        value: function _connect() {
            this._wss = this._connectWebSocket(this._buildInviteUri());
        }
    }, {
        key: 'transit',
        value: function transit(nextState) {
            try {
                this._logger.info((this._state ? this._state.name : 'null') + ' => ' + nextState.name);
                if (this.state && this.state.onExit) {
                    this.state.onExit();
                }
            } finally {
                this._state = nextState;
                if (this._state.onEnter) {
                    this._state.onEnter();
                }
            }
        }
    }, {
        key: '_connectWebSocket',
        value: function _connectWebSocket(uri) {
            var wsConnection = void 0;
            if (this._wssManager) {
                wsConnection = new _virtual_wss_connection_manager2.default(this._logger, this._connectionId, this._wssManager);
            } else {
                wsConnection = new WebSocket(uri);
            }
            wsConnection.onopen = (0, _utils.hitch)(this, this._onOpen);
            wsConnection.onmessage = (0, _utils.hitch)(this, this._onMessage);
            wsConnection.onerror = (0, _utils.hitch)(this, this._onError);
            wsConnection.onclose = (0, _utils.hitch)(this, this._onClose);
            return wsConnection;
        }
    }, {
        key: '_buildInviteUri',
        value: function _buildInviteUri() {
            if (this._contactToken) {
                return this._buildUriBase() + '&contactCtx=' + encodeURIComponent(this._contactToken);
            } else {
                return this._buildUriBase();
            }
        }
    }, {
        key: '_buildReconnectUri',
        value: function _buildReconnectUri() {
            return this._buildUriBase() + '&clientToken=' + encodeURIComponent(this._clientToken);
        }
    }, {
        key: '_buildUriBase',
        value: function _buildUriBase() {
            var separator = '?';
            if (!this._pcm && this._signalingUri.indexOf(separator) > -1) {
                separator = '&';
            }
            return this._signalingUri + separator + 'callId=' + encodeURIComponent(this._callId);
        }
    }, {
        key: '_onMessage',
        value: function _onMessage(evt) {
            this.state.onRpcMsg(JSON.parse(evt.data));
        }
    }, {
        key: '_onOpen',
        value: function _onOpen(evt) {
            this.state.onOpen(evt);
        }
    }, {
        key: '_onError',
        value: function _onError(evt) {
            this.state.onError(evt);
        }
    }, {
        key: '_onClose',
        value: function _onClose(evt) {
            this._logger.log('WebSocket onclose code=' + evt.code + ', reason=' + evt.reason);
            this.state.onClose(evt);
        }
    }, {
        key: '_reconnect',
        value: function _reconnect() {
            this._wss = this._connectWebSocket(this._buildReconnectUri());
        }
    }, {
        key: 'invite',
        value: function invite(sdp, iceCandidates) {
            this.state.invite(sdp, iceCandidates);
        }
    }, {
        key: 'connectContact',
        value: function connectContact() {
            this.state.connectContact();
        }
    }, {
        key: 'accept',
        value: function accept() {
            this.state.accept();
        }
    }, {
        key: 'hangup',
        value: function hangup() {
            this.state.hangup();
        }
    }, {
        key: 'bye',
        value: function bye() {
            this.state.bye();
        }
    }, {
        key: 'callId',
        get: function get() {
            return this._callId;
        }
    }, {
        key: 'iceRestart',
        get: function get() {
            return this._iceRestart;
        }
    }, {
        key: 'onConnected',
        set: function set(connectedHandler) {
            this._connectedHandler = connectedHandler;
        }
    }, {
        key: 'onAnswered',
        set: function set(answeredHandler) {
            this._answeredHandler = answeredHandler;
        }
    }, {
        key: 'onHandshaked',
        set: function set(handshakedHandler) {
            this._handshakedHandler = handshakedHandler;
        }
    }, {
        key: 'onReconnected',
        set: function set(reconnectedHandler) {
            this._reconnectedHandler = reconnectedHandler;
        }
    }, {
        key: 'onRemoteHungup',
        set: function set(remoteHungupHandler) {
            this._remoteHungupHandler = remoteHungupHandler;
        }
    }, {
        key: 'onDisconnected',
        set: function set(disconnectedHandler) {
            this._disconnectedHandler = disconnectedHandler;
        }
    }, {
        key: 'onFailed',
        set: function set(failedHandler) {
            this._failedHandler = failedHandler;
        }
    }, {
        key: 'state',
        get: function get() {
            return this._state;
        }
    }]);
    return AmznRtcSignaling;
}();

exports.default = AmznRtcSignaling;

},{"./exceptions":152,"./rtc_const":153,"./utils":167,"./virtual_wss_connection_manager":168,"babel-runtime/helpers/asyncToGenerator":16,"babel-runtime/helpers/classCallCheck":17,"babel-runtime/helpers/createClass":18,"babel-runtime/helpers/get":19,"babel-runtime/helpers/inherits":20,"babel-runtime/helpers/possibleConstructorReturn":21,"babel-runtime/regenerator":27,"uuid/v4":137}],161:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CCPInitiationStrategyInterface = function () {
    function CCPInitiationStrategyInterface() {
        (0, _classCallCheck3.default)(this, CCPInitiationStrategyInterface);

        console.log("CCPInitiationStrategyInterface initialized");
    }

    (0, _createClass3.default)(CCPInitiationStrategyInterface, [{
        key: "getStrategyName",
        value: function getStrategyName() {
            console.error("getStrategyName needs to be overridden");
        }

        // the following functions are rtc_peer_connection_factory related functions
        // check if the browser supports early media connection

    }, {
        key: "_isEarlyMediaConnectionSupported",
        value: function _isEarlyMediaConnectionSupported() {
            console.error("_isEarlyMediaConnectionSupported needs to be overridden");
        }
    }, {
        key: "_createRtcPeerConnection",
        value: function _createRtcPeerConnection() {
            console.error("_createRtcPeerConnection needs to be overridden");
        }

        // the following functions are rtc_session related functions

    }, {
        key: "_gUM",
        value: function _gUM() {
            console.error("_gUM needs to be overridden");
        }

        // the following functions are rtc_session related functions

    }, {
        key: "_createMediaStream",
        value: function _createMediaStream() {
            console.error("_createMediaStream needs to be overridden");
        }
    }, {
        key: "addStream",
        value: function addStream() {
            console.error("addStream needs to be overridden");
        }
    }, {
        key: "setRemoteDescription",
        value: function setRemoteDescription() {
            console.error("setRemoteDescription needs to be overridden");
        }
    }, {
        key: "setRemoteDescriptionForIceRestart",
        value: function setRemoteDescriptionForIceRestart() {
            console.error("setRemoteDescriptionForIceRestart needs to be overridden");
        }
    }, {
        key: "onIceStateChange",
        value: function onIceStateChange() {
            console.error("onIceStateChange needs to be overridden");
        }
    }, {
        key: "onPeerConnectionStateChange",
        value: function onPeerConnectionStateChange() {
            console.error("onPeerConnectionStateChange needs to be overridden");
        }
    }, {
        key: "_createPeerConnection",
        value: function _createPeerConnection() {
            console.error("_createPeerConnection needs to be overridden");
        }
    }, {
        key: "connect",
        value: function connect() {
            console.error("connect needs to be overridden");
        }
    }, {
        key: "_ontrack",
        value: function _ontrack() {
            console.error("_ontrack needs to be overridden");
        }
    }, {
        key: "_buildMediaConstraints",
        value: function _buildMediaConstraints() {
            console.error("_buildMediaConstraints needs to be overridden");
        }
    }]);
    return CCPInitiationStrategyInterface;
}();

exports.default = CCPInitiationStrategyInterface;

},{"babel-runtime/helpers/classCallCheck":17,"babel-runtime/helpers/createClass":18}],162:[function(require,module,exports){
(function (global){(function (){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require("babel-runtime/helpers/inherits");

var _inherits3 = _interopRequireDefault(_inherits2);

var _CCPInitiationStrategyInterface = require("./CCPInitiationStrategyInterface");

var _CCPInitiationStrategyInterface2 = _interopRequireDefault(_CCPInitiationStrategyInterface);

var _rtc_session = require("../rtc_session");

var _rtc_const = require("../rtc_const");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CitrixVDIStrategy = function (_CCPInitiationStrateg) {
    (0, _inherits3.default)(CitrixVDIStrategy, _CCPInitiationStrateg);

    function CitrixVDIStrategy() {
        var useRealCitrix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
        (0, _classCallCheck3.default)(this, CitrixVDIStrategy);

        var _this = (0, _possibleConstructorReturn3.default)(this, (CitrixVDIStrategy.__proto__ || Object.getPrototypeOf(CitrixVDIStrategy)).call(this));

        if (useRealCitrix) {
            require("@citrix/ucsdk/CitrixWebRTC");
        }
        console.log("CitrixVDIStrategy initializing");
        _this.initCitrixWebRTC();
        _this.initGetCitrixWebrtcRedir();
        _this.initLog();
        // version is an Citrix object in following format
        // "version": {
        //     "type_script": "3.1.0",
        //         "webrpc": "1.7.0.0",
        //         "webrtc_codecs": "0.0.0.0",
        //         "receiver": "24.11.0.51",
        //         "vda": "0.0.0.0",
        //         "endpoint": "0.0.0.0",
        //         "osinfo": {
        //         "family": "Browser",
        //             "version": "15.3.1",
        //             "architecture": "",
        //             "distro": "",
        //             "edition": "Mac-Chrome(version:133.0.0.0, userAgent:Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/133.0.0.0 Safari/537.36)"
        //     },
        //     "clientPlatform": "Browser"
        // }
        _this.version = "UNKNOWN";
        return _this;
    }

    (0, _createClass3.default)(CitrixVDIStrategy, [{
        key: "initCitrixWebRTC",
        value: function initCitrixWebRTC() {
            var self = this;
            window.CitrixWebRTC.setVMEventCallback(function (event) {
                if (event.event === 'vdiClientConnected') {
                    if (!window.CitrixWebRTC.isFeatureOn("webrtc1.0")) {
                        throw new Error('Citrix WebRTC redirection feature is NOT supported!');
                    }
                    console.log("CitrixVDIStrategy initialized");
                    self.version = event.version;
                } else if (event.event === 'vdiClientDisconnected') {
                    console.log("vdiClientDisconnected");
                }
            });
            window.CitrixWebRTC.initUCSDK("AmazonConnect");
        }
    }, {
        key: "initGetCitrixWebrtcRedir",
        value: function initGetCitrixWebrtcRedir() {
            window.getCitrixWebrtcRedir = function () {
                return Promise.resolve(1);
            };
        }
    }, {
        key: "initLog",
        value: function initLog() {
            window.CitrixWebRTC.initLog(global.connect.getLog());
        }

        // the following functions are rtc_peer_connection_factory related functions
        // check if the browser supports early media connection

    }, {
        key: "_isEarlyMediaConnectionSupported",
        value: function _isEarlyMediaConnectionSupported() {
            // Citrix WebRTC SDK doesn't support early media connection
            return false;
        }
    }, {
        key: "_createRtcPeerConnection",
        value: function _createRtcPeerConnection(rtcPeerConnectionConfig, rtcPeerConnectionOptionalConfig) {
            return new window.CitrixWebRTC.CitrixPeerConnection(rtcPeerConnectionConfig, rtcPeerConnectionOptionalConfig);
        }

        // the following functions are rtc_session related functions

    }, {
        key: "_gUM",
        value: function _gUM(constraints) {
            return window.CitrixWebRTC.getUserMedia(constraints);
        }
    }, {
        key: "_createMediaStream",
        value: function _createMediaStream(track) {
            return window.CitrixWebRTC.createMediaStream([track]);
        }
    }, {
        key: "addStream",
        value: function addStream(_pc, stream) {
            stream.getTracks().forEach(function (track) {
                _pc.addTransceiver(track, {});
            });
        }
    }, {
        key: "setRemoteDescription",
        value: function setRemoteDescription(self, rtcSession) {
            if (this.version && this.version.clientPlatform === "Browser") {
                // ChromeOS does not support addIceCandidate yet.
                self._candidates.forEach(function (candidate) {
                    if (candidate && typeof candidate.candidate === 'string' && candidate.candidate.trim() !== '') {
                        self._sdp += "a=" + candidate.candidate + "\n";
                        self.logger.info('Updated SDP for ChromeOS', "a=" + candidate.candidate + "\n");
                    }
                });
            }

            var answerSessionDescription = self._createSessionDescription({ type: 'answer', sdp: self._sdp });

            rtcSession._pc.setRemoteDescription(answerSessionDescription, function () {
                var remoteCandidatePromises = Promise.all(self._candidates.map(function (candidate) {
                    var remoteCandidate = self._createRemoteCandidate(candidate);
                    self.logger.info('Adding remote candidate', remoteCandidate);
                    return rtcSession._pc.addIceCandidate(remoteCandidate);
                }));
                remoteCandidatePromises.catch(function (reason) {
                    self.logger.warn('Error adding remote candidate', reason);
                });
                rtcSession._sessionReport.setRemoteDescriptionFailure = false;
                self._remoteDescriptionSet = true;
                self._checkAndTransit();
            }, function () {
                rtcSession._stopSession();
                rtcSession._sessionReport.setRemoteDescriptionFailure = true;
                self.transit(new _rtc_session.FailedState(rtcSession, _rtc_const.RTC_ERRORS.SET_REMOTE_DESCRIPTION_FAILURE));
            });
        }

        // Todo: modify the sdp for ChromeOS here by adding a=candidate line, once pc.setConfiguration is supported for IceRestart

    }, {
        key: "setRemoteDescriptionForIceRestart",
        value: function setRemoteDescriptionForIceRestart(self, rtcSession) {
            var answerSessionDescription = self._createSessionDescription({ type: 'answer', sdp: self._sdp });

            rtcSession._pc.setRemoteDescription(answerSessionDescription, function () {
                var remoteCandidatePromises = Promise.all(self._candidates.map(function (candidate) {
                    var remoteCandidate = self._createRemoteCandidate(candidate);
                    self.logger.info('Adding remote candidate', remoteCandidate);
                    return rtcSession._pc.addIceCandidate(remoteCandidate);
                }));
                remoteCandidatePromises.catch(function (reason) {
                    self.logger.warn('Error adding remote candidate', reason);
                });
                self._remoteDescriptionSetForIceRestart = true;
                self._checkAndTransit();
            }, function () {
                self.onIceRestartFailure();
            });
        }
    }, {
        key: "onIceStateChange",
        value: function onIceStateChange(evt, _pc) {
            return _pc.iceConnectionState;
        }
    }, {
        key: "onPeerConnectionStateChange",
        value: function onPeerConnectionStateChange(_pc) {
            return _pc.connectionState_;
        }
    }, {
        key: "_createPeerConnection",
        value: function _createPeerConnection(configuration, optionalConfiguration) {
            return new window.CitrixWebRTC.CitrixPeerConnection(configuration, optionalConfiguration);
        }
    }, {
        key: "_ontrack",
        value: function _ontrack(self, evt) {
            window.CitrixWebRTC.mapAudioElement(self._remoteAudioElement);
            if (evt.streams.length > 1) {
                self._logger.warn('Found more than 1 streams for ' + evt.track.kind + ' track ' + evt.track.id + ' : ' + evt.streams.map(function (stream) {
                    return stream.id;
                }).join(','));
            }
            if (evt.track.kind === 'video' && self._remoteVideoElement) {
                self._remoteVideoElement.srcObject = evt.streams[0];
                self._remoteVideoStream = evt.streams[0];
            } else if (evt.track.kind === 'audio' && self._remoteAudioElement) {
                self._remoteAudioElement.srcObject = evt.streams[0];
                self._remoteAudioStream = evt.streams[0];
            }
            self._remoteAudioElement.play();
        }
    }, {
        key: "_buildMediaConstraints",
        value: function _buildMediaConstraints(self, mediaConstraints) {
            if (self._enableAudio) {
                var audioConstraints = {};
                if (typeof self._echoCancellation !== 'undefined') {
                    audioConstraints.echoCancellation = !!self._echoCancellation;
                }
                if (window.audio_input) {
                    audioConstraints.deviceId = window.audio_input;
                }
                if (Object.keys(audioConstraints).length > 0) {
                    mediaConstraints.audio = audioConstraints;
                } else {
                    mediaConstraints.audio = true;
                }
            } else {
                mediaConstraints.audio = false;
            }
        }
    }, {
        key: "getStrategyName",
        value: function getStrategyName() {
            return 'CitrixVDIStrategy';
        }
    }]);
    return CitrixVDIStrategy;
}(_CCPInitiationStrategyInterface2.default); /**
                                              * By using the Citrix ucsdk (https://www.npmjs.com/package/@citrix/ucsdk), you are accepting the Citrix Developer Terms of Use  located here: https://www.cloud.com/terms-of-use.
                                              */

exports.default = CitrixVDIStrategy;

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../rtc_const":153,"../rtc_session":156,"./CCPInitiationStrategyInterface":161,"@citrix/ucsdk/CitrixWebRTC":2,"babel-runtime/helpers/classCallCheck":17,"babel-runtime/helpers/createClass":18,"babel-runtime/helpers/inherits":20,"babel-runtime/helpers/possibleConstructorReturn":21}],163:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof2 = require("babel-runtime/helpers/typeof");

var _typeof3 = _interopRequireDefault(_typeof2);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require("babel-runtime/helpers/inherits");

var _inherits3 = _interopRequireDefault(_inherits2);

var _CCPInitiationStrategyInterface = require("./CCPInitiationStrategyInterface");

var _CCPInitiationStrategyInterface2 = _interopRequireDefault(_CCPInitiationStrategyInterface);

var _rtc_session = require("../rtc_session");

var _rtc_const = require("../rtc_const");

var _constants = require("../config/constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CHROME_SUPPORTED_VERSION = 59;

var DCVWebRTCStrategy = function (_CCPInitiationStrateg) {
    (0, _inherits3.default)(DCVWebRTCStrategy, _CCPInitiationStrateg);

    function DCVWebRTCStrategy() {
        (0, _classCallCheck3.default)(this, DCVWebRTCStrategy);

        var _this = (0, _possibleConstructorReturn3.default)(this, (DCVWebRTCStrategy.__proto__ || Object.getPrototypeOf(DCVWebRTCStrategy)).call(this));

        if (window.DCVWebRTCPeerConnectionProxy) {
            window.DCVWebRTCPeerConnectionProxy.setInitCallback(function (result) {
                if (result.success) {
                    // This is only created when:
                    // 1) the dcv webrtc chrome extension is installed and enabled and
                    // 2) this browser is running within a DCV server environment and
                    // 3) the dcv server is connected from a WebRTC redirection-enabled client
                    _this.proxy = window.DCVWebRTCRedirProxy;
                    _this.proxy.overrideWebRTC();
                    console.log('DCVStrategy initialized');
                } else {
                    throw new Error('DCV WebRTC redirection feature is NOT supported!');
                }
            }, 5000);
        } else {
            throw new Error('DCV WebRTC redirection feature is NOT supported!');
        }
        return _this;
    }

    (0, _createClass3.default)(DCVWebRTCStrategy, [{
        key: "isChromeBrowser",
        value: function isChromeBrowser() {
            return this.proxy.clientInfo.browserDetails.browser === _constants.CHROME;
        }
    }, {
        key: "getChromeBrowserVersion",
        value: function getChromeBrowserVersion() {
            return this.proxy.clientInfo.browserDetails.version;
        }
    }, {
        key: "_isEarlyMediaConnectionSupported",
        value: function _isEarlyMediaConnectionSupported() {
            return this.isChromeBrowser() && this.getChromeBrowserVersion() >= CHROME_SUPPORTED_VERSION;
        }
    }, {
        key: "_createRtcPeerConnection",
        value: function _createRtcPeerConnection(rtcPeerConnectionConfig, rtcPeerConnectionOptionalConfig) {
            return this.proxy.createPeerConnection(rtcPeerConnectionConfig, rtcPeerConnectionOptionalConfig);
        }
    }, {
        key: "_buildMediaConstraints",
        value: function _buildMediaConstraints(self, mediaConstraints) {
            if (self._enableAudio) {
                var audioConstraints = {};
                if ((0, _typeof3.default)(self._echoCancellation) !== _constants.UNDEFINED) {
                    audioConstraints.echoCancellation = !!self._echoCancellation;
                }
                if (Object.keys(audioConstraints).length > 0) {
                    mediaConstraints.audio = audioConstraints;
                } else {
                    mediaConstraints.audio = true;
                }
            } else {
                mediaConstraints.audio = false;
            }
        }
    }, {
        key: "_gUM",
        value: function _gUM(constraints) {
            return this.proxy.getUserMedia(constraints);
        }
    }, {
        key: "_createMediaStream",
        value: function _createMediaStream(track) {
            return new MediaStream([track]);
        }
    }, {
        key: "_createPeerConnection",
        value: function _createPeerConnection(configuration, optionalConfiguration) {
            return this.proxy.createPeerConnection(configuration, optionalConfiguration);
        }
    }, {
        key: "addStream",
        value: function addStream(_pc, stream) {
            stream.getTracks().forEach(function (track) {
                var transceiver = _pc.addTransceiver(track.kind, {
                    streams: [stream]
                });
                transceiver.sender.replaceTrack(track);
            });
        }
    }, {
        key: "setRemoteDescription",
        value: function setRemoteDescription(self, rtcSession) {
            var setRemoteDescriptionPromise = rtcSession._pc.setRemoteDescription(self._createSessionDescription({
                type: _constants.ANSWER,
                sdp: self._sdp
            }));
            setRemoteDescriptionPromise.catch(function (e) {
                self.logger.error('SetRemoteDescription failed', e);
            });
            setRemoteDescriptionPromise.then(function () {
                var remoteCandidatePromises = Promise.all(self._candidates.map(function (candidate) {
                    var remoteCandidate = self._createRemoteCandidate(candidate);
                    self.logger.info('Adding remote candidate', remoteCandidate);
                    return rtcSession._pc.addIceCandidate(remoteCandidate);
                }));
                remoteCandidatePromises.catch(function (reason) {
                    self.logger.warn('Error adding remote candidate', reason);
                });
                return remoteCandidatePromises;
            }).then(function () {
                rtcSession._sessionReport.setRemoteDescriptionFailure = false;
                self._remoteDescriptionSet = true;
                self._checkAndTransit();
            }).catch(function () {
                rtcSession._stopSession();
                rtcSession._sessionReport.setRemoteDescriptionFailure = true;
                self.transit(new _rtc_session.FailedState(rtcSession, _rtc_const.RTC_ERRORS.SET_REMOTE_DESCRIPTION_FAILURE));
            });
        }
    }, {
        key: "setRemoteDescriptionForIceRestart",
        value: function setRemoteDescriptionForIceRestart(self, rtcSession) {
            var setRemoteDescriptionPromise = rtcSession._pc.setRemoteDescription(self._createSessionDescription({
                type: _constants.ANSWER,
                sdp: self._sdp
            }));
            setRemoteDescriptionPromise.catch(function (e) {
                self.logger.error('SetRemoteDescription failed', e);
            });
            setRemoteDescriptionPromise.then(function () {
                var remoteCandidatePromises = Promise.all(self._candidates.map(function (candidate) {
                    var remoteCandidate = self._createRemoteCandidate(candidate);
                    self.logger.info('Adding remote candidate', remoteCandidate);
                    return rtcSession._pc.addIceCandidate(remoteCandidate);
                }));
                remoteCandidatePromises.catch(function (reason) {
                    self.logger.warn('Error adding remote candidate', reason);
                });
                return remoteCandidatePromises;
            }).then(function () {
                self._remoteDescriptionSetForIceRestart = true;
                self._checkAndTransit();
            }).catch(function () {
                self.onIceRestartFailure();
            });
        }
    }, {
        key: "onIceStateChange",
        value: function onIceStateChange(evt, _pc) {
            return _pc.iceConnectionState;
        }
    }, {
        key: "onPeerConnectionStateChange",
        value: function onPeerConnectionStateChange(_pc) {
            return _pc.connectionState;
        }
    }, {
        key: "_ontrack",
        value: function _ontrack(self, evt) {
            if (evt.streams.length > 1) {
                console.warn('Found more than 1 streams for ' + evt.track.kind + ' track ' + evt.track.id + ' : ' + evt.streams.map(function (stream) {
                    return stream.id;
                }).join(','));
            }
            var stream = evt.streams[0];
            self._remoteAudioElement = this.createMediaElement(stream);
            self._remoteAudioStream = stream;
            self._remoteAudioElement.srcObject = stream;
        }
    }, {
        key: "createMediaElement",
        value: function createMediaElement(stream) {
            var props = {
                kind: _constants.AUDIO,
                autoplay: true
            };
            var element = stream.createMediaElement(props);
            console.log("Creating proxied media element.");
            return element;
        }
    }, {
        key: "getStrategyName",
        value: function getStrategyName() {
            return _constants.DCV_STRATEGY;
        }
    }]);
    return DCVWebRTCStrategy;
}(_CCPInitiationStrategyInterface2.default);

exports.default = DCVWebRTCStrategy;

},{"../config/constants":150,"../rtc_const":153,"../rtc_session":156,"./CCPInitiationStrategyInterface":161,"babel-runtime/helpers/classCallCheck":17,"babel-runtime/helpers/createClass":18,"babel-runtime/helpers/inherits":20,"babel-runtime/helpers/possibleConstructorReturn":21,"babel-runtime/helpers/typeof":24}],164:[function(require,module,exports){
(function (global){(function (){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require("babel-runtime/helpers/inherits");

var _inherits3 = _interopRequireDefault(_inherits2);

var _CCPInitiationStrategyInterface = require("./CCPInitiationStrategyInterface");

var _CCPInitiationStrategyInterface2 = _interopRequireDefault(_CCPInitiationStrategyInterface);

var _rtc_session = require("../rtc_session");

var _rtc_const = require("../rtc_const");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var OmnissaVDIStrategy = function (_CCPInitiationStrateg) {
    (0, _inherits3.default)(OmnissaVDIStrategy, _CCPInitiationStrateg);

    function OmnissaVDIStrategy() {
        (0, _classCallCheck3.default)(this, OmnissaVDIStrategy);

        var _this = (0, _possibleConstructorReturn3.default)(this, (OmnissaVDIStrategy.__proto__ || Object.getPrototypeOf(OmnissaVDIStrategy)).call(this));

        var self = _this;
        self.topWindowName = "UNKNOWN";
        self.hasRequestedTitle = false;

        // Initialize Omnissa SDK dependencies
        var HorizonWebRTCExtension = require('@euc-releases/horizon-webrtc-redir-sdk/HorizonWebRTCExtension');
        var HorizonWebRtcRedirectionAPI = require('@euc-releases/horizon-webrtc-redir-sdk/HorizonSDKforWebRTCRedir');

        // Attach SDK instances to window for global access
        window.HorizonWebRTCExtension = HorizonWebRTCExtension;
        window.HorizonWebRtcRedirectionAPI = HorizonWebRtcRedirectionAPI;

        _this.globalWindowReference = null;

        window.getHorizonClientID = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
            return _regenerator2.default.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            return _context.abrupt("return", new Promise(function (resolve, reject) {
                                window.HorizonWebRTCExtension.getHorizonClientID().then(function (clientID) {
                                    console.log("getHorizonClientID resolved with:", clientID);
                                    resolve(clientID);
                                }).catch(function (error) {
                                    console.error("Failed to get client ID: " + error);
                                    reject("Failed to get client ID: " + error);
                                });
                            }));

                        case 1:
                        case "end":
                            return _context.stop();
                    }
                }
            }, _callee, this);
        }));

        window.getHorizonWSSPort = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
            return _regenerator2.default.wrap(function _callee2$(_context2) {
                while (1) {
                    switch (_context2.prev = _context2.next) {
                        case 0:
                            return _context2.abrupt("return", new Promise(function (resolve, reject) {
                                window.HorizonWebRTCExtension.getHorizonWSSPort().then(function (wssPort) {
                                    console.log("getHorizonWSSPort resolved with:", wssPort);
                                    resolve(wssPort);
                                }).catch(function (error) {
                                    console.error("Failed to get WSS port: " + error);
                                    reject("Failed to get WSS port: " + error);
                                });
                            }));

                        case 1:
                        case "end":
                            return _context2.stop();
                    }
                }
            }, _callee2, this);
        }));

        window.getHorizonWindowTitle = function () {
            if (self.topWindowName.endsWith(_rtc_const.ACITVE_SOFTPHONE_TAB)) {
                return self.topWindowName;
            }

            var currentTime = self.getCurrentTimeString();
            try {
                return self.setTopWindowName(top.document.title + currentTime + _rtc_const.ACITVE_SOFTPHONE_TAB);
            } catch (error) {
                self.setupMessageListener();
                return self.topWindowName;
            }
        };

        // Initialize SDK with logging and event handling
        var prefix = "OmnissaVDI";
        var appLogger = {
            error: function error(msg) {
                return global.connect.getLog().error(prefix + ": " + msg);
            },
            info: function info(msg) {
                return global.connect.getLog().info(prefix + ": " + msg);
            },
            warn: function warn(msg) {
                return global.connect.getLog().warn(prefix + ": " + msg);
            }
        };
        var appName = "AmazonConnect";
        var initResult = window.HorizonWebRtcRedirectionAPI.initSDK(appLogger, appName, _this.vmEventHandler);
        if (!initResult) {
            throw new Error('Omnissa WebRTC Redirection API failed to initialize');
        }
        return _this;
    }

    (0, _createClass3.default)(OmnissaVDIStrategy, [{
        key: "vmEventHandler",
        value: function vmEventHandler(event) {
            var eventType = event.event;
            console.log("Horizon WebRTCRedirSDK Event:", JSON.stringify(event));
            switch (eventType) {
                case "vdiClientConnected":
                    console.log("Got event from WebRTCRedirSDK: vdiClientConnected");
                    break;
                case "vdiClientDisconnected":
                    console.log("Got event from WebRTCRedirSDK: vdiClientDisconnected");
                    break;
                default:
                    console.log("Got an unknown event from WebRTCRedirSDK: " + JSON.stringify(event));
            }
        }

        /**
         * Checks if early/standby media connection is supported
         * @returns {boolean} Always returns false as early media connection is not supported in Omnissa VDI
         *
         * Note: Set to false based on testing - when set to true, calls go to missed state.
         * This indicates Omnissa SDK does not support early media connections.
         * Any changes to this value should be coordinated with Omnissa team and thoroughly tested.
         */

    }, {
        key: "_isEarlyMediaConnectionSupported",
        value: function _isEarlyMediaConnectionSupported() {
            return false;
        }
    }, {
        key: "_createRtcPeerConnection",
        value: function _createRtcPeerConnection(rtcPeerConnectionConfig, rtcPeerConnectionOptionalConfig) {
            return window.HorizonWebRtcRedirectionAPI.newPeerConnection(rtcPeerConnectionConfig, rtcPeerConnectionOptionalConfig);
        }
    }, {
        key: "_gUM",
        value: function _gUM(constraints) {
            return window.HorizonWebRtcRedirectionAPI.getUserMedia(constraints);
        }
    }, {
        key: "_createMediaStream",
        value: function _createMediaStream(track) {
            return window.HorizonWebRtcRedirectionAPI.newMediaStream([track]);
        }
    }, {
        key: "_createPeerConnection",
        value: function _createPeerConnection(configuration, optionalConfiguration) {
            return window.HorizonWebRtcRedirectionAPI.newPeerConnection(configuration, optionalConfiguration);
        }
    }, {
        key: "onIceStateChange",
        value: function onIceStateChange(evt, _pc) {
            return _pc.iceConnectionState;
        }
    }, {
        key: "onPeerConnectionStateChange",
        value: function onPeerConnectionStateChange(_pc) {
            return _pc.connectionState;
        }
    }, {
        key: "_buildMediaConstraints",
        value: function _buildMediaConstraints(self, mediaConstraints) {
            if (self._enableAudio) {
                var audioConstraints = {};

                // Verified with Omnissa: Using WebRTC default echo cancellation settings
                // WebRTC echo cancellation is enabled by default

                if (window.audio_input) {
                    console.log('Setting deviceId to:', window.audio_input);
                    audioConstraints.deviceId = window.audio_input;
                } else {
                    console.log('No audio input device specified');
                }
                // If we have any audio constraints, use them; otherwise just set to true
                if (Object.keys(audioConstraints).length > 0) {
                    console.log('Using specific audio constraints:', audioConstraints);
                    mediaConstraints.audio = audioConstraints;
                } else {
                    console.log('No specific constraints, setting audio to true');
                    mediaConstraints.audio = true;
                }
            } else {
                console.log('Audio is disabled, setting audio to false');
                mediaConstraints.audio = false;
            }
        }
    }, {
        key: "addStream",
        value: function addStream(_pc, stream) {
            stream.getTracks().forEach(function (track) {
                _pc.addTrack(track, stream);
            });
        }
    }, {
        key: "setRemoteDescription",
        value: function setRemoteDescription(self, rtcSession) {
            var setRemoteDescriptionPromise = rtcSession._pc.setRemoteDescription(self._createSessionDescription({
                type: 'answer',
                sdp: self._sdp
            }));
            setRemoteDescriptionPromise.then(function () {
                var remoteCandidatePromises = Promise.all(self._candidates.map(function (candidate) {
                    var remoteCandidate = self._createRemoteCandidate(candidate);
                    self.logger.info('Adding remote candidate', remoteCandidate);
                    return rtcSession._pc.addIceCandidate(remoteCandidate);
                }));
                remoteCandidatePromises.catch(function (reason) {
                    self.logger.warn('Error adding remote candidate', reason);
                });
                return remoteCandidatePromises;
            }).then(function () {
                rtcSession._sessionReport.setRemoteDescriptionFailure = false;
                self._remoteDescriptionSet = true;
                self._checkAndTransit();
            }).catch(function () {
                self.logger.error('Stopping session due to setRemoteDescription failure');
                rtcSession._stopSession();
                rtcSession._sessionReport.setRemoteDescriptionFailure = true;
                self.transit(new _rtc_session.FailedState(rtcSession, _rtc_const.RTC_ERRORS.SET_REMOTE_DESCRIPTION_FAILURE));
            });
        }
    }, {
        key: "setRemoteDescriptionForIceRestart",
        value: function setRemoteDescriptionForIceRestart(self, rtcSession) {
            /**
             * Check for Horizon client version compatibility
             *
             * Background:
             * - Omnissa creates setConfiguration() method only in newer Horizon clients
             * - Older clients won't have this method on the peerConnection object
             *
             * Why this check:
             * 1. Different Horizon client versions have different capabilities
             * 2. ICE restart feature is only available in newer versions (2503 and above)
             * 3. Attempting ICE restart on older clients could cause errors
             *
             * Behavior:
             * - If setConfiguration exists: Client supports ICE restart (proceed)
             * - If not: Older client version (skip ICE restart)
             */
            if (rtcSession._pc.setConfiguration) {
                self.logger.info('Modern Horizon client detected, proceeding with ICE restart');

                var setRemoteDescriptionPromise = rtcSession._pc.setRemoteDescription(self._createSessionDescription({
                    type: 'answer',
                    sdp: self._sdp
                }));
                setRemoteDescriptionPromise.then(function () {
                    var remoteCandidatePromises = Promise.all(self._candidates.map(function (candidate) {
                        var remoteCandidate = self._createRemoteCandidate(candidate);
                        self.logger.info('Adding remote candidate', remoteCandidate);
                        return rtcSession._pc.addIceCandidate(remoteCandidate);
                    }));
                    remoteCandidatePromises.catch(function (reason) {
                        self.logger.warn('Error adding remote candidate', reason);
                    });
                    return remoteCandidatePromises;
                }).then(function () {
                    self._remoteDescriptionSetForIceRestart = true;
                    self._checkAndTransit();
                }).catch(function (error) {
                    self.logger.error('ICE restart failed', {
                        error: error,
                        peerConnectionState: rtcSession._pc.connectionState,
                        iceConnectionState: rtcSession._pc.iceConnectionState,
                        signalingState: rtcSession._pc.signalingState
                    });
                    self.onIceRestartFailure();
                });
            } else {
                self.logger.error('Legacy Horizon client detected, skipping ICE restart');
                self.onIceRestartFailure();
            }
        }
    }, {
        key: "_ontrack",
        value: function _ontrack(self, evt) {
            // Check for empty streams
            if (evt.streams.length === 0) {
                self._logger.warn('No streams found in the event');
                return;
            }
            // Check for multiple streams
            if (evt.streams.length > 1) {
                self._logger.warn('Found more than 1 streams for ' + evt.track.kind + ' track ' + evt.track.id + ' : ' + evt.streams.map(function (stream) {
                    return stream.id;
                }).join(','));
            }
            var stream = evt.streams[0];
            var audioTrack = stream.getAudioTracks()[0];

            console.log("Audio Track:", audioTrack);
            console.log("Checking value of stream: ", JSON.stringify(stream, null, 2));

            // Set up remote audio element
            if (stream.track[0].kind === 'audio' && self._remoteAudioElement) {
                try {
                    // TODO: Optimize audio element creation. Either use the same audio element or implement a cleanup mechanism
                    // Currently creating a new element for each call.

                    var remoteAudio = document.createElement('audio');
                    remoteAudio.id = "remoteAudioElement" + 0;
                    window.HorizonWebRtcRedirectionAPI.onAudioCreated(remoteAudio, this.globalWindowReference);
                    remoteAudio.srcObject = stream;
                    self._remoteAudioElement = remoteAudio;
                    self._remoteAudioStream = stream;
                } catch (e) {
                    console.error("Failed to set srcObject on _remoteAudioElement:", e);
                    return; // Return after error since we can't proceed
                }
            }

            self._remoteAudioElement.autoplay = true;
            self._remoteAudioElement.playsInline = true;
        }
    }, {
        key: "getStrategyName",
        value: function getStrategyName() {
            return 'OmnissaVDIStrategy';
        }
    }, {
        key: "getCurrentTimeString",
        value: function getCurrentTimeString() {
            var currentTime = new Date();
            return " " + currentTime.getHours() + currentTime.getMinutes() + currentTime.getSeconds() + " ";
        }
    }, {
        key: "setTopWindowName",
        value: function setTopWindowName(title) {
            var self = this;
            top.document.title = title;
            self.topWindowName = title;
            return self.topWindowName;
        }
    }, {
        key: "setupMessageListener",
        value: function setupMessageListener() {
            var self = this;
            window.addEventListener('message', this.handleMessage.bind(this));

            if (!self.hasRequestedTitle) {
                self.hasRequestedTitle = true;
                window.parent.postMessage({ type: 'get_horizon_window_title' }, '*');
            }
        }
    }, {
        key: "handleMessage",
        value: function handleMessage(event) {
            var self = this;
            if (event.data.type === 'horizon_window_title_response') {
                self.topWindowName = event.data.title;
            }
        }
    }]);
    return OmnissaVDIStrategy;
}(_CCPInitiationStrategyInterface2.default);

exports.default = OmnissaVDIStrategy;

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../rtc_const":153,"../rtc_session":156,"./CCPInitiationStrategyInterface":161,"@euc-releases/horizon-webrtc-redir-sdk/HorizonSDKforWebRTCRedir":3,"@euc-releases/horizon-webrtc-redir-sdk/HorizonWebRTCExtension":4,"babel-runtime/helpers/asyncToGenerator":16,"babel-runtime/helpers/classCallCheck":17,"babel-runtime/helpers/createClass":18,"babel-runtime/helpers/inherits":20,"babel-runtime/helpers/possibleConstructorReturn":21,"babel-runtime/regenerator":27}],165:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require("babel-runtime/helpers/inherits");

var _inherits3 = _interopRequireDefault(_inherits2);

var _CCPInitiationStrategyInterface = require("./CCPInitiationStrategyInterface");

var _CCPInitiationStrategyInterface2 = _interopRequireDefault(_CCPInitiationStrategyInterface);

var _rtc_const = require("../rtc_const");

var _utils = require("../utils");

var _rtc_session = require("../rtc_session");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var StandardStrategy = function (_CCPInitiationStrateg) {
    (0, _inherits3.default)(StandardStrategy, _CCPInitiationStrateg);

    function StandardStrategy() {
        (0, _classCallCheck3.default)(this, StandardStrategy);

        var _this = (0, _possibleConstructorReturn3.default)(this, (StandardStrategy.__proto__ || Object.getPrototypeOf(StandardStrategy)).call(this));

        console.log("StandardStrategy initialized");
        return _this;
    }

    // the following functions are rtc_peer_connection_factory related functions
    // check if the browser supports early media connection


    (0, _createClass3.default)(StandardStrategy, [{
        key: "_isEarlyMediaConnectionSupported",
        value: function _isEarlyMediaConnectionSupported() {
            return (0, _utils.isChromeBrowser)() && (0, _utils.getChromeBrowserVersion)() >= _rtc_const.CHROME_SUPPORTED_VERSION;
        }
    }, {
        key: "_createRtcPeerConnection",
        value: function _createRtcPeerConnection(rtcPeerConnectionConfig, rtcPeerConnectionOptionalConfig) {
            return new RTCPeerConnection(rtcPeerConnectionConfig, rtcPeerConnectionOptionalConfig);
        }

        // the following functions are rtc_session related functions

    }, {
        key: "_gUM",
        value: function _gUM(constraints) {
            return navigator.mediaDevices.getUserMedia(constraints);
        }
    }, {
        key: "_createMediaStream",
        value: function _createMediaStream(track) {
            return new MediaStream([track]);
        }
    }, {
        key: "addStream",
        value: function addStream(_pc, stream) {
            _pc.addStream(stream);
        }
    }, {
        key: "setRemoteDescription",
        value: function setRemoteDescription(self, rtcSession) {
            var setRemoteDescriptionPromise = rtcSession._pc.setRemoteDescription(self._createSessionDescription({
                type: 'answer',
                sdp: self._sdp
            }));
            setRemoteDescriptionPromise.catch(function (e) {
                self.logger.error('SetRemoteDescription failed', e);
            });
            setRemoteDescriptionPromise.then(function () {
                var remoteCandidatePromises = Promise.all(self._candidates.map(function (candidate) {
                    var remoteCandidate = self._createRemoteCandidate(candidate);
                    self.logger.info('Adding remote candidate', remoteCandidate);
                    return rtcSession._pc.addIceCandidate(remoteCandidate);
                }));
                remoteCandidatePromises.catch(function (reason) {
                    self.logger.warn('Error adding remote candidate', reason);
                });
                return remoteCandidatePromises;
            }).then(function () {
                rtcSession._sessionReport.setRemoteDescriptionFailure = false;
                self._remoteDescriptionSet = true;
                self._checkAndTransit();
            }).catch(function () {
                rtcSession._stopSession();
                rtcSession._sessionReport.setRemoteDescriptionFailure = true;
                self.transit(new _rtc_session.FailedState(rtcSession, _rtc_const.RTC_ERRORS.SET_REMOTE_DESCRIPTION_FAILURE));
            });
        }
    }, {
        key: "setRemoteDescriptionForIceRestart",
        value: function setRemoteDescriptionForIceRestart(self, rtcSession) {
            var setRemoteDescriptionPromise = rtcSession._pc.setRemoteDescription(self._createSessionDescription({
                type: 'answer',
                sdp: self._sdp
            }));
            setRemoteDescriptionPromise.catch(function (e) {
                self.logger.error('SetRemoteDescription failed', e);
            });
            setRemoteDescriptionPromise.then(function () {
                var remoteCandidatePromises = Promise.all(self._candidates.map(function (candidate) {
                    var remoteCandidate = self._createRemoteCandidate(candidate);
                    self.logger.info('Adding remote candidate', remoteCandidate);
                    return rtcSession._pc.addIceCandidate(remoteCandidate);
                }));
                remoteCandidatePromises.catch(function (reason) {
                    self.logger.warn('Error adding remote candidate', reason);
                });
                return remoteCandidatePromises;
            }).then(function () {
                self._remoteDescriptionSetForIceRestart = true;
                self._checkAndTransit();
            }).catch(function () {
                self.onIceRestartFailure();
            });
        }
    }, {
        key: "onIceStateChange",
        value: function onIceStateChange(evt, _pc) {
            // eslint-disable-line no-unused-vars
            return evt.currentTarget.iceConnectionState;
        }
    }, {
        key: "onPeerConnectionStateChange",
        value: function onPeerConnectionStateChange(_pc) {
            return _pc.connectionState;
        }
    }, {
        key: "_createPeerConnection",
        value: function _createPeerConnection(configuration, optionalConfiguration) {
            return new RTCPeerConnection(configuration, optionalConfiguration);
        }
    }, {
        key: "_ontrack",
        value: function _ontrack(self, evt) {
            if (evt.streams.length > 1) {
                self._logger.warn('Found more than 1 streams for ' + evt.track.kind + ' track ' + evt.track.id + ' : ' + evt.streams.map(function (stream) {
                    return stream.id;
                }).join(','));
            }
            if (evt.track.kind === 'video' && self._remoteVideoElement) {
                self._remoteVideoElement.srcObject = evt.streams[0];
                self._remoteVideoStream = evt.streams[0];
            } else if (evt.track.kind === 'audio' && self._remoteAudioElement) {
                self._remoteAudioElement.srcObject = evt.streams[0];
                self._remoteAudioStream = evt.streams[0];
                if (self._pcm) {
                    self._pcm._remoteAudioStream = self._remoteAudioStream;
                }
            }
        }
    }, {
        key: "_buildMediaConstraints",
        value: function _buildMediaConstraints(self, mediaConstraints) {
            if (self._enableAudio) {
                var audioConstraints = {};
                if (typeof self._echoCancellation !== 'undefined') {
                    audioConstraints.echoCancellation = !!self._echoCancellation;
                }
                if (Object.keys(audioConstraints).length > 0) {
                    mediaConstraints.audio = audioConstraints;
                } else {
                    mediaConstraints.audio = true;
                }
            } else {
                mediaConstraints.audio = false;
            }
        }
    }, {
        key: "getStrategyName",
        value: function getStrategyName() {
            return 'StandardStrategy';
        }
    }]);
    return StandardStrategy;
}(_CCPInitiationStrategyInterface2.default);

exports.default = StandardStrategy;

},{"../rtc_const":153,"../rtc_session":156,"../utils":167,"./CCPInitiationStrategyInterface":161,"babel-runtime/helpers/classCallCheck":17,"babel-runtime/helpers/createClass":18,"babel-runtime/helpers/inherits":20,"babel-runtime/helpers/possibleConstructorReturn":21}],166:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.UserAgentData = undefined;

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var UserAgentData = exports.UserAgentData = function () {
    function UserAgentData() {
        (0, _classCallCheck3.default)(this, UserAgentData);

        this._platform = null;
        this._platformVersion = null;
        this._architecture = null;
        this._bitness = null;
        this._browserBrand = null;
        this._browserVersion = null;
        this._mobile = false;
        this._model = null;
    }

    /**
     * Returns a string describing the platform the user agent is running on, like "Windows"
     * @returns {string}
     */


    (0, _createClass3.default)(UserAgentData, [{
        key: "platform",
        get: function get() {
            return this._platform;
        }

        /**
         * A string containing the platform version. For example, "10.0".
         * @returns {string}
         */
        ,
        set: function set(value) {
            this._platform = value;
        }
    }, {
        key: "platformVersion",
        get: function get() {
            return this._platformVersion;
        }

        /**
         * A string containing the platform architecture. For example, "x86"
         * @returns {string}
         */
        ,
        set: function set(value) {
            this._platformVersion = value;
        }
    }, {
        key: "architecture",
        get: function get() {
            return this._architecture;
        }

        /**
         * A string containing the architecture bitness. For example, "32" or "64".
         * @returns {string}
         */
        ,
        set: function set(value) {
            this._architecture = value;
        }
    }, {
        key: "bitness",
        get: function get() {
            return this._bitness;
        }

        /**
         * Returns browser brand
         * @returns {string}
         */
        ,
        set: function set(value) {
            this._bitness = value;
        }
    }, {
        key: "browserBrand",
        get: function get() {
            return this._browserBrand;
        }

        /**
         * Returns browser version
         * @returns {string}
         */
        ,
        set: function set(value) {
            this._browserBrand = value;
        }
    }, {
        key: "browserVersion",
        get: function get() {
            return this._browserVersion;
        }

        /**
         * Returns true if the user agent is running on a mobile device
         * @returns {string}
         */
        ,
        set: function set(value) {
            this._browserVersion = value;
        }
    }, {
        key: "mobile",
        get: function get() {
            return this._mobile;
        }

        /**
         * A string containing the model of mobile device.
         * @returns {string}
         */
        ,
        set: function set(value) {
            this._mobile = value;
        }
    }, {
        key: "model",
        get: function get() {
            return this._model;
        },
        set: function set(value) {
            this._model = value;
        }
    }]);
    return UserAgentData;
}();

},{"babel-runtime/helpers/classCallCheck":17,"babel-runtime/helpers/createClass":18}],167:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getUserAgentData = exports.SdpOptions = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

/**
 * Method to get userAgent data
 */

var getUserAgentData = exports.getUserAgentData = function () {
    var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
        var userAgentData, result, browser, fallbackBrowser, userAgent, parser, parserResult;
        return _regenerator2.default.wrap(function _callee$(_context) {
            while (1) {
                switch (_context.prev = _context.next) {
                    case 0:
                        userAgentData = new _user_agent_data.UserAgentData();

                        if (!navigator.userAgentData) {
                            _context.next = 15;
                            break;
                        }

                        _context.next = 4;
                        return navigator.userAgentData.getHighEntropyValues(['platform', 'platformVersion', 'architecture', 'bitness', 'mobile', 'model', 'fullVersionList']);

                    case 4:
                        result = _context.sent;


                        userAgentData.platform = result.platform;
                        userAgentData.platformVersion = result.platformVersion;
                        userAgentData.architecture = result.architecture;
                        userAgentData.bitness = result.bitness;
                        userAgentData.mobile = result.mobile;
                        userAgentData.model = result.model;

                        browser = result.fullVersionList.find(function (entry) {
                            return _rtc_const.BROWSER_LIST.includes(entry.brand);
                        });


                        if (browser) {
                            userAgentData.browserBrand = browser.brand;
                            userAgentData.browserVersion = browser.version;
                        } else {
                            // Fallback to the first available browser brand
                            fallbackBrowser = result.fullVersionList.find(function (entry) {
                                return entry.brand !== 'Not A Brand';
                            });

                            userAgentData.browserBrand = fallbackBrowser ? fallbackBrowser.brand : 'Unknown';
                            userAgentData.browserVersion = fallbackBrowser ? fallbackBrowser.version : 'Unknown';
                        }
                        _context.next = 23;
                        break;

                    case 15:
                        // Fallback to user-agent string parsing
                        userAgent = navigator.userAgent;
                        parser = new _uaParserJs2.default(userAgent);
                        parserResult = parser.getResult();


                        userAgentData.browserBrand = parserResult.browser.name || 'Unknown';
                        userAgentData.browserVersion = parserResult.browser.version || 'Unknown';
                        userAgentData.platform = parserResult.os.name || 'Unknown';
                        userAgentData.platformVersion = parserResult.os.version || 'Unknown';
                        userAgentData.architecture = parserResult.cpu.architecture || 'Unknown';

                    case 23:
                        return _context.abrupt('return', userAgentData);

                    case 24:
                    case 'end':
                        return _context.stop();
                }
            }
        }, _callee, this);
    }));

    return function getUserAgentData() {
        return _ref.apply(this, arguments);
    };
}();

exports.hitch = hitch;
exports.wrapLogger = wrapLogger;
exports.closeStream = closeStream;
exports.transformSdp = transformSdp;
exports.is_defined = is_defined;
exports.when_defined = when_defined;
exports.isFunction = isFunction;
exports.assertTrue = assertTrue;
exports.isChromeBrowser = isChromeBrowser;
exports.getChromeBrowserVersion = getChromeBrowserVersion;
exports.getRedactedSdp = getRedactedSdp;
exports.isFirefoxBrowser = isFirefoxBrowser;

var _exceptions = require('./exceptions');

var _sdp = require('sdp');

var _user_agent_data = require('./user_agent_data');

var _rtc_const = require('./rtc_const');

var _uaParserJs = require('ua-parser-js');

var _uaParserJs2 = _interopRequireDefault(_uaParserJs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * All logging methods used by connect-rtc.
 */
var logMethods = ['log', 'info', 'warn', 'error'];

/**
 * Binds the given instance object as the context for
 * the method provided.
 *
 * @param scope The instance object to be set as the scope
 *    of the function.
 * @param method The method to be encapsulated.
 *
 * All other arguments, if any, are bound to the method
 * invocation inside the closure.
 *
 * @return A closure encapsulating the invocation of the
 *    method provided in context of the given instance.
 */
/**
 * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

function hitch() {
    var args = Array.prototype.slice.call(arguments);
    var scope = args.shift();
    var method = args.shift();

    if (!scope) {
        throw new _exceptions.IllegalParameters('utils.hitch(): scope is required!');
    }

    if (!method) {
        throw new _exceptions.IllegalParameters('utils.hitch(): method is required!');
    }

    if (typeof method !== 'function') {
        throw new _exceptions.IllegalParameters('utils.hitch(): method is not a function!');
    }

    return function _hitchedFunction() {
        var closureArgs = Array.prototype.slice.call(arguments);
        return method.apply(scope, args.concat(closureArgs));
    };
}

function wrapLogger(logger, callId, logCategory) {
    var _logger = {};
    logMethods.forEach(function (logMethod) {
        if (!logger[logMethod]) {
            throw new Error('Logging method ' + logMethod + ' required');
        }
        _logger[logMethod] = hitch(logger, logger[logMethod], callId, logCategory);
    });
    return _logger;
}

function closeStream(stream) {
    if (stream) {
        var tracks = stream.getTracks();
        for (var i = 0; i < tracks.length; i++) {
            var track = tracks[i];
            try {
                track.stop();
            } catch (e) {
                // eat exception
            }
        }
    }
}

/**
 * A parameter of transformSdp.
 * This defines all the SDP options connect-rtc-js supports.
 */

var SdpOptions = exports.SdpOptions = function () {
    function SdpOptions() {
        (0, _classCallCheck3.default)(this, SdpOptions);

        this._forceCodec = {};
    }

    (0, _createClass3.default)(SdpOptions, [{
        key: '_shouldDeleteCodec',


        /**
         * Test if given codec should be removed from SDP.
         * @param mediaType audio|video
         * @param codecName case insensitive
         * @return TRUE - should remove
         */
        value: function _shouldDeleteCodec(mediaType, codecName) {
            var upperCaseCodecName = codecName.toUpperCase();
            return this._forceCodec[mediaType] && upperCaseCodecName !== this._forceCodec[mediaType].toUpperCase() && upperCaseCodecName !== 'TELEPHONE-EVENT';
        }
    }, {
        key: 'enableOpusDtx',
        get: function get() {
            return this._enableOpusDtx;
        }

        /**
         * By default transformSdp disables dtx for OPUS codec.
         * Setting this to true would force it to turn on DTX.
         */
        ,
        set: function set(flag) {
            this._enableOpusDtx = flag;
        }

        /**
         * A map from media type (audio/video) to codec (case insensitive).
         * Add entry for force connect-rtc-js to use specified codec for certain media type.
         * For example: sdpOptions.forceCodec['audio'] = 'opus';
         */

    }, {
        key: 'forceCodec',
        get: function get() {
            return this._forceCodec;
        }
    }]);
    return SdpOptions;
}();

/**
 * Modifies input SDP according to sdpOptions.
 * See SdpOptions for available options.
 * @param sdp original SDP
 * @param sdpOptions defines changes to be applied to SDP
 * @returns a map with 'sdp' containing the transformed SDP and 'mLines' containing the number of m lines in SDP
 */


function transformSdp(sdp, sdpOptions) {
    var sections = (0, _sdp.splitSections)(sdp);
    for (var i = 1; i < sections.length; i++) {
        var mediaType = (0, _sdp.getKind)(sections[i]);
        var rtpParams = (0, _sdp.parseRtpParameters)(sections[i]);
        // a map from payload type (string) to codec object
        var codecMap = rtpParams.codecs.reduce(function (map, codec) {
            map['' + codec.payloadType] = codec;
            return map;
        }, {});
        sections[i] = (0, _sdp.splitLines)(sections[i]).map(function (line) {
            if (line.startsWith('m=')) {
                // modify m= line if SdpOptions#forceCodec specifies codec for current media type
                if (sdpOptions.forceCodec[mediaType]) {
                    var targetCodecPts = Object.keys(codecMap).filter(function (pt) {
                        return !sdpOptions._shouldDeleteCodec(mediaType, codecMap[pt].name);
                    });
                    return (/.*RTP\/S?AVPF? /.exec(line) + targetCodecPts.join(' ')
                    );
                } else {
                    return line;
                }
            } else if (line.startsWith('a=rtpmap:')) {
                var rtpMap = (0, _sdp.parseRtpMap)(line);
                var currentCodec = codecMap[rtpMap.payloadType];

                // remove this codec if SdpOptions#forceCodec specifies a different codec for current media type
                if (is_defined(currentCodec) && sdpOptions._shouldDeleteCodec(mediaType, currentCodec.name)) {
                    return null;
                }

                // append a=fmtp line immediately if current codec is OPUS (to explicitly specify OPUS parameters)
                if (is_defined(currentCodec) && currentCodec.name.toUpperCase() === 'OPUS') {
                    currentCodec.parameters.usedtx = sdpOptions.enableOpusDtx ? "1" : "0";
                    // generate fmtp line immediately after rtpmap line, and remove original fmtp line once we see it
                    return (line + "\r\n" + (0, _sdp.writeFmtp)(currentCodec)).trim();
                } else {
                    return line;
                }
            } else if (line.startsWith('a=fmtp:')) {
                var pt = line.substring('a=fmtp:'.length, line.indexOf(' '));
                var currentCodec = codecMap[pt]; // eslint-disable-line no-redeclare

                // remove this codec if SdpOptions#forceCodec specifies a different codec for current media type
                if (is_defined(currentCodec) && sdpOptions._shouldDeleteCodec(mediaType, currentCodec.name)) {
                    return null;
                }

                if (is_defined(currentCodec) && currentCodec.name.toUpperCase() === 'OPUS') {
                    // this is a line for OPUS, remove it because FMTP line is already generated when rtpmap line is processed
                    return null;
                } else {
                    return line;
                }
            } else if (line.startsWith('a=rtcp-fb:')) {
                var pt = line.substring(line.indexOf(':') + 1, line.indexOf(' ')); // eslint-disable-line no-redeclare
                if (pt === '*') {
                    //always allow wildcard in rtc-fb
                    return line;
                } else {
                    var currentCodec = codecMap[pt]; // eslint-disable-line no-redeclare

                    // remove this codec if SdpOptions#forceCodec specifies a different codec for current media type
                    if (is_defined(currentCodec) && sdpOptions._shouldDeleteCodec(mediaType, currentCodec.name)) {
                        return null;
                    } else {
                        return line;
                    }
                }
            } else {
                return line;
            }
        }).filter(function (line) {
            return line !== null;
        }).join('\r\n');
    }
    return {
        sdp: sections.map(function (section) {
            return section.trim();
        }).join('\r\n') + '\r\n',
        mLines: sections.length - 1 // first section is session description, the rest are media descriptions
    };
}

function is_defined(v) {
    return typeof v !== 'undefined';
}

function when_defined(v, alternativeIn) {
    var alternative = is_defined(alternativeIn) ? alternativeIn : null;
    return is_defined(v) ? v : alternative;
}

/**
 * Determine if the given value is a callable function type.
 * Borrowed from Underscore.js.
 */
function isFunction(obj) {
    return !!(obj && obj.constructor && obj.call && obj.apply);
}

/**
 * Asserts that a premise is true.
 */
function assertTrue(premise, message) {
    if (!premise) {
        throw new Error(message);
    }
}

function isChromeBrowser() {
    return navigator.userAgent.indexOf("Chrome") !== -1;
}

function getChromeBrowserVersion() {
    var userAgent = navigator.userAgent;
    var chromeVersion = userAgent.substring(userAgent.indexOf("Chrome") + 7);
    if (chromeVersion) {
        return parseFloat(chromeVersion);
    } else {
        return -1;
    }
}

function getRedactedSdp(sdp) {
    // pattern to find and redact the value after 'a=ice-pwd:'
    var pattern = /a=ice-pwd:[^\r\n]*/;

    // Use the replace method to redact the value with '[redacted]'
    return sdp.replace(pattern, 'a=ice-pwd:[redacted]');
}function isFirefoxBrowser(userAgentData) {
    if (userAgentData) {
        return userAgentData.browserBrand.toUpperCase() === _rtc_const.FIREFOX.toUpperCase();
    } else {
        return navigator.userAgent.indexOf(_rtc_const.FIREFOX) !== -1;
    }
}

},{"./exceptions":152,"./rtc_const":153,"./user_agent_data":166,"babel-runtime/helpers/asyncToGenerator":16,"babel-runtime/helpers/classCallCheck":17,"babel-runtime/helpers/createClass":18,"babel-runtime/regenerator":27,"sdp":133,"ua-parser-js":134}],168:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _utils = require('./utils');

var _rtc_const = require('./rtc_const');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var VirtualWssConnectionManager = function () {
    function VirtualWssConnectionManager(logger, connectionId, wssManager) {
        (0, _classCallCheck3.default)(this, VirtualWssConnectionManager);

        this._logger = logger;
        this._connectionId = connectionId;
        this._wssManager = wssManager;
        this._initializeWebSocketEventListeners();
    }

    (0, _createClass3.default)(VirtualWssConnectionManager, [{
        key: '_initializeWebSocketEventListeners',
        value: function _initializeWebSocketEventListeners() {
            var _this = this;

            this._wssManager.subscribeTopics([_rtc_const.SOFTPHONE_ROUTE_KEY]);
            this._unSubscribe = this._wssManager.onMessage(_rtc_const.SOFTPHONE_ROUTE_KEY, (0, _utils.hitch)(this, this._webSocketManagerOnMessage));
            setTimeout(function () {
                _this._onOpen();
            }, 0);
        }
    }, {
        key: '_webSocketManagerOnMessage',
        value: function _webSocketManagerOnMessage(event) {
            var content = void 0;
            if (event.content) {
                content = JSON.parse(event.content);
            }
            if (this._onMessage && content && this._connectionId === content.connectionId) {
                this._onMessage({ data: JSON.stringify(content.jsonRpcMsg) });
            }
        }
    }, {
        key: 'send',
        value: function send(webSocketPayload) {
            var payload = {};
            try {
                payload.topic = _rtc_const.SOFTPHONE_ROUTE_KEY;
                payload.connectionId = this._connectionId;
                payload.jsonRpcMsg = JSON.parse(webSocketPayload);
                this._wssManager.sendMessage(payload);
            } catch (error) {
                this._logger.error("Error in sendMessage ", error);
            }
        }
    }, {
        key: 'close',
        value: function close() {
            this._logger.info("closing virtual connection");
            this._unSubscribe();
        }
    }, {
        key: 'onmessage',
        set: function set(callBack) {
            this._onMessage = callBack;
        }
    }, {
        key: 'onopen',
        set: function set(callBack) {
            this._onOpen = callBack;
        }
    }]);
    return VirtualWssConnectionManager;
}();

exports.default = VirtualWssConnectionManager;

},{"./rtc_const":153,"./utils":167,"babel-runtime/helpers/classCallCheck":17,"babel-runtime/helpers/createClass":18}]},{},[1,151])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
