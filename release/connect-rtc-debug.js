(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

var _toArray2 = require("babel-runtime/helpers/toArray");

var _toArray3 = _interopRequireDefault(_toArray2);

var _slicedToArray2 = require("babel-runtime/helpers/slicedToArray");

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _typeof2 = require("babel-runtime/helpers/typeof");

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

!function (e, t) {
  "object" == (typeof exports === "undefined" ? "undefined" : (0, _typeof3.default)(exports)) && "object" == (typeof module === "undefined" ? "undefined" : (0, _typeof3.default)(module)) ? module.exports = t() : "function" == typeof define && define.amd ? define([], t) : "object" == (typeof exports === "undefined" ? "undefined" : (0, _typeof3.default)(exports)) ? exports.dcvwebrtcredir = t() : e.dcvwebrtcredir = t();
}(self, function () {
  return function () {
    var e = { 114: function _(e, t) {
        !function (e) {
          "use strict";
          for (var t = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", r = "undefined" == typeof Uint8Array ? [] : new Uint8Array(256), n = 0; n < t.length; n++) {
            r[t.charCodeAt(n)] = n;
          }var i = function i(e) {
            var r,
                n = new Uint8Array(e),
                i = n.length,
                s = "";for (r = 0; r < i; r += 3) {
              s += t[n[r] >> 2], s += t[(3 & n[r]) << 4 | n[r + 1] >> 4], s += t[(15 & n[r + 1]) << 2 | n[r + 2] >> 6], s += t[63 & n[r + 2]];
            }return i % 3 == 2 ? s = s.substring(0, s.length - 1) + "=" : i % 3 == 1 && (s = s.substring(0, s.length - 2) + "=="), s;
          },
              s = function s(e) {
            var t,
                n,
                i,
                s,
                a,
                o = .75 * e.length,
                c = e.length,
                d = 0;"=" === e[e.length - 1] && (o--, "=" === e[e.length - 2] && o--);var l = new ArrayBuffer(o),
                p = new Uint8Array(l);for (t = 0; t < c; t += 4) {
              n = r[e.charCodeAt(t)], i = r[e.charCodeAt(t + 1)], s = r[e.charCodeAt(t + 2)], a = r[e.charCodeAt(t + 3)], p[d++] = n << 2 | i >> 4, p[d++] = (15 & i) << 4 | s >> 2, p[d++] = (3 & s) << 6 | 63 & a;
            }return l;
          };e.decode = s, e.encode = i, Object.defineProperty(e, "__esModule", { value: !0 });
        }(t);
      }, 43: function _(e, t, r) {
        var n, i;!function (s, a) {
          "use strict";
          n = function n() {
            var e = function e() {},
                t = "undefined",
                r = (typeof window === "undefined" ? "undefined" : (0, _typeof3.default)(window)) !== t && (0, _typeof3.default)(window.navigator) !== t && /Trident\/|MSIE /.test(window.navigator.userAgent),
                n = ["trace", "debug", "info", "warn", "error"];function i(e, t) {
              var r = e[t];if ("function" == typeof r.bind) return r.bind(e);try {
                return Function.prototype.bind.call(r, e);
              } catch (t) {
                return function () {
                  return Function.prototype.apply.apply(r, [e, arguments]);
                };
              }
            }function s() {
              console.log && (console.log.apply ? console.log.apply(console, arguments) : Function.prototype.apply.apply(console.log, [console, arguments])), console.trace && console.trace();
            }function a(n) {
              return "debug" === n && (n = "log"), (typeof console === "undefined" ? "undefined" : (0, _typeof3.default)(console)) !== t && ("trace" === n && r ? s : void 0 !== console[n] ? i(console, n) : void 0 !== console.log ? i(console, "log") : e);
            }function o(t, r) {
              for (var i = 0; i < n.length; i++) {
                var s = n[i];this[s] = i < t ? e : this.methodFactory(s, t, r);
              }this.log = this.debug;
            }function c(e, r, n) {
              return function () {
                (typeof console === "undefined" ? "undefined" : (0, _typeof3.default)(console)) !== t && (o.call(this, r, n), this[e].apply(this, arguments));
              };
            }function d(e, t, r) {
              return a(e) || c.apply(this, arguments);
            }function l(e, r, i) {
              var s,
                  a = this;r = null == r ? "WARN" : r;var c = "loglevel";function l(e) {
                var r = (n[e] || "silent").toUpperCase();if ((typeof window === "undefined" ? "undefined" : (0, _typeof3.default)(window)) !== t && c) {
                  try {
                    return void (window.localStorage[c] = r);
                  } catch (e) {}try {
                    window.document.cookie = encodeURIComponent(c) + "=" + r + ";";
                  } catch (e) {}
                }
              }function p() {
                var e;if ((typeof window === "undefined" ? "undefined" : (0, _typeof3.default)(window)) !== t && c) {
                  try {
                    e = window.localStorage[c];
                  } catch (e) {}if ((typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e)) === t) try {
                    var r = window.document.cookie,
                        n = r.indexOf(encodeURIComponent(c) + "=");-1 !== n && (e = /^([^;]+)/.exec(r.slice(n))[1]);
                  } catch (e) {}return void 0 === a.levels[e] && (e = void 0), e;
                }
              }function h() {
                if ((typeof window === "undefined" ? "undefined" : (0, _typeof3.default)(window)) !== t && c) {
                  try {
                    return void window.localStorage.removeItem(c);
                  } catch (e) {}try {
                    window.document.cookie = encodeURIComponent(c) + "=; expires=Thu, 01 Jan 1970 00:00:00 UTC";
                  } catch (e) {}
                }
              }"string" == typeof e ? c += ":" + e : "symbol" == (typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e)) && (c = void 0), a.name = e, a.levels = { TRACE: 0, DEBUG: 1, INFO: 2, WARN: 3, ERROR: 4, SILENT: 5 }, a.methodFactory = i || d, a.getLevel = function () {
                return s;
              }, a.setLevel = function (r, n) {
                if ("string" == typeof r && void 0 !== a.levels[r.toUpperCase()] && (r = a.levels[r.toUpperCase()]), !("number" == typeof r && r >= 0 && r <= a.levels.SILENT)) throw "log.setLevel() called with invalid level: " + r;if (s = r, !1 !== n && l(r), o.call(a, r, e), (typeof console === "undefined" ? "undefined" : (0, _typeof3.default)(console)) === t && r < a.levels.SILENT) return "No console available for logging";
              }, a.setDefaultLevel = function (e) {
                r = e, p() || a.setLevel(e, !1);
              }, a.resetLevel = function () {
                a.setLevel(r, !1), h();
              }, a.enableAll = function (e) {
                a.setLevel(a.levels.TRACE, e);
              }, a.disableAll = function (e) {
                a.setLevel(a.levels.SILENT, e);
              };var u = p();null == u && (u = r), a.setLevel(u, !1);
            }var p = new l(),
                h = {};p.getLogger = function (e) {
              if ("symbol" != (typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e)) && "string" != typeof e || "" === e) throw new TypeError("You must supply a name when creating a logger.");var t = h[e];return t || (t = h[e] = new l(e, p.getLevel(), p.methodFactory)), t;
            };var u = (typeof window === "undefined" ? "undefined" : (0, _typeof3.default)(window)) !== t ? window.log : void 0;return p.noConflict = function () {
              return (typeof window === "undefined" ? "undefined" : (0, _typeof3.default)(window)) !== t && window.log === p && (window.log = u), p;
            }, p.getLoggers = function () {
              return h;
            }, p.default = p, p;
          }, void 0 === (i = "function" == typeof n ? n.call(t, r, t, e) : n) || (e.exports = i);
        }();
      }, 591: function _(e, t, r) {
        "use strict";

        var _r = r(555),
            n = _r.Deflate,
            i = _r.deflate,
            s = _r.deflateRaw,
            a = _r.gzip,
            _r2 = r(843),
            o = _r2.Inflate,
            c = _r2.inflate,
            d = _r2.inflateRaw,
            l = _r2.ungzip,
            p = r(619);

        e.exports.Deflate = n, e.exports.deflate = i, e.exports.deflateRaw = s, e.exports.gzip = a, e.exports.Inflate = o, e.exports.inflate = c, e.exports.inflateRaw = d, e.exports.ungzip = l, e.exports.constants = p;
      }, 555: function _(e, t, r) {
        "use strict";
        var n = r(405),
            i = r(236),
            s = r(373),
            a = r(898),
            o = r(292),
            c = Object.prototype.toString,
            _r3 = r(619),
            d = _r3.Z_NO_FLUSH,
            l = _r3.Z_SYNC_FLUSH,
            p = _r3.Z_FULL_FLUSH,
            h = _r3.Z_FINISH,
            u = _r3.Z_OK,
            f = _r3.Z_STREAM_END,
            m = _r3.Z_DEFAULT_COMPRESSION,
            _ = _r3.Z_DEFAULT_STRATEGY,
            g = _r3.Z_DEFLATED;function v(e) {
          this.options = i.assign({ level: m, method: g, chunkSize: 16384, windowBits: 15, memLevel: 8, strategy: _ }, e || {});var t = this.options;t.raw && t.windowBits > 0 ? t.windowBits = -t.windowBits : t.gzip && t.windowBits > 0 && t.windowBits < 16 && (t.windowBits += 16), this.err = 0, this.msg = "", this.ended = !1, this.chunks = [], this.strm = new o(), this.strm.avail_out = 0;var r = n.deflateInit2(this.strm, t.level, t.method, t.windowBits, t.memLevel, t.strategy);if (r !== u) throw new Error(a[r]);if (t.header && n.deflateSetHeader(this.strm, t.header), t.dictionary) {
            var _e = void 0;if (_e = "string" == typeof t.dictionary ? s.string2buf(t.dictionary) : "[object ArrayBuffer]" === c.call(t.dictionary) ? new Uint8Array(t.dictionary) : t.dictionary, r = n.deflateSetDictionary(this.strm, _e), r !== u) throw new Error(a[r]);this._dict_set = !0;
          }
        }function E(e, t) {
          var r = new v(t);if (r.push(e, !0), r.err) throw r.msg || a[r.err];return r.result;
        }v.prototype.push = function (e, t) {
          var r = this.strm,
              i = this.options.chunkSize;var a = void 0,
              o = void 0;if (this.ended) return !1;for (o = t === ~~t ? t : !0 === t ? h : d, "string" == typeof e ? r.input = s.string2buf(e) : "[object ArrayBuffer]" === c.call(e) ? r.input = new Uint8Array(e) : r.input = e, r.next_in = 0, r.avail_in = r.input.length;;) {
            if (0 === r.avail_out && (r.output = new Uint8Array(i), r.next_out = 0, r.avail_out = i), (o === l || o === p) && r.avail_out <= 6) this.onData(r.output.subarray(0, r.next_out)), r.avail_out = 0;else {
              if (a = n.deflate(r, o), a === f) return r.next_out > 0 && this.onData(r.output.subarray(0, r.next_out)), a = n.deflateEnd(this.strm), this.onEnd(a), this.ended = !0, a === u;if (0 !== r.avail_out) {
                if (o > 0 && r.next_out > 0) this.onData(r.output.subarray(0, r.next_out)), r.avail_out = 0;else if (0 === r.avail_in) break;
              } else this.onData(r.output);
            }
          }return !0;
        }, v.prototype.onData = function (e) {
          this.chunks.push(e);
        }, v.prototype.onEnd = function (e) {
          e === u && (this.result = i.flattenChunks(this.chunks)), this.chunks = [], this.err = e, this.msg = this.strm.msg;
        }, e.exports.Deflate = v, e.exports.deflate = E, e.exports.deflateRaw = function (e, t) {
          return (t = t || {}).raw = !0, E(e, t);
        }, e.exports.gzip = function (e, t) {
          return (t = t || {}).gzip = !0, E(e, t);
        }, e.exports.constants = r(619);
      }, 843: function _(e, t, r) {
        "use strict";
        var n = r(948),
            i = r(236),
            s = r(373),
            a = r(898),
            o = r(292),
            c = r(188),
            d = Object.prototype.toString,
            _r4 = r(619),
            l = _r4.Z_NO_FLUSH,
            p = _r4.Z_FINISH,
            h = _r4.Z_OK,
            u = _r4.Z_STREAM_END,
            f = _r4.Z_NEED_DICT,
            m = _r4.Z_STREAM_ERROR,
            _ = _r4.Z_DATA_ERROR,
            g = _r4.Z_MEM_ERROR;function v(e) {
          this.options = i.assign({ chunkSize: 65536, windowBits: 15, to: "" }, e || {});var t = this.options;t.raw && t.windowBits >= 0 && t.windowBits < 16 && (t.windowBits = -t.windowBits, 0 === t.windowBits && (t.windowBits = -15)), !(t.windowBits >= 0 && t.windowBits < 16) || e && e.windowBits || (t.windowBits += 32), t.windowBits > 15 && t.windowBits < 48 && 0 == (15 & t.windowBits) && (t.windowBits |= 15), this.err = 0, this.msg = "", this.ended = !1, this.chunks = [], this.strm = new o(), this.strm.avail_out = 0;var r = n.inflateInit2(this.strm, t.windowBits);if (r !== h) throw new Error(a[r]);if (this.header = new c(), n.inflateGetHeader(this.strm, this.header), t.dictionary && ("string" == typeof t.dictionary ? t.dictionary = s.string2buf(t.dictionary) : "[object ArrayBuffer]" === d.call(t.dictionary) && (t.dictionary = new Uint8Array(t.dictionary)), t.raw && (r = n.inflateSetDictionary(this.strm, t.dictionary), r !== h))) throw new Error(a[r]);
        }function E(e, t) {
          var r = new v(t);if (r.push(e), r.err) throw r.msg || a[r.err];return r.result;
        }v.prototype.push = function (e, t) {
          var r = this.strm,
              i = this.options.chunkSize,
              a = this.options.dictionary;var o = void 0,
              c = void 0,
              v = void 0;if (this.ended) return !1;for (c = t === ~~t ? t : !0 === t ? p : l, "[object ArrayBuffer]" === d.call(e) ? r.input = new Uint8Array(e) : r.input = e, r.next_in = 0, r.avail_in = r.input.length;;) {
            for (0 === r.avail_out && (r.output = new Uint8Array(i), r.next_out = 0, r.avail_out = i), o = n.inflate(r, c), o === f && a && (o = n.inflateSetDictionary(r, a), o === h ? o = n.inflate(r, c) : o === _ && (o = f)); r.avail_in > 0 && o === u && r.state.wrap > 0 && 0 !== e[r.next_in];) {
              n.inflateReset(r), o = n.inflate(r, c);
            }switch (o) {case m:case _:case f:case g:
                return this.onEnd(o), this.ended = !0, !1;}if (v = r.avail_out, r.next_out && (0 === r.avail_out || o === u)) if ("string" === this.options.to) {
              var _e2 = s.utf8border(r.output, r.next_out),
                  _t = r.next_out - _e2,
                  _n = s.buf2string(r.output, _e2);r.next_out = _t, r.avail_out = i - _t, _t && r.output.set(r.output.subarray(_e2, _e2 + _t), 0), this.onData(_n);
            } else this.onData(r.output.length === r.next_out ? r.output : r.output.subarray(0, r.next_out));if (o !== h || 0 !== v) {
              if (o === u) return o = n.inflateEnd(this.strm), this.onEnd(o), this.ended = !0, !0;if (0 === r.avail_in) break;
            }
          }return !0;
        }, v.prototype.onData = function (e) {
          this.chunks.push(e);
        }, v.prototype.onEnd = function (e) {
          e === h && ("string" === this.options.to ? this.result = this.chunks.join("") : this.result = i.flattenChunks(this.chunks)), this.chunks = [], this.err = e, this.msg = this.strm.msg;
        }, e.exports.Inflate = v, e.exports.inflate = E, e.exports.inflateRaw = function (e, t) {
          return (t = t || {}).raw = !0, E(e, t);
        }, e.exports.ungzip = E, e.exports.constants = r(619);
      }, 236: function _(e) {
        "use strict";
        var t = function t(e, _t2) {
          return Object.prototype.hasOwnProperty.call(e, _t2);
        };e.exports.assign = function (e) {
          var r = Array.prototype.slice.call(arguments, 1);for (; r.length;) {
            var _n2 = r.shift();if (_n2) {
              if ("object" != (typeof _n2 === "undefined" ? "undefined" : (0, _typeof3.default)(_n2))) throw new TypeError(_n2 + "must be non-object");for (var _r5 in _n2) {
                t(_n2, _r5) && (e[_r5] = _n2[_r5]);
              }
            }
          }return e;
        }, e.exports.flattenChunks = function (e) {
          var t = 0;for (var _r6 = 0, _n3 = e.length; _r6 < _n3; _r6++) {
            t += e[_r6].length;
          }var r = new Uint8Array(t);for (var _t3 = 0, _n4 = 0, i = e.length; _t3 < i; _t3++) {
            var i = e[_t3];r.set(i, _n4), _n4 += i.length;
          }return r;
        };
      }, 373: function _(e) {
        "use strict";
        var t = !0;try {
          String.fromCharCode.apply(null, new Uint8Array(1));
        } catch (e) {
          t = !1;
        }var r = new Uint8Array(256);for (var _e3 = 0; _e3 < 256; _e3++) {
          r[_e3] = _e3 >= 252 ? 6 : _e3 >= 248 ? 5 : _e3 >= 240 ? 4 : _e3 >= 224 ? 3 : _e3 >= 192 ? 2 : 1;
        }r[254] = r[254] = 1, e.exports.string2buf = function (e) {
          if ("function" == typeof TextEncoder && TextEncoder.prototype.encode) return new TextEncoder().encode(e);var t = void 0,
              r = void 0,
              n = void 0,
              i = void 0,
              s = void 0,
              a = e.length,
              o = 0;for (i = 0; i < a; i++) {
            r = e.charCodeAt(i), 55296 == (64512 & r) && i + 1 < a && (n = e.charCodeAt(i + 1), 56320 == (64512 & n) && (r = 65536 + (r - 55296 << 10) + (n - 56320), i++)), o += r < 128 ? 1 : r < 2048 ? 2 : r < 65536 ? 3 : 4;
          }for (t = new Uint8Array(o), s = 0, i = 0; s < o; i++) {
            r = e.charCodeAt(i), 55296 == (64512 & r) && i + 1 < a && (n = e.charCodeAt(i + 1), 56320 == (64512 & n) && (r = 65536 + (r - 55296 << 10) + (n - 56320), i++)), r < 128 ? t[s++] = r : r < 2048 ? (t[s++] = 192 | r >>> 6, t[s++] = 128 | 63 & r) : r < 65536 ? (t[s++] = 224 | r >>> 12, t[s++] = 128 | r >>> 6 & 63, t[s++] = 128 | 63 & r) : (t[s++] = 240 | r >>> 18, t[s++] = 128 | r >>> 12 & 63, t[s++] = 128 | r >>> 6 & 63, t[s++] = 128 | 63 & r);
          }return t;
        };e.exports.buf2string = function (e, n) {
          var i = n || e.length;if ("function" == typeof TextDecoder && TextDecoder.prototype.decode) return new TextDecoder().decode(e.subarray(0, n));var s = void 0,
              a = void 0;var o = new Array(2 * i);for (a = 0, s = 0; s < i;) {
            var _t4 = e[s++];if (_t4 < 128) {
              o[a++] = _t4;continue;
            }var _n5 = r[_t4];if (_n5 > 4) o[a++] = 65533, s += _n5 - 1;else {
              for (_t4 &= 2 === _n5 ? 31 : 3 === _n5 ? 15 : 7; _n5 > 1 && s < i;) {
                _t4 = _t4 << 6 | 63 & e[s++], _n5--;
              }_n5 > 1 ? o[a++] = 65533 : _t4 < 65536 ? o[a++] = _t4 : (_t4 -= 65536, o[a++] = 55296 | _t4 >> 10 & 1023, o[a++] = 56320 | 1023 & _t4);
            }
          }return function (e, r) {
            if (r < 65534 && e.subarray && t) return String.fromCharCode.apply(null, e.length === r ? e : e.subarray(0, r));var n = "";for (var _t5 = 0; _t5 < r; _t5++) {
              n += String.fromCharCode(e[_t5]);
            }return n;
          }(o, a);
        }, e.exports.utf8border = function (e, t) {
          (t = t || e.length) > e.length && (t = e.length);var n = t - 1;for (; n >= 0 && 128 == (192 & e[n]);) {
            n--;
          }return n < 0 || 0 === n ? t : n + r[e[n]] > t ? n : t;
        };
      }, 69: function _(e) {
        "use strict";
        e.exports = function (e, t, r, n) {
          var i = 65535 & e | 0,
              s = e >>> 16 & 65535 | 0,
              a = 0;for (; 0 !== r;) {
            a = r > 2e3 ? 2e3 : r, r -= a;do {
              i = i + t[n++] | 0, s = s + i | 0;
            } while (--a);i %= 65521, s %= 65521;
          }return i | s << 16 | 0;
        };
      }, 619: function _(e) {
        "use strict";
        e.exports = { Z_NO_FLUSH: 0, Z_PARTIAL_FLUSH: 1, Z_SYNC_FLUSH: 2, Z_FULL_FLUSH: 3, Z_FINISH: 4, Z_BLOCK: 5, Z_TREES: 6, Z_OK: 0, Z_STREAM_END: 1, Z_NEED_DICT: 2, Z_ERRNO: -1, Z_STREAM_ERROR: -2, Z_DATA_ERROR: -3, Z_MEM_ERROR: -4, Z_BUF_ERROR: -5, Z_NO_COMPRESSION: 0, Z_BEST_SPEED: 1, Z_BEST_COMPRESSION: 9, Z_DEFAULT_COMPRESSION: -1, Z_FILTERED: 1, Z_HUFFMAN_ONLY: 2, Z_RLE: 3, Z_FIXED: 4, Z_DEFAULT_STRATEGY: 0, Z_BINARY: 0, Z_TEXT: 1, Z_UNKNOWN: 2, Z_DEFLATED: 8 };
      }, 869: function _(e) {
        "use strict";
        var t = new Uint32Array(function () {
          var e = void 0,
              t = [];for (var r = 0; r < 256; r++) {
            e = r;for (var n = 0; n < 8; n++) {
              e = 1 & e ? 3988292384 ^ e >>> 1 : e >>> 1;
            }t[r] = e;
          }return t;
        }());e.exports = function (e, r, n, i) {
          var s = t,
              a = i + n;e ^= -1;for (var _t6 = i; _t6 < a; _t6++) {
            e = e >>> 8 ^ s[255 & (e ^ r[_t6])];
          }return -1 ^ e;
        };
      }, 405: function _(e, t, r) {
        "use strict";

        var _r7 = r(342),
            n = _r7._tr_init,
            i = _r7._tr_stored_block,
            s = _r7._tr_flush_block,
            a = _r7._tr_tally,
            o = _r7._tr_align,
            c = r(69),
            d = r(869),
            l = r(898),
            _r8 = r(619),
            p = _r8.Z_NO_FLUSH,
            h = _r8.Z_PARTIAL_FLUSH,
            u = _r8.Z_FULL_FLUSH,
            f = _r8.Z_FINISH,
            m = _r8.Z_BLOCK,
            _ = _r8.Z_OK,
            g = _r8.Z_STREAM_END,
            v = _r8.Z_STREAM_ERROR,
            E = _r8.Z_DATA_ERROR,
            y = _r8.Z_BUF_ERROR,
            T = _r8.Z_DEFAULT_COMPRESSION,
            C = _r8.Z_FILTERED,
            b = _r8.Z_HUFFMAN_ONLY,
            w = _r8.Z_RLE,
            A = _r8.Z_FIXED,
            R = _r8.Z_DEFAULT_STRATEGY,
            S = _r8.Z_UNKNOWN,
            P = _r8.Z_DEFLATED,
            k = 258,
            x = 262,
            I = 42,
            D = 113,
            O = 666,
            N = function N(e, t) {
          return e.msg = l[t], t;
        },
            M = function M(e) {
          return 2 * e - (e > 4 ? 9 : 0);
        },
            L = function L(e) {
          var t = e.length;for (; --t >= 0;) {
            e[t] = 0;
          }
        },
            U = function U(e) {
          var t = void 0,
              r = void 0,
              n = void 0,
              i = e.w_size;t = e.hash_size, n = t;do {
            r = e.head[--n], e.head[n] = r >= i ? r - i : 0;
          } while (--t);t = i, n = t;do {
            r = e.prev[--n], e.prev[n] = r >= i ? r - i : 0;
          } while (--t);
        };

        var j = function j(e, t, r) {
          return (t << e.hash_shift ^ r) & e.hash_mask;
        };var z = function z(e) {
          var t = e.state;var r = t.pending;r > e.avail_out && (r = e.avail_out), 0 !== r && (e.output.set(t.pending_buf.subarray(t.pending_out, t.pending_out + r), e.next_out), e.next_out += r, t.pending_out += r, e.total_out += r, e.avail_out -= r, t.pending -= r, 0 === t.pending && (t.pending_out = 0));
        },
            G = function G(e, t) {
          s(e, e.block_start >= 0 ? e.block_start : -1, e.strstart - e.block_start, t), e.block_start = e.strstart, z(e.strm);
        },
            F = function F(e, t) {
          e.pending_buf[e.pending++] = t;
        },
            V = function V(e, t) {
          e.pending_buf[e.pending++] = t >>> 8 & 255, e.pending_buf[e.pending++] = 255 & t;
        },
            W = function W(e, t, r, n) {
          var i = e.avail_in;return i > n && (i = n), 0 === i ? 0 : (e.avail_in -= i, t.set(e.input.subarray(e.next_in, e.next_in + i), r), 1 === e.state.wrap ? e.adler = c(e.adler, t, i, r) : 2 === e.state.wrap && (e.adler = d(e.adler, t, i, r)), e.next_in += i, e.total_in += i, i);
        },
            q = function q(e, t) {
          var r = void 0,
              n = void 0,
              i = e.max_chain_length,
              s = e.strstart,
              a = e.prev_length,
              o = e.nice_match;var c = e.strstart > e.w_size - x ? e.strstart - (e.w_size - x) : 0,
              d = e.window,
              l = e.w_mask,
              p = e.prev,
              h = e.strstart + k;var u = d[s + a - 1],
              f = d[s + a];e.prev_length >= e.good_match && (i >>= 2), o > e.lookahead && (o = e.lookahead);do {
            if (r = t, d[r + a] === f && d[r + a - 1] === u && d[r] === d[s] && d[++r] === d[s + 1]) {
              s += 2, r++;do {} while (d[++s] === d[++r] && d[++s] === d[++r] && d[++s] === d[++r] && d[++s] === d[++r] && d[++s] === d[++r] && d[++s] === d[++r] && d[++s] === d[++r] && d[++s] === d[++r] && s < h);if (n = k - (h - s), s = h - k, n > a) {
                if (e.match_start = t, a = n, n >= o) break;u = d[s + a - 1], f = d[s + a];
              }
            }
          } while ((t = p[t & l]) > c && 0 != --i);return a <= e.lookahead ? a : e.lookahead;
        },
            Z = function Z(e) {
          var t = e.w_size;var r = void 0,
              n = void 0,
              i = void 0;do {
            if (n = e.window_size - e.lookahead - e.strstart, e.strstart >= t + (t - x) && (e.window.set(e.window.subarray(t, t + t - n), 0), e.match_start -= t, e.strstart -= t, e.block_start -= t, e.insert > e.strstart && (e.insert = e.strstart), U(e), n += t), 0 === e.strm.avail_in) break;if (r = W(e.strm, e.window, e.strstart + e.lookahead, n), e.lookahead += r, e.lookahead + e.insert >= 3) for (i = e.strstart - e.insert, e.ins_h = e.window[i], e.ins_h = j(e, e.ins_h, e.window[i + 1]); e.insert && (e.ins_h = j(e, e.ins_h, e.window[i + 3 - 1]), e.prev[i & e.w_mask] = e.head[e.ins_h], e.head[e.ins_h] = i, i++, e.insert--, !(e.lookahead + e.insert < 3));) {}
          } while (e.lookahead < x && 0 !== e.strm.avail_in);
        },
            B = function B(e, t) {
          var r = void 0,
              n = void 0,
              s = void 0,
              a = e.pending_buf_size - 5 > e.w_size ? e.w_size : e.pending_buf_size - 5,
              o = 0,
              c = e.strm.avail_in;do {
            if (r = 65535, s = e.bi_valid + 42 >> 3, e.strm.avail_out < s) break;if (s = e.strm.avail_out - s, n = e.strstart - e.block_start, r > n + e.strm.avail_in && (r = n + e.strm.avail_in), r > s && (r = s), r < a && (0 === r && t !== f || t === p || r !== n + e.strm.avail_in)) break;o = t === f && r === n + e.strm.avail_in ? 1 : 0, i(e, 0, 0, o), e.pending_buf[e.pending - 4] = r, e.pending_buf[e.pending - 3] = r >> 8, e.pending_buf[e.pending - 2] = ~r, e.pending_buf[e.pending - 1] = ~r >> 8, z(e.strm), n && (n > r && (n = r), e.strm.output.set(e.window.subarray(e.block_start, e.block_start + n), e.strm.next_out), e.strm.next_out += n, e.strm.avail_out -= n, e.strm.total_out += n, e.block_start += n, r -= n), r && (W(e.strm, e.strm.output, e.strm.next_out, r), e.strm.next_out += r, e.strm.avail_out -= r, e.strm.total_out += r);
          } while (0 === o);return c -= e.strm.avail_in, c && (c >= e.w_size ? (e.matches = 2, e.window.set(e.strm.input.subarray(e.strm.next_in - e.w_size, e.strm.next_in), 0), e.strstart = e.w_size, e.insert = e.strstart) : (e.window_size - e.strstart <= c && (e.strstart -= e.w_size, e.window.set(e.window.subarray(e.w_size, e.w_size + e.strstart), 0), e.matches < 2 && e.matches++, e.insert > e.strstart && (e.insert = e.strstart)), e.window.set(e.strm.input.subarray(e.strm.next_in - c, e.strm.next_in), e.strstart), e.strstart += c, e.insert += c > e.w_size - e.insert ? e.w_size - e.insert : c), e.block_start = e.strstart), e.high_water < e.strstart && (e.high_water = e.strstart), o ? 4 : t !== p && t !== f && 0 === e.strm.avail_in && e.strstart === e.block_start ? 2 : (s = e.window_size - e.strstart, e.strm.avail_in > s && e.block_start >= e.w_size && (e.block_start -= e.w_size, e.strstart -= e.w_size, e.window.set(e.window.subarray(e.w_size, e.w_size + e.strstart), 0), e.matches < 2 && e.matches++, s += e.w_size, e.insert > e.strstart && (e.insert = e.strstart)), s > e.strm.avail_in && (s = e.strm.avail_in), s && (W(e.strm, e.window, e.strstart, s), e.strstart += s, e.insert += s > e.w_size - e.insert ? e.w_size - e.insert : s), e.high_water < e.strstart && (e.high_water = e.strstart), s = e.bi_valid + 42 >> 3, s = e.pending_buf_size - s > 65535 ? 65535 : e.pending_buf_size - s, a = s > e.w_size ? e.w_size : s, n = e.strstart - e.block_start, (n >= a || (n || t === f) && t !== p && 0 === e.strm.avail_in && n <= s) && (r = n > s ? s : n, o = t === f && 0 === e.strm.avail_in && r === n ? 1 : 0, i(e, e.block_start, r, o), e.block_start += r, z(e.strm)), o ? 3 : 1);
        },
            H = function H(e, t) {
          var r = void 0,
              n = void 0;for (;;) {
            if (e.lookahead < x) {
              if (Z(e), e.lookahead < x && t === p) return 1;if (0 === e.lookahead) break;
            }if (r = 0, e.lookahead >= 3 && (e.ins_h = j(e, e.ins_h, e.window[e.strstart + 3 - 1]), r = e.prev[e.strstart & e.w_mask] = e.head[e.ins_h], e.head[e.ins_h] = e.strstart), 0 !== r && e.strstart - r <= e.w_size - x && (e.match_length = q(e, r)), e.match_length >= 3) {
              if (n = a(e, e.strstart - e.match_start, e.match_length - 3), e.lookahead -= e.match_length, e.match_length <= e.max_lazy_match && e.lookahead >= 3) {
                e.match_length--;do {
                  e.strstart++, e.ins_h = j(e, e.ins_h, e.window[e.strstart + 3 - 1]), r = e.prev[e.strstart & e.w_mask] = e.head[e.ins_h], e.head[e.ins_h] = e.strstart;
                } while (0 != --e.match_length);e.strstart++;
              } else e.strstart += e.match_length, e.match_length = 0, e.ins_h = e.window[e.strstart], e.ins_h = j(e, e.ins_h, e.window[e.strstart + 1]);
            } else n = a(e, 0, e.window[e.strstart]), e.lookahead--, e.strstart++;if (n && (G(e, !1), 0 === e.strm.avail_out)) return 1;
          }return e.insert = e.strstart < 2 ? e.strstart : 2, t === f ? (G(e, !0), 0 === e.strm.avail_out ? 3 : 4) : e.sym_next && (G(e, !1), 0 === e.strm.avail_out) ? 1 : 2;
        },
            K = function K(e, t) {
          var r = void 0,
              n = void 0,
              i = void 0;for (;;) {
            if (e.lookahead < x) {
              if (Z(e), e.lookahead < x && t === p) return 1;if (0 === e.lookahead) break;
            }if (r = 0, e.lookahead >= 3 && (e.ins_h = j(e, e.ins_h, e.window[e.strstart + 3 - 1]), r = e.prev[e.strstart & e.w_mask] = e.head[e.ins_h], e.head[e.ins_h] = e.strstart), e.prev_length = e.match_length, e.prev_match = e.match_start, e.match_length = 2, 0 !== r && e.prev_length < e.max_lazy_match && e.strstart - r <= e.w_size - x && (e.match_length = q(e, r), e.match_length <= 5 && (e.strategy === C || 3 === e.match_length && e.strstart - e.match_start > 4096) && (e.match_length = 2)), e.prev_length >= 3 && e.match_length <= e.prev_length) {
              i = e.strstart + e.lookahead - 3, n = a(e, e.strstart - 1 - e.prev_match, e.prev_length - 3), e.lookahead -= e.prev_length - 1, e.prev_length -= 2;do {
                ++e.strstart <= i && (e.ins_h = j(e, e.ins_h, e.window[e.strstart + 3 - 1]), r = e.prev[e.strstart & e.w_mask] = e.head[e.ins_h], e.head[e.ins_h] = e.strstart);
              } while (0 != --e.prev_length);if (e.match_available = 0, e.match_length = 2, e.strstart++, n && (G(e, !1), 0 === e.strm.avail_out)) return 1;
            } else if (e.match_available) {
              if (n = a(e, 0, e.window[e.strstart - 1]), n && G(e, !1), e.strstart++, e.lookahead--, 0 === e.strm.avail_out) return 1;
            } else e.match_available = 1, e.strstart++, e.lookahead--;
          }return e.match_available && (n = a(e, 0, e.window[e.strstart - 1]), e.match_available = 0), e.insert = e.strstart < 2 ? e.strstart : 2, t === f ? (G(e, !0), 0 === e.strm.avail_out ? 3 : 4) : e.sym_next && (G(e, !1), 0 === e.strm.avail_out) ? 1 : 2;
        };function J(e, t, r, n, i) {
          this.good_length = e, this.max_lazy = t, this.nice_length = r, this.max_chain = n, this.func = i;
        }var $ = [new J(0, 0, 0, 0, B), new J(4, 4, 8, 4, H), new J(4, 5, 16, 8, H), new J(4, 6, 32, 32, H), new J(4, 4, 16, 16, K), new J(8, 16, 32, 32, K), new J(8, 16, 128, 128, K), new J(8, 32, 128, 256, K), new J(32, 128, 258, 1024, K), new J(32, 258, 258, 4096, K)];function Y() {
          this.strm = null, this.status = 0, this.pending_buf = null, this.pending_buf_size = 0, this.pending_out = 0, this.pending = 0, this.wrap = 0, this.gzhead = null, this.gzindex = 0, this.method = P, this.last_flush = -1, this.w_size = 0, this.w_bits = 0, this.w_mask = 0, this.window = null, this.window_size = 0, this.prev = null, this.head = null, this.ins_h = 0, this.hash_size = 0, this.hash_bits = 0, this.hash_mask = 0, this.hash_shift = 0, this.block_start = 0, this.match_length = 0, this.prev_match = 0, this.match_available = 0, this.strstart = 0, this.match_start = 0, this.lookahead = 0, this.prev_length = 0, this.max_chain_length = 0, this.max_lazy_match = 0, this.level = 0, this.strategy = 0, this.good_match = 0, this.nice_match = 0, this.dyn_ltree = new Uint16Array(1146), this.dyn_dtree = new Uint16Array(122), this.bl_tree = new Uint16Array(78), L(this.dyn_ltree), L(this.dyn_dtree), L(this.bl_tree), this.l_desc = null, this.d_desc = null, this.bl_desc = null, this.bl_count = new Uint16Array(16), this.heap = new Uint16Array(573), L(this.heap), this.heap_len = 0, this.heap_max = 0, this.depth = new Uint16Array(573), L(this.depth), this.sym_buf = 0, this.lit_bufsize = 0, this.sym_next = 0, this.sym_end = 0, this.opt_len = 0, this.static_len = 0, this.matches = 0, this.insert = 0, this.bi_buf = 0, this.bi_valid = 0;
        }var X = function X(e) {
          if (!e) return 1;var t = e.state;return !t || t.strm !== e || t.status !== I && 57 !== t.status && 69 !== t.status && 73 !== t.status && 91 !== t.status && 103 !== t.status && t.status !== D && t.status !== O ? 1 : 0;
        },
            Q = function Q(e) {
          if (X(e)) return N(e, v);e.total_in = e.total_out = 0, e.data_type = S;var t = e.state;return t.pending = 0, t.pending_out = 0, t.wrap < 0 && (t.wrap = -t.wrap), t.status = 2 === t.wrap ? 57 : t.wrap ? I : D, e.adler = 2 === t.wrap ? 0 : 1, t.last_flush = -2, n(t), _;
        },
            ee = function ee(e) {
          var t = Q(e);var r;return t === _ && ((r = e.state).window_size = 2 * r.w_size, L(r.head), r.max_lazy_match = $[r.level].max_lazy, r.good_match = $[r.level].good_length, r.nice_match = $[r.level].nice_length, r.max_chain_length = $[r.level].max_chain, r.strstart = 0, r.block_start = 0, r.lookahead = 0, r.insert = 0, r.match_length = r.prev_length = 2, r.match_available = 0, r.ins_h = 0), t;
        },
            te = function te(e, t, r, n, i, s) {
          if (!e) return v;var a = 1;if (t === T && (t = 6), n < 0 ? (a = 0, n = -n) : n > 15 && (a = 2, n -= 16), i < 1 || i > 9 || r !== P || n < 8 || n > 15 || t < 0 || t > 9 || s < 0 || s > A || 8 === n && 1 !== a) return N(e, v);8 === n && (n = 9);var o = new Y();return e.state = o, o.strm = e, o.status = I, o.wrap = a, o.gzhead = null, o.w_bits = n, o.w_size = 1 << o.w_bits, o.w_mask = o.w_size - 1, o.hash_bits = i + 7, o.hash_size = 1 << o.hash_bits, o.hash_mask = o.hash_size - 1, o.hash_shift = ~~((o.hash_bits + 3 - 1) / 3), o.window = new Uint8Array(2 * o.w_size), o.head = new Uint16Array(o.hash_size), o.prev = new Uint16Array(o.w_size), o.lit_bufsize = 1 << i + 6, o.pending_buf_size = 4 * o.lit_bufsize, o.pending_buf = new Uint8Array(o.pending_buf_size), o.sym_buf = o.lit_bufsize, o.sym_end = 3 * (o.lit_bufsize - 1), o.level = t, o.strategy = s, o.method = r, ee(e);
        };e.exports.deflateInit = function (e, t) {
          return te(e, t, P, 15, 8, R);
        }, e.exports.deflateInit2 = te, e.exports.deflateReset = ee, e.exports.deflateResetKeep = Q, e.exports.deflateSetHeader = function (e, t) {
          return X(e) || 2 !== e.state.wrap ? v : (e.state.gzhead = t, _);
        }, e.exports.deflate = function (e, t) {
          if (X(e) || t > m || t < 0) return e ? N(e, v) : v;var r = e.state;if (!e.output || 0 !== e.avail_in && !e.input || r.status === O && t !== f) return N(e, 0 === e.avail_out ? y : v);var n = r.last_flush;if (r.last_flush = t, 0 !== r.pending) {
            if (z(e), 0 === e.avail_out) return r.last_flush = -1, _;
          } else if (0 === e.avail_in && M(t) <= M(n) && t !== f) return N(e, y);if (r.status === O && 0 !== e.avail_in) return N(e, y);if (r.status === I && 0 === r.wrap && (r.status = D), r.status === I) {
            var _t7 = P + (r.w_bits - 8 << 4) << 8,
                _n6 = -1;if (_n6 = r.strategy >= b || r.level < 2 ? 0 : r.level < 6 ? 1 : 6 === r.level ? 2 : 3, _t7 |= _n6 << 6, 0 !== r.strstart && (_t7 |= 32), _t7 += 31 - _t7 % 31, V(r, _t7), 0 !== r.strstart && (V(r, e.adler >>> 16), V(r, 65535 & e.adler)), e.adler = 1, r.status = D, z(e), 0 !== r.pending) return r.last_flush = -1, _;
          }if (57 === r.status) if (e.adler = 0, F(r, 31), F(r, 139), F(r, 8), r.gzhead) F(r, (r.gzhead.text ? 1 : 0) + (r.gzhead.hcrc ? 2 : 0) + (r.gzhead.extra ? 4 : 0) + (r.gzhead.name ? 8 : 0) + (r.gzhead.comment ? 16 : 0)), F(r, 255 & r.gzhead.time), F(r, r.gzhead.time >> 8 & 255), F(r, r.gzhead.time >> 16 & 255), F(r, r.gzhead.time >> 24 & 255), F(r, 9 === r.level ? 2 : r.strategy >= b || r.level < 2 ? 4 : 0), F(r, 255 & r.gzhead.os), r.gzhead.extra && r.gzhead.extra.length && (F(r, 255 & r.gzhead.extra.length), F(r, r.gzhead.extra.length >> 8 & 255)), r.gzhead.hcrc && (e.adler = d(e.adler, r.pending_buf, r.pending, 0)), r.gzindex = 0, r.status = 69;else if (F(r, 0), F(r, 0), F(r, 0), F(r, 0), F(r, 0), F(r, 9 === r.level ? 2 : r.strategy >= b || r.level < 2 ? 4 : 0), F(r, 3), r.status = D, z(e), 0 !== r.pending) return r.last_flush = -1, _;if (69 === r.status) {
            if (r.gzhead.extra) {
              var _t8 = r.pending,
                  _n7 = (65535 & r.gzhead.extra.length) - r.gzindex;for (; r.pending + _n7 > r.pending_buf_size;) {
                var _i2 = r.pending_buf_size - r.pending;if (r.pending_buf.set(r.gzhead.extra.subarray(r.gzindex, r.gzindex + _i2), r.pending), r.pending = r.pending_buf_size, r.gzhead.hcrc && r.pending > _t8 && (e.adler = d(e.adler, r.pending_buf, r.pending - _t8, _t8)), r.gzindex += _i2, z(e), 0 !== r.pending) return r.last_flush = -1, _;_t8 = 0, _n7 -= _i2;
              }var _i = new Uint8Array(r.gzhead.extra);r.pending_buf.set(_i.subarray(r.gzindex, r.gzindex + _n7), r.pending), r.pending += _n7, r.gzhead.hcrc && r.pending > _t8 && (e.adler = d(e.adler, r.pending_buf, r.pending - _t8, _t8)), r.gzindex = 0;
            }r.status = 73;
          }if (73 === r.status) {
            if (r.gzhead.name) {
              var _t9 = void 0,
                  _n8 = r.pending;do {
                if (r.pending === r.pending_buf_size) {
                  if (r.gzhead.hcrc && r.pending > _n8 && (e.adler = d(e.adler, r.pending_buf, r.pending - _n8, _n8)), z(e), 0 !== r.pending) return r.last_flush = -1, _;_n8 = 0;
                }_t9 = r.gzindex < r.gzhead.name.length ? 255 & r.gzhead.name.charCodeAt(r.gzindex++) : 0, F(r, _t9);
              } while (0 !== _t9);r.gzhead.hcrc && r.pending > _n8 && (e.adler = d(e.adler, r.pending_buf, r.pending - _n8, _n8)), r.gzindex = 0;
            }r.status = 91;
          }if (91 === r.status) {
            if (r.gzhead.comment) {
              var _t10 = void 0,
                  _n9 = r.pending;do {
                if (r.pending === r.pending_buf_size) {
                  if (r.gzhead.hcrc && r.pending > _n9 && (e.adler = d(e.adler, r.pending_buf, r.pending - _n9, _n9)), z(e), 0 !== r.pending) return r.last_flush = -1, _;_n9 = 0;
                }_t10 = r.gzindex < r.gzhead.comment.length ? 255 & r.gzhead.comment.charCodeAt(r.gzindex++) : 0, F(r, _t10);
              } while (0 !== _t10);r.gzhead.hcrc && r.pending > _n9 && (e.adler = d(e.adler, r.pending_buf, r.pending - _n9, _n9));
            }r.status = 103;
          }if (103 === r.status) {
            if (r.gzhead.hcrc) {
              if (r.pending + 2 > r.pending_buf_size && (z(e), 0 !== r.pending)) return r.last_flush = -1, _;F(r, 255 & e.adler), F(r, e.adler >> 8 & 255), e.adler = 0;
            }if (r.status = D, z(e), 0 !== r.pending) return r.last_flush = -1, _;
          }if (0 !== e.avail_in || 0 !== r.lookahead || t !== p && r.status !== O) {
            var _n10 = 0 === r.level ? B(r, t) : r.strategy === b ? function (e, t) {
              var r = void 0;for (;;) {
                if (0 === e.lookahead && (Z(e), 0 === e.lookahead)) {
                  if (t === p) return 1;break;
                }if (e.match_length = 0, r = a(e, 0, e.window[e.strstart]), e.lookahead--, e.strstart++, r && (G(e, !1), 0 === e.strm.avail_out)) return 1;
              }return e.insert = 0, t === f ? (G(e, !0), 0 === e.strm.avail_out ? 3 : 4) : e.sym_next && (G(e, !1), 0 === e.strm.avail_out) ? 1 : 2;
            }(r, t) : r.strategy === w ? function (e, t) {
              var r = void 0,
                  n = void 0,
                  i = void 0,
                  s = void 0;var o = e.window;for (;;) {
                if (e.lookahead <= k) {
                  if (Z(e), e.lookahead <= k && t === p) return 1;if (0 === e.lookahead) break;
                }if (e.match_length = 0, e.lookahead >= 3 && e.strstart > 0 && (i = e.strstart - 1, n = o[i], n === o[++i] && n === o[++i] && n === o[++i])) {
                  s = e.strstart + k;do {} while (n === o[++i] && n === o[++i] && n === o[++i] && n === o[++i] && n === o[++i] && n === o[++i] && n === o[++i] && n === o[++i] && i < s);e.match_length = k - (s - i), e.match_length > e.lookahead && (e.match_length = e.lookahead);
                }if (e.match_length >= 3 ? (r = a(e, 1, e.match_length - 3), e.lookahead -= e.match_length, e.strstart += e.match_length, e.match_length = 0) : (r = a(e, 0, e.window[e.strstart]), e.lookahead--, e.strstart++), r && (G(e, !1), 0 === e.strm.avail_out)) return 1;
              }return e.insert = 0, t === f ? (G(e, !0), 0 === e.strm.avail_out ? 3 : 4) : e.sym_next && (G(e, !1), 0 === e.strm.avail_out) ? 1 : 2;
            }(r, t) : $[r.level].func(r, t);if (3 !== _n10 && 4 !== _n10 || (r.status = O), 1 === _n10 || 3 === _n10) return 0 === e.avail_out && (r.last_flush = -1), _;if (2 === _n10 && (t === h ? o(r) : t !== m && (i(r, 0, 0, !1), t === u && (L(r.head), 0 === r.lookahead && (r.strstart = 0, r.block_start = 0, r.insert = 0))), z(e), 0 === e.avail_out)) return r.last_flush = -1, _;
          }return t !== f ? _ : r.wrap <= 0 ? g : (2 === r.wrap ? (F(r, 255 & e.adler), F(r, e.adler >> 8 & 255), F(r, e.adler >> 16 & 255), F(r, e.adler >> 24 & 255), F(r, 255 & e.total_in), F(r, e.total_in >> 8 & 255), F(r, e.total_in >> 16 & 255), F(r, e.total_in >> 24 & 255)) : (V(r, e.adler >>> 16), V(r, 65535 & e.adler)), z(e), r.wrap > 0 && (r.wrap = -r.wrap), 0 !== r.pending ? _ : g);
        }, e.exports.deflateEnd = function (e) {
          if (X(e)) return v;var t = e.state.status;return e.state = null, t === D ? N(e, E) : _;
        }, e.exports.deflateSetDictionary = function (e, t) {
          var r = t.length;if (X(e)) return v;var n = e.state,
              i = n.wrap;if (2 === i || 1 === i && n.status !== I || n.lookahead) return v;if (1 === i && (e.adler = c(e.adler, t, r, 0)), n.wrap = 0, r >= n.w_size) {
            0 === i && (L(n.head), n.strstart = 0, n.block_start = 0, n.insert = 0);var _e4 = new Uint8Array(n.w_size);_e4.set(t.subarray(r - n.w_size, r), 0), t = _e4, r = n.w_size;
          }var s = e.avail_in,
              a = e.next_in,
              o = e.input;for (e.avail_in = r, e.next_in = 0, e.input = t, Z(n); n.lookahead >= 3;) {
            var _e5 = n.strstart,
                _t11 = n.lookahead - 2;do {
              n.ins_h = j(n, n.ins_h, n.window[_e5 + 3 - 1]), n.prev[_e5 & n.w_mask] = n.head[n.ins_h], n.head[n.ins_h] = _e5, _e5++;
            } while (--_t11);n.strstart = _e5, n.lookahead = 2, Z(n);
          }return n.strstart += n.lookahead, n.block_start = n.strstart, n.insert = n.lookahead, n.lookahead = 0, n.match_length = n.prev_length = 2, n.match_available = 0, e.next_in = a, e.input = o, e.avail_in = s, n.wrap = i, _;
        }, e.exports.deflateInfo = "pako deflate (from Nodeca project)";
      }, 188: function _(e) {
        "use strict";
        e.exports = function () {
          this.text = 0, this.time = 0, this.xflags = 0, this.os = 0, this.extra = null, this.extra_len = 0, this.name = "", this.comment = "", this.hcrc = 0, this.done = !1;
        };
      }, 264: function _(e) {
        "use strict";
        var t = 16209;e.exports = function (e, r) {
          var n = void 0,
              i = void 0,
              s = void 0,
              a = void 0,
              o = void 0,
              c = void 0,
              d = void 0,
              l = void 0,
              p = void 0,
              h = void 0,
              u = void 0,
              f = void 0,
              m = void 0,
              _ = void 0,
              g = void 0,
              v = void 0,
              E = void 0,
              y = void 0,
              T = void 0,
              C = void 0,
              b = void 0,
              w = void 0,
              A = void 0,
              R = void 0;var S = e.state;n = e.next_in, A = e.input, i = n + (e.avail_in - 5), s = e.next_out, R = e.output, a = s - (r - e.avail_out), o = s + (e.avail_out - 257), c = S.dmax, d = S.wsize, l = S.whave, p = S.wnext, h = S.window, u = S.hold, f = S.bits, m = S.lencode, _ = S.distcode, g = (1 << S.lenbits) - 1, v = (1 << S.distbits) - 1;e: do {
            f < 15 && (u += A[n++] << f, f += 8, u += A[n++] << f, f += 8), E = m[u & g];t: for (;;) {
              if (y = E >>> 24, u >>>= y, f -= y, y = E >>> 16 & 255, 0 === y) R[s++] = 65535 & E;else {
                if (!(16 & y)) {
                  if (0 == (64 & y)) {
                    E = m[(65535 & E) + (u & (1 << y) - 1)];continue t;
                  }if (32 & y) {
                    S.mode = 16191;break e;
                  }e.msg = "invalid literal/length code", S.mode = t;break e;
                }T = 65535 & E, y &= 15, y && (f < y && (u += A[n++] << f, f += 8), T += u & (1 << y) - 1, u >>>= y, f -= y), f < 15 && (u += A[n++] << f, f += 8, u += A[n++] << f, f += 8), E = _[u & v];r: for (;;) {
                  if (y = E >>> 24, u >>>= y, f -= y, y = E >>> 16 & 255, !(16 & y)) {
                    if (0 == (64 & y)) {
                      E = _[(65535 & E) + (u & (1 << y) - 1)];continue r;
                    }e.msg = "invalid distance code", S.mode = t;break e;
                  }if (C = 65535 & E, y &= 15, f < y && (u += A[n++] << f, f += 8, f < y && (u += A[n++] << f, f += 8)), C += u & (1 << y) - 1, C > c) {
                    e.msg = "invalid distance too far back", S.mode = t;break e;
                  }if (u >>>= y, f -= y, y = s - a, C > y) {
                    if (y = C - y, y > l && S.sane) {
                      e.msg = "invalid distance too far back", S.mode = t;break e;
                    }if (b = 0, w = h, 0 === p) {
                      if (b += d - y, y < T) {
                        T -= y;do {
                          R[s++] = h[b++];
                        } while (--y);b = s - C, w = R;
                      }
                    } else if (p < y) {
                      if (b += d + p - y, y -= p, y < T) {
                        T -= y;do {
                          R[s++] = h[b++];
                        } while (--y);if (b = 0, p < T) {
                          y = p, T -= y;do {
                            R[s++] = h[b++];
                          } while (--y);b = s - C, w = R;
                        }
                      }
                    } else if (b += p - y, y < T) {
                      T -= y;do {
                        R[s++] = h[b++];
                      } while (--y);b = s - C, w = R;
                    }for (; T > 2;) {
                      R[s++] = w[b++], R[s++] = w[b++], R[s++] = w[b++], T -= 3;
                    }T && (R[s++] = w[b++], T > 1 && (R[s++] = w[b++]));
                  } else {
                    b = s - C;do {
                      R[s++] = R[b++], R[s++] = R[b++], R[s++] = R[b++], T -= 3;
                    } while (T > 2);T && (R[s++] = R[b++], T > 1 && (R[s++] = R[b++]));
                  }break;
                }
              }break;
            }
          } while (n < i && s < o);T = f >> 3, n -= T, f -= T << 3, u &= (1 << f) - 1, e.next_in = n, e.next_out = s, e.avail_in = n < i ? i - n + 5 : 5 - (n - i), e.avail_out = s < o ? o - s + 257 : 257 - (s - o), S.hold = u, S.bits = f;
        };
      }, 948: function _(e, t, r) {
        "use strict";
        var n = r(69),
            i = r(869),
            s = r(264),
            a = r(241),
            _r9 = r(619),
            o = _r9.Z_FINISH,
            c = _r9.Z_BLOCK,
            d = _r9.Z_TREES,
            l = _r9.Z_OK,
            p = _r9.Z_STREAM_END,
            h = _r9.Z_NEED_DICT,
            u = _r9.Z_STREAM_ERROR,
            f = _r9.Z_DATA_ERROR,
            m = _r9.Z_MEM_ERROR,
            _ = _r9.Z_BUF_ERROR,
            g = _r9.Z_DEFLATED,
            v = 16180,
            E = 16190,
            y = 16191,
            T = 16192,
            C = 16194,
            b = 16199,
            w = 16200,
            A = 16206,
            R = 16209,
            S = 16210,
            P = function P(e) {
          return (e >>> 24 & 255) + (e >>> 8 & 65280) + ((65280 & e) << 8) + ((255 & e) << 24);
        };function k() {
          this.strm = null, this.mode = 0, this.last = !1, this.wrap = 0, this.havedict = !1, this.flags = 0, this.dmax = 0, this.check = 0, this.total = 0, this.head = null, this.wbits = 0, this.wsize = 0, this.whave = 0, this.wnext = 0, this.window = null, this.hold = 0, this.bits = 0, this.length = 0, this.offset = 0, this.extra = 0, this.lencode = null, this.distcode = null, this.lenbits = 0, this.distbits = 0, this.ncode = 0, this.nlen = 0, this.ndist = 0, this.have = 0, this.next = null, this.lens = new Uint16Array(320), this.work = new Uint16Array(288), this.lendyn = null, this.distdyn = null, this.sane = 0, this.back = 0, this.was = 0;
        }var x = function x(e) {
          if (!e) return 1;var t = e.state;return !t || t.strm !== e || t.mode < v || t.mode > 16211 ? 1 : 0;
        },
            I = function I(e) {
          if (x(e)) return u;var t = e.state;return e.total_in = e.total_out = t.total = 0, e.msg = "", t.wrap && (e.adler = 1 & t.wrap), t.mode = v, t.last = 0, t.havedict = 0, t.flags = -1, t.dmax = 32768, t.head = null, t.hold = 0, t.bits = 0, t.lencode = t.lendyn = new Int32Array(852), t.distcode = t.distdyn = new Int32Array(592), t.sane = 1, t.back = -1, l;
        },
            D = function D(e) {
          if (x(e)) return u;var t = e.state;return t.wsize = 0, t.whave = 0, t.wnext = 0, I(e);
        },
            O = function O(e, t) {
          var r = void 0;if (x(e)) return u;var n = e.state;return t < 0 ? (r = 0, t = -t) : (r = 5 + (t >> 4), t < 48 && (t &= 15)), t && (t < 8 || t > 15) ? u : (null !== n.window && n.wbits !== t && (n.window = null), n.wrap = r, n.wbits = t, D(e));
        },
            N = function N(e, t) {
          if (!e) return u;var r = new k();e.state = r, r.strm = e, r.window = null, r.mode = v;var n = O(e, t);return n !== l && (e.state = null), n;
        };var M = void 0,
            L = void 0,
            U = !0;var j = function j(e) {
          if (U) {
            M = new Int32Array(512), L = new Int32Array(32);var _t12 = 0;for (; _t12 < 144;) {
              e.lens[_t12++] = 8;
            }for (; _t12 < 256;) {
              e.lens[_t12++] = 9;
            }for (; _t12 < 280;) {
              e.lens[_t12++] = 7;
            }for (; _t12 < 288;) {
              e.lens[_t12++] = 8;
            }for (a(1, e.lens, 0, 288, M, 0, e.work, { bits: 9 }), _t12 = 0; _t12 < 32;) {
              e.lens[_t12++] = 5;
            }a(2, e.lens, 0, 32, L, 0, e.work, { bits: 5 }), U = !1;
          }e.lencode = M, e.lenbits = 9, e.distcode = L, e.distbits = 5;
        },
            z = function z(e, t, r, n) {
          var i = void 0;var s = e.state;return null === s.window && (s.wsize = 1 << s.wbits, s.wnext = 0, s.whave = 0, s.window = new Uint8Array(s.wsize)), n >= s.wsize ? (s.window.set(t.subarray(r - s.wsize, r), 0), s.wnext = 0, s.whave = s.wsize) : (i = s.wsize - s.wnext, i > n && (i = n), s.window.set(t.subarray(r - n, r - n + i), s.wnext), (n -= i) ? (s.window.set(t.subarray(r - n, r), 0), s.wnext = n, s.whave = s.wsize) : (s.wnext += i, s.wnext === s.wsize && (s.wnext = 0), s.whave < s.wsize && (s.whave += i))), 0;
        };e.exports.inflateReset = D, e.exports.inflateReset2 = O, e.exports.inflateResetKeep = I, e.exports.inflateInit = function (e) {
          return N(e, 15);
        }, e.exports.inflateInit2 = N, e.exports.inflate = function (e, t) {
          var r = void 0,
              k = void 0,
              I = void 0,
              D = void 0,
              O = void 0,
              N = void 0,
              M = void 0,
              L = void 0,
              U = void 0,
              G = void 0,
              F = void 0,
              V = void 0,
              W = void 0,
              q = void 0,
              Z = void 0,
              B = void 0,
              H = void 0,
              K = void 0,
              J = void 0,
              $ = void 0,
              Y = void 0,
              X = void 0,
              Q = 0;var ee = new Uint8Array(4);var te = void 0,
              re = void 0;var ne = new Uint8Array([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);if (x(e) || !e.output || !e.input && 0 !== e.avail_in) return u;r = e.state, r.mode === y && (r.mode = T), O = e.next_out, I = e.output, M = e.avail_out, D = e.next_in, k = e.input, N = e.avail_in, L = r.hold, U = r.bits, G = N, F = M, X = l;e: for (;;) {
            switch (r.mode) {case v:
                if (0 === r.wrap) {
                  r.mode = T;break;
                }for (; U < 16;) {
                  if (0 === N) break e;N--, L += k[D++] << U, U += 8;
                }if (2 & r.wrap && 35615 === L) {
                  0 === r.wbits && (r.wbits = 15), r.check = 0, ee[0] = 255 & L, ee[1] = L >>> 8 & 255, r.check = i(r.check, ee, 2, 0), L = 0, U = 0, r.mode = 16181;break;
                }if (r.head && (r.head.done = !1), !(1 & r.wrap) || (((255 & L) << 8) + (L >> 8)) % 31) {
                  e.msg = "incorrect header check", r.mode = R;break;
                }if ((15 & L) !== g) {
                  e.msg = "unknown compression method", r.mode = R;break;
                }if (L >>>= 4, U -= 4, Y = 8 + (15 & L), 0 === r.wbits && (r.wbits = Y), Y > 15 || Y > r.wbits) {
                  e.msg = "invalid window size", r.mode = R;break;
                }r.dmax = 1 << r.wbits, r.flags = 0, e.adler = r.check = 1, r.mode = 512 & L ? 16189 : y, L = 0, U = 0;break;case 16181:
                for (; U < 16;) {
                  if (0 === N) break e;N--, L += k[D++] << U, U += 8;
                }if (r.flags = L, (255 & r.flags) !== g) {
                  e.msg = "unknown compression method", r.mode = R;break;
                }if (57344 & r.flags) {
                  e.msg = "unknown header flags set", r.mode = R;break;
                }r.head && (r.head.text = L >> 8 & 1), 512 & r.flags && 4 & r.wrap && (ee[0] = 255 & L, ee[1] = L >>> 8 & 255, r.check = i(r.check, ee, 2, 0)), L = 0, U = 0, r.mode = 16182;case 16182:
                for (; U < 32;) {
                  if (0 === N) break e;N--, L += k[D++] << U, U += 8;
                }r.head && (r.head.time = L), 512 & r.flags && 4 & r.wrap && (ee[0] = 255 & L, ee[1] = L >>> 8 & 255, ee[2] = L >>> 16 & 255, ee[3] = L >>> 24 & 255, r.check = i(r.check, ee, 4, 0)), L = 0, U = 0, r.mode = 16183;case 16183:
                for (; U < 16;) {
                  if (0 === N) break e;N--, L += k[D++] << U, U += 8;
                }r.head && (r.head.xflags = 255 & L, r.head.os = L >> 8), 512 & r.flags && 4 & r.wrap && (ee[0] = 255 & L, ee[1] = L >>> 8 & 255, r.check = i(r.check, ee, 2, 0)), L = 0, U = 0, r.mode = 16184;case 16184:
                if (1024 & r.flags) {
                  for (; U < 16;) {
                    if (0 === N) break e;N--, L += k[D++] << U, U += 8;
                  }r.length = L, r.head && (r.head.extra_len = L), 512 & r.flags && 4 & r.wrap && (ee[0] = 255 & L, ee[1] = L >>> 8 & 255, r.check = i(r.check, ee, 2, 0)), L = 0, U = 0;
                } else r.head && (r.head.extra = null);r.mode = 16185;case 16185:
                if (1024 & r.flags && (V = r.length, V > N && (V = N), V && (r.head && (Y = r.head.extra_len - r.length, r.head.extra || (r.head.extra = new Uint8Array(r.head.extra_len)), r.head.extra.set(k.subarray(D, D + V), Y)), 512 & r.flags && 4 & r.wrap && (r.check = i(r.check, k, V, D)), N -= V, D += V, r.length -= V), r.length)) break e;r.length = 0, r.mode = 16186;case 16186:
                if (2048 & r.flags) {
                  if (0 === N) break e;V = 0;do {
                    Y = k[D + V++], r.head && Y && r.length < 65536 && (r.head.name += String.fromCharCode(Y));
                  } while (Y && V < N);if (512 & r.flags && 4 & r.wrap && (r.check = i(r.check, k, V, D)), N -= V, D += V, Y) break e;
                } else r.head && (r.head.name = null);r.length = 0, r.mode = 16187;case 16187:
                if (4096 & r.flags) {
                  if (0 === N) break e;V = 0;do {
                    Y = k[D + V++], r.head && Y && r.length < 65536 && (r.head.comment += String.fromCharCode(Y));
                  } while (Y && V < N);if (512 & r.flags && 4 & r.wrap && (r.check = i(r.check, k, V, D)), N -= V, D += V, Y) break e;
                } else r.head && (r.head.comment = null);r.mode = 16188;case 16188:
                if (512 & r.flags) {
                  for (; U < 16;) {
                    if (0 === N) break e;N--, L += k[D++] << U, U += 8;
                  }if (4 & r.wrap && L !== (65535 & r.check)) {
                    e.msg = "header crc mismatch", r.mode = R;break;
                  }L = 0, U = 0;
                }r.head && (r.head.hcrc = r.flags >> 9 & 1, r.head.done = !0), e.adler = r.check = 0, r.mode = y;break;case 16189:
                for (; U < 32;) {
                  if (0 === N) break e;N--, L += k[D++] << U, U += 8;
                }e.adler = r.check = P(L), L = 0, U = 0, r.mode = E;case E:
                if (0 === r.havedict) return e.next_out = O, e.avail_out = M, e.next_in = D, e.avail_in = N, r.hold = L, r.bits = U, h;e.adler = r.check = 1, r.mode = y;case y:
                if (t === c || t === d) break e;case T:
                if (r.last) {
                  L >>>= 7 & U, U -= 7 & U, r.mode = A;break;
                }for (; U < 3;) {
                  if (0 === N) break e;N--, L += k[D++] << U, U += 8;
                }switch (r.last = 1 & L, L >>>= 1, U -= 1, 3 & L) {case 0:
                    r.mode = 16193;break;case 1:
                    if (j(r), r.mode = b, t === d) {
                      L >>>= 2, U -= 2;break e;
                    }break;case 2:
                    r.mode = 16196;break;case 3:
                    e.msg = "invalid block type", r.mode = R;}L >>>= 2, U -= 2;break;case 16193:
                for (L >>>= 7 & U, U -= 7 & U; U < 32;) {
                  if (0 === N) break e;N--, L += k[D++] << U, U += 8;
                }if ((65535 & L) != (L >>> 16 ^ 65535)) {
                  e.msg = "invalid stored block lengths", r.mode = R;break;
                }if (r.length = 65535 & L, L = 0, U = 0, r.mode = C, t === d) break e;case C:
                r.mode = 16195;case 16195:
                if (V = r.length, V) {
                  if (V > N && (V = N), V > M && (V = M), 0 === V) break e;I.set(k.subarray(D, D + V), O), N -= V, D += V, M -= V, O += V, r.length -= V;break;
                }r.mode = y;break;case 16196:
                for (; U < 14;) {
                  if (0 === N) break e;N--, L += k[D++] << U, U += 8;
                }if (r.nlen = 257 + (31 & L), L >>>= 5, U -= 5, r.ndist = 1 + (31 & L), L >>>= 5, U -= 5, r.ncode = 4 + (15 & L), L >>>= 4, U -= 4, r.nlen > 286 || r.ndist > 30) {
                  e.msg = "too many length or distance symbols", r.mode = R;break;
                }r.have = 0, r.mode = 16197;case 16197:
                for (; r.have < r.ncode;) {
                  for (; U < 3;) {
                    if (0 === N) break e;N--, L += k[D++] << U, U += 8;
                  }r.lens[ne[r.have++]] = 7 & L, L >>>= 3, U -= 3;
                }for (; r.have < 19;) {
                  r.lens[ne[r.have++]] = 0;
                }if (r.lencode = r.lendyn, r.lenbits = 7, te = { bits: r.lenbits }, X = a(0, r.lens, 0, 19, r.lencode, 0, r.work, te), r.lenbits = te.bits, X) {
                  e.msg = "invalid code lengths set", r.mode = R;break;
                }r.have = 0, r.mode = 16198;case 16198:
                for (; r.have < r.nlen + r.ndist;) {
                  for (; Q = r.lencode[L & (1 << r.lenbits) - 1], Z = Q >>> 24, B = Q >>> 16 & 255, H = 65535 & Q, !(Z <= U);) {
                    if (0 === N) break e;N--, L += k[D++] << U, U += 8;
                  }if (H < 16) L >>>= Z, U -= Z, r.lens[r.have++] = H;else {
                    if (16 === H) {
                      for (re = Z + 2; U < re;) {
                        if (0 === N) break e;N--, L += k[D++] << U, U += 8;
                      }if (L >>>= Z, U -= Z, 0 === r.have) {
                        e.msg = "invalid bit length repeat", r.mode = R;break;
                      }Y = r.lens[r.have - 1], V = 3 + (3 & L), L >>>= 2, U -= 2;
                    } else if (17 === H) {
                      for (re = Z + 3; U < re;) {
                        if (0 === N) break e;N--, L += k[D++] << U, U += 8;
                      }L >>>= Z, U -= Z, Y = 0, V = 3 + (7 & L), L >>>= 3, U -= 3;
                    } else {
                      for (re = Z + 7; U < re;) {
                        if (0 === N) break e;N--, L += k[D++] << U, U += 8;
                      }L >>>= Z, U -= Z, Y = 0, V = 11 + (127 & L), L >>>= 7, U -= 7;
                    }if (r.have + V > r.nlen + r.ndist) {
                      e.msg = "invalid bit length repeat", r.mode = R;break;
                    }for (; V--;) {
                      r.lens[r.have++] = Y;
                    }
                  }
                }if (r.mode === R) break;if (0 === r.lens[256]) {
                  e.msg = "invalid code -- missing end-of-block", r.mode = R;break;
                }if (r.lenbits = 9, te = { bits: r.lenbits }, X = a(1, r.lens, 0, r.nlen, r.lencode, 0, r.work, te), r.lenbits = te.bits, X) {
                  e.msg = "invalid literal/lengths set", r.mode = R;break;
                }if (r.distbits = 6, r.distcode = r.distdyn, te = { bits: r.distbits }, X = a(2, r.lens, r.nlen, r.ndist, r.distcode, 0, r.work, te), r.distbits = te.bits, X) {
                  e.msg = "invalid distances set", r.mode = R;break;
                }if (r.mode = b, t === d) break e;case b:
                r.mode = w;case w:
                if (N >= 6 && M >= 258) {
                  e.next_out = O, e.avail_out = M, e.next_in = D, e.avail_in = N, r.hold = L, r.bits = U, s(e, F), O = e.next_out, I = e.output, M = e.avail_out, D = e.next_in, k = e.input, N = e.avail_in, L = r.hold, U = r.bits, r.mode === y && (r.back = -1);break;
                }for (r.back = 0; Q = r.lencode[L & (1 << r.lenbits) - 1], Z = Q >>> 24, B = Q >>> 16 & 255, H = 65535 & Q, !(Z <= U);) {
                  if (0 === N) break e;N--, L += k[D++] << U, U += 8;
                }if (B && 0 == (240 & B)) {
                  for (K = Z, J = B, $ = H; Q = r.lencode[$ + ((L & (1 << K + J) - 1) >> K)], Z = Q >>> 24, B = Q >>> 16 & 255, H = 65535 & Q, !(K + Z <= U);) {
                    if (0 === N) break e;N--, L += k[D++] << U, U += 8;
                  }L >>>= K, U -= K, r.back += K;
                }if (L >>>= Z, U -= Z, r.back += Z, r.length = H, 0 === B) {
                  r.mode = 16205;break;
                }if (32 & B) {
                  r.back = -1, r.mode = y;break;
                }if (64 & B) {
                  e.msg = "invalid literal/length code", r.mode = R;break;
                }r.extra = 15 & B, r.mode = 16201;case 16201:
                if (r.extra) {
                  for (re = r.extra; U < re;) {
                    if (0 === N) break e;N--, L += k[D++] << U, U += 8;
                  }r.length += L & (1 << r.extra) - 1, L >>>= r.extra, U -= r.extra, r.back += r.extra;
                }r.was = r.length, r.mode = 16202;case 16202:
                for (; Q = r.distcode[L & (1 << r.distbits) - 1], Z = Q >>> 24, B = Q >>> 16 & 255, H = 65535 & Q, !(Z <= U);) {
                  if (0 === N) break e;N--, L += k[D++] << U, U += 8;
                }if (0 == (240 & B)) {
                  for (K = Z, J = B, $ = H; Q = r.distcode[$ + ((L & (1 << K + J) - 1) >> K)], Z = Q >>> 24, B = Q >>> 16 & 255, H = 65535 & Q, !(K + Z <= U);) {
                    if (0 === N) break e;N--, L += k[D++] << U, U += 8;
                  }L >>>= K, U -= K, r.back += K;
                }if (L >>>= Z, U -= Z, r.back += Z, 64 & B) {
                  e.msg = "invalid distance code", r.mode = R;break;
                }r.offset = H, r.extra = 15 & B, r.mode = 16203;case 16203:
                if (r.extra) {
                  for (re = r.extra; U < re;) {
                    if (0 === N) break e;N--, L += k[D++] << U, U += 8;
                  }r.offset += L & (1 << r.extra) - 1, L >>>= r.extra, U -= r.extra, r.back += r.extra;
                }if (r.offset > r.dmax) {
                  e.msg = "invalid distance too far back", r.mode = R;break;
                }r.mode = 16204;case 16204:
                if (0 === M) break e;if (V = F - M, r.offset > V) {
                  if (V = r.offset - V, V > r.whave && r.sane) {
                    e.msg = "invalid distance too far back", r.mode = R;break;
                  }V > r.wnext ? (V -= r.wnext, W = r.wsize - V) : W = r.wnext - V, V > r.length && (V = r.length), q = r.window;
                } else q = I, W = O - r.offset, V = r.length;V > M && (V = M), M -= V, r.length -= V;do {
                  I[O++] = q[W++];
                } while (--V);0 === r.length && (r.mode = w);break;case 16205:
                if (0 === M) break e;I[O++] = r.length, M--, r.mode = w;break;case A:
                if (r.wrap) {
                  for (; U < 32;) {
                    if (0 === N) break e;N--, L |= k[D++] << U, U += 8;
                  }if (F -= M, e.total_out += F, r.total += F, 4 & r.wrap && F && (e.adler = r.check = r.flags ? i(r.check, I, F, O - F) : n(r.check, I, F, O - F)), F = M, 4 & r.wrap && (r.flags ? L : P(L)) !== r.check) {
                    e.msg = "incorrect data check", r.mode = R;break;
                  }L = 0, U = 0;
                }r.mode = 16207;case 16207:
                if (r.wrap && r.flags) {
                  for (; U < 32;) {
                    if (0 === N) break e;N--, L += k[D++] << U, U += 8;
                  }if (4 & r.wrap && L !== (4294967295 & r.total)) {
                    e.msg = "incorrect length check", r.mode = R;break;
                  }L = 0, U = 0;
                }r.mode = 16208;case 16208:
                X = p;break e;case R:
                X = f;break e;case S:
                return m;default:
                return u;}
          }return e.next_out = O, e.avail_out = M, e.next_in = D, e.avail_in = N, r.hold = L, r.bits = U, (r.wsize || F !== e.avail_out && r.mode < R && (r.mode < A || t !== o)) && z(e, e.output, e.next_out, F - e.avail_out) ? (r.mode = S, m) : (G -= e.avail_in, F -= e.avail_out, e.total_in += G, e.total_out += F, r.total += F, 4 & r.wrap && F && (e.adler = r.check = r.flags ? i(r.check, I, F, e.next_out - F) : n(r.check, I, F, e.next_out - F)), e.data_type = r.bits + (r.last ? 64 : 0) + (r.mode === y ? 128 : 0) + (r.mode === b || r.mode === C ? 256 : 0), (0 === G && 0 === F || t === o) && X === l && (X = _), X);
        }, e.exports.inflateEnd = function (e) {
          if (x(e)) return u;var t = e.state;return t.window && (t.window = null), e.state = null, l;
        }, e.exports.inflateGetHeader = function (e, t) {
          if (x(e)) return u;var r = e.state;return 0 == (2 & r.wrap) ? u : (r.head = t, t.done = !1, l);
        }, e.exports.inflateSetDictionary = function (e, t) {
          var r = t.length;var i = void 0,
              s = void 0,
              a = void 0;return x(e) ? u : (i = e.state, 0 !== i.wrap && i.mode !== E ? u : i.mode === E && (s = 1, s = n(s, t, r, 0), s !== i.check) ? f : (a = z(e, t, r, r), a ? (i.mode = S, m) : (i.havedict = 1, l)));
        }, e.exports.inflateInfo = "pako inflate (from Nodeca project)";
      }, 241: function _(e) {
        "use strict";
        var t = 15,
            r = new Uint16Array([3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0]),
            n = new Uint8Array([16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78]),
            i = new Uint16Array([1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577, 0, 0]),
            s = new Uint8Array([16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 64, 64]);e.exports = function (e, a, o, c, d, l, p, h) {
          var u = h.bits;var f = void 0,
              m = void 0,
              _ = void 0,
              g = void 0,
              v = void 0,
              E = void 0,
              y = 0,
              T = 0,
              C = 0,
              b = 0,
              w = 0,
              A = 0,
              R = 0,
              S = 0,
              P = 0,
              k = 0,
              x = null;var I = new Uint16Array(16),
              D = new Uint16Array(16);var O = void 0,
              N = void 0,
              M = void 0,
              L = null;for (y = 0; y <= t; y++) {
            I[y] = 0;
          }for (T = 0; T < c; T++) {
            I[a[o + T]]++;
          }for (w = u, b = t; b >= 1 && 0 === I[b]; b--) {}if (w > b && (w = b), 0 === b) return d[l++] = 20971520, d[l++] = 20971520, h.bits = 1, 0;for (C = 1; C < b && 0 === I[C]; C++) {}for (w < C && (w = C), S = 1, y = 1; y <= t; y++) {
            if (S <<= 1, S -= I[y], S < 0) return -1;
          }if (S > 0 && (0 === e || 1 !== b)) return -1;for (D[1] = 0, y = 1; y < t; y++) {
            D[y + 1] = D[y] + I[y];
          }for (T = 0; T < c; T++) {
            0 !== a[o + T] && (p[D[a[o + T]]++] = T);
          }if (0 === e ? (x = L = p, E = 20) : 1 === e ? (x = r, L = n, E = 257) : (x = i, L = s, E = 0), k = 0, T = 0, y = C, v = l, A = w, R = 0, _ = -1, P = 1 << w, g = P - 1, 1 === e && P > 852 || 2 === e && P > 592) return 1;for (;;) {
            O = y - R, p[T] + 1 < E ? (N = 0, M = p[T]) : p[T] >= E ? (N = L[p[T] - E], M = x[p[T] - E]) : (N = 96, M = 0), f = 1 << y - R, m = 1 << A, C = m;do {
              m -= f, d[v + (k >> R) + m] = O << 24 | N << 16 | M | 0;
            } while (0 !== m);for (f = 1 << y - 1; k & f;) {
              f >>= 1;
            }if (0 !== f ? (k &= f - 1, k += f) : k = 0, T++, 0 == --I[y]) {
              if (y === b) break;y = a[o + p[T]];
            }if (y > w && (k & g) !== _) {
              for (0 === R && (R = w), v += C, A = y - R, S = 1 << A; A + R < b && (S -= I[A + R], !(S <= 0));) {
                A++, S <<= 1;
              }if (P += 1 << A, 1 === e && P > 852 || 2 === e && P > 592) return 1;_ = k & g, d[_] = w << 24 | A << 16 | v - l | 0;
            }
          }return 0 !== k && (d[v + k] = y - R << 24 | 64 << 16 | 0), h.bits = w, 0;
        };
      }, 898: function _(e) {
        "use strict";
        e.exports = { 2: "need dictionary", 1: "stream end", 0: "", "-1": "file error", "-2": "stream error", "-3": "data error", "-4": "insufficient memory", "-5": "buffer error", "-6": "incompatible version" };
      }, 342: function _(e) {
        "use strict";
        function t(e) {
          var t = e.length;for (; --t >= 0;) {
            e[t] = 0;
          }
        }var r = 256,
            n = 286,
            i = 30,
            s = 15,
            a = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0]),
            o = new Uint8Array([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13]),
            c = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7]),
            d = new Uint8Array([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]),
            l = new Array(576);t(l);var p = new Array(60);t(p);var h = new Array(512);t(h);var u = new Array(256);t(u);var f = new Array(29);t(f);var m = new Array(i);function _(e, t, r, n, i) {
          this.static_tree = e, this.extra_bits = t, this.extra_base = r, this.elems = n, this.max_length = i, this.has_stree = e && e.length;
        }var g = void 0,
            v = void 0,
            E = void 0;function y(e, t) {
          this.dyn_tree = e, this.max_code = 0, this.stat_desc = t;
        }t(m);var T = function T(e) {
          return e < 256 ? h[e] : h[256 + (e >>> 7)];
        },
            C = function C(e, t) {
          e.pending_buf[e.pending++] = 255 & t, e.pending_buf[e.pending++] = t >>> 8 & 255;
        },
            b = function b(e, t, r) {
          e.bi_valid > 16 - r ? (e.bi_buf |= t << e.bi_valid & 65535, C(e, e.bi_buf), e.bi_buf = t >> 16 - e.bi_valid, e.bi_valid += r - 16) : (e.bi_buf |= t << e.bi_valid & 65535, e.bi_valid += r);
        },
            w = function w(e, t, r) {
          b(e, r[2 * t], r[2 * t + 1]);
        },
            A = function A(e, t) {
          var r = 0;do {
            r |= 1 & e, e >>>= 1, r <<= 1;
          } while (--t > 0);return r >>> 1;
        },
            R = function R(e, t, r) {
          var n = new Array(16);var i = void 0,
              a = void 0,
              o = 0;for (i = 1; i <= s; i++) {
            o = o + r[i - 1] << 1, n[i] = o;
          }for (a = 0; a <= t; a++) {
            var _t13 = e[2 * a + 1];0 !== _t13 && (e[2 * a] = A(n[_t13]++, _t13));
          }
        },
            S = function S(e) {
          var t = void 0;for (t = 0; t < n; t++) {
            e.dyn_ltree[2 * t] = 0;
          }for (t = 0; t < i; t++) {
            e.dyn_dtree[2 * t] = 0;
          }for (t = 0; t < 19; t++) {
            e.bl_tree[2 * t] = 0;
          }e.dyn_ltree[512] = 1, e.opt_len = e.static_len = 0, e.sym_next = e.matches = 0;
        },
            P = function P(e) {
          e.bi_valid > 8 ? C(e, e.bi_buf) : e.bi_valid > 0 && (e.pending_buf[e.pending++] = e.bi_buf), e.bi_buf = 0, e.bi_valid = 0;
        },
            k = function k(e, t, r, n) {
          var i = 2 * t,
              s = 2 * r;return e[i] < e[s] || e[i] === e[s] && n[t] <= n[r];
        },
            x = function x(e, t, r) {
          var n = e.heap[r];var i = r << 1;for (; i <= e.heap_len && (i < e.heap_len && k(t, e.heap[i + 1], e.heap[i], e.depth) && i++, !k(t, n, e.heap[i], e.depth));) {
            e.heap[r] = e.heap[i], r = i, i <<= 1;
          }e.heap[r] = n;
        },
            I = function I(e, t, n) {
          var i = void 0,
              s = void 0,
              c = void 0,
              d = void 0,
              l = 0;if (0 !== e.sym_next) do {
            i = 255 & e.pending_buf[e.sym_buf + l++], i += (255 & e.pending_buf[e.sym_buf + l++]) << 8, s = e.pending_buf[e.sym_buf + l++], 0 === i ? w(e, s, t) : (c = u[s], w(e, c + r + 1, t), d = a[c], 0 !== d && (s -= f[c], b(e, s, d)), i--, c = T(i), w(e, c, n), d = o[c], 0 !== d && (i -= m[c], b(e, i, d)));
          } while (l < e.sym_next);w(e, 256, t);
        },
            D = function D(e, t) {
          var r = t.dyn_tree,
              n = t.stat_desc.static_tree,
              i = t.stat_desc.has_stree,
              a = t.stat_desc.elems;var o = void 0,
              c = void 0,
              d = void 0,
              l = -1;for (e.heap_len = 0, e.heap_max = 573, o = 0; o < a; o++) {
            0 !== r[2 * o] ? (e.heap[++e.heap_len] = l = o, e.depth[o] = 0) : r[2 * o + 1] = 0;
          }for (; e.heap_len < 2;) {
            d = e.heap[++e.heap_len] = l < 2 ? ++l : 0, r[2 * d] = 1, e.depth[d] = 0, e.opt_len--, i && (e.static_len -= n[2 * d + 1]);
          }for (t.max_code = l, o = e.heap_len >> 1; o >= 1; o--) {
            x(e, r, o);
          }d = a;do {
            o = e.heap[1], e.heap[1] = e.heap[e.heap_len--], x(e, r, 1), c = e.heap[1], e.heap[--e.heap_max] = o, e.heap[--e.heap_max] = c, r[2 * d] = r[2 * o] + r[2 * c], e.depth[d] = (e.depth[o] >= e.depth[c] ? e.depth[o] : e.depth[c]) + 1, r[2 * o + 1] = r[2 * c + 1] = d, e.heap[1] = d++, x(e, r, 1);
          } while (e.heap_len >= 2);e.heap[--e.heap_max] = e.heap[1], function (e, t) {
            var r = t.dyn_tree,
                n = t.max_code,
                i = t.stat_desc.static_tree,
                a = t.stat_desc.has_stree,
                o = t.stat_desc.extra_bits,
                c = t.stat_desc.extra_base,
                d = t.stat_desc.max_length;var l = void 0,
                p = void 0,
                h = void 0,
                u = void 0,
                f = void 0,
                m = void 0,
                _ = 0;for (u = 0; u <= s; u++) {
              e.bl_count[u] = 0;
            }for (r[2 * e.heap[e.heap_max] + 1] = 0, l = e.heap_max + 1; l < 573; l++) {
              p = e.heap[l], u = r[2 * r[2 * p + 1] + 1] + 1, u > d && (u = d, _++), r[2 * p + 1] = u, p > n || (e.bl_count[u]++, f = 0, p >= c && (f = o[p - c]), m = r[2 * p], e.opt_len += m * (u + f), a && (e.static_len += m * (i[2 * p + 1] + f)));
            }if (0 !== _) {
              do {
                for (u = d - 1; 0 === e.bl_count[u];) {
                  u--;
                }e.bl_count[u]--, e.bl_count[u + 1] += 2, e.bl_count[d]--, _ -= 2;
              } while (_ > 0);for (u = d; 0 !== u; u--) {
                for (p = e.bl_count[u]; 0 !== p;) {
                  h = e.heap[--l], h > n || (r[2 * h + 1] !== u && (e.opt_len += (u - r[2 * h + 1]) * r[2 * h], r[2 * h + 1] = u), p--);
                }
              }
            }
          }(e, t), R(r, l, e.bl_count);
        },
            O = function O(e, t, r) {
          var n = void 0,
              i = void 0,
              s = -1,
              a = t[1],
              o = 0,
              c = 7,
              d = 4;for (0 === a && (c = 138, d = 3), t[2 * (r + 1) + 1] = 65535, n = 0; n <= r; n++) {
            i = a, a = t[2 * (n + 1) + 1], ++o < c && i === a || (o < d ? e.bl_tree[2 * i] += o : 0 !== i ? (i !== s && e.bl_tree[2 * i]++, e.bl_tree[32]++) : o <= 10 ? e.bl_tree[34]++ : e.bl_tree[36]++, o = 0, s = i, 0 === a ? (c = 138, d = 3) : i === a ? (c = 6, d = 3) : (c = 7, d = 4));
          }
        },
            N = function N(e, t, r) {
          var n = void 0,
              i = void 0,
              s = -1,
              a = t[1],
              o = 0,
              c = 7,
              d = 4;for (0 === a && (c = 138, d = 3), n = 0; n <= r; n++) {
            if (i = a, a = t[2 * (n + 1) + 1], !(++o < c && i === a)) {
              if (o < d) do {
                w(e, i, e.bl_tree);
              } while (0 != --o);else 0 !== i ? (i !== s && (w(e, i, e.bl_tree), o--), w(e, 16, e.bl_tree), b(e, o - 3, 2)) : o <= 10 ? (w(e, 17, e.bl_tree), b(e, o - 3, 3)) : (w(e, 18, e.bl_tree), b(e, o - 11, 7));o = 0, s = i, 0 === a ? (c = 138, d = 3) : i === a ? (c = 6, d = 3) : (c = 7, d = 4);
            }
          }
        };var M = !1;var L = function L(e, t, r, n) {
          b(e, 0 + (n ? 1 : 0), 3), P(e), C(e, r), C(e, ~r), r && e.pending_buf.set(e.window.subarray(t, t + r), e.pending), e.pending += r;
        };e.exports._tr_init = function (e) {
          M || (function () {
            var e = void 0,
                t = void 0,
                r = void 0,
                d = void 0,
                y = void 0;var T = new Array(16);for (r = 0, d = 0; d < 28; d++) {
              for (f[d] = r, e = 0; e < 1 << a[d]; e++) {
                u[r++] = d;
              }
            }for (u[r - 1] = d, y = 0, d = 0; d < 16; d++) {
              for (m[d] = y, e = 0; e < 1 << o[d]; e++) {
                h[y++] = d;
              }
            }for (y >>= 7; d < i; d++) {
              for (m[d] = y << 7, e = 0; e < 1 << o[d] - 7; e++) {
                h[256 + y++] = d;
              }
            }for (t = 0; t <= s; t++) {
              T[t] = 0;
            }for (e = 0; e <= 143;) {
              l[2 * e + 1] = 8, e++, T[8]++;
            }for (; e <= 255;) {
              l[2 * e + 1] = 9, e++, T[9]++;
            }for (; e <= 279;) {
              l[2 * e + 1] = 7, e++, T[7]++;
            }for (; e <= 287;) {
              l[2 * e + 1] = 8, e++, T[8]++;
            }for (R(l, 287, T), e = 0; e < i; e++) {
              p[2 * e + 1] = 5, p[2 * e] = A(e, 5);
            }g = new _(l, a, 257, n, s), v = new _(p, o, 0, i, s), E = new _(new Array(0), c, 0, 19, 7);
          }(), M = !0), e.l_desc = new y(e.dyn_ltree, g), e.d_desc = new y(e.dyn_dtree, v), e.bl_desc = new y(e.bl_tree, E), e.bi_buf = 0, e.bi_valid = 0, S(e);
        }, e.exports._tr_stored_block = L, e.exports._tr_flush_block = function (e, t, n, i) {
          var s = void 0,
              a = void 0,
              o = 0;e.level > 0 ? (2 === e.strm.data_type && (e.strm.data_type = function (e) {
            var t = void 0,
                n = 4093624447;for (t = 0; t <= 31; t++, n >>>= 1) {
              if (1 & n && 0 !== e.dyn_ltree[2 * t]) return 0;
            }if (0 !== e.dyn_ltree[18] || 0 !== e.dyn_ltree[20] || 0 !== e.dyn_ltree[26]) return 1;for (t = 32; t < r; t++) {
              if (0 !== e.dyn_ltree[2 * t]) return 1;
            }return 0;
          }(e)), D(e, e.l_desc), D(e, e.d_desc), o = function (e) {
            var t = void 0;for (O(e, e.dyn_ltree, e.l_desc.max_code), O(e, e.dyn_dtree, e.d_desc.max_code), D(e, e.bl_desc), t = 18; t >= 3 && 0 === e.bl_tree[2 * d[t] + 1]; t--) {}return e.opt_len += 3 * (t + 1) + 5 + 5 + 4, t;
          }(e), s = e.opt_len + 3 + 7 >>> 3, a = e.static_len + 3 + 7 >>> 3, a <= s && (s = a)) : s = a = n + 5, n + 4 <= s && -1 !== t ? L(e, t, n, i) : 4 === e.strategy || a === s ? (b(e, 2 + (i ? 1 : 0), 3), I(e, l, p)) : (b(e, 4 + (i ? 1 : 0), 3), function (e, t, r, n) {
            var i = void 0;for (b(e, t - 257, 5), b(e, r - 1, 5), b(e, n - 4, 4), i = 0; i < n; i++) {
              b(e, e.bl_tree[2 * d[i] + 1], 3);
            }N(e, e.dyn_ltree, t - 1), N(e, e.dyn_dtree, r - 1);
          }(e, e.l_desc.max_code + 1, e.d_desc.max_code + 1, o + 1), I(e, e.dyn_ltree, e.dyn_dtree)), S(e), i && P(e);
        }, e.exports._tr_tally = function (e, t, n) {
          return e.pending_buf[e.sym_buf + e.sym_next++] = t, e.pending_buf[e.sym_buf + e.sym_next++] = t >> 8, e.pending_buf[e.sym_buf + e.sym_next++] = n, 0 === t ? e.dyn_ltree[2 * n]++ : (e.matches++, t--, e.dyn_ltree[2 * (u[n] + r + 1)]++, e.dyn_dtree[2 * T(t)]++), e.sym_next === e.sym_end;
        }, e.exports._tr_align = function (e) {
          b(e, 2, 3), w(e, 256, l), function (e) {
            16 === e.bi_valid ? (C(e, e.bi_buf), e.bi_buf = 0, e.bi_valid = 0) : e.bi_valid >= 8 && (e.pending_buf[e.pending++] = 255 & e.bi_buf, e.bi_buf >>= 8, e.bi_valid -= 8);
          }(e);
        };
      }, 292: function _(e) {
        "use strict";
        e.exports = function () {
          this.input = null, this.next_in = 0, this.avail_in = 0, this.total_in = 0, this.output = null, this.next_out = 0, this.avail_out = 0, this.total_out = 0, this.msg = "", this.state = null, this.data_type = 2, this.adler = 0;
        };
      }, 539: function _(e) {
        "use strict";
        var t = { generateIdentifier: function generateIdentifier() {
            return Math.random().toString(36).substring(2, 12);
          } };t.localCName = t.generateIdentifier(), t.splitLines = function (e) {
          return e.trim().split("\n").map(function (e) {
            return e.trim();
          });
        }, t.splitSections = function (e) {
          return e.split("\nm=").map(function (e, t) {
            return (t > 0 ? "m=" + e : e).trim() + "\r\n";
          });
        }, t.getDescription = function (e) {
          var r = t.splitSections(e);return r && r[0];
        }, t.getMediaSections = function (e) {
          var r = t.splitSections(e);return r.shift(), r;
        }, t.matchPrefix = function (e, r) {
          return t.splitLines(e).filter(function (e) {
            return 0 === e.indexOf(r);
          });
        }, t.parseCandidate = function (e) {
          var t = void 0;t = 0 === e.indexOf("a=candidate:") ? e.substring(12).split(" ") : e.substring(10).split(" ");var r = { foundation: t[0], component: { 1: "rtp", 2: "rtcp" }[t[1]] || t[1], protocol: t[2].toLowerCase(), priority: parseInt(t[3], 10), ip: t[4], address: t[4], port: parseInt(t[5], 10), type: t[7] };for (var _e6 = 8; _e6 < t.length; _e6 += 2) {
            switch (t[_e6]) {case "raddr":
                r.relatedAddress = t[_e6 + 1];break;case "rport":
                r.relatedPort = parseInt(t[_e6 + 1], 10);break;case "tcptype":
                r.tcpType = t[_e6 + 1];break;case "ufrag":
                r.ufrag = t[_e6 + 1], r.usernameFragment = t[_e6 + 1];break;default:
                void 0 === r[t[_e6]] && (r[t[_e6]] = t[_e6 + 1]);}
          }return r;
        }, t.writeCandidate = function (e) {
          var t = [];t.push(e.foundation);var r = e.component;"rtp" === r ? t.push(1) : "rtcp" === r ? t.push(2) : t.push(r), t.push(e.protocol.toUpperCase()), t.push(e.priority), t.push(e.address || e.ip), t.push(e.port);var n = e.type;return t.push("typ"), t.push(n), "host" !== n && e.relatedAddress && e.relatedPort && (t.push("raddr"), t.push(e.relatedAddress), t.push("rport"), t.push(e.relatedPort)), e.tcpType && "tcp" === e.protocol.toLowerCase() && (t.push("tcptype"), t.push(e.tcpType)), (e.usernameFragment || e.ufrag) && (t.push("ufrag"), t.push(e.usernameFragment || e.ufrag)), "candidate:" + t.join(" ");
        }, t.parseIceOptions = function (e) {
          return e.substring(14).split(" ");
        }, t.parseRtpMap = function (e) {
          var t = e.substring(9).split(" ");var r = { payloadType: parseInt(t.shift(), 10) };return t = t[0].split("/"), r.name = t[0], r.clockRate = parseInt(t[1], 10), r.channels = 3 === t.length ? parseInt(t[2], 10) : 1, r.numChannels = r.channels, r;
        }, t.writeRtpMap = function (e) {
          var t = e.payloadType;void 0 !== e.preferredPayloadType && (t = e.preferredPayloadType);var r = e.channels || e.numChannels || 1;return "a=rtpmap:" + t + " " + e.name + "/" + e.clockRate + (1 !== r ? "/" + r : "") + "\r\n";
        }, t.parseExtmap = function (e) {
          var t = e.substring(9).split(" ");return { id: parseInt(t[0], 10), direction: t[0].indexOf("/") > 0 ? t[0].split("/")[1] : "sendrecv", uri: t[1], attributes: t.slice(2).join(" ") };
        }, t.writeExtmap = function (e) {
          return "a=extmap:" + (e.id || e.preferredId) + (e.direction && "sendrecv" !== e.direction ? "/" + e.direction : "") + " " + e.uri + (e.attributes ? " " + e.attributes : "") + "\r\n";
        }, t.parseFmtp = function (e) {
          var t = {};var r = void 0;var n = e.substring(e.indexOf(" ") + 1).split(";");for (var _e7 = 0; _e7 < n.length; _e7++) {
            r = n[_e7].trim().split("="), t[r[0].trim()] = r[1];
          }return t;
        }, t.writeFmtp = function (e) {
          var t = "",
              r = e.payloadType;if (void 0 !== e.preferredPayloadType && (r = e.preferredPayloadType), e.parameters && Object.keys(e.parameters).length) {
            var _n11 = [];Object.keys(e.parameters).forEach(function (t) {
              void 0 !== e.parameters[t] ? _n11.push(t + "=" + e.parameters[t]) : _n11.push(t);
            }), t += "a=fmtp:" + r + " " + _n11.join(";") + "\r\n";
          }return t;
        }, t.parseRtcpFb = function (e) {
          var t = e.substring(e.indexOf(" ") + 1).split(" ");return { type: t.shift(), parameter: t.join(" ") };
        }, t.writeRtcpFb = function (e) {
          var t = "",
              r = e.payloadType;return void 0 !== e.preferredPayloadType && (r = e.preferredPayloadType), e.rtcpFeedback && e.rtcpFeedback.length && e.rtcpFeedback.forEach(function (e) {
            t += "a=rtcp-fb:" + r + " " + e.type + (e.parameter && e.parameter.length ? " " + e.parameter : "") + "\r\n";
          }), t;
        }, t.parseSsrcMedia = function (e) {
          var t = e.indexOf(" "),
              r = { ssrc: parseInt(e.substring(7, t), 10) },
              n = e.indexOf(":", t);return n > -1 ? (r.attribute = e.substring(t + 1, n), r.value = e.substring(n + 1)) : r.attribute = e.substring(t + 1), r;
        }, t.parseSsrcGroup = function (e) {
          var t = e.substring(13).split(" ");return { semantics: t.shift(), ssrcs: t.map(function (e) {
              return parseInt(e, 10);
            }) };
        }, t.getMid = function (e) {
          var r = t.matchPrefix(e, "a=mid:")[0];if (r) return r.substring(6);
        }, t.parseFingerprint = function (e) {
          var t = e.substring(14).split(" ");return { algorithm: t[0].toLowerCase(), value: t[1].toUpperCase() };
        }, t.getDtlsParameters = function (e, r) {
          return { role: "auto", fingerprints: t.matchPrefix(e + r, "a=fingerprint:").map(t.parseFingerprint) };
        }, t.writeDtlsParameters = function (e, t) {
          var r = "a=setup:" + t + "\r\n";return e.fingerprints.forEach(function (e) {
            r += "a=fingerprint:" + e.algorithm + " " + e.value + "\r\n";
          }), r;
        }, t.parseCryptoLine = function (e) {
          var t = e.substring(9).split(" ");return { tag: parseInt(t[0], 10), cryptoSuite: t[1], keyParams: t[2], sessionParams: t.slice(3) };
        }, t.writeCryptoLine = function (e) {
          return "a=crypto:" + e.tag + " " + e.cryptoSuite + " " + ("object" == (0, _typeof3.default)(e.keyParams) ? t.writeCryptoKeyParams(e.keyParams) : e.keyParams) + (e.sessionParams ? " " + e.sessionParams.join(" ") : "") + "\r\n";
        }, t.parseCryptoKeyParams = function (e) {
          if (0 !== e.indexOf("inline:")) return null;var t = e.substring(7).split("|");return { keyMethod: "inline", keySalt: t[0], lifeTime: t[1], mkiValue: t[2] ? t[2].split(":")[0] : void 0, mkiLength: t[2] ? t[2].split(":")[1] : void 0 };
        }, t.writeCryptoKeyParams = function (e) {
          return e.keyMethod + ":" + e.keySalt + (e.lifeTime ? "|" + e.lifeTime : "") + (e.mkiValue && e.mkiLength ? "|" + e.mkiValue + ":" + e.mkiLength : "");
        }, t.getCryptoParameters = function (e, r) {
          return t.matchPrefix(e + r, "a=crypto:").map(t.parseCryptoLine);
        }, t.getIceParameters = function (e, r) {
          var n = t.matchPrefix(e + r, "a=ice-ufrag:")[0],
              i = t.matchPrefix(e + r, "a=ice-pwd:")[0];return n && i ? { usernameFragment: n.substring(12), password: i.substring(10) } : null;
        }, t.writeIceParameters = function (e) {
          var t = "a=ice-ufrag:" + e.usernameFragment + "\r\na=ice-pwd:" + e.password + "\r\n";return e.iceLite && (t += "a=ice-lite\r\n"), t;
        }, t.parseRtpParameters = function (e) {
          var r = { codecs: [], headerExtensions: [], fecMechanisms: [], rtcp: [] },
              n = t.splitLines(e)[0].split(" ");r.profile = n[2];for (var _i3 = 3; _i3 < n.length; _i3++) {
            var s = n[_i3],
                a = t.matchPrefix(e, "a=rtpmap:" + s + " ")[0];if (a) {
              var _n12 = t.parseRtpMap(a),
                  _i4 = t.matchPrefix(e, "a=fmtp:" + s + " ");switch (_n12.parameters = _i4.length ? t.parseFmtp(_i4[0]) : {}, _n12.rtcpFeedback = t.matchPrefix(e, "a=rtcp-fb:" + s + " ").map(t.parseRtcpFb), r.codecs.push(_n12), _n12.name.toUpperCase()) {case "RED":case "ULPFEC":
                  r.fecMechanisms.push(_n12.name.toUpperCase());}
            }
          }t.matchPrefix(e, "a=extmap:").forEach(function (e) {
            r.headerExtensions.push(t.parseExtmap(e));
          });var i = t.matchPrefix(e, "a=rtcp-fb:* ").map(t.parseRtcpFb);return r.codecs.forEach(function (e) {
            i.forEach(function (t) {
              e.rtcpFeedback.find(function (e) {
                return e.type === t.type && e.parameter === t.parameter;
              }) || e.rtcpFeedback.push(t);
            });
          }), r;
        }, t.writeRtpDescription = function (e, r) {
          var n = "";n += "m=" + e + " ", n += r.codecs.length > 0 ? "9" : "0", n += " " + (r.profile || "UDP/TLS/RTP/SAVPF") + " ", n += r.codecs.map(function (e) {
            return void 0 !== e.preferredPayloadType ? e.preferredPayloadType : e.payloadType;
          }).join(" ") + "\r\n", n += "c=IN IP4 0.0.0.0\r\n", n += "a=rtcp:9 IN IP4 0.0.0.0\r\n", r.codecs.forEach(function (e) {
            n += t.writeRtpMap(e), n += t.writeFmtp(e), n += t.writeRtcpFb(e);
          });var i = 0;return r.codecs.forEach(function (e) {
            e.maxptime > i && (i = e.maxptime);
          }), i > 0 && (n += "a=maxptime:" + i + "\r\n"), r.headerExtensions && r.headerExtensions.forEach(function (e) {
            n += t.writeExtmap(e);
          }), n;
        }, t.parseRtpEncodingParameters = function (e) {
          var r = [],
              n = t.parseRtpParameters(e),
              i = -1 !== n.fecMechanisms.indexOf("RED"),
              s = -1 !== n.fecMechanisms.indexOf("ULPFEC"),
              a = t.matchPrefix(e, "a=ssrc:").map(function (e) {
            return t.parseSsrcMedia(e);
          }).filter(function (e) {
            return "cname" === e.attribute;
          }),
              o = a.length > 0 && a[0].ssrc;var c = void 0;var d = t.matchPrefix(e, "a=ssrc-group:FID").map(function (e) {
            return e.substring(17).split(" ").map(function (e) {
              return parseInt(e, 10);
            });
          });d.length > 0 && d[0].length > 1 && d[0][0] === o && (c = d[0][1]), n.codecs.forEach(function (e) {
            if ("RTX" === e.name.toUpperCase() && e.parameters.apt) {
              var _t14 = { ssrc: o, codecPayloadType: parseInt(e.parameters.apt, 10) };o && c && (_t14.rtx = { ssrc: c }), r.push(_t14), i && (_t14 = JSON.parse(JSON.stringify(_t14)), _t14.fec = { ssrc: o, mechanism: s ? "red+ulpfec" : "red" }, r.push(_t14));
            }
          }), 0 === r.length && o && r.push({ ssrc: o });var l = t.matchPrefix(e, "b=");return l.length && (l = 0 === l[0].indexOf("b=TIAS:") ? parseInt(l[0].substring(7), 10) : 0 === l[0].indexOf("b=AS:") ? 1e3 * parseInt(l[0].substring(5), 10) * .95 - 16e3 : void 0, r.forEach(function (e) {
            e.maxBitrate = l;
          })), r;
        }, t.parseRtcpParameters = function (e) {
          var r = {},
              n = t.matchPrefix(e, "a=ssrc:").map(function (e) {
            return t.parseSsrcMedia(e);
          }).filter(function (e) {
            return "cname" === e.attribute;
          })[0];n && (r.cname = n.value, r.ssrc = n.ssrc);var i = t.matchPrefix(e, "a=rtcp-rsize");r.reducedSize = i.length > 0, r.compound = 0 === i.length;var s = t.matchPrefix(e, "a=rtcp-mux");return r.mux = s.length > 0, r;
        }, t.writeRtcpParameters = function (e) {
          var t = "";return e.reducedSize && (t += "a=rtcp-rsize\r\n"), e.mux && (t += "a=rtcp-mux\r\n"), void 0 !== e.ssrc && e.cname && (t += "a=ssrc:" + e.ssrc + " cname:" + e.cname + "\r\n"), t;
        }, t.parseMsid = function (e) {
          var r = void 0;var n = t.matchPrefix(e, "a=msid:");if (1 === n.length) return r = n[0].substring(7).split(" "), { stream: r[0], track: r[1] };var i = t.matchPrefix(e, "a=ssrc:").map(function (e) {
            return t.parseSsrcMedia(e);
          }).filter(function (e) {
            return "msid" === e.attribute;
          });return i.length > 0 ? (r = i[0].value.split(" "), { stream: r[0], track: r[1] }) : void 0;
        }, t.parseSctpDescription = function (e) {
          var r = t.parseMLine(e),
              n = t.matchPrefix(e, "a=max-message-size:");var i = void 0;n.length > 0 && (i = parseInt(n[0].substring(19), 10)), isNaN(i) && (i = 65536);var s = t.matchPrefix(e, "a=sctp-port:");if (s.length > 0) return { port: parseInt(s[0].substring(12), 10), protocol: r.fmt, maxMessageSize: i };var a = t.matchPrefix(e, "a=sctpmap:");if (a.length > 0) {
            var _e8 = a[0].substring(10).split(" ");return { port: parseInt(_e8[0], 10), protocol: _e8[1], maxMessageSize: i };
          }
        }, t.writeSctpDescription = function (e, t) {
          var r = [];return r = "DTLS/SCTP" !== e.protocol ? ["m=" + e.kind + " 9 " + e.protocol + " " + t.protocol + "\r\n", "c=IN IP4 0.0.0.0\r\n", "a=sctp-port:" + t.port + "\r\n"] : ["m=" + e.kind + " 9 " + e.protocol + " " + t.port + "\r\n", "c=IN IP4 0.0.0.0\r\n", "a=sctpmap:" + t.port + " " + t.protocol + " 65535\r\n"], void 0 !== t.maxMessageSize && r.push("a=max-message-size:" + t.maxMessageSize + "\r\n"), r.join("");
        }, t.generateSessionId = function () {
          return Math.random().toString().substr(2, 22);
        }, t.writeSessionBoilerplate = function (e, r, n) {
          var i = void 0;var s = void 0 !== r ? r : 2;i = e || t.generateSessionId();return "v=0\r\no=" + (n || "thisisadapterortc") + " " + i + " " + s + " IN IP4 127.0.0.1\r\ns=-\r\nt=0 0\r\n";
        }, t.getDirection = function (e, r) {
          var n = t.splitLines(e);for (var _e9 = 0; _e9 < n.length; _e9++) {
            switch (n[_e9]) {case "a=sendrecv":case "a=sendonly":case "a=recvonly":case "a=inactive":
                return n[_e9].substring(2);}
          }return r ? t.getDirection(r) : "sendrecv";
        }, t.getKind = function (e) {
          return t.splitLines(e)[0].split(" ")[0].substring(2);
        }, t.isRejected = function (e) {
          return "0" === e.split(" ", 2)[1];
        }, t.parseMLine = function (e) {
          var r = t.splitLines(e)[0].substring(2).split(" ");return { kind: r[0], port: parseInt(r[1], 10), protocol: r[2], fmt: r.slice(3).join(" ") };
        }, t.parseOLine = function (e) {
          var r = t.matchPrefix(e, "o=")[0].substring(2).split(" ");return { username: r[0], sessionId: r[1], sessionVersion: parseInt(r[2], 10), netType: r[3], addressType: r[4], address: r[5] };
        }, t.isValidSDP = function (e) {
          if ("string" != typeof e || 0 === e.length) return !1;var r = t.splitLines(e);for (var _e10 = 0; _e10 < r.length; _e10++) {
            if (r[_e10].length < 2 || "=" !== r[_e10].charAt(1)) return !1;
          }return !0;
        }, e.exports = t;
      }, 86: function _(e, t, r) {
        "use strict";
        t.Z = void 0;var n = (0, r(338).adapterFactory)({ window: "undefined" == typeof window ? void 0 : window });t.Z = n;
      }, 338: function _(e, t, r) {
        "use strict";
        function n(e) {
          return n = "function" == typeof Symbol && "symbol" == (0, _typeof3.default)(Symbol.iterator) ? function (e) {
            return typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e);
          } : function (e) {
            return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e);
          }, n(e);
        }Object.defineProperty(t, "__esModule", { value: !0 }), t.adapterFactory = function () {
          var e = (arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}).window,
              t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : { shimChrome: !0, shimFirefox: !0, shimSafari: !0 },
              r = i.log,
              n = i.detectBrowser(e),
              l = { browserDetails: n, commonShim: c, extractVersion: i.extractVersion, disableLog: i.disableLog, disableWarnings: i.disableWarnings, sdp: d };switch (n.browser) {case "chrome":
              if (!s || !s.shimPeerConnection || !t.shimChrome) return r("Chrome shim is not included in this adapter release."), l;if (null === n.version) return r("Chrome shim can not determine version, not shimming."), l;r("adapter.js shimming chrome."), l.browserShim = s, c.shimAddIceCandidateNullOrEmpty(e, n), c.shimParameterlessSetLocalDescription(e, n), s.shimGetUserMedia(e, n), s.shimMediaStream(e, n), s.shimPeerConnection(e, n), s.shimOnTrack(e, n), s.shimAddTrackRemoveTrack(e, n), s.shimGetSendersWithDtmf(e, n), s.shimGetStats(e, n), s.shimSenderReceiverGetStats(e, n), s.fixNegotiationNeeded(e, n), c.shimRTCIceCandidate(e, n), c.shimRTCIceCandidateRelayProtocol(e, n), c.shimConnectionState(e, n), c.shimMaxMessageSize(e, n), c.shimSendThrowTypeError(e, n), c.removeExtmapAllowMixed(e, n);break;case "firefox":
              if (!a || !a.shimPeerConnection || !t.shimFirefox) return r("Firefox shim is not included in this adapter release."), l;r("adapter.js shimming firefox."), l.browserShim = a, c.shimAddIceCandidateNullOrEmpty(e, n), c.shimParameterlessSetLocalDescription(e, n), a.shimGetUserMedia(e, n), a.shimPeerConnection(e, n), a.shimOnTrack(e, n), a.shimRemoveStream(e, n), a.shimSenderGetStats(e, n), a.shimReceiverGetStats(e, n), a.shimRTCDataChannel(e, n), a.shimAddTransceiver(e, n), a.shimGetParameters(e, n), a.shimCreateOffer(e, n), a.shimCreateAnswer(e, n), c.shimRTCIceCandidate(e, n), c.shimConnectionState(e, n), c.shimMaxMessageSize(e, n), c.shimSendThrowTypeError(e, n);break;case "safari":
              if (!o || !t.shimSafari) return r("Safari shim is not included in this adapter release."), l;r("adapter.js shimming safari."), l.browserShim = o, c.shimAddIceCandidateNullOrEmpty(e, n), c.shimParameterlessSetLocalDescription(e, n), o.shimRTCIceServerUrls(e, n), o.shimCreateOfferLegacy(e, n), o.shimCallbacksAPI(e, n), o.shimLocalStreamsAPI(e, n), o.shimRemoteStreamsAPI(e, n), o.shimTrackEventTransceiver(e, n), o.shimGetUserMedia(e, n), o.shimAudioContext(e, n), c.shimRTCIceCandidate(e, n), c.shimRTCIceCandidateRelayProtocol(e, n), c.shimMaxMessageSize(e, n), c.shimSendThrowTypeError(e, n), c.removeExtmapAllowMixed(e, n);break;default:
              r("Unsupported browser!");}return l;
        };var i = p(r(288)),
            s = p(r(30)),
            a = p(r(311)),
            o = p(r(540)),
            c = p(r(401)),
            d = p(r(539));function l(e) {
          if ("function" != typeof WeakMap) return null;var t = new WeakMap(),
              r = new WeakMap();return (l = function l(e) {
            return e ? r : t;
          })(e);
        }function p(e, t) {
          if (!t && e && e.__esModule) return e;if (null === e || "object" !== n(e) && "function" != typeof e) return { default: e };var r = l(t);if (r && r.has(e)) return r.get(e);var i = {},
              s = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var a in e) {
            if ("default" !== a && Object.prototype.hasOwnProperty.call(e, a)) {
              var o = s ? Object.getOwnPropertyDescriptor(e, a) : null;o && (o.get || o.set) ? Object.defineProperty(i, a, o) : i[a] = e[a];
            }
          }return i.default = e, r && r.set(e, i), i;
        }
      }, 30: function _(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }), t.fixNegotiationNeeded = function (e, t) {
          n.wrapPeerConnectionEvent(e, "negotiationneeded", function (e) {
            var r = e.target;if (!(t.version < 72 || r.getConfiguration && "plan-b" === r.getConfiguration().sdpSemantics) || "stable" === r.signalingState) return e;
          });
        }, t.shimAddTrackRemoveTrack = function (e, t) {
          if (!e.RTCPeerConnection) return;if (e.RTCPeerConnection.prototype.addTrack && t.version >= 65) return d(e);var r = e.RTCPeerConnection.prototype.getLocalStreams;e.RTCPeerConnection.prototype.getLocalStreams = function () {
            var e = this,
                t = r.apply(this);return this._reverseStreams = this._reverseStreams || {}, t.map(function (t) {
              return e._reverseStreams[t.id];
            });
          };var n = e.RTCPeerConnection.prototype.addStream;e.RTCPeerConnection.prototype.addStream = function (t) {
            var r = this;if (this._streams = this._streams || {}, this._reverseStreams = this._reverseStreams || {}, t.getTracks().forEach(function (e) {
              if (r.getSenders().find(function (t) {
                return t.track === e;
              })) throw new DOMException("Track already exists.", "InvalidAccessError");
            }), !this._reverseStreams[t.id]) {
              var i = new e.MediaStream(t.getTracks());this._streams[t.id] = i, this._reverseStreams[i.id] = t, t = i;
            }n.apply(this, [t]);
          };var i = e.RTCPeerConnection.prototype.removeStream;function s(e, t) {
            var r = t.sdp;return Object.keys(e._reverseStreams || []).forEach(function (t) {
              var n = e._reverseStreams[t],
                  i = e._streams[n.id];r = r.replace(new RegExp(i.id, "g"), n.id);
            }), new RTCSessionDescription({ type: t.type, sdp: r });
          }e.RTCPeerConnection.prototype.removeStream = function (e) {
            this._streams = this._streams || {}, this._reverseStreams = this._reverseStreams || {}, i.apply(this, [this._streams[e.id] || e]), delete this._reverseStreams[this._streams[e.id] ? this._streams[e.id].id : e.id], delete this._streams[e.id];
          }, e.RTCPeerConnection.prototype.addTrack = function (t, r) {
            var n = this;if ("closed" === this.signalingState) throw new DOMException("The RTCPeerConnection's signalingState is 'closed'.", "InvalidStateError");var i = [].slice.call(arguments, 1);if (1 !== i.length || !i[0].getTracks().find(function (e) {
              return e === t;
            })) throw new DOMException("The adapter.js addTrack polyfill only supports a single  stream which is associated with the specified track.", "NotSupportedError");if (this.getSenders().find(function (e) {
              return e.track === t;
            })) throw new DOMException("Track already exists.", "InvalidAccessError");this._streams = this._streams || {}, this._reverseStreams = this._reverseStreams || {};var s = this._streams[r.id];if (s) s.addTrack(t), Promise.resolve().then(function () {
              n.dispatchEvent(new Event("negotiationneeded"));
            });else {
              var a = new e.MediaStream([t]);this._streams[r.id] = a, this._reverseStreams[a.id] = r, this.addStream(a);
            }return this.getSenders().find(function (e) {
              return e.track === t;
            });
          }, ["createOffer", "createAnswer"].forEach(function (t) {
            var r = e.RTCPeerConnection.prototype[t],
                n = o({}, t, function () {
              var e = this,
                  t = arguments;return arguments.length && "function" == typeof arguments[0] ? r.apply(this, [function (r) {
                var n = s(e, r);t[0].apply(null, [n]);
              }, function (e) {
                t[1] && t[1].apply(null, e);
              }, arguments[2]]) : r.apply(this, arguments).then(function (t) {
                return s(e, t);
              });
            });e.RTCPeerConnection.prototype[t] = n[t];
          });var a = e.RTCPeerConnection.prototype.setLocalDescription;e.RTCPeerConnection.prototype.setLocalDescription = function () {
            return arguments.length && arguments[0].type ? (arguments[0] = (e = this, r = (t = arguments[0]).sdp, Object.keys(e._reverseStreams || []).forEach(function (t) {
              var n = e._reverseStreams[t],
                  i = e._streams[n.id];r = r.replace(new RegExp(n.id, "g"), i.id);
            }), new RTCSessionDescription({ type: t.type, sdp: r })), a.apply(this, arguments)) : a.apply(this, arguments);var e, t, r;
          };var c = Object.getOwnPropertyDescriptor(e.RTCPeerConnection.prototype, "localDescription");Object.defineProperty(e.RTCPeerConnection.prototype, "localDescription", { get: function get() {
              var e = c.get.apply(this);return "" === e.type ? e : s(this, e);
            } }), e.RTCPeerConnection.prototype.removeTrack = function (e) {
            var t,
                r = this;if ("closed" === this.signalingState) throw new DOMException("The RTCPeerConnection's signalingState is 'closed'.", "InvalidStateError");if (!e._pc) throw new DOMException("Argument 1 of RTCPeerConnection.removeTrack does not implement interface RTCRtpSender.", "TypeError");if (!(e._pc === this)) throw new DOMException("Sender was not created by this connection.", "InvalidAccessError");this._streams = this._streams || {}, Object.keys(this._streams).forEach(function (n) {
              r._streams[n].getTracks().find(function (t) {
                return e.track === t;
              }) && (t = r._streams[n]);
            }), t && (1 === t.getTracks().length ? this.removeStream(this._reverseStreams[t.id]) : t.removeTrack(e.track), this.dispatchEvent(new Event("negotiationneeded")));
          };
        }, t.shimAddTrackRemoveTrackWithNative = d, Object.defineProperty(t, "shimGetDisplayMedia", { enumerable: !0, get: function get() {
            return s.shimGetDisplayMedia;
          } }), t.shimGetSendersWithDtmf = function (e) {
          if ("object" === c(e) && e.RTCPeerConnection && !("getSenders" in e.RTCPeerConnection.prototype) && "createDTMFSender" in e.RTCPeerConnection.prototype) {
            var t = function t(e, _t15) {
              return { track: _t15, get dtmf() {
                  return void 0 === this._dtmf && ("audio" === _t15.kind ? this._dtmf = e.createDTMFSender(_t15) : this._dtmf = null), this._dtmf;
                }, _pc: e };
            };if (!e.RTCPeerConnection.prototype.getSenders) {
              e.RTCPeerConnection.prototype.getSenders = function () {
                return this._senders = this._senders || [], this._senders.slice();
              };var r = e.RTCPeerConnection.prototype.addTrack;e.RTCPeerConnection.prototype.addTrack = function (e, n) {
                var i = r.apply(this, arguments);return i || (i = t(this, e), this._senders.push(i)), i;
              };var n = e.RTCPeerConnection.prototype.removeTrack;e.RTCPeerConnection.prototype.removeTrack = function (e) {
                n.apply(this, arguments);var t = this._senders.indexOf(e);-1 !== t && this._senders.splice(t, 1);
              };
            }var i = e.RTCPeerConnection.prototype.addStream;e.RTCPeerConnection.prototype.addStream = function (e) {
              var r = this;this._senders = this._senders || [], i.apply(this, [e]), e.getTracks().forEach(function (e) {
                r._senders.push(t(r, e));
              });
            };var s = e.RTCPeerConnection.prototype.removeStream;e.RTCPeerConnection.prototype.removeStream = function (e) {
              var t = this;this._senders = this._senders || [], s.apply(this, [e]), e.getTracks().forEach(function (e) {
                var r = t._senders.find(function (t) {
                  return t.track === e;
                });r && t._senders.splice(t._senders.indexOf(r), 1);
              });
            };
          } else if ("object" === c(e) && e.RTCPeerConnection && "getSenders" in e.RTCPeerConnection.prototype && "createDTMFSender" in e.RTCPeerConnection.prototype && e.RTCRtpSender && !("dtmf" in e.RTCRtpSender.prototype)) {
            var a = e.RTCPeerConnection.prototype.getSenders;e.RTCPeerConnection.prototype.getSenders = function () {
              var e = this,
                  t = a.apply(this, []);return t.forEach(function (t) {
                return t._pc = e;
              }), t;
            }, Object.defineProperty(e.RTCRtpSender.prototype, "dtmf", { get: function get() {
                return void 0 === this._dtmf && ("audio" === this.track.kind ? this._dtmf = this._pc.createDTMFSender(this.track) : this._dtmf = null), this._dtmf;
              } });
          }
        }, t.shimGetStats = function (e) {
          if (!e.RTCPeerConnection) return;var t = e.RTCPeerConnection.prototype.getStats;e.RTCPeerConnection.prototype.getStats = function () {
            var e = this,
                r = Array.prototype.slice.call(arguments),
                n = r[0],
                i = r[1],
                s = r[2];if (arguments.length > 0 && "function" == typeof n) return t.apply(this, arguments);if (0 === t.length && (0 === arguments.length || "function" != typeof n)) return t.apply(this, []);var a = function a(e) {
              var t = {};return e.result().forEach(function (e) {
                var r = { id: e.id, timestamp: e.timestamp, type: { localcandidate: "local-candidate", remotecandidate: "remote-candidate" }[e.type] || e.type };e.names().forEach(function (t) {
                  r[t] = e.stat(t);
                }), t[r.id] = r;
              }), t;
            },
                o = function o(e) {
              return new Map(Object.keys(e).map(function (t) {
                return [t, e[t]];
              }));
            };if (arguments.length >= 2) {
              return t.apply(this, [function (e) {
                i(o(a(e)));
              }, n]);
            }return new Promise(function (r, n) {
              t.apply(e, [function (e) {
                r(o(a(e)));
              }, n]);
            }).then(i, s);
          };
        }, Object.defineProperty(t, "shimGetUserMedia", { enumerable: !0, get: function get() {
            return i.shimGetUserMedia;
          } }), t.shimMediaStream = function (e) {
          e.MediaStream = e.MediaStream || e.webkitMediaStream;
        }, t.shimOnTrack = function (e) {
          if ("object" === c(e) && e.RTCPeerConnection && !("ontrack" in e.RTCPeerConnection.prototype)) {
            Object.defineProperty(e.RTCPeerConnection.prototype, "ontrack", { get: function get() {
                return this._ontrack;
              }, set: function set(e) {
                this._ontrack && this.removeEventListener("track", this._ontrack), this.addEventListener("track", this._ontrack = e);
              }, enumerable: !0, configurable: !0 });var t = e.RTCPeerConnection.prototype.setRemoteDescription;e.RTCPeerConnection.prototype.setRemoteDescription = function () {
              var r = this;return this._ontrackpoly || (this._ontrackpoly = function (t) {
                t.stream.addEventListener("addtrack", function (n) {
                  var i;i = e.RTCPeerConnection.prototype.getReceivers ? r.getReceivers().find(function (e) {
                    return e.track && e.track.id === n.track.id;
                  }) : { track: n.track };var s = new Event("track");s.track = n.track, s.receiver = i, s.transceiver = { receiver: i }, s.streams = [t.stream], r.dispatchEvent(s);
                }), t.stream.getTracks().forEach(function (n) {
                  var i;i = e.RTCPeerConnection.prototype.getReceivers ? r.getReceivers().find(function (e) {
                    return e.track && e.track.id === n.id;
                  }) : { track: n };var s = new Event("track");s.track = n, s.receiver = i, s.transceiver = { receiver: i }, s.streams = [t.stream], r.dispatchEvent(s);
                });
              }, this.addEventListener("addstream", this._ontrackpoly)), t.apply(this, arguments);
            };
          } else n.wrapPeerConnectionEvent(e, "track", function (e) {
            return e.transceiver || Object.defineProperty(e, "transceiver", { value: { receiver: e.receiver } }), e;
          });
        }, t.shimPeerConnection = function (e, t) {
          !e.RTCPeerConnection && e.webkitRTCPeerConnection && (e.RTCPeerConnection = e.webkitRTCPeerConnection);if (!e.RTCPeerConnection) return;t.version < 53 && ["setLocalDescription", "setRemoteDescription", "addIceCandidate"].forEach(function (t) {
            var r = e.RTCPeerConnection.prototype[t],
                n = o({}, t, function () {
              return arguments[0] = new ("addIceCandidate" === t ? e.RTCIceCandidate : e.RTCSessionDescription)(arguments[0]), r.apply(this, arguments);
            });e.RTCPeerConnection.prototype[t] = n[t];
          });
        }, t.shimSenderReceiverGetStats = function (e) {
          if (!("object" === c(e) && e.RTCPeerConnection && e.RTCRtpSender && e.RTCRtpReceiver)) return;if (!("getStats" in e.RTCRtpSender.prototype)) {
            var t = e.RTCPeerConnection.prototype.getSenders;t && (e.RTCPeerConnection.prototype.getSenders = function () {
              var e = this,
                  r = t.apply(this, []);return r.forEach(function (t) {
                return t._pc = e;
              }), r;
            });var r = e.RTCPeerConnection.prototype.addTrack;r && (e.RTCPeerConnection.prototype.addTrack = function () {
              var e = r.apply(this, arguments);return e._pc = this, e;
            }), e.RTCRtpSender.prototype.getStats = function () {
              var e = this;return this._pc.getStats().then(function (t) {
                return n.filterStats(t, e.track, !0);
              });
            };
          }if (!("getStats" in e.RTCRtpReceiver.prototype)) {
            var i = e.RTCPeerConnection.prototype.getReceivers;i && (e.RTCPeerConnection.prototype.getReceivers = function () {
              var e = this,
                  t = i.apply(this, []);return t.forEach(function (t) {
                return t._pc = e;
              }), t;
            }), n.wrapPeerConnectionEvent(e, "track", function (e) {
              return e.receiver._pc = e.srcElement, e;
            }), e.RTCRtpReceiver.prototype.getStats = function () {
              var e = this;return this._pc.getStats().then(function (t) {
                return n.filterStats(t, e.track, !1);
              });
            };
          }if (!("getStats" in e.RTCRtpSender.prototype) || !("getStats" in e.RTCRtpReceiver.prototype)) return;var s = e.RTCPeerConnection.prototype.getStats;e.RTCPeerConnection.prototype.getStats = function () {
            if (arguments.length > 0 && arguments[0] instanceof e.MediaStreamTrack) {
              var t,
                  r,
                  n,
                  i = arguments[0];return this.getSenders().forEach(function (e) {
                e.track === i && (t ? n = !0 : t = e);
              }), this.getReceivers().forEach(function (e) {
                return e.track === i && (r ? n = !0 : r = e), e.track === i;
              }), n || t && r ? Promise.reject(new DOMException("There are more than one sender or receiver for the track.", "InvalidAccessError")) : t ? t.getStats() : r ? r.getStats() : Promise.reject(new DOMException("There is no sender or receiver for the track.", "InvalidAccessError"));
            }return s.apply(this, arguments);
          };
        };var n = function (e, t) {
          if (!t && e && e.__esModule) return e;if (null === e || "object" !== c(e) && "function" != typeof e) return { default: e };var r = a(t);if (r && r.has(e)) return r.get(e);var n = {},
              i = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var s in e) {
            if ("default" !== s && Object.prototype.hasOwnProperty.call(e, s)) {
              var o = i ? Object.getOwnPropertyDescriptor(e, s) : null;o && (o.get || o.set) ? Object.defineProperty(n, s, o) : n[s] = e[s];
            }
          }n.default = e, r && r.set(e, n);return n;
        }(r(288)),
            i = r(87),
            s = r(688);function a(e) {
          if ("function" != typeof WeakMap) return null;var t = new WeakMap(),
              r = new WeakMap();return (a = function a(e) {
            return e ? r : t;
          })(e);
        }function o(e, t, r) {
          return (t = function (e) {
            var t = function (e, t) {
              if ("object" !== c(e) || null === e) return e;var r = e[Symbol.toPrimitive];if (void 0 !== r) {
                var n = r.call(e, t || "default");if ("object" !== c(n)) return n;throw new TypeError("@@toPrimitive must return a primitive value.");
              }return ("string" === t ? String : Number)(e);
            }(e, "string");return "symbol" === c(t) ? t : String(t);
          }(t)) in e ? Object.defineProperty(e, t, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = r, e;
        }function c(e) {
          return c = "function" == typeof Symbol && "symbol" == (0, _typeof3.default)(Symbol.iterator) ? function (e) {
            return typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e);
          } : function (e) {
            return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e);
          }, c(e);
        }function d(e) {
          e.RTCPeerConnection.prototype.getLocalStreams = function () {
            var e = this;return this._shimmedLocalStreams = this._shimmedLocalStreams || {}, Object.keys(this._shimmedLocalStreams).map(function (t) {
              return e._shimmedLocalStreams[t][0];
            });
          };var t = e.RTCPeerConnection.prototype.addTrack;e.RTCPeerConnection.prototype.addTrack = function (e, r) {
            if (!r) return t.apply(this, arguments);this._shimmedLocalStreams = this._shimmedLocalStreams || {};var n = t.apply(this, arguments);return this._shimmedLocalStreams[r.id] ? -1 === this._shimmedLocalStreams[r.id].indexOf(n) && this._shimmedLocalStreams[r.id].push(n) : this._shimmedLocalStreams[r.id] = [r, n], n;
          };var r = e.RTCPeerConnection.prototype.addStream;e.RTCPeerConnection.prototype.addStream = function (e) {
            var t = this;this._shimmedLocalStreams = this._shimmedLocalStreams || {}, e.getTracks().forEach(function (e) {
              if (t.getSenders().find(function (t) {
                return t.track === e;
              })) throw new DOMException("Track already exists.", "InvalidAccessError");
            });var n = this.getSenders();r.apply(this, arguments);var i = this.getSenders().filter(function (e) {
              return -1 === n.indexOf(e);
            });this._shimmedLocalStreams[e.id] = [e].concat(i);
          };var n = e.RTCPeerConnection.prototype.removeStream;e.RTCPeerConnection.prototype.removeStream = function (e) {
            return this._shimmedLocalStreams = this._shimmedLocalStreams || {}, delete this._shimmedLocalStreams[e.id], n.apply(this, arguments);
          };var i = e.RTCPeerConnection.prototype.removeTrack;e.RTCPeerConnection.prototype.removeTrack = function (e) {
            var t = this;return this._shimmedLocalStreams = this._shimmedLocalStreams || {}, e && Object.keys(this._shimmedLocalStreams).forEach(function (r) {
              var n = t._shimmedLocalStreams[r].indexOf(e);-1 !== n && t._shimmedLocalStreams[r].splice(n, 1), 1 === t._shimmedLocalStreams[r].length && delete t._shimmedLocalStreams[r];
            }), i.apply(this, arguments);
          };
        }
      }, 688: function _(e, t) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }), t.shimGetDisplayMedia = function (e, t) {
          if (e.navigator.mediaDevices && "getDisplayMedia" in e.navigator.mediaDevices) return;if (!e.navigator.mediaDevices) return;if ("function" != typeof t) return void console.error("shimGetDisplayMedia: getSourceId argument is not a function");e.navigator.mediaDevices.getDisplayMedia = function (r) {
            return t(r).then(function (t) {
              var n = r.video && r.video.width,
                  i = r.video && r.video.height,
                  s = r.video && r.video.frameRate;return r.video = { mandatory: { chromeMediaSource: "desktop", chromeMediaSourceId: t, maxFrameRate: s || 3 } }, n && (r.video.mandatory.maxWidth = n), i && (r.video.mandatory.maxHeight = i), e.navigator.mediaDevices.getUserMedia(r);
            });
          };
        };
      }, 87: function _(e, t, r) {
        "use strict";
        function n(e) {
          if ("function" != typeof WeakMap) return null;var t = new WeakMap(),
              r = new WeakMap();return (n = function n(e) {
            return e ? r : t;
          })(e);
        }function i(e) {
          return i = "function" == typeof Symbol && "symbol" == (0, _typeof3.default)(Symbol.iterator) ? function (e) {
            return typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e);
          } : function (e) {
            return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e);
          }, i(e);
        }Object.defineProperty(t, "__esModule", { value: !0 }), t.shimGetUserMedia = function (e, t) {
          var r = e && e.navigator;if (!r.mediaDevices) return;var n = function n(e) {
            if ("object" !== i(e) || e.mandatory || e.optional) return e;var t = {};return Object.keys(e).forEach(function (r) {
              if ("require" !== r && "advanced" !== r && "mediaSource" !== r) {
                var n = "object" === i(e[r]) ? e[r] : { ideal: e[r] };void 0 !== n.exact && "number" == typeof n.exact && (n.min = n.max = n.exact);var s = function s(e, t) {
                  return e ? e + t.charAt(0).toUpperCase() + t.slice(1) : "deviceId" === t ? "sourceId" : t;
                };if (void 0 !== n.ideal) {
                  t.optional = t.optional || [];var a = {};"number" == typeof n.ideal ? (a[s("min", r)] = n.ideal, t.optional.push(a), (a = {})[s("max", r)] = n.ideal, t.optional.push(a)) : (a[s("", r)] = n.ideal, t.optional.push(a));
                }void 0 !== n.exact && "number" != typeof n.exact ? (t.mandatory = t.mandatory || {}, t.mandatory[s("", r)] = n.exact) : ["min", "max"].forEach(function (e) {
                  void 0 !== n[e] && (t.mandatory = t.mandatory || {}, t.mandatory[s(e, r)] = n[e]);
                });
              }
            }), e.advanced && (t.optional = (t.optional || []).concat(e.advanced)), t;
          },
              a = function a(e, _a) {
            if (t.version >= 61) return _a(e);if ((e = JSON.parse(JSON.stringify(e))) && "object" === i(e.audio)) {
              var o = function o(e, t, r) {
                t in e && !(r in e) && (e[r] = e[t], delete e[t]);
              };o((e = JSON.parse(JSON.stringify(e))).audio, "autoGainControl", "googAutoGainControl"), o(e.audio, "noiseSuppression", "googNoiseSuppression"), e.audio = n(e.audio);
            }if (e && "object" === i(e.video)) {
              var c = e.video.facingMode;c = c && ("object" === i(c) ? c : { ideal: c });var d,
                  l = t.version < 66;if (c && ("user" === c.exact || "environment" === c.exact || "user" === c.ideal || "environment" === c.ideal) && (!r.mediaDevices.getSupportedConstraints || !r.mediaDevices.getSupportedConstraints().facingMode || l)) if (delete e.video.facingMode, "environment" === c.exact || "environment" === c.ideal ? d = ["back", "rear"] : "user" !== c.exact && "user" !== c.ideal || (d = ["front"]), d) return r.mediaDevices.enumerateDevices().then(function (t) {
                var r = (t = t.filter(function (e) {
                  return "videoinput" === e.kind;
                })).find(function (e) {
                  return d.some(function (t) {
                    return e.label.toLowerCase().includes(t);
                  });
                });return !r && t.length && d.includes("back") && (r = t[t.length - 1]), r && (e.video.deviceId = c.exact ? { exact: r.deviceId } : { ideal: r.deviceId }), e.video = n(e.video), s("chrome: " + JSON.stringify(e)), _a(e);
              });e.video = n(e.video);
            }return s("chrome: " + JSON.stringify(e)), _a(e);
          },
              o = function o(e) {
            return t.version >= 64 ? e : { name: { PermissionDeniedError: "NotAllowedError", PermissionDismissedError: "NotAllowedError", InvalidStateError: "NotAllowedError", DevicesNotFoundError: "NotFoundError", ConstraintNotSatisfiedError: "OverconstrainedError", TrackStartError: "NotReadableError", MediaDeviceFailedDueToShutdown: "NotAllowedError", MediaDeviceKillSwitchOn: "NotAllowedError", TabCaptureError: "AbortError", ScreenCaptureError: "AbortError", DeviceCaptureError: "AbortError" }[e.name] || e.name, message: e.message, constraint: e.constraint || e.constraintName, toString: function toString() {
                return this.name + (this.message && ": ") + this.message;
              } };
          };if (r.getUserMedia = function (e, t, n) {
            a(e, function (e) {
              r.webkitGetUserMedia(e, t, function (e) {
                n && n(o(e));
              });
            });
          }.bind(r), r.mediaDevices.getUserMedia) {
            var c = r.mediaDevices.getUserMedia.bind(r.mediaDevices);r.mediaDevices.getUserMedia = function (e) {
              return a(e, function (e) {
                return c(e).then(function (t) {
                  if (e.audio && !t.getAudioTracks().length || e.video && !t.getVideoTracks().length) throw t.getTracks().forEach(function (e) {
                    e.stop();
                  }), new DOMException("", "NotFoundError");return t;
                }, function (e) {
                  return Promise.reject(o(e));
                });
              });
            };
          }
        };var s = function (e, t) {
          if (!t && e && e.__esModule) return e;if (null === e || "object" !== i(e) && "function" != typeof e) return { default: e };var r = n(t);if (r && r.has(e)) return r.get(e);var s = {},
              a = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var o in e) {
            if ("default" !== o && Object.prototype.hasOwnProperty.call(e, o)) {
              var c = a ? Object.getOwnPropertyDescriptor(e, o) : null;c && (c.get || c.set) ? Object.defineProperty(s, o, c) : s[o] = e[o];
            }
          }s.default = e, r && r.set(e, s);return s;
        }(r(288)).log;
      }, 401: function _(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }), t.removeExtmapAllowMixed = function (e, t) {
          if (!e.RTCPeerConnection) return;if ("chrome" === t.browser && t.version >= 71) return;if ("safari" === t.browser && t.version >= 605) return;var r = e.RTCPeerConnection.prototype.setRemoteDescription;e.RTCPeerConnection.prototype.setRemoteDescription = function (t) {
            if (t && t.sdp && -1 !== t.sdp.indexOf("\na=extmap-allow-mixed")) {
              var n = t.sdp.split("\n").filter(function (e) {
                return "a=extmap-allow-mixed" !== e.trim();
              }).join("\n");e.RTCSessionDescription && t instanceof e.RTCSessionDescription ? arguments[0] = new e.RTCSessionDescription({ type: t.type, sdp: n }) : t.sdp = n;
            }return r.apply(this, arguments);
          };
        }, t.shimAddIceCandidateNullOrEmpty = function (e, t) {
          if (!e.RTCPeerConnection || !e.RTCPeerConnection.prototype) return;var r = e.RTCPeerConnection.prototype.addIceCandidate;if (!r || 0 === r.length) return;e.RTCPeerConnection.prototype.addIceCandidate = function () {
            return arguments[0] ? ("chrome" === t.browser && t.version < 78 || "firefox" === t.browser && t.version < 68 || "safari" === t.browser) && arguments[0] && "" === arguments[0].candidate ? Promise.resolve() : r.apply(this, arguments) : (arguments[1] && arguments[1].apply(null), Promise.resolve());
          };
        }, t.shimConnectionState = function (e) {
          if (!e.RTCPeerConnection || "connectionState" in e.RTCPeerConnection.prototype) return;var t = e.RTCPeerConnection.prototype;Object.defineProperty(t, "connectionState", { get: function get() {
              return { completed: "connected", checking: "connecting" }[this.iceConnectionState] || this.iceConnectionState;
            }, enumerable: !0, configurable: !0 }), Object.defineProperty(t, "onconnectionstatechange", { get: function get() {
              return this._onconnectionstatechange || null;
            }, set: function set(e) {
              this._onconnectionstatechange && (this.removeEventListener("connectionstatechange", this._onconnectionstatechange), delete this._onconnectionstatechange), e && this.addEventListener("connectionstatechange", this._onconnectionstatechange = e);
            }, enumerable: !0, configurable: !0 }), ["setLocalDescription", "setRemoteDescription"].forEach(function (e) {
            var r = t[e];t[e] = function () {
              return this._connectionstatechangepoly || (this._connectionstatechangepoly = function (e) {
                var t = e.target;if (t._lastConnectionState !== t.connectionState) {
                  t._lastConnectionState = t.connectionState;var r = new Event("connectionstatechange", e);t.dispatchEvent(r);
                }return e;
              }, this.addEventListener("iceconnectionstatechange", this._connectionstatechangepoly)), r.apply(this, arguments);
            };
          });
        }, t.shimMaxMessageSize = function (e, t) {
          if (!e.RTCPeerConnection) return;"sctp" in e.RTCPeerConnection.prototype || Object.defineProperty(e.RTCPeerConnection.prototype, "sctp", { get: function get() {
              return void 0 === this._sctp ? null : this._sctp;
            } });var r = e.RTCPeerConnection.prototype.setRemoteDescription;e.RTCPeerConnection.prototype.setRemoteDescription = function () {
            var e, n;(this._sctp = null, "chrome" === t.browser && t.version >= 76) && "plan-b" === this.getConfiguration().sdpSemantics && Object.defineProperty(this, "sctp", { get: function get() {
                return void 0 === this._sctp ? null : this._sctp;
              }, enumerable: !0, configurable: !0 });if (function (e) {
              if (!e || !e.sdp) return !1;var t = i.default.splitSections(e.sdp);return t.shift(), t.some(function (e) {
                var t = i.default.parseMLine(e);return t && "application" === t.kind && -1 !== t.protocol.indexOf("SCTP");
              });
            }(arguments[0])) {
              var s,
                  a = function (e) {
                var t = e.sdp.match(/mozilla...THIS_IS_SDPARTA-(\d+)/);if (null === t || t.length < 2) return -1;var r = parseInt(t[1], 10);return r != r ? -1 : r;
              }(arguments[0]),
                  o = (e = a, n = 65536, "firefox" === t.browser && (n = t.version < 57 ? -1 === e ? 16384 : 2147483637 : t.version < 60 ? 57 === t.version ? 65535 : 65536 : 2147483637), n),
                  c = function (e, r) {
                var n = 65536;"firefox" === t.browser && 57 === t.version && (n = 65535);var s = i.default.matchPrefix(e.sdp, "a=max-message-size:");return s.length > 0 ? n = parseInt(s[0].substring(19), 10) : "firefox" === t.browser && -1 !== r && (n = 2147483637), n;
              }(arguments[0], a);s = 0 === o && 0 === c ? Number.POSITIVE_INFINITY : 0 === o || 0 === c ? Math.max(o, c) : Math.min(o, c);var d = {};Object.defineProperty(d, "maxMessageSize", { get: function get() {
                  return s;
                } }), this._sctp = d;
            }return r.apply(this, arguments);
          };
        }, t.shimParameterlessSetLocalDescription = function (e, t) {
          if (!e.RTCPeerConnection || !e.RTCPeerConnection.prototype) return;var r = e.RTCPeerConnection.prototype.setLocalDescription;if (!r || 0 === r.length) return;e.RTCPeerConnection.prototype.setLocalDescription = function () {
            var e = this,
                t = arguments[0] || {};if ("object" !== o(t) || t.type && t.sdp) return r.apply(this, arguments);if (!(t = { type: t.type, sdp: t.sdp }).type) switch (this.signalingState) {case "stable":case "have-local-offer":case "have-remote-pranswer":
                t.type = "offer";break;default:
                t.type = "answer";}return t.sdp || "offer" !== t.type && "answer" !== t.type ? r.apply(this, [t]) : ("offer" === t.type ? this.createOffer : this.createAnswer).apply(this).then(function (t) {
              return r.apply(e, [t]);
            });
          };
        }, t.shimRTCIceCandidate = function (e) {
          if (!e.RTCIceCandidate || e.RTCIceCandidate && "foundation" in e.RTCIceCandidate.prototype) return;var t = e.RTCIceCandidate;e.RTCIceCandidate = function (e) {
            if ("object" === o(e) && e.candidate && 0 === e.candidate.indexOf("a=") && ((e = JSON.parse(JSON.stringify(e))).candidate = e.candidate.substring(2)), e.candidate && e.candidate.length) {
              var r = new t(e),
                  n = i.default.parseCandidate(e.candidate);for (var s in n) {
                s in r || Object.defineProperty(r, s, { value: n[s] });
              }return r.toJSON = function () {
                return { candidate: r.candidate, sdpMid: r.sdpMid, sdpMLineIndex: r.sdpMLineIndex, usernameFragment: r.usernameFragment };
              }, r;
            }return new t(e);
          }, e.RTCIceCandidate.prototype = t.prototype, s.wrapPeerConnectionEvent(e, "icecandidate", function (t) {
            return t.candidate && Object.defineProperty(t, "candidate", { value: new e.RTCIceCandidate(t.candidate), writable: "false" }), t;
          });
        }, t.shimRTCIceCandidateRelayProtocol = function (e) {
          if (!e.RTCIceCandidate || e.RTCIceCandidate && "relayProtocol" in e.RTCIceCandidate.prototype) return;s.wrapPeerConnectionEvent(e, "icecandidate", function (e) {
            if (e.candidate) {
              var t = i.default.parseCandidate(e.candidate.candidate);"relay" === t.type && (e.candidate.relayProtocol = { 0: "tls", 1: "tcp", 2: "udp" }[t.priority >> 24]);
            }return e;
          });
        }, t.shimSendThrowTypeError = function (e) {
          if (!e.RTCPeerConnection || !("createDataChannel" in e.RTCPeerConnection.prototype)) return;function t(e, t) {
            var r = e.send;e.send = function () {
              var n = arguments[0],
                  i = n.length || n.size || n.byteLength;if ("open" === e.readyState && t.sctp && i > t.sctp.maxMessageSize) throw new TypeError("Message too large (can send a maximum of " + t.sctp.maxMessageSize + " bytes)");return r.apply(e, arguments);
            };
          }var r = e.RTCPeerConnection.prototype.createDataChannel;e.RTCPeerConnection.prototype.createDataChannel = function () {
            var e = r.apply(this, arguments);return t(e, this), e;
          }, s.wrapPeerConnectionEvent(e, "datachannel", function (e) {
            return t(e.channel, e.target), e;
          });
        };var n,
            i = (n = r(539)) && n.__esModule ? n : { default: n },
            s = function (e, t) {
          if (!t && e && e.__esModule) return e;if (null === e || "object" !== o(e) && "function" != typeof e) return { default: e };var r = a(t);if (r && r.has(e)) return r.get(e);var n = {},
              i = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var s in e) {
            if ("default" !== s && Object.prototype.hasOwnProperty.call(e, s)) {
              var c = i ? Object.getOwnPropertyDescriptor(e, s) : null;c && (c.get || c.set) ? Object.defineProperty(n, s, c) : n[s] = e[s];
            }
          }n.default = e, r && r.set(e, n);return n;
        }(r(288));function a(e) {
          if ("function" != typeof WeakMap) return null;var t = new WeakMap(),
              r = new WeakMap();return (a = function a(e) {
            return e ? r : t;
          })(e);
        }function o(e) {
          return o = "function" == typeof Symbol && "symbol" == (0, _typeof3.default)(Symbol.iterator) ? function (e) {
            return typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e);
          } : function (e) {
            return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e);
          }, o(e);
        }
      }, 311: function _(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }), t.shimAddTransceiver = function (e) {
          if ("object" !== c(e) || !e.RTCPeerConnection) return;var t = e.RTCPeerConnection.prototype.addTransceiver;t && (e.RTCPeerConnection.prototype.addTransceiver = function () {
            this.setParametersPromises = [];var e,
                r = arguments[1] && arguments[1].sendEncodings;void 0 === r && (r = []);var n = (r = function (e) {
              if (Array.isArray(e)) return o(e);
            }(e = r) || function (e) {
              if ("undefined" != typeof Symbol && null != e[Symbol.iterator] || null != e["@@iterator"]) return Array.from(e);
            }(e) || function (e, t) {
              if (e) {
                if ("string" == typeof e) return o(e, t);var r = Object.prototype.toString.call(e).slice(8, -1);return "Object" === r && e.constructor && (r = e.constructor.name), "Map" === r || "Set" === r ? Array.from(e) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? o(e, t) : void 0;
              }
            }(e) || function () {
              throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }()).length > 0;n && r.forEach(function (e) {
              if ("rid" in e) {
                if (!/^[a-z0-9]{0,16}$/i.test(e.rid)) throw new TypeError("Invalid RID value provided.");
              }if ("scaleResolutionDownBy" in e && !(parseFloat(e.scaleResolutionDownBy) >= 1)) throw new RangeError("scale_resolution_down_by must be >= 1.0");if ("maxFramerate" in e && !(parseFloat(e.maxFramerate) >= 0)) throw new RangeError("max_framerate must be >= 0.0");
            });var i = t.apply(this, arguments);if (n) {
              var s = i.sender,
                  a = s.getParameters();(!("encodings" in a) || 1 === a.encodings.length && 0 === Object.keys(a.encodings[0]).length) && (a.encodings = r, s.sendEncodings = r, this.setParametersPromises.push(s.setParameters(a).then(function () {
                delete s.sendEncodings;
              }).catch(function () {
                delete s.sendEncodings;
              })));
            }return i;
          });
        }, t.shimCreateAnswer = function (e) {
          if ("object" !== c(e) || !e.RTCPeerConnection) return;var t = e.RTCPeerConnection.prototype.createAnswer;e.RTCPeerConnection.prototype.createAnswer = function () {
            var e = arguments,
                r = this;return this.setParametersPromises && this.setParametersPromises.length ? Promise.all(this.setParametersPromises).then(function () {
              return t.apply(r, e);
            }).finally(function () {
              r.setParametersPromises = [];
            }) : t.apply(this, arguments);
          };
        }, t.shimCreateOffer = function (e) {
          if ("object" !== c(e) || !e.RTCPeerConnection) return;var t = e.RTCPeerConnection.prototype.createOffer;e.RTCPeerConnection.prototype.createOffer = function () {
            var e = arguments,
                r = this;return this.setParametersPromises && this.setParametersPromises.length ? Promise.all(this.setParametersPromises).then(function () {
              return t.apply(r, e);
            }).finally(function () {
              r.setParametersPromises = [];
            }) : t.apply(this, arguments);
          };
        }, Object.defineProperty(t, "shimGetDisplayMedia", { enumerable: !0, get: function get() {
            return s.shimGetDisplayMedia;
          } }), t.shimGetParameters = function (e) {
          if ("object" !== c(e) || !e.RTCRtpSender) return;var t = e.RTCRtpSender.prototype.getParameters;t && (e.RTCRtpSender.prototype.getParameters = function () {
            var e = t.apply(this, arguments);return "encodings" in e || (e.encodings = [].concat(this.sendEncodings || [{}])), e;
          });
        }, Object.defineProperty(t, "shimGetUserMedia", { enumerable: !0, get: function get() {
            return i.shimGetUserMedia;
          } }), t.shimOnTrack = function (e) {
          "object" === c(e) && e.RTCTrackEvent && "receiver" in e.RTCTrackEvent.prototype && !("transceiver" in e.RTCTrackEvent.prototype) && Object.defineProperty(e.RTCTrackEvent.prototype, "transceiver", { get: function get() {
              return { receiver: this.receiver };
            } });
        }, t.shimPeerConnection = function (e, t) {
          if ("object" !== c(e) || !e.RTCPeerConnection && !e.mozRTCPeerConnection) return;!e.RTCPeerConnection && e.mozRTCPeerConnection && (e.RTCPeerConnection = e.mozRTCPeerConnection);t.version < 53 && ["setLocalDescription", "setRemoteDescription", "addIceCandidate"].forEach(function (t) {
            var r = e.RTCPeerConnection.prototype[t],
                n = function (e, t, r) {
              (t = function (e) {
                var t = function (e, t) {
                  if ("object" !== c(e) || null === e) return e;var r = e[Symbol.toPrimitive];if (void 0 !== r) {
                    var n = r.call(e, t || "default");if ("object" !== c(n)) return n;throw new TypeError("@@toPrimitive must return a primitive value.");
                  }return ("string" === t ? String : Number)(e);
                }(e, "string");return "symbol" === c(t) ? t : String(t);
              }(t)) in e ? Object.defineProperty(e, t, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = r;return e;
            }({}, t, function () {
              return arguments[0] = new ("addIceCandidate" === t ? e.RTCIceCandidate : e.RTCSessionDescription)(arguments[0]), r.apply(this, arguments);
            });e.RTCPeerConnection.prototype[t] = n[t];
          });var r = { inboundrtp: "inbound-rtp", outboundrtp: "outbound-rtp", candidatepair: "candidate-pair", localcandidate: "local-candidate", remotecandidate: "remote-candidate" },
              n = e.RTCPeerConnection.prototype.getStats;e.RTCPeerConnection.prototype.getStats = function () {
            var e = Array.prototype.slice.call(arguments),
                i = e[0],
                s = e[1],
                a = e[2];return n.apply(this, [i || null]).then(function (e) {
              if (t.version < 53 && !s) try {
                e.forEach(function (e) {
                  e.type = r[e.type] || e.type;
                });
              } catch (t) {
                if ("TypeError" !== t.name) throw t;e.forEach(function (t, n) {
                  e.set(n, Object.assign({}, t, { type: r[t.type] || t.type }));
                });
              }return e;
            }).then(s, a);
          };
        }, t.shimRTCDataChannel = function (e) {
          e.DataChannel && !e.RTCDataChannel && (e.RTCDataChannel = e.DataChannel);
        }, t.shimReceiverGetStats = function (e) {
          if ("object" !== c(e) || !e.RTCPeerConnection || !e.RTCRtpSender) return;if (e.RTCRtpSender && "getStats" in e.RTCRtpReceiver.prototype) return;var t = e.RTCPeerConnection.prototype.getReceivers;t && (e.RTCPeerConnection.prototype.getReceivers = function () {
            var e = this,
                r = t.apply(this, []);return r.forEach(function (t) {
              return t._pc = e;
            }), r;
          });n.wrapPeerConnectionEvent(e, "track", function (e) {
            return e.receiver._pc = e.srcElement, e;
          }), e.RTCRtpReceiver.prototype.getStats = function () {
            return this._pc.getStats(this.track);
          };
        }, t.shimRemoveStream = function (e) {
          if (!e.RTCPeerConnection || "removeStream" in e.RTCPeerConnection.prototype) return;e.RTCPeerConnection.prototype.removeStream = function (e) {
            var t = this;n.deprecated("removeStream", "removeTrack"), this.getSenders().forEach(function (r) {
              r.track && e.getTracks().includes(r.track) && t.removeTrack(r);
            });
          };
        }, t.shimSenderGetStats = function (e) {
          if ("object" !== c(e) || !e.RTCPeerConnection || !e.RTCRtpSender) return;if (e.RTCRtpSender && "getStats" in e.RTCRtpSender.prototype) return;var t = e.RTCPeerConnection.prototype.getSenders;t && (e.RTCPeerConnection.prototype.getSenders = function () {
            var e = this,
                r = t.apply(this, []);return r.forEach(function (t) {
              return t._pc = e;
            }), r;
          });var r = e.RTCPeerConnection.prototype.addTrack;r && (e.RTCPeerConnection.prototype.addTrack = function () {
            var e = r.apply(this, arguments);return e._pc = this, e;
          });e.RTCRtpSender.prototype.getStats = function () {
            return this.track ? this._pc.getStats(this.track) : Promise.resolve(new Map());
          };
        };var n = function (e, t) {
          if (!t && e && e.__esModule) return e;if (null === e || "object" !== c(e) && "function" != typeof e) return { default: e };var r = a(t);if (r && r.has(e)) return r.get(e);var n = {},
              i = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var s in e) {
            if ("default" !== s && Object.prototype.hasOwnProperty.call(e, s)) {
              var o = i ? Object.getOwnPropertyDescriptor(e, s) : null;o && (o.get || o.set) ? Object.defineProperty(n, s, o) : n[s] = e[s];
            }
          }n.default = e, r && r.set(e, n);return n;
        }(r(288)),
            i = r(532),
            s = r(143);function a(e) {
          if ("function" != typeof WeakMap) return null;var t = new WeakMap(),
              r = new WeakMap();return (a = function a(e) {
            return e ? r : t;
          })(e);
        }function o(e, t) {
          (null == t || t > e.length) && (t = e.length);for (var r = 0, n = new Array(t); r < t; r++) {
            n[r] = e[r];
          }return n;
        }function c(e) {
          return c = "function" == typeof Symbol && "symbol" == (0, _typeof3.default)(Symbol.iterator) ? function (e) {
            return typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e);
          } : function (e) {
            return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e);
          }, c(e);
        }
      }, 143: function _(e, t) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }), t.shimGetDisplayMedia = function (e, t) {
          if (e.navigator.mediaDevices && "getDisplayMedia" in e.navigator.mediaDevices) return;if (!e.navigator.mediaDevices) return;e.navigator.mediaDevices.getDisplayMedia = function (r) {
            if (!r || !r.video) {
              var n = new DOMException("getDisplayMedia without video constraints is undefined");return n.name = "NotFoundError", n.code = 8, Promise.reject(n);
            }return !0 === r.video ? r.video = { mediaSource: t } : r.video.mediaSource = t, e.navigator.mediaDevices.getUserMedia(r);
          };
        };
      }, 532: function _(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }), t.shimGetUserMedia = function (e, t) {
          var r = e && e.navigator,
              i = e && e.MediaStreamTrack;if (r.getUserMedia = function (e, t, i) {
            n.deprecated("navigator.getUserMedia", "navigator.mediaDevices.getUserMedia"), r.mediaDevices.getUserMedia(e).then(t, i);
          }, !(t.version > 55 && "autoGainControl" in r.mediaDevices.getSupportedConstraints())) {
            var a = function a(e, t, r) {
              t in e && !(r in e) && (e[r] = e[t], delete e[t]);
            },
                o = r.mediaDevices.getUserMedia.bind(r.mediaDevices);if (r.mediaDevices.getUserMedia = function (e) {
              return "object" === s(e) && "object" === s(e.audio) && (e = JSON.parse(JSON.stringify(e)), a(e.audio, "autoGainControl", "mozAutoGainControl"), a(e.audio, "noiseSuppression", "mozNoiseSuppression")), o(e);
            }, i && i.prototype.getSettings) {
              var c = i.prototype.getSettings;i.prototype.getSettings = function () {
                var e = c.apply(this, arguments);return a(e, "mozAutoGainControl", "autoGainControl"), a(e, "mozNoiseSuppression", "noiseSuppression"), e;
              };
            }if (i && i.prototype.applyConstraints) {
              var d = i.prototype.applyConstraints;i.prototype.applyConstraints = function (e) {
                return "audio" === this.kind && "object" === s(e) && (e = JSON.parse(JSON.stringify(e)), a(e, "autoGainControl", "mozAutoGainControl"), a(e, "noiseSuppression", "mozNoiseSuppression")), d.apply(this, [e]);
              };
            }
          }
        };var n = function (e, t) {
          if (!t && e && e.__esModule) return e;if (null === e || "object" !== s(e) && "function" != typeof e) return { default: e };var r = i(t);if (r && r.has(e)) return r.get(e);var n = {},
              a = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var o in e) {
            if ("default" !== o && Object.prototype.hasOwnProperty.call(e, o)) {
              var c = a ? Object.getOwnPropertyDescriptor(e, o) : null;c && (c.get || c.set) ? Object.defineProperty(n, o, c) : n[o] = e[o];
            }
          }n.default = e, r && r.set(e, n);return n;
        }(r(288));function i(e) {
          if ("function" != typeof WeakMap) return null;var t = new WeakMap(),
              r = new WeakMap();return (i = function i(e) {
            return e ? r : t;
          })(e);
        }function s(e) {
          return s = "function" == typeof Symbol && "symbol" == (0, _typeof3.default)(Symbol.iterator) ? function (e) {
            return typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e);
          } : function (e) {
            return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e);
          }, s(e);
        }
      }, 540: function _(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }), t.shimAudioContext = function (e) {
          if ("object" !== s(e) || e.AudioContext) return;e.AudioContext = e.webkitAudioContext;
        }, t.shimCallbacksAPI = function (e) {
          if ("object" !== s(e) || !e.RTCPeerConnection) return;var t = e.RTCPeerConnection.prototype,
              r = t.createOffer,
              n = t.createAnswer,
              i = t.setLocalDescription,
              a = t.setRemoteDescription,
              o = t.addIceCandidate;t.createOffer = function (e, t) {
            var n = arguments.length >= 2 ? arguments[2] : arguments[0],
                i = r.apply(this, [n]);return t ? (i.then(e, t), Promise.resolve()) : i;
          }, t.createAnswer = function (e, t) {
            var r = arguments.length >= 2 ? arguments[2] : arguments[0],
                i = n.apply(this, [r]);return t ? (i.then(e, t), Promise.resolve()) : i;
          };var c = function c(e, t, r) {
            var n = i.apply(this, [e]);return r ? (n.then(t, r), Promise.resolve()) : n;
          };t.setLocalDescription = c, c = function c(e, t, r) {
            var n = a.apply(this, [e]);return r ? (n.then(t, r), Promise.resolve()) : n;
          }, t.setRemoteDescription = c, c = function c(e, t, r) {
            var n = o.apply(this, [e]);return r ? (n.then(t, r), Promise.resolve()) : n;
          }, t.addIceCandidate = c;
        }, t.shimConstraints = a, t.shimCreateOfferLegacy = function (e) {
          var t = e.RTCPeerConnection.prototype.createOffer;e.RTCPeerConnection.prototype.createOffer = function (e) {
            if (e) {
              void 0 !== e.offerToReceiveAudio && (e.offerToReceiveAudio = !!e.offerToReceiveAudio);var r = this.getTransceivers().find(function (e) {
                return "audio" === e.receiver.track.kind;
              });!1 === e.offerToReceiveAudio && r ? "sendrecv" === r.direction ? r.setDirection ? r.setDirection("sendonly") : r.direction = "sendonly" : "recvonly" === r.direction && (r.setDirection ? r.setDirection("inactive") : r.direction = "inactive") : !0 !== e.offerToReceiveAudio || r || this.addTransceiver("audio", { direction: "recvonly" }), void 0 !== e.offerToReceiveVideo && (e.offerToReceiveVideo = !!e.offerToReceiveVideo);var n = this.getTransceivers().find(function (e) {
                return "video" === e.receiver.track.kind;
              });!1 === e.offerToReceiveVideo && n ? "sendrecv" === n.direction ? n.setDirection ? n.setDirection("sendonly") : n.direction = "sendonly" : "recvonly" === n.direction && (n.setDirection ? n.setDirection("inactive") : n.direction = "inactive") : !0 !== e.offerToReceiveVideo || n || this.addTransceiver("video", { direction: "recvonly" });
            }return t.apply(this, arguments);
          };
        }, t.shimGetUserMedia = function (e) {
          var t = e && e.navigator;if (t.mediaDevices && t.mediaDevices.getUserMedia) {
            var r = t.mediaDevices,
                n = r.getUserMedia.bind(r);t.mediaDevices.getUserMedia = function (e) {
              return n(a(e));
            };
          }!t.getUserMedia && t.mediaDevices && t.mediaDevices.getUserMedia && (t.getUserMedia = function (e, r, n) {
            t.mediaDevices.getUserMedia(e).then(r, n);
          }.bind(t));
        }, t.shimLocalStreamsAPI = function (e) {
          if ("object" !== s(e) || !e.RTCPeerConnection) return;"getLocalStreams" in e.RTCPeerConnection.prototype || (e.RTCPeerConnection.prototype.getLocalStreams = function () {
            return this._localStreams || (this._localStreams = []), this._localStreams;
          });if (!("addStream" in e.RTCPeerConnection.prototype)) {
            var t = e.RTCPeerConnection.prototype.addTrack;e.RTCPeerConnection.prototype.addStream = function (e) {
              var r = this;this._localStreams || (this._localStreams = []), this._localStreams.includes(e) || this._localStreams.push(e), e.getAudioTracks().forEach(function (n) {
                return t.call(r, n, e);
              }), e.getVideoTracks().forEach(function (n) {
                return t.call(r, n, e);
              });
            }, e.RTCPeerConnection.prototype.addTrack = function (e) {
              for (var r = this, n = arguments.length, i = new Array(n > 1 ? n - 1 : 0), s = 1; s < n; s++) {
                i[s - 1] = arguments[s];
              }return i && i.forEach(function (e) {
                r._localStreams ? r._localStreams.includes(e) || r._localStreams.push(e) : r._localStreams = [e];
              }), t.apply(this, arguments);
            };
          }"removeStream" in e.RTCPeerConnection.prototype || (e.RTCPeerConnection.prototype.removeStream = function (e) {
            var t = this;this._localStreams || (this._localStreams = []);var r = this._localStreams.indexOf(e);if (-1 !== r) {
              this._localStreams.splice(r, 1);var n = e.getTracks();this.getSenders().forEach(function (e) {
                n.includes(e.track) && t.removeTrack(e);
              });
            }
          });
        }, t.shimRTCIceServerUrls = function (e) {
          if (!e.RTCPeerConnection) return;var t = e.RTCPeerConnection;e.RTCPeerConnection = function (e, r) {
            if (e && e.iceServers) {
              for (var i = [], s = 0; s < e.iceServers.length; s++) {
                var a = e.iceServers[s];void 0 === a.urls && a.url ? (n.deprecated("RTCIceServer.url", "RTCIceServer.urls"), (a = JSON.parse(JSON.stringify(a))).urls = a.url, delete a.url, i.push(a)) : i.push(e.iceServers[s]);
              }e.iceServers = i;
            }return new t(e, r);
          }, e.RTCPeerConnection.prototype = t.prototype, "generateCertificate" in t && Object.defineProperty(e.RTCPeerConnection, "generateCertificate", { get: function get() {
              return t.generateCertificate;
            } });
        }, t.shimRemoteStreamsAPI = function (e) {
          if ("object" !== s(e) || !e.RTCPeerConnection) return;"getRemoteStreams" in e.RTCPeerConnection.prototype || (e.RTCPeerConnection.prototype.getRemoteStreams = function () {
            return this._remoteStreams ? this._remoteStreams : [];
          });if (!("onaddstream" in e.RTCPeerConnection.prototype)) {
            Object.defineProperty(e.RTCPeerConnection.prototype, "onaddstream", { get: function get() {
                return this._onaddstream;
              }, set: function set(e) {
                var t = this;this._onaddstream && (this.removeEventListener("addstream", this._onaddstream), this.removeEventListener("track", this._onaddstreampoly)), this.addEventListener("addstream", this._onaddstream = e), this.addEventListener("track", this._onaddstreampoly = function (e) {
                  e.streams.forEach(function (e) {
                    if (t._remoteStreams || (t._remoteStreams = []), !t._remoteStreams.includes(e)) {
                      t._remoteStreams.push(e);var r = new Event("addstream");r.stream = e, t.dispatchEvent(r);
                    }
                  });
                });
              } });var t = e.RTCPeerConnection.prototype.setRemoteDescription;e.RTCPeerConnection.prototype.setRemoteDescription = function () {
              var e = this;return this._onaddstreampoly || this.addEventListener("track", this._onaddstreampoly = function (t) {
                t.streams.forEach(function (t) {
                  if (e._remoteStreams || (e._remoteStreams = []), !(e._remoteStreams.indexOf(t) >= 0)) {
                    e._remoteStreams.push(t);var r = new Event("addstream");r.stream = t, e.dispatchEvent(r);
                  }
                });
              }), t.apply(e, arguments);
            };
          }
        }, t.shimTrackEventTransceiver = function (e) {
          "object" === s(e) && e.RTCTrackEvent && "receiver" in e.RTCTrackEvent.prototype && !("transceiver" in e.RTCTrackEvent.prototype) && Object.defineProperty(e.RTCTrackEvent.prototype, "transceiver", { get: function get() {
              return { receiver: this.receiver };
            } });
        };var n = function (e, t) {
          if (!t && e && e.__esModule) return e;if (null === e || "object" !== s(e) && "function" != typeof e) return { default: e };var r = i(t);if (r && r.has(e)) return r.get(e);var n = {},
              a = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var o in e) {
            if ("default" !== o && Object.prototype.hasOwnProperty.call(e, o)) {
              var c = a ? Object.getOwnPropertyDescriptor(e, o) : null;c && (c.get || c.set) ? Object.defineProperty(n, o, c) : n[o] = e[o];
            }
          }n.default = e, r && r.set(e, n);return n;
        }(r(288));function i(e) {
          if ("function" != typeof WeakMap) return null;var t = new WeakMap(),
              r = new WeakMap();return (i = function i(e) {
            return e ? r : t;
          })(e);
        }function s(e) {
          return s = "function" == typeof Symbol && "symbol" == (0, _typeof3.default)(Symbol.iterator) ? function (e) {
            return typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e);
          } : function (e) {
            return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e);
          }, s(e);
        }function a(e) {
          return e && void 0 !== e.video ? Object.assign({}, e, { video: n.compactObject(e.video) }) : e;
        }
      }, 288: function _(e, t) {
        "use strict";
        function r(e) {
          return r = "function" == typeof Symbol && "symbol" == (0, _typeof3.default)(Symbol.iterator) ? function (e) {
            return typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e);
          } : function (e) {
            return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e);
          }, r(e);
        }Object.defineProperty(t, "__esModule", { value: !0 }), t.compactObject = function e(t) {
          if (!a(t)) return t;return Object.keys(t).reduce(function (n, i) {
            var s = a(t[i]),
                o = s ? e(t[i]) : t[i],
                c = s && !Object.keys(o).length;return void 0 === o || c ? n : Object.assign(n, function (e, t, n) {
              t = function (e) {
                var t = function (e, t) {
                  if ("object" !== r(e) || null === e) return e;var n = e[Symbol.toPrimitive];if (void 0 !== n) {
                    var i = n.call(e, t || "default");if ("object" !== r(i)) return i;throw new TypeError("@@toPrimitive must return a primitive value.");
                  }return ("string" === t ? String : Number)(e);
                }(e, "string");return "symbol" === r(t) ? t : String(t);
              }(t), t in e ? Object.defineProperty(e, t, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = n;return e;
            }({}, i, o));
          }, {});
        }, t.deprecated = function (e, t) {
          if (!i) return;console.warn(e + " is deprecated, please use " + t + " instead.");
        }, t.detectBrowser = function (e) {
          var t = { browser: null, version: null };if (void 0 === e || !e.navigator || !e.navigator.userAgent) return t.browser = "Not a browser.", t;var r = e.navigator;if (r.mozGetUserMedia) t.browser = "firefox", t.version = s(r.userAgent, /Firefox\/(\d+)\./, 1);else if (r.webkitGetUserMedia || !1 === e.isSecureContext && e.webkitRTCPeerConnection) t.browser = "chrome", t.version = s(r.userAgent, /Chrom(e|ium)\/(\d+)\./, 2);else {
            if (!e.RTCPeerConnection || !r.userAgent.match(/AppleWebKit\/(\d+)\./)) return t.browser = "Not a supported browser.", t;t.browser = "safari", t.version = s(r.userAgent, /AppleWebKit\/(\d+)\./, 1), t.supportsUnifiedPlan = e.RTCRtpTransceiver && "currentDirection" in e.RTCRtpTransceiver.prototype;
          }return t;
        }, t.disableLog = function (e) {
          if ("boolean" != typeof e) return new Error("Argument type: " + r(e) + ". Please use a boolean.");return n = e, e ? "adapter.js logging disabled" : "adapter.js logging enabled";
        }, t.disableWarnings = function (e) {
          if ("boolean" != typeof e) return new Error("Argument type: " + r(e) + ". Please use a boolean.");return i = !e, "adapter.js deprecation warnings " + (e ? "disabled" : "enabled");
        }, t.extractVersion = s, t.filterStats = function (e, t, r) {
          var n = r ? "outbound-rtp" : "inbound-rtp",
              i = new Map();if (null === t) return i;var s = [];return e.forEach(function (e) {
            "track" === e.type && e.trackIdentifier === t.id && s.push(e);
          }), s.forEach(function (t) {
            e.forEach(function (r) {
              r.type === n && r.trackId === t.id && o(e, r, i);
            });
          }), i;
        }, t.log = function () {
          if ("object" === ("undefined" == typeof window ? "undefined" : r(window))) {
            if (n) return;"undefined" != typeof console && "function" == typeof console.log && console.log.apply(console, arguments);
          }
        }, t.walkStats = o, t.wrapPeerConnectionEvent = function (e, t, r) {
          if (!e.RTCPeerConnection) return;var n = e.RTCPeerConnection.prototype,
              i = n.addEventListener;n.addEventListener = function (e, n) {
            if (e !== t) return i.apply(this, arguments);var s = function s(e) {
              var t = r(e);t && (n.handleEvent ? n.handleEvent(t) : n(t));
            };return this._eventMap = this._eventMap || {}, this._eventMap[t] || (this._eventMap[t] = new Map()), this._eventMap[t].set(n, s), i.apply(this, [e, s]);
          };var s = n.removeEventListener;n.removeEventListener = function (e, r) {
            if (e !== t || !this._eventMap || !this._eventMap[t]) return s.apply(this, arguments);if (!this._eventMap[t].has(r)) return s.apply(this, arguments);var n = this._eventMap[t].get(r);return this._eventMap[t].delete(r), 0 === this._eventMap[t].size && delete this._eventMap[t], 0 === Object.keys(this._eventMap).length && delete this._eventMap, s.apply(this, [e, n]);
          }, Object.defineProperty(n, "on" + t, { get: function get() {
              return this["_on" + t];
            }, set: function set(e) {
              this["_on" + t] && (this.removeEventListener(t, this["_on" + t]), delete this["_on" + t]), e && this.addEventListener(t, this["_on" + t] = e);
            }, enumerable: !0, configurable: !0 });
        };var n = !0,
            i = !0;function s(e, t, r) {
          var n = e.match(t);return n && n.length >= r && parseInt(n[r], 10);
        }function a(e) {
          return "[object Object]" === Object.prototype.toString.call(e);
        }function o(e, t, r) {
          t && !r.has(t.id) && (r.set(t.id, t), Object.keys(t).forEach(function (n) {
            n.endsWith("Id") ? o(e, e.get(t[n]), r) : n.endsWith("Ids") && t[n].forEach(function (t) {
              o(e, e.get(t), r);
            });
          }));
        }
      } },
        t = {};function r(n) {
      var i = t[n];if (void 0 !== i) return i.exports;var s = t[n] = { exports: {} };return e[n].call(s.exports, s, s.exports, r), s.exports;
    }r.n = function (e) {
      var t = e && e.__esModule ? function () {
        return e.default;
      } : function () {
        return e;
      };return r.d(t, { a: t }), t;
    }, r.d = function (e, t) {
      for (var n in t) {
        r.o(t, n) && !r.o(e, n) && Object.defineProperty(e, n, { enumerable: !0, get: t[n] });
      }
    }, r.o = function (e, t) {
      return Object.prototype.hasOwnProperty.call(e, t);
    }, r.r = function (e) {
      "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e, "__esModule", { value: !0 });
    };var n = {};return function () {
      "use strict";
      r.r(n), r.d(n, { DCVWebRTCRedirClient: function DCVWebRTCRedirClient() {
          return g;
        } });var e = { major: 0, minor: 3, patch: 1, buildNumber: 0, gitHash: "095db5cf9815180fcac836f02dfce117a1d0c60f", versionStr: "0.3.1+build.0" };var t = r(86),
          i = r(43),
          s = r.n(i);var a = Object.freeze({ HELLO_API_NAME: "hello", GETUSERMEDIA_API_NAME: "navigator.mediaDevices.getUserMedia", ENUMERATEDEVICES_API_NAME: "navigator.mediaDevices.enumerateDevices", GENERATE_CERTIFICATE_API_NAME: "RTCPeerConnection.generateCertificate", NEWRTCPEERCONNECTION_API_NAME: "new.RTCPeerConnection", PC_GET_CONFIGURATION: "pcs.getConfiguration", NEW_AUDIO_CONTEXT: "new.AudioContext", CREATE_WORKER: "new.Worker", WORKER_POST_MESSAGE: "workers.postMessage", WORKER_TERMINATE: "workers.terminate", AUDIO_CTX_CREATE_AUDIO_NODE: "audioContexts.createAudioNode", AUDIO_CTX_CLOSE: "audioContexts.close", AUDIO_NODE_CONNECT: "audioNodes.connect", AUDIO_NODE_DISCONNECT: "audioNodes.disconnect", AUDIO_PARAM_SET_VALUE_AT_TIME: "audioParams.setValueAtTime", AUDIO_PARAM_SET_RAMP_TO_VALUE_AT_TIME: "audioParams.linearRampToValueAtTime", AUDIO_NODE_SET_TYPE: "audioNodes.setType", AUDIO_NODE_START: "audioNodes.start", AUDIO_NODE_STOP: "audioNodes.stop", PC_CLOSE_API_NAME: "pcs.close", ADDSTREAM_API_NAME: "pcs.addStream", STREAM_REMOVE_TRACK: "streams.removeTrack", STREAM_ADD_TRACK: "streams.addTrack", GET_STATS_API_NAME: "pcs.getStats", CREATE_OFFER_API_NAME: "pcs.createOffer", SET_LOCAL_DESCRIPTION_API_NAME: "pcs.setLocalDescription", ADD_PC_EVENT_LISTENER: "pcs.addEventListener", ADD_TRACK_EVENT_LISTENER: "tracks.addEventListener", ADD_DTMF_EVENT_LISTENER: "dtmfs.addEventListener", ADD_WORKER_EVENT_LISTENER: "workers.addEventListener", SET_REMOTE_DESCRIPTION_API_NAME: "pcs.setRemoteDescription", ADD_ICE_CANDIDATE_API_NAME: "pcs.addIceCandidate", CREATE_MEDIA_ELEMENT_API_NAME: "document.createElement", MEDIA_ELEMENT_SET_SINK_ID_API_NAME: "mediaElements.setSinkId", MEDIA_ELEMENT_REMOVE: "mediaElements.remove", CREATE_ANSWER_API_NAME: "pcs.createAnswer", UNLOAD_EVENT_NAME: "unload", TOGGLE_TRACK_ENABLED_API_NAME: "tracks.enabled", TRACK_STOP_API_NAME: "tracks.stop", TRACK_GET_SETTINGS: "tracks.getSettings", GET_RECEIVERS_API_NAME: "pcs.getReceivers", ADD_TRACK_API_NAME: "pcs.addTrack", GET_SENDERS_API_NAME: "pcs.getSenders", GET_SENDER_STATS_API_NAME: "senders.getStats", GET_RECEIVER_STATS_API_NAME: "receivers.getStats", SET_MEDIA_SRC_OBJ_API_NAME: "mediaElements.srcObject", SET_MEDIA_HIDDEN_API_NAME: "mediaElements.hidden", SET_MEDIA_VOLUME_API_NAME: "mediaElements.volume", MEDIA_ELEMENT_PLAY_API_NAME: "mediaElements.play", MEDIA_ELEMENT_PAUSE_API_NAME: "mediaElements.pause", MEDIA_ELEMENT_MUTED: "mediaElements.muted", ADD_TRANSCEIVER_API_NAME: "pcs.addTransceiver", GET_TRANSCEIVERS_API_NAME: "pcs.getTransceivers", TRANSCEIVER_SET_CODEC_PREFS: "transceivers.setCodecPreferences", REPLACE_SENDER_TRACK_API_NAME: "senders.replaceTrack", PC_REMOVE_TRACK_API_NAME: "pcs.removeTrack", INSERT_DTMF_API_NAME: "dtmfSenders.insertDTMF", SENDER_CREATE_ENCODED_STREAMS: "senders.createEncodedStreams", RECEIVER_CREATE_ENCODED_STREAMS: "receivers.createEncodedStreams" }),
          o = Object.freeze({ SIG_STATE_CHANGE: "signalingstatechange", TRACK: "track", CONN_STATE_CHANGE: "connectionstatechange", ICE_CONN_STATE_CHANGE: "iceconnectionstatechange", ICE_GATHER_STATE_CHANGE: "icegatheringstatechange", ICE_CANDIDATE: "icecandidate", NEGOTIATION_NEEDED: "negotiationneeded" }),
          c = Object.freeze({ ENDED: "ended", MUTE: "mute", UNMUTE: "unmute" }),
          d = Object.freeze({ TONECHANGE: "tonechange" }),
          l = Object.freeze({ ERROR: "error", MESSAGE: "message", MESSAGE_ERROR: "messageerror" }),
          p = Object.freeze({ CHROME: "diilpfplcnhehakckkpmcmibmhbingnd", EDGE: "kjbbkjjiecchbcdoollhgffghfjnbhef" });var h = r(114);var u = r(591);function f() {
        return function () {
          var e = window.navigator.userAgent.toLowerCase();return e.indexOf("edg/") > -1 || e.indexOf("edge") > -1;
        }() ? p.EDGE : p.CHROME;
      }
      var m = function () {
        function m(t) {
          (0, _classCallCheck3.default)(this, m);
          if (this.version = e, this.config = t, this.logger = t.logger, this.clientInfo = null, this.certParams = { name: "ECDSA", namedCurve: "P-256" }, this.extensionId = f(), this.pcProxies = new Map(), this.audioContextProxies = new Map(), this.audioNodeProxies = new Map(), this.workerProxies = new Map(), this.streamProxies = new Map(), this.eventListeners = new Map(), this.mediaElementProxies = new Map(), this.transceiverProxies = new Map(), this.senderProxies = new Map(), this.dtmfProxies = new Map(), this.receiverProxies = new Map(), this.trackProxies = new Map(), this.overridenApis = new Map(), this.decoder = new TextDecoder("utf-8"), this.logger.info("Checking for chrome extension.  Chrome runtime: " + chrome.runtime), void 0 === chrome.runtime) throw new Error("Chrome runtime not available.  DCV WebRTC chrome extension may not be active.");this.overridenApis.set("navigator.mediaDevices.getUserMedia", navigator.mediaDevices.getUserMedia), this.overridenApis.set("navigator.mediaDevices.enumerateDevices", navigator.mediaDevices.enumerateDevices), this.overridenApis.set("window.RTCPeerConnection", window.RTCPeerConnection), this.overridenApis.set("window.RTCPeerConnection.generateCertificate", window.RTCPeerConnection.generateCertificate), this.overridenApis.set("window.AudioContext", window.AudioContext), this.overridenApis.set("window.Worker", window.Worker);
        }

        (0, _createClass3.default)(m, [{
          key: "makeMediaDeviceInfoProxies",
          value: function makeMediaDeviceInfoProxies(e) {
            return e.forEach(function (e) {
              e.toJSON = function () {
                return e;
              };
            }), e;
          }
        }, {
          key: "makeTrackProxy",
          value: function makeTrackProxy(e) {
            var _this = this;

            if (this.trackProxies.has(e.id)) {
              var _t16 = this.trackProxies.get(e.id);return Object.assign(_t16, e), _t16;
            }return this.trackProxies.set(e.id, e), e.pendingEvents = new Map(), e.stop = function () {
              _this.sendApiRequest(a.TRACK_STOP_API_NAME, [e.id]);
            }, e.getSettings = function () {
              return _this.sendApiRequest(a.TRACK_GET_SETTINGS, [e.id]).then(function (t) {
                e.settings = t;
              }), e.settings;
            }, e.addEventListener = function (t, r, n) {
              _this.logger.debug("Setting ended event listener via addEventListener."), _this.addTrackEventListener(e.id, t, r, n);
            }, e.removeEventListener = function (t, r) {
              _this.removeEventListener(e.id, t, r);
            }, Object.defineProperty(e, "onended", { set: function set(t) {
                _this.addTrackEventListener(e.id, c.ENDED, t);
              }, get: function get() {
                return null;
              } }), Object.defineProperty(e, "onmute", { set: function set(t) {
                _this.addTrackEventListener(e.id, c.MUTE, t);
              }, get: function get() {
                return null;
              } }), Object.defineProperty(e, "onunmute", { set: function set(t) {
                _this.addTrackEventListener(e.id, c.UNMUTE, t);
              }, get: function get() {
                return null;
              } }), e.trackEnabled = e.enabled, Object.defineProperty(e, "enabled", { set: function set(t) {
                e.trackEnabled = t, _this.sendApiRequest(a.TOGGLE_TRACK_ENABLED_API_NAME, [e.id, t]).then(function (t) {
                  _this.trackProxies.get(e.id).trackEnabled = t.enabled;
                });
              }, get: function get() {
                return e.trackEnabled;
              } }), this.preRegisterEvents(c, e, this.addTrackEventListener), e;
          }
        }, {
          key: "makeStreamProxy",
          value: function makeStreamProxy(e) {
            var _this2 = this;

            this.streamProxies.set(e.id, e);var t = new MediaStream();t.type = "proxy", t.proxy = e;var r = e.tracks ? e.tracks.map(function (e) {
              return _this2.makeTrackProxy(e);
            }) : [];return e.tracks = r, t.getTracks = function () {
              return r;
            }, t.getAudioTracks = function () {
              return r.filter(function (e) {
                return "audio" === e.kind;
              });
            }, t.getVideoTracks = function () {
              return r.filter(function (e) {
                return "video" === e.kind;
              });
            }, t.getTrackById = function (e) {
              return r.find(function (t) {
                return t.id === e;
              });
            }, t.createMediaElement = function (e) {
              return _this2.createMediaElement(e);
            }, t.addTrack = function (t) {
              _this2.sendApiRequest(a.STREAM_ADD_TRACK, [e.id, t.id]);
            }, t.removeTrack = function (t) {
              _this2.sendApiRequest(a.STREAM_REMOVE_TRACK, [e.id, t.id]);
            }, t;
          }
        }, {
          key: "updateTransceiverProxy",
          value: function updateTransceiverProxy(e) {
            var t = this.transceiverProxies.get(e.id);return t || (t = {}), Object.assign(t, e), e.receiver && "proxy" === e.receiver.type && (t.receiver = this.updateReceiverProxy(e.receiver)), e.sender && "proxy" === e.sender.type && (t.sender = this.updateSenderProxy(e.sender)), this.transceiverProxies.set(e.id, t), t;
          }
        }, {
          key: "updatePCSenders",
          value: function updatePCSenders(e, t) {
            var _this3 = this;

            var r = t.map(function (e) {
              return _this3.updateSenderProxy(e);
            });this.pcProxies.get(e).senders = r;
          }
        }, {
          key: "updatePCReceivers",
          value: function updatePCReceivers(e, t) {
            var _this4 = this;

            var r = t.map(function (e) {
              return _this4.updateReceiverProxy(e);
            });this.pcProxies.get(e).receivers = r;
          }
        }, {
          key: "updatePCTransceivers",
          value: function updatePCTransceivers(e, t) {
            var _this5 = this;

            var r = t;r.forEach(function (e) {
              _this5.updateTransceiverProxy(e);
            }), this.pcProxies.get(e).transceivers = r;
          }
        }, {
          key: "isValidApi",
          value: function isValidApi(e) {
            var t = !1;for (var _r10 in a) {
              if (a[_r10] === e) {
                t = !0;break;
              }
            }return t;
          }
        }, {
          key: "sendApiRequest",
          value: function () {
            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(e, t) {
              var r = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : crypto.randomUUID();

              var n, i, s, a, o, c, _e11, _e12, _t17, _e13, _e14;

              return _regenerator2.default.wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      this.logger.debug(e, t, r);n = { api: e, args: t }, i = u.deflateRaw(JSON.stringify(n));
                      s = { requestId: r, message: i, type: "request" };
                      this.logger.debug("Sending request:", JSON.stringify(s));_context.next = 6;
                      return chrome.runtime.sendMessage(this.extensionId, s);

                    case 6:
                      a = _context.sent;
                      i = a.message;o = u.inflateRaw(i), c = this.decoder.decode(o);

                      if (!(a.message = JSON.parse(c), this.logger.debug("Received response: ", JSON.stringify(a)), !a || !a.message || !a.type)) {
                        _context.next = 12;
                        break;
                      }

                      _e11 = "Received empty message or type, extensionResponse: " + JSON.stringify(a) + ", request: " + JSON.stringify(s) + ", message: " + JSON.stringify(n);
                      throw this.logger.error(_e11), new Error(_e11);

                    case 12:
                      if (!("error" === a.type)) {
                        _context.next = 15;
                        break;
                      }

                      _e12 = "Received error: " + JSON.stringify(a) + ", for request: " + JSON.stringify(s) + ", message: " + JSON.stringify(n), _t17 = null;
                      throw this.logger.error(_e12), a.message.error && a.message.error.message && (_e12 = a.message.error.message), a.message.error && a.message.error.name && (_t17 = a.message.error.name), new DOMException(_e12, _t17);

                    case 15:
                      if (!("response" !== a.type && "event" !== a.type)) {
                        _context.next = 18;
                        break;
                      }

                      _e13 = "Received invalid message type, type: " + JSON.stringify(a.type) + ", event: " + JSON.stringify(a) + ", request: " + JSON.stringify(s) + ", message: " + JSON.stringify(n);
                      throw this.logger.error(_e13), new Error(_e13);

                    case 18:
                      if (this.isValidApi(a.message.api)) {
                        _context.next = 21;
                        break;
                      }

                      _e14 = "Received invalid message api, event: " + JSON.stringify(a) + ", request: " + JSON.stringify(s) + ", message: " + JSON.stringify(n);
                      throw this.logger.error(_e14), new Error(_e14);

                    case 21:
                      return _context.abrupt("return", "event" === a.type ? a.message.event : a.message.response);

                    case 22:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _callee, this);
            }));

            function sendApiRequest(_x2, _x3) {
              return _ref.apply(this, arguments);
            }

            return sendApiRequest;
          }()
        }, {
          key: "getUserMediaInternal",
          value: function () {
            var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(e) {
              var t;
              return _regenerator2.default.wrap(function _callee2$(_context2) {
                while (1) {
                  switch (_context2.prev = _context2.next) {
                    case 0:
                      _context2.next = 2;
                      return this.sendApiRequest(a.GETUSERMEDIA_API_NAME, [e]);

                    case 2:
                      t = _context2.sent;
                      return _context2.abrupt("return", this.makeStreamProxy(t));

                    case 4:
                    case "end":
                      return _context2.stop();
                  }
                }
              }, _callee2, this);
            }));

            function getUserMediaInternal(_x4) {
              return _ref2.apply(this, arguments);
            }

            return getUserMediaInternal;
          }()
        }, {
          key: "getOverridenApi",
          value: function getOverridenApi(e) {
            return this.overridenApis.get(e);
          }
        }, {
          key: "getUserMedia",
          value: function () {
            var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(e) {
              var _t18, _r11, _t19, _t20, t;

              return _regenerator2.default.wrap(function _callee3$(_context3) {
                while (1) {
                  switch (_context3.prev = _context3.next) {
                    case 0:
                      if (!(e.audio && e.video)) {
                        _context3.next = 13;
                        break;
                      }

                      _context3.next = 3;
                      return navigator.permissions.query({ name: "microphone" });

                    case 3:
                      _t18 = _context3.sent;
                      _context3.next = 6;
                      return navigator.permissions.query({ name: "camera" });

                    case 6:
                      _r11 = _context3.sent;

                      if (!(_t18 && "granted" === _t18.state && _r11 && "granted" === _r11.state)) {
                        _context3.next = 11;
                        break;
                      }

                      _context3.next = 10;
                      return this.getUserMediaInternal(e);

                    case 10:
                      return _context3.abrupt("return", _context3.sent);

                    case 11:
                      _context3.next = 31;
                      break;

                    case 13:
                      if (!e.audio) {
                        _context3.next = 23;
                        break;
                      }

                      _context3.next = 16;
                      return navigator.permissions.query({ name: "microphone" });

                    case 16:
                      _t19 = _context3.sent;

                      if (!(_t19 && "granted" === _t19.state)) {
                        _context3.next = 21;
                        break;
                      }

                      _context3.next = 20;
                      return this.getUserMediaInternal(e);

                    case 20:
                      return _context3.abrupt("return", _context3.sent);

                    case 21:
                      _context3.next = 31;
                      break;

                    case 23:
                      if (!e.video) {
                        _context3.next = 31;
                        break;
                      }

                      _context3.next = 26;
                      return navigator.permissions.query({ name: "camera" });

                    case 26:
                      _t20 = _context3.sent;

                      if (!(_t20 && "granted" === _t20.state)) {
                        _context3.next = 31;
                        break;
                      }

                      _context3.next = 30;
                      return this.getUserMediaInternal(e);

                    case 30:
                      return _context3.abrupt("return", _context3.sent);

                    case 31:
                      t = [];
                      _context3.t0 = e.video;

                      if (!_context3.t0) {
                        _context3.next = 38;
                        break;
                      }

                      _context3.next = 36;
                      return this.getOverridenApi("navigator.mediaDevices.enumerateDevices").apply(navigator.mediaDevices);

                    case 36:
                      t = _context3.sent;
                      t = t.filter(function (e) {
                        return e.kind && e.kind.indexOf("video") > -1;
                      });

                    case 38:
                      if (!(e.audio && !e.video || e.video && t.length > 0)) {
                        _context3.next = 43;
                        break;
                      }

                      _context3.next = 41;
                      return this.getOverridenApi("navigator.mediaDevices.getUserMedia").apply(navigator.mediaDevices, [e]);

                    case 41:
                      _context3.t1 = function (e) {
                        e.stop();
                      };

                      _context3.sent.getTracks().forEach(_context3.t1);

                    case 43:
                      _context3.next = 45;
                      return this.getUserMediaInternal(e);

                    case 45:
                      return _context3.abrupt("return", _context3.sent);

                    case 46:
                    case "end":
                      return _context3.stop();
                  }
                }
              }, _callee3, this);
            }));

            function getUserMedia(_x5) {
              return _ref3.apply(this, arguments);
            }

            return getUserMedia;
          }()
        }, {
          key: "enumerateDevices",
          value: function () {
            var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4() {
              var e;
              return _regenerator2.default.wrap(function _callee4$(_context4) {
                while (1) {
                  switch (_context4.prev = _context4.next) {
                    case 0:
                      _context4.next = 2;
                      return this.sendApiRequest(a.ENUMERATEDEVICES_API_NAME, []);

                    case 2:
                      e = _context4.sent;
                      return _context4.abrupt("return", this.makeMediaDeviceInfoProxies(e));

                    case 4:
                    case "end":
                      return _context4.stop();
                  }
                }
              }, _callee4, this);
            }));

            function enumerateDevices() {
              return _ref4.apply(this, arguments);
            }

            return enumerateDevices;
          }()
        }, {
          key: "getVersion",
          value: function getVersion() {
            return e;
          }
        }, {
          key: "makeReceiverProxy",
          value: function makeReceiverProxy(e) {
            var _this6 = this;

            return e.track && (e.track = this.makeTrackProxy(e.track)), e.getSynchronizationSources = function () {
              return e.synchronizationSources;
            }, e.getStats = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5() {
              var t, r;
              return _regenerator2.default.wrap(function _callee5$(_context5) {
                while (1) {
                  switch (_context5.prev = _context5.next) {
                    case 0:
                      _context5.next = 2;
                      return _this6.sendApiRequest(a.GET_RECEIVER_STATS_API_NAME, [e.id]);

                    case 2:
                      t = _context5.sent;
                      r = new Map();
                      return _context5.abrupt("return", (t.forEach(function (e) {
                        r.set(e.id, e);
                      }), r));

                    case 5:
                    case "end":
                      return _context5.stop();
                  }
                }
              }, _callee5, _this6);
            })), e.createEncodedStreams = function () {
              var t = { id: crypto.randomUUID(), type: "proxy", readable: { id: crypto.randomUUID(), type: "proxy" }, writable: { id: crypto.randomUUID(), type: "proxy" } };return _this6.streamProxies.set(t.id, t), _this6.sendApiRequest(a.RECEIVER_CREATE_ENCODED_STREAMS, [e.id, t]), t;
            }, this.receiverProxies.set(e.id, e), e;
          }
        }, {
          key: "makeDTMFProxy",
          value: function makeDTMFProxy(e) {
            var _this7 = this;

            var t = e;return this.dtmfProxies.has(t.id) ? (t = this.dtmfProxies.get(t.id), Object.assign(t, e)) : (this.dtmfProxies.set(t.id, t), t.pendingEvents = new Map(), t.insertDTMF = function (e, r, n) {
              _this7.sendApiRequest(a.INSERT_DTMF_API_NAME, [t.id, e, r, n]);
            }, t.addEventListener = function (e, r, n) {
              _this7.addDtmfEventListener(t.id, e, r, n);
            }, t.removeEventListener = function (e, r) {
              _this7.removeEventListener(t.id, e, r);
            }, Object.defineProperty(t, "ontonechange", { set: function set(e) {
                _this7.addDtmfEventListener(t.id, d.TONECHANGE, e);
              }, get: function get() {
                return null;
              } }), this.preRegisterEvents(d, t, this.addDtmfEventListener)), t;
          }
        }, {
          key: "makeSenderProxy",
          value: function makeSenderProxy(e) {
            var _this8 = this;

            return e.track && (e.track = this.makeTrackProxy(e.track)), e.dtmf && (e.dtmf = this.makeDTMFProxy(e.dtmf)), e.getStats = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6() {
              var t;
              return _regenerator2.default.wrap(function _callee6$(_context6) {
                while (1) {
                  switch (_context6.prev = _context6.next) {
                    case 0:
                      _context6.next = 2;
                      return _this8.sendApiRequest(a.GET_SENDER_STATS_API_NAME, [e.id]);

                    case 2:
                      t = _context6.sent;
                      return _context6.abrupt("return", (t.has = function (e) {
                        return void 0 !== t.find(function (t) {
                          return t.id === e;
                        });
                      }, t.get = function (e) {
                        return t.find(function (t) {
                          return t.id === e;
                        });
                      }, t));

                    case 4:
                    case "end":
                      return _context6.stop();
                  }
                }
              }, _callee6, _this8);
            })), e.replaceTrack = function (t) {
              return e.track = t, _this8.sendApiRequest(a.REPLACE_SENDER_TRACK_API_NAME, [e.id, t]);
            }, e.createEncodedStreams = function () {
              var t = { id: crypto.randomUUID(), type: "proxy", readable: { type: "proxy", id: crypto.randomUUID() }, writable: { type: "proxy", id: crypto.randomUUID() } };return _this8.streamProxies.set(t.id, t), _this8.sendApiRequest(a.SENDER_CREATE_ENCODED_STREAMS, [e.id, t]), t;
            }, e;
          }
        }, {
          key: "updateSenderProxy",
          value: function updateSenderProxy(e) {
            var t = this.senderProxies.get(e.id);return t ? Object.assign(t, e) : (t = e, this.senderProxies.set(e.id, t)), this.makeSenderProxy(t);
          }
        }, {
          key: "updateReceiverProxy",
          value: function updateReceiverProxy(e) {
            var t = this.receiverProxies.get(e.id);return t ? Object.assign(t, e) : (t = e, this.receiverProxies.set(e.id, t)), this.makeReceiverProxy(t);
          }
        }, {
          key: "addTrack",
          value: function addTrack(e, t) {
            var _this9 = this;

            var r = crypto.randomUUID();this.sendApiRequest(a.ADD_TRACK_API_NAME, [r].concat(Array.prototype.slice.call(arguments))).then(function (e) {
              _this9.updateSenderProxy(e), _this9.updatePCSenders(e.pcId, e.senders), _this9.updatePCReceivers(e.pcId, e.receivers), _this9.updatePCTransceivers(e.pcId, e.transceivers);
            });var n = this.updateSenderProxy({ id: r });return this.pcProxies.get(e).senders.push(n), n;
          }
        }, {
          key: "updatePeerConnectionProxy",
          value: function updatePeerConnectionProxy(e) {
            var t = this.pcProxies.get(e.pcId);Object.assign(t, e), this.updatePCSenders(e.pcId, e.senders), this.updatePCReceivers(e.pcId, e.receivers), this.updatePCTransceivers(e.pcId, e.transceivers);
          }
        }, {
          key: "createPeerConnection",
          value: function createPeerConnection(e, t) {
            var _this10 = this;

            var r = crypto.randomUUID(),
                n = this;this.logger.debug("Creating RTCPeerConnection with id: " + r);var i = { type: "proxy", id: r, signalingState: "new", connectionState: "new", iceConnectionState: "new", iceGatheringState: "new", receivers: [], senders: [], transceivers: [], pendingEvents: new Map(), configuration: e, close: function close() {
                _this10.close(r);
              }, addStream: function addStream(e) {
                _this10.addStream(r, e);
              }, getConfiguration: function getConfiguration() {
                return _this10.sendApiRequest(a.PC_GET_CONFIGURATION, [r]).then(function (e) {
                  i.configuration = e;
                }), i.configuration;
              }, getStats: function getStats(e) {
                return _this10.getStats(r, e);
              }, createOffer: function createOffer(e) {
                return _this10.createOffer(r, e);
              }, createAnswer: function createAnswer(e) {
                return _this10.createAnswer(r, e);
              }, setLocalDescription: function setLocalDescription(e) {
                return _this10.setLocalDescription(r, e);
              }, addEventListener: function addEventListener(e, t) {
                _this10.addPeerConnectionEventListener(r, e, t);
              }, removeEventListener: function removeEventListener(e, t) {
                _this10.removeEventListener(r, e, t);
              }, getEventListener: function getEventListener(e) {
                return _this10.eventListeners.get(r).get(e);
              }, set onicecandidate(e) {
                this.addEventListener(o.ICE_CANDIDATE, e);
              }, get onicecandidate() {
                return this.getEventListener(o.ICE_CANDIDATE);
              }, set ontrack(e) {
                this.addEventListener(o.TRACK, e);
              }, get ontrack() {
                return this.getEventListener(o.TRACK);
              }, get onsignalingstatechange() {
                return this.getEventListener(o.SIG_STATE_CHANGE);
              }, set onsignalingstatechange(e) {
                this.addEventListener(o.SIG_STATE_CHANGE, e);
              }, get onconnectionstatechange() {
                return this.getEventListener(o.CONN_STATE_CHANGE);
              }, set onconnectionstatechange(e) {
                this.addEventListener(o.CONN_STATE_CHANGE, e);
              }, get oniceconnectionstatechange() {
                return this.getEventListener(o.ICE_CONN_STATE_CHANGE);
              }, set oniceconnectionstatechange(e) {
                this.addEventListener(o.ICE_CONN_STATE_CHANGE, e);
              }, get onicegatheringstatechange() {
                return this.getEventListener(o.ICE_GATHER_STATE_CHANGE);
              }, set onicegatheringstatechange(e) {
                this.addEventListener(o.ICE_GATHER_STATE_CHANGE, e);
              }, get onnegotiationneeded() {
                return this.getEventListener(o.NEGOTIATION_NEEDED);
              }, set onnegotiationneeded(e) {
                this.addEventListener(o.NEGOTIATION_NEEDED, e);
              }, setRemoteDescription: function setRemoteDescription(e) {
                return _this10.setRemoteDescription(r, e);
              }, addIceCandidate: function addIceCandidate(e) {
                return _this10.addIceCandidate(r, e);
              }, getRemoteStreams: function getRemoteStreams() {
                return _this10.logger.warn("getRemoteStreams not implemented on proxy."), [];
              }, getReceivers: function getReceivers() {
                return _this10.getReceivers(r);
              }, getSenders: function getSenders() {
                return _this10.getSenders(r);
              }, addTrack: function addTrack(e) {
                var t = [r].concat(Array.prototype.slice.call(arguments));return n.addTrack.apply(n, t);
              }, addTransceiver: function addTransceiver(e, t) {
                return _this10.addTransceiver(r, e, t);
              }, getTransceivers: function getTransceivers() {
                return _this10.getTransceivers(r);
              }, removeTrack: function removeTrack(e) {
                _this10.removeTrack(r, e);
              } };return this.pcProxies.set(r, i), this.sendApiRequest(a.NEWRTCPEERCONNECTION_API_NAME, [r, e, t], r).then(function (e) {
              _this10.updatePeerConnectionProxy(e);
            }, function (e) {
              _this10.logger.error("Error creating proxied RTCPeerConnection: " + e);
            }), this.preRegisterEvents(o, this.pcProxies.get(r), this.addPeerConnectionEventListener), this.pcProxies.get(r);
          }
        }, {
          key: "preRegisterEvents",
          value: function preRegisterEvents(e, t, r) {
            for (var _n13 in e) {
              "string" == typeof e[_n13] && r.apply(this, [t.id, e[_n13], function (e) {
                t.pendingEvents.has(e.eventName) || t.pendingEvents.set(e.eventName, []), t.pendingEvents.get(e.eventName).push(e);
              }]);
            }
          }
        }, {
          key: "updateAudioContextProxy",
          value: function updateAudioContextProxy(e) {
            var t = this.audioContextProxies.get(e.id);Object.assign(t, e);
          }
        }, {
          key: "updateAudioNodeProxy",
          value: function updateAudioNodeProxy(e) {
            var t = this.audioNodeProxies.get(e.id);Object.assign(t, e), e.stream && this.makeStreamProxy(e.stream);
          }
        }, {
          key: "makeAudioNodeProxy",
          value: function makeAudioNodeProxy(e, t) {
            var _this11 = this;

            return { type: "proxy", id: t, context: this.audioContextProxies.get(e), connect: function connect(e, r, n) {
                return _this11.sendApiRequest(a.AUDIO_NODE_CONNECT, [t, e, r, n]), e;
              }, disconnect: function disconnect(e, r, n) {
                _this11.sendApiRequest(a.AUDIO_NODE_DISCONNECT, [t, e, r, n]);
              } };
          }
        }, {
          key: "createAudioNode",
          value: function createAudioNode(e, t, r) {
            var _this12 = this;

            var n = crypto.randomUUID();return this.audioNodeProxies.set(n, this.makeAudioNodeProxy(e, n)), this.sendApiRequest(a.AUDIO_CTX_CREATE_AUDIO_NODE, [e, n, t, r], n).then(function (e) {
              _this12.updateAudioNodeProxy(e);
            }, function (e) {
              _this12.logger.error("Error creating proxied " + t + ": " + e);
            }), this.audioNodeProxies.get(n);
          }
        }, {
          key: "makeWorkerProxy",
          value: function makeWorkerProxy(e) {
            var _this13 = this;

            var t = { id: e, pendingEvents: new Map(), type: "proxy", postMessage: function postMessage(t, r) {
                _this13.sendApiRequest(a.WORKER_POST_MESSAGE, [e, t, r]);
              }, terminate: function terminate() {
                _this13.sendApiRequest(a.WORKER_TERMINATE, [e]);
              }, addEventListener: function addEventListener(e, r, n) {
                _this13.addWorkerEventListener(t.id, e, r, n);
              }, removeEventListener: function removeEventListener(e, r) {
                _this13.removeEventListener(t.id, e, r);
              } };return Object.defineProperty(t, "onerror", { set: function set(e) {
                _this13.addWorkerEventListener(t.id, l.ERROR, e);
              }, get: function get() {
                return null;
              } }), Object.defineProperty(t, "onmessage", { set: function set(e) {
                _this13.addWorkerEventListener(t.id, l.MESSAGE, e);
              }, get: function get() {
                return null;
              } }), Object.defineProperty(t, "onmessageerror", { set: function set(e) {
                _this13.addWorkerEventListener(t.id, l.MESSAGE_ERROR, e);
              }, get: function get() {
                return null;
              } }), t;
          }
        }, {
          key: "createWorker",
          value: function createWorker(e, t) {
            var _this14 = this;

            var r = crypto.randomUUID(),
                n = this.makeWorkerProxy(r);return this.workerProxies.set(r, n), fetch(e).then(function (e) {
              e.blob().then(function (e) {
                e.arrayBuffer().then(function (n) {
                  var i = (0, h.encode)(n);_this14.sendApiRequest(a.CREATE_WORKER, [r, e.type, i, t]).then(function (e) {
                    _this14.logger.debug("Created worker: " + JSON.stringify(e));
                  });
                });
              });
            }), this.logger.debug("Preregistering events for worker: " + JSON.stringify(n)), this.preRegisterEvents(l, n, this.addWorkerEventListener), n;
          }
        }, {
          key: "createAudioContext",
          value: function createAudioContext() {
            var _this15 = this;

            var e = crypto.randomUUID(),
                t = crypto.randomUUID();return this.audioContextProxies.set(e, { type: "proxy", id: e, destination: this.makeAudioNodeProxy(e, t), createGain: function createGain() {
                var t = _this15.createAudioNode(e, "Gain", []),
                    r = { setValueAtTime: function setValueAtTime(e, n) {
                    return r.currentValue = e, _this15.sendApiRequest(a.AUDIO_PARAM_SET_VALUE_AT_TIME, [t.id, e, n]), r;
                  }, linearRampToValueAtTime: function linearRampToValueAtTime(e, n) {
                    return _this15.sendApiRequest(a.AUDIO_PARAM_SET_RAMP_TO_VALUE_AT_TIME, [t.id, e, n]), r;
                  } };return Object.defineProperty(r, "value", { set: function set(e) {
                    return r.setValueAtTime(e, 0);
                  }, get: function get() {
                    return r.currentValue;
                  } }), t.gain = r, t;
              }, createOscillator: function createOscillator() {
                var t = _this15.createAudioNode(e, "Oscillator", []);t.start = function () {
                  var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
                  _this15.sendApiRequest(a.AUDIO_NODE_START, [t.id, e]);
                }, t.stop = function () {
                  var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
                  _this15.sendApiRequest(a.AUDIO_NODE_STOP, [t.id, e]);
                }, Object.defineProperty(t, "type", { set: function set(e) {
                    t.currentType = e, _this15.sendApiRequest(a.AUDIO_NODE_SET_TYPE, [t.id, e]);
                  }, get: function get() {
                    return t.currentType;
                  } });var r = { setValueAtTime: function setValueAtTime(e, n) {
                    return _this15.sendApiRequest(a.AUDIO_PARAM_SET_VALUE_AT_TIME, [t.id, e, n]), r;
                  } };return Object.defineProperty(r, "value", { set: function set(e) {
                    return r.setValueAtTime(e, 0);
                  }, get: function get() {
                    return r.currentValue;
                  } }), t.frequency = r, t;
              }, createMediaStreamSource: function createMediaStreamSource(t) {
                return _this15.createAudioNode(e, "MediaStreamSource", [t.proxy]);
              }, createAnalyser: function createAnalyser() {
                return _this15.createAudioNode(e, "Analyser", []);
              }, createMediaStreamDestination: function createMediaStreamDestination() {
                var t = _this15.createAudioNode(e, "MediaStreamDestination", []);return t.stream = _this15.makeStreamProxy({ id: t.id, tracks: [{ id: t.id, kind: "audio" }] }), t;
              }, close: function close() {
                return _this15.sendApiRequest(a.AUDIO_CTX_CLOSE, [e]);
              } }), this.sendApiRequest(a.NEW_AUDIO_CONTEXT, [e, t], e).then(function (e) {
              _this15.updateAudioContextProxy(e);
            }, function (e) {
              _this15.logger.error("Error creating proxied AudioContext: " + e);
            }), this.audioContextProxies.get(e);
          }
        }, {
          key: "close",
          value: function close(e) {
            this.eventListeners.get(e).clear(), this.sendApiRequest(a.PC_CLOSE_API_NAME, [e]);
          }
        }, {
          key: "addStream",
          value: function addStream(e, t) {
            this.sendApiRequest(a.ADDSTREAM_API_NAME, [e, t.proxy]);
          }
        }, {
          key: "getStats",
          value: function getStats(e, t) {
            return "function" == typeof t ? Promise.reject(new Error("callback based getStats is obsolete.")) : this.sendApiRequest(a.GET_STATS_API_NAME, [e, t]);
          }
        }, {
          key: "createOffer",
          value: function createOffer(e, t) {
            return this.sendApiRequest(a.CREATE_OFFER_API_NAME, [e, t]);
          }
        }, {
          key: "createAnswer",
          value: function createAnswer(e, t) {
            return this.sendApiRequest(a.CREATE_ANSWER_API_NAME, [e, t]);
          }
        }, {
          key: "setLocalDescription",
          value: function setLocalDescription(e, t) {
            return this.pcProxies.get(e).localDescription = t, this.sendApiRequest(a.SET_LOCAL_DESCRIPTION_API_NAME, [e, t]);
          }
        }, {
          key: "setRemoteDescription",
          value: function setRemoteDescription(e, t) {
            return this.sendApiRequest(a.SET_REMOTE_DESCRIPTION_API_NAME, [e, t]);
          }
        }, {
          key: "handleAddEventListenerResponse",
          value: function handleAddEventListenerResponse(e) {
            var _this16 = this;

            e.eventName === o.SIG_STATE_CHANGE ? this.updatePeerConnectionProxy(e) : e.eventName === o.TRACK ? (e.streams = e.streams.map(function (e) {
              return _this16.makeStreamProxy(e);
            }), e.track = this.makeTrackProxy(e.track), this.updatePeerConnectionProxy(e)) : (e.eventName === o.CONN_STATE_CHANGE || e.eventName === o.ICE_CONN_STATE_CHANGE || e.eventName === o.ICE_GATHER_STATE_CHANGE || e.eventName === o.ICE_CANDIDATE || e.eventName === o.NEGOTIATION_NEEDED) && this.updatePeerConnectionProxy(e), this.fireUpEventHandlers(this.pcProxies.get(e.pcId), e), this.sendApiRequest(a.ADD_PC_EVENT_LISTENER, [e.pcId, e.eventName]).then(function (e) {
              _this16.handleAddEventListenerResponse(e);
            });
          }
        }, {
          key: "fireUpEventHandlers",
          value: function fireUpEventHandlers(e, t) {
            if (this.eventListeners.get(e.id).has(t.eventName)) {
              var _r12 = e.pendingEvents;this.eventListeners.get(e.id).get(t.eventName).forEach(function (e, n) {
                0 === n ? e(t) : _r12.get(t.eventName).forEach(function (t) {
                  e(t);
                });
              }), _r12.set(t.eventName, []);
            }
          }
        }, {
          key: "handleAddTrackEventListenerResponse",
          value: function handleAddTrackEventListenerResponse(e) {
            var _this17 = this;

            "mute" !== e.eventName && "unmute" !== e.eventName || (this.trackProxies.get(e.trackId).muted = e.muted), this.fireUpEventHandlers(this.trackProxies.get(e.trackId), e), this.sendApiRequest(a.ADD_TRACK_EVENT_LISTENER, [e.trackId, e.eventName]).then(function (e) {
              _this17.handleAddTrackEventListenerResponse(e);
            });
          }
        }, {
          key: "handleAddDtmfEventListenerResponse",
          value: function handleAddDtmfEventListenerResponse(e) {
            var _this18 = this;

            this.fireUpEventHandlers(this.dtmfProxies.get(e.dtmfId), e), this.sendApiRequest(a.ADD_DTMF_EVENT_LISTENER, [e.dtmfId, e.eventName]).then(function (e) {
              _this18.handleAddDtmfEventListenerResponse(e);
            });
          }
        }, {
          key: "handleAddWorkerEventListenerResponse",
          value: function handleAddWorkerEventListenerResponse(e) {
            var _this19 = this;

            this.fireUpEventHandlers(this.workerProxies.get(e.wId), e), this.sendApiRequest(a.ADD_WORKER_EVENT_LISTENER, [e.wId, e.eventName]).then(function (e) {
              _this19.handleAddWorkerEventListenerResponse(e);
            });
          }
        }, {
          key: "addEventListener",
          value: function addEventListener(e, t, r) {
            this.eventListeners.has(e) || this.eventListeners.set(e, new Map()), this.eventListeners.get(e).has(t) || this.eventListeners.get(e).set(t, []), this.eventListeners.get(e).get(t).push(r);
          }
        }, {
          key: "addPeerConnectionEventListener",
          value: function addPeerConnectionEventListener(e, t, r) {
            var _this20 = this;

            this.addEventListener(e, t, r), this.sendApiRequest(a.ADD_PC_EVENT_LISTENER, [e, t]).then(function (e) {
              _this20.handleAddEventListenerResponse(e);
            });
          }
        }, {
          key: "addTrackEventListener",
          value: function addTrackEventListener(e, t, r, n) {
            var _this21 = this;

            this.addEventListener(e, t, r), this.sendApiRequest(a.ADD_TRACK_EVENT_LISTENER, [e, t, n]).then(function (e) {
              _this21.handleAddTrackEventListenerResponse(e);
            });
          }
        }, {
          key: "addDtmfEventListener",
          value: function addDtmfEventListener(e, t, r, n) {
            var _this22 = this;

            this.addEventListener(e, t, r), this.sendApiRequest(a.ADD_DTMF_EVENT_LISTENER, [e, t, n]).then(function (e) {
              _this22.handleAddDtmfEventListenerResponse(e);
            });
          }
        }, {
          key: "addWorkerEventListener",
          value: function addWorkerEventListener(e, t, r) {
            var _this23 = this;

            this.addEventListener(e, t, r), this.sendApiRequest(a.ADD_WORKER_EVENT_LISTENER, [e, t]).then(function (e) {
              _this23.handleAddWorkerEventListenerResponse(e);
            });
          }
        }, {
          key: "removeEventListener",
          value: function removeEventListener(e, t, r) {
            var n = this.eventListeners.get(e).get(t);var i = n.indexOf(r);i > -1 && n.splice(i, 1);
          }
        }, {
          key: "addIceCandidate",
          value: function addIceCandidate(e, t) {
            var r = t ? { sdpMLineIndex: t.sdpMLineIndex, sdpMid: t.sdpMid, candidate: t.candidate } : null;return this.sendApiRequest(a.ADD_ICE_CANDIDATE_API_NAME, [e, r]);
          }
        }, {
          key: "createMediaElement",
          value: function createMediaElement(e) {
            var _this24 = this;

            var t = crypto.randomUUID();this.sendApiRequest(a.CREATE_MEDIA_ELEMENT_API_NAME, [t, e], t).then(function (e) {
              _this24.mediaElementProxies.get(e.id).sinkId = e.sinkId;
            });var r = { id: t, type: "proxy", classList: new Set(), isMuted: !1, play: function play() {
                _this24.sendApiRequest(a.MEDIA_ELEMENT_PLAY_API_NAME, [t]);
              }, pause: function pause() {
                _this24.sendApiRequest(a.MEDIA_ELEMENT_PAUSE_API_NAME, [t]);
              }, setSinkId: function setSinkId(e) {
                return _this24.sendApiRequest(a.MEDIA_ELEMENT_SET_SINK_ID_API_NAME, [t, e]);
              }, remove: function remove() {
                return _this24.sendApiRequest(a.MEDIA_ELEMENT_REMOVE, [t]);
              } };return this.mediaElementProxies.set(t, r), r.classList.remove = function (e) {
              r.classList.delete(e);
            }, Object.assign(r, e), Object.defineProperty(r, "srcObject", { set: function set(e) {
                r.stream = e, _this24.sendApiRequest(a.SET_MEDIA_SRC_OBJ_API_NAME, [r.id, e && e.proxy ? e.proxy : e]);
              }, get: function get() {
                return r.stream;
              } }), Object.defineProperty(r, "hidden", { set: function set(e) {
                _this24.sendApiRequest(a.SET_MEDIA_HIDDEN_API_NAME, [r.id, e]);
              }, get: function get() {
                return r.hidden;
              } }), Object.defineProperty(r, "volume", { set: function set(e) {
                _this24.sendApiRequest(a.SET_MEDIA_VOLUME_API_NAME, [r.id, e]);
              }, get: function get() {
                return r.volume;
              } }), Object.defineProperty(r, "muted", { set: function set(e) {
                r.isMuted = e, _this24.sendApiRequest(a.MEDIA_ELEMENT_MUTED, [r.id, e]).then(function (e) {
                  r.isMuted = e.muted;
                });
              }, get: function get() {
                return r.isMuted;
              } }), r;
          }
        }, {
          key: "generateCertificate",
          value: function generateCertificate(e) {
            return this.sendApiRequest(a.GENERATE_CERTIFICATE_API_NAME, [e]);
          }
        }, {
          key: "getReceivers",
          value: function getReceivers(e) {
            var _this25 = this;

            return this.sendApiRequest(a.GET_RECEIVERS_API_NAME, [e]).then(function (e) {
              _this25.updatePCReceivers(e.pcId, e.receivers);
            }), this.pcProxies.get(e).receivers;
          }
        }, {
          key: "getSenders",
          value: function getSenders(e) {
            var _this26 = this;

            return this.sendApiRequest(a.GET_SENDERS_API_NAME, [e]).then(function (e) {
              _this26.updatePCSenders(e.pcId, e.senders);
            }), this.pcProxies.get(e).senders;
          }
        }, {
          key: "removeTrack",
          value: function removeTrack(e, t) {
            this.sendApiRequest(a.PC_REMOVE_TRACK_API_NAME, [e, t]);
          }
        }, {
          key: "getTransceivers",
          value: function getTransceivers(e) {
            var _this27 = this;

            return this.sendApiRequest(a.GET_TRANSCEIVERS_API_NAME, [e]).then(function (e) {
              _this27.updatePCTransceivers(e.pcId, e.transceivers);
            }), this.pcProxies.get(e).transceivers;
          }
        }, {
          key: "addTransceiver",
          value: function addTransceiver(e, t, r) {
            var _this28 = this;

            var n = crypto.randomUUID(),
                i = { type: "proxy", id: n, sender: this.makeSenderProxy({ id: crypto.randomUUID() }), receiver: this.makeReceiverProxy({ id: crypto.randomUUID() }), setCodecPreferences: function setCodecPreferences(e) {
                _this28.sendApiRequest(a.TRANSCEIVER_SET_CODEC_PREFS, [n, e]);
              } };return this.transceiverProxies.set(i.id, i), this.pcProxies.get(e).transceivers.push(i), this.pcProxies.get(e).receivers.push(i.receiver), this.pcProxies.get(e).senders.push(i.sender), this.sendApiRequest(a.ADD_TRANSCEIVER_API_NAME, [e, i, "string" == typeof t ? t : this.makeTrackProxy(t), r]).then(function (e) {
              _this28.updateTransceiverProxy(e), _this28.updatePCSenders(e.pcId, e.senders), _this28.updatePCReceivers(e.pcId, e.receivers), _this28.updatePCTransceivers(e.pcId, e.transceivers);
            }), i;
          }
        }, {
          key: "setLogger",
          value: function setLogger(e) {
            this.logger = e;
          }
        }, {
          key: "overrideWebRTC",
          value: function overrideWebRTC() {
            var _this29 = this;

            this.logger.info("Overriding WebRTC interfaces for the current webapp.");var e = this;navigator.mediaDevices.getUserMedia = function (e) {
              return _this29.getUserMedia(e);
            }, navigator.mediaDevices.enumerateDevices = function () {
              return _this29.enumerateDevices();
            }, window.RTCPeerConnection = function (t, r) {
              return e.createPeerConnection(t, r);
            }, window.RTCPeerConnection.generateCertificate = function (t) {
              return e.generateCertificate(t);
            }, window.AudioContext = function () {
              return e.createAudioContext();
            }, window.Worker = function (t, r) {
              return e.createWorker(t, r);
            };
          }
        }, {
          key: "sendHelloRequest",
          value: function () {
            var _ref7 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee7() {
              var _this30 = this;

              var t;
              return _regenerator2.default.wrap(function _callee7$(_context7) {
                while (1) {
                  switch (_context7.prev = _context7.next) {
                    case 0:
                      _context7.next = 2;
                      return this.sendApiRequest(a.HELLO_API_NAME, []);

                    case 2:
                      t = _context7.sent;
                      return _context7.abrupt("return", (globalThis.DCVWebRTCRedirProxy || (this.logger.info("Running in a DCV WebRTC redirection env, proxy version: " + e.versionStr + " - " + e.gitHash), this.logger.info("Client info: " + JSON.stringify(t)), window.addEventListener("beforeunload", function (e) {
                        var t = { pcIds: [], streamIds: [], mediaElementIds: [], transceiverIds: [], senderIds: [], receiverIds: [], trackIds: [], workerIds: [] };_this30.pcProxies.forEach(function (e, r) {
                          t.pcIds.push(r);
                        }), _this30.streamProxies.forEach(function (e, r) {
                          t.streamIds.push(r);
                        }), _this30.trackProxies.forEach(function (e, r) {
                          t.trackIds.push(r);
                        }), _this30.workerProxies.forEach(function (e, r) {
                          t.workerIds.push(r);
                        }), _this30.mediaElementProxies.forEach(function (e, r) {
                          t.mediaElementIds.push(r);
                        }), _this30.transceiverProxies.forEach(function (e, r) {
                          t.transceiverIds.push(r);
                        }), _this30.senderProxies.forEach(function (e, r) {
                          t.senderIds.push(r);
                        }), _this30.receiverProxies.forEach(function (e, r) {
                          t.receiverIds.push(r);
                        }), _this30.sendApiRequest(a.UNLOAD_EVENT_NAME, [t]);
                      })), t));

                    case 4:
                    case "end":
                      return _context7.stop();
                  }
                }
              }, _callee7, this);
            }));

            function sendHelloRequest() {
              return _ref7.apply(this, arguments);
            }

            return sendHelloRequest;
          }()
        }], [{
          key: "setInitCallback",
          value: function setInitCallback(e, t) {
            var r = globalThis.DCVWebRTCRedirProxy;if (r) e({ success: !0, proxy: r });else {
              m.initCallbacks || (m.initCallbacks = new Map());var _r13 = setTimeout(function (e) {
                e({ success: !1, error: "Failed to initialize DCVWebRTCPeerConnectionProxy in " + t + "ms" }), m.initCallbacks.delete(e);
              }, t, e);m.initCallbacks.set(e, _r13);
            }
          }
        }]);
        return m;
      }();

      var _ = r(591);
      var g = function () {
        function g(r) {
          (0, _classCallCheck3.default)(this, g);
          this.version = e, this.config = r, this.logger = r.logger ? r.logger : s(), this.channel = r.channel, this.decoder = new TextDecoder("utf-8"), this.messageBuffer = null, this.pcs = new Map(), this.pcPromises = new Map(), this.audioContexts = new Map(), this.audioNodes = new Map(), this.workers = new Map(), this.workerPromises = new Map(), this.certs = new Map(), this.streams = new Map(), this.tracks = new Map(), this.offers = new Map(), this.answers = new Map(), this.remoteDescriptions = new Map(), this.mediaElements = new Map(), this.audios = new Map(), this.senders = new Map(), this.dtmfSenders = new Map(), this.receivers = new Map(), this.transceivers = new Map(), this.logger.info("Created WebRTC Redirection Client version: " + e.versionStr + " - " + e.gitHash + " - " + JSON.stringify(t.Z.browserDetails));
        }

        (0, _createClass3.default)(g, [{
          key: "encodeBase64",
          value: function encodeBase64(e) {
            return (0, h.encode)(e);
          }
        }, {
          key: "decodeBase64",
          value: function decodeBase64(e) {
            return (0, h.decode)(e);
          }
        }, {
          key: "getVersion",
          value: function getVersion() {
            return this.version;
          }
        }, {
          key: "concatUint8Arrays",
          value: function concatUint8Arrays(e) {
            var t = e.reduce(function (e, t) {
              return e + t.byteLength;
            }, 0),
                r = new Uint8Array(t);var n = 0;return e.forEach(function (e) {
              r.set(e, n), n += e.byteLength;
            }), r;
          }
        }, {
          key: "parseHeader",
          value: function parseHeader(e) {
            return e[3] << 24 | e[2] << 16 | e[1] << 8 | e[0];
          }
        }, {
          key: "onMessageReceived",
          value: function onMessageReceived(e) {
            this.logger.debug("onMessageReceived, binaryPayload.byteLength: " + e.byteLength);try {
              var _t21 = 0;for (null === this.messageBuffer ? this.messageBuffer = new Uint8Array(e) : this.messageBuffer = this.concatUint8Arrays([this.messageBuffer, new Uint8Array(e)]), this.messageBuffer.byteLength >= 4 && (_t21 = this.parseHeader(this.messageBuffer)); _t21 > 0 && this.messageBuffer.byteLength >= _t21 + 4;) {
                var _e15 = 4,
                    _r14 = 4 + _t21,
                    _n14 = this.messageBuffer.slice(_e15, _r14);this.logger.debug("Decoding payload: ", _n14);var _i5 = this.decoder.decode(_n14);this.logger.debug("Received message: " + _i5);var _s = JSON.parse(_i5);this.logger.debug("Received json: ", _s), this.handleMessage(_s), this.messageBuffer = this.messageBuffer.slice(_r14), _t21 = this.messageBuffer.byteLength >= 4 ? this.parseHeader(this.messageBuffer) : 0;
              }
            } catch (e) {
              this.logger.error("Failed to parse JSON from binaryPayload: " + e), this.messageBuffer = null;
            }
          }
        }, {
          key: "getPeerConnection",
          value: function getPeerConnection(e) {
            var _this31 = this;

            return this.pcs.has(e) ? this.pcs.get(e) : (this.pcPromises.has(e) || this.pcPromises.set(e, []), new Promise(function (t, r) {
              _this31.pcPromises.get(e).push({ resolve: t, reject: r });
            }));
          }
        }, {
          key: "getPendingEvent",
          value: function getPendingEvent(e, t) {
            return e.pendingEvents.has(t) && e.pendingEvents.get(t).length > 0 ? e.pendingEvents.get(t).shift() : (e.eventPromises.has(t) || e.eventPromises.set(t, []), new Promise(function (r, n) {
              e.eventPromises.get(t).push({ resolve: r, reject: n });
            }));
          }
        }, {
          key: "getStream",
          value: function getStream(e) {
            return this.streams.get(e);
          }
        }, {
          key: "makeTrackTO",
          value: function makeTrackTO(e) {
            var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : e.id ? e.id : crypto.randomUUID();
            return this.tracks.set(t, e), { type: "proxy", contentHint: e.contentHint, enabled: e.enabled, id: t, kind: e.kind, label: e.label, muted: e.muted, readyState: e.readyState, settings: e.getSettings() };
          }
        }, {
          key: "makeStreamTO",
          value: function makeStreamTO(e) {
            var _this32 = this;

            var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : e.id ? e.id : crypto.randomUUID();
            this.streams.set(t, e);var r = e.getTracks().map(function (e) {
              return _this32.makeTrackTO(e);
            });return { type: "proxy", id: t, active: e.active, tracks: r };
          }
        }, {
          key: "makeSyncronizationSourceTO",
          value: function makeSyncronizationSourceTO(e) {
            return { audioLevel: e.audioLevel, rtpTimestamp: e.rtpTimestamp, source: e.source, timestamp: e.timestamp };
          }
        }, {
          key: "makeReceiverTO",
          value: function makeReceiverTO(e) {
            var _this33 = this;

            var t = e.getSynchronizationSources();t = t.map(function (e) {
              return _this33.makeSyncronizationSourceTO(e);
            });var r = { id: e.id ? e.id : crypto.randomUUID(), type: "proxy", track: e.track ? this.makeTrackTO(e.track) : null, synchronizationSources: t, stats: [] };return e.id = r.id, this.receivers.set(r.id, e), r;
          }
        }, {
          key: "makeDTMFSenderTO",
          value: function makeDTMFSenderTO(e) {
            var t = { id: e.id ? e.id : crypto.randomUUID(), type: "proxy", toneBuffer: e.toneBuffer };return e.id = t.id, this.dtmfSenders.set(t.id, e), t;
          }
        }, {
          key: "makeSenderTO",
          value: function makeSenderTO(e) {
            var t = { id: e.id ? e.id : crypto.randomUUID(), type: "proxy", track: e.track ? this.makeTrackTO(e.track) : null, dtmf: e.dtmf ? this.makeDTMFSenderTO(e.dtmf) : null };return e.id = t.id, this.senders.set(t.id, e), t;
          }
        }, {
          key: "makeTransceiverTO",
          value: function makeTransceiverTO(e) {
            return { id: e.id, type: "proxy", currentDirection: e.currentDirection, direction: e.direction, mid: e.mid, receiver: e.receiver ? this.makeReceiverTO(e.receiver) : null, sender: e.sender ? this.makeSenderTO(e.sender) : null, stopped: e.stopped };
          }
        }, {
          key: "findProxySubject",
          value: function findProxySubject(e) {
            return this.pcs.has(e) ? this.pcs.get(e) : this.audioContexts.has(e) ? this.audioContexts.get(e) : this.audioNodes.has(e) ? this.audioNodes.get(e) : this.workers.has(e) ? this.workers.get(e) : this.certs.has(e) ? this.certs.get(e) : this.streams.has(e) ? this.streams.get(e) : this.offers.has(e) ? this.offers.get(e) : this.answers.has(e) ? this.answers.get(e) : this.remoteDescriptions.has(e) ? this.remoteDescriptions.get(e) : this.mediaElements.has(e) ? this.mediaElements.get(e) : this.audios.has(e) ? this.audios.get(e) : this.senders.has(e) ? this.senders.get(e) : this.dtmfSenders.has(e) ? this.dtmfSenders.get(e) : this.receivers.has(e) ? this.recevers.get(e) : this.transceivers.has(e) ? this.transceivers.get(e) : this.tracks.has(e) ? this.tracks.get(e) : null;
          }
        }, {
          key: "traverse",
          value: function traverse(e, t) {
            if ("object" == (typeof e === "undefined" ? "undefined" : (0, _typeof3.default)(e))) for (var _r15 in e) {
              Object.prototype.hasOwnProperty.call(e, _r15) && (t.apply(this, [e, _r15, e[_r15]]), null !== e[_r15] && "object" == (0, _typeof3.default)(e[_r15]) && this.traverse(e[_r15], t));
            }
          }
        }, {
          key: "getWorker",
          value: function getWorker(e) {
            var _this34 = this;

            return this.workers.has(e) ? this.workers.get(e) : (this.workerPromises.has(e) || this.workerPromises.set(e, []), new Promise(function (t, r) {
              _this34.workerPromises.get(e).push({ resolve: t, reject: r });
            }));
          }
        }, {
          key: "gatherPeerConnectionState",
          value: function gatherPeerConnectionState(e, t) {
            var _this35 = this;

            e.canTrickleIceCandidates = t.canTrickleIceCandidates, e.connectionState = t.connectionState, e.currentLocalDescription = t.currentLocalDescription, e.currentRemoteDescription = t.currentRemoteDescription, e.iceConnectionState = t.iceConnectionState, e.iceGatheringState = t.iceGatheringState, e.iceGatheringState = t.iceGatheringState, e.localDescription = t.localDescription, e.peerIdentity = t.peerIdentity, e.pendingLocalDescription = t.pendingLocalDescription, e.pendingRemoteDescription = t.pendingRemoteDescription, e.remoteDescription = t.remoteDescription, e.sctp = t.sctp, e.signalingState = t.signalingState, e.configuration = t.getConfiguration(), e.transceivers = t.getTransceivers().map(function (e) {
              return _this35.makeTransceiverTO(e);
            }), e.senders = t.getSenders().map(function (e) {
              return _this35.makeSenderTO(e);
            }), e.receivers = t.getReceivers().map(function (e) {
              return _this35.makeReceiverTO(e);
            });
          }
        }, {
          key: "callWebRTCApi",
          value: function () {
            var _ref8 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee8(e, r, n) {
              var _this36 = this;

              var _n15, _e16, _t22, _n16, _e17, _t23, _r16, _i6, _n17, _e18, _t24, _r17, _i7, _n18, _e19, _t25, _n19, _e20, _t26, _r18, _e21, _i8, _s2, _n20, _e22, _n21, _e23, _t27, _r19, _i9, _s3, _a2, _o, _c, _n22, _e24, _t28, _r20, _i10, _n23, _e25, _t29, _r21, _n24, _e26, _t30, _r22, _i11, _s4, _a3, _o2, _c2, _e27, _n25, _e28, _n26, _e29, _t31, _r23, _i12, _s5, _a4, _n27, _e30, _t32, _r24, _i13, _s6, _a5, _n28, _e31, _t33, _n29, _e32, _t34, _n30, _e33, _t35, _n31, _e34, _t36, _r25, _i14, _n32, _e35, _t37, _r26, _i15, _n33, _e36, _n34, _e37, _n35, _e38, _t38, _r27, _i16, _n36, _e39, _t39, _n37, _e40, _t40, _r28, _i17, _s7, _a6, _o3, _c3, _d, _n38, _e41, _t41, _r29, _i18, _s8, _e42, _a7, _o4, _n39, _e43, _n40, _e44, _t42, _r31, _n41, _e45, _t43, _r32, _i19, _s9, _n42, _e46, _t44, _r33, _n43, _e47, _t45, _r34, _n44, _e48, _t46, _r35, _i20, _n45, _e49, _t47, _r36, _i21, _n46, _e50, _t48, _i22, _s10, _n47, _e51, _t49, _i23, _s11, _n48, _e52, _t50, _r37, _i24, _s12, _n49, _e53, _t51, _r38, _n50, _e54, _t52, _r39, _n51, _e55, _t53, _i25, _e56, _n52, _n53, _e57, _t54, _i26, _s14, _e58, _n54, _n55, _e59, _t56, _i27, _e60, _n56, _n57, _e61, _t58, _i28, _s15, _e62, _n58, _n59, _e63, _t60, _r41, _n60, _e64, _t61, _r42, _n61, _e65, _t62, _r43, _n62, _e66, _t63, _n63, _e67, _t64, _r44, _n64, _e68, _t65, _n65, _e69, _n66, _e70, _n67, _e71, _n68, _e72, _t66, _r45, _n69, _e73, _t67, _n70, _e74, _n71, _e75, _t68, _r46, _n72, _e76, _t69, _r47, _n73, _e77;

              return _regenerator2.default.wrap(function _callee8$(_context8) {
                while (1) {
                  switch (_context8.prev = _context8.next) {
                    case 0:
                      _context8.t0 = e;
                      _context8.next = _context8.t0 === a.HELLO_API_NAME ? 3 : _context8.t0 === a.GETUSERMEDIA_API_NAME ? 4 : _context8.t0 === a.ENUMERATEDEVICES_API_NAME ? 10 : _context8.t0 === a.STREAM_ADD_TRACK ? 14 : _context8.t0 === a.STREAM_REMOVE_TRACK ? 16 : _context8.t0 === a.GENERATE_CERTIFICATE_API_NAME ? 18 : _context8.t0 === a.NEWRTCPEERCONNECTION_API_NAME ? 24 : _context8.t0 === a.PC_GET_CONFIGURATION ? 30 : _context8.t0 === a.CREATE_WORKER ? 34 : _context8.t0 === a.WORKER_POST_MESSAGE ? 36 : _context8.t0 === a.NEW_AUDIO_CONTEXT ? 44 : _context8.t0 === a.AUDIO_CTX_CREATE_AUDIO_NODE ? 46 : _context8.t0 === a.AUDIO_CTX_CLOSE ? 53 : _context8.t0 === a.AUDIO_NODE_CONNECT ? 55 : _context8.t0 === a.AUDIO_NODE_DISCONNECT ? 57 : _context8.t0 === a.AUDIO_NODE_SET_TYPE ? 59 : _context8.t0 === a.AUDIO_NODE_START ? 61 : _context8.t0 === a.AUDIO_NODE_STOP ? 63 : _context8.t0 === a.AUDIO_PARAM_SET_VALUE_AT_TIME ? 65 : _context8.t0 === a.AUDIO_PARAM_SET_RAMP_TO_VALUE_AT_TIME ? 67 : _context8.t0 === a.GET_RECEIVERS_API_NAME ? 69 : _context8.t0 === a.GET_SENDERS_API_NAME ? 76 : _context8.t0 === a.INSERT_DTMF_API_NAME ? 83 : _context8.t0 === a.GET_TRANSCEIVERS_API_NAME ? 85 : _context8.t0 === a.TRANSCEIVER_SET_CODEC_PREFS ? 91 : _context8.t0 === a.ADD_TRACK_API_NAME ? 92 : _context8.t0 === a.ADD_TRANSCEIVER_API_NAME ? 106 : _context8.t0 === a.PC_CLOSE_API_NAME ? 119 : _context8.t0 === a.ADDSTREAM_API_NAME ? 124 : _context8.t0 === a.GET_STATS_API_NAME ? 130 : _context8.t0 === a.GET_SENDER_STATS_API_NAME ? 141 : _context8.t0 === a.GET_RECEIVER_STATS_API_NAME ? 148 : _context8.t0 === a.REPLACE_SENDER_TRACK_API_NAME ? 155 : _context8.t0 === a.PC_REMOVE_TRACK_API_NAME ? 159 : _context8.t0 === a.CREATE_OFFER_API_NAME ? 167 : _context8.t0 === a.CREATE_ANSWER_API_NAME ? 177 : _context8.t0 === a.SET_LOCAL_DESCRIPTION_API_NAME ? 187 : _context8.t0 === a.SET_REMOTE_DESCRIPTION_API_NAME ? 195 : _context8.t0 === a.ADD_ICE_CANDIDATE_API_NAME ? 204 : _context8.t0 === a.ADD_PC_EVENT_LISTENER ? 210 : _context8.t0 === a.ADD_TRACK_EVENT_LISTENER ? 225 : _context8.t0 === a.ADD_WORKER_EVENT_LISTENER ? 235 : _context8.t0 === a.ADD_DTMF_EVENT_LISTENER ? 250 : _context8.t0 === a.CREATE_MEDIA_ELEMENT_API_NAME ? 260 : _context8.t0 === a.MEDIA_ELEMENT_SET_SINK_ID_API_NAME ? 265 : _context8.t0 === a.SET_MEDIA_SRC_OBJ_API_NAME ? 269 : _context8.t0 === a.MEDIA_ELEMENT_MUTED ? 271 : _context8.t0 === a.SET_MEDIA_HIDDEN_API_NAME ? 273 : _context8.t0 === a.SET_MEDIA_VOLUME_API_NAME ? 275 : _context8.t0 === a.MEDIA_ELEMENT_PLAY_API_NAME ? 277 : _context8.t0 === a.MEDIA_ELEMENT_PAUSE_API_NAME ? 279 : _context8.t0 === a.MEDIA_ELEMENT_REMOVE ? 281 : _context8.t0 === a.TOGGLE_TRACK_ENABLED_API_NAME ? 283 : _context8.t0 === a.TRACK_STOP_API_NAME ? 285 : _context8.t0 === a.TRACK_GET_SETTINGS ? 287 : _context8.t0 === a.SENDER_CREATE_ENCODED_STREAMS ? 289 : _context8.t0 === a.RECEIVER_CREATE_ENCODED_STREAMS ? 291 : _context8.t0 === a.UNLOAD_EVENT_NAME ? 293 : 295;
                      break;

                    case 3:
                      return _context8.abrupt("return", { version: this.version, platform: "web", browserDetails: t.Z.browserDetails, userAgent: navigator.userAgent });

                    case 4:
                      _n15 = (0, _slicedToArray3.default)(n, 1);
                      _e16 = _n15[0];
                      _context8.next = 8;
                      return navigator.mediaDevices.getUserMedia(_e16);

                    case 8:
                      _t22 = _context8.sent;
                      return _context8.abrupt("return", this.makeStreamTO(_t22));

                    case 10:
                      _context8.next = 12;
                      return navigator.mediaDevices.enumerateDevices();

                    case 12:
                      _context8.t1 = function (e) {
                        return e.toJSON();
                      };

                      return _context8.abrupt("return", _context8.sent.map(_context8.t1));

                    case 14:
                      _n16 = (0, _slicedToArray3.default)(n, 2), _e17 = _n16[0], _t23 = _n16[1], _r16 = this.streams.get(_e17), _i6 = this.tracks.get(_t23);
                      return _context8.abrupt("return", (_r16.addTrack(_i6), {}));

                    case 16:
                      _n17 = (0, _slicedToArray3.default)(n, 2), _e18 = _n17[0], _t24 = _n17[1], _r17 = this.streams.get(_e18), _i7 = this.tracks.get(_t24);
                      return _context8.abrupt("return", (_r17.removeTrack(_i7), {}));

                    case 18:
                      _n18 = (0, _slicedToArray3.default)(n, 1);
                      _e19 = _n18[0];
                      _context8.next = 22;
                      return RTCPeerConnection.generateCertificate(_e19);

                    case 22:
                      _t25 = _context8.sent;
                      return _context8.abrupt("return", (this.certs.set(r, _t25), { type: "proxy", id: r, expires: _t25.expires, fingerprints: _t25.getFingerprints() }));

                    case 24:
                      _n19 = (0, _slicedToArray3.default)(n, 3), _e20 = _n19[0], _t26 = _n19[1], _r18 = _n19[2];
                      if (_t26 && _t26.certificates) {
                        _e21 = _t26.certificates.map(function (e) {
                          return _this36.certs.get(e.id);
                        });
                        _t26.certificates = _e21;
                      }_i8 = new RTCPeerConnection(_t26, _r18);
                      this.pcs.set(_e20, _i8), this.pcPromises.has(_e20) && (this.pcPromises.get(_e20).forEach(function (e) {
                        e.resolve(e);
                      }), this.pcPromises.set(_e20, []));_s2 = { type: "proxy", pcId: _e20 };
                      return _context8.abrupt("return", (this.gatherPeerConnectionState(_s2, _i8), _s2));

                    case 30:
                      _n20 = (0, _slicedToArray3.default)(n, 1), _e22 = _n20[0];
                      _context8.next = 33;
                      return this.getPeerConnection(_e22);

                    case 33:
                      return _context8.abrupt("return", _context8.sent.getConfiguration());

                    case 34:
                      _n21 = (0, _slicedToArray3.default)(n, 4), _e23 = _n21[0], _t27 = _n21[1], _r19 = _n21[2], _i9 = _n21[3], _s3 = (0, h.decode)(_r19), _a2 = new Blob([_s3], { type: _t27 }), _o = URL.createObjectURL(_a2), _c = new Worker(_o, _i9);
                      return _context8.abrupt("return", (this.workers.set(_e23, _c), this.workerPromises.has(_e23) && (this.workerPromises.get(_e23).forEach(function (e) {
                        e.resolve(_c);
                      }), this.workerPromises.set(_e23, [])), { type: "proxy", id: _e23 }));

                    case 36:
                      _n22 = (0, _slicedToArray3.default)(n, 3);
                      _e24 = _n22[0];
                      _t28 = _n22[1];
                      _r20 = _n22[2];
                      _context8.next = 42;
                      return this.getWorker(_e24);

                    case 42:
                      _i10 = _context8.sent;
                      return _context8.abrupt("return", (this.logger.debug("Message before traversing: ", JSON.stringify(_t28)), this.traverse(_t28, function (e, t, r) {
                        "proxy" === r.type && r.id && (e[t] = _this36.findProxySubject(r.id));
                      }), this.logger.debug("Message after traversing: ", _t28), this.logger.debug("Options before traversing: ", JSON.stringify(_r20)), this.traverse(_r20, function (e, t, r) {
                        "proxy" === r.type && r.id && (e[t] = _this36.findProxySubject(r.id));
                      }), this.logger.debug("Options after traversing: ", _r20), _i10.postMessage(_t28, _r20), { type: "proxy", id: _e24 }));

                    case 44:
                      _n23 = (0, _slicedToArray3.default)(n, 2), _e25 = _n23[0], _t29 = _n23[1], _r21 = new AudioContext();
                      return _context8.abrupt("return", (this.audioContexts.set(_e25, _r21), this.audioNodes.set(_t29, _r21.destination), { type: "proxy", id: _e25, baseLatency: _r21.baseLatency, currentTime: _r21.currentTime, outputLatency: _r21.outputLatency, sampleRate: _r21.sampleRate, sinkId: _r21.sinkId, state: _r21.state }));

                    case 46:
                      _n24 = (0, _slicedToArray3.default)(n, 4), _e26 = _n24[0], _t30 = _n24[1], _r22 = _n24[2], _i11 = _n24[3], _s4 = this.audioContexts.get(_e26), _a3 = _s4["create" + _r22];
                      _i11 = _i11.map(function (e) {
                        return "proxy" === e.type ? _this36.findProxySubject(e.id) : e;
                      });_o2 = _a3.apply(_s4, _i11);
                      this.audioNodes.set(_t30, _o2);_c2 = null;
                      if (_o2.stream) {
                        _e27 = _o2.stream.getTracks().map(function (e) {
                          return _this36.makeTrackTO(e, _t30);
                        });
                        _c2 = this.makeStreamTO(_o2.stream, _t30), _c2.tracks = _e27;
                      }return _context8.abrupt("return", { id: _t30, channelCount: _o2.channelCount, channelCountMode: _o2.channelCountMode, channelInterpretation: _o2.channelInterpretation, numberOfInputs: _o2.numberOfInputs, numberOfOutputs: _o2.numberOfOutputs, fftSize: _o2.fftSize, frequencyBinCount: _o2.frequencyBinCount, maxDecibels: _o2.maxDecibels, minDecibels: _o2.minDecibels, smoothingTimeConstant: _o2.smoothingTimeConstant, stream: _c2 });

                    case 53:
                      _n25 = (0, _slicedToArray3.default)(n, 1), _e28 = _n25[0];
                      return _context8.abrupt("return", (this.audioContexts.get(_e28).close(), {}));

                    case 55:
                      _n26 = (0, _slicedToArray3.default)(n, 4), _e29 = _n26[0], _t31 = _n26[1], _r23 = _n26[2], _i12 = _n26[3], _s5 = this.audioNodes.get(_e29), _a4 = this.findProxySubject(_t31.id);
                      return _context8.abrupt("return", (_s5.connect(_a4, _r23 || 0, _i12 || 0), {}));

                    case 57:
                      _n27 = (0, _slicedToArray3.default)(n, 4), _e30 = _n27[0], _t32 = _n27[1], _r24 = _n27[2], _i13 = _n27[3], _s6 = this.audioNodes.get(_e30), _a5 = this.findProxySubject(_t32.id);
                      return _context8.abrupt("return", (_s6.disconnect(_a5, _r24 || 0, _i13 || 0), {}));

                    case 59:
                      _n28 = (0, _slicedToArray3.default)(n, 2), _e31 = _n28[0], _t33 = _n28[1];
                      return _context8.abrupt("return", (this.audioNodes.get(_e31).type = _t33, {}));

                    case 61:
                      _n29 = (0, _slicedToArray3.default)(n, 2), _e32 = _n29[0], _t34 = _n29[1];
                      return _context8.abrupt("return", (this.audioNodes.get(_e32).start(_t34), {}));

                    case 63:
                      _n30 = (0, _slicedToArray3.default)(n, 2), _e33 = _n30[0], _t35 = _n30[1];
                      return _context8.abrupt("return", (this.audioNodes.get(_e33).stop(_t35), {}));

                    case 65:
                      _n31 = (0, _slicedToArray3.default)(n, 3), _e34 = _n31[0], _t36 = _n31[1], _r25 = _n31[2], _i14 = this.audioNodes.get(_e34);
                      return _context8.abrupt("return", (_i14.gain ? _i14.gain.setValueAtTime(_t36, _r25 || _i14.context.currentTime) : _i14.frequency && _i14.frequency.setValueAtTime(_t36, _r25 || _i14.context.currentTime), {}));

                    case 67:
                      _n32 = (0, _slicedToArray3.default)(n, 3), _e35 = _n32[0], _t37 = _n32[1], _r26 = _n32[2], _i15 = this.audioNodes.get(_e35);
                      return _context8.abrupt("return", (_i15.frequency && _i15.frequency.linearRampToValueAtTime(_t37, _r26 || _i15.context.currentTime), {}));

                    case 69:
                      _n33 = (0, _slicedToArray3.default)(n, 1), _e36 = _n33[0];
                      _context8.t2 = _e36;
                      _context8.next = 73;
                      return this.getPeerConnection(_e36);

                    case 73:
                      _context8.t3 = function (e) {
                        return _this36.makeReceiverTO(e);
                      };

                      _context8.t4 = _context8.sent.getReceivers().map(_context8.t3);
                      return _context8.abrupt("return", {
                        pcId: _context8.t2,
                        receivers: _context8.t4
                      });

                    case 76:
                      _n34 = (0, _slicedToArray3.default)(n, 1), _e37 = _n34[0];
                      _context8.t5 = _e37;
                      _context8.next = 80;
                      return this.getPeerConnection(_e37);

                    case 80:
                      _context8.t6 = function (e) {
                        return _this36.makeSenderTO(e);
                      };

                      _context8.t7 = _context8.sent.getSenders().map(_context8.t6);
                      return _context8.abrupt("return", {
                        pcId: _context8.t5,
                        senders: _context8.t7
                      });

                    case 83:
                      _n35 = (0, _slicedToArray3.default)(n, 4), _e38 = _n35[0], _t38 = _n35[1], _r27 = _n35[2], _i16 = _n35[3];
                      return _context8.abrupt("return", (this.dtmfSenders.get(_e38).insertDTMF(_t38, _r27, _i16), {}));

                    case 85:
                      _n36 = (0, _slicedToArray3.default)(n, 1);
                      _e39 = _n36[0];
                      _context8.next = 89;
                      return this.getPeerConnection(_e39);

                    case 89:
                      _t39 = _context8.sent.getTransceivers();
                      return _context8.abrupt("return", (_t39 = _t39.map(function (e) {
                        return e.id = e.id ? e.id : crypto.randomUUID(), _this36.makeTransceiverTO(e);
                      }), { pcId: _e39, transceivers: _t39 }));

                    case 91:
                      return _context8.abrupt("return", {});

                    case 92:
                      _n37 = (0, _toArray3.default)(n);
                      _e40 = _n37[0];
                      _t40 = _n37[1];
                      _r28 = _n37[2];
                      _i17 = _n37.slice(3);
                      _context8.next = 99;
                      return this.getPeerConnection(_t40);

                    case 99:
                      _s7 = _context8.sent;
                      _a6 = [];
                      _i17.forEach(function (e) {
                        var t = _this36.streams.get(e.proxy.id);t && _a6.push(t);
                      });_o3 = [this.tracks.get(_r28.id)].concat(_a6), _c3 = _s7.addTrack.apply(_s7, _o3);
                      _c3.id = _e40;_d = this.makeSenderTO(_c3);
                      return _context8.abrupt("return", (_d.pcId = _t40, _d.senders = _s7.getSenders().map(function (e) {
                        return _this36.makeSenderTO(e);
                      }), _d.receivers = _s7.getReceivers().map(function (e) {
                        return _this36.makeReceiverTO(e);
                      }), _d.transceivers = _s7.getTransceivers().map(function (e) {
                        return _this36.makeTransceiverTO(e);
                      }), _d));

                    case 106:
                      _n38 = (0, _slicedToArray3.default)(n, 4);
                      _e41 = _n38[0];
                      _t41 = _n38[1];
                      _r29 = _n38[2];
                      _i18 = _n38[3];
                      _context8.next = 113;
                      return this.getPeerConnection(_e41);

                    case 113:
                      _s8 = _context8.sent;
                      if ("string" != typeof _r29 && (_r29 = this.tracks.get(_r29.id)), _i18 && _i18.streams) {
                        _e42 = [];
                        _i18.streams.forEach(function (t) {
                          if (t.proxy) {
                            var _r30 = _this36.streams.get(t.proxy.id);_e42.push(_r30);
                          }
                        }), _i18.streams = _e42;
                      }_a7 = _s8.addTransceiver(_r29, _i18);
                      _a7.id = _t41.id, this.transceivers.set(_t41.id, _a7), _a7.sender && (_a7.sender.id = _t41.sender.id, this.senders.set(_t41.sender.id, _a7.sender)), _a7.receiver && (_a7.receiver.id = _t41.receiver.id, this.receivers.set(_t41.receiver.id, _a7.receiver));_o4 = this.makeTransceiverTO(_a7);
                      return _context8.abrupt("return", (_o4.pcId = _e41, _o4.senders = _s8.getSenders().map(function (e) {
                        return _this36.makeSenderTO(e);
                      }), _o4.receivers = _s8.getReceivers().map(function (e) {
                        return _this36.makeReceiverTO(e);
                      }), _o4.transceivers = _s8.getTransceivers().map(function (e) {
                        return _this36.makeTransceiverTO(e);
                      }), _o4));

                    case 119:
                      _n39 = (0, _slicedToArray3.default)(n, 1), _e43 = _n39[0];
                      _context8.next = 122;
                      return this.getPeerConnection(_e43);

                    case 122:
                      _context8.sent.close();

                      return _context8.abrupt("return", {});

                    case 124:
                      _n40 = (0, _slicedToArray3.default)(n, 2), _e44 = _n40[0], _t42 = _n40[1], _r31 = this.streams.get(_t42.id);
                      _context8.next = 127;
                      return this.getPeerConnection(_e44);

                    case 127:
                      _context8.t8 = _r31;

                      _context8.sent.addStream(_context8.t8);

                      return _context8.abrupt("return", _t42);

                    case 130:
                      _n41 = (0, _slicedToArray3.default)(n, 2);
                      _e45 = _n41[0];
                      _t43 = _n41[1];
                      _context8.next = 135;
                      return this.getPeerConnection(_e45);

                    case 135:
                      _r32 = _context8.sent;
                      _context8.next = 138;
                      return _r32.getStats(_t43);

                    case 138:
                      _i19 = _context8.sent;
                      _s9 = [];
                      return _context8.abrupt("return", (_i19.forEach(function (e) {
                        var t = Object.assign({}, e);_s9.push(t);
                      }), _s9));

                    case 141:
                      _n42 = (0, _slicedToArray3.default)(n, 1);
                      _e46 = _n42[0];
                      _context8.next = 145;
                      return this.senders.get(_e46).getStats();

                    case 145:
                      _t44 = _context8.sent;
                      _r33 = [];
                      return _context8.abrupt("return", (_t44.forEach(function (e) {
                        var t = Object.assign({}, e);_r33.push(t);
                      }), _r33));

                    case 148:
                      _n43 = (0, _slicedToArray3.default)(n, 1);
                      _e47 = _n43[0];
                      _context8.next = 152;
                      return this.receivers.get(_e47).getStats();

                    case 152:
                      _t45 = _context8.sent;
                      _r34 = [];
                      return _context8.abrupt("return", (_t45.forEach(function (e) {
                        var t = { id: e.id ? e.id : crypto.randomUUID(), type: e.type, concealedSamples: e.concealedSamples };_r34.push(t);
                      }), _r34));

                    case 155:
                      _n44 = (0, _slicedToArray3.default)(n, 2), _e48 = _n44[0], _t46 = _n44[1], _r35 = this.senders.get(_e48), _i20 = _t46 ? this.tracks.get(_t46.id) : null;
                      _context8.next = 158;
                      return _r35.replaceTrack(_i20);

                    case 158:
                      return _context8.abrupt("return", {});

                    case 159:
                      _n45 = (0, _slicedToArray3.default)(n, 2);
                      _e49 = _n45[0];
                      _t47 = _n45[1];
                      _context8.next = 164;
                      return this.getPeerConnection(_e49);

                    case 164:
                      _r36 = _context8.sent;
                      _i21 = this.senders.get(_t47.id);
                      return _context8.abrupt("return", (_r36.removeTrack(_i21), {}));

                    case 167:
                      _n46 = (0, _slicedToArray3.default)(n, 2);
                      _e50 = _n46[0];
                      _t48 = _n46[1];
                      _context8.next = 172;
                      return this.getPeerConnection(_e50);

                    case 172:
                      _i22 = _context8.sent;
                      _context8.next = 175;
                      return _i22.createOffer(_t48);

                    case 175:
                      _s10 = _context8.sent;
                      return _context8.abrupt("return", (this.offers.set(r, _s10), { id: r, type: _s10.type, sdp: _s10.sdp }));

                    case 177:
                      _n47 = (0, _slicedToArray3.default)(n, 2);
                      _e51 = _n47[0];
                      _t49 = _n47[1];
                      _context8.next = 182;
                      return this.getPeerConnection(_e51);

                    case 182:
                      _i23 = _context8.sent;
                      _context8.next = 185;
                      return _i23.createAnswer(_t49);

                    case 185:
                      _s11 = _context8.sent;
                      return _context8.abrupt("return", (this.answers.set(r, _s11), { id: r, type: _s11.type, sdp: _s11.sdp }));

                    case 187:
                      _n48 = (0, _slicedToArray3.default)(n, 2), _e52 = _n48[0], _t50 = _n48[1], _r37 = "offer" === _t50.type ? this.offers : this.answers, _i24 = _t50.id ? _r37.get(_t50.id) : _t50;
                      _i24.sdp = _t50.sdp;_context8.next = 191;
                      return this.getPeerConnection(_e52);

                    case 191:
                      _s12 = _context8.sent;
                      _context8.next = 194;
                      return _s12.setLocalDescription(_i24);

                    case 194:
                      return _context8.abrupt("return", _t50);

                    case 195:
                      _n49 = (0, _slicedToArray3.default)(n, 2);
                      _e53 = _n49[0];
                      _t51 = _n49[1];
                      _context8.next = 200;
                      return this.getPeerConnection(_e53);

                    case 200:
                      _r38 = _context8.sent;
                      _context8.next = 203;
                      return _r38.setRemoteDescription(_t51);

                    case 203:
                      return _context8.abrupt("return", _t51);

                    case 204:
                      _n50 = (0, _slicedToArray3.default)(n, 2), _e54 = _n50[0], _t52 = _n50[1], _r39 = _t52 ? new RTCIceCandidate({ sdpMLineIndex: _t52.sdpMLineIndex, candidate: _t52.candidate }) : null;
                      _context8.next = 207;
                      return this.getPeerConnection(_e54);

                    case 207:
                      _context8.t9 = _r39;

                      _context8.sent.addIceCandidate(_context8.t9);

                      return _context8.abrupt("return", _t52);

                    case 210:
                      _n51 = (0, _slicedToArray3.default)(n, 2);
                      _e55 = _n51[0];
                      _t53 = _n51[1];
                      _context8.next = 215;
                      return this.getPeerConnection(_e55);

                    case 215:
                      _i25 = _context8.sent;

                      if (!(_i25.pendingEvents || (_i25.pendingEvents = new Map()), _i25.eventPromises || (_i25.eventPromises = new Map()), _i25.pendingEvents.has(_t53))) {
                        _context8.next = 223;
                        break;
                      }

                      _context8.next = 219;
                      return this.getPendingEvent(_i25, _t53);

                    case 219:
                      _e56 = _context8.sent;
                      this.sendEvent(a.ADD_PC_EVENT_LISTENER, r, _e56);_context8.next = 224;
                      break;

                    case 223:
                      if (!_i25[_t53]) {
                        _n52 = function _n52(t) {
                          var n = null;if (t.type === o.ICE_CANDIDATE) {
                            _this36.logger.debug("event: ", t);var _r40 = t.candidate,
                                _s13 = null;_r40 && (_s13 = { sdpMLineIndex: _r40.sdpMLineIndex, sdpMid: _r40.sdpMid, candidate: _r40.candidate, type: _r40.type, foundation: _r40.foundation, protocol: _r40.protocol, address: _r40.address, port: _r40.port, priority: _r40.priority, url: _r40.url, relayProtocol: _r40.relayProtocol, component: _r40.compoonent, relatedAddress: _r40.relatedAddress, relatedPort: _r40.relatedPort, tcpType: _r40.tcpType, usernameFragment: _r40.usernameFragment }), n = { pcId: _e55, eventName: t.type, type: "proxy", candidate: _s13 }, _this36.gatherPeerConnectionState(n, _i25);
                          } else t.type === o.SIG_STATE_CHANGE ? (n = { pcId: _e55, eventName: t.type, type: "proxy" }, _this36.gatherPeerConnectionState(n, _i25)) : t.type === o.TRACK ? (n = { pcId: _e55, eventName: t.type, type: "proxy", streams: [], senders: [], receivers: [], track: _this36.makeTrackTO(t.track) }, n.streams = t.streams.map(function (e) {
                            return _this36.makeStreamTO(e);
                          }), _this36.gatherPeerConnectionState(n, _i25)) : t.type === o.CONN_STATE_CHANGE || t.type === o.ICE_CONN_STATE_CHANGE || t.type === o.ICE_GATHER_STATE_CHANGE || t.type === o.NEGOTIATION_NEEDED ? (n = { pcId: _e55, eventName: t.type, type: "proxy" }, _this36.gatherPeerConnectionState(n, _i25)) : _this36.logger.warn("Ignored event, type: " + t.type + ", event: " + JSON.stringify(t));n && _this36.processPendingEvents(_i25, t, n, a.ADD_PC_EVENT_LISTENER, r);
                        };

                        _i25[_t53] = _n52, _i25.addEventListener(_t53, _n52);
                      }

                    case 224:
                      return _context8.abrupt("return", null);

                    case 225:
                      _n53 = (0, _slicedToArray3.default)(n, 3), _e57 = _n53[0], _t54 = _n53[1], _i26 = _n53[2], _s14 = this.tracks.get(_e57);

                      if (!(_s14.pendingEvents || (_s14.pendingEvents = new Map()), _s14.eventPromises || (_s14.eventPromises = new Map()), _s14.pendingEvents.has(_t54))) {
                        _context8.next = 233;
                        break;
                      }

                      _context8.next = 229;
                      return this.getPendingEvent(_s14, _t54);

                    case 229:
                      _e58 = _context8.sent;
                      this.sendEvent(a.ADD_TRACK_EVENT_LISTENER, r, _e58);_context8.next = 234;
                      break;

                    case 233:
                      if (!_s14[_t54]) {
                        _n54 = function _n54(n) {
                          if (Object.values(c).includes(_t54)) {
                            var _t55 = { trackId: _e57, eventName: n.type, type: "proxy" };_t55 && _this36.processPendingEvents(_s14, n, _t55, a.ADD_TRACK_EVENT_LISTENER, r);
                          } else _this36.logger.warn("Ignored event: " + JSON.stringify(n));
                        };

                        _s14[_t54] = _n54, _s14.addEventListener(_t54, _n54, _i26);
                      }

                    case 234:
                      return _context8.abrupt("return", null);

                    case 235:
                      _n55 = (0, _slicedToArray3.default)(n, 2);
                      _e59 = _n55[0];
                      _t56 = _n55[1];
                      _context8.next = 240;
                      return this.getWorker(_e59);

                    case 240:
                      _i27 = _context8.sent;

                      if (!(_i27.pendingEvents || (_i27.pendingEvents = new Map()), _i27.eventPromises || (_i27.eventPromises = new Map()), _i27.pendingEvents.has(_t56))) {
                        _context8.next = 248;
                        break;
                      }

                      _context8.next = 244;
                      return this.getPendingEvent(_i27, _t56);

                    case 244:
                      _e60 = _context8.sent;
                      this.sendEvent(a.ADD_WORKER_EVENT_LISTENER, r, _e60);_context8.next = 249;
                      break;

                    case 248:
                      if (!_i27[_t56]) {
                        _n56 = function _n56(n) {
                          if (_this36.logger.debug("Received event: ", n), Object.values(l).includes(_t56)) {
                            var _t57 = { wId: _e59, eventName: n.type, type: "proxy", data: n.data };_t57 && _this36.processPendingEvents(_i27, n, _t57, a.ADD_WORKER_EVENT_LISTENER, r);
                          } else _this36.logger.warn("Ignored event: " + JSON.stringify(n), n);
                        };

                        _i27[_t56] = _n56, _i27.addEventListener(_t56, _n56);
                      }

                    case 249:
                      return _context8.abrupt("return", null);

                    case 250:
                      _n57 = (0, _slicedToArray3.default)(n, 3), _e61 = _n57[0], _t58 = _n57[1], _i28 = _n57[2], _s15 = this.dtmfSenders.get(_e61);

                      if (!(_s15.pendingEvents || (_s15.pendingEvents = new Map()), _s15.eventPromises || (_s15.eventPromises = new Map()), _s15.pendingEvents.has(_t58))) {
                        _context8.next = 258;
                        break;
                      }

                      _context8.next = 254;
                      return this.getPendingEvent(_s15, _t58);

                    case 254:
                      _e62 = _context8.sent;
                      this.sendEvent(a.ADD_DTMF_EVENT_LISTENER, r, _e62);_context8.next = 259;
                      break;

                    case 258:
                      if (!_s15[_t58]) {
                        _n58 = function _n58(n) {
                          if (Object.values(d).includes(_t58)) {
                            var _t59 = { dtmfId: _e61, eventName: n.type, type: n.type, tone: n.tone };_this36.processPendingEvents(_s15, n, _t59, a.ADD_DTMF_EVENT_LISTENER, r);
                          } else _this36.logger.warn("Ignored event: " + JSON.stringify(n));
                        };

                        _s15[_t58] = _n58, _s15.addEventListener(_t58, _n58, _i28);
                      }

                    case 259:
                      return _context8.abrupt("return", null);

                    case 260:
                      _n59 = (0, _slicedToArray3.default)(n, 2), _e63 = _n59[0], _t60 = _n59[1];

                      if (!("audio" !== _t60.kind && "video" !== _t60.kind)) {
                        _context8.next = 263;
                        break;
                      }

                      return _context8.abrupt("return", (this.logger.warn("Invalid media type: " + JSON.stringify(_t60)), null));

                    case 263:
                      _r41 = document.createElement(_t60.kind);
                      return _context8.abrupt("return", (Object.assign(_r41, _t60), document.body.appendChild(_r41), this.mediaElements.set(_e63, _r41), { id: _e63, sinkId: _r41.sinkId }));

                    case 265:
                      _n60 = (0, _slicedToArray3.default)(n, 2), _e64 = _n60[0], _t61 = _n60[1], _r42 = this.mediaElements.get(_e64);
                      _context8.next = 268;
                      return _r42.setSinkId(_t61);

                    case 268:
                      return _context8.abrupt("return", { id: _e64, sinkId: _r42.sinkId });

                    case 269:
                      _n61 = (0, _slicedToArray3.default)(n, 2), _e65 = _n61[0], _t62 = _n61[1], _r43 = _t62 ? this.getStream(_t62.id) : null;
                      return _context8.abrupt("return", (this.mediaElements.get(_e65).srcObject = _r43, {}));

                    case 271:
                      _n62 = (0, _slicedToArray3.default)(n, 2), _e66 = _n62[0], _t63 = _n62[1];
                      return _context8.abrupt("return", (this.mediaElements.get(_e66).muted = _t63, { id: _e66, muted: _t63 }));

                    case 273:
                      _n63 = (0, _slicedToArray3.default)(n, 2), _e67 = _n63[0], _t64 = _n63[1], _r44 = this.mediaElements.get(_e67);
                      return _context8.abrupt("return", (_r44 && (_r44.hidden = _t64), {}));

                    case 275:
                      _n64 = (0, _slicedToArray3.default)(n, 2), _e68 = _n64[0], _t65 = _n64[1];
                      return _context8.abrupt("return", (this.mediaElements.get(_e68).volume = _t65, {}));

                    case 277:
                      _n65 = (0, _slicedToArray3.default)(n, 1), _e69 = _n65[0];
                      return _context8.abrupt("return", (this.mediaElements.get(_e69).play(), {}));

                    case 279:
                      _n66 = (0, _slicedToArray3.default)(n, 1), _e70 = _n66[0];
                      return _context8.abrupt("return", (this.mediaElements.get(_e70).pause(), {}));

                    case 281:
                      _n67 = (0, _slicedToArray3.default)(n, 1), _e71 = _n67[0];
                      return _context8.abrupt("return", (this.mediaElements.get(_e71).remove(), {}));

                    case 283:
                      _n68 = (0, _slicedToArray3.default)(n, 2), _e72 = _n68[0], _t66 = _n68[1], _r45 = this.tracks.get(_e72);
                      return _context8.abrupt("return", (_r45.enabled = _t66, this.makeTrackTO(_r45)));

                    case 285:
                      _n69 = (0, _slicedToArray3.default)(n, 1), _e73 = _n69[0], _t67 = this.tracks.get(_e73);
                      return _context8.abrupt("return", (_t67 && _t67.stop(), {}));

                    case 287:
                      _n70 = (0, _slicedToArray3.default)(n, 1), _e74 = _n70[0];
                      return _context8.abrupt("return", this.tracks.get(_e74).getSettings());

                    case 289:
                      _n71 = (0, _slicedToArray3.default)(n, 2), _e75 = _n71[0], _t68 = _n71[1], _r46 = this.senders.get(_e75).createEncodedStreams();
                      return _context8.abrupt("return", (this.streams.set(_t68.id, _r46), this.streams.set(_t68.readable.id, _r46.readable), this.streams.set(_t68.writable.id, _r46.writable), _t68));

                    case 291:
                      _n72 = (0, _slicedToArray3.default)(n, 2), _e76 = _n72[0], _t69 = _n72[1], _r47 = this.receivers.get(_e76).createEncodedStreams();
                      return _context8.abrupt("return", (this.streams.set(_t69.id, _r47), this.streams.set(_t69.readable.id, _r47.readable), this.streams.set(_t69.writable.id, _r47.writable), _t69));

                    case 293:
                      _n73 = (0, _slicedToArray3.default)(n, 1), _e77 = _n73[0];
                      return _context8.abrupt("return", (_e77.pcIds.forEach(function (e) {
                        _this36.pcs.delete(e);
                      }), _e77.streamIds.forEach(function (e) {
                        var t = _this36.streams.get(e);t && ("function" == typeof t.getTracks && t.getTracks().forEach(function (e) {
                          e.stop();
                        }), _this36.streams.delete(e));
                      }), _e77.trackIds.forEach(function (e) {
                        _this36.tracks.delete(e);
                      }), _e77.workerIds.forEach(function (e) {
                        var t = _this36.workers.get(e);t && t.terminate(), _this36.workers.delete(e);
                      }), _e77.mediaElementIds.forEach(function (e) {
                        var t = _this36.mediaElements.get(e);t && (t.remove(), _this36.mediaElements.delete(e));
                      }), _e77.transceiverIds.forEach(function (e) {
                        _this36.transceivers.delete(e);
                      }), _e77.senderIds.forEach(function (e) {
                        _this36.senders.delete(e);
                      }), _e77.receiverIds.forEach(function (e) {
                        _this36.receivers.delete(e);
                      }), {}));

                    case 295:
                      return _context8.abrupt("return", null);

                    case 296:
                    case "end":
                      return _context8.stop();
                  }
                }
              }, _callee8, this);
            }));

            function callWebRTCApi(_x10, _x11, _x12) {
              return _ref8.apply(this, arguments);
            }

            return callWebRTCApi;
          }()
        }, {
          key: "sendMessage",
          value: function sendMessage(e) {
            this.logger.debug("Sending message: " + JSON.stringify(e));var t = e.message,
                r = _.deflateRaw(JSON.stringify(t));e.message = r;var n = new TextEncoder().encode(JSON.stringify(e)),
                i = n.byteLength,
                s = new Uint8Array([i, i >> 8, i >> 16, i >> 24]);this.channel.sendMessage(s), this.channel.sendMessage(n);
          }
        }, {
          key: "sendEvent",
          value: function sendEvent(e, t, r) {
            var n = { requestId: t, type: "event", message: { api: e, event: r } };this.sendMessage(n);
          }
        }, {
          key: "sendResponse",
          value: function sendResponse(e, t, r) {
            var n = { requestId: t, type: "response", message: { api: e, response: r } };this.sendMessage(n);
          }
        }, {
          key: "sendError",
          value: function sendError(e, t, r) {
            var n = { requestId: t, type: "error", message: { api: e, error: r } };this.sendMessage(n);
          }
        }, {
          key: "handleWebRTCApi",
          value: function () {
            var _ref9 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee9(e) {
              var _t70;

              return _regenerator2.default.wrap(function _callee9$(_context9) {
                while (1) {
                  switch (_context9.prev = _context9.next) {
                    case 0:
                      _context9.prev = 0;
                      _context9.next = 3;
                      return this.callWebRTCApi(e.message.api, e.requestId, e.message.args);

                    case 3:
                      _t70 = _context9.sent;
                      _t70 && this.sendResponse(e.message.api, e.requestId, _t70);_context9.next = 10;
                      break;

                    case 7:
                      _context9.prev = 7;
                      _context9.t0 = _context9["catch"](0);
                      this.logger.error("Error handling WebRTC API: " + JSON.stringify(e) + ", message: " + (_context9.t0.message ? _context9.t0.message : "(no message)") + ", error: " + JSON.stringify(_context9.t0)), this.logger.trace(_context9.t0), this.sendError(e.message.api, e.requestId, { name: _context9.t0.name, message: _context9.t0.message });
                    case 10:
                    case "end":
                      return _context9.stop();
                  }
                }
              }, _callee9, this, [[0, 7]]);
            }));

            function handleWebRTCApi(_x13) {
              return _ref9.apply(this, arguments);
            }

            return handleWebRTCApi;
          }()
        }, {
          key: "processPendingEvents",
          value: function processPendingEvents(e, t, r, n, i) {
            if (e.pendingEvents.has(t.type)) {
              e.pendingEvents.get(t.type).push(r);var _n74 = e.eventPromises.get(t.type);_n74 && _n74.forEach(function (e) {
                e.resolve(r);
              });
            } else this.sendEvent(n, i, r), e.pendingEvents.set(t.type, []);
          }
        }, {
          key: "handleMessage",
          value: function handleMessage(e) {
            var t = e.message,
                r = _.inflateRaw(t),
                n = this.decoder.decode(r);e.message = JSON.parse(n), e.message.api && e.requestId && e.message.args ? this.handleWebRTCApi(e) : (this.logger.error("Invalid message format: " + JSON.stringify(e)), this.logger.trace(e));
          }
        }, {
          key: "onClose",
          value: function onClose(e) {
            this.logger.info("WebRTC redir custom channel closed: " + JSON.stringify(e) + "\""), this.release();
          }
        }, {
          key: "release",
          value: function release() {
            this.streams.forEach(function (e) {
              e.getTracks().forEach(function (e) {
                e.stop();
              });
            }), this.mediaElements.forEach(function (e) {
              e.remove();
            });
          }
        }]);
        return g;
      }();

      function v(e, t, r) {
        globalThis.DCVWebRTCRedirProxy = t, m.initCallbacks ? (m.initCallbacks.forEach(function (n, i) {
          clearTimeout(n), i({ success: e, proxy: t, error: r });
        }), m.initCallbacks.clear()) : s().warn("No DCVWebRTCPeerConnectionProxy.initCallback was specified.");
      }try {
        window.DCVWebRTCPeerConnectionProxy = m;var _e78 = new m({ logger: s() });_e78.sendHelloRequest().then(function (t) {
          _e78.logger.info("Successfully received hello response from client: " + JSON.stringify(t)), _e78.clientInfo = t, v(!0, _e78);
        }).catch(function (e) {
          var t = "Running in an invalid dcv webrtc env, skipping setting up proxy: " + JSON.stringify(e);s().warn(t), v(!1, null, t);
        });
      } catch (e) {
        var _t71 = e.message;v(!1, null, _t71), s().info("Skipping setting up proxy in client env: " + _t71);
      }
    }(), n;
  }();
});

},{"babel-runtime/helpers/asyncToGenerator":14,"babel-runtime/helpers/classCallCheck":15,"babel-runtime/helpers/createClass":16,"babel-runtime/helpers/slicedToArray":20,"babel-runtime/helpers/toArray":21,"babel-runtime/helpers/typeof":22,"babel-runtime/regenerator":23}],2:[function(require,module,exports){
(function (global){(function (){
//===============================================
// By using these Developer Materials, you accept and agree to comply with
// the terms of the Cloud Software Group Developer Terms of Use found here
// (https://www.cloud.com/legal)
//===============================================



var $jscomp={scope:{},getGlobal:function(e){return"undefined"!=typeof window&&window===e?e:"undefined"!=typeof global?global:e}};$jscomp.global=$jscomp.getGlobal(this);$jscomp.initSymbol=function(){$jscomp.global.Symbol||($jscomp.global.Symbol=$jscomp.Symbol);$jscomp.initSymbol=function(){}};$jscomp.symbolCounter_=0;$jscomp.Symbol=function(e){return"jscomp_symbol_"+e+$jscomp.symbolCounter_++};
$jscomp.initSymbolIterator=function(){$jscomp.initSymbol();$jscomp.global.Symbol.iterator||($jscomp.global.Symbol.iterator=$jscomp.global.Symbol("iterator"));$jscomp.initSymbolIterator=function(){}};$jscomp.makeIterator=function(e){$jscomp.initSymbolIterator();if(e[$jscomp.global.Symbol.iterator])return e[$jscomp.global.Symbol.iterator]();var l=0;return{next:function(){return l==e.length?{done:!0}:{done:!1,value:e[l++]}}}};
$jscomp.arrayFromIterator=function(e){for(var l,p=[];!(l=e.next()).done;)p.push(l.value);return p};$jscomp.arrayFromIterable=function(e){return e instanceof Array?e:$jscomp.arrayFromIterator($jscomp.makeIterator(e))};
$jscomp.inherits=function(e,l){function p(){}p.prototype=l.prototype;e.prototype=new p;e.prototype.constructor=e;for(var b in l)if($jscomp.global.Object.defineProperties){var a=$jscomp.global.Object.getOwnPropertyDescriptor(l,b);a&&$jscomp.global.Object.defineProperty(e,b,a)}else e[b]=l[b]};$jscomp.array=$jscomp.array||{};$jscomp.array.done_=function(){return{done:!0,value:void 0}};
$jscomp.array.arrayIterator_=function(e,l){e instanceof String&&(e=String(e));var p=0;$jscomp.initSymbol();$jscomp.initSymbolIterator();var b={},a=(b.next=function(){if(p<e.length){var b=p++;return{value:l(b,e[b]),done:!1}}a.next=$jscomp.array.done_;return $jscomp.array.done_()},b[Symbol.iterator]=function(){return a},b);return a};
$jscomp.array.findInternal_=function(e,l,p){e instanceof String&&(e=String(e));for(var b=e.length,a=0;a<b;a++){var c=e[a];if(l.call(p,c,a,e))return{i:a,v:c}}return{i:-1,v:void 0}};
$jscomp.array.from=function(e,l,p){l=void 0===l?function(a){return a}:l;var b=[];$jscomp.initSymbol();$jscomp.initSymbolIterator();if(e[Symbol.iterator]){$jscomp.initSymbol();$jscomp.initSymbolIterator();e=e[Symbol.iterator]();for(var a;!(a=e.next()).done;)b.push(l.call(p,a.value))}else{a=e.length;for(var c=0;c<a;c++)b.push(l.call(p,e[c]))}return b};$jscomp.array.of=function(e){for(var l=[],p=0;p<arguments.length;++p)l[p-0]=arguments[p];return $jscomp.array.from(l)};
$jscomp.array.entries=function(){return $jscomp.array.arrayIterator_(this,function(e,l){return[e,l]})};$jscomp.array.entries$install=function(){Array.prototype.entries||(Array.prototype.entries=$jscomp.array.entries)};$jscomp.array.keys=function(){return $jscomp.array.arrayIterator_(this,function(e){return e})};$jscomp.array.keys$install=function(){Array.prototype.keys||(Array.prototype.keys=$jscomp.array.keys)};$jscomp.array.values=function(){return $jscomp.array.arrayIterator_(this,function(e,l){return l})};
$jscomp.array.values$install=function(){Array.prototype.values||(Array.prototype.values=$jscomp.array.values)};$jscomp.array.copyWithin=function(e,l,p){var b=this.length;e=Number(e);l=Number(l);p=Number(null!=p?p:b);if(e<l)for(p=Math.min(p,b);l<p;)l in this?this[e++]=this[l++]:(delete this[e++],l++);else for(p=Math.min(p,b+l-e),e+=p-l;p>l;)--p in this?this[--e]=this[p]:delete this[e];return this};$jscomp.array.copyWithin$install=function(){Array.prototype.copyWithin||(Array.prototype.copyWithin=$jscomp.array.copyWithin)};
$jscomp.array.fill=function(e,l,p){null!=p&&e.length||(p=this.length||0);p=Number(p);for(l=Number((void 0===l?0:l)||0);l<p;l++)this[l]=e;return this};$jscomp.array.fill$install=function(){Array.prototype.fill||(Array.prototype.fill=$jscomp.array.fill)};$jscomp.array.find=function(e,l){return $jscomp.array.findInternal_(this,e,l).v};$jscomp.array.find$install=function(){Array.prototype.find||(Array.prototype.find=$jscomp.array.find)};
$jscomp.array.findIndex=function(e,l){return $jscomp.array.findInternal_(this,e,l).i};$jscomp.array.findIndex$install=function(){Array.prototype.findIndex||(Array.prototype.findIndex=$jscomp.array.findIndex)};$jscomp.Map=function(e){e=void 0===e?[]:e;this.data_={};this.head_=$jscomp.Map.createHead_();this.size=0;if(e){e=$jscomp.makeIterator(e);for(var l=e.next();!l.done;l=e.next())l=l.value,this.set(l[0],l[1])}};
$jscomp.Map.checkBrowserConformance_=function(){var e=$jscomp.global.Map;if(!e||!e.prototype.entries||!Object.seal)return!1;try{var l=Object.seal({x:4}),p=new e($jscomp.makeIterator([[l,"s"]]));if("s"!=p.get(l)||1!=p.size||p.get({x:4})||p.set({x:4},"t")!=p||2!=p.size)return!1;var b=p.entries(),a=b.next();if(a.done||a.value[0]!=l||"s"!=a.value[1])return!1;a=b.next();return a.done||4!=a.value[0].x||"t"!=a.value[1]||!b.next().done?!1:!0}catch(c){return!1}};
$jscomp.Map.createHead_=function(){var e={};return e.previous=e.next=e.head=e};$jscomp.Map.getId_=function(e){if(!(e instanceof Object))return String(e);$jscomp.Map.key_ in e||e instanceof Object&&Object.isExtensible&&Object.isExtensible(e)&&$jscomp.Map.defineProperty_(e,$jscomp.Map.key_,++$jscomp.Map.index_);return $jscomp.Map.key_ in e?e[$jscomp.Map.key_]:" "+e};
$jscomp.Map.prototype.set=function(e,l){var p=this.maybeGetEntry_(e),b=p.id,a=p.list,p=p.entry;a||(a=this.data_[b]=[]);p?p.value=l:(p={next:this.head_,previous:this.head_.previous,head:this.head_,key:e,value:l},a.push(p),this.head_.previous.next=p,this.head_.previous=p,this.size++);return this};
$jscomp.Map.prototype["delete"]=function(e){var l=this.maybeGetEntry_(e);e=l.id;var p=l.list,b=l.index;return(l=l.entry)&&p?(p.splice(b,1),p.length||delete this.data_[e],l.previous.next=l.next,l.next.previous=l.previous,l.head=null,this.size--,!0):!1};$jscomp.Map.prototype.clear=function(){this.data_={};this.head_=this.head_.previous=$jscomp.Map.createHead_();this.size=0};$jscomp.Map.prototype.has=function(e){return!!this.maybeGetEntry_(e).entry};
$jscomp.Map.prototype.get=function(e){return(e=this.maybeGetEntry_(e).entry)&&e.value};$jscomp.Map.prototype.maybeGetEntry_=function(e){var l=$jscomp.Map.getId_(e),p=this.data_[l];if(p)for(var b=0;b<p.length;b++){var a=p[b];if(e!==e&&a.key!==a.key||e===a.key)return{id:l,list:p,index:b,entry:a}}return{id:l,list:p,index:-1,entry:void 0}};$jscomp.Map.prototype.entries=function(){return this.iter_(function(e){return[e.key,e.value]})};$jscomp.Map.prototype.keys=function(){return this.iter_(function(e){return e.key})};
$jscomp.Map.prototype.values=function(){return this.iter_(function(e){return e.value})};$jscomp.Map.prototype.forEach=function(e,l){for(var p=$jscomp.makeIterator(this.entries()),b=p.next();!b.done;b=p.next())b=b.value,e.call(l,b[1],b[0],this)};
$jscomp.Map.prototype.iter_=function(e){var l=this,p=this.head_;$jscomp.initSymbol();$jscomp.initSymbolIterator();var b={};return b.next=function(){if(p){for(;p.head!=l.head_;)p=p.previous;for(;p.next!=p.head;)return p=p.next,{done:!1,value:e(p)};p=null}return{done:!0,value:void 0}},b[Symbol.iterator]=function(){return this},b};$jscomp.Map.index_=0;$jscomp.Map.defineProperty_=Object.defineProperty?function(e,l,p){Object.defineProperty(e,l,{value:String(p)})}:function(e,l,p){e[l]=String(p)};
$jscomp.Map.Entry_=function(){};$jscomp.Map.ASSUME_NO_NATIVE=!1;$jscomp.Map$install=function(){$jscomp.initSymbol();$jscomp.initSymbolIterator();!$jscomp.Map.ASSUME_NO_NATIVE&&$jscomp.Map.checkBrowserConformance_()?$jscomp.Map=$jscomp.global.Map:($jscomp.initSymbol(),$jscomp.initSymbolIterator(),$jscomp.Map.prototype[Symbol.iterator]=$jscomp.Map.prototype.entries,$jscomp.initSymbol(),$jscomp.Map.key_=Symbol("map-id-key"));$jscomp.Map$install=function(){}};$jscomp.math=$jscomp.math||{};
$jscomp.math.clz32=function(e){e=Number(e)>>>0;if(0===e)return 32;var l=0;0===(e&4294901760)&&(e<<=16,l+=16);0===(e&4278190080)&&(e<<=8,l+=8);0===(e&4026531840)&&(e<<=4,l+=4);0===(e&3221225472)&&(e<<=2,l+=2);0===(e&2147483648)&&l++;return l};$jscomp.math.imul=function(e,l){e=Number(e);l=Number(l);var p=e&65535,b=l&65535;return p*b+((e>>>16&65535)*b+p*(l>>>16&65535)<<16>>>0)|0};$jscomp.math.sign=function(e){e=Number(e);return 0===e||isNaN(e)?e:0<e?1:-1};
$jscomp.math.log10=function(e){return Math.log(e)/Math.LN10};$jscomp.math.log2=function(e){return Math.log(e)/Math.LN2};$jscomp.math.log1p=function(e){e=Number(e);if(.25>e&&-.25<e){for(var l=e,p=1,b=e,a=0,c=1;a!=b;)l*=e,c*=-1,b=(a=b)+c*l/++p;return b}return Math.log(1+e)};$jscomp.math.expm1=function(e){e=Number(e);if(.25>e&&-.25<e){for(var l=e,p=1,b=e,a=0;a!=b;)l*=e/++p,b=(a=b)+l;return b}return Math.exp(e)-1};$jscomp.math.cosh=function(e){e=Number(e);return(Math.exp(e)+Math.exp(-e))/2};
$jscomp.math.sinh=function(e){e=Number(e);return 0===e?e:(Math.exp(e)-Math.exp(-e))/2};$jscomp.math.tanh=function(e){e=Number(e);if(0===e)return e;var l=Math.exp(2*-Math.abs(e)),l=(1-l)/(1+l);return 0>e?-l:l};$jscomp.math.acosh=function(e){e=Number(e);return Math.log(e+Math.sqrt(e*e-1))};$jscomp.math.asinh=function(e){e=Number(e);if(0===e)return e;var l=Math.log(Math.abs(e)+Math.sqrt(e*e+1));return 0>e?-l:l};
$jscomp.math.atanh=function(e){e=Number(e);return($jscomp.math.log1p(e)-$jscomp.math.log1p(-e))/2};
$jscomp.math.hypot=function(e,l,p){for(var b=[],a=2;a<arguments.length;++a)b[a-2]=arguments[a];e=Number(e);l=Number(l);for(var c=Math.max(Math.abs(e),Math.abs(l)),Q=$jscomp.makeIterator(b),a=Q.next();!a.done;a=Q.next())c=Math.max(c,Math.abs(a.value));if(1E100<c||1E-100>c){e/=c;l/=c;Q=e*e+l*l;b=$jscomp.makeIterator(b);for(a=b.next();!a.done;a=b.next())a=a.value,a=Number(a)/c,Q+=a*a;return Math.sqrt(Q)*c}c=e*e+l*l;b=$jscomp.makeIterator(b);for(a=b.next();!a.done;a=b.next())a=a.value,a=Number(a),c+=
a*a;return Math.sqrt(c)};$jscomp.math.trunc=function(e){e=Number(e);if(isNaN(e)||Infinity===e||-Infinity===e||0===e)return e;var l=Math.floor(Math.abs(e));return 0>e?-l:l};$jscomp.math.cbrt=function(e){if(0===e)return e;e=Number(e);var l=Math.pow(Math.abs(e),1/3);return 0>e?-l:l};$jscomp.number=$jscomp.number||{};$jscomp.number.isFinite=function(e){return"number"!==typeof e?!1:!isNaN(e)&&Infinity!==e&&-Infinity!==e};
$jscomp.number.isInteger=function(e){return $jscomp.number.isFinite(e)?e===Math.floor(e):!1};$jscomp.number.isNaN=function(e){return"number"===typeof e&&isNaN(e)};$jscomp.number.isSafeInteger=function(e){return $jscomp.number.isInteger(e)&&Math.abs(e)<=$jscomp.number.MAX_SAFE_INTEGER};$jscomp.number.EPSILON=Math.pow(2,-52);$jscomp.number.MAX_SAFE_INTEGER=9007199254740991;$jscomp.number.MIN_SAFE_INTEGER=-9007199254740991;$jscomp.object=$jscomp.object||{};
$jscomp.object.assign=function(e,l){for(var p=[],b=1;b<arguments.length;++b)p[b-1]=arguments[b];p=$jscomp.makeIterator(p);for(b=p.next();!b.done;b=p.next())if(b=b.value)for(var a in b)Object.prototype.hasOwnProperty.call(b,a)&&(e[a]=b[a]);return e};$jscomp.object.is=function(e,l){return e===l?0!==e||1/e===1/l:e!==e&&l!==l};$jscomp.Set=function(e){e=void 0===e?[]:e;this.map_=new $jscomp.Map;if(e){e=$jscomp.makeIterator(e);for(var l=e.next();!l.done;l=e.next())this.add(l.value)}this.size=this.map_.size};
$jscomp.Set.checkBrowserConformance_=function(){var e=$jscomp.global.Set;if(!e||!e.prototype.entries||!Object.seal)return!1;var l=Object.seal({x:4}),e=new e($jscomp.makeIterator([l]));if(e.has(l)||1!=e.size||e.add(l)!=e||1!=e.size||e.add({x:4})!=e||2!=e.size)return!1;var e=e.entries(),p=e.next();if(p.done||p.value[0]!=l||p.value[1]!=l)return!1;p=e.next();return p.done||p.value[0]==l||4!=p.value[0].x||p.value[1]!=p.value[0]?!1:e.next().done};
$jscomp.Set.prototype.add=function(e){this.map_.set(e,e);this.size=this.map_.size;return this};$jscomp.Set.prototype["delete"]=function(e){e=this.map_["delete"](e);this.size=this.map_.size;return e};$jscomp.Set.prototype.clear=function(){this.map_.clear();this.size=0};$jscomp.Set.prototype.has=function(e){return this.map_.has(e)};$jscomp.Set.prototype.entries=function(){return this.map_.entries()};$jscomp.Set.prototype.values=function(){return this.map_.values()};
$jscomp.Set.prototype.forEach=function(e,l){var p=this;this.map_.forEach(function(b){return e.call(l,b,b,p)})};$jscomp.Set.ASSUME_NO_NATIVE=!1;$jscomp.Set$install=function(){!$jscomp.Set.ASSUME_NO_NATIVE&&$jscomp.Set.checkBrowserConformance_()?$jscomp.Set=$jscomp.global.Set:($jscomp.Map$install(),$jscomp.initSymbol(),$jscomp.initSymbolIterator(),$jscomp.Set.prototype[Symbol.iterator]=$jscomp.Set.prototype.values);$jscomp.Set$install=function(){}};$jscomp.string=$jscomp.string||{};
$jscomp.string.noRegExp_=function(e,l){if(e instanceof RegExp)throw new TypeError("First argument to String.prototype."+l+" must not be a regular expression");};
$jscomp.string.fromCodePoint=function(e){for(var l=[],p=0;p<arguments.length;++p)l[p-0]=arguments[p];for(var p="",l=$jscomp.makeIterator(l),b=l.next();!b.done;b=l.next()){b=b.value;b=+b;if(0>b||1114111<b||b!==Math.floor(b))throw new RangeError("invalid_code_point "+b);65535>=b?p+=String.fromCharCode(b):(b-=65536,p+=String.fromCharCode(b>>>10&1023|55296),p+=String.fromCharCode(b&1023|56320))}return p};
$jscomp.string.repeat=function(e){var l=this.toString();if(0>e||1342177279<e)throw new RangeError("Invalid count value");e|=0;for(var p="";e;)if(e&1&&(p+=l),e>>>=1)l+=l;return p};$jscomp.string.repeat$install=function(){String.prototype.repeat||(String.prototype.repeat=$jscomp.string.repeat)};
$jscomp.string.codePointAt=function(e){var l=this.toString(),p=l.length;e=Number(e)||0;if(0<=e&&e<p){e|=0;var b=l.charCodeAt(e);if(55296>b||56319<b||e+1===p)return b;e=l.charCodeAt(e+1);return 56320>e||57343<e?b:1024*(b-55296)+e+9216}};$jscomp.string.codePointAt$install=function(){String.prototype.codePointAt||(String.prototype.codePointAt=$jscomp.string.codePointAt)};
$jscomp.string.includes=function(e,l){l=void 0===l?0:l;$jscomp.string.noRegExp_(e,"includes");return-1!==this.toString().indexOf(e,l)};$jscomp.string.includes$install=function(){String.prototype.includes||(String.prototype.includes=$jscomp.string.includes)};
$jscomp.string.startsWith=function(e,l){l=void 0===l?0:l;$jscomp.string.noRegExp_(e,"startsWith");var p=this.toString();e+="";for(var b=p.length,a=e.length,c=Math.max(0,Math.min(l|0,p.length)),Q=0;Q<a&&c<b;)if(p[c++]!=e[Q++])return!1;return Q>=a};$jscomp.string.startsWith$install=function(){String.prototype.startsWith||(String.prototype.startsWith=$jscomp.string.startsWith)};
$jscomp.string.endsWith=function(e,l){$jscomp.string.noRegExp_(e,"endsWith");var p=this.toString();e+="";void 0===l&&(l=p.length);for(var b=Math.max(0,Math.min(l|0,p.length)),a=e.length;0<a&&0<b;)if(p[--b]!=e[--a])return!1;return 0>=a};$jscomp.string.endsWith$install=function(){String.prototype.endsWith||(String.prototype.endsWith=$jscomp.string.endsWith)};
(function(e,l){"object"===typeof exports&&"object"===typeof module?module.exports=l():"function"===typeof define&&define.amd?define([],l):"object"===typeof exports?exports.CitrixWebRTC=l():e.CitrixWebRTC=l()})(self,function(){return function(){function e(b){var a=p[b];if(void 0!==a)return a.exports;a=p[b]={exports:{}};l[b].call(a.exports,a,a.exports,e);return a.exports}var l={945:function(b,a,c){var e=this&&this.__extends||function(){var a=function(k,v){a=Object.setPrototypeOf||{__proto__:[]}instanceof
Array&&function(a,g){a.__proto__=g}||function(a,g){for(var k in g)g.hasOwnProperty(k)&&(a[k]=g[k])};return a(k,v)};return function(k,v){function b(){this.constructor=k}a(k,v);k.prototype=null===v?Object.create(v):(b.prototype=v.prototype,new b)}}();Object.defineProperty(a,"__esModule",{value:!0});a.AudioElement=void 0;var u=c(658),h=c(550),d=c(851),w=c(946),q;(function(a){a.Init="Init";a.PlayStarted="PlayStarted";a.PauseCalled="PauseCalled"})(q||(q={}));b=function(a){function k(){var k=a.call(this,
null,h.class_id_t.AudioElement,0,u.ProxyMode.Local)||this;k.sinkId_="";k.srcObject_=null;k.loop_=!1;k.notiState=q.Init;return k}e(k,a);k.prototype.setSinkId=function(a){var k=this;d.logger.log(this.user_friendly_id()+".setSinkId: set sinkId to "+a);return new Promise(function(g,b){k.waitUntilConnected("AudioElement.sinkId").then(function(){var b=k.remoteInvoke(!0,h.method_id_AudioElement_t.sinkId,a);w.getRedirector().getFeatureValue(h.FEATURE_ms_teams_pstn)||(k.sinkId_=a,g());return b}).then(function(){d.logger.log(k.user_friendly_id()+
".setSinkId: success! resolving...");k.sinkId_=a;g()})["catch"](function(a){a=k.logRemoteInvokeError(a,".sinkId setter: failed to connect!");b(a)})})};Object.defineProperty(k.prototype,"sinkId",{get:function(){return this.sinkId_},set:function(a){this.setSinkId(a)},enumerable:!1,configurable:!0});Object.defineProperty(k.prototype,"srcObject",{get:function(){return this.srcObject_},set:function(a){var k=this;d.logger.log(this.user_friendly_id()+".srcObject: set srcObject to "+JSON.stringify(a));a!==
this.srcObject_&&(this.srcObject_=a,this.waitUntilConnected("AudioElement.srcObject").then(function(){return a.syncBarrier()}).then(function(a){d.logger.log(k.user_friendly_id()+".srcObject: set srcObject to s "+JSON.stringify(a));return k.remoteInvoke(!0,h.method_id_AudioElement_t.srcObject,null!==a&&void 0!==a?a.id:"null")}).then(function(){d.logger.log(k.user_friendly_id()+".srcObject setter: remote success!")})["catch"](function(a){k.logRemoteInvokeError(a,".srcObject setter: failed to connect!")}))},
enumerable:!1,configurable:!0});Object.defineProperty(k.prototype,"src",{get:function(){return this.src_},set:function(a){var k=this;d.logger.log(this.user_friendly_id()+".src: set src to "+a);this.src_=a;this.waitUntilConnected("AudioElement.src").then(function(){k.remoteInvoke(!0,h.method_id_AudioElement_t.src,a)})["catch"](function(a){k.logRemoteInvokeError(a,".src setter: failed to connect!")})},enumerable:!1,configurable:!0});k.prototype.play=function(){var a=this;d.logger.log(this.user_friendly_id()+
".play() called.");this.toggleAudio(!0);return new Promise(function(k,g){a.waitUntilConnected("AudioElement.play").then(function(){return a.remoteInvoke(!1,h.method_id_AudioElement_t.play)}).then(function(){k()})["catch"](function(k){a.logRemoteInvokeError(k,".play: failed to connect!");g(k)})})};k.prototype.playEx=function(a,k,g){var b=this;d.logger.log(this.user_friendly_id()+".playEx() src:"+a+" sinkId:"+k+" loop:"+g);this.notiState=q.PlayStarted;this.waitUntilConnected("AudioElement.playEx").then(function(){var a=
[];k&&a.push(b.setSinkId(k));void 0!==g&&null!==g&&(b.loop_=g,a.push(b.remoteInvoke(!0,h.method_id_AudioElement_t.loop,g)));return Promise.all(a)}).then(function(){b.src_=a;return b.remoteInvoke(!0,h.method_id_AudioElement_t.src,a)}).then(function(){return b.play()}).then(function(){if(b.notiState==q.PauseCalled)return d.logger.log(b.user_friendly_id()+".playEx() run deferred pause"),b.doPauseAndDispose()}).then(function(){b.notiState=q.Init;d.logger.log(b.user_friendly_id()+".playEx() done")})["catch"](function(a){b.notiState=
q.Init;b.logRemoteInvokeError(a,".playEx() failed!")})};k.prototype.pause=function(){var a=this;d.logger.log(this.user_friendly_id()+".pause() called.");this.toggleAudio(!1);return new Promise(function(k,g){a.waitUntilConnected("AudioElement.pause").then(function(){return a.remoteInvoke(!1,h.method_id_AudioElement_t.pause)}).then(function(){k()})["catch"](function(k){a.logRemoteInvokeError(k,".pause: failed!");g()})})};k.prototype.doPauseAndDispose=function(){var a=this;d.logger.log(this.user_friendly_id()+
".doPauseAndDispose() called.");this.toggleAudio(!1);return new Promise(function(k,g){a.waitUntilConnected("AudioElement.doPauseAndDispose").then(function(){return a.remoteInvoke(!1,h.method_id_AudioElement_t.pause,[])}).then(function(){d.logger.log(a.user_friendly_id()+".doPauseAndDispose() resolving...");k();a.dispose()})["catch"](function(g){a.logRemoteInvokeError(g,".doPauseAndDispose: failed to connect!")})})};k.prototype.pauseAndDispose=function(){this.notiState==q.PlayStarted?(d.logger.log(this.user_friendly_id()+
".pauseAndDispose() deferred"),this.notiState=q.PauseCalled):this.doPauseAndDispose()};k.prototype.toggleAudio=function(a){this.srcObject_&&(d.logger.log(this.user_friendly_id()+".toggleAudio() toggle audio tracks:"+a),this.srcObject_.toggleAudio(a))};Object.defineProperty(k.prototype,"loop",{get:function(){return this.loop_},set:function(a){var k=this;d.logger.log(this.user_friendly_id()+".loop: set loop to "+a);this.loop_=a;this.waitUntilConnected("AudioElement.loop").then(function(){k.remoteInvoke(!0,
h.method_id_AudioElement_t.loop,a)})["catch"](function(a){k.logRemoteInvokeError(a,".loop setter: failed to connect!")})},enumerable:!1,configurable:!0});k.prototype.dispose=function(){d.logger.log(this.user_friendly_id()+".dispose()");this.src_=this.sinkId_="";this.srcObject_=null;this.loop_=!1;this.release()};return k}(u.ProxyObject);a.AudioElement=b},239:function(b,a,c){a.E=void 0;var e=c(945),u=c(851),h=function(){function a(){this.sinkId=void 0;this.src="";this.loop=void 0;this.element=null}
a.prototype.getSrc=function(){return this.src};a.prototype.setSinkId=function(a){this.sinkId=a};a.prototype.getLoop=function(){return!0===this.loop};a.prototype.setLoop=function(a){this.loop=a};a.prototype.play=function(a){this.element=new e.AudioElement;this.src=a;this.element.playEx(this.src,this.sinkId,this.loop)};a.prototype.pause=function(){this.element&&(this.element.pauseAndDispose(),this.element=null)};a.prototype.release=function(){this.element&&(this.element.dispose(),this.element=null)};
return a}();b=function(){function a(){this.audioIdMap=null;this.audioIdMap=new Map}a.prototype.getNotificationInfo=function(a){if(this.audioIdMap.has(a))return this.audioIdMap.get(a);var b=new h;this.audioIdMap.set(a,b);return b};a.prototype.playNotifyAudio=function(a,b){b&&(u.logger.log("AudioNotification.playNotifyAudio, Remote to Thin Client audioId:"+a+" src:"+b),this.getNotificationInfo(a).play(b))};a.prototype.pauseNotifyAudio=function(a,b){if(this.audioIdMap.has(a)){var d=this.audioIdMap.get(a);
b&&b!=d.getSrc()&&u.logger.log("AudioNotification.pauseNotifyAudio warning: for audioId:"+a+", different param src:"+b+" from org src:"+d.getSrc());d.pause()}else u.logger.log("AudioNotification.pauseNotifyAudio no audioId:"+a+" src:"+b)};a.prototype.setSinkId=function(a,b){if(null!=b&&b.startsWith("speaker:")){u.logger.log("AudioNotification.setSinkId before parsing audioId:"+a+" sinkId:"+b);var d=b.slice(8);u.logger.log("AudioNotification.setSinkId after parsing audioId:"+a+" speakersinkId:"+d);
b=d}this.getNotificationInfo(a).setSinkId(b)};a.prototype.getLoop=function(a){return this.getNotificationInfo(a).getLoop()};a.prototype.setLoop=function(a,b){this.getNotificationInfo(a).setLoop(b)};a.prototype.release=function(){this.audioIdMap.forEach(function(a,b,d){a.release()});this.audioIdMap.clear()};return a}();a.E=b},613:function(b,a,c){var e=this&&this.__extends||function(){var a=function(b,d){a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,
b){for(var d in b)b.hasOwnProperty(d)&&(a[d]=b[d])};return a(b,d)};return function(b,d){function k(){this.constructor=b}a(b,d);b.prototype=null===d?Object.create(d):(k.prototype=d.prototype,new k)}}();Object.defineProperty(a,"__esModule",{value:!0});a.E911Service=void 0;var u=c(550),h=c(658),d=c(851);b=function(a){function b(){var d=a.call(this,null,u.class_id_t.E911Service,0,h.ProxyMode.Local)||this;d.preE911Info_=null;return d}e(b,a);b.prototype.isSameInfo=function(a){if(null==this.preE911Info_&&
null!=a||null!=this.preE911Info_&&null==a||this.preE911Info_.e911.length!=a.e911.length||this.preE911Info_.bssid!=a.bssid||this.preE911Info_.ipv4!=a.ipv4||this.preE911Info_.subnetLengthIpv4!=a.subnetLengthIpv4||this.preE911Info_.ipv6!=a.ipv6||this.preE911Info_.subnetLengthIpv6!=a.subnetLengthIpv6||this.preE911Info_.mac!=a.mac||1E-4<=Math.abs(this.preE911Info_.latitude-a.latitude)||1E-4<=Math.abs(this.preE911Info_.longitude-a.longitude))return!1;for(var k=0;k<a.e911.length;k++)if(this.preE911Info_.e911[k].chassisId!=
a.e911[k].chassisId||this.preE911Info_.e911[k].portId!=a.e911[k].portId)return!1;return!0};Object.defineProperty(b.prototype,"onupdate",{get:function(){return this.onupdate_},set:function(a){var k=this;this.onupdate_=a;this.waitUntilConnected(this.user_friendly_id()+".onupdate").then(function(){var a=k.registerCallbacks(!1,k.isNullCallback(k.onupdate_),u.method_id_E911Service_t.onupdate);a.then(function(a){a=a.params;var g=a[0];a.slice(1);null!==k.preE911Info_&&k.isSameInfo(g)||(d.logger.log(k.user_friendly_id()+
".onupdate",JSON.stringify(g)),k.onupdate_&&k.onupdate_(g),k.preE911Info_=g)});return k.remoteInvoke(!0,u.method_id_E911Service_t.onupdate,a.success)})["catch"](function(){return d.logger.log(k.user_friendly_id()+".onupdate, could not set listener")})},enumerable:!1,configurable:!0});b.prototype.getE911Info=function(){var a=this;return new Promise(function(k,b){a.waitUntilConnected(a.user_friendly_id()+".getE911Info").then(function(){return a.remoteInvoke(!1,u.method_id_E911Service_t.getE911Info)}).then(function(b){d.logger.log(a.user_friendly_id()+
".getE911Info",JSON.stringify(a.param0(b)));k(a.param0(b))})["catch"](function(){d.logger.log(a.user_friendly_id()+".getE911Info promise rejected");b()})})};b.prototype.updateE911Info=function(){var a=this;this.getE911Info().then(function(b){return a.onupdate&&a.onupdate(b)})["catch"](function(){return d.logger.log("Fail to get e911 information!")})};return b}(h.ProxyObject);a.E911Service=b},9:function(b,a,c){var e=this&&this.__extends||function(){var a=function(b,k){a=Object.setPrototypeOf||{__proto__:[]}instanceof
Array&&function(a,b){a.__proto__=b}||function(a,b){for(var g in b)b.hasOwnProperty(g)&&(a[g]=b[g])};return a(b,k)};return function(b,k){function d(){this.constructor=b}a(b,k);b.prototype=null===k?Object.create(k):(d.prototype=k.prototype,new d)}}();Object.defineProperty(a,"__esModule",{value:!0});a.EngineControl=a.VersionType=void 0;var u=c(550),h=c(946),d=c(658),w=c(851);(function(a){a[a.Webrpc=0]="Webrpc";a[a.WebrtcCodecs=1]="WebrtcCodecs";a[a.Receiver=2]="Receiver";a[a.Vda=3]="Vda";a[a.Endpoint=
4]="Endpoint";a[a.TypeScript=5]="TypeScript";a[a.HdxRtcEngine=6]="HdxRtcEngine";a[a.Max=7]="Max"})(a.VersionType||(a.VersionType={}));b=function(a){function b(k){var c=a.call(this,null,u.class_id_t.EngineControl,0,d.ProxyMode.Local)||this;c.clientInfo_="";c.clientInfo_=k;return c}e(b,a);b.prototype.bind=function(){w.logger.log(this.user_friendly_id()+".bind() called.");this.reconstructor(null,u.class_id_t.EngineControl,0)};b.prototype.syncBarrier=function(){var a=this;w.logger.log(this.user_friendly_id()+
".syncBarrier() called.");return new Promise(function(b,d){a.syncBarrierDeep(b,d)&&a.waitUntilConnected("EngineControl.syncBarrier").then(function(){return Promise.all([a.remoteInvoke(!1,u.method_id_EngineControl_t.version,{major:0,minor:0,revision:0,build:0}),a.remoteInvoke(!1,u.method_id_EngineControl_t.feature_flags,[])])}).then(function(b){w.logger.log(a.user_friendly_id()+"received webrpc version and supported feature list.");b=b.map(function(b){return a.param0(b)});a.version_=b[0];a.features_=
b[1];h.getRedirector().setFeatures(a.features_);a.remoteInvoke(!1,u.method_id_EngineControl_t.set_client_info,(a.clientInfo_||"Unknown")+"; vdiShim/"+u.HDXMS_VERSION,h.getRedirector().sessionClientId)["catch"](function(){return w.logger.log(a.user_friendly_id()+" could not set client info")});b=[];for(var d=0,t=a.features_;d<t.length;d++){var m=t[d];"ms_teams_desktop_sharing"===m.name&&m.value?b.push(a.remoteInvoke(!1,u.method_id_EngineControl_t.version_info,[])):"ms_teams_osinfo"===m.name&&m.value?
b.push(a.remoteInvoke(!1,u.method_id_EngineControl_t.osinfo,{family:"",version:"",architecture:"",distro:"",edition:""})):"ms_teams_endpoint_id"===m.name&&m.value?b.push(a.remoteInvoke(!1,u.method_id_EngineControl_t.endpoint_id,{machine_id:"",user_id:""})):"ms_teams_hardware_info"===m.name&&m.value&&b.push(a.remoteInvoke(!1,u.method_id_EngineControl_t.hardware_info))}if(0<b.length)return Promise.all(b)}).then(function(b){if(void 0===b)w.logger.log(a.user_friendly_id()+"release-1905 client.");else{w.logger.log(a.user_friendly_id()+
"release-1906 or later client: received detailed client version list.");for(var d=0;d<b.length;d++){var t=b[d];t.hdr.proc.iid==u.class_id_t.EngineControl&&t.hdr.proc.methodid==u.method_id_EngineControl_t.version_info?a.versions_=a.param0(t):t.hdr.proc.iid==u.class_id_t.EngineControl&&t.hdr.proc.methodid==u.method_id_EngineControl_t.osinfo?a.osinfo_=a.param0(t):t.hdr.proc.iid==u.class_id_t.EngineControl&&t.hdr.proc.methodid==u.method_id_EngineControl_t.endpoint_id?a.endpointid_=a.param0(t):t.hdr.proc.iid==
u.class_id_t.EngineControl&&t.hdr.proc.methodid==u.method_id_EngineControl_t.hardware_info&&(a.hardwareinfo_=a.param0(t))}}a.syncBarrierResolve(a)})["catch"](function(b){b=a.logRemoteInvokeError(b,"failure to retrieve version/feature related client info.");a.syncBarrierReject(b)})})};return b}(d.ProxyObject);a.EngineControl=b},368:function(b,a,c){Object.defineProperty(a,"__esModule",{value:!0});a.Frames=a.FrameTracker=void 0;var e=c(851),u=c(946),h=c(679),d=function(){return function(a,b){this.resolve=
a;this.reject=b}}(),w=function(){function a(){this.name="overlay";this.reqs_=[];u.getRedirector().addProtocolHandler(this)}a.prototype.init=function(a){};a.prototype.reset=function(){this.reqs_.forEach(function(a,b){a.reject()});this.reqs_=[]};a.prototype.on_message=function(a){var b=this;e.logger.log("HDXMS: Overlay <<< "+JSON.stringify(a));if("capabilities"==a.command)new Promise(function(a,k){b.reqs_.push(new d(a,k));u.getRedirector().WSSendObject({v:"overlay",command:"configure",caps:[]})});else{var c=
this.reqs_.shift();void 0!=c?1==a.status&&("track_window"==a.command?c.resolve(a.windowId):"untrack_window"==a.command?c.resolve(a.windowHandle):"configure"==a.command?c.resolve({}):c.reject({})):e.logger.log("spurious response for message: "+a.command)}};a.prototype.registerWindowWithService=function(a){var b=this;return new Promise(function(c,g){var B=u.getRedirector();if(void 0==a){e.logger.log("FrameTrackerProtocol.registerWindowWithService: legacy case");var t=window.getWindowHandleAsHex.bind(window);
if(void 0===t||null===t)e.logger.log("FrameTrackerProtocol.registerWindowWithService: getWindowHandle method is undefined or null"),g({});Promise.all([t(),B.startRedirection(!1,"registerWindowWithService")]).then(function(a){e.logger.log("FrameTracker.registerWindowWithService: set window handle: "+a[0]);B.WSSendObject({v:"overlay",command:"window",windowHandle:a[0]});c(void 0)})}else e.logger.log("FrameTrackerProtocol.registerWindowWithService: new MW case"),B.startRedirection(!1,"registerWindowWithService").then(function(){b.reqs_.push(new d(c,
g));B.WSSendObject({v:"overlay",command:"track_window",windowHandle:a})})})};a.prototype.unregisterWindowWithService=function(a){var b=this;e.logger.log("FrameTrackerProtocol.unregisterWindowWithService(handle: "+a+")");return new Promise(function(c,g){void 0==a?g({}):(b.reqs_.push(new d(c,g)),u.getRedirector().WSSendObject({v:"overlay",command:"untrack_window",windowHandle:a}))})};return a}(),q=function(){function a(b){var d=this;this.running_=!1;this.elements_=[];this.clipRects=new Set;this.videos_=
[];this.connected_=!1;this.yClientAreaOffset_=this.xClientAreaOffset_=0;this.wheelEventHandler=function(a){setTimeout(function(){d.updateAll()},10)};this.scrollEventHandler=function(a){d.updateAll()};this.keyupEventHandler=function(a){"Tab"!=a.code&&"ArrowUp"!=a.code&&"ArrowDown"!=a.code&&"ArrowLeft"!=a.code&&"ArrowRight"!=a.code&&"PageUp"!=a.code&&"PageDown"!=a.code&&"Home"!=a.code&&"End"!=a.code||d.updateAll()};this.resizeEventHandler=function(a){e.logger.log("onWindowResize... update video elements position");
d.updateAll()};e.logger.log("FrameTracker.constructor: (handle: "+b+")");this.handle_=b;this.connectToService();this.observer_=new MutationObserver(function(a){d.updateAll()})}a.prototype.connectToService=function(){var b=this;a.Protocol.registerWindowWithService(this.handle_).then(function(a){e.logger.log("FrameTracker: connected to service. (windowId="+a+")");b.connected_=!0;b.windowId_=a;b.videos_.forEach(function(a){a.sinkId=JSON.stringify(b.windowId_)});b.videos_=[]})};Object.defineProperty(a.prototype,
"handle",{get:function(){return this.handle_},enumerable:!1,configurable:!0});a.prototype.getWindowFromElement=function(a){return a.ownerDocument.defaultView};a.prototype.rectanglesIntersect=function(a,b){return a.x<b.x+b.width&&a.x+a.width>b.x&&a.y<b.y+b.height&&a.y+a.height>b.y?!0:!1};a.prototype.intersectingRect=function(a,b){var d=Math.max(a.left,b.left),g=Math.max(a.top,b.top);return new DOMRect(d,g,Math.min(a.right,b.right)-d,Math.min(a.bottom,b.bottom)-g)};a.prototype.pedigreeCount=function(a,
b){for(var d=0,g=a.parentElement;null!=g&&g!=b;)d++,g=g.parentElement;return{isAncestor:null!=g,pedigree:d}};a.prototype.selectTopmost=function(a,b){var d=this.getBoundingClientRect(a),g=this.getBoundingClientRect(b),d=this.intersectingRect(d,g),g=a.ownerDocument.elementFromPoint(d.left+d.width/2,d.top+d.height/2);if(g==a)return a;if(g==b)return b;d=this.pedigreeCount(a,g);g=this.pedigreeCount(b,g);if(d.isAncestor&&g.isAncestor){if(d.pedigree<g.pedigree)return a;if(g.pedigree<d.pedigree)return b}else{if(d.isAncestor)return a;
if(g.isAncestor)return b}};a.prototype.checkOverlappingVideos=function(a){var b=this,d=this.getBoundingClientRect(a.target);a.overlaps.forEach(function(b){a.target.remoteVideoElement.removeClipRect(b.rect)});a.overlaps=[];this.elements_.forEach(function(g){if(g!=a){var c=g.overlaps.map(function(a){return a.element}).indexOf(a.target);-1!=c&&(c=g.overlaps.splice(c,1)[0],g.target.remoteVideoElement.removeClipRect(c.rect));c=b.getBoundingClientRect(g.target);if(b.rectanglesIntersect(d,c)){var t=b.selectTopmost(a.target,
g.target);t==a.target?(g.overlaps.push({element:a.target,rect:d}),g.target.remoteVideoElement.addClipRect(d)):t==g.target&&(a.overlaps.push({element:g.target,rect:c}),a.target.remoteVideoElement.addClipRect(c))}}})};a.prototype.updateAll=function(){var a=this;this.elements_.forEach(function(b){var d=a.getBoundingClientRect(b.target);if(void 0!==d){var g=b.clientRect;if(void 0===g||g.x!==d.x||g.y!==d.y||g.width!==d.width||g.height!==d.height)b.clientRect=d,b.callback(d),a.checkOverlappingVideos(b)}})};
a.prototype.track=function(a,b){var d=this,g=this.getBoundingClientRect(a);e.logger.log("Track (handle: "+this.handle_+") element frame",a,JSON.stringify(g));console.log(a);this.elements_.push({target:a,clientRect:void 0,callback:b,overlaps:[]});try{e.logger.log("[HdxWebRTC.js] Initializing occlusion for new videoElement"),this.clipRects.forEach(function(b){d.applyOcclusion(a,JSON.parse(b))})}catch(c){e.logger.log("[HdxWebRTC.js] addOcclusionInit failed! "+c)}this.running_||(e.logger.log("Start FrameTracker observer..."),
this.observer_.observe(a.ownerDocument.body,{attributes:!0,childList:!0,subtree:!0}),g=this.getWindowFromElement(a),g.addEventListener("wheel",this.wheelEventHandler),g.addEventListener("scroll",this.scrollEventHandler),g.addEventListener("keyup",this.keyupEventHandler),g.addEventListener("resize",this.resizeEventHandler),this.running_=!0);this.updateAll()};a.prototype.untrack=function(a){e.logger.log("Untrack (handle: "+this.handle_+") element frame",a);var b=-1;this.elements_.forEach(function(g,
d){g.target===a&&(b=d)});if(0<=b&&(this.elements_.splice(b,1),0===this.elements_.length)){e.logger.log("Stop FrameTracker observer...");this.observer_.disconnect();var d=this.getWindowFromElement(a);d.removeEventListener("wheel",this.wheelEventHandler);d.removeEventListener("scroll",this.scrollEventHandler);d.removeEventListener("keyup",this.keyupEventHandler);d.removeEventListener("resize",this.resizeEventHandler);this.running_=!1}};a.prototype.applyOcclusion=function(a,b){var d=this.getBoundingClientRect(a);
this.rectanglesIntersect(b,d)&&void 0!==a.remoteVideoElement&&a.remoteVideoElement.addClipRect(b)};a.prototype.addOcclusion=function(a){var b=this;e.logger.log("[HdxWebRTC.js] Adding occlusion "+JSON.stringify(a));e.logger.log("[HdxWebRTC.js] Tracking '"+this.elements_.length+"' elements.");this.clipRects.add(JSON.stringify(a));this.elements_.forEach(function(d){b.applyOcclusion(d.target,a)})};a.prototype.removeOcclusion=function(a){e.logger.log("[HdxWebRTC.js] Removing occlusion "+JSON.stringify(a));
e.logger.log("[HdxWebRTC.js] Tracking '"+this.elements_.length+"' elements.");this.clipRects["delete"](JSON.stringify(a));this.elements_.forEach(function(b){void 0!==b.target.remoteVideoElement&&b.target.remoteVideoElement.removeClipRect(a)})};a.prototype.setClientAreaOffset=function(a,b){this.xClientAreaOffset_=a;this.yClientAreaOffset_=b};a.prototype.getBoundingClientRect=function(a){a=a.getBoundingClientRect();a.x+=this.xClientAreaOffset_;a.y+=this.yClientAreaOffset_;return a};a.prototype.newVideoElement=
function(b){var d=this;e.logger.log("FrameTracker.newVideoElement: (id: "+b.id+")");if(void 0!==b.remoteVideoElement)e.logger.log("Video element is already configured!!!");else{b.id||(b.id="ctx-vid-"+a.videoElementIDs++);var c=new h.VideoElement(b.id,this.getWindowFromElement(b));this.connected_?(e.logger.log("FrameTracker.newVideoElement: initializing video element with sink id "+this.windowId_),c.sinkId=JSON.stringify(this.windowId_)):(e.logger.log("FrameTracker.newVideoElement: video element awaiting stable window state"),
this.videos_.push(c));c.onloadedmetadata=function(){b.dispatchEvent(new Event("loadedmetadata"))};c.ontimeupdate=function(){b.dispatchEvent(new Event("timeupdate"))};c.onconnectionstatechange=function(){"connected"==c.connectionState?d.track(b,function(a){c.setFrame(a)}):d.untrack(b)};delete b.remoteVideoElement;Object.defineProperty(b,"remoteVideoElement",{writable:!0,configurable:!0,value:null});b.remoteVideoElement=c;delete b.srcObject;Object.defineProperty(b,"srcObject",{configurable:!0,get:function(){return c.srcObject},
set:function(a){e.logger.log("VDI Shim set video element srcObject "+a);c.srcObject=a}});delete b.videoWidth;Object.defineProperty(b,"videoWidth",{configurable:!0,get:function(){return c.videoWidth}});delete b.videoHeight;Object.defineProperty(b,"videoHeight",{configurable:!0,get:function(){return c.videoHeight}})}};a.prototype.disposeVideoElement=function(a){e.logger.log("FrameTracker.disposeVideoElement: (id: "+a.id+")");var b=a.remoteVideoElement;if(void 0!=b){var d=this.videos_.findIndex(function(a){return a.Id==
b.Id});-1<d&&this.videos_.splice(d,1);b.dispose();a.remoteVideoElement=void 0}};a.videoElementIDs=0;a.Protocol=new w;return a}();a.FrameTracker=q;b=function(){function a(b){this.frames_=[];b&&this.frames_.push(new q(void 0))}a.prototype.newFrame=function(a){e.logger.log("Frames.newFrame: (handle: "+a+")");var b=this.findFrame(a);void 0==b&&(b=new q(a),this.frames_.push(b));return b};a.prototype.disposeFrame=function(a){e.logger.log("Frames.disposeFrame: (handle: "+a+")");var b=this.frames_.findIndex(function(b){return b.handle==
a});-1<b&&(q.Protocol.unregisterWindowWithService(a).then(function(a){e.logger.log("Untrack window (handle: "+a+") successful")}),this.frames_.splice(b,1))};a.prototype.findFrame=function(a){e.logger.log("Frames.findFrame: (handle: "+a+")");return void 0!=a?this.frames_.find(function(b){return b.handle==a}):this.frames_[0]};a.prototype.reconnect=function(){e.logger.log("Frames.reconnect()");this.frames_.forEach(function(a){a.connectToService()})};return a}();a.Frames=b},247:function(b,a){Object.defineProperty(a,
"__esModule",{value:!0});a.getGC=a.GC=void 0;var c=function(){function a(b){this.parent_=this.object_=null;this.children_=[];this.object_=b}a.prototype.addChild=function(a){a.parent_!=this&&(a.parent_=this,this.children_.push(a))};a.prototype.removeChild=function(a){var b=this.children_.indexOf(a);this.children_.splice(b,1);a.parent_=null};return a}(),e=function(){function a(){this.root_=new c(null)}a.prototype.trackObject=function(a,b){void 0===b&&(b=null);if(null===this.findNode(a,this.root_)){var e=
this.findNode(b,this.root_),h=new c(a);e?e.addChild(h):this.root_.addChild(h)}};a.prototype.releaseObject=function(a){a=this.findNode(a,this.root_);if(null===a||a===this.root_)return!1;this.destroyNodeObjectRecurse(a);a.parent_.removeChild(a);return!0};a.prototype.destroyNodeObjectRecurse=function(a){for(var b=0,c=a.children_;b<c.length;b++)this.destroyNodeObjectRecurse(c[b]);a.object_.destroy()};a.prototype.setParent=function(a,b){var c=this.findNode(a,this.root_);if(null===c)return!1;var e=this.findNode(b,
this.root_);if(null===e)return!1;if(c.parent_===e)return!0;c.parent_.removeChild(c);e.addChild(c);return!0};a.prototype.reset=function(){this.root_.children_=[]};a.prototype.findNode=function(a,b){if(b.object_===a)return b;for(var c=null,e=0,k=b.children_;e<k.length&&(c=this.findNode(a,k[e]),null===c);e++);return c};return a}();a.GC=e;var u=new e;a.getGC=function(){return u}},946:function(b,a,c){Object.defineProperty(a,"__esModule",{value:!0});a.getRedirector=a.HdxMediaStream=a.RedirectionStatus=
a.WebrpcStatusCode=void 0;var e=c(658),u=c(851),h=c(550),d=c(545),w=c(394),q=c(691),n=function(){return function(a,b,d,m,c,k,x,r){void 0===r&&(r=void 0);this.resolve=a;this.reject=b;this.iid=d;this.oid=m;this.cbid=c;this.oneShot=k;this.mid=x;this.completion_cb=r}}(),k;(function(a){a[a.rpc_status_success=0]="rpc_status_success";a[a.rpc_status_unspecified_error=1]="rpc_status_unspecified_error";a[a.rpc_status_unexpected=2]="rpc_status_unexpected";a[a.rpc_status_index_out_of_bounds=3]="rpc_status_index_out_of_bounds";
a[a.rpc_status_missing_parameter=4]="rpc_status_missing_parameter";a[a.rpc_status_missing_return_value=5]="rpc_status_missing_return_value";a[a.rpc_status_invalid_object=6]="rpc_status_invalid_object";a[a.rpc_status_user_exception=7]="rpc_status_user_exception";a[a.rpc_status_system_error=8]="rpc_status_system_error"})(k=a.WebrpcStatusCode||(a.WebrpcStatusCode={}));var v;(function(a){a[a.NotRedirected=0]="NotRedirected";a[a.Connecting=1]="Connecting";a[a.Binding=2]="Binding";a[a.Redirected=3]="Redirected"})(v=
a.RedirectionStatus||(a.RedirectionStatus={}));b=function(){function a(){this.sessionId_="";this.handlers_=[];this.pingactive=!1;this.status=v.NotRedirected;this.reqs=[];this.cbs=[];this.deferredActions=[];this.telemetry_=new w.Telemetry;this.screenshare_=new q.ScreenShareUtil;this.stateChangeNotifcations=[];this.vdafeatures_=[]}Object.defineProperty(a.prototype,"telemetry",{get:function(){return this.telemetry_},enumerable:!1,configurable:!0});Object.defineProperty(a.prototype,"screenshare",{get:function(){return this.screenshare_},
enumerable:!1,configurable:!0});a.prototype.setRemoteSessionInfoCb=function(a){this.remoteSessionInfoCb=a};a.prototype.setFeatures=function(a){this.features=a;this.screenshare.onInitComplete();this.handlers_.forEach(function(b,d){b.init(a)})};a.prototype.getFeatureValue=function(a){if(this.features){var b=this.features.find(function(b){return b.name===a});return void 0!==b?b.value:!1}return!1};a.prototype.getVDAFeatureValue=function(a){return void 0!==this.vdafeatures_.find(function(b){return b===
a})?!0:!1};a.prototype.onRedirectionComplete=function(){for(;this.deferredActions&&0<this.deferredActions.length;)this.deferredActions.shift().post(this.status==v.Redirected)};a.prototype.connectToService=function(){u.logger.log("Redirection status: Connecting...");this.status=v.Connecting;return new Promise(function(a,b){var d=new WebSocket("wss://127.0.0.1:9002");d.onopen=function(){a(d)};d.onerror=function(a){u.logger.log("websocket connection error: "+a.type);b(a)}})};a.prototype.waitUntilRedirected=
function(a){var b=this;return new Promise(function(d,c){b.status==v.Redirected?d():0>=a?c():setTimeout(function(){u.logger.log("waitUntilRedirected() timeout. count="+a);b.status!=v.Redirected?b.waitUntilRedirected(--a).then(function(){d()})["catch"](function(){c()}):d()},2E3)})};a.prototype.handleRemoteSessionInfo=function(){var a=this;u.logger.log("handleRemoteSessionInfo called.");var b=this;b.remoteSessionInfoCb?b.remoteSessionInfoCb().then(function(d){u.logger.log("remoteSessionInfo success! info:"+
JSON.stringify(d));u.logger.log("Redirection status: Redirected");b.status=v.Redirected;b.pingConnectionEnd();(d=window.onVdiClientConnected)&&d();a.telemetry.SendTelemetryInit();b.onRedirectionComplete()})["catch"](function(){u.logger.log("remoteSessionInfo failure!");b.suspendRedirection(!0);b.onRedirectionComplete()}):(u.logger.log("remoteSessionInfoCb is invalid!"),b.suspendRedirection(!0),b.onRedirectionComplete())};a.prototype.startRedirection=function(a,b){var d=this,c=window.onVdiClientDisconnected;
return new Promise(function(g,k){d.status!=v.Redirected?(u.logger.log("Attempting to start redirection: "+b),!1===a?d.deferredActions.push(new e.deferred_action(g,k,b)):d.connectToService().then(function(a){u.logger.log("Redirection status: Binding...");d.status=v.Binding;d.websocket=a;d.websocket.onmessage=function(a){d.onWSMessage(a)};d.websocket.onclose=function(a){d.onWSClose(a)};g();d.handleRemoteSessionInfo()})["catch"](function(a){u.logger.log("Unable to connect to websocket service! "+a);
k();d.suspendRedirection(!0);d.onRedirectionComplete();c&&c(!0)})):(u.logger.log("Redirection already started."),g())})};a.prototype.terminateOptimization=function(){this.websocket.close(1E3,"normal disconnecting!")};a.prototype.suspendRedirection=function(a){var b=this;u.logger.log("Suspending redirection.");this.handlers_.forEach(function(a,b){a.reset()});var d=window.onVdiClientDisconnected;try{d&&d(!1)}catch(c){u.logger.log("suspendRedirection(): exception during vdiClientDisconnect: "+c.message)}u.logger.log("Redirection status: NotRedirected");
var g=this.status;this.status=v.NotRedirected;var k=!1,d=window.getCitrixMSTeamsRedir,x=window.getCitrixWebrtcRedir,r;d?r=d:x&&(r=x);r&&r().then(function(d){u.logger.log("sucesss on disconnect"+d);"1"==d&&(k=!0,u.logger.log("Reg key exists while disconnecting"));a&&g===v.Redirected&&1==k&&(u.logger.log("Calling ping not normal disconnect"),b.pingConnectionBegin(!1))})["catch"](function(){u.logger.log("Failure to Read MS Teams redir Reg Key, not retrying...")});this.dispatchStateChangeNotifications()};
a.prototype.onWSOpen=function(){};a.prototype.onWSClose=function(a){u.logger.log("disconnected from websocket service. "+JSON.stringify(a));try{a&&1E3==a.code?this.suspendRedirection(!1):this.suspendRedirection(!0)}catch(b){u.logger.log("suspendRedirection(): exception closing WebSocket: "+b.message)}};a.prototype.onWSError=function(){try{this.suspendRedirection(!0)}catch(a){u.logger.log("suspendRedirection(): exception on WebSocket error: "+a.message)}};a.prototype.WSSendObjectWrapper=function(a,
b,d,c){var g=!0;b!=h.class_id_t.EngineControl||d!=h.method_id_EngineControl_t.ctor&&d!=h.method_id_EngineControl_t.version&&d!=h.method_id_EngineControl_t.feature_flags||(g=!1);var k=!0;if(g&&(k=!1,void 0!=this.features))for(var g=0,r=this.features;g<r.length;g++){var A=r[g];if(!0===A.value&&A.name==a){k=!0;break}}return 1==k?this.WSSendObject(c):Promise.reject("Cannot invoke method that is not supported by webrpc: iid("+b+") mid("+d+")")};a.prototype.WSSendObject=function(a){var b=this;return new Promise(function(d,
c){if("webrtc"==a.v){var g=a.hdr.proc.iid,k=a.hdr.proc.methodid,r=a.objref.oid;a.hdr.destroy||(g=new n(d,c,g,r,0,!0,k),b.reqs.push(g));g=JSON.stringify(a);u.logger.trace("WSSendObject: >>> "+h.WebrpcClassLibInfoUtil.composeClassInfoData(a)+" "+g);try{b.websocket.readyState==WebSocket.OPEN?b.websocket.send(g):(u.logger.log("WSSendObject(): warinig: web socket is not open, dropping the message!"),d({}))}catch(A){u.logger.log("WSSendObject(): exception: "+A.message),c(A.message)}}else if("overlay"==
a.v){g=JSON.stringify(a);u.logger.log("HDXMS: SendOverlayData: >>> "+g+"'");try{b.websocket.readyState==WebSocket.OPEN?b.websocket.send(g):(u.logger.log("WSSendObject(): warinig: web socket is not open, dropping the message!"),d({}))}catch(A){u.logger.log("WSSendObject(): exception: "+A.message),c(A.message)}}else if("telemetry"==a.v){g=JSON.stringify(a);u.logger.log("HDXMS: SendTelemetryData: >>> "+g+"'");try{b.websocket.readyState==WebSocket.OPEN?b.websocket.send(g):(u.logger.log("WSSendObject(): warinig: web socket is not open, dropping the message!"),
d({}))}catch(A){u.logger.log("WSSendObject(): exception: "+A.message),c(A.message)}}else if("appsharing"==a.v){g=JSON.stringify(a);u.logger.log("HDXMS: SendScreenSharingData: >>> "+g+"'");try{b.websocket.readyState==WebSocket.OPEN?b.websocket.send(g):(u.logger.log("WSSendObject(): warinig: web socket is not open, dropping the message!"),d({}))}catch(A){u.logger.log("WSSendObject(): exception: "+A.message),c(A.message)}}else u.logger.log("HDXMS: WSSendObject: Unknown protocol: '"+JSON.stringify(a)+
"'")})};a.prototype.webrpcStatusCodeToName=function(a){switch(a){case k.rpc_status_success:a="rpc_status_success";break;case k.rpc_status_unspecified_error:a="rpc_status_unspecified_error";break;case k.rpc_status_unexpected:a="rpc_status_unexpected";break;case k.rpc_status_index_out_of_bounds:a="rpc_status_index_out_of_bounds";break;case k.rpc_status_missing_parameter:a="rpc_status_missing_parameter";break;case k.rpc_status_missing_return_value:a="rpc_status_missing_return_value";break;case k.rpc_status_invalid_object:a=
"rpc_status_invalid_object";break;case k.rpc_status_user_exception:a="rpc_status_user_exception";break;case k.rpc_status_system_error:a="rpc_status_system_error";break;default:a="unknown"}return a};a.prototype.parceWebrpcError=function(a,b){void 0===a&&(a=b&&0<b.length?b[0].category||b[0].code||b[0].message?k.rpc_status_system_error:k.rpc_status_user_exception:k.rpc_status_unspecified_error);var d;switch(a){case k.rpc_status_unspecified_error:case k.rpc_status_unexpected:case k.rpc_status_index_out_of_bounds:case k.rpc_status_missing_parameter:case k.rpc_status_missing_return_value:case k.rpc_status_invalid_object:d=
new DOMException(this.webrpcStatusCodeToName(a),this.webrpcStatusCodeToName(a));break;case k.rpc_status_user_exception:d=b&&0<b.length?new DOMException(b[0],this.webrpcStatusCodeToName(a)):new DOMException(this.webrpcStatusCodeToName(a),this.webrpcStatusCodeToName(a));break;case k.rpc_status_system_error:if(b&&0<b.length){d=Object.create(DOMException);var g={value:null,writable:!0,enumerable:!1,Configurable:!0};g.value=b[0].category;Object.defineProperty(d,"name",g);g.value=b[0].code;Object.defineProperty(d,
"code",g);g.value=b[0].message;Object.defineProperty(d,"message",g)}else d=new DOMException(this.webrpcStatusCodeToName(a),this.webrpcStatusCodeToName(a))}return d};a.prototype.onWSMessage=function(a){a=a.data;var b;try{b=JSON.parse(a)}catch(g){u.logger.log("invalid JSON!!!");u.logger.log(g);u.logger.log(a);return}if("webrtc"==b.v){u.logger.trace("onWSMessage: <<< "+h.WebrpcClassLibInfoUtil.composeClassInfoData(b)+" "+a);var c=b.hdr.proc.iid,k=b.hdr.proc.methodid,e=b.objref.oid,x=b.status;if(b.hdr.msg_type==
d.WsJsonUtil.getMsgType(d.ws_msg_type_t.reply))a=this.reqs.findIndex(function(a){return a.iid==c&&a.oid==e&&a.mid==k}),0<=a?0==x?this.reqs.splice(a,1).shift().resolve(b):(x=this.parceWebrpcError(x,b.params),this.reqs.splice(a,1).shift().reject(x)):(u.logger.log("HDXMS didnt find this one. (reqs)"),u.logger.log(this.reqs));else if(b.hdr.msg_type==d.WsJsonUtil.getMsgType(d.ws_msg_type_t.event_req)){var r=b.func.id;a=this.cbs.findIndex(function(a){return a.iid==c&&a.oid==e&&a.cbid==r>>16});0<=a?(0==
(r&65535)?this.cbs[a].resolve(b):(x=this.parceWebrpcError(x,b.params),this.cbs[a].reject(x)),1==this.cbs[a].oneShot&&(this.cbs[a].completion_cb?this.cbs[a].completion_cb(this.cbs[a].cbid,this.cbs[a].mid):u.logger.log("HDXMS didnt find completion_cb for oneShot callback, something went wrong!!!! cbid="+this.cbs[a].cbid+" (iid, mid)=("+this.cbs[a].iid,","+this.cbs[a].mid+")"))):(u.logger.log("HDXMS didnt find this one. (cbs)"),u.logger.log(JSON.stringify(this.cbs)))}else u.logger.log("HDXMS Received bogus message: "+
a+"'")}else if("telemetry"==b.v)0==b.status&&(x=b.hdr.command,2==(x&2147483647)&&(a=b.hdr.id,this.telemetry.onInitialized(a),u.logger.log("Telemetry init response received")));else if("features"==b.v){a=b.features;if("feature-support"==b.command)for(u.logger.log("features capabilities received, features:"+a),this.vdafeatures_=a,x=0;x<a.length;x++)if(a[x]===h.FEATURE_vda_app_sharing)this.screenshare.onInitialized(!0);this.clientViewportMode_=b.client_viewport_mode;u.logger.log("features client_viewport_mode value: "+
this.clientViewportMode_);this.sessionId_=b.client_session_id}else if("appsharing"==b.v)a=b.status,0==a?(x=b.hdr.command,a=b.hdr.id,(x&2147483647)==q.sshare_cmd.GetSources?(u.logger.log("appsharing GetSources response received"),x=b.data,this.screenshare.onGetSources(a,x)):(x&2147483647)==q.sshare_cmd.SetActive?(u.logger.log("appsharing SetActive response received"),x=b.data,this.screenshare.onSetActive(a,x)):(x&2147483647)==q.sshare_cmd.TopologyChanged?(u.logger.log("appsharing Window topology changed cmd received"),
this.screenshare.onToplogyChanged()):(u.logger.log("invalid command reply:"+x),this.screenshare.onError(a))):(u.logger.log("invalid status reply:"+a),a=b.hdr.id,this.screenshare.onError(a));else if(x=this.handlers_.find(function(a){return a.name==b.v}),void 0!=x)x.on_message(b);else u.logger.log("HDXMS: onWSMessage: Unknown protocol: "+a+"'")};a.prototype.clearReqs=function(){u.logger.log("clearReqs()");this.reqs.forEach(function(a,b){a.reject()});this.reqs=[]};a.prototype.registerHandler=function(a,
b,d,g){a=new n(g.resolve.bind(g),g.reject.bind(g),a,b,g.id,g.oneShot,d,g.completion_cb);this.cbs.push(a)};a.prototype.unregisterHandler=function(a,b,d){var g=this.cbs.findIndex(function(g){return g.iid==a&&g.oid==b&&g.cbid==d});0<=g?this.cbs.splice(g,1):(u.logger.log("HDXMS Didnt find this callback in the list!"),u.logger.log(JSON.stringify(this.cbs)))};a.prototype.isRedirected=function(){return this.status===v.Redirected||this.status===v.Binding||this.status===v.Connecting};a.prototype.isConnected=
function(){return this.status==v.Redirected};a.prototype.isPingActive=function(){return this.pingactive};a.prototype.pingConnectionBegin=function(a){u.logger.log("Started timer");this.pingactive=!0;var b=window.onVdiClientDisconnectedTimer;1==a?(u.logger.log("checking if we are connected..."),b()):this.conntimer=setTimeout(function(){u.logger.log("checking if we are connected...");b&&b()},15E3)};a.prototype.pingConnectionEnd=function(){this.pingactive=!1;clearTimeout(this.conntimer)};a.prototype.SendTelemetryData_Speaker=
function(a){this.telemetry.SendTelemetryData(w.tel_cmd.Data,w.tel_key_SpeakerDeviceUsed,a,0)};a.prototype.registerStateChangeNotification=function(a){this.stateChangeNotifcations.push(a)};a.prototype.unregisterStateChangeNotification=function(a){this.stateChangeNotifcations=this.stateChangeNotifcations.filter(function(b){return b!=a})};a.prototype.dispatchStateChangeNotifications=function(){this.stateChangeNotifcations.forEach(function(a){a()})};a.prototype.vdabufferNoLimit=function(){for(var a=!1,
b=0,d=this.vdafeatures_;b<d.length;b++)if(d[b]===h.FEATURE_vda_service_no_buffer_limit){a=!0;break}return a};Object.defineProperty(a.prototype,"clientViewportMode",{get:function(){return this.clientViewportMode_||"unknown"},enumerable:!1,configurable:!0});Object.defineProperty(a.prototype,"sessionClientId",{get:function(){return this.sessionId_||""},enumerable:!1,configurable:!0});a.prototype.addProtocolHandler=function(a){void 0==this.handlers_.find(function(b){return b.name==a.name})&&this.handlers_.push(a)};
return a}();a.HdxMediaStream=b;var z=new b;a.getRedirector=function(){return z}},985:function(b,a,c){var e=this&&this.__extends||function(){var a=function(b,d){a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var d in b)b.hasOwnProperty(d)&&(a[d]=b[d])};return a(b,d)};return function(b,d){function c(){this.constructor=b}a(b,d);b.prototype=null===d?Object.create(d):(c.prototype=d.prototype,new c)}}(),u=this&&this.__spreadArrays||function(){for(var a=
0,b=0,d=arguments.length;b<d;b++)a+=arguments[b].length;for(var a=Array(a),c=0,b=0;b<d;b++)for(var e=arguments[b],g=0,h=e.length;g<h;g++,c++)a[c]=e[g];return a};Object.defineProperty(a,"__esModule",{value:!0});a.IceCandidatePair=a.IceCandidate=void 0;var h=c(658),d=c(550),w=c(851);b=function(a){function b(c,e,z){for(var g=[],h=3;h<arguments.length;h++)g[h-3]=arguments[h];return a.apply(this,u([c,d.class_id_t.RTCIceCandidate,e,z,null,[]],g))||this}e(b,a);Object.defineProperty(b.prototype,"candidate",
{get:function(){return this.candidate_},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"sdpMid",{get:function(){return this.sdpMid_},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"sdpMLineIndex",{get:function(){return this.sdpMLineIndex_},enumerable:!1,configurable:!0});b.prototype.syncBarrier=function(){var a=this;w.logger.log(this.user_friendly_id()+".syncBarrier() called.");return new Promise(function(b,c){a.syncBarrierDeep(b,c)&&a.waitUntilConnected("IceCandidate.syncBarrier").then(function(){return Promise.all([a.remoteInvoke(!1,
d.method_id_RTCIceCandidate_t.candidate,""),a.remoteInvoke(!1,d.method_id_RTCIceCandidate_t.sdpMid,""),a.remoteInvoke(!1,d.method_id_RTCIceCandidate_t.sdpMLineIndex,0)])}).then(function(b){b=b.map(function(b){return a.param0(b)});a.candidate_=b[0];a.sdpMid_=b[1];a.sdpMLineIndex_=b[2];a.syncBarrierResolve(a)})["catch"](function(b){b=a.logRemoteInvokeError(b,".syncBarrier failed!");a.syncBarrierReject(b)})})};return b}(h.ProxyObject);a.IceCandidate=b;b=function(a){function b(c,e){return a.call(this,
c,d.class_id_t.RTCIceCandidatePair,e,h.ProxyMode.Remote)||this}e(b,a);Object.defineProperty(b.prototype,"local",{get:function(){return this.local_},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"remote",{get:function(){return this.remote_},enumerable:!1,configurable:!0});b.prototype.syncBarrier=function(){var a=this;w.logger.log(this.user_friendly_id()+".syncBarrier() called.");return new Promise(function(b,c){a.syncBarrierDeep(b,c)&&a.waitUntilConnected("IceCandidatePair.syncBarrier").then(function(){return Promise.all([a.remoteInvoke(!1,
d.method_id_RTCIceCandidatePair_t.local,{}),a.remoteInvoke(!1,d.method_id_RTCIceCandidatePair_t.remote,{})])}).then(function(b){b=b.map(function(b){return a.param0(b)});a.local_=b[0];a.remote_=b[1];a.syncBarrierResolve(a)})["catch"](function(b){b=a.logRemoteInvokeError(b,".syncBarrier failed!");a.syncBarrierReject(b)})})};return b}(h.ProxyObject);a.IceCandidatePair=b},851:function(b,a,c){Object.defineProperty(a,"__esModule",{value:!0});a.logger=a.Logger=void 0;var e=c(550);b=function(){function a(b){this.tracing=
!1;this.mslogger_=void 0;this.enable_timestamp_=!1;this.tag=b;this.enabled=!0;e.BUILD_TYPE_SDK&&(this.enable_timestamp_=!0)}a.prototype.setMSLogger=function(a,b){this.mslogger_=a;void 0!=b&&(this.enable_timestamp_=b)};a.prototype.log=function(){for(var a=[],b=0;b<arguments.length;b++)a[b]=arguments[b];this.enabled&&(a=this.tag+" "+a,this.enable_timestamp_&&(b=new Date,a="["+b.getTime()+"] "+b.toISOString()+" "+a),void 0!=this.mslogger_?this.mslogger_.info(a):console.log(a))};a.prototype.logx=function(a){for(var b=
[],c=1;c<arguments.length;c++)b[c-1]=arguments[c];a||this.log(b)};a.prototype.trace=function(){for(var a=[],b=0;b<arguments.length;b++)a[b]=arguments[b];this.tracing&&this.log.apply(this,a)};return a}();a.Logger=b;a.logger=new b("[HdxWebRTC.js]");a.logger.enabled=!0},360:function(b,a,c){var e=this&&this.__extends||function(){var a=function(b,d){a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var d in b)b.hasOwnProperty(d)&&(a[d]=b[d])};return a(b,
d)};return function(b,d){function f(){this.constructor=b}a(b,d);b.prototype=null===d?Object.create(d):(f.prototype=d.prototype,new f)}}(),u=this&&this.__awaiter||function(a,b,d,f){function c(a){return a instanceof d?a:new d(function(f){f(a)})}return new (d||(d=Promise))(function(d,K){function g(a){try{m(f.next(a))}catch(b){K(b)}}function r(a){try{m(f["throw"](a))}catch(b){K(b)}}function m(a){a.done?d(a.value):c(a.value).then(g,r)}m((f=f.apply(a,b||[])).next())})},h=this&&this.__generator||function(a,
b){function d(a){return function(b){return f([a,b])}}function f(f){if(g)throw new TypeError("Generator is already executing.");for(;c;)try{if(g=1,r&&(m=f[0]&2?r["return"]:f[0]?r["throw"]||((m=r["return"])&&m.call(r),0):r.next)&&!(m=m.call(r,f[1])).done)return m;if(r=0,m)f=[f[0]&2,m.value];switch(f[0]){case 0:case 1:m=f;break;case 4:return c.label++,{value:f[1],done:!1};case 5:c.label++;r=f[1];f=[0];continue;case 7:f=c.ops.pop();c.trys.pop();continue;default:if(!(m=c.trys,m=0<m.length&&m[m.length-
1])&&(6===f[0]||2===f[0])){c=0;continue}if(3===f[0]&&(!m||f[1]>m[0]&&f[1]<m[3]))c.label=f[1];else if(6===f[0]&&c.label<m[1])c.label=m[1],m=f;else if(m&&c.label<m[2])c.label=m[2],c.ops.push(f);else{m[2]&&c.ops.pop();c.trys.pop();continue}}f=b.call(a,c)}catch(d){f=[6,d],r=0}finally{g=m=0}if(f[0]&5)throw f[1];return{value:f[0]?f[1]:void 0,done:!0}}var c={label:0,sent:function(){if(m[0]&1)throw m[1];return m[1]},trys:[],ops:[]},g,r,m,e;$jscomp.initSymbol();$jscomp.initSymbol();$jscomp.initSymbolIterator();
return e={next:d(0),"throw":d(1),"return":d(2)},"function"===typeof Symbol&&(e[Symbol.iterator]=function(){return this}),e},d=this&&this.__spreadArrays||function(){for(var a=0,b=0,d=arguments.length;b<d;b++)a+=arguments[b].length;for(var a=Array(a),f=0,b=0;b<d;b++)for(var c=arguments[b],g=0,r=c.length;g<r;g++,f++)a[f]=c[g];return a};Object.defineProperty(a,"__esModule",{value:!0});a.PeerConnection=a.SessionDescription=a.SessionDescriptionInit=a.RtcConfiguration=a.RtcIceServer=a.IceCandidateEvent=
void 0;var w=c(946),q=c(144),n=c(589),k=c(658),v=c(985),z=c(377),g=c(650),B=c(24),t=c(550),m=c(851),D=c(517),y=c(394),x=function(a){function b(d,f,c){d=a.call(this,d,t.class_id_t.RTCIceCandidateEvent,f,k.ProxyMode.Remote)||this;d.target=c;d.type="icecandidate";return d}e(b,a);Object.defineProperty(b.prototype,"candidate",{get:function(){return this.candidate_},enumerable:!1,configurable:!0});b.prototype.syncBarrier=function(){var a=this;m.logger.log(this.user_friendly_id()+".syncBarrier() called.");
return new Promise(function(f,b){a.syncBarrierDeep(f,b)&&a.waitUntilConnected(a.user_friendly_id()+".syncBarrier").then(function(){return a.remoteInvoke(!1,t.method_id_RTCIceCandidateEvent_t.candidate,{oid:0})}).then(function(f){f=a.param0(f);return!1===f.is_null?(new v.IceCandidate(a,f.oid,k.ProxyMode.Remote)).syncBarrier():Promise.resolve(null)}).then(function(f){m.logger.log(a.user_friendly_id()+".onicecandidate: icecandidate available!");a.candidate_=f;a.syncBarrierResolve(a)})["catch"](function(f){f=
a.logRemoteInvokeError(f,".onicecandidate() failed!");a.syncBarrierReject(f)})})};return b}(k.ProxyObject);a.IceCandidateEvent=x;var r=function(){function a(b,d){this.state_="new";this.candidates_=[];this.gatheringstateupdatecb_=void 0;this.pc_=b;this.gatheringstateupdatecb_=d}a.prototype.pushState=function(a){m.logger.log(this.pc_.user_friendly_id()+".onicegatheringstatechange: new state is "+a);this.state_=a;"gathering"==this.state_?(this.candidates_=[],this.postUpdate()):this.processRemaining()};
a.prototype.addIceCandidate=function(a){var b=this;this.candidates_.push(a);var f=[];f.push(a.syncBarrier());f.push(this.pc_.updateSdpDescription(!0));Promise.all(f).then(function(a){m.logger.log(b.pc_.user_friendly_id()+".onicecandidate: icecandidate available!");b.postIceCandidate(a[0])})};a.prototype.postIceCandidate=function(a){m.logger.log(this.pc_.user_friendly_id()+".onicecandidate: posting ice candidate now!");if(null!=this.pc_.onicecandidate)this.pc_.onicecandidate(a);else m.logger.log(this.pc_.user_friendly_id()+
"onicecandidate is NULL!!!");this.candidates_.shift();this.processRemaining()};a.prototype.postUpdate=function(){m.logger.log(this.pc_.user_friendly_id()+".onicegatheringstatechange: posting event now!");var a=new p("onicegatheringstatechange",this.pc_);this.gatheringstateupdatecb_&&this.gatheringstateupdatecb_(this.state_);this.pc_.onicegatheringstatechange(a)};a.prototype.processRemaining=function(){0==this.candidates_.length&&"complete"==this.state_?(this.pc_.onicecandidate({candidate:null,target:this}),
this.postUpdate()):m.logger.log(this.pc_.user_friendly_id()+".onicecandidate: candidates remaining=["+this.candidates_.map(function(a){return a.object_id()})+"], state="+this.state_)};return a}(),A=function(){function a(){}a.toRtcIceServer=function(a,b){var f={urls:[],credential:"",username:""};a&&(a.urls?Array.isArray(a.urls)?f.urls=a.urls:f.urls.push(a.urls):m.logger.log("RtcIceServer.toRtcIceServer().urls property is missing! this is required property!"),a.credential&&(a.credential.hasOwnProperty("accessToken")?
f.credential=a.credential.accessToken:f.credential=a.credential),a.username&&(f.username=a.username));if(1==b)for(var d in a)"urls"!=d&&"credential"!=d&&"username"!=d&&m.logger.log("RtcIceServer.toRtcIceServer() warning: unsupported property:"+d);return f};return a}();a.RtcIceServer=A;var M=function(){function a(){}a.toRtcConfiguration=function(a,b){1==b&&m.logger.log("RtcConfiguration.toRtcConfiguration() in RTCConfiguration config:"+JSON.stringify(a));var f={};if(a){if(a.iceServers){f.iceServers=
[];for(var d=0,c=a.iceServers;d<c.length;d++)f.iceServers.push(A.toRtcIceServer(c[d],b))}a.iceTransportPolicy&&(f.iceTransportPolicy=a.iceTransportPolicy);a.bundlePolicy&&(f.bundlePolicy=a.bundlePolicy);a.rtcpMuxPolicy&&(f.rtcpMuxPolicy=a.rtcpMuxPolicy);a.iceTransports&&(f.iceTransports=a.iceTransports);a.sdpSemantics&&(f.sdpSemantics=a.sdpSemantics);a.enableDtlsSrtp&&(f.enableDtlsSrtp=a.enableDtlsSrtp);a.enableDscp&&(f.enableDscp=a.enableDscp)}if(1==b){for(var g in a)"iceServers"!=g&&"iceTransportPolicy"!=
g&&"bundlePolicy"!=g&&"rtcpMuxPolicy"!=g&&"iceTransports"!=g&&"sdpSemantics"!=g&&"enableDtlsSrtp"!=g&&"enableDscp"!=g&&m.logger.log("RtcConfiguration.toRtcConfiguration() warning: unsupported property:"+g);m.logger.log("RtcConfiguration.toRtcConfiguration() converted RtcConfiguration config:"+JSON.stringify(f))}return f};return a}();a.RtcConfiguration=M;var F=function(){return function(a,b){this.sdp=b;this.type=a}}();a.SessionDescriptionInit=F;var l=function(a){function b(c,f,g){for(var r=[],m=3;m<
arguments.length;m++)r[m-3]=arguments[m];return a.apply(this,d([c,t.class_id_t.RTCSessionDescription,f,g,null,[]],r))||this}e(b,a);b.prototype.toJSON=function(){return{type:this.type_,sdp:this.sdp_}};Object.defineProperty(b.prototype,"sdp",{get:function(){return this.sdp_},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"type",{get:function(){return this.type_},enumerable:!1,configurable:!0});b.prototype.syncBarrier=function(){var a=this;m.logger.log(this.user_friendly_id()+".syncBarrier() called.");
return new Promise(function(f,b){a.syncBarrierDeep(f,b)&&a.waitUntilConnected(a.user_friendly_id()+".syncBarrier").then(function(){return Promise.all([a.remoteInvoke(!1,t.method_id_RTCSessionDescription_t.type,0),a.remoteInvoke(!1,t.method_id_RTCSessionDescription_t.sdp,"")])}).then(function(f){a.type_=a.convertType(a.param0(f[0]));a.sdp_=a.param0(f[1]);a.syncBarrierResolve(a)})["catch"](function(f){f=a.logRemoteInvokeError(f,".syncBarrier() failed!");a.syncBarrierReject(f)})})};b.prototype.convertType=
function(a){return 0==a?"offer":1==a?"pranswer":2==a?"answer":"rollback"};b.convertC2H=function(a){return"offer"==a?0:"pranswer"==a?1:"answer"==a?2:3};return b}(k.ProxyObject);a.SessionDescription=l;var p=function(){return function(a,b){this.type=a;this.target=b}}(),L=function(){return function(){}}(),P=function(){function a(b,d){this.local=b;this.remote=d}Object.defineProperty(a.prototype,"active",{get:function(){var a=!1;if(1==this.local||1==this.remote)a=!0;return a},enumerable:!1,configurable:!0});
return a}();b=function(a){function b(d){var f=a.call(this,null,t.class_id_t.RTCPeerConnection,0,k.ProxyMode.Local,null,[],b.ensure_config_defined(d,!1),{})||this;f.timeerstarted_=!1;f.firsttimeremoteoffer_=!1;f.firststable_=!1;f.firsttimelocaloffer_=!1;f.audiocall_=new P(!1,!1);f.videocall_=new P(!1,!1);f.screensharingcall_=new P(!1,!1);f.conferencecall_=!1;f.incomingcall_=!1;f.outgoingcall_=!1;f.usingasynconly_=!1;f.rtcconfig_=b.ensure_config_defined(d,!0);m.logger.log(f.user_friendly_id()+".constructor sdpSemantics="+
f.rtcconfig_.sdpSemantics);if(!t.BUILD_TYPE_SDK&&f.isUnified()&&!w.getRedirector().getFeatureValue(t.FEATURE_ms_teams_webrtc_1dot0))throw new DOMException("CWA client does not support unified sdpSemantic","createPeerConnection");f.pendingtransceiver_=0;f.pendingtrack_=0;f.deferredOfferAnswers=[];f.localStreams=[];f.remoteStreams=[];f.onaddstream_=null;f.signalingState_="stable";f.iceConnectionState_="new";f.iceGatheringState_="new";f.iceQ_=new r(f,function(a){f.onicegatheringstateupdate(a)});f.receivers_=
[];f.senders_=[];f.transceivers_=[];f.registerStateChangeNotification(f.onStateChange);f.localdatachannel_=null;f.remotedatachannel_=null;return f}e(b,a);b.ensure_config_defined=function(a,f){return M.toRtcConfiguration(a,f)};b.prototype.dumpSdp=function(a){m.logger.log(this.user_friendly_id()+".dumpSdp");a&&(m.logger.log(this.user_friendly_id()+"  -- type: "+a.type),m.logger.log(this.user_friendly_id()+"  -- sdp: "+a.sdp))};Object.defineProperty(b.prototype,"localDescription",{get:function(){m.logger.log(this.user_friendly_id()+
".get_localDescription() called.");return this.localDescription_},set:function(a){m.logger.log(this.user_friendly_id()+".set_localDescription() called.");this.localDescription_=a},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"remoteDescription",{get:function(){m.logger.log(this.user_friendly_id()+".get_remoteDescription() called.");return this.remoteDescription_},set:function(a){m.logger.log(this.user_friendly_id()+".get_remoteDescription() called.");this.remoteDescription_=a},
enumerable:!1,configurable:!0});b.prototype.isUnified=function(){return"unified"==this.rtcconfig_.sdpSemantics||"unified-plan"==this.rtcconfig_.sdpSemantics};b.prototype.onStateChange=function(){var a=new p("iceconnectionstatechange",this);if(this.oniceconnectionstatechange_)this.oniceconnectionstatechange_(a)};b.prototype.addIceCandidate=function(a){var f=this;m.logger.log(this.user_friendly_id()+".addIceCandidate() called.");this.waitUntilConnected(this.user_friendly_id()+".addIceCandidate").then(function(){var b=
{candidate:a.candidate,sdpMid:a.sdpMid,sdpMLineIndex:a.sdpMLineIndex};if(void 0==b.candidate||null==b.candidate)b.candidate="";void 0==b.sdpMid&&(b.sdpMid=null);void 0==b.sdpMLineIndex&&(b.sdpMLineIndex=null);return(new v.IceCandidate(f,0,k.ProxyMode.Local,b)).syncBarrier()}).then(function(a){return f.remoteInvokeEx(!1,t.method_id_RTCPeerConnection_t.addIceCandidate,[a],{})}).then(function(){m.logger.log(f.user_friendly_id()+".addIceCandidate() success.");return f.updateSdpDescription(!1)}).then(function(){m.logger.log(f.user_friendly_id()+
".addIceCandidate() - sync remote sdp success.")})["catch"](function(a){f.logRemoteInvokeError(a,".addIceCandidate() failed!")})};Object.defineProperty(b.prototype,"onicecandidate",{get:function(){return this.onicecandidate_},set:function(a){var f=this;m.logger.log(this.user_friendly_id()+".set_onicecandidate() called.");this.onicecandidate_=a;this.waitUntilConnected(this.user_friendly_id()+".onicecandidate").then(function(){var b=f.registerCallbacks(!1,f.isNullCallback(a),t.method_id_RTCPeerConnection_t.onicecandidate);
b.then(function(a){m.logger.log(f.user_friendly_id()+".onicecandidate callback received!!!");a=new x(f,f.param0(a).oid,f);null!=f.iceQ_&&f.iceQ_.addIceCandidate(a)});return f.remoteInvoke(!0,t.method_id_RTCPeerConnection_t.onicecandidate,b.success)})["catch"](function(a){f.logRemoteInvokeError(a,".set_onicecandidate() failed!")})},enumerable:!1,configurable:!0});b.prototype.convertIceConnectionState=function(a){return 0==a?"new":1==a?"checking":2==a?"connected":3==a?"completed":4==a?"failed":5==a?
"disconnected":"closed"};b.prototype.convertConnectionState=function(a){if(0!=a){if(1==a)return"connecting";if(2==a)return"connected";if(3==a)return"disconnected";if(4==a)return"failed";if(5==a)return"closed"}return"new"};Object.defineProperty(b.prototype,"onconnectionstatechange",{get:function(){return this.onconnectionstatechange_},set:function(a){var f=this;m.logger.log(this.user_friendly_id()+".set_onconnectionstatechange() called.");this.onconnectionstatechange_=a;this.waitUntilConnected(this.user_friendly_id()+
".onconnectionstatechange").then(function(){var b=f.registerCallbacks(!1,f.isNullCallback(a),t.method_id_RTCPeerConnection_t.onconnectionstatechange);b.then(function(a){m.logger.log(f.user_friendly_id()+".onconnectionstatechange(): success callback received!!!");f.connectionState_=f.convertConnectionState(f.param0(a));m.logger.log(f.user_friendly_id()+" connectionState=:"+f.connectionState_);a=new p("connectionstatechange",f);if(f.onconnectionstatechange_)f.onconnectionstatechange_(a)});return f.remoteInvoke(!0,
t.method_id_RTCPeerConnection_t.onconnectionstatechange,b.success)})["catch"](function(a){f.logRemoteInvokeError(a,".set_onconnectionstatechange() failed!")})},enumerable:!1,configurable:!0});b.prototype.get_connectionState=function(){m.logger.log(this.user_friendly_id()+".get_connectionState() called, value = "+this.connectionState_);return this.isRedirected()?this.connectionState_:"failed"};Object.defineProperty(b.prototype,"oniceconnectionstatechange",{get:function(){return this.oniceconnectionstatechange_},
set:function(a){var f=this;m.logger.log(this.user_friendly_id()+".set_oniceconnectionstatechange() called.");this.oniceconnectionstatechange_=a;this.waitUntilConnected(this.user_friendly_id()+".oniceconnectionstatechange").then(function(){var b=f.registerCallbacks(!1,f.isNullCallback(a),t.method_id_RTCPeerConnection_t.oniceconnectionstatechange);b.then(function(a){m.logger.log(f.user_friendly_id()+".oniceconnectionstatechange(): success callback received!!!");f.iceConnectionState_=f.convertIceConnectionState(f.param0(a));
a=new p("iceconnectionstatechange",f);if(f.oniceconnectionstatechange_)f.oniceconnectionstatechange_(a)});return f.remoteInvoke(!0,t.method_id_RTCPeerConnection_t.oniceconnectionstatechange,b.success)})["catch"](function(a){f.logRemoteInvokeError(a,".set_oniceconnectionstatechange() failed!")})},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"iceConnectionState",{get:function(){m.logger.log(this.user_friendly_id()+".get_iceConnectionState() called, value = "+this.iceConnectionState_);
return this.isRedirected()?this.iceConnectionState_:"failed"},enumerable:!1,configurable:!0});b.prototype.convertIceGatheringState=function(a){return 0==a?"new":1==a?"gathering":"complete"};b.prototype.onicegatheringstateupdate=function(a){m.logger.log(this.user_friendly_id()+".onicegatheringstateupdate() current:"+this.iceGatheringState_+" updating to:"+a);this.iceGatheringState_=a;m.logger.log(this.user_friendly_id()+".onicegatheringstateupdate() after update: iceGatheringState_:"+this.iceGatheringState_)};
Object.defineProperty(b.prototype,"onicegatheringstatechange",{get:function(){return this.onicegatheringstatechange_},set:function(a){var f=this;m.logger.log(this.user_friendly_id()+".set_onicegatheringstatechange() called.");this.onicegatheringstatechange_=a;this.waitUntilConnected(this.user_friendly_id()+".onicegatheringstatechange").then(function(){var b=f.registerCallbacks(!1,f.isNullCallback(a),t.method_id_RTCPeerConnection_t.onicegatheringstatechange);b.then(function(a){m.logger.log(f.user_friendly_id()+
".onicegatheringstatechange(): callback received!!!");a=f.convertIceGatheringState(f.param0(a));null!=f.iceQ_&&f.iceQ_.pushState(a)});return f.remoteInvoke(!0,t.method_id_RTCPeerConnection_t.onicegatheringstatechange,b.success)})["catch"](function(a){f.logRemoteInvokeError(a,".set_onicegatheringstatechange() failed!")})},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"iceGatheringState",{get:function(){m.logger.log(this.user_friendly_id()+".get_iceGatheringState() called, value = "+
this.iceGatheringState_);return this.iceGatheringState_},enumerable:!1,configurable:!0});b.prototype.convertSignalState=function(a){return 0==a?"stable":1==a?"have-local-offer":2==a?"have-local-pranswer":3==a?"have-remote-offer":4==a?"have-remote-pranswer":"closed"};b.prototype.TelemtryReadings_=function(){var a=this;"have-local-offer"==this.signalingState_&&0==this.firsttimelocaloffer_&&0==this.firsttimeremoteoffer_&&(this.outgoingcallstart_=(new Date).getTime(),0==this.outgoingcall_&&(this.SendTelemetryData(y.tel_key_PerfCallState,
y.tel_CallState.active,1),this.SendTelemetryData(y.tel_key_PerfCallDirection,y.tel_CallDirection.outgoing,1),this.outgoingcall_=!0),this.firsttimelocaloffer_=!0);"have-remote-offer"==this.signalingState_&&0==this.firsttimeremoteoffer_&&0==this.firsttimelocaloffer_&&(this.incomingcallstart_=(new Date).getTime(),0==this.incomingcall_&&(this.SendTelemetryData(y.tel_key_PerfCallState,y.tel_CallState.active,1),this.SendTelemetryData(y.tel_key_PerfCallDirection,y.tel_CallDirection.incoming,1),this.incomingcall_=
!0),this.firsttimeremoteoffer_=!0);"stable"==this.signalingState_&&0==this.firststable_&&(this.callstartTime_=(new Date).getTime(),this.firststable_=this.timeerstarted_=!0);if("stable"==this.signalingState_){for(var f=0,b=this.localStreams;f<b.length;f++){var d=b[f];1<=d.getAudioTracks().length&&0==this.audiocall_.local&&(this.SendTelemetryData(y.tel_key_PerfCallType,y.tel_CallType.audio,1),this.audiocall_.local=!0);d=d.getVideoTracks();if(1<=d.length)for(var c=0,g=d;c<g.length;c++)d=g[c],1==d.getSettings().deviceId.includes("display")?
0==this.screensharingcall_.local&&(this.SendTelemetryData(y.tel_key_PerfCallType,y.tel_CallType.dshare,1),this.screensharingcall_.local=!0):0==this.videocall_.local&&(this.SendTelemetryData(y.tel_key_PerfCallType,y.tel_CallType.video,1),this.videocall_.local=!0)}f=0;for(b=this.remoteStreams;f<b.length;f++)if(d=b[f],1<=d.getAudioTracks().length&&0==this.audiocall_.remote&&(this.SendTelemetryData(y.tel_key_PerfCallType,y.tel_CallType.audio,1),this.audiocall_.remote=!0),c=d.getVideoTracks(),1<=c.length)for(d=
0;d<c.length;d++)1==c[d].id.includes("applicationsharingVideo")?0==this.screensharingcall_.remote&&(this.SendTelemetryData(y.tel_key_PerfCallType,y.tel_CallType.dshare,1),this.screensharingcall_.remote=!0):0==this.videocall_.remote&&(this.SendTelemetryData(y.tel_key_PerfCallType,y.tel_CallType.video,1),this.videocall_.remote=!0);this.getReceiversAsync().then(function(f){2<f.length&&0==a.conferencecall_&&(a.SendTelemetryData(y.tel_key_PerfCallType,y.tel_CallType.multi,1),a.conferencecall_=!0)})}};
Object.defineProperty(b.prototype,"onsignalingstatechange",{set:function(a){var f=this;m.logger.log(this.user_friendly_id()+".set_onsignalingstatechange() called.");this.onsignalingstatechange_=a;this.waitUntilConnected(this.user_friendly_id()+".onsignalingstatechanged").then(function(){var b=f.registerCallbacks(!1,f.isNullCallback(a),t.method_id_RTCPeerConnection_t.onsignalingstatechange);b.then(function(a){m.logger.log(f.user_friendly_id()+".onsignalingstatechange(): callback received!!!");f.signalingState_=
f.convertSignalState(f.param0(a));a=new p("onsignalingstatechange",f);if(f.onsignalingstatechange_)f.onsignalingstatechange_(a);f.TelemtryReadings_()});return f.remoteInvoke(!0,t.method_id_RTCPeerConnection_t.onsignalingstatechange,b.success)})["catch"](function(a){f.logRemoteInvokeError(a,".set_onsignalingstatechange() failed!")})},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"onsignalingstatechanged",{get:function(){return this.onsignalingstatechange_},enumerable:!1,configurable:!0});
Object.defineProperty(b.prototype,"ontrack",{get:function(){return this.ontrack_},set:function(a){var f=this;m.logger.log(this.user_friendly_id()+".set_ontrack() called.");this.ontrack_=a;this.waitUntilConnected(this.user_friendly_id()+".ontrack").then(function(){var b=f.registerCallbacks(!1,f.isNullCallback(a),t.method_id_RTCPeerConnection_t.ontrack);b.then(function(a){return u(f,void 0,void 0,function(){var f,b,d,c,r,K,C,e,x,A,t,v=this;return h(this,function(h){m.logger.log(this.user_friendly_id()+
".ontrack(): callback received!!!");f=new L;b=[];d=this.param0(a);void 0!=d.track&&!1===d.track.is_null&&(m.logger.log(this.user_friendly_id()+" adding a RemoteMediaTrack with oid:"+d.track.oid),c=new q.RemoteMediaTrack(this,d.track.oid),b.push(c.syncBarrier()));f.track=c;void 0!=d.receiver&&!1===d.receiver.is_null&&(r=this.receivers_.find(function(a){return a.object_id()===d.receiver.oid}),void 0===r&&(m.logger.log(this.user_friendly_id()+" adding a RtpReceiver with oid:"+d.receiver.oid),r=new n.RtpReceiver(this,
d.receiver.oid,k.ProxyMode.Remote,this.isUnified(),c)),b.push(r.syncBarrier()));f.receiver=r;g.RemoteSession.isFeatureWebrtc1dot0Supported()&&void 0!=d.transceiver&&!1===d.transceiver.is_null&&(K=this.transceivers_.find(function(a){return a.object_id()===d.transceiver.oid}),void 0===K&&(m.logger.log(this.user_friendly_id()+" adding a RtpTransceiver with oid:"+d.transceiver.oid),K=new z.RtpTransceiver(this,d.transceiver.oid,k.ProxyMode.Remote,this.isUnified(),z.RtcRtpTransceiverDirection.inactive,
r),this.transceivers_.push(K)),b.push(K.syncBarrier()));f.transceiver=K;f.streams=[];if(void 0!=d.streams)for(C=function(a){var d=e.remoteStreams.find(function(f){return!1===a.is_null&&f.object_id()===a.oid});void 0===d&&(m.logger.log(e.user_friendly_id()+" adding a RemoteStream with oid:"+a.oid),d=new q.RemoteStream(e,a.oid,k.ProxyMode.Remote),e.remoteStreams.push(d));b.push(d.syncBarrier());f.streams.push(d)},e=this,x=0,A=d.streams;x<A.length;x++)t=A[x],C(t);m.logger.log(this.user_friendly_id()+
".ontrack(): .prop.syncBarrier start");Promise.all(b).then(function(){m.logger.log(v.user_friendly_id()+".ontrack(): notified!!! with evt: "+f);for(var a=0,b=f.streams;a<b.length;a++)b[a].toggleAudio(!1);if(v.ontrack_)v.ontrack_(f)})["catch"](function(a){v.logRemoteInvokeError(a,".ontrack(): .prop.syncBarrier failed.")});return[2]})})});return f.remoteInvoke(!0,t.method_id_RTCPeerConnection_t.ontrack,b.success)})["catch"](function(a){f.logRemoteInvokeError(a,".set_ontrack(): failed.")})},enumerable:!1,
configurable:!0});Object.defineProperty(b.prototype,"signalingState",{get:function(){m.logger.log(this.user_friendly_id()+".get_signalingState() called, value = "+this.signalingState_);return this.signalingState_},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"onnegotiationneeded",{get:function(){return this.onnegotiationneeded_},set:function(a){var f=this;m.logger.log(this.user_friendly_id()+".set_onnegotiationneeded() called.");this.onnegotiationneeded_=a;this.waitUntilConnected(this.user_friendly_id()+
".onnegotiationneeded").then(function(){var b=f.registerCallbacks(!1,f.isNullCallback(a),t.method_id_RTCPeerConnection_t.onnegotiationneeded);b.then(function(){m.logger.log(f.user_friendly_id()+".onnegotiationneeded(): callback received!!!");var a=new p("negotiationneeded",f);if(f.onnegotiationneeded_)f.onnegotiationneeded_(a)});return f.remoteInvoke(!0,t.method_id_RTCPeerConnection_t.onnegotiationneeded,b.success)})["catch"](function(a){f.logRemoteInvokeError(a,".set_onnegotiationneeded(): failed.")})},
enumerable:!1,configurable:!0});b.prototype.dumpConstraints=function(a){m.logger.log(this.user_friendly_id()+"constraints: "+a);void 0!==a&&0!==Object.keys(a).length||m.logger.log(this.user_friendly_id()+"constraints either undefined or empty!");a&&(m.logger.log(this.user_friendly_id()+"  -- video: "+a.offerToReceiveVideo),m.logger.log(this.user_friendly_id()+"  -- audio: "+a.offerToReceiveAudio),m.logger.log(this.user_friendly_id()+"  -- iceRestart: "+a.iceRestart),m.logger.log(this.user_friendly_id()+
"  -- voiceActivityDetection: "+a.voiceActivityDetection))};b.prototype.fix_constraints=function(a){this.dumpConstraints(a);var f={};this.isUnified()||(f={audio:!0,video:!0});if(a){if(void 0!==a.video||void 0!==a.offerToReceiveVideo)f.video=a.offerToReceiveVideo;if(void 0!==a.audio||void 0!==a.offerToReceiveAudio)f.audio=a.offerToReceiveAudio;void 0!==a.iceRestart&&(f.iceRestart=a.iceRestart);void 0!==a.voiceActivityDetection&&(f.voiceActivityDetection=a.voiceActivityDetection)}return f};b.prototype.createOffer=
function(a,f,b){m.logger.log(this.user_friendly_id()+".createOffer() called.",JSON.stringify(a));return this.isUnified()?void 0==a?this.createOffer_v2():a?this.createOffer_v2(a):this.createOffer_v1(a,f,b):this.createOffer_v1(a,f,b)};b.prototype.createOffer_v2=function(a){var f=this;m.logger.log(this.user_friendly_id()+".createOffer_v2() called.",JSON.stringify(a));return new Promise(function(b,d){f.createOffer_v1(function(a){m.logger.log(f.user_friendly_id()+".createOffer_v2(): got sdp!!!",JSON.stringify(a));
a=new F(a.type,a.sdp);b(a)},function(a){void 0!=a&&(a=f.logRemoteInvokeError(a,".createOffer_v2() failed."),d(a))},a)})};b.prototype.createOffer_v1=function(a,f,b){var d=this;m.logger.log(this.user_friendly_id()+".createOffer_v1().",JSON.stringify(b));var c=[this.waitUntilConnected(this.user_friendly_id()+".createOffer_v1"),this.waitTransceiverAndTrackReady(this.user_friendly_id()+".createOffer_v1")];Promise.all(c).then(function(){var a=d.registerCallbacks(!0,!1,t.method_id_RTCPeerConnection_t.createOffer);
d.remoteInvoke(!1,t.method_id_RTCPeerConnection_t.createOffer,a.success,a.fail,d.fix_constraints(b));return a.prom()}).then(function(a){m.logger.log(d.user_friendly_id()+".createOffer_v1(): success callback received!!!");return(new l(d,d.param0(a).oid,k.ProxyMode.Remote)).syncBarrier()}).then(function(f){a&&a(f)})["catch"](function(a){void 0!=a&&(a=d.logRemoteInvokeError(a,".createOffer_v1() failed."),f&&f(a))})};b.prototype.createAnswer=function(a,f,b){m.logger.log(this.user_friendly_id()+".createAnswer() called.",
JSON.stringify(a));return this.isUnified()?void 0==a?this.createAnswer_v2():a?this.createAnswer_v2(a):this.createAnswer_v1(a,f,b):this.createAnswer_v1(a,f,b)};b.prototype.createAnswer_v2=function(a){var f=this;m.logger.log(this.user_friendly_id()+".createAnswer_v2() called.",JSON.stringify(a));return new Promise(function(b,d){f.createAnswer_v1(function(a){m.logger.log(f.user_friendly_id()+".createAnswer_v2(): got sdp!!!",JSON.stringify(a));a=new F(a.type,a.sdp);b(a)},function(a){void 0!=a&&(a=f.logRemoteInvokeError(a,
".createAnswer_v2() failed."),d(a))},a)})};b.prototype.createAnswer_v1=function(a,f,b){var d=this;m.logger.log(this.user_friendly_id()+".createAnswer_v1() called.",JSON.stringify(b));var c=[this.waitUntilConnected(this.user_friendly_id()+".createAnswer_v1"),this.waitTransceiverAndTrackReady(this.user_friendly_id()+".createAnswer_v1")];Promise.all(c).then(function(){var a=d.registerCallbacks(!0,!1,t.method_id_RTCPeerConnection_t.createAnswer);d.remoteInvoke(!1,t.method_id_RTCPeerConnection_t.createAnswer,
a.success,a.fail,d.fix_constraints(b),{});return a.prom()}).then(function(a){m.logger.log(d.user_friendly_id()+".createAnswer_v1(): success callback received!!!");return(new l(d,d.param0(a).oid,k.ProxyMode.Remote)).syncBarrier()}).then(function(f){a&&a(f)})["catch"](function(a){a=d.logRemoteInvokeError(a,".createAnswer_v1() failed.");f&&f(a.message)})};b.prototype.updateSdpDescription=function(a){m.logger.log(this.user_friendly_id()+".updateSdpDescription() called.");var f=this;return new Promise(function(b,
d){var c=[];1==a?c.push(f.remoteInvoke(!1,t.method_id_RTCPeerConnection_t.localDescription,{oid:0})):c.push(f.remoteInvoke(!1,t.method_id_RTCPeerConnection_t.remoteDescription,{oid:0}));Promise.all(c).then(function(a){m.logger.log(f.user_friendly_id()+".updateSdpDescription() resolved.");return(new l(f,f.param0(a[0]).oid,k.ProxyMode.Remote)).syncBarrier()}).then(function(d){1==a?f.localDescription_=d:f.remoteDescription_=d;m.logger.log(f.user_friendly_id()+".updateSdpDescription() updated sdp");b()})["catch"](function(a){f.logRemoteInvokeError(a,
"sdp.syncBarrier() failed!");d()})})};b.prototype.sdpToString=function(a){var f="",b=0;for(a=a?a.split(/\r?\n/):[];b<a.length;b++){var d=a[b];-1!=d.indexOf("m=",0)?f+=d+"\\r\\n":-1!=d.indexOf("o=-",0)?f+=d+"\\r\\n":-1!=d.indexOf("a=ssrc",0)&&(f+=d+"\\r\\n")}return f};b.prototype.setLocalDescription=function(a,f,b){m.logger.log(this.user_friendly_id()+".setLocalDescription() called.",this.sdpToString(a.sdp));if(a instanceof F)return this.setLocalDescription_v2(a);if(a instanceof RTCSessionDescription&&
f)return this.setLocalDescription_v1(a,f,b);f=void 0;a?f=new F(a.type,a.sdp):(m.logger.log(this.user_friendly_id()+".setLocalDescription() empty param1, setting sdp type to rollback"),a=void 0,a="have-remote-offer"==this.signalingState_?"answer":"have-local-pranswer"==this.signalingState_||"have-remote-pranswer"==this.signalingState_?"pranswer":"offer",f=new F(a,""));return this.setLocalDescription_v2(f)};b.prototype.setLocalDescription_v2=function(a){var f=this;m.logger.log(this.user_friendly_id()+
".setLocalDescription_v2() called.");return new Promise(function(b,d){f.waitUntilConnected(f.user_friendly_id()+".setLocalDescription_v2").then(function(){return(new l(f,0,k.ProxyMode.Local,{type:l.convertC2H(a.type),sdp:a.sdp})).syncBarrier()}).then(function(c){var g=f.registerCallbacks(!0,!1,t.method_id_RTCPeerConnection_t.setLocalDescription_v2),r={type:l.convertC2H(a.type),sdp:a.sdp};f.remoteInvoke(!1,t.method_id_RTCPeerConnection_t.setLocalDescription_v2,r,g.success,g.fail);g.prom().then(function(){m.logger.log(f.user_friendly_id()+
".setLocalDescription_v2(): success callback received!!!");f.localDescription_=c;m.logger.log(f.user_friendly_id()+".setLocalDescription_v2(): updated localDescription_");Promise.all([]).then(function(){m.logger.log(f.user_friendly_id()+".setLocalDescription_v2() success.");b()})["catch"](function(a){a=f.logRemoteInvokeError(a,".prop.setLocalDescription_v2() failed!");d(a)})})["catch"](function(a){a=f.logRemoteInvokeError(a,"setLocalDescription_v2() error callback received!");d(a)})})["catch"](function(a){a=
f.logRemoteInvokeError(a,".setLocalDescription_v2() failed.");d(a)})})};b.prototype.setLocalDescription_v1=function(a,f,b){var d=this;m.logger.log(this.user_friendly_id()+".setLocalDescription_v1() called.");this.waitUntilConnected(this.user_friendly_id()+".setLocalDescription_v1").then(function(){return(new l(d,0,k.ProxyMode.Local,{type:l.convertC2H(a.type),sdp:a.sdp})).syncBarrier()}).then(function(a){var c=d.registerCallbacks(!0,!1,t.method_id_RTCPeerConnection_t.setLocalDescription);d.remoteInvokeEx(!1,
t.method_id_RTCPeerConnection_t.setLocalDescription,[a],c.success,c.fail);c.prom().then(function(){m.logger.log(d.user_friendly_id()+".setLocalDescription_v1(): success callback received!!!");d.localDescription_=a;m.logger.log(d.user_friendly_id()+".setLocalDescription_v1(): updated localDescription_");Promise.all([]).then(function(){m.logger.log(d.user_friendly_id()+".setLocalDescription_v1() success.");f&&f()})["catch"](function(a){a=d.logRemoteInvokeError(a,".prop.setLocalDescription_v1() failed.");
b&&b(a.message)})})["catch"](function(a){a=d.logRemoteInvokeError(a,".setLocalDescription_v1() error callback received.");b&&b(a.message)})})["catch"](function(a){a=d.logRemoteInvokeError(a,".setLocalDescription_v1() failed.");b&&b(a.message)})};b.prototype.setRemoteDescription=function(a,f,b){m.logger.log(this.user_friendly_id()+".setRemoteDescription() called.",this.sdpToString(a.sdp));if(a instanceof F)return this.setRemoteDescription_v2(a);if(a instanceof RTCSessionDescription&&f)return this.setRemoteDescription_v1(a,
f,b);f=void 0;a?f=new F(a.type,a.sdp):(m.logger.log(this.user_friendly_id()+".setRemoteDescription() empty param1, setting sdp type to rollback"),a=void 0,a="have-remote-offer"==this.signalingState_?"answer":"have-local-pranswer"==this.signalingState_||"have-remote-pranswer"==this.signalingState_?"pranswer":"offer",f=new F(a,""));return this.setRemoteDescription_v2(f)};b.prototype.setRemoteDescription_v2=function(a){var f=this;m.logger.log(this.user_friendly_id()+".setRemoteDescription_v2() called.");
return new Promise(function(b,d){f.waitUntilConnected(f.user_friendly_id()+".setRemoteDescription_v2").then(function(){var c=new l(f,0,k.ProxyMode.Local,{type:l.convertC2H(a.type),sdp:a.sdp}),g=[];g.push(c.syncBarrier());var c=f.registerCallbacks(!0,!1,t.method_id_RTCPeerConnection_t.setRemoteDescription_v2),r={type:l.convertC2H(a.type),sdp:a.sdp};f.remoteInvoke(!1,t.method_id_RTCPeerConnection_t.setRemoteDescription_v2,r,c.success,c.fail);g.push(c.prom());Promise.all(g).then(function(a){m.logger.log(f.user_friendly_id()+
".setRemoteDescription_v2(): remote success.");f.remoteDescription_=a[0];g=[];f.usingasynconly_||(f.isUnified()?g.push(f.getTransceiversAsync()):g.push(f.getSendersAsync()));Promise.all(g).then(function(a){m.logger.log(f.user_friendly_id()+".setRemoteDescription_v2(): final success.");b()})["catch"](function(a){a=f.logRemoteInvokeError(a,".prop.setRemoteDescription_v2() final failed.");d(a)})})["catch"](function(a){a=f.logRemoteInvokeError(a,".prop.setRemoteDescription_v2() remote failed.");d(a)})})["catch"](function(a){a=
f.logRemoteInvokeError(a,".setRemoteDescription_v2() failed.");d(a)})})};b.prototype.setRemoteDescription_v1=function(a,f,b){var d=this;m.logger.log(this.user_friendly_id()+".setRemoteDescription_v1() called.");this.waitUntilConnected(this.user_friendly_id()+".setRemoteDescription_v1").then(function(){return(new l(d,0,k.ProxyMode.Local,{type:l.convertC2H(a.type),sdp:a.sdp})).syncBarrier()}).then(function(a){var c=d.registerCallbacks(!0,!1,t.method_id_RTCPeerConnection_t.setRemoteDescription);d.remoteInvokeEx(!1,
t.method_id_RTCPeerConnection_t.setRemoteDescription,[a],c.success,c.fail);c.prom().then(function(){m.logger.log(d.user_friendly_id()+".setRemoteDescription_v1(): success callback received!!!");d.remoteDescription_=a;m.logger.log(d.user_friendly_id()+".setRemoteDescription_v1(): updated remoteDescription_");var c=[];d.usingasynconly_||(d.isUnified()?c.push(d.getTransceiversAsync()):c.push(d.getSendersAsync()));Promise.all(c).then(function(){m.logger.log(d.user_friendly_id()+".setRemoteDescription_v1(): success.");
f&&f()})["catch"](function(a){a=d.logRemoteInvokeError(a,".prop.setRemoteDescription_v1() failed.");b&&b(a.message)})})})["catch"](function(a){a=d.logRemoteInvokeError(a,".setRemoteDescription_v1() failed.");b&&b(a.message)})};b.prototype.getLocalStreams=function(){m.logger.log("PeerConnection.getLocalStreams() called. [oid="+this.object_id()+"]");for(var a=0,f=this.localStreams;a<f.length;a++)m.logger.log(JSON.stringify(f[a]));return this.localStreams};b.prototype.getRemoteStreams=function(){m.logger.log(this.user_friendly_id()+
".getRemoteStreams() called.");for(var a=0,f=this.remoteStreams;a<f.length;a++)m.logger.log(JSON.stringify(f[a]));return this.remoteStreams};b.prototype.addTrack=function(a,f){return this.addTrackInternal(a,f,!1)};b.prototype.addTrackAsync=function(a,f){return this.addTrackInternal(a,f,!0)};b.prototype.addTrackInternal=function(a,f,b){var d=this;m.logger.log(this.user_friendly_id()+".addTrackInternal() called. track.id = "+a.id+", streams = "+JSON.stringify(f)+", isAsync = "+b);this.incrementPendingTrackCount();
var c=[];if(f)if(f instanceof q.RemoteStream)c.push(f.id),this.localStreams.push(f);else for(var g=0;g<f.length;g++)c.push(f[g].id),this.localStreams.push(f[g]);else m.logger.log(this.user_friendly_id()+".addTrackInternal() empty streams passed in, continue with empty array");var r=new n.RtpSender(this,0,k.ProxyMode.Pseudo,this.isUnified());this.senders_.push(r);f=new Promise(function(f,b){d.waitUntilConnected(d.user_friendly_id()+".addTrackInternal").then(function(){return d.remoteInvokeEx(!1,t.method_id_RTCPeerConnection_t.addTrack,
[a],c)}).then(function(a){m.logger.log(d.user_friendly_id()+".addTrackInternal() success with oid: "+d.param0(a).oid);r.bind(d,d.param0(a).oid);r.syncBarrier().then(function(){m.logger.log(d.user_friendly_id()+"sender.syncBarrier(): success");!d.usingasynconly_&&d.isUnified()?d.getTransceiversAsync().then(function(){d.decrementPendingTrackCount();f(r)})["catch"](function(a){d.logRemoteInvokeError(a,".addTrackInternal() getTransceiversAsync() failed!");d.decrementPendingTrackCount();b()}):(d.decrementPendingTrackCount(),
f(r))})["catch"](function(a){d.logRemoteInvokeError(a,"sender.syncBarrier() failed!");d.decrementPendingTrackCount();b()})})["catch"](function(a){d.logRemoteInvokeError(a,"addTrack() failed!");d.decrementPendingTrackCount();b()})});if(b)return f;m.logger.log(this.user_friendly_id()+".addTrack() returning: "+r);return r};b.prototype.removeTrack=function(a){m.logger.log(this.user_friendly_id()+".removeTrack() called.");this.removeTrackAsync(a)};b.prototype.removeTrackAsync=function(a){var f=this;m.logger.log(this.user_friendly_id()+
".removeTrackAsync() called.");this.incrementPendingTrackCount();for(var b=0;b<this.senders_.length;b++)this.senders_[b]==a&&this.senders_.splice(b,1);return new Promise(function(b,d){f.waitUntilConnected(f.user_friendly_id()+".removeTrackAsync").then(function(){return f.remoteInvokeEx(!1,t.method_id_RTCPeerConnection_t.removeTrack,[a])}).then(function(){m.logger.log(f.user_friendly_id()+".removeTrackAsync() success.");!f.usingasynconly_&&f.isUnified()?f.getTransceiversAsync().then(function(){f.decrementPendingTrackCount();
b()})["catch"](function(a){f.logRemoteInvokeError(a,"removeTrackAsync() getTransceiversAsync() failed!");f.decrementPendingTrackCount();d(a)}):(f.decrementPendingTrackCount(),b())})["catch"](function(a){f.logRemoteInvokeError(a,"removeTrackAsync() failed!");f.decrementPendingTrackCount();d(a)})})};b.prototype.addStream=function(a){var b=this;m.logger.log(this.user_friendly_id()+".addStream() called: "+JSON.stringify(a));this.localStreams.push(a);this.waitUntilConnected(this.user_friendly_id()+".addStream").then(function(){return b.remoteInvokeEx(!1,
t.method_id_RTCPeerConnection_t.addStream,[a],{})}).then(function(){m.logger.log(b.user_friendly_id()+".addStream() success.")})["catch"](function(a){b.logRemoteInvokeError(a,"addStream() failed.")})};b.prototype.removeStream=function(a){var b=this;m.logger.log(this.user_friendly_id()+".removeStream() called: "+JSON.stringify(a));for(var d=0;d<this.localStreams.length;d++)this.localStreams[d]==a&&this.localStreams.splice(d,1);this.waitUntilConnected(this.user_friendly_id()+".removeStream").then(function(){return b.remoteInvokeEx(!1,
t.method_id_RTCPeerConnection_t.removeStream,[a])}).then(function(){m.logger.log(b.user_friendly_id()+".removeStream() success.")})["catch"](function(a){b.logRemoteInvokeError(a,"removeStream() failed.")})};Object.defineProperty(b.prototype,"onaddstream",{get:function(){return this.onaddstream_},set:function(a){var b=this;m.logger.log(this.user_friendly_id()+".set_onaddstream() called.");this.onaddstream_=a;this.waitUntilConnected(this.user_friendly_id()+".onaddstream").then(function(){var d=b.registerCallbacks(!1,
b.isNullCallback(a),t.method_id_RTCPeerConnection_t.onaddstream);d.then(function(a){(new q.RemoteStreamEvent(b,b.param0(a).oid)).syncBarrier().then(function(a){m.logger.log(b.user_friendly_id()+".onaddstream callback received!");void 0===b.remoteStreams.find(function(b){return void 0!=a.stream&&b.object_id()===a.stream.object_id()})&&b.remoteStreams.push(a.stream);b.onaddstream_&&(m.logger.log(b.user_friendly_id()+".onaddstream notified!!! "+a.stream.id),b.onaddstream_(a))})});return b.remoteInvoke(!0,
t.method_id_RTCPeerConnection_t.onaddstream,d.success)})["catch"](function(a){b.logRemoteInvokeError(a,"set_onaddstream() failed!")})},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"onremovestream",{get:function(){return this.onremovestream_},set:function(a){var b=this;m.logger.log(this.user_friendly_id()+".set_onremovestream() called.");this.onremovestream_=a;this.waitUntilConnected(this.user_friendly_id()+".onremovestream").then(function(){var d=b.registerCallbacks(!1,b.isNullCallback(a),
t.method_id_RTCPeerConnection_t.onremovestream);d.then(function(a){(new q.RemoteStreamEvent(b,b.param0(a).oid)).syncBarrier().then(function(a){m.logger.log(b.user_friendly_id()+".onremovestream callback received! "+a.stream.id);var d=b.remoteStreams.findIndex(function(b){return b.id==a.stream.id});0<=d&&b.remoteStreams.splice(d,1);if(b.onremovestream_)b.onremovestream_(a)})});return b.remoteInvoke(!0,t.method_id_RTCPeerConnection_t.onremovestream,d.success)})["catch"](function(a){b.logRemoteInvokeError(a,
"set_onremovestream() failed!")})},enumerable:!1,configurable:!0});b.prototype.getStats=function(a){var b=this;return new Promise(function(d,c){b.isRedirected()?b.waitUntilConnected(b.user_friendly_id()+".getStats").then(function(){var c=b.registerCallbacks(!0,!1,t.method_id_RTCPeerConnection_t.getStats);c.then(function(b){void 0===b.params||0===b.params.length||0===b.params[0].length?d():a?(a(D.StatsReport.fromJSON(JSON.parse(b.params[0]))),d()):d(D.StatsReport.toRTCStatsReport(JSON.parse(b.params[0])))});
return a?b.remoteInvoke(!1,t.method_id_RTCPeerConnection_t.getStats,c.success):b.remoteInvoke(!1,t.method_id_RTCPeerConnection_t.getStats_v2,c.success)})["catch"](function(a){b&&(a=b.logRemoteInvokeError(a,".getStats() failed!"),c(a))}):(a({}),d())})};b.prototype.SendTelemetryData=function(a,b,d){w.getRedirector().telemetry.SendTelemetryData(y.tel_cmd.Data,a,b,d)};b.prototype.MillisecondstoDisplayformat_=function(a){var b,d;d=Math.floor(a/1E3);b=Math.floor(d/60);a=Math.floor(b/60);m.logger.log(Math.floor(a/
24)+":"+a%24+":"+b%60+":"+d%60)};b.prototype.CalculateCallDurationandType_=function(){if(1==this.timeerstarted_){this.timeerstarted_=!1;this.callendTime_=(new Date).getTime();var a=this.callendTime_-this.callstartTime_;this.MillisecondstoDisplayformat_(a);a=Math.round(a/1E3);m.logger.log("Call Duration "+a);1==this.conferencecall_?this.SendTelemetryData(y.tel_key_ConferenceCallDuration,a,1):(1==this.audiocall_.active&&this.SendTelemetryData(y.tel_key_AudioCallDuration,a,1),1==this.videocall_.active&&
this.SendTelemetryData(y.tel_key_VideoCallDuration,a,1),1==this.screensharingcall_.active&&this.SendTelemetryData(y.tel_key_ScreensharingCallDuration,a,1));var b;1==this.firsttimelocaloffer_&&(b=this.callstartTime_-this.outgoingcallstart_);1==this.firsttimeremoteoffer_&&(b=this.callstartTime_-this.incomingcallstart_);this.MillisecondstoDisplayformat_(b);b=Math.round(b/1E3);m.logger.log("Call Establish Time "+b);1==this.incomingcall_?this.SendTelemetryData(y.tel_key_CallEstIncoming,b,1):1==this.outgoingcall_&&
this.SendTelemetryData(y.tel_key_CallEstOutgoing,b,1);this.SendTelemetryData(y.tel_key_PerfCallState,y.tel_CallState.idle,1)}};b.prototype.close=function(){var a=this;m.logger.log(this.user_friendly_id()+".close() called.");this.CalculateCallDurationandType_();this.unregisterStateChangeNotification(this.onStateChange);this.onnegotiationneeded=this.onsignalingstatechange=this.onicegatheringstatechange=this.oniceconnectionstatechange=this.onicecandidate=this.onaddstream=null;this.waitUntilConnected(this.user_friendly_id()+
".close").then(function(){return a.remoteInvoke(!1,t.method_id_RTCPeerConnection_t.close)}).then(function(){a.iceQ_=null;a.release();m.logger.log(a.user_friendly_id()+".close() success.")})["catch"](function(b){a.logRemoteInvokeError(b,".close() failed.");a.iceQ_=null;a.release()})};b.prototype.createDTMFSender=function(a){m.logger.log(this.user_friendly_id()+".createDTMFSender() called.");var b,d=this.senders_;if(void 0===d||0===d.length)d=this.getSenders();void 0!=d&&(d=d.find(function(b){return b.track.id===
a.id}),void 0!=d&&(m.logger.log(this.user_friendly_id()+" returning RtpSender with oid:"+d.object_id()),b=d.dtmf));return b};Object.defineProperty(b.prototype,"usingAsyncOnly",{get:function(){return this.usingasynconly_},set:function(a){m.logger.log(this.user_friendly_id()+".usingAsyncOnly() called with async:"+a);void 0!=a&&null!=a&&(this.usingasynconly_=a)},enumerable:!1,configurable:!0});b.prototype.getSendersAsync=function(){m.logger.log(this.user_friendly_id()+".getSendersAsync() called.");return this.getSendersAsyncInternal()};
b.prototype.getSenders=function(){m.logger.log(this.user_friendly_id()+".getSenders() called. ");if(this.usingasynconly_)throw m.logger.log(this.user_friendly_id()+".getSenders(): throwing exception: not allowed when usingAsyncOnly is true!!!"),new DOMException(".getSenders() not allowed when usingAsyncOnly is true!!!");this.getSendersAsyncInternal();m.logger.log(this.user_friendly_id()+".getSenders() returning:"+this.senders_.length+" items");return this.senders_};b.prototype.getSendersAsyncInternal=
function(){var a=this;m.logger.log(this.user_friendly_id()+".getSendersAsyncInternal() called. "+this.senders_);return new Promise(function(b,d){a.waitUntilConnected(a.user_friendly_id()+".getSendersAsyncInternal").then(function(){m.logger.log(a.user_friendly_id()+".getSendersAsyncInternal invoking remote");return a.remoteInvoke(!1,t.method_id_RTCPeerConnection_t.getSenders)}).then(function(d){m.logger.log(a.user_friendly_id()+".getSendersAsyncInternal remote success");var c=[],g=[];d.params[0].forEach(function(b){var f=
a.senders_.find(function(a){return a.object_id()===b.oid});void 0===f&&(m.logger.log(a.user_friendly_id()+" adding a RtpSender with oid:"+b.oid),f=new n.RtpSender(a,b.oid,k.ProxyMode.Remote,a.isUnified()));g.push(f.syncBarrier());c.push(f)});Promise.all(g).then(function(){a.senders_=c;m.logger.log(a.user_friendly_id()+".getSendersAsyncInternal: returning senders with ids ["+a.senders_.map(function(a){return a.object_id()})+"]");b(a.senders_)})["catch"](function(d){a.logRemoteInvokeError(d,".prop.getSendersAsyncInternal() failed.");
a.senders_=[];b(a.senders_)})})["catch"](function(d){a.logRemoteInvokeError(d,".getSendersAsyncInternal() failed.");a.senders_=[];b(a.senders_)})})};b.prototype.getReceiversAsync=function(){m.logger.log(this.user_friendly_id()+".getReceiversAsync() called.");return this.getReceiversAsyncInternal()};b.prototype.getReceivers=function(){m.logger.log(this.user_friendly_id()+".getReceivers() called. ");if(this.usingasynconly_)throw m.logger.log(this.user_friendly_id()+".getReceivers(): throwing exception: not allowed when usingAsyncOnly is true!!!"),
new DOMException(".getReceivers() not allowed when usingAsyncOnly is true!!!");this.getReceiversAsyncInternal();m.logger.log(this.user_friendly_id()+".getReceivers() returning:"+this.receivers_.length+" items");return this.receivers_};b.prototype.getReceiversAsyncInternal=function(){var a=this;m.logger.log(this.user_friendly_id()+".getReceiversAsyncInternal() called. "+this.receivers_);return new Promise(function(b,d){a.waitUntilConnected(a.user_friendly_id()+".getReceiversAsyncInternal").then(function(){return a.remoteInvoke(!1,
t.method_id_RTCPeerConnection_t.getReceivers)}).then(function(d){m.logger.log(a.user_friendly_id()+".getReceiversAsyncInternal: remote success.");var c=[],g=[];d.params[0].forEach(function(b){var f=a.receivers_.find(function(a){return a.object_id()===b.oid});void 0===f&&(m.logger.log(a.user_friendly_id()+" adding a RtpReceiver with oid:"+b.oid),f=new n.RtpReceiver(a,b.oid,k.ProxyMode.Remote,a.isUnified()));g.push(f.syncBarrier());c.push(f)});Promise.all(g).then(function(){a.receivers_=c;m.logger.log(a.user_friendly_id()+
".getReceiversAsyncInternal: returning receiver with ids ["+a.receivers_.map(function(a){return a.object_id()})+"]");b(a.receivers_)})["catch"](function(d){a.logRemoteInvokeError(d,".prop.getReceiversAsyncInternal() failed!");a.receivers_=[];b(a.receivers_)})})["catch"](function(d){a.logRemoteInvokeError(d,".getReceiversAsyncInternal() failed!");a.receivers_=[];b(a.receivers_)})})};b.prototype.addTransceiver=function(a,b){m.logger.log(this.user_friendly_id()+".addTransceiver() called: "+JSON.stringify(a)+
" init="+JSON.stringify(b));return this.addTransceiverInternal(a,b,!1)};b.prototype.addTransceiverAsync=function(a,b){m.logger.log(this.user_friendly_id()+".addTransceiverAsync() called: "+JSON.stringify(a)+" init="+JSON.stringify(b));return this.addTransceiverInternal(a,b,!0)};b.prototype.addTransceiverInternal=function(a,b,d){var c=this;m.logger.log(this.user_friendly_id()+".addTransceiverInternal() called: "+JSON.stringify(a)+" init="+JSON.stringify(b));this.incrementPendingTransceiverCount();
var r=z.RtcRtpTransceiverDirection.sendrecv,e=void 0;b&&(e=z.RtcRtpTransceiverInit.toRtcRtpTransceiverInit(b),e.direction&&(r=e.direction));var C=b;g.RemoteSession.isFeatureCallConstraintsSupported()&&(C=e);var x=new z.RtpTransceiver(this,0,k.ProxyMode.Pseudo,this.isUnified(),r);this.transceivers_.push(x);b=new Promise(function(b,f){c.waitUntilConnected(c.user_friendly_id()+".addTransceiverInternal").then(function(){return"string"===typeof a?c.remoteInvoke(!1,t.method_id_RTCPeerConnection_t.addTransceiverWithKind,
a,C):c.remoteInvokeEx(!1,t.method_id_RTCPeerConnection_t.addTransceiverWithTrack,[a],C)}).then(function(a){m.logger.log(c.user_friendly_id()+".addTransceiverInternal() success with oid: "+c.param0(a).oid);x.bind(c,c.param0(a).oid);x.syncBarrier().then(function(){m.logger.log(c.user_friendly_id()+".addTransceiverInternal(): success");c.decrementPendingTransceiverCount();b(x)})["catch"](function(a){c.logRemoteInvokeError(a,".prop.addTransceiverInternal() failed!");c.decrementPendingTransceiverCount();
f()})})["catch"](function(a){c.logRemoteInvokeError(a,"addTransceiverInternal() failed!");c.decrementPendingTransceiverCount();f()})});m.logger.log(this.user_friendly_id()+".addTransceiverInternal() returning:");return d?b:x};b.prototype.incrementPendingTransceiverCount=function(){++this.pendingtransceiver_};b.prototype.decrementPendingTransceiverCount=function(){0<this.pendingtransceiver_&&--this.pendingtransceiver_};b.prototype.incrementPendingTrackCount=function(){++this.pendingtrack_};b.prototype.decrementPendingTrackCount=
function(){0<this.pendingtrack_&&--this.pendingtrack_};b.prototype.waitTransceiverAndTrackReady=function(a){var b=this;return new Promise(function(d,c){m.logger.trace(b.user_friendly_id()+".waitTransceiverAndTrackReady(): pendingtransceiver_="+b.pendingtransceiver_+", pendingtrack_="+b.pendingtrack_);if(0==b.pendingtransceiver_&&0==b.pendingtrack_){for(;b.deferredOfferAnswers&&0<b.deferredOfferAnswers.length;)b.deferredOfferAnswers.shift().post(!0);d()}else b.deferredOfferAnswers.push(new k.deferred_action(d,
c,a)),b.checkTransceiverAndTrack(600,25)})};b.prototype.checkTransceiverAndTrack=function(a,b){var d=this;if(0>=a)for(m.logger.log(".checkTransceiverAndTrack() timeout waiting for transceiver ready!");this.deferredOfferAnswers&&0<this.deferredOfferAnswers.length;)this.deferredOfferAnswers.shift().post(!1);else setTimeout(function(a){if(0==d.pendingtransceiver_&&0==d.pendingtrack_)for(;d.deferredOfferAnswers&&0<d.deferredOfferAnswers.length;)d.deferredOfferAnswers.shift().post(!0);else m.logger.log('.checkTransceiverAndTrack(): count= "'+
a),d.checkTransceiverAndTrack(--a,b)},b,a)};b.prototype.getTransceivers=function(){m.logger.log(this.user_friendly_id()+".getTransceivers() called. ");if(this.usingasynconly_)throw m.logger.log(this.user_friendly_id()+".getTransceivers(): throwing exception: not allowed when usingAsyncOnly is true!!!"),new DOMException(".getTransceivers() not allowed when usingAsyncOnly is true!!!");this.getTransceiversAsync();m.logger.log(this.user_friendly_id()+".getTransceivers() returning:"+this.transceivers_.length+
" items");return this.transceivers_};b.prototype.getTransceiversAsync=function(){var a=this;m.logger.log(this.user_friendly_id()+".getTransceiversAsync() called. ");return new Promise(function(b,d){if(!a.isUnified())return m.logger.log(a.user_friendly_id()+".getTransceiversAsync() called in non-Unified. "),Promise.resolve(a.transceivers_);a.waitUntilConnected(a.user_friendly_id()+".getTransceiversAsync").then(function(){return a.remoteInvoke(!1,t.method_id_RTCPeerConnection_t.getTransceivers)}).then(function(d){m.logger.log(a.user_friendly_id()+
".getTransceiversAsync() remote success.");var c=[],g=[];d.params[0].forEach(function(b){var f=a.transceivers_.find(function(a){return a.object_id()===b.oid});void 0===f&&(m.logger.log(a.user_friendly_id()+" adding a RtpTransceiver with oid:"+b.oid),f=new z.RtpTransceiver(a,b.oid,k.ProxyMode.Remote,a.isUnified()));g.push(f.syncBarrier());c.push(f)});Promise.all(g).then(function(){a.transceivers_=c;m.logger.log(a.user_friendly_id()+".prop.getTransceiversAsync: returning transceiver with ids ["+a.transceivers_.map(function(a){return a.object_id()})+
"]");b(a.transceivers_)})["catch"](function(d){a.logRemoteInvokeError(d,".prop.getTransceiversAsync() failed!");a.transceivers_=[];b(a.transceivers_)})})["catch"](function(d){a.logRemoteInvokeError(d,".getTransceiversAsync() failed!");a.transceivers_=[];b(a.transceivers_)})})};Object.defineProperty(b.prototype,"sctp",{get:function(){return this.sctp_},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"ondatachannel",{get:function(){return this.ondatachannel_},set:function(a){var b=
this;m.logger.log(this.user_friendly_id()+".set_ondatachannel() called.");this.ondatachannel_=a;this.waitUntilConnected(this.user_friendly_id()+".ondatachannel").then(function(){var d=b.registerCallbacks(!1,b.isNullCallback(a),t.method_id_RTCPeerConnection_t.ondatachannel);d.then(function(a){m.logger.log(b.user_friendly_id()+".ondatachannel callback received!!!");if(null===b.remotedatachannel_||b.remotedatachannel_.object_id()!=b.param0(a).oid)b.remotedatachannel_=new B.RtcDataChannel(b,b.param0(a).oid,
k.ProxyMode.Remote),b.remotedatachannel_.syncBarrier().then(function(){m.logger.log(b.user_friendly_id()+"remotedatachannel_.syncBarrier(): success");var a=new Event("ondatachannel");a.channel=b.remotedatachannel_;if(b.localdatachannel_&&!b.localdatachannel_.isdestroyed())b.localdatachannel_.syncBarrier().then(function(){m.logger.log(b.user_friendly_id()+"ondatachannel(): notifying...");if(b.ondatachannel_)b.ondatachannel_(a)})["catch"](function(){m.logger.log(b.user_friendly_id()+"localdatachannel_.syncBarrier(): failed!")});
else if(m.logger.log(b.user_friendly_id()+"ondatachannel(): notifying..."),b.ondatachannel_)b.ondatachannel_(a)})["catch"](function(){m.logger.log(b.user_friendly_id()+"remotedatachannel_.syncBarrier(): failed!")})});return b.remoteInvoke(!0,t.method_id_RTCPeerConnection_t.ondatachannel,d.success)})["catch"](function(){m.logger.log(b.user_friendly_id()+".ondatachannel() failed.")})},enumerable:!1,configurable:!0});b.prototype.fixDataChannelConfig=function(a){m.logger.log(this.user_friendly_id()+".fixDataChannelConfig() called: "+
a);void 0==a&&(a={});void 0==a.negotiated&&void 0==a.id&&(a.negotiated=!1,a.id=-1);return a};b.prototype.createDataChannel=function(a,b){var d=this;m.logger.log(this.user_friendly_id()+".createDataChannel() called. label:"+a);this.localdatachannel_=new B.RtcDataChannel(this,0,k.ProxyMode.Pseudo);this.waitUntilConnected(this.user_friendly_id()+".createDataChannel").then(function(){return d.remoteInvoke(!1,t.method_id_RTCPeerConnection_t.createDataChannel,a,d.fixDataChannelConfig(b))}).then(function(a){m.logger.log(d.user_friendly_id()+
".createDataChannel() success with oid: "+d.param0(a).oid);d.localdatachannel_.bind(d,d.param0(a).oid);d.localdatachannel_.syncBarrier().then(function(){m.logger.log(d.user_friendly_id()+"channel.syncBarrier(): success")})["catch"](function(){m.logger.log(d.user_friendly_id()+"channel.syncBarrier(): failed!")})})["catch"](function(a){a=d.param0(a);m.logger.log(d.user_friendly_id()+".createDataChannel() failed with error: "+a)});m.logger.log(this.user_friendly_id()+".createDataChannel() returning: "+
this.localdatachannel_);return this.localdatachannel_};return b}(k.ProxyObject);a.PeerConnection=b},658:function(b,a,c){var e=this&&this.__spreadArrays||function(){for(var a=0,b=0,d=arguments.length;b<d;b++)a+=arguments[b].length;for(var a=Array(a),c=0,b=0;b<d;b++)for(var g=arguments[b],r=0,e=g.length;r<e;r++,c++)a[c]=g[r];return a};Object.defineProperty(a,"__esModule",{value:!0});a.ProxyObject=a.ProxyMode=a.ProxyReadyState=a.number_allocator=a.callback=a.rpc_callback=a.deferred_action=void 0;var u=
c(946),h=c(851),d=c(545),w=c(247),q=c(550),n=function(){function a(b,d,c){this.resolve=b;this.reject=d;this.name_=c}Object.defineProperty(a.prototype,"name",{get:function(){return this.name_},enumerable:!1,configurable:!0});a.prototype.post=function(a){1==a?(h.logger.log('deferred_action.post(): resolving "'+this.name_+'"'),this.resolve()):(h.logger.log('deferred_action.post(): rejecting "'+this.name_+'"'),this.reject())};a.prototype.postWithResult=function(a,b){1==a?(h.logger.log('deferred_action.post(): resolving "'+
this.name_+'"'),this.resolve(b)):(h.logger.log('deferred_action.post(): rejecting "'+this.name_+'"'),this.reject())};a.prototype.postResolve=function(a){this.resolve(a)};a.prototype.postReject=function(a){void 0==a?this.reject():this.reject(a)};return a}();a.deferred_action=n;var k=function(){return function(a,b){this.id=a;this.is_null=b}}();a.rpc_callback=k;var v=function(){function a(b,d,c){this.success=new k(b<<16,d);this.fail=new k(b<<16|1,d);this.id=b;this.oneShot=c}a.prototype.resolve=function(a){h.logger.trace("callback.resolve() called. [id="+
this.id+"]");null!=this.handler&&this.handler(a)};a.prototype.reject=function(a){null!=this.err_handler&&this.err_handler(a)};a.prototype.then=function(a){this.handler=a};a.prototype.prom=function(){var a=this;return new Promise(function(b,d){a.handler=b;a.err_handler=d})};return a}();a.callback=v;var z=function(){function a(b,d,c){this.min_=b<a.BOUND_LOW||b>a.BOUND_HIGH?a.DEF_MIN:b;this.max_=d<a.BOUND_LOW||d>a.BOUND_HIGH?a.DEF_MAX:d;this.interval_=c<a.BOUND_LOW||c>a.BOUND_HIGH?a.DEF_INTERVAL:c;this.numbers_=
new Map;this.numbers_.set(this.min_,this.max_)}Object.defineProperty(a.prototype,"max",{get:function(){return this.max_},enumerable:!1,configurable:!0});Object.defineProperty(a.prototype,"min",{get:function(){return this.min_},enumerable:!1,configurable:!0});Object.defineProperty(a.prototype,"interval",{get:function(){return this.interval_},enumerable:!1,configurable:!0});Object.defineProperty(a.prototype,"numbers",{get:function(){return this.numbers_},enumerable:!1,configurable:!0});a.prototype.allocate=
function(){var a=-1;if(0<this.numbers_.size){var b=Array.from(this.numbers_.keys()).sort(function(a,b){return a-b})[0],d=this.numbers_.get(b),a=this.min_+(b-this.min_)*this.interval_;this.numbers_["delete"](b);b+=1;b<d&&this.numbers_.set(b,d)}return a};a.prototype.deallocate=function(a){var b=Array.from(this.numbers_.keys()).sort(function(a,b){return a-b});a=(a-this.min_)/this.interval_;for(var d=!1,c=0;c<b.length&&(b[c]==a+1?(this.numbers_.set(a,this.numbers_.get(b[c])),this.numbers_["delete"](b[c]),
d=!0):this.numbers_.get(b[c])==a&&(this.numbers_.set(b[c],a+1),c+1<b.length&&b[c+1]==a+1&&(this.numbers_.set(b[c],this.numbers_.get(b[c+1])),this.numbers_["delete"](b[c+1])),d=!0),!d);c++);d||this.numbers_.set(a,a+1)};a.BOUND_LOW=0;a.BOUND_HIGH=4294967295;a.DEF_MIN=0;a.DEF_MAX=1024;a.DEF_INTERVAL=1;return a}();a.number_allocator=z;var g;(function(a){a[a.NotConfigured=0]="NotConfigured";a[a.Configured=1]="Configured";a[a.Error=2]="Error";a[a.Destroyed=3]="Destroyed"})(g=a.ProxyReadyState||(a.ProxyReadyState=
{}));var B;(function(a){a[a.Local=0]="Local";a[a.Remote=1]="Remote";a[a.Pseudo=2]="Pseudo"})(B=a.ProxyMode||(a.ProxyMode={}));b=function(){function a(b,c,k,x,r,A){var z=this;void 0===r&&(r=null);void 0===A&&(A=[]);for(var v=[],n=6;n<arguments.length;n++)v[n-6]=arguments[n];this.hdxms=u.getRedirector();this.iid=c;this.oid=k;this.mode=x;this.proxystate=g.NotConfigured;this.deferredActions=[];this.pendingSyncBarriers=[];this.cbs=new Map;if(x===B.Local){n=!1;this.iid===q.class_id_t.EngineControl&&(n=
!0);var l=this;this.hdxms.startRedirection(n,this.user_friendly_id()).then(function(){z.oid=a.nextId++;h.logger.log(z.user_friendly_id()+" assigned local oid:"+z.oid);return new Promise(function(a,b){l.waitUntilConnectedEx(l.user_friendly_id()+".ctor()",A).then(function(){h.logger.log(l.user_friendly_id()+".ctor() all parameter rpc objects are ready.");var a=l.oidsFromProxyOjbects(A).concat(v),b=q.WebrpcClassLibInfoUtil.getMethodFeatureByid(c,0);return l.hdxms.WSSendObjectWrapper(b,c,0,d.WsJsonUtil.createMessageByid.apply(d.WsJsonUtil,
e([!1,!1,d.ws_msg_type_t.req,c,0,l.oid],a)))}).then(function(b){h.logger.log(l.user_friendly_id()+".ctor() success.");a(b)})["catch"](function(){h.logger.log(l.user_friendly_id()+".ctor() failed.");b()})})}).then(function(a){h.logger.trace("ProxyObject: setting state to configured. (iid: "+z.iid+" oid: "+z.oid+")");var d=z.oid;l.proxystate=g.Configured;l.oid=z.param0(a);h.logger.log(z.user_friendly_id()+" assigned remote oid for local oid:"+d);l.onConnected();r&&r();w.getGC().trackObject(z,b)})["catch"](function(){l.proxystate=
g.Error;l.onConnected()})}else x===B.Remote&&(this.proxystate=g.Configured,w.getGC().trackObject(this,b))}a.prototype.syncBarrierDeep=function(a,b){var d=!0;0<this.pendingSyncBarriers.length&&(d=!1);this.pendingSyncBarriers.push(new n(a,b,this.user_friendly_id()+".syncBarrier"));h.logger.log(this.user_friendly_id()+".syncBarrierDeep() queing request for:"+this.oid+", rv:"+d+", items:"+this.pendingSyncBarriers.length);return d};a.prototype.syncBarrierResolve=function(a){for(h.logger.log(this.user_friendly_id()+
".syncBarrierResolve() items:"+this.pendingSyncBarriers.length);this.pendingSyncBarriers&&0<this.pendingSyncBarriers.length;)h.logger.log(this.user_friendly_id()+".syncBarrierResolve() items:"+this.pendingSyncBarriers.length+" resolving request for:"+this.oid),this.pendingSyncBarriers.shift().postResolve(a)};a.prototype.syncBarrierReject=function(a){for(h.logger.log(this.user_friendly_id()+".syncBarrierReject() items:"+this.pendingSyncBarriers.length);this.pendingSyncBarriers&&0<this.pendingSyncBarriers.length;)h.logger.log(this.user_friendly_id()+
".syncBarrierReject() rejecting request for:"+this.oid),this.pendingSyncBarriers.shift().postReject(a)};Object.defineProperty(a.prototype,"proxyreadystate",{get:function(){return this.proxystate},set:function(a){this.proxystate=a},enumerable:!1,configurable:!0});a.prototype.bind=function(a,b){h.logger.trace("ProxyObject: binding object. (iid: "+this.iid+" oid: "+b+" mode: "+this.mode+")");if(this.mode===B.Pseudo){this.proxystate=g.Configured;var d=this.oid;this.oid=b;h.logger.log(this.user_friendly_id()+
" assigned remote oid for local oid:"+d);this.onConnected();w.getGC().trackObject(this,a);this.mode=B.Remote}else this.mode===B.Remote?h.logger.log("ProxyObject: binding already complete."):h.logger.log("ProxyObject: binding failure. incorrect mode!")};a.prototype.reconstructor=function(a,b,c){for(var x=this,r=[],A=3;A<arguments.length;A++)r[A-3]=arguments[A];this.proxystate=g.NotConfigured;this.deferredActions=[];A=q.WebrpcClassLibInfoUtil.getMethodFeatureByid(b,0);this.hdxms.WSSendObjectWrapper(A,
b,0,d.WsJsonUtil.createMessageByid.apply(d.WsJsonUtil,e([!1,!1,d.ws_msg_type_t.req,b,0,this.oid],r))).then(function(b){h.logger.trace("ProxyObject: setting state to configured. (iid: "+x.iid+" oid: "+x.oid+")");var d=x.oid;x.proxystate=g.Configured;x.oid=x.param0(b);h.logger.log(x.user_friendly_id()+" assigned remote oid for local oid:"+d);x.onConnected();w.getGC().trackObject(x,a)})["catch"](function(){x.proxystate=g.Error;x.onConnected()})};a.prototype.setParent=function(a){w.getGC().setParent(this,
a)};a.prototype.release=function(){h.logger.log(this.user_friendly_id()+".release() called.");w.getGC().releaseObject(this)};a.prototype.destroy=function(){h.logger.log(this.user_friendly_id()+".destroy() called.");this.proxystate=g.Destroyed;var a=q.WebrpcClassLibInfoUtil.getMethodFeatureByid(this.iid,0);this.hdxms.WSSendObjectWrapper(a,this.iid,0,d.WsJsonUtil.createMessageByid(!1,!0,d.ws_msg_type_t.req,this.iid,0,this.oid));this.clearCallbacks()};a.prototype.isdestroyed=function(){return this.proxystate==
g.Destroyed};a.prototype.onConnected=function(){for(;this.deferredActions&&0<this.deferredActions.length;)this.deferredActions.shift().post(this.proxystate==g.Configured)};a.prototype.isPseudo=function(){return this.mode==B.Pseudo};a.prototype.checkState=function(a,b,d){var c=this;0>=a?(h.logger.log("ProxyObject.checkState() timeout waiting for connection response! failed. (iid: "+c.iid+" oid: "+c.oid+"name: "+d+")"),c.onConnected()):setTimeout(function(a,d){if(c.proxystate==g.Configured)c.onConnected();
else if(c.proxystate==g.Error)c.onConnected();else if(c.proxystate==g.Destroyed)c.onConnected();else c.checkState(--a,b,d)},b,a,d)};a.prototype.waitUntilConnected=function(a){var b=this;return new Promise(function(d,c){b?(h.logger.trace("ProxyObject.waitUntilConnected(): readyState="+b.proxystate+". (iid: "+b.iid+" oid: "+b.oid+")"),b.proxystate==g.Destroyed?(b.onConnected(),h.logger.trace("rejecting already destroyed Object:"+b.user_friendly_id()),c("Object already destroyed :"+b.user_friendly_id())):
b.proxystate==g.Configured?(b.onConnected(),d()):b.proxystate==g.Error?(h.logger.trace("ProxyObject.waitUntilConnected(): readyState="+b.proxystate+". (iid: "+b.iid+" oid: "+b.oid+")"),b.onConnected(),c()):(h.logger.log('ProxyObject.waitUntilConnected(): deferring action "'+a+'". (iid: '+b.iid+" oid: "+b.oid+")"),b.deferredActions.push(new n(d,c,a)),b.checkState(600,25,a))):c("Invalid Object")})};a.prototype.remoteInvoke=function(a,b){for(var c=[],k=2;k<arguments.length;k++)c[k-2]=arguments[k];if(this.proxystate==
g.Destroyed)return h.logger.trace("rejecting already destroyed Object:"+this.user_friendly_id()),Promise.reject("Cannot invoke destroyed object :"+this.user_friendly_id());if(this.proxystate==g.Error)return h.logger.trace("rejecting already error state Object:"+this.user_friendly_id()),Promise.reject("Cannot invoke object in Error state:"+this.user_friendly_id());k=q.WebrpcClassLibInfoUtil.getMethodFeatureByid(this.iid,b);return this.hdxms.WSSendObjectWrapper(k,this.iid,b,d.WsJsonUtil.createMessageByid.apply(d.WsJsonUtil,
e([a,!1,d.ws_msg_type_t.req,this.iid,b,this.oid],c)))};a.prototype.waitUntilConnectedEx=function(a,b){var d=this;return new Promise(function(c,g){if(d){for(var e=[],k=0;k<b.length;k++){var z=b[k];if(z instanceof Array)for(var v=0;v<z.length;v++){var t=z[v];e.push(t.waitUntilConnected(a+"."+t.user_friendly_id()))}else e.push(z.waitUntilConnected(a+"."+z.user_friendly_id()))}Promise.all(e).then(function(){h.logger.log(d.user_friendly_id()+".waitUntilConnectedEx() success.");c()})["catch"](function(a){d.logRemoteInvokeError(a,
".waitUntilConnectedEx(): failed.");g()})}else g("Invalid Object")})};a.prototype.oidsFromProxyOjbects=function(a){for(var b=[],d=0;d<a.length;d++){var c=a[d];if(c instanceof Array){for(var g=[],e=0;e<c.length;e++)g.push({oid:c[e].object_id()});b.push(g)}else b.push({oid:c.object_id()})}return b};a.prototype.remoteInvokeEx=function(a,b,c){for(var k=[],r=3;r<arguments.length;r++)k[r-3]=arguments[r];if(this.proxystate==g.Destroyed)return h.logger.trace("rejecting already destroyed Object:"+this.user_friendly_id()),
Promise.reject("Cannot invoke destroyed object :"+this.user_friendly_id());if(this.proxystate==g.Error)return h.logger.trace("rejecting already error state Object:"+this.user_friendly_id()),Promise.reject("Cannot invoke object in Error state:"+this.user_friendly_id());var A=this;return new Promise(function(g,r){A.waitUntilConnectedEx(A.user_friendly_id()+".remoteInvokeEx",c).then(function(){h.logger.log(A.user_friendly_id()+".remoteInvokeEx() all parameter rpc objects are ready.");var g=A.oidsFromProxyOjbects(c).concat(k),
r=q.WebrpcClassLibInfoUtil.getMethodFeatureByid(A.iid,b);return A.hdxms.WSSendObjectWrapper(r,A.iid,b,d.WsJsonUtil.createMessageByid.apply(d.WsJsonUtil,e([a,!1,d.ws_msg_type_t.req,A.iid,b,A.oid],g)))}).then(function(a){h.logger.log(A.user_friendly_id()+".remoteInvokeEx() success.");g(a)})["catch"](function(){h.logger.log(A.user_friendly_id()+".remoteInvokeEx() failed.");r()})})};a.prototype.logRemoteInvokeError=function(a,b){var d="",c=a;c?d=b+" with error: "+JSON.stringify(c.message):(d=this.param0(a),
c=0!==Object.keys(d).length?new DOMException(b+" with error: "+JSON.stringify(d),this.user_friendly_id()):new DOMException(b,this.user_friendly_id()),d=c.message);h.logger.logx(this.isdestroyed(),this.user_friendly_id()+d);return c};a.prototype.allocate_cbid=function(){return a.cbid_allocator_.allocate()};a.prototype.deallocate_cbid=function(b){a.cbid_allocator_.deallocate(b)};a.prototype.registerCallbacks=function(a,b,d){var c=this,g=this.allocate_cbid();a=new v(g,b,a);0>g&&h.logger.log(this.user_friendly_id()+
".registerCallbacks(). !!!! ran out of cbid !!!!");b||(this.cbs.set(g,d),a.completion_cb=function(a,b){c.unregisterCallbacks(a)},this.hdxms.registerHandler(this.iid,this.oid,d,a));return a};a.prototype.unregisterCallbacks=function(a){this.cbs.has(a)?(this.hdxms.unregisterHandler(this.iid,this.oid,a),this.deallocate_cbid(a),this.cbs["delete"](a)):h.logger.log(this.user_friendly_id()+".unregisterCallbacks(). mid="+this.cbs.get(a)+" cbid="+a+" Cant find callback handler registration!!!!")};a.prototype.clearCallbacks=
function(){h.logger.log(this.user_friendly_id()+".clearCallbacks().");for(var a=0,b=Array.from(this.cbs.keys());a<b.length;a++){var d=b[a];this.hdxms.unregisterHandler(this.iid,this.oid,d);this.deallocate_cbid(d)}this.cbs.clear()};a.prototype.object_id=function(){return this.oid};a.prototype.param0=function(a){var b={};a&&a.params&&(b=a.params[0]);return b};a.prototype.isNullCallback=function(a){return void 0==a||null==a};a.prototype.user_friendly_id=function(){var a=this.constructor.name;0<=this.iid&&
(a=q.class_id_t[this.iid]);return a+"["+this.oid+"]"};a.prototype.isRedirected=function(){return this.hdxms.isRedirected()};a.prototype.isValid=function(){return!(this.proxystate===g.Error||this.proxystate===g.Destroyed)};a.prototype.registerStateChangeNotification=function(a){this.hdxms.registerStateChangeNotification(a)};a.prototype.unregisterStateChangeNotification=function(a){this.hdxms.unregisterStateChangeNotification(a)};a.nextId=0;a.CBID_MAX=65536;a.cbid_allocator_=new z(0,a.CBID_MAX,1);return a}();
a.ProxyObject=b},144:function(b,a,c){var e=this&&this.__extends||function(){var a=function(b,d){a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var f in b)b.hasOwnProperty(f)&&(a[f]=b[f])};return a(b,d)};return function(b,d){function c(){this.constructor=b}a(b,d);b.prototype=null===d?Object.create(d):(c.prototype=d.prototype,new c)}}(),u=this&&this.__awaiter||function(a,b,d,c){function g(a){return a instanceof d?a:new d(function(b){b(a)})}return new (d||
(d=Promise))(function(f,d){function r(a){try{C(c.next(a))}catch(b){d(b)}}function e(a){try{C(c["throw"](a))}catch(b){d(b)}}function C(a){a.done?f(a.value):g(a.value).then(r,e)}C((c=c.apply(a,b||[])).next())})},h=this&&this.__generator||function(a,b){function d(a){return function(b){return c([a,b])}}function c(d){if(f)throw new TypeError("Generator is already executing.");for(;g;)try{if(f=1,r&&(e=d[0]&2?r["return"]:d[0]?r["throw"]||((e=r["return"])&&e.call(r),0):r.next)&&!(e=e.call(r,d[1])).done)return e;
if(r=0,e)d=[d[0]&2,e.value];switch(d[0]){case 0:case 1:e=d;break;case 4:return g.label++,{value:d[1],done:!1};case 5:g.label++;r=d[1];d=[0];continue;case 7:d=g.ops.pop();g.trys.pop();continue;default:if(!(e=g.trys,e=0<e.length&&e[e.length-1])&&(6===d[0]||2===d[0])){g=0;continue}if(3===d[0]&&(!e||d[1]>e[0]&&d[1]<e[3]))g.label=d[1];else if(6===d[0]&&g.label<e[1])g.label=e[1],e=d;else if(e&&g.label<e[2])g.label=e[2],g.ops.push(d);else{e[2]&&g.ops.pop();g.trys.pop();continue}}d=b.call(a,g)}catch(C){d=
[6,C],r=0}finally{f=e=0}if(d[0]&5)throw d[1];return{value:d[0]?d[1]:void 0,done:!0}}var g={label:0,sent:function(){if(e[0]&1)throw e[1];return e[1]},trys:[],ops:[]},f,r,e,k;$jscomp.initSymbol();$jscomp.initSymbol();$jscomp.initSymbolIterator();return k={next:d(0),"throw":d(1),"return":d(2)},"function"===typeof Symbol&&(k[Symbol.iterator]=function(){return this}),k};Object.defineProperty(a,"__esModule",{value:!0});a.NavigatorUserMedia=a.RemoteMediaStreamConstraints=a.RemoteMediaTrackConstraints=a.RemoteMediaTrackConstraintSet=
a.RemoteDevices=a.RemoteDeviceInfo=a.DeviceInfo=a.RemoteStreamEvent=a.RemoteStream=a.RemoteMediaTrack=a.enumeratedDevices=void 0;var d=c(550),w=c(658),q=c(851),n=c(946),k=c(394),v=c(259),z=c(650),g=c(973),l;a.enumeratedDevices=l;var t=function(){return function(a,b){this.type=a;this.target=b}}(),m=function(){function a(){this.is_local_clone=!1;this.clone_id=this.clone_count=0}a.prototype.clone=function(){this.clone_count++;var b=new a;b.is_local_clone=!0;b.clone_id=this.clone_count;return b};a.prototype.synchronize=
function(a){return u(this,void 0,void 0,function(){return h(this,function(b){return this.is_local_clone?[2,a.asyncClone()]:[2,Promise.resolve(a)]})})};return a}(),p=function(a){function b(c,g,r){void 0===r&&(r=w.ProxyMode.Remote);c=a.call(this,c,d.class_id_t.MediaStreamTrack,g,r)||this;c.refCount_=0;c.refCount_++;c.clone_state=new m;return c}e(b,a);b.prototype.dumpInfo=function(){q.logger.log(this.user_friendly_id()+".dumpInfo() [id="+this.id+"] kind="+this.kind+" label="+this.label+" refcount="+
this.refcount+" enabled="+this.enabled+" readyState="+this.readyState)};Object.defineProperty(b.prototype,"refcount",{get:function(){return this.refCount_},enumerable:!1,configurable:!0});b.prototype.addRef=function(){this.refCount_++;q.logger.log(this.user_friendly_id()+".addRef() called. [id="+this.id+"] refcount="+this.refCount_)};Object.defineProperty(b.prototype,"onended",{get:function(){q.logger.log(this.user_friendly_id()+".get_onended() called. [id="+this.id+"]");return this.onended_},set:function(a){var b=
this;q.logger.log(this.user_friendly_id()+".set_onended() called. [id="+this.id+"]");this.onended_=a;this.waitUntilConnected("MediaStreamTrack.onended").then(function(){var c=b.registerCallbacks(!1,b.isNullCallback(a),d.method_id_MediaStreamTrack_t.onended);c.then(function(a){q.logger.log(b.user_friendly_id()+"onended event received!!!");a=new t("ended",b);b.readyState_="ended";b.onended_(a)});return b.remoteInvoke(!0,d.method_id_MediaStreamTrack_t.onended,c.success)})["catch"](function(a){b.logRemoteInvokeError(a,
".onended failed!")})},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"onmute",{get:function(){q.logger.log(this.user_friendly_id()+".get_onmute() called. [id="+this.id+"]");return this.onmute_},set:function(a){var b=this;q.logger.log(this.user_friendly_id()+".set_onmute() called. [id="+this.id+"]");this.onmute_=a;this.waitUntilConnected("MediaStreamTrack.onmute").then(function(){var c=b.registerCallbacks(!1,b.isNullCallback(a),d.method_id_MediaStreamTrack_t.onmute);c.then(function(a){q.logger.log(b.user_friendly_id()+
"onmute event received!!!");a=new t("mute",b);b.muted=!0;b.onmute_(a)});return b.remoteInvoke(!0,d.method_id_MediaStreamTrack_t.onmute,c.success)})["catch"](function(a){b.logRemoteInvokeError(a,".onmute failed!")})},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"onunmute",{get:function(){q.logger.log(this.user_friendly_id()+".get_onunmute() called. [id="+this.id+"]");return this.onunmute_},set:function(a){var b=this;q.logger.log(this.user_friendly_id()+".set_onunmute() called. [id="+
this.id+"]");this.onunmute_=a;this.waitUntilConnected("MediaStreamTrack.onunmute").then(function(){var c=b.registerCallbacks(!1,b.isNullCallback(a),d.method_id_MediaStreamTrack_t.onunmute);c.then(function(a){q.logger.log("onunmute event received!!!");a=new t("unmute",b);b.muted=!1;b.onunmute_(a)});return b.remoteInvoke(!0,d.method_id_MediaStreamTrack_t.onunmute,c.success)})["catch"](function(a){b.logRemoteInvokeError(a,".onunmute failed!")})},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,
"onstop",{set:function(a){this.onstop_=a},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"enabled",{get:function(){q.logger.log(this.user_friendly_id()+".get_enabled() called. [id="+this.id+", value="+this.enabled_+"]");return this.enabled_},set:function(a){q.logger.log(this.user_friendly_id()+".set_enabled() called. [id="+this.id+", value="+a+"]");this.enabled_=a;this.remoteInvoke(!0,d.method_id_MediaStreamTrack_t.enabled,a)},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,
"readyState",{get:function(){q.logger.log(this.user_friendly_id()+".get_readyState() called. [id="+this.id+"]");return this.readyState_},enumerable:!1,configurable:!0});b.prototype.asyncClone=function(){return u(this,void 0,void 0,function(){var a,c,g;return h(this,function(f){switch(f.label){case 0:return[4,this.waitUntilConnected("RemoteMediaTrack.asyncClone")];case 1:return f.sent(),[4,this.remoteInvoke(!1,d.method_id_MediaStreamTrack_t.clone)];case 2:return a=f.sent(),c=this.param0(a),g=new b(this,
c.oid),[2,g.syncBarrier()]}})})};b.prototype.deepClone=function(a){var c=this;q.logger.log(this.user_friendly_id()+".deepClone() called. [id="+this.id+"]");if(z.RemoteSession.isFeatureTrackCloneWithIdSupported()){var g=new b(null,0,w.ProxyMode.Pseudo),f=new m;g.id=a?a:this.id+"."+f.clone_id.toString();g.label=this.label;g.kind=this.kind;g.enabled_=this.enabled_;g.muted=this.muted;g.readyState_=this.readyState_;g.trackSettings_=this.trackSettings_;g.clone_state=f;g.constraints_=this.constraints_;g.capabilities_=
this.capabilities_;g.onended=this.onended;g.onmute=this.onmute;g.onunmute=this.onunmute;g.onstop=this.onstop;this.waitUntilConnected("RemoteMediaTrack.deepClone").then(function(){return c.remoteInvoke(!1,d.method_id_MediaStreamTrack_t.clone,g.id)}).then(function(a){q.logger.log(c.user_friendly_id()+".deepClone() success with oid: "+c.param0(a).oid);g.bind(null,c.param0(a).oid);g.syncBarrier().then(function(){q.logger.log(c.user_friendly_id()+"track.syncBarrier(): success")})["catch"](function(a){c.logRemoteInvokeError(a,
"track.syncBarrier() failed!")})})["catch"](function(a){c.logRemoteInvokeError(a,".deepClone() failed!")});return g}q.logger.log(this.user_friendly_id()+".deepClone() is not supported!")};b.prototype.localClone=function(){q.logger.log(this.user_friendly_id()+".localClone() called. [id="+this.id+"]");var a=this.clone_state.clone(),d=new b(this,this.object_id());d.id=this.id+"."+a.clone_id.toString();d.label=this.label;d.kind=this.kind;d.enabled_=this.enabled_;d.muted=this.muted;d.readyState_=this.readyState_;
d.trackSettings_=this.trackSettings_;d.clone_state=a;d.constraints_=this.constraints_;d.capabilities_=this.capabilities_;return d};b.prototype.clone=function(){q.logger.log(this.user_friendly_id()+".clone() called. [id="+this.id+"]");return z.RemoteSession.isFeatureTrackCloneWithIdSupported()?this.deepClone():this.localClone()};b.prototype.stop=function(){var a=this;q.logger.log(this.user_friendly_id()+".stop() called. [id="+this.id+"] refcount="+this.refCount_);this.readyState_="ended";if(0<this.refCount_&&
(this.refCount_--,0===this.refCount_&&(q.logger.log(this.user_friendly_id()+".stop() called. [id="+this.id+"] remote invoking..."),this.remoteInvoke(!1,d.method_id_MediaStreamTrack_t.stop)["catch"](function(b){a.logRemoteInvokeError(b,".stop failed!")}),"video"==this.kind&&"remoteapp-track"==this.label&&g.ScreenSharing.screenSharingInstance().stopAppshare(),null!==this.onstop_&&void 0!=this.onstop_)))this.onstop_()};b.prototype.getCapabilities=function(){return this.capabilities_};b.prototype.getConstraints=
function(){return this.constraints_};b.prototype.getSettings=function(){return"audio"==this.kind?function(a){return{deviceId:a.deviceId,echoCancellation:a.echoCancellation}}(this.trackSettings_):function(a){return{aspectRatio:a.aspectRatio,deviceId:a.deviceId,frameRate:a.frameRate,height:a.height,width:a.width}}(this.trackSettings_)};b.prototype.getChannelCount=function(){return 2};b.prototype.applyConstraints=function(a){var b=this;q.logger.log(this.user_friendly_id()+".applyConstraints() called.");
return new Promise(function(c,f){b.waitUntilConnected("MediaStreamTrack.applyConstraints").then(function(){return Promise.all([b.remoteInvoke(!1,d.method_id_MediaStreamTrack_t.applyConstraints,a),b.syncBarrier()])})["catch"](function(a){b.logRemoteInvokeError(a,"applyConstraints failed!");f({name:"OverconstrainedError",message:"Failed to apply constraints."})}).then(function(){b.constraints_=a;return b.remoteInvoke(!1,d.method_id_MediaStreamTrack_t.getConstraints)}).then(function(a){b.constraints_=
b.param0(a)})["catch"](function(a){b.logRemoteInvokeError(a,".syncBarrier() remote client does not support getConstraints method. Ignore it")}).then(function(){return c()})})};b.convertReadyState=function(a){return 0==a?"live":"ended"};b.prototype.syncBarrier=function(){var a=this;q.logger.log(this.user_friendly_id()+".syncBarrier() called.");return new Promise(function(c,g){a.syncBarrierDeep(c,g)&&a.waitUntilConnected("MediaStreamTrack.syncBarrier").then(function(){return Promise.all([a.remoteInvoke(!1,
d.method_id_MediaStreamTrack_t.kind,""),a.remoteInvoke(!1,d.method_id_MediaStreamTrack_t.id,""),a.remoteInvoke(!1,d.method_id_MediaStreamTrack_t.label,""),a.remoteInvoke(!1,d.method_id_MediaStreamTrack_t.enabled,!1),a.remoteInvoke(!1,d.method_id_MediaStreamTrack_t.muted,!1),a.remoteInvoke(!1,d.method_id_MediaStreamTrack_t.readyState,0),a.remoteInvoke(!1,d.method_id_MediaStreamTrack_t.getSettings),a.remoteInvoke(!1,d.method_id_MediaStreamTrack_t.getCapabilities)])}).then(function(f){var d=0;f=f.map(function(b){return a.param0(b)});
a.kind=f[0];a.id=f[1];a.label=f[2];a.enabled_=f[3];a.muted=f[4];d=f[5];a.trackSettings_=f[6];a.capabilities_=f[7];a.readyState_=b.convertReadyState(d);a.syncBarrierResolve(a)})["catch"](function(b){b=a.logRemoteInvokeError(b,".syncBarrier() failed!");a.syncBarrierReject(b)})})};b.prototype.dispose=function(){q.logger.log(this.user_friendly_id()+".dispose() called. [id="+this.id+"]");this.stop();0===this.refCount_&&this.release()};return b}(w.ProxyObject);a.RemoteMediaTrack=p;var y=function(){return function(){}}(),
x=function(a){function b(c,g,r,f,e){void 0===r&&(r=w.ProxyMode.Local);void 0===f&&(f=[]);var k=this;q.logger.log("RemoteStream.ctor() streamid="+e+" num tracks="+f.length);r==w.ProxyMode.Remote||e||(e=b.uuidv4());k=e&&z.RemoteSession.isFeatureTrackCloneWithIdSupported()?a.call(this,c,d.class_id_t.MediaStream,g,r,null,[f],e)||this:a.call(this,c,d.class_id_t.MediaStream,g,r,null,[f])||this;k.id=e;k.tracks_=f;k.clone_state=new m;k.active_=!0;k.tracks_.forEach(function(a){a.setParent(k)});return k}e(b,
a);b.uuidv4=function(){return"10000000-1000-4000-8000-100000000000".replace(/[018]/g,function(a){return(a^crypto.getRandomValues(new Uint8Array(1))[0]&15>>a/4).toString(16)})};b.prototype.dumpInfo=function(){q.logger.log(this.user_friendly_id()+".dumpInfo() [id="+this.id+"] active="+this.active_+" num tracks="+this.tracks_.length);for(var a=0,b=this.tracks_;a<b.length;a++){var d=b[a];d&&d.dumpInfo()}};b.prototype.toggleAudio=function(a){q.logger.log(this.user_friendly_id()+".toggleAudio() called: "+
a);for(var b=0,d=this.getAudioTracks();b<d.length;b++)d[b].enabled=a};b.prototype.toJSON=function(){var a=new y;a.id=this.id;a.active=this.active_;a.oid=this.object_id();return"RemoteStream:"+JSON.stringify(a)};Object.defineProperty(b.prototype,"active",{get:function(){var a=this;q.logger.log(this.user_friendly_id()+".get active() called. [id="+this.id+"] active="+this.active_);n.getRedirector().getFeatureValue(d.FEATURE_ms_teams_stream_active_status)?this.waitUntilConnected("MediaStream.active").then(function(){q.logger.log(a.user_friendly_id()+
".get active() remote invoking");return a.remoteInvoke(!1,d.method_id_MediaStream_t.active,!1)}).then(function(b){a.active_=a.param0(b);q.logger.log(a.user_friendly_id()+".get active() success, active="+a.active_)})["catch"](function(b){a.active_=!0;a.logRemoteInvokeError(b,".get active() failed! active="+a.active_)}):this.active_=!0;return this.active_},enumerable:!1,configurable:!0});b.prototype.getAudioTracks=function(){q.logger.log(this.user_friendly_id()+".getAudioTracks() called. [id="+this.id+
"]");for(var a=[],b=0,d=this.tracks_;b<d.length;b++){var f=d[b];"audio"==f.kind&&a.push(f)}return a};b.prototype.getVideoTracks=function(){q.logger.log(this.user_friendly_id()+".getVideoTracks() called. [id="+this.id+"]");for(var a=[],b=0,d=this.tracks_;b<d.length;b++){var f=d[b];"video"==f.kind&&a.push(f)}return a};b.prototype.getTracks=function(){q.logger.log(this.user_friendly_id()+".getTracks() called. [id="+this.id+"]");return this.tracks_};b.prototype.getTrackById=function(a){q.logger.log(this.user_friendly_id()+
".getTrackById() called. [id="+this.id+"]");for(var b=0,d=this.tracks_;b<d.length;b++){var f=d[b];if(f.id==a)return f}};b.prototype.addTrack=function(a){var b=this;q.logger.log(this.user_friendly_id()+".addTrack() called. [id="+this.id+"]");this.tracks_.push(a);a&&a.dumpInfo();var c=this;this.waitUntilConnected("MediaStream.addTrack").then(function(){q.logger.log(c.user_friendly_id()+".addTrack remote invoking");return c.remoteInvokeEx(!1,d.method_id_MediaStream_t.addTrack,[a])}).then(function(){q.logger.log(c.user_friendly_id()+
".addTrack success")})["catch"](function(a){b.logRemoteInvokeError(a,".addTrack failed!")})};b.prototype.removeTrack=function(a){var b=this;q.logger.log(this.user_friendly_id()+".removeTrack() called. [id="+this.id+"]");var c=this.tracks_.indexOf(a);this.tracks_.splice(c,1);var f=this;this.waitUntilConnected("MediaStream.removeTrack").then(function(){q.logger.log(f.user_friendly_id()+".removeTrack remote invoking");return f.remoteInvokeEx(!1,d.method_id_MediaStream_t.removeTrack,[a])}).then(function(){q.logger.log(f.user_friendly_id()+
".removeTrack success")})["catch"](function(a){b.logRemoteInvokeError(a,".removeTrack failed!")})};b.prototype.asyncClone=function(){return u(this,void 0,void 0,function(){var a,c,g;return h(this,function(f){switch(f.label){case 0:return q.logger.log(this.user_friendly_id()+".asyncClone() called. [id="+this.id+"]"),[4,this.waitUntilConnected("asyncClone")];case 1:return f.sent(),[4,this.remoteInvoke(!1,d.method_id_MediaStream_t.clone)];case 2:return a=f.sent(),q.logger.log(a),c=this.param0(a),g=new b(this,
c.oid,w.ProxyMode.Remote),[2,g.syncBarrier()]}})})};b.prototype.deepClone=function(a){var d=this;q.logger.log(this.user_friendly_id()+".deepClone() called. [id="+this.id+"]");if(z.RemoteSession.isFeatureTrackCloneWithIdSupported()){var c=[];this.tracks_.forEach(function(a){c.push(a.deepClone())});var f=new m;a=a?a:this.id+"."+f.clone_id.toString();var g=new b(null,0,w.ProxyMode.Local,c,a);g.id=a;g.active_=this.active_;g.clone_state=f;g.tracks_=c;g.waitUntilConnected("RemoteStream.deepClone").then(function(){g.syncBarrier().then(function(){q.logger.log(d.user_friendly_id()+
"stream.syncBarrier(): success")})["catch"](function(a){d.logRemoteInvokeError(a,"stream.syncBarrier() failed!")})})["catch"](function(a){d.logRemoteInvokeError(a,".deepClone() failed!")});return g}q.logger.log(this.user_friendly_id()+".deepClone() is not supported!")};b.prototype.localClone=function(){q.logger.log(this.user_friendly_id()+".localClone() called. [id="+this.id+"]");var a=this.clone_state.clone(),d=new b(this,this.object_id(),w.ProxyMode.Remote);d.id=this.id+"."+a.clone_id.toString();
d.active_=this.active_;this.tracks_.forEach(function(a){a.addRef()});d.tracks_=this.tracks_;d.clone_state=a;return d};b.prototype.clone=function(){q.logger.log(this.user_friendly_id()+".clone() called. [id="+this.id+"]");return z.RemoteSession.isFeatureTrackCloneWithIdSupported()?this.deepClone():this.localClone()};b.prototype.syncBarrier=function(){var a=this;q.logger.log(this.user_friendly_id()+".syncBarrier() called. [id="+this.id+"]");return new Promise(function(b,c){a.syncBarrierDeep(b,c)&&a.waitUntilConnected("MediaStream.syncBarrier").then(function(){var b=
[];b.push(a.remoteInvoke(!1,d.method_id_MediaStream_t.id,""));n.getRedirector().getFeatureValue(d.FEATURE_ms_teams_stream_active_status)&&b.push(a.remoteInvoke(!1,d.method_id_MediaStream_t.active,!0));b.push(a.remoteInvoke(!1,d.method_id_MediaStream_t.getTracks));return Promise.all(b)}).then(function(b){q.logger.log(a.user_friendly_id()+".syncBarrier() remote success");var c;n.getRedirector().getFeatureValue(d.FEATURE_ms_teams_stream_active_status)?(b=b.map(function(b){return a.param0(b)}),a.id=b[0],
a.active_=b[1],c=b[2]):(b=b.map(function(b){return a.param0(b)}),a.id=b[0],c=b[1],a.active_=!0);var g=[];b=function(b){var f=a.tracks_.find(function(a){return a.object_id()===b.oid});void 0===f&&(q.logger.log(a.user_friendly_id()+" adding a RemoteMediaTrack with oid:"+b.oid),f=new p(a,b.oid));g.push(f.syncBarrier())};for(var r=0;r<c.length;r++)b(c[r]);return Promise.all(g)}).then(function(b){a.tracks_=[];b.forEach(function(b){d.BUILD_TYPE_SDK||(b.onstop=function(){var b=!0;a.tracks_.forEach(function(a){"ended"!=
a.readyState&&(b=!1)});b&&a.release()});a.tracks_.push(b)});a.syncBarrierResolve(a)})["catch"](function(b){a.logRemoteInvokeError(b,".syncBarrier failed!");a.syncBarrierReject()})})};b.prototype.dispose=function(){q.logger.log(this.user_friendly_id()+".dispose() called. [id="+this.id+"]");this.tracks_.forEach(function(a){a.dispose()});this.release()};return b}(w.ProxyObject);a.RemoteStream=x;b=function(a){function b(c,g){return a.call(this,c,d.class_id_t.MediaStreamEvent,g,w.ProxyMode.Remote)||this}
e(b,a);b.prototype.syncBarrier=function(){var a=this;q.logger.log(this.user_friendly_id()+".syncBarrier() called.");return new Promise(function(b,c){a.syncBarrierDeep(b,c)&&a.waitUntilConnected("MediaStreamEvent.syncBarrier").then(function(){return a.remoteInvoke(!1,d.method_id_MediaStreamEvent_t.stream,{oid:0})}).then(function(b){return(new x(a,b.params[0].oid,w.ProxyMode.Remote)).syncBarrier()}).then(function(b){a.stream=b;a.syncBarrierResolve(a)})["catch"](function(b){b=a.logRemoteInvokeError(b,
".syncBarrier() failed!");a.syncBarrierReject(b)})})};return b}(w.ProxyObject);a.RemoteStreamEvent=b;var r=function(){return function(a,b,d,c){this.deviceId=a;this.groupId=b;this.kind=d;this.label=c}}();a.DeviceInfo=r;var A=function(a){function b(c){return a.call(this,null,d.class_id_t.MediaDeviceInfo,c,w.ProxyMode.Remote)||this}e(b,a);b.convertKind=function(a){return 0==a?"audioinput":1==a?"audiooutput":"videoinput"};b.prototype.syncBarrier=function(){var a=this;q.logger.log(this.user_friendly_id()+
".syncBarrier() called.");return new Promise(function(c,g){a.syncBarrierDeep(c,g)&&a.waitUntilConnected("RemoteDeviceInfo.syncBarrier").then(function(){return Promise.all([a.remoteInvoke(!1,d.method_id_MediaDeviceInfo_t.deviceId,""),a.remoteInvoke(!1,d.method_id_MediaDeviceInfo_t.kind,0),a.remoteInvoke(!1,d.method_id_MediaDeviceInfo_t.label,""),a.remoteInvoke(!1,d.method_id_MediaDeviceInfo_t.groupId,"")])}).then(function(f){a.kind=b.convertKind(a.param0(f.splice(1,1)[0]));f=f.map(function(b){return a.param0(b)});
a.deviceId=f[0];a.label=f[1];a.groupId=f[2];a.syncBarrierResolve(a)})["catch"](function(b){b=a.logRemoteInvokeError(b,".syncBarrier() failed!");a.syncBarrierReject(b)})})};return b}(w.ProxyObject);a.RemoteDeviceInfo=A;b=function(b){function c(){var a=b.call(this,null,d.class_id_t.MediaDevices,0,w.ProxyMode.Local,function(){a.setDeviceChangeCallback()})||this;a.devices_=[];a.enumerateMarker="enumerateDevicesPrivate";a.enumerateRemoteMarker="enumeratedDevicesPrivate-Remote";a.shareSystemAudio_=!1;a.pendingEnumerateDevice_=
[];a.panelid_=-1;return a}e(c,b);Object.defineProperty(c.prototype,"panelid",{set:function(a){this.panelid_=a},enumerable:!1,configurable:!0});c.prototype.clearPanelId=function(){this.panelid_=-1};c.prototype.enumerateDevices=function(){var a=this;return 0<this.devices_.length&&0==this.pendingEnumerateDevice_.length?new Promise(function(b,d){q.logger.log(a.user_friendly_id()+".enumerateDevices: returning cached devices");b(a.devices_)}):this.enumerateDevicesPrivate(!1)};c.prototype.enumerateDevicesPrivate=
function(a){return n.getRedirector().getFeatureValue(d.FEATURE_ms_teams_enumerate_devices_v2)?this.enumerateDevicesPrivateV2(a):this.enumerateDevicesPrivateV1(a)};c.prototype.postEnumerateDevicesResult=function(){for(var a=!0,b=0,d=0,f=this.pendingEnumerateDevice_;d<f.length;d++){var c=f[d];if(0==a&&c.name==this.enumerateRemoteMarker)break;c.postWithResult(!0,this.devices_);b++;a=!1}0<b&&this.pendingEnumerateDevice_.splice(0,b)};c.prototype.enumerateDevicesPrivateV2=function(b){var c=this;q.logger.log(this.user_friendly_id()+
".enumerateDevicesPrivateV2() called. refresh:"+b+" pending:"+this.pendingEnumerateDevice_.length);return new Promise(function(g,f){1==b||0==c.pendingEnumerateDevice_.length?(c.pendingEnumerateDevice_.push(new w.deferred_action(g,f,c.enumerateRemoteMarker)),c.waitUntilConnected("RemoteDevices.enumerateDevicesPrivateV2").then(function(){q.logger.log(c.user_friendly_id()+".enumerateDevicesPrivateV2() remote invoking...");return c.remoteInvoke(!1,d.method_id_MediaDevices_t.enumerateDevicesV2)}).then(function(b){var f=
[];b.params[0].forEach(function(a){a=new r(a.deviceId,a.groupId,A.convertKind(a.kind),a.label);f.push(a)});c.devices_=f;a.enumeratedDevices=l=f;q.logger.log(c.user_friendly_id()+".enumerateDevicesPrivateV2: resolving enumerated devices: "+JSON.stringify(c.devices_));c.postEnumerateDevicesResult()})["catch"](function(b){c.devices_=[];a.enumeratedDevices=l=[];c.logRemoteInvokeError(b,".enumerateDevicesPrivateV2() failed, resolving with empty list.");c.postEnumerateDevicesResult()})):(c.pendingEnumerateDevice_.push(new w.deferred_action(g,
f,c.enumerateMarker)),q.logger.log(c.user_friendly_id()+".enumerateDevicesPrivateV2() not remoting this call..."))})};c.prototype.enumerateDevicesPrivateV1=function(b){var c=this;q.logger.log(this.user_friendly_id()+".enumerateDevicesPrivateV1() called. refresh:"+b+" pending:"+this.pendingEnumerateDevice_.length);return new Promise(function(g,f){1==b||0==c.pendingEnumerateDevice_.length?(c.pendingEnumerateDevice_.push(new w.deferred_action(g,f,c.enumerateRemoteMarker)),c.waitUntilConnected("RemoteDevices.enumerateDevicesPrivateV1").then(function(){q.logger.log(c.user_friendly_id()+
".enumerateDevicesPrivateV1() remote invoking...");return c.remoteInvoke(!1,d.method_id_MediaDevices_t.enumerateDevices)}).then(function(a){var b=[];a.params[0].forEach(function(a){a=new A(a.oid);b.push(a.syncBarrier())});return Promise.all(b)}).then(function(b){var f=[];b.forEach(function(a){var b=new r(a.deviceId,a.groupId,a.kind,a.label);f.push(b);a.release()});c.devices_=f;a.enumeratedDevices=l=f;q.logger.log(c.user_friendly_id()+".enumerateDevicesPrivateV1: resolving enumerated devices: "+JSON.stringify(c.devices_));
c.postEnumerateDevicesResult()})["catch"](function(b){a.enumeratedDevices=l=[];c.devices_=[];c.logRemoteInvokeError(b,".enumerateDevicesPrivateV1() failed, resolving with empty list.");c.postEnumerateDevicesResult()})):(c.pendingEnumerateDevice_.push(new w.deferred_action(g,f,c.enumerateMarker)),q.logger.log(c.user_friendly_id()+".enumerateDevicesPrivateV1() not remoting this call..."))})};c.prototype.getDisplayMedia=function(a){var b=this;return new Promise(function(c,f){b.waitUntilConnected("RemoteDevices.getDisplayMedia").then(function(){return g.ScreenSharing.screenSharingInstance().setActiveSource(b.panelid_,
z.RemoteSession.isFeaturAppshareSupported())}).then(function(f){void 0!==a.video&&null!==a.video&&void 0!==f&&(a.video.deviceId=f);n.getRedirector().getFeatureValue(d.FEATURE_ms_teams_share_system_audio)&&(void 0!==a.audio&&"boolean"!==typeof a.audio?q.logger.log("Non-boolean audio constraints"):a.audio=a.audio||b.shareSystemAudio_);f=b.prepareDisplayConstraints(a);f=J.toRemoteMediaStreamConstraints(f,!0);return b.remoteInvoke(!1,d.method_id_MediaDevices_t.getDisplayMedia,f)}).then(function(a){return(new x(null,
a.params[0].oid,w.ProxyMode.Remote)).syncBarrier()}).then(function(a){c(a)})["catch"](function(a){g.ScreenSharing.screenSharingInstance().isAppshareActive()&&g.ScreenSharing.screenSharingInstance().stopAppshare();a=b.logRemoteInvokeError(a,".getDisplayMedia() failed!");f(a)})})};c.prototype.setDeviceChangeCallback=function(){var a=this;q.logger.log(this.user_friendly_id()+".set_DeviceChangeCallback() called.");this.waitUntilConnected("MediaDevices.ondevicechange").then(function(){var b=a.registerCallbacks(!1,
!1,d.method_id_MediaDevices_t.ondevicechange);b.then(function(){q.logger.log(a.user_friendly_id()+".ondevicechange(): callback received!!!");a.enumerateDevicesPrivate(!0).then(function(){navigator.mediaDevices.dispatchEvent(new CustomEvent("devicechange"))})["catch"](function(){navigator.mediaDevices.dispatchEvent(new CustomEvent("devicechange"))})});return a.remoteInvoke(!0,d.method_id_MediaDevices_t.ondevicechange,b.success)})["catch"](function(b){a.logRemoteInvokeError(b,".set_ondevicechange() failed!")})};
c.prototype.prepareDisplayConstraints=function(a){if(n.getRedirector().getFeatureValue(d.FEATURE_ms_teams_common_media_constraints))return a;var b={frameRate:15,width:{max:1920},height:{max:1080}};if(void 0!==a.video&&null!==a.video){var c=a.video;void 0!==c.frameRate&&void 0!==c.width&&void 0!==c.height&&(b.frameRate=c.frameRate,b.width.max=c.width.max||c.width,b.height.max=c.height.max||c.height)}return a.audio?{video:b,audio:a.audio}:{video:b}};return c}(w.ProxyObject);a.RemoteDevices=b;var M=
function(){function a(){}a.toRemoteMediaTrackConstraintSet=function(a){var b=void 0;v.Util.hasValue(a)&&(b={},v.Util.hasValue(a.width)&&(b.width=a.width),v.Util.hasValue(a.height)&&(b.height=a.height),v.Util.hasValue(a.aspectRatio)&&(b.aspectRatio=a.aspectRatio),v.Util.hasValue(a.frameRate)&&(b.frameRate=a.frameRate),v.Util.hasValue(a.facingMode)&&(b.facingMode=a.facingMode),v.Util.hasValue(a.sampleRate)&&(b.sampleRate=a.sampleRate),v.Util.hasValue(a.sampleSize)&&(b.sampleSize=a.sampleSize),v.Util.hasValue(a.volume)&&
(b.volume=a.volume),v.Util.hasValue(a.echoCancellation)&&(b.echoCancellation=a.echoCancellation),v.Util.hasValue(a.autoGainControl)&&(b.autoGainControl=a.autoGainControl),v.Util.hasValue(a.noiseSuppression)&&(b.noiseSuppression=a.noiseSuppression),v.Util.hasValue(a.latency)&&(b.latency=a.latency),v.Util.hasValue(a.channelCount)&&(b.channelCount=a.channelCount),v.Util.hasValue(a.deviceId)&&(b.deviceId=a.deviceId),v.Util.hasValue(a.groupId)&&(b.groupId=a.groupId),v.Util.hasValue(a.maxFrameRate)&&(b.maxFrameRate=
a.maxFrameRate),v.Util.hasValue(a.maxHeight)&&(b.maxHeight=a.maxHeight),v.Util.hasValue(a.maxWidth)&&(b.maxWidth=a.maxWidth),v.Util.hasValue(a.minHeight)&&(b.minHeight=a.minHeight),v.Util.hasValue(a.minWidth)&&(b.minWidth=a.minWidth),v.Util.hasValue(a.sourceId)&&(b.sourceId=a.sourceId));return b};return a}();a.RemoteMediaTrackConstraintSet=M;var F=function(a){function b(){return null!==a&&a.apply(this,arguments)||this}e(b,a);b.defMandatory=function(a){var b=a;v.Util.hasValue(a)?(v.Util.hasValue(a.maxFrameRate)||
(b.maxFrameRate=30),v.Util.hasValue(a.minWidth)||(b.minWidth=360),v.Util.hasValue(a.maxWidth)||(b.maxWidth=1920),v.Util.hasValue(a.minHeight)||(b.minHeight=180),v.Util.hasValue(a.maxHeight)||(b.maxHeight=1080)):b={maxFrameRate:30,minWidth:360,maxWidth:1920,minHeight:180,maxHeight:1080};return b};b.toRemoteMediaTrackConstraints=function(a){var b=void 0;v.Util.hasValue(a)&&(b=M.toRemoteMediaTrackConstraintSet(a),b.advanced=[],v.Util.hasValue(a.advanced)&&a.advanced.forEach(function(a){a=M.toRemoteMediaTrackConstraintSet(a);
b.advanced.push(a)}),v.Util.hasValue(a.mandatory)&&(b.mandatory="boolean"!=typeof a.mandatory?M.toRemoteMediaTrackConstraintSet(a.mandatory):a.mandatory));return b};return b}(M);a.RemoteMediaTrackConstraints=F;var J=function(){function a(){}a.getDefaultAudioDeviceId=function(){if(void 0!==l){var a=l.find(function(a){return"audioinput"===a.kind&&"default"===a.deviceId});if(void 0!==a)return a.deviceId}return""};a.getDefaultVideoDeviceId=function(){if(void 0!==l){var a=l.find(function(a){return"videoinput"===
a.kind});if(void 0!==a)return a.deviceId}return""};a.toRemoteMediaStreamConstraints=function(b,c){void 0===c&&(c=!1);q.logger.log("RemoteMediaStreamConstraints.toRemoteMediaStreamConstraints() in constraints:"+JSON.stringify(b));var g={};v.Util.hasValue(b)&&(v.Util.hasValue(b.audio)&&("boolean"!=typeof b.audio?(g.audio=F.toRemoteMediaTrackConstraints(b.audio),0!=Object.keys(g.audio).length&&v.Util.hasValue(g.audio)||(g.audio={dummy:1}),d.BUILD_TYPE_SDK&&0==c&&a.isConstraintsAudioDeviceIdEmpty(b)&&
(g.audio.deviceId=a.getDefaultAudioDeviceId(),q.logger.log("RemoteMediaStreamConstraints.toRemoteMediaStreamConstraints() set default audio deviceId:'"+g.audio.deviceId+"'"))):g.audio=b.audio),v.Util.hasValue(b.peerIdentity)&&(g.peerIdentity=b.peerIdentity),v.Util.hasValue(b.video)&&("boolean"!=typeof b.video?(g.video=F.toRemoteMediaTrackConstraints(b.video),0==c&&"boolean"!=typeof g.video.mandatory&&(g.video.mandatory=F.defMandatory(g.video.mandatory),d.BUILD_TYPE_SDK&&a.isConstraintsVideoSourceIdEmpty(b)&&
(g.video.mandatory.sourceId=a.getDefaultVideoDeviceId(),q.logger.log("RemoteMediaStreamConstraints.toRemoteMediaStreamConstraints() set default video sourceId:'"+g.video.mandatory.sourceId+"'")))):(g.video=b.video,1==b.video&&0==c&&d.BUILD_TYPE_SDK&&a.isConstraintsVideoSourceIdEmpty(b)&&(g.video={},g.video.mandatory=F.defMandatory(void 0),g.video.mandatory.sourceId=a.getDefaultVideoDeviceId(),q.logger.log("RemoteMediaStreamConstraints.toRemoteMediaStreamConstraints() set default video sourceId:'"+
g.video.mandatory.sourceId+"'")))));q.logger.log("RemoteMediaStreamConstraints.toRemoteMediaStreamConstraints() out constraints:"+JSON.stringify(g));return g};a.isConstraintsAudioDeviceIdEmpty=function(a){var b=!1;v.Util.hasValue(a)&&v.Util.hasValue(a.audio)&&("boolean"==typeof a.audio?1==a.audio&&(b=!0):(a=a.audio,!a||!1!==v.Util.hasValue(a.deviceId)&&""!==a.deviceId||(b=!0)));return b};a.isConstraintsVideoSourceIdEmpty=function(a){var b=!1;if(v.Util.hasValue(a)&&v.Util.hasValue(a.video))if("boolean"==
typeof a.video)1==a.video&&(b=!0);else if(a=a.video)(a=a.mandatory)&&!1!==v.Util.hasValue(a.sourceId)&&""!==a.sourceId||(b=!0);return b};return a}();a.RemoteMediaStreamConstraints=J;var G=function(){function a(){this.video=this.audio=a.EmptyCapabilities}a.EmptyCapabilities={codecs:[],headerExtensions:[]};return a}();b=function(a){function b(){return a.call(this,null,d.class_id_t.NavigatorUserMedia,0,w.ProxyMode.Local)||this}e(b,a);b.getCapabilities=function(a){q.logger.log("NavigatorUserMedia.getCapabilities for type="+
a+" capabilities="+JSON.stringify(b.capabilities[a]));return b.capabilities[a]};b.resetCapabilities=function(){b.capabilities=new G};b.prototype.getCapabilities=function(){var a=this;q.logger.log(this.user_friendly_id()+".getCapabilities...");return new Promise(function(c,g){a.waitUntilConnected("NavigatorUserMedia.getCapabilities").then(function(){return Promise.all([a.remoteInvoke(!1,d.method_id_NavigatorUserMedia_t.getCapabilities,"audio"),a.remoteInvoke(!1,d.method_id_NavigatorUserMedia_t.getCapabilities,
"video")])}).then(function(f){b.capabilities.audio=a.param0(f[0]);b.capabilities.video=a.param0(f[1]);q.logger.log(a.user_friendly_id()+".getCapabilities capabilities="+JSON.stringify(b.capabilities));c(b.capabilities)})["catch"](function(b){g(a.logRemoteInvokeError(b,".getCapabilities failed!"))})})};b.prototype.setCodecCapabilities=function(a){var b=this;q.logger.log(this.user_friendly_id()+".setCodecCapabilities : set codecCapabilities to "+JSON.stringify(a));return new Promise(function(c,f){b.waitUntilConnected("NavigatorUserMedia.setCodecCapabilities").then(function(){return b.remoteInvoke(!1,
d.method_id_NavigatorUserMedia_t.setCodecCapabilities,a)}).then(function(){q.logger.log(b.user_friendly_id()+".setCodecCapabilities() success.");c(!0);b.getCapabilities()})["catch"](function(a){a=b.logRemoteInvokeError(a,".setCodecCapabilities() failed!");f(a)})})};b.prototype.webkitGetUserMedia=function(a,b,d){return this.getUserMedia(a,b,d)};b.prototype.LogTelemetryDevice_=function(a){try{if("undefined"!==typeof a.audio){var b=a.audio.deviceId,d;l.forEach(function(a){b==a.deviceId&&(d=a.label)});
q.logger.log(d);this.SendTelemetryData(k.tel_key_AudioDeviceUsed,d,0)}if("undefined"!==typeof a.video){var f=a.video.mandatory,c;f&&l.forEach(function(a){f.sourceId==a.deviceId&&(c=a.label)});q.logger.log(c);this.SendTelemetryData(k.tel_key_VideoDeviceUsed,c,0)}}catch(g){q.logger.log(g)}};b.prototype.getUserMedia=function(a,b,d){q.logger.log(this.user_friendly_id()+".getUserMedia() called: "+JSON.stringify(a));return b&&d?this.getUserMedia_v1(a,b,d):this.getUserMedia_v2(a)};b.prototype.getUserMedia_v2=
function(a){var b=this;q.logger.log(this.user_friendly_id()+".getUserMedia_v2() called: "+JSON.stringify(a));return new Promise(function(d,f){b.getUserMediaPrivate(a,function(a){q.logger.log(b.user_friendly_id()+"getUserMedia_v2: resolving stream");d(a)},function(a){q.logger.log(b.user_friendly_id()+"getUserMedia_v2: rejecting stream");f(a)})})};b.prototype.getUserMedia_v1=function(a,b,d){q.logger.log(this.user_friendly_id()+".getUserMedia_v1() called: "+JSON.stringify(a));return this.getUserMediaPrivate(a,
b,d)};b.prototype.getUserMediaPrivate=function(a,b,c){var f=this;this.waitUntilConnected("NavigatorUserMedia.getUserMediaPrivate").then(function(){var b=f.registerCallbacks(!0,!1,d.method_id_NavigatorUserMedia_t.getUserMedia),c=J.toRemoteMediaStreamConstraints(a);f.remoteInvoke(!1,d.method_id_NavigatorUserMedia_t.getUserMedia,c,b.success,b.fail);return b.prom()}).then(function(a){q.logger.log(f.user_friendly_id()+".getUserMediaPrivate: received success callback!");return(new x(null,f.param0(a).oid,
w.ProxyMode.Remote)).syncBarrier()}).then(function(d){q.logger.log(f.user_friendly_id()+".getUserMediaPrivate: MediaStream ready to deliver",JSON.stringify(d));0==d.getTracks().length?(q.logger.log(f.user_friendly_id()+".getUserMediaPrivate: reporting no tracks as error."),c({constraintName:"",name:"OverconstrainedError",message:""})):(f.LogTelemetryDevice_(a),b(d))})["catch"](function(a){f.logRemoteInvokeError(a,".getUserMediaPrivate() failed!");n.getRedirector().getFeatureValue(d.FEATURE_ms_teams_1912)?
f.param0&&a?c(f.param0(a)):c({constraintName:"",name:"OverconstrainedError",message:""}):c({constraintName:"",name:"OverconstrainedError",message:""})})};b.prototype.SendTelemetryData=function(a,b,d){n.getRedirector().telemetry.SendTelemetryData(k.tel_cmd.Data,a,b,d)};b.capabilities=new G;return b}(w.ProxyObject);a.NavigatorUserMedia=b},650:function(b,a,c){Object.defineProperty(a,"__esModule",{value:!0});a.RemoteSession=a.SessionInfo=a.RemoteType=void 0;var e=c(946),l=c(550),h=c(9),d=c(851),w=c(550),
q=c(394),n;(function(a){a[a.Unknown=0]="Unknown";a[a.Windows=1]="Windows";a[a.Linux=2]="Linux"})(n=a.RemoteType||(a.RemoteType={}));var k=function(){return function(){}}();a.SessionInfo=k;b=function(){function a(b,d){var c=this;this.isremote_=!1;this.isremote_=!0;this.type_=n.Windows;this.address_="0.0.0.0";this.sessioninfo_=null;e.getRedirector().setRemoteSessionInfoCb(function(){return c.remoteSessionInfo()});this.enginecontrol_=new h.EngineControl(b+"::"+d)}a.prototype.release=function(){e.getRedirector().setRemoteSessionInfoCb(null)};
a.prototype.user_friendly_id=function(){return"[RemoteSession]"};a.prototype.getFeatureFlags=function(){var a={};null!==this.enginecontrol_&&null!==this.enginecontrol_.features_&&void 0!==this.enginecontrol_.features_&&this.enginecontrol_.features_.forEach(function(b){a[b.name]=b.value});return a};a.prototype.isFeatureSupported=function(a){if("video"===a)return!0;if("givecontrol"===a&&this.sessioninfo_.clientPlatform.includes("Linux")||!(a in w.featureNameMap))return!1;for(var b=w.featureNameMap[a],
d=this.getFeatureFlags(),c=0;c<b.length;c++)if(!(b[c]in d)||!0!==d[b[c]])return!1;return a in w.vdaFeatureNameMap?w.vdaFeatureNameMap[a].map(function(a){return e.getRedirector().getVDAFeatureValue(a)}).reduce(function(a,b){return a&&b},!0):!0};a.isFeaturePstnSupported=function(){return a.pstn_};a.isFeatureDtmfSupported=function(){return a.dtmfswitch_};a.isFeaturAppshareSupported=function(){return a.appshare_};a.isFeatureWebrtc1dot0Supported=function(){return a.webrtc1dot0_};a.isFeatureDataChannelSupported=
function(){return a.datachannel_};a.isFeatureVdNoBufferLimitSupported=function(){return a.vdnobuflimit_};a.isFeatureCallConstraintsSupported=function(){return a.callconstraints_};a.isFeatureTrackCloneWithIdSupported=function(){return a.trackclonewithid_};a.isFeatureSenderStatsFixSupported=function(){return a.senderstatsfix_};a.prototype.getSessionInfo=function(){d.logger.log(this.user_friendly_id()+".getSessionInfo() called.");return null!=this.sessioninfo_?Promise.resolve(this.sessioninfo_):Promise.reject()};
a.prototype.remoteSessionInfo=function(){var b=this,c=this;d.logger.log(c.user_friendly_id()+".remoteSessionInfo() called.");return new Promise(function(n,t){c.enginecontrol_.syncBarrier().then(function(e){d.logger.log(c.user_friendly_id()+"enginecontrol info received!");c.sessioninfo_=new k;c.sessioninfo_.type_script=l.HDXMS_VERSION;c.sessioninfo_.webrpc=e.version_.major.toString()+"."+e.version_.minor.toString()+"."+e.version_.revision.toString()+"."+e.version_.build.toString();if(void 0!=e.versions_&&
null!=e.versions_){c.SendTelemetryData(q.tel_key_VerTypeScript,l.HDXMS_VERSION,0);for(var t=0,y=0,x=e.versions_;y<x.length;y++){var r=x[y],r=r.major.toString()+"."+r.minor.toString()+"."+r.revision.toString()+"."+r.build.toString();switch(t){case h.VersionType.Webrpc:c.sessioninfo_.webrpc=r;c.SendTelemetryData(q.tel_key_VerWebrpc,r,0);break;case h.VersionType.WebrtcCodecs:c.sessioninfo_.webrtc_codecs=r;c.SendTelemetryData(q.tel_key_VerWebrtcCodecs,r,0);break;case h.VersionType.Receiver:c.sessioninfo_.receiver=
r;c.SendTelemetryData(q.tel_key_VerReceiver,r,0);break;case h.VersionType.Vda:c.sessioninfo_.vda=r;c.SendTelemetryData(q.tel_key_VerVda,r,0);break;case h.VersionType.Endpoint:c.sessioninfo_.endpoint=r;c.SendTelemetryData(q.tel_key_VerEndpoint,r,0);break;case h.VersionType.HdxRtcEngine:c.sessioninfo_.hdxrtcengine=r;c.SendTelemetryData(q.tel_key_VerHdxRtcEngine,r,0);break;default:d.logger.log(c.user_friendly_id()+"Unknown version type!")}t++}}void 0!=e.osinfo_&&null!=e.osinfo_&&(c.sessioninfo_.osinfo=
e.osinfo_,e.osinfo_.family.includes("Darwin")&&["Mac OS X","macOS","OS X"].some(function(a){return e.osinfo_.edition.startsWith(a)})?c.sessioninfo_.clientPlatform="Mac":c.sessioninfo_.clientPlatform=e.osinfo_.family,c.SendTelemetryData(q.tel_key_OSFamily,e.osinfo_.family,0),c.SendTelemetryData(q.tel_key_OSVersion,e.osinfo_.version,0),c.SendTelemetryData(q.tel_key_OSArchitecture,e.osinfo_.architecture,0),c.SendTelemetryData(q.tel_key_OSDistro,e.osinfo_.distro,0),c.SendTelemetryData(q.tel_key_OSEdition,
e.osinfo_.edition,0));void 0!=e.endpointid_&&null!=e.endpointid_&&(c.sessioninfo_.endpointId=e.endpointid_.machine_id);void 0!=e.hardwareinfo_&&null!=e.hardwareinfo_&&(c.sessioninfo_.hardware_info=e.hardwareinfo_,c.SendTelemetryData(q.tel_key_CPUModel,e.hardwareinfo_.cpu_info.cpumodel,0),c.SendTelemetryData(q.tel_key_CPUProcessors,e.hardwareinfo_.cpu_info.numberofprocessors,0),c.SendTelemetryData(q.tel_key_CPUGpuinfo,JSON.stringify(e.hardwareinfo_.gpu_info.gpus),0),c.SendTelemetryData(q.tel_key_CPUTotalmemory,
e.hardwareinfo_.memory_info.totalmemory,0));a.pstn_=b.isFeatureSupported(l.Features.FEATURE_public_pstn);a.dtmfswitch_=b.isFeatureSupported(l.Features.FEATURE_public_dtmf);a.appshare_=b.isFeatureSupported(l.Features.FEATURE_public_app_sharing);a.webrtc1dot0_=b.isFeatureSupported(l.Features.FEATURE_public_webrtc1dot0);a.datachannel_=b.isFeatureSupported(l.Features.FEATURE_public_data_channel);a.vdnobuflimit_=b.isFeatureSupported(l.Features.FEATURE_public_vdnobuflimit);a.callconstraints_=b.isFeatureSupported(l.Features.FEATURE_public_stream_resolution);
a.trackclonewithid_=b.isFeatureSupported(l.Features.FEATURE_public_track_clone_with_id);a.senderstatsfix_=b.isFeatureSupported(l.Features.FEATURE_public_sender_stats_fix);n(c.sessioninfo_);c.enginecontrol_.release()})["catch"](function(){e.getRedirector().isPingActive()?c.retrySessionInfo():(t(),c.enginecontrol_.release(),c.enginecontrol_=null)})})};a.prototype.retrySessionInfo=function(){var a=this;setTimeout(function(){d.logger.log("checking if we are connected...");a.enginecontrol_.bind();e.getRedirector().handleRemoteSessionInfo()},
15E3)};a.prototype.SendTelemetryData=function(a,b,d){e.getRedirector().telemetry.SendTelemetryData(q.tel_cmd.Data,a,b,d)};a.pstn_=!1;a.dtmfswitch_=!1;a.appshare_=!1;a.webrtc1dot0_=!1;a.datachannel_=!1;a.vdnobuflimit_=!1;a.callconstraints_=!1;a.trackclonewithid_=!1;a.senderstatsfix_=!1;return a}();a.RemoteSession=b},24:function(b,a,c){var e=this&&this.__extends||function(){var a=function(b,d){a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var d in b)b.hasOwnProperty(d)&&
(a[d]=b[d])};return a(b,d)};return function(b,d){function c(){this.constructor=b}a(b,d);b.prototype=null===d?Object.create(d):(c.prototype=d.prototype,new c)}}();Object.defineProperty(a,"__esModule",{value:!0});a.RtcDataChannel=a.RTCSctpTransport=void 0;var l=c(658),h=c(550),d=c(851),w=c(589),q;(function(a){a[a["new"]=0]="new";a[a.connecting=1]="connecting";a[a.connected=2]="connected";a[a.closed=3]="closed";a[a.max=4]="max"})(q||(q={}));b=function(a){function b(c,g){var e=a.call(this,c,h.class_id_t.RTCSctpTransport,
g,l.ProxyMode.Remote)||this;d.logger.log(e.user_friendly_id()+".constructor");return e}e(b,a);b.prototype.syncBarrier=function(){var a=this;d.logger.log(this.user_friendly_id()+".syncBarrier() called.");return new Promise(function(b,c){a.syncBarrierDeep(b,c)&&a.waitUntilConnected("RTCSctpTransport.syncBarrier").then(function(){d.logger.log(a.user_friendly_id()+".syncBarrierBase success.");return Promise.all([a.remoteInvoke(!1,h.method_id_RTCSctpTransport_t.transport,{oid:0}),a.remoteInvoke(!1,h.method_id_RTCSctpTransport_t.state,
0),a.remoteInvoke(!1,h.method_id_RTCSctpTransport_t.maxMessageSize,0),a.remoteInvoke(!1,h.method_id_RTCSctpTransport_t.maxChannels,0)])}).then(function(b){var c;c=b.map(function(b){return a.param0(b)});b=c[0];a.sctpstate_=c[1];a.maxMessageSize_=c[2];a.maxChannels_=c[3];c=a.transport_;void 0==b||!1!==b.is_null||null!==a.transport_&&a.transport_.object_id()==b.oid||(c=new w.DtlsTransport(a,b.oid));c.syncBarrier().then(function(b){d.logger.log(a.user_friendly_id()+"transport.syncBarrier(): success");
a.transport_=b;a.syncBarrierResolve(a)})["catch"](function(){d.logger.log(a.user_friendly_id()+"transport.syncBarrier(): failed!");a.transport_=null;a.syncBarrierResolve(a)})})["catch"](function(b){b=a.logRemoteInvokeError(b,".syncBarrier() failed!");a.syncBarrierReject(b)})})};Object.defineProperty(b.prototype,"transport",{get:function(){d.logger.log(this.user_friendly_id()+".get_transport() called: "+this.transport_);return this.transport_},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,
"state",{get:function(){d.logger.log(this.user_friendly_id()+".get_state() called: "+this.sctpstate_);return this.sctpstate_},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"maxMessageSize",{get:function(){d.logger.log(this.user_friendly_id()+".get_maxMessageSize() called: "+this.maxMessageSize_);return this.maxMessageSize_},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"maxChannels",{get:function(){d.logger.log(this.user_friendly_id()+".get_maxChannels() called: "+
this.maxChannels_);return this.maxChannels_},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"onstatechange",{get:function(){d.logger.log(this.user_friendly_id()+".get_onstatechange() called: "+this.onstatechange_);return this.onstatechange_},set:function(a){var c=this;d.logger.log(this.user_friendly_id()+".set_onstatechange() called.");this.onstatechange_=a;this.waitUntilConnected(this.user_friendly_id()+".onstatechange").then(function(){var e=c.registerCallbacks(!1,c.isNullCallback(a),
h.method_id_RTCSctpTransport_t.onstatechange);e.then(function(a){d.logger.log(c.user_friendly_id()+".onstatechange callback received!!!");c.sctpstate_=b.convertState(c.param0(a));d.logger.log(c.user_friendly_id()+"sctpstate_: "+c.sctpstate_);a=new Event("onstatechange");c.onstatechange_(a)});return c.remoteInvoke(!0,h.method_id_RTCSctpTransport_t.onstatechange,e.success)})["catch"](function(){d.logger.log(c.user_friendly_id()+".onstatechange() failed.")})},enumerable:!1,configurable:!0});b.convertState=
function(a){return a==q["new"]?"closed":a==q.connecting?"connecting":a==q.connected?"connected":"closed"};return b}(l.ProxyObject);a.RTCSctpTransport=b;var n;(function(a){a[a.connecting=0]="connecting";a[a.open=1]="open";a[a.closing=2]="closing";a[a.closed=3]="closed"})(n||(n={}));b=function(a){function b(c,g,e){c=a.call(this,c,h.class_id_t.RTCDataChannel,g,e)||this;c.binaryType_="blob";d.logger.log(c.user_friendly_id()+".constructor");return c}e(b,a);b.prototype.syncBarrier=function(){var a=this;
d.logger.log(this.user_friendly_id()+".syncBarrier() called.");return new Promise(function(b,c){a.syncBarrierDeep(b,c)&&a.waitUntilConnected("RtcDataChannel.syncBarrier").then(function(){d.logger.log(a.user_friendly_id()+".syncBarrier remote invoking.");return Promise.all([a.remoteInvoke(!1,h.method_id_RTCDataChannel_t.label,""),a.remoteInvoke(!1,h.method_id_RTCDataChannel_t.ordered,!0),a.remoteInvoke(!1,h.method_id_RTCDataChannel_t.maxPacketLifeTime,0),a.remoteInvoke(!1,h.method_id_RTCDataChannel_t.maxRetransmits,
0),a.remoteInvoke(!1,h.method_id_RTCDataChannel_t.protocol,""),a.remoteInvoke(!1,h.method_id_RTCDataChannel_t.negotiated,!1),a.remoteInvoke(!1,h.method_id_RTCDataChannel_t.id,0),a.remoteInvoke(!1,h.method_id_RTCDataChannel_t.readyState,0),a.remoteInvoke(!1,h.method_id_RTCDataChannel_t.bufferedAmount,0),a.remoteInvoke(!1,h.method_id_RTCDataChannel_t.bufferedAmountLowThreshold,0)])}).then(function(b){d.logger.log(a.user_friendly_id()+".syncBarrier success.");var c;b=b.map(function(b){return a.param0(b)});
a.label_=b[0];a.ordered_=b[1];a.maxPacketLifeTime_=b[2];a.maxRetransmits_=b[3];a.protocol_=b[4];a.negotiated_=b[5];a.id_=b[6];c=b[7];a.bufferedAmount_=b[8];a.bufferedAmountLowThreshold_=b[9];a.readyState_=a.toRTCDataChannelState(c);a.syncBarrierResolve(a)})["catch"](function(b){b=a.logRemoteInvokeError(b,".syncBarrier() failed!");a.syncBarrierReject(b)})})};Object.defineProperty(b.prototype,"label",{get:function(){d.logger.log(this.user_friendly_id()+".get_label() called: "+this.label_);return this.label_},
enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"ordered",{get:function(){d.logger.log(this.user_friendly_id()+".get_ordered() called: "+this.ordered_);return this.ordered_},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"maxPacketLifeTime",{get:function(){d.logger.log(this.user_friendly_id()+".get_maxPacketLifeTime() called: "+this.maxPacketLifeTime_);return this.maxPacketLifeTime_},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"maxRetransmits",
{get:function(){d.logger.log(this.user_friendly_id()+".get_maxRetransmits() called: "+this.maxRetransmits_);return this.maxRetransmits_},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"protocol",{get:function(){d.logger.log(this.user_friendly_id()+".get_protocol() called: "+this.protocol_);return this.protocol_},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"negotiated",{get:function(){d.logger.log(this.user_friendly_id()+".get_negotiated() called: "+this.negotiated_);
return this.negotiated_},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"id",{get:function(){d.logger.log(this.user_friendly_id()+".get_id() called: "+this.id_);return this.id_},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"readyState",{get:function(){d.logger.log(this.user_friendly_id()+".get_readyState() called: "+this.readyState_);return this.readyState_},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"bufferedAmount",{get:function(){d.logger.log(this.user_friendly_id()+
".get_bufferedAmount() called: "+this.bufferedAmount_);return this.bufferedAmount_},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"bufferedAmountLowThreshold",{get:function(){d.logger.log(this.user_friendly_id()+".get_bufferedAmountLowThreshold() called: "+this.bufferedAmountLowThreshold_);return this.bufferedAmountLowThreshold_},set:function(a){d.logger.log(this.user_friendly_id()+".get_bufferedAmountLowThreshold() called: "+a);this.bufferedAmountLowThreshold_=a},enumerable:!1,
configurable:!0});Object.defineProperty(b.prototype,"binaryType",{get:function(){d.logger.log(this.user_friendly_id()+".get_binaryType() called: "+this.binaryType_);return this.binaryType_},set:function(a){d.logger.log(this.user_friendly_id()+".set_binaryType() called: "+a);this.binaryType_="blob"==a||"arraybuffer"==a?a:"blob"},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"onopen",{get:function(){d.logger.log(this.user_friendly_id()+".get_onopen() called.");return this.onopen_},
set:function(a){var b=this;d.logger.log(this.user_friendly_id()+".set_onopen() called.");this.onopen_=a;this.waitUntilConnected(this.user_friendly_id()+".onopen").then(function(){var c=b.registerCallbacks(!1,b.isNullCallback(a),h.method_id_RTCDataChannel_t.onopen);c.then(function(a){d.logger.log(b.user_friendly_id()+".onopen callback received!!!");b.syncBarrier().then(function(){d.logger.log(b.user_friendly_id()+".onopen notifying...");var a=new Event("open",{});Object.defineProperty(a,"target",{writable:!1,
value:b});b.onopen_(a)})["catch"](function(){d.logger.log(b.user_friendly_id()+".syncBarrier(): failed!")})});return b.remoteInvoke(!0,h.method_id_RTCDataChannel_t.onopen,c.success)})["catch"](function(){d.logger.log(b.user_friendly_id()+".onopen() failed.")})},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"onbufferedamountlow",{get:function(){d.logger.log(this.user_friendly_id()+".get_onbufferedamountlow() called.");return this.onbufferedamountlow_},set:function(a){var b=this;
d.logger.log(this.user_friendly_id()+".set_onbufferedamountlow() called.");this.onbufferedamountlow_=a;this.waitUntilConnected(this.user_friendly_id()+".onbufferedamountlow").then(function(){var c=b.registerCallbacks(!1,b.isNullCallback(a),h.method_id_RTCDataChannel_t.onbufferedamountlow);c.then(function(a){d.logger.log(b.user_friendly_id()+".onbufferedamountlow callback received!!!");a=new Event("onbufferedamountlow");Object.defineProperty(a,"target",{writable:!1,value:b});b.onbufferedamountlow_(a)});
return b.remoteInvoke(!0,h.method_id_RTCDataChannel_t.onbufferedamountlow,c.success)})["catch"](function(){d.logger.log(b.user_friendly_id()+".onbufferedamountlows() failed.")})},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"onerror",{get:function(){d.logger.log(this.user_friendly_id()+".get_onerror() called.");return this.onerror_},set:function(a){var b=this;d.logger.log(this.user_friendly_id()+".set_onerror() called.");this.onerror_=a;this.waitUntilConnected(this.user_friendly_id()+
".onerror").then(function(){var c=b.registerCallbacks(!1,b.isNullCallback(a),h.method_id_RTCDataChannel_t.onerror);c.then(function(a){d.logger.log(b.user_friendly_id()+".onerror callback received!");a=b.param0(a);d.logger.log(b.user_friendly_id()+"error: "+a);a=new Event("onerror");Object.defineProperty(a,"target",{writable:!1,value:b});b.onerror_(a)});return b.remoteInvoke(!0,h.method_id_RTCDataChannel_t.onerror,c.success)})["catch"](function(){d.logger.log(b.user_friendly_id()+".onerror() failed.")})},
enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"onclosing",{get:function(){d.logger.log(this.user_friendly_id()+".get_onclosing() called.");return this.onclosing_},set:function(a){var b=this;d.logger.log(this.user_friendly_id()+".set_onclosing() called.");this.onclosing_=a;this.waitUntilConnected(this.user_friendly_id()+".onclosing").then(function(){var c=b.registerCallbacks(!1,b.isNullCallback(a),h.method_id_RTCDataChannel_t.onclosing);c.then(function(a){d.logger.log(b.user_friendly_id()+
".onclosing callback received!!!");a=new Event("onclosing");Object.defineProperty(a,"target",{writable:!1,value:b});b.onclosing_(a)});return b.remoteInvoke(!0,h.method_id_RTCDataChannel_t.onclosing,c.success)})["catch"](function(){d.logger.log(b.user_friendly_id()+".onclosing() failed.")})},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"onclose",{get:function(){d.logger.log(this.user_friendly_id()+".get_onclose() called.");return this.onclose_},set:function(a){var b=this;d.logger.log(this.user_friendly_id()+
".set_onclose() called.");this.onclose_=a;this.waitUntilConnected(this.user_friendly_id()+".onclose").then(function(){var c=b.registerCallbacks(!1,b.isNullCallback(a),h.method_id_RTCDataChannel_t.onclose);c.then(function(a){d.logger.log(b.user_friendly_id()+".onclose callback received!!!");a=new Event("onclose");Object.defineProperty(a,"target",{writable:!1,value:b});b.onclose_(a)});return b.remoteInvoke(!0,h.method_id_RTCDataChannel_t.onclose,c.success)})["catch"](function(){d.logger.log(b.user_friendly_id()+
".onclose() failed.")})},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"onmessage",{get:function(){d.logger.log(this.user_friendly_id()+".get_onmessage() called.");return this.onmessage_},set:function(a){var b=this;d.logger.log(this.user_friendly_id()+".set_onmessage() called.");this.onmessage_=a;this.waitUntilConnected(this.user_friendly_id()+".onmessage").then(function(){var c=b.registerCallbacks(!1,b.isNullCallback(a),h.method_id_RTCDataChannel_t.onmessage);c.then(function(a){d.logger.log(b.user_friendly_id()+
".onmessage callback received!!!");var c=b.param0(a);a=new Event("onmessage");c.binary?a.data=c.data_ab:(c=atob(c.data_sz),a.data=c);b.onmessage_(a)});return b.remoteInvoke(!0,h.method_id_RTCDataChannel_t.onmessage,c.success)})["catch"](function(){d.logger.log(b.user_friendly_id()+".onmessage() failed.")})},enumerable:!1,configurable:!0});b.prototype.close=function(){var a=this;d.logger.log(this.user_friendly_id()+".close() called.");this.waitUntilConnected("RTCDataChannel.close").then(function(){return a.remoteInvoke(!1,
h.method_id_RTCDataChannel_t.close)}).then(function(){d.logger.log(a.user_friendly_id()+".close: success.")})["catch"](function(){d.logger.log(a.user_friendly_id()+".close: failed.")})};b.prototype.toByteArray=function(a){var b=[];a=new Uint8Array(a instanceof ArrayBuffer?a:a.buffer);for(var d in a)b.push(a[d]);return b};b.prototype.send=function(a){var b=this;d.logger.log(this.user_friendly_id()+".send() called.");this.waitUntilConnected("RTCDataChannel.send").then(function(){if("string"===typeof a)return d.logger.log(b.user_friendly_id()+
"data(string): "+a),b.remoteInvoke(!1,h.method_id_RTCDataChannel_t.send_text,a);if(a instanceof Blob)a.arrayBuffer().then(function(a){a=b.toByteArray(a);return b.remoteInvoke(!1,h.method_id_RTCDataChannel_t.send_binary,a)})["catch"](function(){d.logger.log(b.user_friendly_id()+".arrayBuffer(): failed.")});else{var c=b.toByteArray(a);return b.remoteInvoke(!1,h.method_id_RTCDataChannel_t.send_binary,c)}}).then(function(){d.logger.log(b.user_friendly_id()+".send: success.")})["catch"](function(){d.logger.log(b.user_friendly_id()+
".send: failed.")})};b.prototype.toRTCDataChannelState=function(a){var b="closed";a==n.connecting?b="connecting":a==n.open?b="open":a==n.closing?b="closing":a==n.closed&&(b="closed");return b};return b}(l.ProxyObject);a.RtcDataChannel=b},484:function(b,a,c){var e=this&&this.__extends||function(){var a=function(b,d){a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var d in b)b.hasOwnProperty(d)&&(a[d]=b[d])};return a(b,d)};return function(b,d){function c(){this.constructor=
b}a(b,d);b.prototype=null===d?Object.create(d):(c.prototype=d.prototype,new c)}}();Object.defineProperty(a,"__esModule",{value:!0});a.RtcRtpReceiveParameters=a.RtcRtpSendParameters=a.RtcRtpEncodingParameters=a.RtcRtpParameters=a.RtcRtcpParameters=a.RtcRtpHeaderExtensionParameters=a.RtcRtpCodecParameters=void 0;var l=c(851),h=function(){function a(){}a.defRtcRtpCodecParameters=function(){return{mimeType:"",payloadType:0,sdpFmtpLine:""}};a.defRTCRtpCodecParameters=function(){return{clockRate:0,mimeType:"",
payloadType:0}};a.toRtcRtpCodecParameters=function(b){var d=a.defRtcRtpCodecParameters();b&&(b.channels&&(d.channels=b.channels),b.clockRate&&(d.clockRate=b.clockRate),b.mimeType&&(d.mimeType=b.mimeType),b.payloadType&&(d.payloadType=b.payloadType),b.sdpFmtpLine&&(d.sdpFmtpLine=b.sdpFmtpLine));return d};a.toRTCRtpCodecParameters=function(b){var d=a.defRTCRtpCodecParameters();b&&(b.channels&&(d.channels=b.channels),b.clockRate&&(d.clockRate=b.clockRate),b.mimeType&&(d.mimeType=b.mimeType),b.payloadType&&
(d.payloadType=b.payloadType),b.sdpFmtpLine&&(d.sdpFmtpLine=b.sdpFmtpLine));return d};return a}();a.RtcRtpCodecParameters=h;var d=function(){function a(){}a.defRtcRtpHeaderExtensionParameters=function(){return{encrypted:!1,id:0,uri:""}};a.defRTCRtpHeaderExtensionParameters=function(){return{id:0,uri:""}};a.toRtcRtpHeaderExtensionParameters=function(b){var d=a.defRtcRtpHeaderExtensionParameters();if(b){var c=b.encrypted;void 0!=c&&null!=c&&(d.encrypted=c);b.id&&(d.id=b.id);b.uri&&(d.uri=b.uri)}return d};
a.toRTCRtpHeaderExtensionParameters=function(b){var d=a.defRTCRtpHeaderExtensionParameters();if(b){var c=b.encrypted;void 0!=c&&null!=c&&(d.encrypted=c);b.id&&(d.id=b.id);b.uri&&(d.uri=b.uri)}return d};return a}();a.RtcRtpHeaderExtensionParameters=d;var w=function(){function a(){}a.defRtcRtcpParameters=function(){return{cname:"",reducedSize:!1}};a.defRTCRtcpParameters=function(){return{}};a.toRtcRtcpParameters=function(b){var d=a.defRtcRtcpParameters();b&&(b.cname&&(d.cname=b.cname),b=b.reducedSize,
void 0!=b&&null!=b&&(d.reducedSize=b));return d};a.toRTCRtcpParameters=function(b){var d=a.defRTCRtcpParameters();b&&(b.cname&&(d.cname=b.cname),b=b.reducedSize,void 0!=b&&null!=b&&(d.reducedSize=b));return d};return a}();a.RtcRtcpParameters=w;var q=function(){function a(){}a.defRtcRtpParameters=function(){return{codecs:[],headerExtensions:[],rtcp:w.defRtcRtcpParameters()}};a.defRTCRtpParameters=function(){return{codecs:[],headerExtensions:[],rtcp:w.defRTCRtcpParameters()}};a.toRtcRtpParameters=function(b){var c=
a.defRtcRtpParameters();if(b){if(b.codecs)for(var g=0,e=b.codecs;g<e.length;g++)c.codecs.push(h.toRtcRtpCodecParameters(e[g]));if(b.headerExtensions)for(g=0,e=b.headerExtensions;g<e.length;g++)c.headerExtensions.push(d.toRtcRtpHeaderExtensionParameters(e[g]));b.rtcp&&(c.rtcp=w.toRtcRtcpParameters(b.rtcp))}return c};a.toRTCRtpParameters=function(b){var c=a.defRTCRtpParameters();if(b){if(b.codecs)for(var e=0,n=b.codecs;e<n.length;e++)c.codecs.push(h.toRTCRtpCodecParameters(n[e]));if(b.headerExtensions)for(e=
0,n=b.headerExtensions;e<n.length;e++)c.headerExtensions.push(d.toRTCRtpHeaderExtensionParameters(n[e]));b.rtcp&&(c.rtcp=w.toRtcRtcpParameters(b.rtcp))}return c};return a}();a.RtcRtpParameters=q;var n=function(){function a(){}a.defRtcRtpEncodingParameters=function(){return{active:!0,rid:""}};a.defRTCRtpEncodingParameters=function(){return{}};a.toRtcRtpEncodingParameters=function(b){var d=a.defRtcRtpEncodingParameters();if(b){var c=b.active;void 0!=c&&null!=c&&(d.active=c);b.maxBitrate&&(d.maxBitrate=
b.maxBitrate);b.maxFramerate&&(d.maxFramerate=b.maxFramerate);b.scaleResolutionDownBy&&(d.scaleResolutionDownBy=b.scaleResolutionDownBy);b.rid&&(d.rid=b.rid);b.networkPriority&&(d.networkPriority=b.networkPriority)}return d};a.toRTCRtpEncodingParameters=function(b){var d=a.defRTCRtpEncodingParameters();if(b){var c=b.active;void 0!=c&&null!=c&&(d.active=c);b.maxBitrate&&(d.maxBitrate=b.maxBitrate);b.maxFramerate&&(d.maxFramerate=b.maxFramerate);b.scaleResolutionDownBy&&(d.scaleResolutionDownBy=b.scaleResolutionDownBy);
b.rid&&(d.rid=b.rid);b.networkPriority&&(d.networkPriority=b.networkPriority)}return d};return a}();a.RtcRtpEncodingParameters=n;b=function(a){function b(){return null!==a&&a.apply(this,arguments)||this}e(b,a);b.defRtcRtpSendParameters=function(){var a=q.defRtcRtpParameters();a.encodings=[];a.transaction_id="";return a};b.defRTCRtpSendParameters=function(){var a=q.defRTCRtpParameters();a.encodings=[];a.transactionId="";return a};b.toRtcRtpSendParameters=function(a){l.logger.log("RtcRtpSendParameters.toRtcRtpSendParameters() in param:"+
JSON.stringify(a));var d=b.defRtcRtpSendParameters(),c=q.toRtcRtpParameters(a);c.codecs.forEach(function(a){return d.codecs.push(a)});c.headerExtensions.forEach(function(a){return d.headerExtensions.push(a)});d.rtcp=c.rtcp;if(a){if(a.encodings)for(var c=0,e=a.encodings;c<e.length;c++)d.encodings.push(n.toRtcRtpEncodingParameters(e[c]));a.transactionId&&(d.transaction_id=a.transactionId)}l.logger.log("RtcRtpSendParameters.toRtcRtpSendParameters() out param:"+JSON.stringify(d));return d};b.toRTCRtpSendParameters=
function(a){l.logger.log("RtcRtpSendParameters.toRTCRtpSendParameters() in param:"+JSON.stringify(a));var d=b.defRTCRtpSendParameters(),c=q.toRTCRtpParameters(a);c.codecs.forEach(function(a){return d.codecs.push(a)});c.headerExtensions.forEach(function(a){return d.headerExtensions.push(a)});d.rtcp=c.rtcp;if(a){if(a.encodings)for(var c=0,e=a.encodings;c<e.length;c++)d.encodings.push(n.toRTCRtpEncodingParameters(e[c]));a.transaction_id&&(d.transactionId=a.transaction_id)}l.logger.log("RtcRtpSendParameters.toRTCRtpSendParameters() out param:"+
JSON.stringify(d));return d};return b}(q);a.RtcRtpSendParameters=b;b=function(a){function b(){return null!==a&&a.apply(this,arguments)||this}e(b,a);b.defRtcRtpReceiveParameters=function(){return q.defRtcRtpParameters()};b.defRTCRtpReceiveParameters=function(){return q.defRTCRtpParameters()};b.toRtcRtpReceiveParameters=function(a){l.logger.log("RtcRtpReceiveParameters.toRtcRtpReceiveParameters() in param:"+JSON.stringify(a));a=q.toRtcRtpParameters(a);l.logger.log("RtcRtpReceiveParameters.toRtcRtpReceiveParameters() out param:"+
JSON.stringify(a));return a};b.toRTCRtpReceiveParameters=function(a){l.logger.log("RtcRtpReceiveParameters.toRTCRtpReceiveParameters() in param:"+JSON.stringify(a));a=q.toRTCRtpParameters(a);l.logger.log("RtcRtpReceiveParameters.toRTCRtpReceiveParameters() out param:"+JSON.stringify(a));return a};return b}(q);a.RtcRtpReceiveParameters=b},589:function(b,a,c){var e=this&&this.__extends||function(){var a=function(b,d){a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=
b}||function(a,b){for(var d in b)b.hasOwnProperty(d)&&(a[d]=b[d])};return a(b,d)};return function(b,d){function c(){this.constructor=b}a(b,d);b.prototype=null===d?Object.create(d):(c.prototype=d.prototype,new c)}}();Object.defineProperty(a,"__esModule",{value:!0});a.RtpReceiver=a.RtpSender=a.RtpSenderReceiver=a.DtlsTransport=a.IceTransport=a.DtmfSender=a.DTMFToneChangeEvent=void 0;var l=c(658),h=c(550),d=c(851),w=c(144),q=c(517),n=c(650),k=c(484),v=function(a){function b(c,e){var g=a.call(this,c,
h.class_id_t.RTCDTMFToneChangeEvent,e,l.ProxyMode.Remote)||this;d.logger.log(g.user_friendly_id()+".constructor");return g}e(b,a);b.prototype.syncBarrier=function(){var a=this;d.logger.log(this.user_friendly_id()+".syncBarrier() called.");return new Promise(function(b,c){a.syncBarrierDeep(b,c)&&a.waitUntilConnected(a.user_friendly_id()+".syncBarrier").then(function(){Promise.all([a.remoteInvoke(!1,h.method_id_RTCDTMFToneChangeEvent_t.tone,""),a.remoteInvoke(!1,h.method_id_RTCDTMFToneChangeEvent_t.tone_buffer,
"")]).then(function(b){d.logger.log(a.user_friendly_id()+".syncBarrier(): success.");b=b.map(function(b){return a.param0(b)});a.tone=b[0];a.tone_buffer_=b[1];a.syncBarrierResolve(a)})["catch"](function(b){b=a.logRemoteInvokeError(b,".prop.syncBarrier() failed.");a.syncBarrierReject(b)})})["catch"](function(b){b=a.logRemoteInvokeError(b,".syncBarrier() failed.");a.syncBarrierReject(b)})})};Object.defineProperty(b.prototype,"tone_buffer",{get:function(){return this.tone_buffer_},enumerable:!1,configurable:!0});
return b}(l.ProxyObject);a.DTMFToneChangeEvent=v;var p=function(a){function b(c,e){var g=a.call(this,c,h.class_id_t.RTCDTMFSender,e,l.ProxyMode.Remote)||this;d.logger.log(g.user_friendly_id()+".constructor");g.canInsertDTMF=!0;g.toneBuffer_="";return g}e(b,a);b.prototype.insertDTMF=function(a,b,c){var e=this;void 0===b&&(b=100);void 0===c&&(c=70);d.logger.log(this.user_friendly_id()+".insertDTMF() called, tones: "+a);this.waitUntilConnected("DtmfSender.insertDTMF").then(function(){return e.remoteInvoke(!1,
h.method_id_RTCDTMFSender_t.insertDTMF,a,b,c)}).then(function(){d.logger.log(e.user_friendly_id()+".insertDTMF() success, tones: "+a)})["catch"](function(a){e.logRemoteInvokeError(a,".insertDTMF() failed!")})};Object.defineProperty(b.prototype,"ontonechange",{get:function(){return this.ontonechange_},set:function(a){var b=this;d.logger.log(this.user_friendly_id()+".set_ontonechange() called.");this.ontonechange_=a;this.waitUntilConnected("DtmfSender.ontonechange").then(function(){var c=b.registerCallbacks(!1,
b.isNullCallback(a),h.method_id_RTCDTMFSender_t.ontonechange);c.then(function(a){d.logger.log(b.user_friendly_id()+".ontonechange callback received!");(new v(b,b.param0(a).oid)).syncBarrier().then(function(a){d.logger.log(b.user_friendly_id()+"tone: "+a.tone+" tone_buffer: "+a.tone_buffer);b.toneBuffer_=a.tone_buffer;b.ontonechange_(a)})["catch"](function(a){b.logRemoteInvokeError(a,".toneEvt.syncBarrier() failed!")})});return b.remoteInvoke(!0,h.method_id_RTCDTMFSender_t.ontonechange,c.success)})["catch"](function(a){b.logRemoteInvokeError(a,
".set_ontonechange() failed!")})},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"toneBuffer",{get:function(){d.logger.log(this.user_friendly_id()+".toneBuffer() called.");return this.toneBuffer_},enumerable:!1,configurable:!0});return b}(l.ProxyObject);a.DtmfSender=p;var g=function(a){function b(c,e){var g=a.call(this,c,h.class_id_t.RTCIceTransport,e,l.ProxyMode.Remote)||this;d.logger.log(g.user_friendly_id()+".constructor");g.selectedPair=null;g.localCandidates_=[];g.remoteCandidates_=
[];return g}e(b,a);b.prototype.syncBarrier=function(){var a=this;d.logger.log(this.user_friendly_id()+".syncBarrier() called.");return new Promise(function(c,e){a.syncBarrierDeep(c,e)&&a.waitUntilConnected("IceTransport.syncBarrier").then(function(){return Promise.all([a.remoteInvoke(!1,h.method_id_RTCIceTransport_t.role,0),a.remoteInvoke(!1,h.method_id_RTCIceTransport_t.component,0),a.remoteInvoke(!1,h.method_id_RTCIceTransport_t.state,0),a.remoteInvoke(!1,h.method_id_RTCIceTransport_t.gatheringState,
0)])}).then(function(c){d.logger.log(a.user_friendly_id()+".syncBarrier success.");var e=0,g=0;c=c.map(function(b){return a.param0(b)});a.role_=c[0];a.component_=c[1];e=c[2];g=c[3];a.state_=b.convertState(e);a.gatheringState_=b.convertGatheringState(g);a.syncBarrierResolve(a)})["catch"](function(b){b=a.logRemoteInvokeError(b,".syncBarrier() failed!");a.syncBarrierReject(b)})})};b.prototype.syncCandidates=function(){var a=this;d.logger.log(this.user_friendly_id()+".syncCandidates() called.");return new Promise(function(b,
c){a.waitUntilConnected("IceTransport.syncCandidates").then(function(){return Promise.all([a.remoteInvoke(!1,h.method_id_RTCIceTransport_t.localcandidates,[]),a.remoteInvoke(!1,h.method_id_RTCIceTransport_t.remotecandidates,[])])}).then(function(c){d.logger.log(a.user_friendly_id()+".syncCandidates success.");c=c.map(function(b){return a.param0(b)});a.localCandidates_=c[0];a.remoteCandidates_=c[1];b(a)})["catch"](function(b){b=a.logRemoteInvokeError(b,".syncCandidates() failed!");c(b)})})};Object.defineProperty(b.prototype,
"role",{get:function(){return this.role_},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"component",{get:function(){return this.component_},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"State",{get:function(){return this.state_},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"gatheringState",{get:function(){return this.gatheringState_},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"onstatechange",{get:function(){return this.onstatechange_},
set:function(a){var c=this;d.logger.log(this.user_friendly_id()+".set_onstatechange() called.");this.onstatechange_=a;this.waitUntilConnected("IceTransport.onstatechange").then(function(){var e=c.registerCallbacks(!1,c.isNullCallback(a),h.method_id_RTCIceTransport_t.onstatechange);e.then(function(a){d.logger.log(c.user_friendly_id()+".onstatechange callback received!");c.syncCandidates().then(function(a){d.logger.log(c.user_friendly_id()+"received updated ice candidates!")});c.state_=b.convertState(c.param0(a));
d.logger.log(c.user_friendly_id()+"state: "+c.state_);c.onstatechange_()});return c.remoteInvoke(!0,h.method_id_RTCIceTransport_t.onstatechange,e.success)})["catch"](function(a){c.logRemoteInvokeError(a,".set_onstatechange failed!")})},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"ongatheringstatechange",{get:function(){return this.ongatheringstatechange_},set:function(a){var c=this;d.logger.log(this.user_friendly_id()+".set_ongatheringstatechange() called.");this.ongatheringstatechange_=
a;this.waitUntilConnected("IceTransport.ongatheringstatechange").then(function(){var e=c.registerCallbacks(!1,c.isNullCallback(a),h.method_id_RTCIceTransport_t.ongatheringstatechange);e.then(function(a){d.logger.log(c.user_friendly_id()+".ongatheringstatechange callback received!");c.syncCandidates().then(function(a){d.logger.log(c.user_friendly_id()+"received updated ice candidates!")});c.gatheringState_=b.convertGatheringState(c.param0(a));d.logger.log(c.user_friendly_id()+"gatheringState: "+c.gatheringState_);
c.ongatheringstatechange_()});return c.remoteInvoke(!0,h.method_id_RTCIceTransport_t.ongatheringstatechange,e.success)})["catch"](function(a){c.logRemoteInvokeError(a,".set_ongatheringstatechange failed!")})},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"onselectedcandidatepairchange",{get:function(){return this.onselectedcandidatepairchange_},set:function(a){var b=this;d.logger.log(this.user_friendly_id()+".set_onselectedcandidatepairchange() called.");this.onselectedcandidatepairchange_=
a;this.waitUntilConnected("IceTransport.onselectedcandidatepairchange").then(function(){var c=b.registerCallbacks(!1,b.isNullCallback(a),h.method_id_RTCIceTransport_t.onselectedcandidatepairchange);c.then(function(a){d.logger.log(b.user_friendly_id()+".onselectedcandidatepairchange callback received!");b.syncCandidates().then(function(a){d.logger.log(b.user_friendly_id()+"received updated ice candidates!")});b.selectedPair=b.param0(a);d.logger.log(b.user_friendly_id()+"selectedPair: "+b.selectedPair);
b.onselectedcandidatepairchange_()});return b.remoteInvoke(!0,h.method_id_RTCIceTransport_t.onselectedcandidatepairchange,c.success)})["catch"](function(a){b.logRemoteInvokeError(a,".set_onselectedcandidatepairchange failed!")})},enumerable:!1,configurable:!0});b.prototype.getLocalCandidates=function(){return this.localCandidates_};b.prototype.getRemoteCandidates=function(){return this.remoteCandidates_};b.prototype.getLocalParameters=function(){return null};b.prototype.getRemoteParameters=function(){return null};
b.prototype.getSelectedCandidatePair=function(){return this.selectedPair};b.convertState=function(a){return 0==a?"new":1==a?"checking":2==a?"connected":3==a?"completed":4==a?"failed":5==a?"disconnected":"closed"};b.convertGatheringState=function(a){return 0==a?"new":1==a?"gathering":"complete"};return b}(l.ProxyObject);a.IceTransport=g;var B;(function(a){a[a["new"]=0]="new";a[a.connecting=1]="connecting";a[a.connected=2]="connected";a[a.closed=3]="closed";a[a.failed=4]="failed";a[a.max=5]="max"})(B||
(B={}));var t=function(a){function b(c,e){var g=a.call(this,c,h.class_id_t.RTCDtlsTransport,e,l.ProxyMode.Remote)||this;d.logger.log(g.user_friendly_id()+".constructor");g.state_="new";g.transport_=null;g.remoteCertificates_=[];return g}e(b,a);b.prototype.dumpInfo=function(){d.logger.log("DtlsTransport["+this.object_id()+"].dumpInfo():");d.logger.log("    - state:"+this.state_);d.logger.log("    - transport:"+this.transport_)};b.prototype.syncBarrier=function(){var a=this;d.logger.log(this.user_friendly_id()+
".syncBarrier() called.");return new Promise(function(c,e){a.syncBarrierDeep(c,e)&&a.waitUntilConnected("DtlsTransport.syncBarrier").then(function(){return Promise.all([a.remoteInvoke(!1,h.method_id_RTCDtlsTransport_t.transport,{}),a.remoteInvoke(!1,h.method_id_RTCDtlsTransport_t.state,0),a.remoteInvoke(!1,h.method_id_RTCDtlsTransport_t.getRemoteCertificates)])}).then(function(c){var e;d.logger.log(a.user_friendly_id()+".syncBarrier remote success.");var h;e=c.map(function(b){return a.param0(b)});
c=e[0];h=e[1];a.remoteCertificates_=e[2];a.state_=b.convertState(h);e=[];if(void 0!=c&&0==c.is_null){h=a.transport_;if(null===a.transport_||a.transport_.object_id()!=c.oid)h=new g(a,c.oid);e.push(h.syncBarrier())}else e.push(Promise.resolve(null));Promise.all(e).then(function(b){d.logger.log(a.user_friendly_id()+".syncBarrier success");a.transport_=b[0];a.syncBarrierResolve(a)})["catch"](function(b){b=a.logRemoteInvokeError(b,".prop.syncBarrier failed!");a.syncBarrierReject(b)})})["catch"](function(b){b=
a.logRemoteInvokeError(b,".syncBarrier failed!");a.syncBarrierReject(b)})})};Object.defineProperty(b.prototype,"transport",{get:function(){return this.transport_},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"state",{get:function(){d.logger.log(this.user_friendly_id()+".get_state() called: "+this.state_);return this.state_},enumerable:!1,configurable:!0});b.prototype.getRemoteCertificates=function(){return this.remoteCertificates_};Object.defineProperty(b.prototype,"onstatechange",
{get:function(){return this.onstatechange_},set:function(a){var c=this;d.logger.log(this.user_friendly_id()+".set_onstatechange() called.");this.onstatechange_=a;this.waitUntilConnected("DtlsTransport.onstatechange").then(function(){var e=c.registerCallbacks(!1,c.isNullCallback(a),h.method_id_RTCDtlsTransport_t.onstatechange);e.then(function(a){d.logger.log(c.user_friendly_id()+".onstatechange callback received!");c.state_=b.convertState(c.param0(a));d.logger.log(c.user_friendly_id()+"state_: "+c.state_);
c.onstatechange_()});return c.remoteInvoke(!0,h.method_id_RTCDtlsTransport_t.onstatechange,e.success)})["catch"](function(a){c.logRemoteInvokeError(a,".set_onstatechange failed!")})},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"onerror",{get:function(){return this.onerror_},set:function(a){var b=this;d.logger.log(this.user_friendly_id()+".set_onerror() called.");this.onerror_=a;this.waitUntilConnected("DtlsTransport.onerror").then(function(){var c=b.registerCallbacks(!1,b.isNullCallback(a),
h.method_id_RTCDtlsTransport_t.onerror);c.then(function(a){d.logger.log(b.user_friendly_id()+".onerror callback received!");a=b.param0(a);d.logger.log(b.user_friendly_id()+"error: "+a);b.onerror_(a)});return b.remoteInvoke(!0,h.method_id_RTCDtlsTransport_t.onerror,c.success)})["catch"](function(a){b.logRemoteInvokeError(a,".set_onerror failed!")})},enumerable:!1,configurable:!0});b.convertState=function(a){return a==B["new"]?"new":a==B.connecting?"connecting":a==B.connected?"connected":a==B.closed?
"closed":"failed"};return b}(l.ProxyObject);a.DtlsTransport=t;b=function(a){function b(c,e,g,h){c=a.call(this,c,e,g,h)||this;d.logger.log(c.user_friendly_id()+".constructor base");c.track_=null;c.transport_=null;return c}e(b,a);b.prototype.syncBarrierBase=function(){d.logger.log(this.user_friendly_id()+".syncBarrierBase() called.");var a=[],b,c;this instanceof m?(b=h.method_id_RTCRtpSender_t.track,c=h.method_id_RTCRtpSender_t.transport):this instanceof D&&(b=h.method_id_RTCRtpReceiver_t.track,c=h.method_id_RTCRtpReceiver_t.transport);
n.RemoteSession.isFeaturePstnSupported()&&n.RemoteSession.isFeatureDtmfSupported()?(a.push(this.remoteInvoke(!1,b,{oid:0})),a.push(this.remoteInvoke(!1,c,{oid:0}))):a.push(this.remoteInvoke(!1,b,{oid:0}));return a};b.prototype.syncBarrierBaseResults=function(a){var b,c=this;b=0;d.logger.log(this.user_friendly_id()+".syncBarrierBaseResults");var e;n.RemoteSession.isFeaturePstnSupported()&&n.RemoteSession.isFeatureDtmfSupported()?(b=a.map(function(a){return c.param0(a)}),a=b[0],e=b[1],b=2):(a=a.map(function(a){return c.param0(a)})[0],
b=1);var g=[];if(void 0!=a&&!1===a.is_null){var h=this.track_;null===this.track_||this.track_.object_id()!=a.oid?h=new w.RemoteMediaTrack(this,a.oid):this.track_.bind(this,a.oid);g.push(h.syncBarrier())}else g.push(Promise.resolve(null));if(void 0!=e&&!1===e.is_null){a=this.transport_;if(null===this.transport_||this.transport_.object_id()!=e.oid)a=new t(this,e.oid);g.push(a.syncBarrier())}else g.push(Promise.resolve(null));return[b,g]};b.prototype.syncBarrierBaseResultsWithAllPromisesFulFilled=function(a){this.track_=
a[0];this.transport_=a[1]};Object.defineProperty(b.prototype,"transport",{get:function(){d.logger.log(this.user_friendly_id()+".get transport() called.");return this.transport_},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"rtcpTransport",{get:function(){d.logger.log(this.user_friendly_id()+".get rtcpTransport() called.");return this.transport_},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"track",{get:function(){return this.track_},enumerable:!1,configurable:!0});
b.prototype.reinitTrack=function(a){this.track_=a};b.prototype.getStats=function(){d.logger.log(this.user_friendly_id()+".getStats() called.");var a=this;return new Promise(function(b,c){a.isRedirected()?a.waitUntilConnected("RtpReceiver.getStats").then(function(){if(n.RemoteSession.isFeatureSenderStatsFixSupported()){var d;a instanceof m?d=h.method_id_RTCRtpSender_t.getStats:a instanceof D&&(d=h.method_id_RTCRtpReceiver_t.getStats);var c=a.registerCallbacks(!0,!1,d);c.then(function(a){void 0===a.params||
0===a.params.length||0===a.params[0].length?b():b(q.StatsReport.fromJSON(JSON.parse(a.params[0])))});return a.remoteInvoke(!1,d,c.success)}b()})["catch"](function(b){b=a.logRemoteInvokeError(b,".getStats() failed!");c(b)}):(d.logger.log(a.user_friendly_id()+".getStats(): not in active redirection!"),b())})};return b}(l.ProxyObject);a.RtpSenderReceiver=b;var m=function(a){function b(c,e,g,m){c=a.call(this,c,h.class_id_t.RTCRtpSender,e,g)||this;d.logger.log(c.user_friendly_id()+".constructor");c.dtmf_=
null;c.params_=k.RtcRtpSendParameters.defRtcRtpSendParameters();c.unified_=m;return c}e(b,a);b.prototype.dumpInfo=function(){d.logger.log("RtpSender["+this.object_id()+"].dumpInfo():");this.track&&this.track.dumpInfo()};b.prototype.syncBarrier=function(){var b=this;d.logger.log(this.user_friendly_id()+".syncBarrier() called.");return new Promise(function(c,e){b.syncBarrierDeep(c,e)&&b.waitUntilConnected("RtpSender.syncBarrier").then(function(){var c=a.prototype.syncBarrierBase.call(b);n.RemoteSession.isFeaturePstnSupported()&&
n.RemoteSession.isFeatureDtmfSupported()&&(c.push(b.remoteInvoke(!1,h.method_id_RTCRtpSender_t.dtmf,{oid:0})),c.push(b.remoteInvoke(!1,h.method_id_RTCRtpSender_t.getParameters)));return Promise.all(c)}).then(function(a){var c,e;c=b.syncBarrierBaseResults(a);e=c[0];c=c[1];a=a.slice(e).map(function(a){return b.param0(a)});e=a[0];b.params_=a[1];void 0==e||!1!==e.is_null||null!==b.dtmf_&&b.dtmf_.object_id()==e.oid||(b.dtmf_=new p(b,e.oid));Promise.all(c).then(function(a){b.syncBarrierBaseResultsWithAllPromisesFulFilled(a);
d.logger.log(b.user_friendly_id()+".syncBarrierBase success.");b.syncBarrierResolve(b)})["catch"](function(a){a=b.logRemoteInvokeError(a,".syncBarrier() promises_base failed!");b.syncBarrierReject(a)})})["catch"](function(a){a=b.logRemoteInvokeError(a,".syncBarrier failed!");b.syncBarrierReject(a)})})};b.getCapabilities=function(a){d.logger.log(this.constructor.name+".getCapabilities() called.");return w.NavigatorUserMedia.getCapabilities(a)};Object.defineProperty(b.prototype,"dtmf",{get:function(){d.logger.log(this.user_friendly_id()+
".get dtmf() called.");return this.dtmf_},enumerable:!1,configurable:!0});b.prototype.setParameters=function(a){return this.setParametersAsync(a)};b.prototype.setParametersAsync=function(a){var b=this;d.logger.log(this.user_friendly_id()+".setParametersAsync() called.");return new Promise(function(c,e){b.waitUntilConnected("RtpSender.setParametersAsync").then(function(){return Promise.all([b.remoteInvoke(!1,h.method_id_RTCRtpSender_t.setParameters,k.RtcRtpSendParameters.toRtcRtpSendParameters(a))])}).then(function(e){d.logger.log(b.user_friendly_id()+
".setParametersAsync(): success.");c();b.params_=k.RtcRtpSendParameters.toRtcRtpSendParameters(a)})["catch"](function(a){a=b.logRemoteInvokeError(a,".setParametersAsync() failed!");e(a)})})};b.prototype.getParameters=function(){d.logger.log(this.user_friendly_id()+".getParameters() called.");return this.getParametersInternal(!1)};b.prototype.getParametersAsync=function(){d.logger.log(this.user_friendly_id()+".getParametersAsync() called.");return this.getParametersInternal(!0)};b.prototype.getParametersInternal=
function(a){var b=this,c=new Promise(function(a,c){b.waitUntilConnected(b.user_friendly_id()+".getParametersInternal").then(function(){d.logger.log(b.user_friendly_id()+".getParametersInternal() remote invoking");return b.remoteInvoke(!1,h.method_id_RTCRtpSender_t.getParameters)}).then(function(c){b.params_=b.param0(c);d.logger.log(b.user_friendly_id()+".getParametersInternal() success returning: "+b.params_);a(k.RtcRtpSendParameters.toRTCRtpSendParameters(b.params_))})["catch"](function(a){a=b.logRemoteInvokeError(a,
".getParametersInternal() failed!");c(a)})});if(a)return c;d.logger.log(this.user_friendly_id()+".getParametersInternal() returning: "+this.params_);return k.RtcRtpSendParameters.toRTCRtpSendParameters(this.params_)};b.prototype.replaceTrack=function(a){var b=this;d.logger.log(this.user_friendly_id()+".replaceTrack() called. current track:"+(this.track_?this.track_.object_id():"null")+" with track="+(a?a.object_id():"null"));return new Promise(function(c,e){b.waitUntilConnected("RtpSender.replaceTrack").then(function(){return a||
n.RemoteSession.isFeatureWebrtc1dot0Supported()?a?b.remoteInvokeEx(!1,h.method_id_RTCRtpSender_t.replaceTrack,[a]):b.remoteInvoke(!1,h.method_id_RTCRtpSender_t.replaceTrack,{oid:-1}):Promise.reject(new DOMException("Does not support replace track with null in non-Unified SDP semantic!"))}).then(function(e){d.logger.log(b.user_friendly_id()+".replaceTrack(): success.");c();b.reinitTrack(a)})["catch"](function(a){a=b.logRemoteInvokeError(a,".replaceTrack() failed!");e(a)})})};return b}(b);a.RtpSender=
m;var D=function(a){function b(c,e,g,m,x){c=a.call(this,c,h.class_id_t.RTCRtpReceiver,e,g)||this;d.logger.log(c.user_friendly_id()+".constructor");c.contribsources_=[];c.syncsources_=[];c.params_=k.RtcRtpParameters.defRtcRtpParameters();c.unified_=m;x&&(c.track_=x);return c}e(b,a);b.prototype.dumpInfo=function(){d.logger.log("RtpReceiver["+this.object_id()+"].dumpInfo():");this.track&&this.track.dumpInfo();this.transport&&this.transport.dumpInfo()};b.prototype.syncBarrier=function(){var b=this;d.logger.log(this.user_friendly_id()+
".syncBarrier() called.");return new Promise(function(c,e){b.syncBarrierDeep(c,e)&&b.waitUntilConnected("RtpReceiver.syncBarrier").then(function(){var c=a.prototype.syncBarrierBase.call(b);n.RemoteSession.isFeaturePstnSupported()&&n.RemoteSession.isFeatureDtmfSupported()?(c.push(b.remoteInvoke(!1,h.method_id_RTCRtpReceiver_t.getContributingSources)),c.push(b.remoteInvoke(!1,h.method_id_RTCRtpReceiver_t.getSynchronizationSources)),c.push(b.remoteInvoke(!1,h.method_id_RTCRtpReceiver_t.getParameters))):
c.push(b.remoteInvoke(!1,h.method_id_RTCRtpReceiver_t.getContributingSources));return Promise.all(c)}).then(function(a){var c,e;c=b.syncBarrierBaseResults(a);e=c[0];c=c[1];a=a.slice(e).map(function(a){return b.param0(a)});b.contribsources_=a[0];b.syncsources_=a[1];b.params_=a[2];Promise.all(c).then(function(a){b.syncBarrierBaseResultsWithAllPromisesFulFilled(a);d.logger.log(b.user_friendly_id()+".syncBarrier success.");b.syncBarrierResolve(b)})["catch"](function(a){a=b.logRemoteInvokeError(a,".syncBarrier() promises_base failed!");
b.syncBarrierReject(a)})})["catch"](function(a){a=b.logRemoteInvokeError(a,".syncBarrier() failed!");b.syncBarrierReject(a)})})};b.getCapabilities=function(a){d.logger.log(this.constructor.name+".getCapabilities() called.");return w.NavigatorUserMedia.getCapabilities(a)};b.prototype.getContributingSources=function(){var a=this;d.logger.log(this.user_friendly_id()+".getContributingSources() called. "+JSON.stringify(this.contribsources_));this.waitUntilConnected("RtpReceiver.getContributingSources").then(function(){return Promise.all([a.remoteInvoke(!1,
h.method_id_RTCRtpReceiver_t.getContributingSources)])}).then(function(b){a.contribsources_=b.map(function(b){return a.param0(b)})[0];d.logger.log(a.user_friendly_id(),".getContributingSources() success: "+JSON.stringify(a.contribsources_))})["catch"](function(b){a.logRemoteInvokeError(b,".getContributingSources() failed!");a.contribsources_=[]});return this.contribsources_};b.prototype.getParameters=function(){var a=this;d.logger.log(this.user_friendly_id()+".getParameters() called.");this.waitUntilConnected(this.user_friendly_id()+
".getParameters").then(function(){d.logger.log(a.user_friendly_id()+".getParameters() remote invoking");return a.remoteInvoke(!1,h.method_id_RTCRtpReceiver_t.getParameters)}).then(function(b){d.logger.log(a.user_friendly_id()+".getParameters() success");a.params_=a.param0(b)})["catch"](function(b){a.logRemoteInvokeError(b,".getParameters() failed!")});d.logger.log(this.user_friendly_id()+".getParameters() returning: "+this.params_);return k.RtcRtpReceiveParameters.toRTCRtpReceiveParameters(this.params_)};
b.prototype.getSynchronizationSources=function(){d.logger.log(this.user_friendly_id()+".getSynchronizationSources() called.");return this.syncsources_};return b}(b);a.RtpReceiver=D},377:function(b,a,c){var e=this&&this.__extends||function(){var a=function(b,c){a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return a(b,c)};return function(b,c){function d(){this.constructor=b}a(b,c);b.prototype=null===
c?Object.create(c):(d.prototype=c.prototype,new d)}}();Object.defineProperty(a,"__esModule",{value:!0});a.RtpTransceiver=a.RtcRtpTransceiverInit=a.RtcRtpTransceiverDirection=void 0;var l=c(658),h=c(550),d=c(851),w=c(589),q=c(484),n;(function(a){a[a.sendrecv=0]="sendrecv";a[a.sendonly=1]="sendonly";a[a.recvonly=2]="recvonly";a[a.inactive=3]="inactive";a[a.stopped=4]="stopped"})(n=a.RtcRtpTransceiverDirection||(a.RtcRtpTransceiverDirection={}));var k=function(){function a(){}a.toRtcRtpTransceiverDirection=
function(a){switch(a){case "inactive":a=n.inactive;break;case "recvonly":a=n.recvonly;break;case "sendonly":a=n.sendonly;break;case "sendrecv":a=n.sendrecv;break;case "stopped":a=n.stopped;break;default:a=n.sendrecv}return a};a.toRTCRtpTransceiverDirection=function(a){switch(a){case n.inactive:a="inactive";break;case n.recvonly:a="recvonly";break;case n.sendonly:a="sendonly";break;case n.sendrecv:a="sendrecv";break;case n.stopped:a="stopped";break;default:a="sendrecv"}return a};a.toRtcRtpTransceiverInit=
function(b){d.logger.log("RtcRtpTransceiverInit.toRtcRtpTransceiverInit() in init:"+JSON.stringify(b));var c={};b&&(b.direction&&(c.direction=a.toRtcRtpTransceiverDirection(b.direction)),b.sendEncodings&&(c.sendEncodings=[],b.sendEncodings.forEach(function(a){return c.sendEncodings.push(q.RtcRtpEncodingParameters.toRtcRtpEncodingParameters(a))})),b.streams&&(c.streams=b.streams));d.logger.log("RtcRtpTransceiverInit.toRtcRtpTransceiverInit() out init:"+JSON.stringify(c));return c};return a}();a.RtcRtpTransceiverInit=
k;b=function(a){function b(c,e,k,m,q,y){c=a.call(this,c,h.class_id_t.RTCRtpTransceiver,e,k)||this;d.logger.log(c.user_friendly_id()+".constructor");c.unified_=m;c.sender_=new w.RtpSender(c,0,l.ProxyMode.Pseudo,m);c.receiver_=y?y:new w.RtpReceiver(c,0,l.ProxyMode.Pseudo,m);q?(c.direction_=q,c.currentDirection_=q):(c.direction_=n.sendrecv,c.currentDirection_=n.sendrecv);return c}e(b,a);b.prototype.dumpInfo=function(){d.logger.log(this.user_friendly_id()+".dumpInfo() [id="+this.mid+"] direction="+k.toRTCRtpTransceiverDirection(this.direction_)+
" currentDirection="+k.toRTCRtpTransceiverDirection(this.currentDirection_));this.sender&&this.sender.dumpInfo();this.receiver&&this.receiver.dumpInfo()};b.prototype.syncBarrier=function(){var a=this;d.logger.log(this.user_friendly_id()+".syncBarrier() called.");return new Promise(function(b,c){a.syncBarrierDeep(b,c)&&a.waitUntilConnected("RtpTransceiver.syncBarrier").then(function(){return Promise.all([a.remoteInvoke(!1,h.method_id_RTCRtpTransceiver_t.mid,""),a.remoteInvoke(!1,h.method_id_RTCRtpTransceiver_t.direction,
0),a.remoteInvoke(!1,h.method_id_RTCRtpTransceiver_t.currentDirection,0),a.remoteInvoke(!1,h.method_id_RTCRtpTransceiver_t.sender,{oid:0}),a.remoteInvoke(!1,h.method_id_RTCRtpTransceiver_t.receiver,{oid:0})])}).then(function(b){var c;d.logger.log(a.user_friendly_id()+".syncBarrier remote success.");c=b.map(function(b){return a.param0(b)});a.mid_=c[0];a.direction_=c[1];a.currentDirection_=c[2];b=c[3];c=c[4];var e=[];void 0!=b&&!1===b.is_null&&(a.sender_.bind(a,b.oid),e.push(a.sender_.syncBarrier()));
void 0!=c&&!1===c.is_null&&(a.receiver_.bind(a,c.oid),e.push(a.receiver_.syncBarrier()));if(0==e.length)d.logger.log(a.user_friendly_id()+".syncBarrier success"),a.syncBarrierResolve(a);else return d.logger.log(a.user_friendly_id()+".prop.syncBarrier start"),Promise.all(e)}).then(function(){d.logger.log(a.user_friendly_id()+".syncBarrier success");a.syncBarrierResolve(a)})["catch"](function(b){b=a.logRemoteInvokeError(b,".syncBarrier() failed!");a.syncBarrierReject(b)})})};Object.defineProperty(b.prototype,
"mid",{get:function(){d.logger.log(this.user_friendly_id()+".get_mid() called: "+this.mid_);return this.mid_},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"sender",{get:function(){return this.sender_},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"receiver",{get:function(){return this.receiver_},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"direction",{get:function(){d.logger.log(this.user_friendly_id()+".get_direction() called. "+k.toRTCRtpTransceiverDirection(this.direction_));
return k.toRTCRtpTransceiverDirection(this.direction_)},set:function(a){var b=this;d.logger.log(this.user_friendly_id()+".set_direction() called. "+a);this.direction_=k.toRtcRtpTransceiverDirection(a);this.waitUntilConnected("RtpTransceiver.set_direction").then(function(){return b.remoteInvoke(!0,h.method_id_RTCRtpTransceiver_t.direction,k.toRtcRtpTransceiverDirection(a))}).then(function(){d.logger.log(b.user_friendly_id()+".set_direction: success.")})["catch"](function(a){b.logRemoteInvokeError(a,
".set_direction() failed!")})},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"currentDirection",{get:function(){d.logger.log(this.user_friendly_id()+".get_currentDirection() called. "+k.toRTCRtpTransceiverDirection(this.currentDirection_));return k.toRTCRtpTransceiverDirection(this.currentDirection_)},enumerable:!1,configurable:!0});b.prototype.stop=function(){var a=this;d.logger.log(this.user_friendly_id()+".stop() called.");this.waitUntilConnected("RtpTransceiver.stop").then(function(){return a.remoteInvoke(!0,
h.method_id_RTCRtpTransceiver_t.stop)}).then(function(){d.logger.log(a.user_friendly_id()+".stop: success.")})["catch"](function(b){a.logRemoteInvokeError(b,".stop() failed!")})};b.prototype.setCodecPreferences=function(a){var b=this;d.logger.log(this.user_friendly_id()+".setCodecPreferences() called.");this.waitUntilConnected("RtpTransceiver.setCodecPreferences").then(function(){return b.remoteInvoke(!0,h.method_id_RTCRtpTransceiver_t.setCodecPreferences,a)}).then(function(){d.logger.log(b.user_friendly_id()+
".setCodecPreferences: success.")})["catch"](function(a){b.logRemoteInvokeError(a,".setCodecPreferences() failed!")})};return b}(l.ProxyObject);a.RtpTransceiver=b},973:function(b,a,c){function e(a,b){return void 0!==a.find(function(a){return a===b})}function l(a,b,c){b/=a.width;c/=a.height;var d=document.createElement("canvas"),e=d.getContext("2d");d.width=a.width*b;d.height=a.height*c;e.putImageData(a,0,0);if(1!=b||1!=c)e.scale(b,c),e.drawImage(d,0,0);return d}function h(a,b,c){a=l(a,b,c);b=document.createElement("img");
b.src=a.toDataURL();return b}function d(a,b,c,d){c="undefined"!==typeof c?c:D.Width;d="undefined"!==typeof d?d:D.Height;if(!0===b)return h(a,c,d);b=null;c==a.width&&d===a.height?b=a:(a=l(a,c,d),b=a.getContext("2d").getImageData(0,0,a.width,a.height));return b}var w=this&&this.__extends||function(){var a=function(b,c){a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return a(b,c)};return function(b,
c){function d(){this.constructor=b}a(b,c);b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}();Object.defineProperty(a,"__esModule",{value:!0});a.ScreenSource=a.ScreenSourceVda=a.ScreenSharingVda=a.ScreenSharingRemote=a.ScreenSharing=a.ImageDataRemote=void 0;var q=c(658),n=c(550),k=c(851),p=c(946),z=c(691),g=c(650),B;(function(a){a[a.Legacy=0]="Legacy";a[a.MonitorsAndApps=10]="MonitorsAndApps"})(B||(B={}));b=function(){return function(a,b,c){this.data=a;this.height=b;this.width=
c}}();a.ImageDataRemote=b;b=function(){function a(){this.local_=this.remote_=null}a.screenSharingInstance=function(b){a.instance||(a.instance=new a,b&&(a.instance.onscreentopologychanged=b));return a.instance};a.destroyInstance=function(){a.instance&&a.instance.remote_&&a.instance.remote_.release();a.instance=null};a.prototype.user_friendly_id=function(){return this.constructor.name+"[]"};Object.defineProperty(a.prototype,"onscreentopologychanged",{set:function(a){this.remote_||(this.remote_=new t);
this.remote_.onscreentopologychanged=a;this.local_||(this.local_=new m);this.local_.onscreentopologychanged=a},enumerable:!1,configurable:!0});a.prototype.getWindowsAsync=function(){var a=this;k.logger.log(this.user_friendly_id()+".getWindowsAsync() called.");null==this.local_&&(this.local_=new m);return new Promise(function(b,c){var d=[];a.local_.getWindowsAsync().then(function(c){c&&(d=c);k.logger.log(a.user_friendly_id()+".getWindowsAsync() returning sources");b(d)})["catch"](function(){k.logger.log("ScreenSharing.getWindowsAsync(): rejected");
b(d)})})};a.prototype.getScreensAsync=function(){var a=this;k.logger.log(this.user_friendly_id()+".getScreensAsync() called.");null==this.remote_&&(this.remote_=new t);return new Promise(function(b,c){var d=[];a.remote_.getScreensAsync().then(function(c){c&&(d=c);k.logger.log(a.user_friendly_id()+".getScreensAsync() returning sources");b(d)})["catch"](function(){k.logger.log("ScreenSharing.getScreensAsync(): rejected");b(d)})})};a.prototype.setActiveSource=function(a,b){var c=this;k.logger.log(this.user_friendly_id()+
".setActiveSource() called. id="+a+" appshare="+b);return new Promise(function(d,e){c.remote_.contains(a)?c.remote_.setActive(a).then(function(a){d(a)})["catch"](function(){k.logger.log("ScreenSharing.setActiveSource(): rejected");e()}):b?c.local_.contains(a)?c.local_.setActive(!0,a).then(function(a){d(a)})["catch"](function(){k.logger.log("ScreenSharing.setActiveSource(): rejected");e()}):(k.logger.log("ScreenSharing.setActiveSource(): legacy screen sharing"),d("")):(k.logger.log("ScreenSharing.setActiveSource(): legacy screen sharing"),
d(""))})};a.prototype.isAppshareActive=function(){return this.local_&&-1!==this.local_.lastActive};a.prototype.stopAppshare=function(){k.logger.log(this.user_friendly_id()+".stopAppshare() called.");this.local_&&this.local_.setActive(!1).then(function(a){k.logger.log("ScreenSharing.stopAppshare(): success, deviceid=",a)})["catch"](function(){k.logger.log("ScreenSharing.stopAppshare(): failure or timeout due to nonresponsive WS Agent")})};a.instance=null;return a}();a.ScreenSharing=b;var t=function(a){function b(){var c=
a.call(this,null,n.class_id_t.ScreenSharingRemote,0,q.ProxyMode.Local)||this;k.logger.log(c.user_friendly_id()+".constructor");c.sources_=[];return c}w(b,a);b.prototype.getSourceById=function(a){return this.sources_.find(function(b){return b.getId()==a})};b.prototype.contains=function(a){return void 0!==this.getSourceById(a)};Object.defineProperty(b.prototype,"onscreentopologychanged",{get:function(){return this.onscreentopologychanged_},set:function(a){var b=this;this.onscreentopologychanged_=a;
this.waitUntilConnected(this.user_friendly_id()+".onscreentopologychanged").then(function(){var a=b.registerCallbacks(!1,b.isNullCallback(b.onscreentopologychanged_),n.method_id_VDISharingRemote_t.onscreentopologychanged);a.then(function(){k.logger.log(b.user_friendly_id()+"onscreentopologychanged event received!!!");b.onscreentopologychanged_&&b.onscreentopologychanged_()});return b.remoteInvoke(!0,n.method_id_VDISharingRemote_t.onscreentopologychanged,a.success)})["catch"](function(a){b.logRemoteInvokeError(a,
".set_onscreentopologychanged() failed!")})},enumerable:!1,configurable:!0});b.prototype.getScreensAsync=function(){var a=this;k.logger.log(this.user_friendly_id()+".getScreensAsync() called.");var b=this.sources_;this.sources_=[];var c=p.getRedirector().vdabufferNoLimit()&&g.RemoteSession.isFeatureVdNoBufferLimitSupported();return new Promise(function(d,g){a.waitUntilConnected(a.user_friendly_id()+".getScreensAsync").then(function(){return a.remoteInvoke(!1,n.method_id_VDISharingRemote_t.getScreensAsync,
c)}).then(function(c){var h=[];c.params[0].forEach(function(c){var d=b.find(function(a){return a.object_id()===c.oid});void 0===d&&(k.logger.log(a.user_friendly_id()+" create a ScreenSource with oid:"+c.oid),d=new y(a,c.oid,q.ProxyMode.Remote));h.push(d.syncBarrier())});Promise.all(h.map(function(a){return a.then(function(a){return{value:a,status:"fulfilled"}},function(a){return{value:a,status:"rejected"}})})).then(function(c){var g=c.filter(function(a){return"fulfilled"===a.status}).map(function(a){return a.value});
a.sources_=g;b.filter(function(a){return!e(g,a)}).forEach(function(a){return a.release()});d(g)})["catch"](function(c){c=a.logRemoteInvokeError(c,".getScreensAsync() failed!");b.forEach(function(a){a.release()});g(c)})})["catch"](function(c){c=a.logRemoteInvokeError(c,".getScreensAsync() failed!");b.forEach(function(a){a.release()});g(c)})})};b.prototype.setActive=function(a){var b=this;k.logger.log(this.user_friendly_id()+".setActive() called. uniqueid="+a);return new Promise(function(c,d){-1!=a?
c(b.getSourceById(a).getDeviceId()):d()})};return b}(q.ProxyObject);a.ScreenSharingRemote=t;var m=function(){function a(){k.logger.log(this.user_friendly_id()+".constructor");this.sources_=[];this.lastactive_=-1}a.prototype.user_friendly_id=function(){return this.constructor.name+"[]"};Object.defineProperty(a.prototype,"onscreentopologychanged",{set:function(a){p.getRedirector().screenshare.setTopologyChangeCB(a)},enumerable:!1,configurable:!0});Object.defineProperty(a.prototype,"lastActive",{get:function(){return this.lastactive_},
enumerable:!1,configurable:!0});a.prototype.getSourceById=function(a){return this.sources_.find(function(b){return b.getId()==a})};a.prototype.contains=function(a){return void 0!==this.getSourceById(a)};a.prototype.getWindowsAsync=function(){var a=this;k.logger.log(this.user_friendly_id()+".getWindowsAsync() called.");var b=this.sources_;this.sources_=[];return new Promise(function(c,d){p.getRedirector().screenshare.getSources(new z.getSourcesReqData(2)).then(function(d){d=d.map(function(c){var d=
b.find(function(a){return a.equivalent(c)});return void 0!==d?(d.setDescription(c.getDescription()),c.getIcon().then(function(a){d.setIcon(a)})["catch"](function(){k.logger.log(a.user_friendly_id()+".getWindowsAsync() failed to retrieve new icon.")}),c.getPreviewAsync().then(function(a){d.setPreview(a)})["catch"](function(){k.logger.log(a.user_friendly_id()+".getWindowsAsync() failed to retrieve new preview.")}),d):c});if(-1!=a.lastactive_){var e=b.find(function(b){return b.getId()==a.lastactive_}),
g=d.find(function(b){return b.getId()==a.lastactive_});void 0!==e&&void 0===g&&d.push(e)}a.sources_=d;c(a.sources_)})["catch"](function(){k.logger.log(a.user_friendly_id()+".getWindowsAsync(): rejected");d()})})};a.prototype.activateSource=function(a,b){var c=this;return new Promise(function(d,e){var g=b?"activate":"deactivate";k.logger.log(c.user_friendly_id()+".activateSource() called. action="+g);var h=new z.setActiveReqData(a.srcid,a.hwnd,a.origin,a.pid,!0,!0,b);p.getRedirector().screenshare.setActive(h).then(function(b){k.logger.log(c.user_friendly_id()+
": "+g+" success: srcid="+b.srcid+" deviceid="+b.bufferid);a.deviceid=b.bufferid;d(b.bufferid)})["catch"](function(){k.logger.log(c.user_friendly_id()+"failed to "+g+": srcid="+a.srcid+", maybe WS Agent is too slow to respond");e()})})};a.prototype.setActive=function(a,b){var c=this;k.logger.log(this.user_friendly_id()+".setActive() called. uniqueid="+b);return new Promise(function(d,e){a||(b=c.lastactive_);-1!=b?(a?(b!=c.lastactive_&&-1!=c.lastactive_&&c.activateSource(c.getSourceById(c.lastactive_),
!1),c.lastactive_=b):c.lastactive_=-1,c.activateSource(c.getSourceById(b),a).then(function(b){d(a?"RemoteApplication-"+b:b)})["catch"](function(){e()})):e()})};return a}();a.ScreenSharingVda=m;var D=function(){function a(){}a.Width=140;a.Height=90;return a}();b=function(){function a(b,c,d,e,g,h,k,m,n,l){this.uniqueid_=y.nextId_++;this.srcid_=b;this.deviceid_=c;this.type_=d;this.imagedata_=e;this.icon_=g;this.name_=h;this.hwnd_=k;this.origin_=m;this.caption_=n;this.pid_=l}a.prototype.user_friendly_id=
function(){return this.constructor.name+"["+this.uniqueid_+"]"};Object.defineProperty(a.prototype,"srcid",{get:function(){return this.srcid_},enumerable:!1,configurable:!0});Object.defineProperty(a.prototype,"hwnd",{get:function(){return this.hwnd_},enumerable:!1,configurable:!0});Object.defineProperty(a.prototype,"origin",{get:function(){return this.origin_},enumerable:!1,configurable:!0});Object.defineProperty(a.prototype,"pid",{get:function(){return this.pid_},enumerable:!1,configurable:!0});a.prototype.getId=
function(){return this.uniqueid_};a.prototype.getDeviceId=function(){return this.deviceid_};Object.defineProperty(a.prototype,"deviceid",{set:function(a){this.deviceid_=a},enumerable:!1,configurable:!0});a.prototype.getType=function(){return 2};a.prototype.getPreview=function(a,b,c){k.logger.log(this.user_friendly_id()+".getPreview() called, width:"+a+" height:"+b+" asImage:"+c);return Promise.reject(null)};a.prototype.setPreview=function(a){this.imagedata_=a};a.prototype.getPreviewAsync=function(a,
b,c){k.logger.log(this.user_friendly_id()+".getPreviewAsync() called, width:"+a+" height:"+b);return!0===c?(a=h(this.imagedata_,D.Width,D.Height),Promise.resolve({data:a.src.replace(/^data:image\/(png|jpg);base64,/,"")})):Promise.resolve(this.imagedata_)};a.prototype.getPreviewImage=function(a,b,c){k.logger.log(this.user_friendly_id()+".getPreviewImage() called, width:"+b+" height:"+c);return Promise.resolve(d(this.imagedata_,a,b,c))};a.prototype.getDescription=function(){return this.name_};a.prototype.setDescription=
function(a){this.name_=a};a.prototype.getIcon=function(a,b,c){return!0===c?(a=h(this.icon_,D.Width,D.Height),Promise.resolve({data:a.src.replace(/^data:image\/(png|jpg);base64,/,"")})):Promise.resolve(this.icon_)};a.prototype.getIconImage=function(a,b,c){k.logger.log(this.user_friendly_id()+".getIconImage() called, width:"+b+" height:"+c);return Promise.resolve(d(this.icon_,a,"undefined"!==typeof b?b:this.icon_.width,"undefined"!==typeof c?c:this.icon_.height))};a.prototype.setIcon=function(a){this.icon_=
a};a.prototype.getBounds=function(){return{x:0,y:0,width:0,height:0}};a.prototype.equivalent=function(a){return this.pid_===a.pid_&&this.hwnd_===a.hwnd_};return a}();a.ScreenSourceVda=b;var y=function(a){function b(c,d,e){c=a.call(this,c,n.class_id_t.ScreenSource,d,e)||this;c.screenshare_=new z.ScreenShareUtil;c.uniqueid_=b.nextId_++;k.logger.log(c.user_friendly_id()+".constructor");return c}w(b,a);b.prototype.user_friendly_id=function(){return this.constructor.name+"["+this.uniqueid_+"]"};b.prototype.toJSImageData=
function(a){var b=atob(a.data.toString()),b=this.screenshare_.str2ab(b),b=new Uint8ClampedArray(b,0,b.byteLength);this.imagedata_=new ImageData(b,a.width,a.height)};b.prototype.syncBarrier=function(){var a=this;k.logger.log(this.user_friendly_id()+".syncBarrier() called.");return new Promise(function(b,c){a.syncBarrierDeep(b,c)&&a.waitUntilConnected(a.user_friendly_id()+".syncBarrier").then(function(){Promise.all([a.remoteInvoke(!1,n.method_id_ScreenSource_t.srcid,0),a.remoteInvoke(!1,n.method_id_ScreenSource_t.deviceid,
""),a.remoteInvoke(!1,n.method_id_ScreenSource_t.type,0),a.remoteInvoke(!1,n.method_id_ScreenSource_t.name,""),a.remoteInvoke(!1,n.method_id_ScreenSource_t.imagedata),a.remoteInvoke(!1,n.method_id_ScreenSource_t.hwnd,""),a.remoteInvoke(!1,n.method_id_ScreenSource_t.origin,0),a.remoteInvoke(!1,n.method_id_ScreenSource_t.caption,""),a.remoteInvoke(!1,n.method_id_ScreenSource_t.pid,0)]).then(function(b){k.logger.log(a.user_friendly_id()+".syncBarrier(): success.");var c;b=b.map(function(b){return a.param0(b)});
a.srcid_=b[0];a.deviceid_=b[1];a.type_=b[2];a.name_=b[3];c=b[4];a.hwnd_=b[5];a.origin_=b[6];a.caption_=b[7];a.pid_=b[8];a.toJSImageData(c);a.remoteInvoke(!1,n.method_id_ScreenSource_t.bounds,0).then(function(b){a.bounds_=a.param0(b);a.syncBarrierResolve(a)})["catch"](function(b){a.bounds_=void 0;b=a.logRemoteInvokeError(b,".prop.syncBarrier() getBounds failed.");a.syncBarrierReject(b)})})["catch"](function(b){b=a.logRemoteInvokeError(b,".prop.syncBarrier() failed.");a.syncBarrierReject(b)})})["catch"](function(b){b=
a.logRemoteInvokeError(b,".syncBarrier() failed.");a.syncBarrierReject(b)})})};b.prototype.getId=function(){return this.uniqueid_};b.prototype.getDeviceId=function(){return this.deviceid_};b.prototype.getType=function(){return 1};b.prototype.getPreview=function(a,b,c){k.logger.log(this.user_friendly_id()+".getPreview() called, width:"+a+" height:"+b+" asImage:"+c);return Promise.reject(null)};b.prototype.getPreviewAsync=function(a,b,c){k.logger.log(this.user_friendly_id()+".getPreviewAsync() called, width:"+
a+" height:"+b);return!0===c?(a=h(this.imagedata_,D.Width,D.Height),Promise.resolve({data:a.src.replace(/^data:image\/(png|jpg);base64,/,"")})):Promise.resolve(this.imagedata_)};b.prototype.getPreviewImage=function(a,b,c){k.logger.log(this.user_friendly_id()+".getPreviewImage() called, width:"+b+" height:"+c);return Promise.resolve(d(this.imagedata_,a,b,c))};b.prototype.getDescription=function(){return this.name_};b.prototype.getIcon=function(a,b){return Promise.resolve(this.imagedata_)};b.prototype.getBounds=
function(){return this.bounds_||{x:0,y:0,width:0,height:0}};b.nextId_=B.MonitorsAndApps;return b}(q.ProxyObject);a.ScreenSource=y},691:function(b,a,c){Object.defineProperty(a,"__esModule",{value:!0});a.ScreenShareUtil=a.Bitmap=a.BitmapInfoHeader=a.BitmapFileHeader=a.setActiveRespData=a.setActiveReqData=a.getSourcesReqData=a.sshare_state=a.sshare_cmd=void 0;var e=c(946),l=c(973),h=c(851),d;(function(a){a[a.Unknown=0]="Unknown";a[a.Cap=1]="Cap";a[a.GetSources=2]="GetSources";a[a.SetActive=3]="SetActive";
a[a.TopologyChanged=4]="TopologyChanged"})(d=a.sshare_cmd||(a.sshare_cmd={}));var w;(function(a){a[a.Unknown=0]="Unknown";a[a.Initialized=1]="Initialized";a[a.Error=2]="Error"})(w=a.sshare_state||(a.sshare_state={}));b=function(){return function(a){this.origin=a}}();a.getSourcesReqData=b;b=function(){return function(a,b,c,d,e,h,k){this.srcid=a;this.hwnd=b;this.origin=c;this.pid=d;this.border=e;this.cursor=h;this.activate=k}}();a.setActiveReqData=b;var q=function(){return function(a,b,c){this.srcid=
a;this.origin=b;this.bufferid=c}}();a.setActiveRespData=q;var n=function(){function a(b,c,d,e,g){this.id_=b;this.resolve_=c;this.reject_=d;this.cmd_=e;this.data_=g;this.sent_=!1;this.timeoutId=void 0}a.prototype.user_friendly_id=function(){return this.constructor.name+"["+this.id_+"]"};a.prototype.cmdString=function(){return this.cmd_==d.Cap?"Cap":this.cmd_==d.GetSources?"GetSources":this.cmd_==d.SetActive?"SetActive":"Unknown"};return a}(),k=function(){return function(){}}();a.BitmapFileHeader=k;
var p=function(){return function(){}}();a.BitmapInfoHeader=p;var z=function(){return function(){}}();a.Bitmap=z;b=function(){function a(){this.cmdque_=[]}a.prototype.reqid=function(){return a.nextId++};a.prototype.user_friendly_id=function(){return this.constructor.name+"[]"};a.prototype.stateString=function(){return a.state_==w.Initialized?"Initialized":a.state_==w.Error?"Error":"Unknown"};a.prototype.reset=function(){a.state_=w.Unknown;this.cmdque_=[]};a.prototype.dispatchCmds=function(){var b=
this;a.state_==w.Initialized?this.cmdque_.forEach(function(a){0==a.sent_&&(a.cmd_==d.GetSources?(b.WSSendGetSources(a.id_,a.data_),a.sent_=!0,a.timeoutId=setTimeout(b.abortCmd.bind(b,a.id_),5E3)):a.cmd_==d.SetActive?(b.WSSendSetActive(a.id_,a.data_),a.sent_=!0,a.timeoutId=setTimeout(b.abortCmd.bind(b,a.id_),5E3)):h.logger.log(a.user_friendly_id()+".dispatchCmds(): invalid cmd: "+a.cmdString()))}):a.state_==w.Error?(this.cmdque_.forEach(function(a){h.logger.log(a.user_friendly_id()+".dispatchCmds(): purging cmd: "+
a.cmdString());a.reject_()}),this.cmdque_=[]):h.logger.log(this.user_friendly_id()+".dispatchCmds(): invalid state: "+this.stateString())};a.prototype.abortCmd=function(a){var b=this.cmdque_.findIndex(function(b){return b.id_===a});-1!==b?(b=this.cmdque_.splice(b,1)[0],h.logger.log(b.user_friendly_id()+NaN+b.cmdString()+"]: aborted due to nonresponsive WS Agent!"),b.cmd_===d.SetActive&&b.data_.activate&&l.ScreenSharing.screenSharingInstance().stopAppshare(),b.reject_()):h.logger.log(this.user_friendly_id()+
".abortCmd(): Cmd not found!")};a.prototype.finalizeCmd=function(a,b,c){for(var d=0;d<this.cmdque_.length;d++){var e=this.cmdque_[d];if(void 0!=b&&b==e.id_&&1==e.sent_||void 0==b&&1==e.sent_){clearTimeout(e.timeoutId);h.logger.log(e.user_friendly_id()+".finalizeCmd(): purging cmd: "+e.cmdString());a?void 0!=c?e.resolve_(c):e.resolve_():e.reject_();this.cmdque_.splice(d,1);break}}};a.prototype.onInitialized=function(b){h.logger.log(this.user_friendly_id()+".onInitialized(): init: "+b+" state:"+this.stateString());
a.state_!=w.Initialized&&(a.state_=b?w.Initialized:w.Error);this.dispatchCmds()};a.prototype.onInitComplete=function(){h.logger.log(this.user_friendly_id()+".onInitComplete(): state:"+this.stateString());a.state_==w.Unknown&&(a.state_=w.Error,h.logger.log(this.user_friendly_id()+".onInitComplete(): items in queue:"+this.cmdque_.length),this.dispatchCmds())};a.prototype.onError=function(b){h.logger.log(this.user_friendly_id()+".onError(): state: "+this.stateString());a.state_==w.Unknown?(a.state_=
w.Error,this.dispatchCmds()):a.state_==w.Initialized&&this.finalizeCmd(!1,b)};a.prototype.ab2str=function(a){return String.fromCharCode.apply(null,new Uint8Array(a))};a.prototype.str2ab=function(a){for(var b=new ArrayBuffer(a.length),c=new Uint8Array(b),d=0,e=a.length;d<e;d++)c[d]=a.charCodeAt(d);return b};a.prototype.getBMP=function(a){var b=new DataView(a),c=new z;c.fileheader=new k;c.fileheader.bfType=b.getUint16(0,!0);c.fileheader.bfSize=b.getUint32(2,!0);c.fileheader.bfReserved1=b.getUint16(6,
!0);c.fileheader.bfReserved2=b.getUint16(8,!0);c.fileheader.bfOffBits=b.getUint32(10,!0);c.infoheader=new p;c.infoheader.biSize=b.getUint32(14,!0);c.infoheader.biWidth=b.getUint32(18,!0);c.infoheader.biHeight=b.getUint32(22,!0);c.infoheader.biPlanes=b.getUint16(26,!0);c.infoheader.biBitCount=b.getUint16(28,!0);c.infoheader.biCompression=b.getUint32(30,!0);c.infoheader.biSizeImage=b.getUint32(34,!0);c.infoheader.biXPelsPerMeter=b.getUint32(38,!0);c.infoheader.biYPelsPerMeter=b.getUint32(42,!0);c.infoheader.biClrUsed=
b.getUint32(46,!0);c.infoheader.biClrImportant=b.getUint32(50,!0);b=c.fileheader.bfOffBits;c.stride=4*Math.floor((c.infoheader.biBitCount*c.infoheader.biWidth+31)/32);c.pixels=new Uint8Array(a,b);return c};a.prototype.convertToImageData=function(a){var b=document.createElement("canvas").getContext("2d"),c=a.infoheader.biWidth,d=a.infoheader.biHeight,b=b.createImageData(c,d),e=b.data,g=a.pixels;a=a.stride;for(var h=0;h<d;++h)for(var k=0;k<c;++k){var l=4*(k+c*(d-h)),n=4*k+a*h;e[l]=g[n+2];e[l+1]=g[n+
1];e[l+2]=g[n];e[l+3]=255}return b};a.prototype.onGetSources=function(a,b){this.sources_=[];var c=this;b.sources.forEach(function(a){var b=a.image,d=atob(b.data),d=c.str2ab(d),d=new Uint8ClampedArray(d,0,d.byteLength),b=new ImageData(d,b.width,b.height),d=a.icon,e=atob(d.data),e=c.str2ab(e),e=new Uint8ClampedArray(e,0,e.byteLength),d=new ImageData(e,d.width,d.height);a=new l.ScreenSourceVda(a.srcid,a.devicdid,a.type,b,d,a.name,a.hwnd,a.origin,a.caption,a.pid);c.sources_.push(a)});this.finalizeCmd(!0,
a,this.sources_)};a.prototype.getSources=function(b){var c=this;return new Promise(function(e,h){if(a.state_!=w.Error){var k=new n(c.reqid(),e,h,d.GetSources,b);c.cmdque_.push(k)}else h();a.state_==w.Initialized&&c.dispatchCmds()})};a.prototype.onSetActive=function(a,b){var c=new q(b.srcid,b.origin,b.bufferid);this.finalizeCmd(!0,a,c)};a.prototype.setActive=function(b){var c=this;return new Promise(function(e,h){if(a.state_!=w.Error){var k=new n(c.reqid(),e,h,d.SetActive,b);c.cmdque_.push(k)}else h();
a.state_==w.Initialized&&c.dispatchCmds()})};a.prototype.setTopologyChangeCB=function(a){this.onwindowtopologychanged_=a};a.prototype.onToplogyChanged=function(){if(this.onwindowtopologychanged_)this.onwindowtopologychanged_()};a.prototype.WSSendGetSources=function(a,b){try{e.getRedirector().WSSendObject({v:"appsharing",hdr:{command:d.GetSources,id:a},data:{origin:b.origin}})}catch(c){h.logger.log(c)}};a.prototype.WSSendSetActive=function(a,b){try{e.getRedirector().WSSendObject({v:"appsharing",hdr:{command:d.SetActive,
id:a},data:{srcid:b.srcid,hwnd:b.hwnd,origin:b.origin,pid:b.pid,border:b.border,cursor:b.cursor,activate:b.activate}})}catch(c){h.logger.log(c)}};a.state_=w.Unknown;a.nextId=0;return a}();a.ScreenShareUtil=b},517:function(b,a){Object.defineProperty(a,"__esModule",{value:!0});a.Stats=a.StatsReport=void 0;var c=function(){function a(){this.items=[]}a.fromJSON=function(b){for(var c=new a,l=0;l<b.length;l++){var q=e.fromJSON(b[l]);c.items.push(q)}return c};a.toRTCStatsReport=function(a){return a};a.prototype.toJSON=
function(){return JSON.stringify(this.items)};a.prototype.result=function(){return this.items};return a}();a.StatsReport=c;var e=function(){function a(){this.names_=[];this.stat_=new Map;this.id="";this.timestamp=0;this.type=""}a.fromJSON=function(b){var c=new a;c.id=b.id||"";c.timestamp=b.timestamp||"";c.type=b.type||"";Object.keys(b).forEach(function(a){"id"!==a&&"timestamp"!==a&&"type"!==a&&(c.names_.push(a),c.stat_.set(a,b[a]))});return c};a.prototype.toJSON=function(){return JSON.stringify({id:this.id,
timestamp:this.timestamp,type:this.type,stat:this.stat_})};a.prototype.names=function(){return this.names_};a.prototype.stat=function(a){return this.stat_.get(a)};return a}();a.Stats=e},704:function(b,a,c){var e=this&&this.__extends||function(){var a=function(b,c){a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return a(b,c)};return function(b,c){function d(){this.constructor=b}a(b,c);b.prototype=
null===c?Object.create(c):(d.prototype=c.prototype,new d)}}();Object.defineProperty(a,"__esModule",{value:!0});a.StreamResolution=a.RemoteCallConstraints=void 0;var l=c(550),h=c(658),d=c(851);b=function(){return function(){}}();a.RemoteCallConstraints=b;b=function(a){function b(){var c=a.call(this,null,l.class_id_t.StreamResolution,0,h.ProxyMode.Local)||this;c.lastSentConstraints_=null;return c}e(b,a);Object.defineProperty(b.prototype,"onupdate",{get:function(){return this.onupdate_},set:function(a){var c=
this;this.onupdate_=a;this.waitUntilConnected(this.user_friendly_id()+".onupdate").then(function(){var a=c.registerCallbacks(!1,c.isNullCallback(c.onupdate_),l.method_id_StreamResolution_t.onupdate);a.then(function(a){a=a.params;var e=a[0];a.slice(1);d.logger.log(c.user_friendly_id()+".onupdate",JSON.stringify(e));c.lastSentConstraints_&&JSON.stringify(c.lastSentConstraints_)==JSON.stringify(e)?d.logger.log(c.user_friendly_id()+".onupdate constraints unchanged, ignoring"):c.onupdate_&&(b.isValidRemoteConstraints(e)?
(c.lastSentConstraints_=e,c.onupdate_(c.toICallConstraints(c.lastSentConstraints_))):d.logger.log(c.user_friendly_id()+".onupdate invalid RemoteCallConstraints"))});return c.remoteInvoke(!0,l.method_id_StreamResolution_t.onupdate,a.success)})["catch"](function(){return d.logger.log(c.user_friendly_id()+".onupdate, could not set listener")})},enumerable:!1,configurable:!0});b.prototype.toICallConstraints=function(a){var b={maxParticipantResolutions:null};if(a.max_participant_resolutions_dynamic){b.maxParticipantResolutions=
{};for(var c=0,e=a.max_participant_resolutions_dynamic;c<e.length;c++){var g=e[c];b.maxParticipantResolutions[g.count]=g.resolution}}else a.max_participant_resolutions_static&&(b.maxParticipantResolutions=a.max_participant_resolutions_static);b.maxIncomingStreams=a.max_incoming_streams;b.maxOutgoingResolution=a.max_outgoing_resolution;b.maxSimulcastLayers=a.max_simulcast_layers;d.logger.log(this.user_friendly_id()+".toICallConstraints: "+JSON.stringify(b));return b};b.isValidRemoteConstraints=function(a){return null!=
a&&(null!=a.max_participant_resolutions_dynamic||null!=a.max_participant_resolutions_static)&&null!=a.max_incoming_streams&&null!=a.max_outgoing_resolution&&null!=a.max_simulcast_layers};b.prototype.getCallConstraints=function(){var a=this;return new Promise(function(c,e){a.waitUntilConnected(a.user_friendly_id()+".getCallConstraints").then(function(){return a.remoteInvoke(!1,l.method_id_StreamResolution_t.getCallConstraints)}).then(function(h){h=a.param0(h);d.logger.log(a.user_friendly_id()+".getCallConstraints",
JSON.stringify(h));b.isValidRemoteConstraints(h)?(a.onupdate_&&(a.lastSentConstraints_=h),c(a.toICallConstraints(h))):(d.logger.log(a.user_friendly_id()+".getCallConstraints invalid RemoteCallConstraints"),e())})["catch"](function(){d.logger.log(a.user_friendly_id()+".getCallConstraints promise rejected");e()})})};b.getDefaultConstraints=function(){var a={maxParticipantResolutions:{1:720,2:720,3:360,more:360},maxIncomingStreams:4,maxOutgoingResolution:720,maxSimulcastLayers:0};d.logger.log("StreamResolution.getDefaultConstraints: "+
JSON.stringify(a));return a};b.prototype.updateStreamResolution=function(){var a=this;this.getCallConstraints().then(function(b){return a.onupdate&&a.onupdate(b)})["catch"](function(){return d.logger.log("Failed to get stream resolution information!")})};return b}(h.ProxyObject);a.StreamResolution=b},394:function(b,a,c){Object.defineProperty(a,"__esModule",{value:!0});a.Telemetry=a.tel_key_CPUTotalmemory=a.tel_key_CPUGpuinfo=a.tel_key_CPUMachineid=a.tel_key_CPUProcessors=a.tel_key_CPUCores=a.tel_key_CPUModel=
a.tel_key_CPUSpeed=a.tel_key_OSEdition=a.tel_key_OSDistro=a.tel_key_OSArchitecture=a.tel_key_OSVersion=a.tel_key_OSFamily=a.tel_key_VerHdxRtcEngine=a.tel_key_VerTypeScript=a.tel_key_VerEndpoint=a.tel_key_VerVda=a.tel_key_VerReceiver=a.tel_key_VerWebrtcCodecs=a.tel_key_VerWebrpc=a.tel_key_PerfCallType=a.tel_key_PerfCallState=a.tel_key_PerfCallDirection=a.tel_key_SpeakerDeviceUsed=a.tel_key_VideoDeviceUsed=a.tel_key_AudioDeviceUsed=a.tel_key_CallEstOutgoing=a.tel_key_CallEstIncoming=a.tel_key_ScreensharingCallDuration=
a.tel_key_VideoCallDuration=a.tel_key_AudioCallDuration=a.tel_key_ConferenceCallDuration=a.tel_cmd=a.tel_CallType=a.tel_CallDirection=a.tel_CallState=void 0;var e=c(946),l=c(851);(function(a){a[a.unknown=0]="unknown";a[a.active=1]="active";a[a.idle=2]="idle"})(a.tel_CallState||(a.tel_CallState={}));(function(a){a[a.unknown=0]="unknown";a[a.incoming=1]="incoming";a[a.outgoing=2]="outgoing"})(a.tel_CallDirection||(a.tel_CallDirection={}));(function(a){a[a.unknown=0]="unknown";a[a.audio=1]="audio";a[a.video=
2]="video";a[a.multi=3]="multi";a[a.dshare=4]="dshare"})(a.tel_CallType||(a.tel_CallType={}));var h;(function(a){a[a.Unknown=0]="Unknown";a[a.Cap=1]="Cap";a[a.Init=2]="Init";a[a.Data=3]="Data"})(h=a.tel_cmd||(a.tel_cmd={}));a.tel_key_ConferenceCallDuration="ConferenceCallDuration";a.tel_key_AudioCallDuration="AudioCallDuration";a.tel_key_VideoCallDuration="VideoCallDuration";a.tel_key_ScreensharingCallDuration="ScreensharingCallDuration";a.tel_key_CallEstIncoming="CallEstIncoming";a.tel_key_CallEstOutgoing=
"CallEstOutgoing";a.tel_key_AudioDeviceUsed="AudioDeviceUsed";a.tel_key_VideoDeviceUsed="VideoDeviceUsed";a.tel_key_SpeakerDeviceUsed="SpeakerDeviceUsed";a.tel_key_PerfCallDirection="PerfCallDirection";a.tel_key_PerfCallState="PerfCallState";a.tel_key_PerfCallType="PerfCallType";a.tel_key_VerWebrpc="VerWebrpc";a.tel_key_VerWebrtcCodecs="VerWebrtcCodecs";a.tel_key_VerReceiver="VerReceiver";a.tel_key_VerVda="VerVda";a.tel_key_VerEndpoint="VerEndpoint";a.tel_key_VerTypeScript="VerTypeScript";a.tel_key_VerHdxRtcEngine=
"VerHdxRtcEngine";a.tel_key_OSFamily="OSFamily";a.tel_key_OSVersion="OSVersion";a.tel_key_OSArchitecture="OSArchitecture";a.tel_key_OSDistro="OSDistro";a.tel_key_OSEdition="OSEdition";a.tel_key_CPUSpeed="CPUSpeed";a.tel_key_CPUModel="CPUModel";a.tel_key_CPUCores="CPUCores";a.tel_key_CPUProcessors="CPUProcessors";a.tel_key_CPUMachineid="CPUMachineid";a.tel_key_CPUGpuinfo="CPUGpuinfo";a.tel_key_CPUTotalmemory="CPUTotalmemory";var d=function(){function a(b,c,d,e){this.cmd=b;this.key=c;this.value=d;this.flags=
e}a.prototype.SendTelemetryData=function(a){a.SendTelemetryData(this.cmd,this.key,this.value,this.flags)};return a}();b=function(){function a(){this.id=0;this.deferredData=[]}a.prototype.reset=function(){this.id=0;this.deferredData=[]};a.prototype.onInitialized=function(a){for(this.id=a;this.deferredData&&0<this.deferredData.length;)this.deferredData.shift().SendTelemetryData(this)};a.prototype.SendTelemetryInit=function(){0<this.id&&this.reset();try{e.getRedirector().WSSendObject({v:"telemetry",
hdr:{command:h.Init,id:0},init:{domain:"HDXMM Teams",subdomain:"Teams",feature:"msteams",version:"1.1.1.1"}})}catch(a){l.logger.log(a)}};a.prototype.SendTelemetryData=function(a,b,c,w){if(a!=h.Data)l.logger.log("invalid telemetry command!");else if(0==this.id)this.deferredData.push(new d(a,b,c,w));else try{e.getRedirector().WSSendObject({v:"telemetry",hdr:{command:a,id:this.id},data:{key:b,value:c,flags:w}})}catch(p){l.logger.log(p)}};return a}();a.Telemetry=b},259:function(b,a,c){Object.defineProperty(a,
"__esModule",{value:!0});a.Util=void 0;var e=c(851);b=function(){function a(){}a.stringifyArray=function(a){for(var b="[",c=0;c<a.length;++c)0!=c&&(b+=","),b+=this.stringify(a[c]);return b+"]"};a.stringifyObject=function(a){var b="{",c=!0,e;for(e in a)c?c=!1:b+=",",b=b+'"'+e+'":',b=a[e]instanceof Array?b+this.stringifyArray(a[e]):"object"==typeof a[e]?b+this.stringifyObject(a[e]):b+JSON.stringify(a[e]);return b+"}"};a.stringify=function(a){return"object"==typeof a?"[object Array]"==Object.prototype.toString.call(a)?
this.stringifyArray(a):this.stringifyObject(a):JSON.stringify(a)};a.GetObjectPropertyDescriptor=function(a,b){for(var c=void 0;a!=Object.prototype;){c=Object.getOwnPropertyDescriptor(a,b);if(void 0!==c)break;a=a.__proto__}return c};a.sendEvent=function(a,b){try{var c=document.createEvent("Event");c.initEvent(b,!0,!0);a.dispatchEvent(c)}catch(l){e.logger.log('sendEvent(): exception dispatching "'+b+'" event: '+l.message)}};a.hasValue=function(a){var b=!1;null!==a&&void 0!==a&&(b=!0);return b};return a}();
a.Util=b},307:function(b,a,c){var e=this&&this.__awaiter||function(a,b,c,d){function e(a){return a instanceof c?a:new c(function(b){b(a)})}return new (c||(c=Promise))(function(c,g){function h(a){try{l(d.next(a))}catch(b){g(b)}}function k(a){try{l(d["throw"](a))}catch(b){g(b)}}function l(a){a.done?c(a.value):e(a.value).then(h,k)}l((d=d.apply(a,b||[])).next())})},l=this&&this.__generator||function(a,b){function c(a){return function(b){return d([a,b])}}function d(c){if(g)throw new TypeError("Generator is already executing.");
for(;e;)try{if(g=1,h&&(k=c[0]&2?h["return"]:c[0]?h["throw"]||((k=h["return"])&&k.call(h),0):h.next)&&!(k=k.call(h,c[1])).done)return k;if(h=0,k)c=[c[0]&2,k.value];switch(c[0]){case 0:case 1:k=c;break;case 4:return e.label++,{value:c[1],done:!1};case 5:e.label++;h=c[1];c=[0];continue;case 7:c=e.ops.pop();e.trys.pop();continue;default:if(!(k=e.trys,k=0<k.length&&k[k.length-1])&&(6===c[0]||2===c[0])){e=0;continue}if(3===c[0]&&(!k||c[1]>k[0]&&c[1]<k[3]))e.label=c[1];else if(6===c[0]&&e.label<k[1])e.label=
k[1],k=c;else if(k&&e.label<k[2])e.label=k[2],e.ops.push(c);else{k[2]&&e.ops.pop();e.trys.pop();continue}}c=b.call(a,e)}catch(l){c=[6,l],h=0}finally{g=k=0}if(c[0]&5)throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}var e={label:0,sent:function(){if(k[0]&1)throw k[1];return k[1]},trys:[],ops:[]},g,h,k,l;$jscomp.initSymbol();$jscomp.initSymbol();$jscomp.initSymbolIterator();return l={next:c(0),"throw":c(1),"return":c(2)},"function"===typeof Symbol&&(l[Symbol.iterator]=function(){return this}),l},h=
c(360),d=c(144);c(679);var p=c(945),q=c(368),n=c(851).logger,k=c(650),v=c(973),z=c(247).getGC,g=c(946),B=c(613).E911Service;b=c(550);var t=b.Features,m=b.FEATURE_vda_delete_viewport,D=c(704).StreamResolution,y=c(239).E;(function(a,b){a.CitrixWebRTC=b()})("undefined"!==typeof self?self:this,function(){function a(b,c){n.log("VDI Shim createMediaStreamInternal");G();var f=new d.RemoteStream(null,0,0,b),e=new Promise(function(a,b){f.syncBarrier().then(function(b){n.log("stream.syncBarrier(): success.");
a(b)})["catch"](function(a){n.log("stream.syncBarrier(): failed with error: "+JSON.stringify(a));f.release();b()})});return c?e:f}function b(a){null==Y&&(Y=new q.Frames(!O.isFeatureSupported(t.FEATURE_public_multi_window)));a(Y)}function c(a,d){b(function(b){var c=b.findFrame(a);void 0==c&&(c=b.newFrame(a));d(c)})}function M(a,c){b(function(b){b=b.findFrame(a);null!=b&&c(b)})}function F(a){g.getRedirector().SendTelemetryData_Speaker(a)}function J(a,b){if(S)try{"vdiE911InfoChanged"===a?a="vdiE911DataChanged":
"vdiCallConstraintsChanged"===a&&(a="vdiStreamConstraintsChanged");var c=Object.assign({event:a},b);n.log("Dispatching VM event:"+JSON.stringify(c));S(c)}catch(d){n.log("Exception onVMEvent(), eventName:"+a+" message:"+d.message)}}function G(){var a=window.getCitrixWebrtcRedir;void 0!==a?a().then(function(a){n.log("sucesss on connect, getCitrixWebrtcRedir reg value:"+a);"1"!==a||O||(n.log("supported client"),P(W))})["catch"](function(){n.log("Failure to Read Webrtc redir Reg Key");f()}):(n.log("window.getCitrixWebrtcRedir() method is not available yet"),
f())}function L(a){n.log("VDI Event: vdiClientDisconnected");ba();if(!0===a&&!1===aa){n.log("VDI Event: vdiClientDisconnected with failure reported");aa=!0;try{S({event:"vdiClientDisconnected",reason:"failure",msg:"Websocket Connection Failure"})}catch(b){n.log("onVMEvent(): exception: "+b.message)}}else{aa=!1;try{S({event:"vdiClientDisconnected",reason:"endpointDisconnected"})}catch(b){n.log("onVMEvent(): exception: "+b.message)}}}function P(a){n.log("initRemoteSession with vendor:"+a);O||(O=new k.RemoteSession("CitrixWebRTCSDK",
a))}function C(){n.log("VDI Event: onVdiClientDisconnectedTimer");P(W)}function R(){var a=this;n.log("VDI Shim onVdiClientConnected...");O?O.getSessionInfo().then(function(c){return e(a,void 0,void 0,function(){return l(this,function(a){switch(a.label){case 0:return n.log("VDI Shim onVdiClientConnected, client endpoint info:"+JSON.stringify(c)),H&&H.isValid()||(H=new d.RemoteDevices),I&&I.isValid()||(I=new d.NavigatorUserMedia),b(function(a){a.reconnect()}),J("vdiClientConnected",{version:c,endpointId:c.endpointId}),
[4,I.getCapabilities().then(function(a){n.log("VDI Shim onVdiClientConnected, caps = "+a)})["catch"](function(){n.log("VDI Shim onVdiClientConnected, could not get capabilities")})];case 1:return a.sent(),T||(T=new B,T.onupdate=function(a){J("vdiE911InfoChanged",a)},T.updateE911Info()),U||(J("vdiCallConstraintsChanged",D.getDefaultConstraints()),null!==O&&k.RemoteSession.isFeatureCallConstraintsSupported()&&(U=new D,U.onupdate=function(a){J("vdiCallConstraintsChanged",a)},U.updateStreamResolution())),
navigator.mediaDevices.dispatchEvent(new CustomEvent("devicechange")),[2]}})})})["catch"](function(){n.log("VDI Shim onVdiClientConnected, getSessionInfo failure! Session is not fully connected yet...")}):n.log("VDI Shim onVdiClientConnected, remoteSession does not exist")}function K(a){if("1"===a)n.log("Supported client"),g.getRedirector().pingConnectionBegin(!0);else if("0"===a){n.log("VDI Event: Unsupported client reported");try{S({event:"vdiClientDisconnected",reason:"endpointUnsupported",msg:"Unsupported endpoint connected"})}catch(b){n.log("onVMEvent(): exception: "+
b.message)}}else n.log("Citrix Webrtc Redir Reg Key value is incorrect")}function f(){!1===Z&&(n.log("starting MS Reg retry..."),Z=!0,X(10))}function X(a){if(0>=a){Z=!1;n.log("VDI Event: Reg Key not Updated after timer reported, Fallback");try{S({event:"vdiClientDisconnected",reason:"failure",msg:"Citrix Webrtc Redir Reg Key not Present"})}catch(b){n.log("onVMEvent(): exception: "+b.message)}}else{var c=window.getCitrixWebrtcRedir;void 0!==c?c().then(function(b){n.log("CitrixMSTeamsRedir reg value:"+
b);"0"===b||"1"===b?(K(b),Z=!1):(n.log("MS Teams Redir Reg key not updated - Start timer"),setTimeout(function(){n.log("Timer waiting for registry to be updated count :"+a);X(--a)},1E3))})["catch"](function(){n.log("Failure to Read MS Teams redir Reg Key - Start timer");setTimeout(function(){n.log("Timer waiting for registry to be updated count :"+a);X(--a)},1E3)}):(n.log("window.getCitrixWebrtcRedir() method is not available yet"),setTimeout(function(){n.log("Timer waiting for registry to be updated count :"+
a);X(--a)},1E3))}}function ba(){n.log("VDI : cleanup");g.getRedirector().clearReqs();d.NavigatorUserMedia.resetCapabilities();Y=H=I=null;N&&N.release();O&&O.release();O=null;v.ScreenSharing.destroyInstance();T&&(T.release(),T=null);U&&(U.release(),U=null);z().reset();n.log("VDI : cleanup done")}function ca(){return v.ScreenSharing.screenSharingInstance(function(){if(S)try{S({event:"vdiScreenTopologyChanged"})}catch(a){n.log("onVMEvent('vdiScreenTopologyChanged'): exception: "+a.message)}})}function E(a){if(!V)throw n.log("VDI Shim "+
a+": throwing exception: not initialized!!"),new DOMException("UCSDK is not initialized!!!");}var I=null,da=d.NavigatorUserMedia.getCapabilities,H=null,Y=null,N=null,S=null,T=null,U=null,aa=!1,O=void 0,Z=!1,V=!1,W=void 0;return{Features:t,CitrixPeerConnection:h.PeerConnection,getUserMedia:function(a,b,c){E("getUserMedia");G();n.log("VDI Shim getUserMedia");null!==I&&I.isValid()||(I=new d.NavigatorUserMedia);var f=d.RemoteMediaStreamConstraints.isConstraintsAudioDeviceIdEmpty(a),e=d.RemoteMediaStreamConstraints.isConstraintsVideoSourceIdEmpty(a);
return f||e?new Promise(function(d,f){H.enumerateDevices().then(function(d){return I.webkitGetUserMedia(a,b,c)}).then(function(a){n.log("webkitGetUserMedia for default was resolved");d(a)})["catch"](function(a){n.log("getUserMedia() for default failed with error:"+JSON.stringify(a));f()})}):I.webkitGetUserMedia(a,b,c)},getDisplayMedia:function(a){E("getDisplayMedia");G();n.log("VDI Shim getDisplayMedia");null!==H&&H.isValid()||(H=new d.RemoteDevices);return H.getDisplayMedia(a)},enumerateDevices:function(){E("enumerateDevices");
G();n.log("VDI Shim enumerateDevices");null!==H&&H.isValid()||(H=new d.RemoteDevices);return H.enumerateDevices()},onWindowClose:function(a,c,d){E("onWindowClose");n.log("VDI Shim onWindowClose: (handle: "+a+")");g.getRedirector().getVDAFeatureValue(m)&&b(function(b){b.disposeFrame(a)})},setClientAreaOffset:function(a,b,d){E("setClientAreaOffset");n.log("VDI setClientAreaOffset with xOffset = "+a+", yOffset = "+b+", windowHandle = "+d);G();c(d,function(c){c.setClientAreaOffset(a,b)})},mapVideoElement:function(a,
b){E("mapVideoElement");n.log("VDI New Video Element Created, Creating Mapping to Thin Client DOM");G();c(b,function(b){b.newVideoElement(a)})},mapAudioElement:function(a){E("mapAudioElement");n.log("VDI New Audio Element Created, Creating Mapping to VDA");if(void 0!==a.remoteAudioElement)n.log("Audio element is already configured!");else{G();delete a.remoteAudioElement;Object.defineProperty(a,"remoteAudioElement",{writable:!0,configurable:!0,value:null});a.remoteAudioElement=new p.AudioElement;delete a.sinkId;
Object.defineProperty(a,"sinkId",{configurable:!0,get:function(){return a.remoteAudioElement?a.remoteAudioElement.sinkId:void 0},set:function(b){n.log("VDI Shim set audio element SinkId value = "+b);a.setSinkId(b).then(function(){n.log("VDI Shim set audio element SinkId success")})["catch"](function(){n.log("VDI Shim set audio element SinkId failure")})}});var b=a.remoteAudioElement.play;a.play=function(){n.log("VDI Shim remote audio play");return b.apply(a.remoteAudioElement,arguments)};var c=a.remoteAudioElement.pause;
a.pause=function(){n.log("VDI Shim remote audio pause");return c.apply(a.remoteAudioElement,arguments)};a.setSinkId=function(b){n.log("VDI Shim set audio element SinkId value = "+b);var c=a.remoteAudioElement.setSinkId(b),f;d.enumeratedDevices.forEach(function(a){b===a.deviceId&&(f=a.label)});F(f);return c};delete a.srcObject;Object.defineProperty(a,"srcObject",{configurable:!0,get:function(){return a.remoteAudioElement?a.remoteAudioElement.srcObject:void 0},set:function(b){n.log("VDI Shim set audio element srcObject "+
JSON.stringify(b));a.remoteAudioElement.srcObject=b}})}},disposeVideoElement:function(a,b){E("disposeVideoElement");n.log("VDI Shim disposeVideoElement: ");M(b,function(b){b.disposeVideoElement(a)})},disposeAudioElement:function(a,b,c){E("disposeAudioElement");n.log("VDI Shim disposeAudioElement: ");a&&(b=a.remoteAudioElement)&&(b.dispose(),a.remoteAudioElement=void 0)},setVMEventCallback:function(a){var b=this;S=a;g.getRedirector().isConnected()&&O.getSessionInfo().then(function(a){return e(b,void 0,
void 0,function(){return l(this,function(b){n.log("VDI Shim onVdiClientConnected, client endpoint info:"+JSON.stringify(a));J("vdiClientConnected",{version:a,endpointId:a.endpointId});return[2]})})});n.log("VDI Event Callback Set")},playNotifyAudio:function(a,b){E("playNotifyAudio");n.log("VDI Shim Audio playNotifyAudio audioId:"+a+" src:"+b);N&&N.playNotifyAudio(a,b)},stopNotifyAudio:function(a,b){E("stopNotifyAudio");n.log("VDI Shim Audio pauseNotifyAudio audioId:"+a+" src:"+b);N&&N.pauseNotifyAudio(a,
b)},setSinkId:function(a,b){E("setSinkId");n.log("VDI Shim Audio setSinkId audioId:"+a+" sinkId:"+b);N&&N.setSinkId(a,b)},getLoop:function(a){E("getLoop");var b;N&&(b=N.getLoop(a));n.log("VDI Shim Audio getLoop audioId:"+a+" loop: "+b);return b},setLoop:function(a,b){E("setLoop");n.log("VDI Shim Audio setLoop audioId:"+a+" bool:"+b);N&&N.setLoop(a,b)},addClipRect:function(a,b){E("addClipRect");n.log("VDI Adding Occlusion "+JSON.stringify(a));c(b,function(b){b.addOcclusion(a)})},removeClipRect:function(a,
b){E("removeClipRect");n.log("VDI Removing Occlusion "+JSON.stringify(a));c(b,function(b){b.removeOcclusion(a)})},initLog:function(a,b){n.setMSLogger(a,b);n.log("VDI init logger")},isFeatureOn:function(a){E("isFeatureOn");return O?O.isFeatureSupported(a):!1},onConnectionChange:function(a){E("onConnectionChange");n.log("VDI : onConnectionChange to "+a);!1===a?n.log("Disconnecting from the VDA"):(n.log("Connecting to the VDA"),a=window.getCitrixWebrtcRedir,void 0!==a?a().then(function(a){n.log("Sucesss on connect, CitrixRedir reg value:"+
a);"0"===a||"1"===a?K(a):(n.log("MS Teams Redir Reg key not updated yet"),f())})["catch"](function(){n.log("Failure to Read MS Teams redir Reg Key");f()}):(n.log("window.getCitrixWebrtcRedir() method is not available yet"),f()))},getScreensAsync:function(){E("getScreensAsync");n.log("VDI Shim getScreensAsync");G();var a=ca();return a.getScreensAsync.apply(a,arguments)},getWindowsAsync:function(){E("getWindowsAsync");n.log("VDI Shim getWindowsAsync");G();var a=ca();return a.getWindowsAsync.apply(a,
arguments)},setScreenSharePanelId:function(a){E("setScreenSharePanelId");n.log("VDI: setScreenSharePanelId set to "+JSON.stringify(a));G();null!==H&&H.isValid()||(H=new d.RemoteDevices);H.panelid=a},setCodecCapabilities:function(a){E("setCodecCapabilities");G();n.log("VDI Shim setCodecCapabilities");null!==I&&I.isValid()||(I=new d.NavigatorUserMedia);return I.setCodecCapabilities(a)},getE911Data:function(){E("getE911Data");return T?T.getE911Info():null},createMediaStream:function(b){E("createMediaStream");
n.log("VDI Shim createMediaStream");return a(b,!1)},createMediaStreamAsync:function(b){E("createMediaStreamAsync");n.log("VDI Shim createMediaStreamAsync");return a(b,!0)},disposeMediaStream:function(a){E("disposeMediaStream");n.log("VDI Shim disposeMediaStream: ");for(var b=0;b<a.length;b++){var c=a[b];c&&c.dispose()}},getCapabilities:function(a){E("getCapabilities");G();n.log("VDI Shim getCapabilities");null!==I&&I.isValid()||(I=new d.NavigatorUserMedia,da=d.NavigatorUserMedia.getCapabilities);
return da.apply(I,arguments)},initUCSDK:function(a){n.log("VDI Shim initUCSDK vendor:"+a);var b=!0;void 0==a||null==a||"string"!==typeof a||0==a.length?b=!1:0==a.split(" ").join("").length&&(b=!1);if(!b)throw n.log("VDI Shim initUCSDK: throwing exception: vendor info cannot be empty!!!"),new DOMException("vendor info cannot be empty, please pass vendor info string!!!");V||(W=a,I=new d.NavigatorUserMedia,H=new d.RemoteDevices,N=new y,H=new d.RemoteDevices,P(W),window.onVdiClientDisconnected=L,window.onVdiClientDisconnectedTimer=
C,window.onVdiClientConnected=R,V=!0)},deinitUCSDK:function(){n.log("VDI Shim deinitUCSDK");V&&(g.getRedirector().terminateOptimization(),ba(),window.onVdiClientDisconnected=void 0,window.onVdiClientDisconnectedTimer=void 0,W=window.onVdiClientConnected=void 0,V=!1)}}})},679:function(b,a,c){var e=this&&this.__extends||function(){var a=function(b,c){a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};
return a(b,c)};return function(b,c){function d(){this.constructor=b}a(b,c);b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}();Object.defineProperty(a,"__esModule",{value:!0});a.VideoElement=a.VideoRect=void 0;var l=c(658),h=c(550),d=c(851),p=c(946),q=c(550),n=function(){return function(a,b){this.x=Math.round(a.x)*b.devicePixelRatio;this.y=Math.round(a.y)*b.devicePixelRatio;this.width=Math.round(a.width)*b.devicePixelRatio;this.height=Math.round(a.height)*b.devicePixelRatio}}();
a.VideoRect=n;var k;(function(a){a[a.pixels=0]="pixels";a[a.percent=1]="percent"})(k||(k={}));var v=function(){function a(b){this.value=parseInt(b);this.units=this.detectUnits(b)}a.prototype.detectUnits=function(a){return-1===a.toLowerCase().indexOf("px")?k.pixels:k.percent};return a}(),z;(function(a){a[a.fill=0]="fill";a[a.contain=1]="contain";a[a.cover=2]="cover"})(z||(z={}));var g=function(){return function(a,b){this.x=a;this.y=b}}(),B=function(){function a(b,c,d){this.fit=this.convertFit(b);this.position=
new g(c,d)}a.prototype.convertFit=function(a){return"fill"==a?z.fill:"contain"==a?z.contain:"cover"==a?z.cover:z.fill};return a}(),t;(function(a){a[a.NotReady=0]="NotReady";a[a.Ready=1]="Ready"})(t||(t={}));b=function(a){function b(c,e){var g=a.call(this,null,h.class_id_t.VideoElement,0,l.ProxyMode.Local)||this;g.srcObject_=null;g.sinkId_="";g.videoWidth=0;g.videoHeight=0;g.isLoaded=!1;g.connectionState="disconnected";g.styleObserver=null;g.readyState_=t.NotReady;g.deferredVideoActions=[];g.pendingRelease_=
!1;g.activeConnectionEvent_=null;g.connectionEventQueue_=[];g.window_=e;g.elementId=c;d.logger.log("VideoElement.constructor (elementid: "+c+")");return g}e(b,a);b.prototype.dispose=function(){var a=this;d.logger.log("VideoElement.dispose (elementId: "+this.elementId+" oid: "+this.object_id()+")");this.pendingRelease_=!0;this.srcObject=this.ontimeupdate=this.onloadedmetadata=null;this.waitUntilReady("VideoElement.dispose").then(function(){})["catch"](function(){a.pendingRelease_=!1;a.setState("disconnected");
a.onconnectionstatechange=null;a.release()});this.onReady()};b.prototype.setState=function(a){this.connectionState=a;if(this.onconnectionstatechange_)this.onconnectionstatechange_()};Object.defineProperty(b.prototype,"Id",{get:function(){return this.elementId},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"sinkId",{get:function(){return this.sinkId_},set:function(a){var b=this;d.logger.log("VideoElement.sinkId: (id="+a+")");this.waitUntilConnected("VideoElement.sinkId").then(function(){return void 0!=
a?b.remoteInvoke(!0,h.method_id_VideoElement_t.sinkId,a):new Promise(function(a){return a(void 0)})}).then(function(){d.logger.log("videoElement: setting state to ready. (oid: "+b.object_id()+")");b.sinkId_=a;b.readyState_=t.Ready;b.onReady()})["catch"](function(a){b.logRemoteInvokeError(a,".set_sinkId() failed!")})},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"srcObject",{get:function(){return this.srcObject_},set:function(a){d.logger.log(this.user_friendly_id()+".srcObject: set srcObject... this.srcObject:"+
this.srcObject+" obj:"+a);if(this.srcObject_!==a){var b=p.getRedirector().getFeatureValue(q.FEATURE_ms_teams_1911);null!==this.srcObject_&&(null===a&&b&&this.disconnect(),b||this.disconnect(),this.isLoaded=!1);this.srcObject_=a;null!==this.srcObject_&&this.connectTo(this.srcObject_)}},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"onconnectionstatechange",{get:function(){return this.onconnectionstatechange_},set:function(a){d.logger.log(this.user_friendly_id()+".set_onconnectionstatechange() called.");
this.onconnectionstatechange_=a},enumerable:!1,configurable:!0});Object.defineProperty(b.prototype,"onloadedmetadata",{set:function(a){d.logger.log(this.user_friendly_id()+".set_onloadedmetadata() called.");this.onloadedmetadata_=a},enumerable:!1,configurable:!0});b.prototype.setupOnVideoFrameChanged=function(){var a=this,b=this.registerCallbacks(!1,!1,h.method_id_VideoElement_t.onvideoframechanged);b.then(function(b){d.logger.log(a.user_friendly_id()+".onvideoframechanged",b.params);a.videoWidth=
b.params[0]||0;a.videoHeight=b.params[1]||0;a.isLoaded||(a.isLoaded=!0,a.onloadedmetadata_&&a.onloadedmetadata_())});this.remoteInvoke(!0,h.method_id_VideoElement_t.onvideoframechanged,b.success)};b.prototype.processConnectionEvent=function(){var a=this;if(0!==this.connectionEventQueue_.length&&!this.activeConnectionEvent_){var b=this.connectionEventQueue_.pop();"connectTo"==b.operation?this.activeConnectionEvent_=this.connectToAsync(b.param):"disconnect"==b.operation&&(this.activeConnectionEvent_=
this.disconnectAsync());this.activeConnectionEvent_.then(function(){a.activeConnectionEvent_=void 0;a.processConnectionEvent()})["catch"](function(){d.logger.log(a.user_friendly_id()+" : Failed to handle connection event! ");a.activeConnectionEvent_=void 0;a.processConnectionEvent()})}};b.prototype.connectTo=function(a){this.connectionEventQueue_.push({operation:"connectTo",param:a});this.processConnectionEvent()};b.prototype.disconnect=function(){this.connectionEventQueue_.push({operation:"disconnect",
param:null});this.processConnectionEvent()};b.prototype.connectToAsync=function(a){var b=this;return new Promise(function(c,e){d.logger.log(b.user_friendly_id()+".connectTo: connect media stream with id = "+a.id+", clone_id = "+a.clone_state.clone_id);b.streamId_=a.id;b.waitUntilReady("VideoElement.connectTo").then(function(){return a.waitUntilConnected("MediaStream.connectTo")}).then(function(){b.setupOnVideoFrameChanged();return a.clone_state.synchronize(a)}).then(function(a){d.logger.log(b.user_friendly_id()+
".connectTo: remote invoking");var c=b.registerCallbacks(!0,!1,h.method_id_VideoElement_t.connectTo);return Promise.all([b.remoteInvokeEx(!1,h.method_id_VideoElement_t.connectTo,[a],c.success,c.fail),c.prom()])}).then(function(a){d.logger.log(b.user_friendly_id()+".connectTo: remote media stream is connected!");b.setState("connected");b.watch();b.updateTimer=setInterval(function(){b.ontimeupdate&&b.ontimeupdate()},250);(a=b.window_.document.getElementById(b.elementId))&&b.updateStyle(a);c()})["catch"](function(a){b.logRemoteInvokeError(a,
".connectTo: failed to connect!");e()})})};b.prototype.disconnectAsync=function(){var a=this;return new Promise(function(b,c){d.logger.log(a.user_friendly_id()+".disconnect: disconnecting stream : "+a.streamId_);a.unwatch();a.waitUntilReady("VideoElement.disconnect").then(function(){a.updateTimer&&clearInterval(a.updateTimer);var b=a.registerCallbacks(!1,!0,h.method_id_VideoElement_t.onvideoframechanged);a.remoteInvoke(!0,h.method_id_VideoElement_t.onvideoframechanged,b.success);return a.remoteInvoke(!1,
h.method_id_VideoElement_t.disconnect)}).then(function(){d.logger.log(a.user_friendly_id()+".disconnect: remote media stream is disconnected!");a.setState("disconnected");1==a.pendingRelease_&&(a.pendingRelease_=!1,a.onconnectionstatechange=null,a.release());b()})["catch"](function(b){a.logRemoteInvokeError(b,".disconnect: failed to connect!");c()})})};b.prototype.setFrame=function(a){var b=this;d.logger.log(this.user_friendly_id()+".setFrame: set video frame to",a.x,a.y,a.width,a.height);this.waitUntilReady("VideoElement.setFrame").then(function(){var c=
new n(a,b.window_);return b.remoteInvoke(!1,h.method_id_VideoElement_t.setFrame,c)}).then(function(){d.logger.log(b.user_friendly_id()+".setFrame: success!")})["catch"](function(a){b.logRemoteInvokeError(a,".setFrame: failed to connect!")})};b.prototype.addClipRect=function(a){var b=this;d.logger.log(this.user_friendly_id()+".addClipRect: ",JSON.stringify(a));this.waitUntilReady("VideoElement.addClipRect").then(function(){var c=new n(a,b.window_);return b.remoteInvoke(!1,h.method_id_VideoElement_t.addClipRect,
c)})["catch"](function(a){b.logRemoteInvokeError(a,".addClipRect failed!")})};b.prototype.removeClipRect=function(a){var b=this;d.logger.log(this.user_friendly_id()+".removeClipRect: ",JSON.stringify(a));this.waitUntilReady("VideoElement.removeClipRect").then(function(){var c=new n(a,b.window_);return b.remoteInvoke(!1,h.method_id_VideoElement_t.removeClipRect,c)})["catch"](function(a){b.logRemoteInvokeError(a,".removeClipRect failed!")})};b.prototype.watch=function(){var a=this;if(p.getRedirector().getFeatureValue(q.FEATURE_ms_teams_video_placement)){var b=
this.window_.document.getElementById(this.elementId);b&&(this.unwatch(),this.styleObserver=new MutationObserver(function(b){b.forEach(function(b){"style"==b.attributeName?a.updateStyle(b.target):a.elementId=b.target.id})}),this.styleObserver.observe(b,{attributes:!0,attributeOldValue:!0,attributeFilter:["style","id"]}))}};b.prototype.unwatch=function(){this.styleObserver&&(this.styleObserver.disconnect(),this.styleObserver=null)};b.prototype.updateStyle=function(a){if("connected"==this.connectionState){var b=
this.window_.getComputedStyle(a).getPropertyValue("object-fit"),c=this.window_.getComputedStyle(a).getPropertyValue("object-position").split(" ");a=new v(c[0]);c=new v(c[1]);this.placement=new B(b,a,c)}else d.logger.log(this.user_friendly_id()+".updateStyle: video element is not connected")};Object.defineProperty(b.prototype,"placement",{get:function(){return this.placement_},set:function(a){var b=this;p.getRedirector().getFeatureValue(q.FEATURE_ms_teams_video_placement)?this.waitUntilReady("VideoElement.placement").then(function(){return b.remoteInvoke(!0,
h.method_id_VideoElement_t.placement,a)}).then(function(){b.placement_=a})["catch"](function(a){b.logRemoteInvokeError(a,".placement setter: failed to connect!")}):d.logger.log(this.user_friendly_id()+".placement: video placement feature is not supported on a client")},enumerable:!1,configurable:!0});b.prototype.waitUntilReady=function(a){var b=this;return new Promise(function(c,e){d.logger.log("VideoElement.waitUntilReady(): readyState="+b.readyState_+". (oid: "+b.object_id()+")");b.readyState_==
t.Ready?c():(d.logger.log('videoElement.waitUntilReady(): deferring action "'+a+'". (oid: '+b.object_id()+")"),b.deferredVideoActions.push(new l.deferred_action(c,e,a)))})};b.prototype.onReady=function(){for(;this.deferredVideoActions&&0<this.deferredVideoActions.length;)this.deferredVideoActions.shift().post(this.readyState_==t.Ready)};return b}(l.ProxyObject);a.VideoElement=b},269:function(b,a){Object.defineProperty(a,"__esModule",{value:!0});a.HardwareInfo=a.MemoryInfo=a.GPUInfo=a.GPU=a.CPUInfo=
a.WebrpcClassLibInfo=a.WebrpcClassInfo=a.WebrpcMethodInfo=a.EndpointId=a.OSInfo=a.WebrpcFeatureInfo=a.FeatureData=a.VersionData=a.FEATURE_unsupported=a.FEATURE_ms_teams_redirection=void 0;a.FEATURE_ms_teams_redirection="ms_teams_redirection";a.FEATURE_unsupported="unsupported";var c=function(){return function(a,b,c,d){this.major=a;this.minor=b;this.revision=c;this.build=d}}();a.VersionData=c;c=function(){return function(){}}();a.FeatureData=c;c=function(){return function(a,b){this.fature=a;this.version=
b}}();a.WebrpcFeatureInfo=c;c=function(){return function(a,b,c,d,e){this.family=a;this.version=b;this.architecture=c;this.distro=d;this.edition=e}}();a.OSInfo=c;c=function(){return function(a,b){this.machine_id=a;this.user_id=b}}();a.EndpointId=c;c=function(){return function(b,c,e,d,l){void 0===l&&(l=a.FEATURE_ms_teams_redirection);this.iid=b;this.mid=c;this.name=e;this.isprop=d;this.feature=l}}();a.WebrpcMethodInfo=c;c=function(){return function(a,b,c){this.id=a;this.name=b;this.methods=c}}();a.WebrpcClassInfo=
c;c=function(){return function(a,b){this.name=a;this.classes=b}}();a.WebrpcClassLibInfo=c;c=function(){return function(a,b){this.cpumodel=a;this.numberofprocessors=b}}();a.CPUInfo=c;c=function(){return function(a,b){this.name=a;this.driver=b}}();a.GPU=c;c=function(){return function(a){this.gpus=a}}();a.GPUInfo=c;c=function(){return function(a){this.totalmemory=a}}();a.MemoryInfo=c;c=function(){return function(a,b,c){this.cpu_info=a;this.gpu_info=b;this.memory_info=c}}();a.HardwareInfo=c},550:function(b,
a,c){var e=this&&this.__createBinding||(Object.create?function(a,b,c,e){void 0===e&&(e=c);Object.defineProperty(a,e,{enumerable:!0,get:function(){return b[c]}})}:function(a,b,c,e){void 0===e&&(e=c);a[e]=b[c]});b=this&&this.__exportStar||function(a,b){for(var c in a)"default"===c||b.hasOwnProperty(c)||e(b,a,c)};Object.defineProperty(a,"__esModule",{value:!0});a.WebrpcClassLibInfoUtil=void 0;var l=c(187);b(c(187),a);c=function(){function a(){}a.getInterfaceByid=function(a){for(var b=0,c=l.class_lib_info.classes;b<
c.length;b++){var e=c[b];if(e.id==a)return e}return null};a.getMethodByid=function(a,b){var c=this.getInterfaceByid(a);if(null!=c)for(var e=0,c=c.methods;e<c.length;e++){var k=c[e];if(k.mid==b)return k}return null};a.getMethodFeatureByid=function(a,b){var c=this.getInterfaceByid(a);if(null!=c)for(var e=0,c=c.methods;e<c.length;e++){var k=c[e];if(k.mid==b)return k.feature}return null};a.composeClassInfoData=function(a){a=a.hdr;if(void 0==a)return"*** Invalid packet: Couldn't find hdr object ***";var b=
a.proc;if(void 0==b)return"";a=b.iid;for(var b=b.methodid,c=0,e=l.class_lib_info.classes;c<e.length;c++){var k=e[c];if(k.id==a)for(var h=0,p=k.methods;h<p.length;h++){var g=p[h];if(g.mid==b)return k.name+"::"+g.name}}return""};return a}();a.WebrpcClassLibInfoUtil=c},187:function(b,a,c){Object.defineProperty(a,"__esModule",{value:!0});a.class_lib_info=a.method_id_StreamResolution_t=a.method_id_RTCSctpTransport_t=a.method_id_RTCDataChannel_t=a.method_id_E911Service_t=a.method_id_ScreenSource_t=a.method_id_VDISharingRemote_t=
a.method_id_RTCRtpTransceiver_t=a.method_id_RTCIceCandidatePair_t=a.method_id_RTCDTMFToneChangeEvent_t=a.method_id_RTCDTMFSender_t=a.method_id_RTCIceTransport_t=a.method_id_RTCDtlsTransport_t=a.method_id_RTCRtpSender_t=a.method_id_RTCRtpReceiver_t=a.method_id_AudioElement_t=a.method_id_VideoElement_t=a.method_id_MediaStreamEvent_t=a.method_id_RTCIceCandidateEvent_t=a.method_id_RTCIceCandidate_t=a.method_id_NavigatorUserMedia_t=a.method_id_MediaStream_t=a.method_id_MediaStreamTrack_t=a.method_id_RTCSessionDescription_t=
a.method_id_MediaDeviceInfo_t=a.method_id_MediaDevices_t=a.method_id_RTCPeerConnection_t=a.method_id_EngineControl_t=a.class_id_t=a.vdaFeatureNameMap=a.featureNameMap=a.Features=a.FEATURE_ms_teams_sender_stats_fix=a.FEATURE_ms_teams_enumerate_devices_v2=a.FEATURE_ms_teams_track_clone_with_id=a.FEATURE_ms_teams_audio_notifications_loop=a.FEATURE_ms_teams_share_system_audio=a.FEATURE_ms_teams_stream_active_status=a.FEATURE_ms_teams_hardware_info=a.FEATURE_ms_teams_secondary_audio_notifications=a.FEATURE_ms_teams_stream_resolution=
a.FEATURE_ms_teams_client_info=a.FEATURE_ms_teams_no_vd_buffer_limit=a.FEATURE_ms_teams_data_channel=a.FEATURE_ms_teams_webrtc_1dot0=a.FEATURE_ms_teams_multi_window=a.FEATURE_ms_teams_gtc=a.FEATURE_ms_teams_e911=a.FEATURE_ms_teams_codec_capability=a.FEATURE_ms_teams_app_sharing=a.FEATURE_ms_teams_monitor_sharing=a.FEATURE_ms_teams_video_placement=a.FEATURE_ms_teams_dtmf=a.FEATURE_ms_teams_device_group_id=a.FEATURE_ms_teams_remote_audio_notifications=a.FEATURE_ms_teams_endpoint_id=a.FEATURE_ms_teams_osinfo=
a.FEATURE_ms_teams_mstrack_constraints=a.FEATURE_ms_teams_1912=a.FEATURE_ms_teams_pstn=a.FEATURE_ms_teams_1911=a.FEATURE_ms_teams_common_media_constraints=a.FEATURE_ms_teams_speaking_indicator=a.FEATURE_ms_teams_desktop_sharing=a.FEATURE_vda_delete_viewport=a.FEATURE_vda_multi_window=a.FEATURE_vda_app_sharing=a.FEATURE_vda_service_no_buffer_limit=a.HDXMS_VERSION=a.BUILD_TYPE_SDK=void 0;b=c(269);var e=c(269);Object.defineProperty(a,"VersionData",{enumerable:!0,get:function(){return e.VersionData}});
Object.defineProperty(a,"FeatureData",{enumerable:!0,get:function(){return e.FeatureData}});Object.defineProperty(a,"OSInfo",{enumerable:!0,get:function(){return e.OSInfo}});Object.defineProperty(a,"EndpointId",{enumerable:!0,get:function(){return e.EndpointId}});Object.defineProperty(a,"HardwareInfo",{enumerable:!0,get:function(){return e.HardwareInfo}});a.BUILD_TYPE_SDK=!0;a.HDXMS_VERSION="3.1.0";a.FEATURE_vda_service_no_buffer_limit="wsservice_no_buffer_limit";a.FEATURE_vda_app_sharing="webrtc_app_sharing";
a.FEATURE_vda_multi_window="webrtc_multi_window";a.FEATURE_vda_delete_viewport="overlay_delete_viewport";a.FEATURE_ms_teams_desktop_sharing="ms_teams_desktop_sharing";a.FEATURE_ms_teams_speaking_indicator="ms_teams_speaking_indicator";a.FEATURE_ms_teams_common_media_constraints="ms_teams_common_media_constraints";a.FEATURE_ms_teams_1911="ms_teams_1911";a.FEATURE_ms_teams_pstn="ms_teams_pstn";a.FEATURE_ms_teams_1912="ms_teams_1912";a.FEATURE_ms_teams_mstrack_constraints="ms_teams_mstrack_constraints";
a.FEATURE_ms_teams_osinfo="ms_teams_osinfo";a.FEATURE_ms_teams_endpoint_id="ms_teams_endpoint_id";a.FEATURE_ms_teams_remote_audio_notifications="ms_teams_remote_audio_notifications";a.FEATURE_ms_teams_device_group_id="ms_teams_device_group_id";a.FEATURE_ms_teams_dtmf="ms_teams_dtmf";a.FEATURE_ms_teams_video_placement="ms_teams_video_placement";a.FEATURE_ms_teams_monitor_sharing="ms_teams_multi_monitor_sharing";a.FEATURE_ms_teams_app_sharing="ms_teams_app_sharing";a.FEATURE_ms_teams_codec_capability=
"ms_teams_codec_capability";a.FEATURE_ms_teams_e911="ms_teams_e911";a.FEATURE_ms_teams_gtc="ms_teams_gtc";a.FEATURE_ms_teams_multi_window="ms_teams_multi_windows";a.FEATURE_ms_teams_webrtc_1dot0="ms_teams_webrtc_1.0";a.FEATURE_ms_teams_data_channel="ms_teams_data_channel";a.FEATURE_ms_teams_no_vd_buffer_limit="ms_teams_no_vd_buffer_limit";a.FEATURE_ms_teams_client_info="ms_teams_client_info";a.FEATURE_ms_teams_stream_resolution="ms_teams_stream_resolution";a.FEATURE_ms_teams_secondary_audio_notifications=
"ms_teams_secondary_audio_notifications";a.FEATURE_ms_teams_hardware_info="ms_teams_hardware_info";a.FEATURE_ms_teams_stream_active_status="ms_teams_stream_active_status";a.FEATURE_ms_teams_share_system_audio="ms_teams_share_system_audio";a.FEATURE_ms_teams_audio_notifications_loop="ms_teams_audio_notifications_loop";a.FEATURE_ms_teams_track_clone_with_id="ms_teams_track_clone_with_id";a.FEATURE_ms_teams_enumerate_devices_v2="ms_teams_enumerate_devices_v2";a.FEATURE_ms_teams_sender_stats_fix="ms_teams_sender_stats_fix";
new b.WebrpcFeatureInfo(b.FEATURE_ms_teams_redirection,new b.VersionData(1,1,0,0));new b.WebrpcFeatureInfo(a.FEATURE_ms_teams_desktop_sharing,new b.VersionData(1,2,0,0));new b.WebrpcFeatureInfo(a.FEATURE_ms_teams_speaking_indicator,new b.VersionData(1,2,0,0));new b.WebrpcFeatureInfo(a.FEATURE_ms_teams_common_media_constraints,new b.VersionData(1,4,0,0));new b.WebrpcFeatureInfo(a.FEATURE_ms_teams_1911,new b.VersionData(1,4,0,0));new b.WebrpcFeatureInfo(a.FEATURE_ms_teams_1912,new b.VersionData(1,5,
0,0));new b.WebrpcFeatureInfo(a.FEATURE_ms_teams_mstrack_constraints,new b.VersionData(1,6,0,0));new b.WebrpcFeatureInfo(a.FEATURE_ms_teams_pstn,new b.VersionData(1,6,0,0));new b.WebrpcFeatureInfo(a.FEATURE_ms_teams_osinfo,new b.VersionData(1,7,0,0));new b.WebrpcFeatureInfo(a.FEATURE_ms_teams_endpoint_id,new b.VersionData(1,7,0,0));new b.WebrpcFeatureInfo(a.FEATURE_ms_teams_remote_audio_notifications,new b.VersionData(1,7,0,0));new b.WebrpcFeatureInfo(a.FEATURE_ms_teams_device_group_id,new b.VersionData(1,
7,0,0));new b.WebrpcFeatureInfo(a.FEATURE_ms_teams_codec_capability,new b.VersionData(1,7,0,0));new b.WebrpcFeatureInfo(a.FEATURE_ms_teams_dtmf,new b.VersionData(1,7,0,0));new b.WebrpcFeatureInfo(a.FEATURE_ms_teams_video_placement,new b.VersionData(1,7,0,0));new b.WebrpcFeatureInfo(a.FEATURE_ms_teams_monitor_sharing,new b.VersionData(1,7,0,0));new b.WebrpcFeatureInfo(a.FEATURE_ms_teams_app_sharing,new b.VersionData(1,8,0,0));new b.WebrpcFeatureInfo(a.FEATURE_ms_teams_webrtc_1dot0,new b.VersionData(1,
8,0,0));new b.WebrpcFeatureInfo(a.FEATURE_ms_teams_data_channel,new b.VersionData(1,8,0,0));new b.WebrpcFeatureInfo(a.FEATURE_ms_teams_e911,new b.VersionData(1,13,0,0));new b.WebrpcFeatureInfo(a.FEATURE_ms_teams_multi_window,new b.VersionData(1,14,0,0));new b.WebrpcFeatureInfo(a.FEATURE_ms_teams_client_info,new b.VersionData(1,19,0,0));new b.WebrpcFeatureInfo(a.FEATURE_ms_teams_stream_resolution,new b.VersionData(1,25,0,0));new b.WebrpcFeatureInfo(a.FEATURE_ms_teams_secondary_audio_notifications,
new b.VersionData(1,21,0,0));new b.WebrpcFeatureInfo(a.FEATURE_ms_teams_hardware_info,new b.VersionData(1,35,0,0));new b.WebrpcFeatureInfo(a.FEATURE_ms_teams_stream_active_status,new b.VersionData(1,32,0,0));new b.WebrpcFeatureInfo(a.FEATURE_ms_teams_audio_notifications_loop,new b.VersionData(1,33,0,0));new b.WebrpcFeatureInfo(a.FEATURE_ms_teams_track_clone_with_id,new b.VersionData(1,33,0,0));new b.WebrpcFeatureInfo(a.FEATURE_ms_teams_enumerate_devices_v2,new b.VersionData(1,35,0,0));new b.WebrpcFeatureInfo(a.FEATURE_ms_teams_sender_stats_fix,
new b.VersionData(1,36,0,0));c=function(){function a(){}a.FEATURE_public_screenshare="screenshare";a.FEATURE_public_redirection="redirection";a.FEATURE_public_speaking_indicator="speaking_indicator";a.FEATURE_public_pstn="pstn";a.FEATURE_public_osinfo="osinfo";a.FEATURE_public_endpoint_id="endpointid";a.FEATURE_public_remote_audio_notifications="remoteaudionotifications";a.FEATURE_public_device_group_id="compositedevices";a.FEATURE_public_dtmf="dtmf";a.FEATURE_public_monitor_sharing="multimonitorscreenshare";
a.FEATURE_public_app_sharing="appshare";a.FEATURE_public_codec_capability="codec_capability";a.FEATURE_public_e911="e911";a.FEATURE_public_webrtc1dot0="webrtc1.0";a.FEATURE_public_data_channel="datachannel";a.FEATURE_public_vdnobuflimit="vdnobuflimit";a.FEATURE_public_multi_window="multiwindow";a.FEATURE_public_secondary_audio_notifications="secondaryringer";a.FEATURE_public_stream_resolution="streamresolution";a.FEATURE_public_track_clone_with_id="track_clone_with_id";a.FEATURE_public_sender_stats_fix=
"sender_stats_fix";a.FEATURE_public_audio_notification_loop="loop";return a}();a.Features=c;a.featureNameMap={};a.featureNameMap[c.FEATURE_public_screenshare]=[a.FEATURE_ms_teams_desktop_sharing];a.featureNameMap[c.FEATURE_public_redirection]=[b.FEATURE_ms_teams_redirection];a.featureNameMap[c.FEATURE_public_speaking_indicator]=[a.FEATURE_ms_teams_speaking_indicator];a.featureNameMap[c.FEATURE_public_pstn]=[a.FEATURE_ms_teams_pstn];a.featureNameMap[c.FEATURE_public_osinfo]=[a.FEATURE_ms_teams_osinfo];
a.featureNameMap[c.FEATURE_public_endpoint_id]=[a.FEATURE_ms_teams_endpoint_id];a.featureNameMap[c.FEATURE_public_remote_audio_notifications]=[a.FEATURE_ms_teams_remote_audio_notifications,a.FEATURE_ms_teams_secondary_audio_notifications];a.featureNameMap[c.FEATURE_public_device_group_id]=[a.FEATURE_ms_teams_device_group_id];a.featureNameMap[c.FEATURE_public_dtmf]=[a.FEATURE_ms_teams_dtmf];a.featureNameMap[c.FEATURE_public_monitor_sharing]=[a.FEATURE_ms_teams_monitor_sharing];a.featureNameMap[c.FEATURE_public_app_sharing]=
[a.FEATURE_ms_teams_app_sharing];a.featureNameMap[c.FEATURE_public_codec_capability]=[a.FEATURE_ms_teams_codec_capability];a.featureNameMap[c.FEATURE_public_e911]=[a.FEATURE_ms_teams_e911];a.featureNameMap[c.FEATURE_public_webrtc1dot0]=[a.FEATURE_ms_teams_webrtc_1dot0];a.featureNameMap[c.FEATURE_public_multi_window]=[a.FEATURE_ms_teams_multi_window];a.featureNameMap[c.FEATURE_public_data_channel]=[a.FEATURE_ms_teams_data_channel];a.featureNameMap[c.FEATURE_public_vdnobuflimit]=[a.FEATURE_ms_teams_no_vd_buffer_limit];
a.featureNameMap[c.FEATURE_public_secondary_audio_notifications]=[a.FEATURE_ms_teams_remote_audio_notifications,a.FEATURE_ms_teams_secondary_audio_notifications];a.featureNameMap[c.FEATURE_public_stream_resolution]=[a.FEATURE_ms_teams_stream_resolution];a.featureNameMap[c.FEATURE_public_track_clone_with_id]=[a.FEATURE_ms_teams_track_clone_with_id];a.featureNameMap[c.FEATURE_public_sender_stats_fix]=[a.FEATURE_ms_teams_sender_stats_fix];a.featureNameMap[c.FEATURE_public_audio_notification_loop]=[a.FEATURE_ms_teams_audio_notifications_loop];
a.vdaFeatureNameMap={};a.vdaFeatureNameMap[c.FEATURE_public_multi_window]=[a.FEATURE_vda_multi_window];a.vdaFeatureNameMap[c.FEATURE_public_app_sharing]=[a.FEATURE_vda_app_sharing];(function(a){a[a.EngineControl=0]="EngineControl";a[a.RTCPeerConnection=1]="RTCPeerConnection";a[a.RTCSessionDescription=2]="RTCSessionDescription";a[a.RTCIceCandidate=3]="RTCIceCandidate";a[a.RTCIceCandidateEvent=4]="RTCIceCandidateEvent";a[a.MediaDevices=5]="MediaDevices";a[a.MediaDeviceInfo=6]="MediaDeviceInfo";a[a.MediaStreamTrack=
7]="MediaStreamTrack";a[a.MediaStreamEvent=8]="MediaStreamEvent";a[a.MediaStream=9]="MediaStream";a[a.NavigatorUserMedia=10]="NavigatorUserMedia";a[a.VideoElement=11]="VideoElement";a[a.AudioElement=12]="AudioElement";a[a.RTCRtpReceiver=13]="RTCRtpReceiver";a[a.RTCRtpSender=14]="RTCRtpSender";a[a.RTCDtlsTransport=15]="RTCDtlsTransport";a[a.RTCIceTransport=16]="RTCIceTransport";a[a.RTCDTMFSender=17]="RTCDTMFSender";a[a.RTCDTMFToneChangeEvent=18]="RTCDTMFToneChangeEvent";a[a.RTCIceCandidatePair=19]=
"RTCIceCandidatePair";a[a.RTCRtpTransceiver=20]="RTCRtpTransceiver";a[a.ScreenSharingRemote=21]="ScreenSharingRemote";a[a.ScreenSource=22]="ScreenSource";a[a.E911Service=23]="E911Service";a[a.reserved2=24]="reserved2";a[a.RTCDataChannel=25]="RTCDataChannel";a[a.RTCSctpTransport=26]="RTCSctpTransport";a[a.StreamResolution=27]="StreamResolution";a[a.VideoEffect=28]="VideoEffect";a[a.reserved6=29]="reserved6";a[a.reserved7=30]="reserved7";a[a.reserved8=31]="reserved8"})(c=a.class_id_t||(a.class_id_t=
{}));var l;(function(a){a[a.ctor=0]="ctor";a[a.version=1]="version";a[a.feature_flags=2]="feature_flags";a[a.version_info=3]="version_info";a[a.osinfo=4]="osinfo";a[a.endpoint_id=5]="endpoint_id";a[a.set_client_info=6]="set_client_info";a[a.hardware_info=7]="hardware_info"})(l=a.method_id_EngineControl_t||(a.method_id_EngineControl_t={}));var h;(function(a){a[a.ctor=0]="ctor";a[a.localDescription=1]="localDescription";a[a.remoteDescription=2]="remoteDescription";a[a.readyState=3]="readyState";a[a.iceState=
4]="iceState";a[a.localStreams=5]="localStreams";a[a.remoteStreams=6]="remoteStreams";a[a.createOffer=7]="createOffer";a[a.createAnswer=8]="createAnswer";a[a.setLocalDescription=9]="setLocalDescription";a[a.setRemoteDescription=10]="setRemoteDescription";a[a.updateIce=11]="updateIce";a[a.addIceCandidate=12]="addIceCandidate";a[a.addStream=13]="addStream";a[a.removeStream=14]="removeStream";a[a.close=15]="close";a[a.iceConnectionState=16]="iceConnectionState";a[a.iceGatheringState=17]="iceGatheringState";
a[a.signalingState=18]="signalingState";a[a.onaddstream=19]="onaddstream";a[a.onicecandidate=20]="onicecandidate";a[a.oniceconnectionstatechange=21]="oniceconnectionstatechange";a[a.onicegatheringstatechange=22]="onicegatheringstatechange";a[a.onsignalingstatechange=23]="onsignalingstatechange";a[a.onnegotiationneeded=24]="onnegotiationneeded";a[a.onremovestream=25]="onremovestream";a[a.getStats=26]="getStats";a[a.getReceivers=27]="getReceivers";a[a.getSenders=28]="getSenders";a[a.addTrack=29]="addTrack";
a[a.removeTrack=30]="removeTrack";a[a.ontrack=31]="ontrack";a[a.setLocalDescription_v2=32]="setLocalDescription_v2";a[a.setRemoteDescription_v2=33]="setRemoteDescription_v2";a[a.addTransceiverWithTrack=34]="addTransceiverWithTrack";a[a.addTransceiverWithKind=35]="addTransceiverWithKind";a[a.getTransceivers=36]="getTransceivers";a[a.onconnectionstatechange=37]="onconnectionstatechange";a[a.sctp=38]="sctp";a[a.ondatachannel=39]="ondatachannel";a[a.createDataChannel=40]="createDataChannel";a[a.getStats_v2=
41]="getStats_v2"})(h=a.method_id_RTCPeerConnection_t||(a.method_id_RTCPeerConnection_t={}));var d;(function(a){a[a.ctor=0]="ctor";a[a.enumerateDevices=1]="enumerateDevices";a[a.getDisplayMedia=2]="getDisplayMedia";a[a.ondevicechange=3]="ondevicechange";a[a.enumerateDevicesV2=4]="enumerateDevicesV2"})(d=a.method_id_MediaDevices_t||(a.method_id_MediaDevices_t={}));var p;(function(a){a[a.ctor=0]="ctor";a[a.deviceId=1]="deviceId";a[a.kind=2]="kind";a[a.label=3]="label";a[a.groupId=4]="groupId"})(p=a.method_id_MediaDeviceInfo_t||
(a.method_id_MediaDeviceInfo_t={}));var q;(function(a){a[a.ctor=0]="ctor";a[a.type=1]="type";a[a.sdp=2]="sdp"})(q=a.method_id_RTCSessionDescription_t||(a.method_id_RTCSessionDescription_t={}));var n;(function(a){a[a.ctor=0]="ctor";a[a.kind=1]="kind";a[a.id=2]="id";a[a.label=3]="label";a[a.enabled=4]="enabled";a[a.muted=5]="muted";a[a.readyState=6]="readyState";a[a.onended=7]="onended";a[a.onmute=8]="onmute";a[a.onunmute=9]="onunmute";a[a.clone=10]="clone";a[a.stop=11]="stop";a[a.getCapabilities=12]=
"getCapabilities";a[a.getSettings=13]="getSettings";a[a.applyConstraints=14]="applyConstraints";a[a.getConstraints=15]="getConstraints"})(n=a.method_id_MediaStreamTrack_t||(a.method_id_MediaStreamTrack_t={}));var k;(function(a){a[a.ctor=0]="ctor";a[a.id=1]="id";a[a.getAudioTracks=2]="getAudioTracks";a[a.getVideoTracks=3]="getVideoTracks";a[a.getTracks=4]="getTracks";a[a.getTrackById=5]="getTrackById";a[a.addTrack=6]="addTrack";a[a.removeTrack=7]="removeTrack";a[a.clone=8]="clone";a[a.active=9]="active"})(k=
a.method_id_MediaStream_t||(a.method_id_MediaStream_t={}));var v;(function(a){a[a.ctor=0]="ctor";a[a.getUserMedia=1]="getUserMedia";a[a.setCodecCapabilities=2]="setCodecCapabilities";a[a.getCapabilities=3]="getCapabilities"})(v=a.method_id_NavigatorUserMedia_t||(a.method_id_NavigatorUserMedia_t={}));var z;(function(a){a[a.ctor=0]="ctor";a[a.candidate=1]="candidate";a[a.sdpMid=2]="sdpMid";a[a.sdpMLineIndex=3]="sdpMLineIndex"})(z=a.method_id_RTCIceCandidate_t||(a.method_id_RTCIceCandidate_t={}));var g;
(function(a){a[a.ctor=0]="ctor";a[a.candidate=1]="candidate"})(g=a.method_id_RTCIceCandidateEvent_t||(a.method_id_RTCIceCandidateEvent_t={}));var B;(function(a){a[a.ctor=0]="ctor";a[a.stream=1]="stream"})(B=a.method_id_MediaStreamEvent_t||(a.method_id_MediaStreamEvent_t={}));var t;(function(a){a[a.ctor=0]="ctor";a[a.sinkId=1]="sinkId";a[a.connectTo=2]="connectTo";a[a.disconnect=3]="disconnect";a[a.setFrame=4]="setFrame";a[a.addClipRect=5]="addClipRect";a[a.removeClipRect=6]="removeClipRect";a[a.onerror=
7]="onerror";a[a.onvideoframechanged=8]="onvideoframechanged";a[a.placement=9]="placement"})(t=a.method_id_VideoElement_t||(a.method_id_VideoElement_t={}));var m;(function(a){a[a.ctor=0]="ctor";a[a.sinkId=1]="sinkId";a[a.srcObject=2]="srcObject";a[a.src=3]="src";a[a.play=4]="play";a[a.pause=5]="pause";a[a.loop=6]="loop"})(m=a.method_id_AudioElement_t||(a.method_id_AudioElement_t={}));var D;(function(a){a[a.ctor=0]="ctor";a[a.track=1]="track";a[a.getContributingSources=2]="getContributingSources";
a[a.getSynchronizationSources=3]="getSynchronizationSources";a[a.transport=4]="transport";a[a.rtcpTransport=5]="rtcpTransport";a[a.getCapabilities=6]="getCapabilities";a[a.getParameters=7]="getParameters";a[a.getStats=8]="getStats";a[a.getCapabilities_v2=9]="getCapabilities_v2"})(D=a.method_id_RTCRtpReceiver_t||(a.method_id_RTCRtpReceiver_t={}));var y;(function(a){a[a.ctor=0]="ctor";a[a.track=1]="track";a[a.transport=2]="transport";a[a.rtcpTransport=3]="rtcpTransport";a[a.dtmf=4]="dtmf";a[a.getCapabilities=
5]="getCapabilities";a[a.getParameters=6]="getParameters";a[a.setParameters=7]="setParameters";a[a.replaceTrack=8]="replaceTrack";a[a.getStats=9]="getStats";a[a.setStreams=10]="setStreams";a[a.getCapabilities_v2=11]="getCapabilities_v2"})(y=a.method_id_RTCRtpSender_t||(a.method_id_RTCRtpSender_t={}));var x;(function(a){a[a.ctor=0]="ctor";a[a.transport=1]="transport";a[a.state=2]="state";a[a.getRemoteCertificates=3]="getRemoteCertificates";a[a.onstatechange=4]="onstatechange";a[a.onerror=5]="onerror"})(x=
a.method_id_RTCDtlsTransport_t||(a.method_id_RTCDtlsTransport_t={}));var r;(function(a){a[a.ctor=0]="ctor";a[a.role=1]="role";a[a.component=2]="component";a[a.state=3]="state";a[a.gatheringState=4]="gatheringState";a[a.localcandidates=5]="localcandidates";a[a.remotecandidates=6]="remotecandidates";a[a.onstatechange=7]="onstatechange";a[a.ongatheringstatechange=8]="ongatheringstatechange";a[a.onselectedcandidatepairchange=9]="onselectedcandidatepairchange"})(r=a.method_id_RTCIceTransport_t||(a.method_id_RTCIceTransport_t=
{}));var A;(function(a){a[a.ctor=0]="ctor";a[a.insertDTMF=1]="insertDTMF";a[a.ontonechange=2]="ontonechange";a[a.canInsertDTMF=3]="canInsertDTMF";a[a.toneBuffer=4]="toneBuffer"})(A=a.method_id_RTCDTMFSender_t||(a.method_id_RTCDTMFSender_t={}));var M;(function(a){a[a.ctor=0]="ctor";a[a.tone=1]="tone";a[a.tone_buffer=2]="tone_buffer"})(M=a.method_id_RTCDTMFToneChangeEvent_t||(a.method_id_RTCDTMFToneChangeEvent_t={}));var F;(function(a){a[a.ctor=0]="ctor";a[a.local=1]="local";a[a.remote=2]="remote"})(F=
a.method_id_RTCIceCandidatePair_t||(a.method_id_RTCIceCandidatePair_t={}));var J;(function(a){a[a.ctor=0]="ctor";a[a.mid=1]="mid";a[a.sender=2]="sender";a[a.receiver=3]="receiver";a[a.direction=4]="direction";a[a.currentDirection=5]="currentDirection";a[a.stop=6]="stop";a[a.setCodecPreferences=7]="setCodecPreferences"})(J=a.method_id_RTCRtpTransceiver_t||(a.method_id_RTCRtpTransceiver_t={}));var G;(function(a){a[a.ctor=0]="ctor";a[a.getScreensAsync=1]="getScreensAsync";a[a.onscreentopologychanged=
2]="onscreentopologychanged"})(G=a.method_id_VDISharingRemote_t||(a.method_id_VDISharingRemote_t={}));var L;(function(a){a[a.ctor=0]="ctor";a[a.srcid=1]="srcid";a[a.deviceid=2]="deviceid";a[a.type=3]="type";a[a.name=4]="name";a[a.imagedata=5]="imagedata";a[a.hwnd=6]="hwnd";a[a.origin=7]="origin";a[a.caption=8]="caption";a[a.pid=9]="pid";a[a.bounds=10]="bounds"})(L=a.method_id_ScreenSource_t||(a.method_id_ScreenSource_t={}));var P;(function(a){a[a.ctor=0]="ctor";a[a.getE911Info=1]="getE911Info";a[a.onupdate=
2]="onupdate"})(P=a.method_id_E911Service_t||(a.method_id_E911Service_t={}));var C;(function(a){a[a.ctor=0]="ctor";a[a.label=1]="label";a[a.ordered=2]="ordered";a[a.maxPacketLifeTime=3]="maxPacketLifeTime";a[a.maxRetransmits=4]="maxRetransmits";a[a.protocol=5]="protocol";a[a.negotiated=6]="negotiated";a[a.id=7]="id";a[a.readyState=8]="readyState";a[a.bufferedAmount=9]="bufferedAmount";a[a.bufferedAmountLowThreshold=10]="bufferedAmountLowThreshold";a[a.onopen=11]="onopen";a[a.onbufferedamountlow=12]=
"onbufferedamountlow";a[a.onerror=13]="onerror";a[a.onclosing=14]="onclosing";a[a.onclose=15]="onclose";a[a.onmessage=16]="onmessage";a[a.close=17]="close";a[a.send_text=18]="send_text";a[a.send_binary=19]="send_binary"})(C=a.method_id_RTCDataChannel_t||(a.method_id_RTCDataChannel_t={}));var R;(function(a){a[a.ctor=0]="ctor";a[a.transport=1]="transport";a[a.state=2]="state";a[a.maxMessageSize=3]="maxMessageSize";a[a.maxChannels=4]="maxChannels";a[a.onstatechange=5]="onstatechange"})(R=a.method_id_RTCSctpTransport_t||
(a.method_id_RTCSctpTransport_t={}));var K;(function(a){a[a.ctor=0]="ctor";a[a.getCallConstraints=1]="getCallConstraints";a[a.onupdate=2]="onupdate"})(K=a.method_id_StreamResolution_t||(a.method_id_StreamResolution_t={}));a.class_lib_info=new b.WebrpcClassLibInfo("webrpc_class_library",[new b.WebrpcClassInfo(c.EngineControl,"EngineControl",[new b.WebrpcMethodInfo(c.EngineControl,l.ctor,"ctor",!1),new b.WebrpcMethodInfo(c.EngineControl,l.version,"version",!0),new b.WebrpcMethodInfo(c.EngineControl,
l.feature_flags,"feature_flags",!0),new b.WebrpcMethodInfo(c.EngineControl,l.version_info,"version_info",!0,a.FEATURE_ms_teams_desktop_sharing),new b.WebrpcMethodInfo(c.EngineControl,l.osinfo,"osinfo",!0,a.FEATURE_ms_teams_osinfo),new b.WebrpcMethodInfo(c.EngineControl,l.endpoint_id,"endpoint_id",!0,a.FEATURE_ms_teams_endpoint_id),new b.WebrpcMethodInfo(c.EngineControl,l.set_client_info,"set_client_info",!1,a.FEATURE_ms_teams_client_info),new b.WebrpcMethodInfo(c.EngineControl,l.hardware_info,"hardware_info",
!0,a.FEATURE_ms_teams_hardware_info)]),new b.WebrpcClassInfo(c.RTCPeerConnection,"RTCPeerConnection",[new b.WebrpcMethodInfo(c.RTCPeerConnection,h.ctor,"ctor",!1),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.localDescription,"localDescription",!0),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.remoteDescription,"remoteDescription",!0),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.readyState,"readyState",!0),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.iceState,"iceState",!0),new b.WebrpcMethodInfo(c.RTCPeerConnection,
h.localStreams,"localStreams",!0),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.remoteStreams,"remoteStreams",!0),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.createOffer,"createOffer",!1),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.createAnswer,"createAnswer",!1),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.setLocalDescription,"setLocalDescription",!1),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.setRemoteDescription,"setRemoteDescription",!1),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.updateIce,
"updateIce",!0),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.addIceCandidate,"addIceCandidate",!0),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.addStream,"addStream",!0),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.removeStream,"removeStream",!0),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.close,"close",!0),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.iceConnectionState,"iceConnectionState",!0),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.iceGatheringState,"iceGatheringState",!0),new b.WebrpcMethodInfo(c.RTCPeerConnection,
h.signalingState,"signalingState",!0),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.onaddstream,"onaddstream",!0),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.onicecandidate,"onicecandidate",!0),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.oniceconnectionstatechange,"oniceconnectionstatechange",!0),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.onicegatheringstatechange,"onicegatheringstatechange",!0),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.onsignalingstatechange,"onsignalingstatechange",!0),new b.WebrpcMethodInfo(c.RTCPeerConnection,
h.onnegotiationneeded,"onnegotiationneeded",!0),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.onremovestream,"onremovestream",!0),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.getStats,"getStats",!1),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.getReceivers,"getReceivers",!1,a.FEATURE_ms_teams_speaking_indicator),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.getSenders,"getSenders",!1,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.addTrack,"addTrack",!1,a.FEATURE_ms_teams_pstn),
new b.WebrpcMethodInfo(c.RTCPeerConnection,h.removeTrack,"removeTrack",!1,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.ontrack,"ontrack",!0,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.setLocalDescription_v2,"setLocalDescription_v2",!1,a.FEATURE_ms_teams_webrtc_1dot0),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.setRemoteDescription_v2,"setRemoteDescription_v2",!1,a.FEATURE_ms_teams_webrtc_1dot0),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.addTransceiverWithTrack,
"addTransceiverWithTrack",!1,a.FEATURE_ms_teams_webrtc_1dot0),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.addTransceiverWithKind,"addTransceiverWithKind",!1,a.FEATURE_ms_teams_webrtc_1dot0),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.getTransceivers,"getTransceivers",!1,a.FEATURE_ms_teams_webrtc_1dot0),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.onconnectionstatechange,"onconnectionstatechange",!0,a.FEATURE_ms_teams_webrtc_1dot0),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.sctp,"sctp",!0,a.FEATURE_ms_teams_data_channel),
new b.WebrpcMethodInfo(c.RTCPeerConnection,h.ondatachannel,"ondatachannel",!0,a.FEATURE_ms_teams_data_channel),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.createDataChannel,"createDataChannel",!1,a.FEATURE_ms_teams_data_channel),new b.WebrpcMethodInfo(c.RTCPeerConnection,h.getStats_v2,"getStats_v2",!1,a.FEATURE_ms_teams_webrtc_1dot0)]),new b.WebrpcClassInfo(c.RTCSessionDescription,"RTCSessionDescription",[new b.WebrpcMethodInfo(c.RTCSessionDescription,q.ctor,"ctor",!1),new b.WebrpcMethodInfo(c.RTCSessionDescription,
q.type,"type",!0),new b.WebrpcMethodInfo(c.RTCSessionDescription,q.sdp,"sdp",!0)]),new b.WebrpcClassInfo(c.RTCIceCandidate,"RTCIceCandidate",[new b.WebrpcMethodInfo(c.RTCIceCandidate,z.ctor,"ctor",!1),new b.WebrpcMethodInfo(c.RTCIceCandidate,z.candidate,"candidate",!0),new b.WebrpcMethodInfo(c.RTCIceCandidate,z.sdpMid,"sdpMid",!0),new b.WebrpcMethodInfo(c.RTCIceCandidate,z.sdpMLineIndex,"sdpMLineIndex",!0)]),new b.WebrpcClassInfo(c.RTCIceCandidateEvent,"RTCIceCandidateEvent",[new b.WebrpcMethodInfo(c.RTCIceCandidateEvent,
g.ctor,"ctor",!1),new b.WebrpcMethodInfo(c.RTCIceCandidateEvent,g.candidate,"candidate",!0)]),new b.WebrpcClassInfo(c.MediaDevices,"MediaDevices",[new b.WebrpcMethodInfo(c.MediaDevices,d.ctor,"ctor",!1),new b.WebrpcMethodInfo(c.MediaDevices,d.enumerateDevices,"enumerateDevices",!1),new b.WebrpcMethodInfo(c.MediaDevices,d.getDisplayMedia,"getDisplayMedia",!1,a.FEATURE_ms_teams_desktop_sharing),new b.WebrpcMethodInfo(c.MediaDevices,d.ondevicechange,"ondevicechange",!0,a.FEATURE_ms_teams_speaking_indicator),
new b.WebrpcMethodInfo(c.MediaDevices,d.enumerateDevicesV2,"enuerateDevicesV2",!1,a.FEATURE_ms_teams_enumerate_devices_v2)]),new b.WebrpcClassInfo(c.MediaDeviceInfo,"MediaDeviceInfo",[new b.WebrpcMethodInfo(c.MediaDeviceInfo,p.ctor,"ctor",!1),new b.WebrpcMethodInfo(c.MediaDeviceInfo,p.deviceId,"deviceId",!0),new b.WebrpcMethodInfo(c.MediaDeviceInfo,p.kind,"kind",!0),new b.WebrpcMethodInfo(c.MediaDeviceInfo,p.label,"label",!0),new b.WebrpcMethodInfo(c.MediaDeviceInfo,p.groupId,"groupId",!0)]),new b.WebrpcClassInfo(c.MediaStreamTrack,
"MediaStreamTrack",[new b.WebrpcMethodInfo(c.MediaStreamTrack,n.ctor,"ctor",!1),new b.WebrpcMethodInfo(c.MediaStreamTrack,n.clone,"clone",!1),new b.WebrpcMethodInfo(c.MediaStreamTrack,n.stop,"stop",!1),new b.WebrpcMethodInfo(c.MediaStreamTrack,n.getCapabilities,"getCapabilities",!1),new b.WebrpcMethodInfo(c.MediaStreamTrack,n.getSettings,"getSettings",!1),new b.WebrpcMethodInfo(c.MediaStreamTrack,n.applyConstraints,"applyConstraints",!1,a.FEATURE_ms_teams_desktop_sharing),new b.WebrpcMethodInfo(c.MediaStreamTrack,
n.kind,"kind",!0),new b.WebrpcMethodInfo(c.MediaStreamTrack,n.id,"id",!0),new b.WebrpcMethodInfo(c.MediaStreamTrack,n.label,"label",!0),new b.WebrpcMethodInfo(c.MediaStreamTrack,n.enabled,"enabled",!0),new b.WebrpcMethodInfo(c.MediaStreamTrack,n.muted,"muted",!0),new b.WebrpcMethodInfo(c.MediaStreamTrack,n.readyState,"readyState",!0),new b.WebrpcMethodInfo(c.MediaStreamTrack,n.onended,"onended",!0),new b.WebrpcMethodInfo(c.MediaStreamTrack,n.onmute,"onmute",!0),new b.WebrpcMethodInfo(c.MediaStreamTrack,
n.onunmute,"onunmute",!0),new b.WebrpcMethodInfo(c.MediaStreamTrack,n.getConstraints,"getConstraints",!1,a.FEATURE_ms_teams_mstrack_constraints)]),new b.WebrpcClassInfo(c.MediaStream,"MediaStream",[new b.WebrpcMethodInfo(c.MediaStream,k.ctor,"ctor",!1),new b.WebrpcMethodInfo(c.MediaStream,k.id,"id",!0),new b.WebrpcMethodInfo(c.MediaStream,k.getAudioTracks,"getAudioTracks",!1),new b.WebrpcMethodInfo(c.MediaStream,k.getVideoTracks,"getVideoTracks",!1),new b.WebrpcMethodInfo(c.MediaStream,k.getTracks,
"getTracks",!1),new b.WebrpcMethodInfo(c.MediaStream,k.getTrackById,"getTrackById",!1),new b.WebrpcMethodInfo(c.MediaStream,k.addTrack,"addTrack",!1),new b.WebrpcMethodInfo(c.MediaStream,k.removeTrack,"removeTrack",!1),new b.WebrpcMethodInfo(c.MediaStream,k.clone,"clone",!0),new b.WebrpcMethodInfo(c.MediaStream,k.active,"active",!0)]),new b.WebrpcClassInfo(c.NavigatorUserMedia,"NavigatorUserMedia",[new b.WebrpcMethodInfo(c.NavigatorUserMedia,v.ctor,"ctor",!1),new b.WebrpcMethodInfo(c.NavigatorUserMedia,
v.getUserMedia,"getUserMedia",!1),new b.WebrpcMethodInfo(c.NavigatorUserMedia,v.setCodecCapabilities,"setCodecCapabilities",!1,a.FEATURE_ms_teams_codec_capability),new b.WebrpcMethodInfo(c.NavigatorUserMedia,v.getCapabilities,"getRtpCapabilities",!1,a.FEATURE_ms_teams_webrtc_1dot0)]),new b.WebrpcClassInfo(c.MediaStreamEvent,"MediaStreamEvent",[new b.WebrpcMethodInfo(c.MediaStreamEvent,B.ctor,"ctor",!1),new b.WebrpcMethodInfo(c.MediaStreamEvent,B.stream,"stream",!0)]),new b.WebrpcClassInfo(c.VideoElement,
"VideoElement",[new b.WebrpcMethodInfo(c.VideoElement,t.ctor,"ctor",!1),new b.WebrpcMethodInfo(c.VideoElement,t.sinkId,"sinkId",!0),new b.WebrpcMethodInfo(c.VideoElement,t.connectTo,"connectTo",!1),new b.WebrpcMethodInfo(c.VideoElement,t.disconnect,"disconnect",!1),new b.WebrpcMethodInfo(c.VideoElement,t.setFrame,"setFrame",!1),new b.WebrpcMethodInfo(c.VideoElement,t.addClipRect,"addClipRect",!1),new b.WebrpcMethodInfo(c.VideoElement,t.removeClipRect,"removeClipRect",!1),new b.WebrpcMethodInfo(c.VideoElement,
t.onerror,"onerror",!0),new b.WebrpcMethodInfo(c.VideoElement,t.onvideoframechanged,"onvideoframechanged",!0),new b.WebrpcMethodInfo(c.VideoElement,t.placement,"placement",!0,a.FEATURE_ms_teams_video_placement)]),new b.WebrpcClassInfo(c.AudioElement,"AudioElement",[new b.WebrpcMethodInfo(c.AudioElement,m.ctor,"ctor",!1),new b.WebrpcMethodInfo(c.AudioElement,m.sinkId,"sinkId",!0),new b.WebrpcMethodInfo(c.AudioElement,m.srcObject,"srcObject",!0),new b.WebrpcMethodInfo(c.AudioElement,m.src,"src",!0),
new b.WebrpcMethodInfo(c.AudioElement,m.play,"play",!1),new b.WebrpcMethodInfo(c.AudioElement,m.pause,"pause",!1),new b.WebrpcMethodInfo(c.AudioElement,m.loop,"loop",!0,a.FEATURE_ms_teams_audio_notifications_loop)]),new b.WebrpcClassInfo(c.RTCRtpReceiver,"RTCRtpReceiver",[new b.WebrpcMethodInfo(c.RTCRtpReceiver,D.ctor,"ctor",!1,a.FEATURE_ms_teams_speaking_indicator),new b.WebrpcMethodInfo(c.RTCRtpReceiver,D.track,"track",!0,a.FEATURE_ms_teams_speaking_indicator),new b.WebrpcMethodInfo(c.RTCRtpReceiver,
D.getContributingSources,"getContributingSources",!1,a.FEATURE_ms_teams_speaking_indicator),new b.WebrpcMethodInfo(c.RTCRtpReceiver,D.getSynchronizationSources,"getSynchronizationSources",!1,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCRtpReceiver,D.transport,"transport",!0,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCRtpReceiver,D.rtcpTransport,"rtcptransport",!0,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCRtpReceiver,D.getCapabilities,"getCapabilities",!1,a.FEATURE_ms_teams_pstn),
new b.WebrpcMethodInfo(c.RTCRtpReceiver,D.getParameters,"getParameters",!1,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCRtpReceiver,D.getStats,"getStats",!1,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCRtpReceiver,D.getCapabilities_v2,"getCapabilities_v2",!1,a.FEATURE_ms_teams_webrtc_1dot0)]),new b.WebrpcClassInfo(c.RTCRtpSender,"RTCRtpSender",[new b.WebrpcMethodInfo(c.RTCRtpSender,y.ctor,"ctor",!1,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCRtpSender,y.track,"track",!0,a.FEATURE_ms_teams_pstn),
new b.WebrpcMethodInfo(c.RTCRtpSender,y.transport,"transport",!0,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCRtpSender,y.rtcpTransport,"rtcpTransport",!0,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCRtpSender,y.dtmf,"dtmf",!0,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCRtpSender,y.getCapabilities,"getCapabilities",!1,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCRtpSender,y.getParameters,"getParameters",!1,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCRtpSender,
y.setParameters,"setParameters",!1,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCRtpSender,y.replaceTrack,"replaceTrack",!1,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCRtpSender,y.getStats,"getStats",!1,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCRtpSender,y.setStreams,"setStreams",!1,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCRtpSender,y.getCapabilities_v2,"getCapabilities_v2",!1,a.FEATURE_ms_teams_webrtc_1dot0)]),new b.WebrpcClassInfo(c.RTCDtlsTransport,"RTCDtlsTransport",
[new b.WebrpcMethodInfo(c.RTCDtlsTransport,x.ctor,"ctor",!1,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCDtlsTransport,x.transport,"transport",!0,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCDtlsTransport,x.state,"state",!0,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCDtlsTransport,x.getRemoteCertificates,"getRemoteCertificates",!1,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCDtlsTransport,x.onstatechange,"onstatechange",!0,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCDtlsTransport,
x.onerror,"onerror",!0,a.FEATURE_ms_teams_pstn)]),new b.WebrpcClassInfo(c.RTCIceTransport,"RTCIceTransport",[new b.WebrpcMethodInfo(c.RTCIceTransport,r.ctor,"ctor",!1,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCIceTransport,r.role,"role",!0,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCIceTransport,r.component,"component",!0,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCIceTransport,r.state,"state",!0,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCIceTransport,r.gatheringState,
"gatheringState",!0,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCIceTransport,r.localcandidates,"localcandidates",!0,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCIceTransport,r.remotecandidates,"remotecandidates",!0,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCIceTransport,r.onstatechange,"onstatechange",!0,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCIceTransport,r.ongatheringstatechange,"ongatheringstatechange",!0,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCIceTransport,
r.onselectedcandidatepairchange,"onselectedcandidatepairchange",!0,a.FEATURE_ms_teams_pstn)]),new b.WebrpcClassInfo(c.RTCDTMFSender,"RTCDTMFSender",[new b.WebrpcMethodInfo(c.RTCDTMFSender,A.ctor,"ctor",!1,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCDTMFSender,A.insertDTMF,"insertDTMF",!1,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCDTMFSender,A.ontonechange,"ontonechange",!0,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCDTMFSender,A.canInsertDTMF,"canInsertDTMF",!0,a.FEATURE_ms_teams_pstn),
new b.WebrpcMethodInfo(c.RTCDTMFSender,A.toneBuffer,"toneBuffer",!0,a.FEATURE_ms_teams_pstn)]),new b.WebrpcClassInfo(c.RTCDTMFToneChangeEvent,"RTCDTMFToneChangeEvent",[new b.WebrpcMethodInfo(c.RTCDTMFToneChangeEvent,M.ctor,"ctor",!1,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCDTMFToneChangeEvent,M.tone,"tone",!0,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCDTMFToneChangeEvent,M.tone_buffer,"tone_buffer",!0,a.FEATURE_ms_teams_pstn)]),new b.WebrpcClassInfo(c.RTCIceCandidatePair,"RTCIceCandidatePair",
[new b.WebrpcMethodInfo(c.RTCIceCandidatePair,F.ctor,"ctor",!1,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCIceCandidatePair,F.local,"local",!0,a.FEATURE_ms_teams_pstn),new b.WebrpcMethodInfo(c.RTCIceCandidatePair,F.remote,"remote",!0,a.FEATURE_ms_teams_pstn)]),new b.WebrpcClassInfo(c.RTCRtpTransceiver,"RTCRtpTransceiver",[new b.WebrpcMethodInfo(c.RTCRtpTransceiver,J.ctor,"ctor",!1,a.FEATURE_ms_teams_webrtc_1dot0),new b.WebrpcMethodInfo(c.RTCRtpTransceiver,J.mid,"mid",!0,a.FEATURE_ms_teams_webrtc_1dot0),
new b.WebrpcMethodInfo(c.RTCRtpTransceiver,J.sender,"sender",!0,a.FEATURE_ms_teams_webrtc_1dot0),new b.WebrpcMethodInfo(c.RTCRtpTransceiver,J.receiver,"receiver",!0,a.FEATURE_ms_teams_webrtc_1dot0),new b.WebrpcMethodInfo(c.RTCRtpTransceiver,J.direction,"direction",!0,a.FEATURE_ms_teams_webrtc_1dot0),new b.WebrpcMethodInfo(c.RTCRtpTransceiver,J.currentDirection,"currentDirection",!0,a.FEATURE_ms_teams_webrtc_1dot0),new b.WebrpcMethodInfo(c.RTCRtpTransceiver,J.stop,"stop",!1,a.FEATURE_ms_teams_webrtc_1dot0),
new b.WebrpcMethodInfo(c.RTCRtpTransceiver,J.setCodecPreferences,"setCodecPreferences",!1,a.FEATURE_ms_teams_webrtc_1dot0)]),new b.WebrpcClassInfo(c.ScreenSharingRemote,"ScreenSharingRemote",[new b.WebrpcMethodInfo(c.ScreenSharingRemote,G.ctor,"ctor",!1,a.FEATURE_ms_teams_monitor_sharing),new b.WebrpcMethodInfo(c.ScreenSharingRemote,G.getScreensAsync,"getScreensAsync",!1,a.FEATURE_ms_teams_monitor_sharing),new b.WebrpcMethodInfo(c.ScreenSharingRemote,G.onscreentopologychanged,"onscreentopologychanged",
!0,a.FEATURE_ms_teams_monitor_sharing)]),new b.WebrpcClassInfo(c.ScreenSource,"ScreenSource",[new b.WebrpcMethodInfo(c.ScreenSource,L.ctor,"ctor",!1,a.FEATURE_ms_teams_monitor_sharing),new b.WebrpcMethodInfo(c.ScreenSource,L.srcid,"srcid",!0,a.FEATURE_ms_teams_monitor_sharing),new b.WebrpcMethodInfo(c.ScreenSource,L.deviceid,"deviceid",!0,a.FEATURE_ms_teams_monitor_sharing),new b.WebrpcMethodInfo(c.ScreenSource,L.type,"type",!0,a.FEATURE_ms_teams_monitor_sharing),new b.WebrpcMethodInfo(c.ScreenSource,
L.name,"name",!0,a.FEATURE_ms_teams_monitor_sharing),new b.WebrpcMethodInfo(c.ScreenSource,L.imagedata,"imagedata",!0,a.FEATURE_ms_teams_monitor_sharing),new b.WebrpcMethodInfo(c.ScreenSource,L.hwnd,"hwnd",!0,a.FEATURE_ms_teams_monitor_sharing),new b.WebrpcMethodInfo(c.ScreenSource,L.origin,"origin",!0,a.FEATURE_ms_teams_monitor_sharing),new b.WebrpcMethodInfo(c.ScreenSource,L.caption,"caption",!0,a.FEATURE_ms_teams_monitor_sharing),new b.WebrpcMethodInfo(c.ScreenSource,L.pid,"pid",!0,a.FEATURE_ms_teams_monitor_sharing),
new b.WebrpcMethodInfo(c.ScreenSource,L.bounds,"bounds",!0,a.FEATURE_ms_teams_gtc)]),new b.WebrpcClassInfo(c.E911Service,"E911Service",[new b.WebrpcMethodInfo(c.E911Service,P.ctor,"ctor",!1,a.FEATURE_ms_teams_e911),new b.WebrpcMethodInfo(c.E911Service,P.getE911Info,"getE911Info",!1,a.FEATURE_ms_teams_e911),new b.WebrpcMethodInfo(c.E911Service,P.onupdate,"onupdate",!0,a.FEATURE_ms_teams_e911)]),new b.WebrpcClassInfo(c.RTCDataChannel,"RTCDataChannel",[new b.WebrpcMethodInfo(c.RTCDataChannel,C.ctor,
"ctor",!1,a.FEATURE_ms_teams_data_channel),new b.WebrpcMethodInfo(c.RTCDataChannel,C.label,"label",!0,a.FEATURE_ms_teams_data_channel),new b.WebrpcMethodInfo(c.RTCDataChannel,C.ordered,"ordered",!0,a.FEATURE_ms_teams_data_channel),new b.WebrpcMethodInfo(c.RTCDataChannel,C.maxPacketLifeTime,"maxPacketLifeTime",!0,a.FEATURE_ms_teams_data_channel),new b.WebrpcMethodInfo(c.RTCDataChannel,C.maxRetransmits,"maxRetransmits",!0,a.FEATURE_ms_teams_data_channel),new b.WebrpcMethodInfo(c.RTCDataChannel,C.protocol,
"protocol",!0,a.FEATURE_ms_teams_data_channel),new b.WebrpcMethodInfo(c.RTCDataChannel,C.negotiated,"negotiated",!0,a.FEATURE_ms_teams_data_channel),new b.WebrpcMethodInfo(c.RTCDataChannel,C.id,"id",!0,a.FEATURE_ms_teams_data_channel),new b.WebrpcMethodInfo(c.RTCDataChannel,C.readyState,"readyState",!0,a.FEATURE_ms_teams_data_channel),new b.WebrpcMethodInfo(c.RTCDataChannel,C.bufferedAmount,"bufferedAmount",!0,a.FEATURE_ms_teams_data_channel),new b.WebrpcMethodInfo(c.RTCDataChannel,C.bufferedAmountLowThreshold,
"bufferedAmountLowThreshold",!0,a.FEATURE_ms_teams_data_channel),new b.WebrpcMethodInfo(c.RTCDataChannel,C.onopen,"onopen",!0,a.FEATURE_ms_teams_data_channel),new b.WebrpcMethodInfo(c.RTCDataChannel,C.onbufferedamountlow,"onbufferedamountlow",!0,a.FEATURE_ms_teams_data_channel),new b.WebrpcMethodInfo(c.RTCDataChannel,C.onerror,"onerror",!0,a.FEATURE_ms_teams_data_channel),new b.WebrpcMethodInfo(c.RTCDataChannel,C.onclosing,"onclosing",!0,a.FEATURE_ms_teams_data_channel),new b.WebrpcMethodInfo(c.RTCDataChannel,
C.onclose,"onclose",!0,a.FEATURE_ms_teams_data_channel),new b.WebrpcMethodInfo(c.RTCDataChannel,C.onmessage,"onmessage",!0,a.FEATURE_ms_teams_data_channel),new b.WebrpcMethodInfo(c.RTCDataChannel,C.close,"close",!1,a.FEATURE_ms_teams_data_channel),new b.WebrpcMethodInfo(c.RTCDataChannel,C.send_text,"send_text",!1,a.FEATURE_ms_teams_data_channel),new b.WebrpcMethodInfo(c.RTCDataChannel,C.send_binary,"send_binary",!1,a.FEATURE_ms_teams_data_channel)]),new b.WebrpcClassInfo(c.RTCSctpTransport,"RTCSctpTransport",
[new b.WebrpcMethodInfo(c.RTCSctpTransport,R.ctor,"ctor",!1,a.FEATURE_ms_teams_data_channel),new b.WebrpcMethodInfo(c.RTCSctpTransport,R.transport,"transport",!0,a.FEATURE_ms_teams_data_channel),new b.WebrpcMethodInfo(c.RTCSctpTransport,R.state,"state",!0,a.FEATURE_ms_teams_data_channel),new b.WebrpcMethodInfo(c.RTCSctpTransport,R.maxMessageSize,"maxMessageSize",!0,a.FEATURE_ms_teams_data_channel),new b.WebrpcMethodInfo(c.RTCSctpTransport,R.maxChannels,"maxChannels",!0,a.FEATURE_ms_teams_data_channel),
new b.WebrpcMethodInfo(c.RTCSctpTransport,R.onstatechange,"onstatechange",!0,a.FEATURE_ms_teams_data_channel)]),new b.WebrpcClassInfo(c.StreamResolution,"StreamResolution",[new b.WebrpcMethodInfo(c.StreamResolution,K.ctor,"ctor",!1,a.FEATURE_ms_teams_stream_resolution),new b.WebrpcMethodInfo(c.StreamResolution,K.getCallConstraints,"getCallConstraints",!1,a.FEATURE_ms_teams_stream_resolution),new b.WebrpcMethodInfo(c.StreamResolution,K.onupdate,"onupdate",!0,a.FEATURE_ms_teams_stream_resolution)])])},
545:function(b,a,c){var e=this&&this.__spreadArrays||function(){for(var a=0,b=0,c=arguments.length;b<c;b++)a+=arguments[b].length;for(var a=Array(a),e=0,b=0;b<c;b++)for(var k=arguments[b],h=0,l=k.length;h<l;h++,e++)a[e]=k[h];return a};Object.defineProperty(a,"__esModule",{value:!0});a.WsJsonUtil=a.ws_msg_type_t=void 0;var l=c(550),h;(function(a){a[a.req=0]="req";a[a.reply=1]="reply";a[a.event_req=2]="event_req";a[a.event_reply=3]="event_reply"})(h=a.ws_msg_type_t||(a.ws_msg_type_t={}));b=function(){function a(){}
a.createMessageByid=function(a,b,c,d,h,p){for(var g=[],B=6;B<arguments.length;B++)g[B-6]=arguments[B];(B=l.WebrpcClassLibInfoUtil.getMethodByid(d,h))&&B.isprop||(a=!1);return this.createMessage.apply(this,e([c,a,b,d,h,p],g))};a.createMessage=function(a,b,c,d,h,l){for(var g=[],p=6;p<arguments.length;p++)g[p-6]=arguments[p];return{v:"webrtc",hdr:{version:this._version,msg_type:this.getMsgType(a),modifier:b,destroy:c,proc:{iid:d,methodid:h}},objref:{oid:l},params:e(g)}};a.getMsgType=function(a){var b=
"";switch(a){default:b="req";break;case h.reply:b="reply";break;case h.event_req:b="event-req";break;case h.event_reply:b="event-reply"}return b};a._version=1;return a}();a.WsJsonUtil=b}},p={};return e(307)}()});

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],3:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/array/from"), __esModule: true };
},{"core-js/library/fn/array/from":24}],4:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/get-iterator"), __esModule: true };
},{"core-js/library/fn/get-iterator":25}],5:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/is-iterable"), __esModule: true };
},{"core-js/library/fn/is-iterable":26}],6:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/create"), __esModule: true };
},{"core-js/library/fn/object/create":27}],7:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/define-property"), __esModule: true };
},{"core-js/library/fn/object/define-property":28}],8:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/get-own-property-descriptor"), __esModule: true };
},{"core-js/library/fn/object/get-own-property-descriptor":29}],9:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/get-prototype-of"), __esModule: true };
},{"core-js/library/fn/object/get-prototype-of":30}],10:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/set-prototype-of"), __esModule: true };
},{"core-js/library/fn/object/set-prototype-of":31}],11:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/promise"), __esModule: true };
},{"core-js/library/fn/promise":32}],12:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/symbol"), __esModule: true };
},{"core-js/library/fn/symbol":33}],13:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/symbol/iterator"), __esModule: true };
},{"core-js/library/fn/symbol/iterator":34}],14:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _promise = require("../core-js/promise");

var _promise2 = _interopRequireDefault(_promise);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (fn) {
  return function () {
    var gen = fn.apply(this, arguments);
    return new _promise2.default(function (resolve, reject) {
      function step(key, arg) {
        try {
          var info = gen[key](arg);
          var value = info.value;
        } catch (error) {
          reject(error);
          return;
        }

        if (info.done) {
          resolve(value);
        } else {
          return _promise2.default.resolve(value).then(function (value) {
            step("next", value);
          }, function (err) {
            step("throw", err);
          });
        }
      }

      return step("next");
    });
  };
};
},{"../core-js/promise":11}],15:[function(require,module,exports){
"use strict";

exports.__esModule = true;

exports.default = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};
},{}],16:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _defineProperty = require("../core-js/object/define-property");

var _defineProperty2 = _interopRequireDefault(_defineProperty);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      (0, _defineProperty2.default)(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();
},{"../core-js/object/define-property":7}],17:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _getPrototypeOf = require("../core-js/object/get-prototype-of");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _getOwnPropertyDescriptor = require("../core-js/object/get-own-property-descriptor");

var _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function get(object, property, receiver) {
  if (object === null) object = Function.prototype;
  var desc = (0, _getOwnPropertyDescriptor2.default)(object, property);

  if (desc === undefined) {
    var parent = (0, _getPrototypeOf2.default)(object);

    if (parent === null) {
      return undefined;
    } else {
      return get(parent, property, receiver);
    }
  } else if ("value" in desc) {
    return desc.value;
  } else {
    var getter = desc.get;

    if (getter === undefined) {
      return undefined;
    }

    return getter.call(receiver);
  }
};
},{"../core-js/object/get-own-property-descriptor":8,"../core-js/object/get-prototype-of":9}],18:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _setPrototypeOf = require("../core-js/object/set-prototype-of");

var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);

var _create = require("../core-js/object/create");

var _create2 = _interopRequireDefault(_create);

var _typeof2 = require("../helpers/typeof");

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
  }

  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
};
},{"../core-js/object/create":6,"../core-js/object/set-prototype-of":10,"../helpers/typeof":22}],19:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _typeof2 = require("../helpers/typeof");

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
};
},{"../helpers/typeof":22}],20:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _isIterable2 = require("../core-js/is-iterable");

var _isIterable3 = _interopRequireDefault(_isIterable2);

var _getIterator2 = require("../core-js/get-iterator");

var _getIterator3 = _interopRequireDefault(_getIterator2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  function sliceIterator(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = (0, _getIterator3.default)(arr), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if ((0, _isIterable3.default)(Object(arr))) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();
},{"../core-js/get-iterator":4,"../core-js/is-iterable":5}],21:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _from = require("../core-js/array/from");

var _from2 = _interopRequireDefault(_from);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (arr) {
  return Array.isArray(arr) ? arr : (0, _from2.default)(arr);
};
},{"../core-js/array/from":3}],22:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _iterator = require("../core-js/symbol/iterator");

var _iterator2 = _interopRequireDefault(_iterator);

var _symbol = require("../core-js/symbol");

var _symbol2 = _interopRequireDefault(_symbol);

var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
} : function (obj) {
  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
};
},{"../core-js/symbol":12,"../core-js/symbol/iterator":13}],23:[function(require,module,exports){
module.exports = require("regenerator-runtime");

},{"regenerator-runtime":128}],24:[function(require,module,exports){
require('../../modules/es6.string.iterator');
require('../../modules/es6.array.from');
module.exports = require('../../modules/_core').Array.from;

},{"../../modules/_core":42,"../../modules/es6.array.from":112,"../../modules/es6.string.iterator":121}],25:[function(require,module,exports){
require('../modules/web.dom.iterable');
require('../modules/es6.string.iterator');
module.exports = require('../modules/core.get-iterator');

},{"../modules/core.get-iterator":110,"../modules/es6.string.iterator":121,"../modules/web.dom.iterable":127}],26:[function(require,module,exports){
require('../modules/web.dom.iterable');
require('../modules/es6.string.iterator');
module.exports = require('../modules/core.is-iterable');

},{"../modules/core.is-iterable":111,"../modules/es6.string.iterator":121,"../modules/web.dom.iterable":127}],27:[function(require,module,exports){
require('../../modules/es6.object.create');
var $Object = require('../../modules/_core').Object;
module.exports = function create(P, D) {
  return $Object.create(P, D);
};

},{"../../modules/_core":42,"../../modules/es6.object.create":114}],28:[function(require,module,exports){
require('../../modules/es6.object.define-property');
var $Object = require('../../modules/_core').Object;
module.exports = function defineProperty(it, key, desc) {
  return $Object.defineProperty(it, key, desc);
};

},{"../../modules/_core":42,"../../modules/es6.object.define-property":115}],29:[function(require,module,exports){
require('../../modules/es6.object.get-own-property-descriptor');
var $Object = require('../../modules/_core').Object;
module.exports = function getOwnPropertyDescriptor(it, key) {
  return $Object.getOwnPropertyDescriptor(it, key);
};

},{"../../modules/_core":42,"../../modules/es6.object.get-own-property-descriptor":116}],30:[function(require,module,exports){
require('../../modules/es6.object.get-prototype-of');
module.exports = require('../../modules/_core').Object.getPrototypeOf;

},{"../../modules/_core":42,"../../modules/es6.object.get-prototype-of":117}],31:[function(require,module,exports){
require('../../modules/es6.object.set-prototype-of');
module.exports = require('../../modules/_core').Object.setPrototypeOf;

},{"../../modules/_core":42,"../../modules/es6.object.set-prototype-of":118}],32:[function(require,module,exports){
require('../modules/es6.object.to-string');
require('../modules/es6.string.iterator');
require('../modules/web.dom.iterable');
require('../modules/es6.promise');
require('../modules/es7.promise.finally');
require('../modules/es7.promise.try');
module.exports = require('../modules/_core').Promise;

},{"../modules/_core":42,"../modules/es6.object.to-string":119,"../modules/es6.promise":120,"../modules/es6.string.iterator":121,"../modules/es7.promise.finally":123,"../modules/es7.promise.try":124,"../modules/web.dom.iterable":127}],33:[function(require,module,exports){
require('../../modules/es6.symbol');
require('../../modules/es6.object.to-string');
require('../../modules/es7.symbol.async-iterator');
require('../../modules/es7.symbol.observable');
module.exports = require('../../modules/_core').Symbol;

},{"../../modules/_core":42,"../../modules/es6.object.to-string":119,"../../modules/es6.symbol":122,"../../modules/es7.symbol.async-iterator":125,"../../modules/es7.symbol.observable":126}],34:[function(require,module,exports){
require('../../modules/es6.string.iterator');
require('../../modules/web.dom.iterable');
module.exports = require('../../modules/_wks-ext').f('iterator');

},{"../../modules/_wks-ext":107,"../../modules/es6.string.iterator":121,"../../modules/web.dom.iterable":127}],35:[function(require,module,exports){
module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};

},{}],36:[function(require,module,exports){
module.exports = function () { /* empty */ };

},{}],37:[function(require,module,exports){
module.exports = function (it, Constructor, name, forbiddenField) {
  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};

},{}],38:[function(require,module,exports){
var isObject = require('./_is-object');
module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};

},{"./_is-object":62}],39:[function(require,module,exports){
// false -> Array#indexOf
// true  -> Array#includes
var toIObject = require('./_to-iobject');
var toLength = require('./_to-length');
var toAbsoluteIndex = require('./_to-absolute-index');
module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
      if (O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};

},{"./_to-absolute-index":98,"./_to-iobject":100,"./_to-length":101}],40:[function(require,module,exports){
// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = require('./_cof');
var TAG = require('./_wks')('toStringTag');
// ES3 wrong here
var ARG = cof(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (e) { /* empty */ }
};

module.exports = function (it) {
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};

},{"./_cof":41,"./_wks":108}],41:[function(require,module,exports){
var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};

},{}],42:[function(require,module,exports){
var core = module.exports = { version: '2.6.12' };
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef

},{}],43:[function(require,module,exports){
'use strict';
var $defineProperty = require('./_object-dp');
var createDesc = require('./_property-desc');

module.exports = function (object, index, value) {
  if (index in object) $defineProperty.f(object, index, createDesc(0, value));
  else object[index] = value;
};

},{"./_object-dp":74,"./_property-desc":87}],44:[function(require,module,exports){
// optional / simple context binding
var aFunction = require('./_a-function');
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};

},{"./_a-function":35}],45:[function(require,module,exports){
// 7.2.1 RequireObjectCoercible(argument)
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};

},{}],46:[function(require,module,exports){
// Thank's IE8 for his funny defineProperty
module.exports = !require('./_fails')(function () {
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
});

},{"./_fails":51}],47:[function(require,module,exports){
var isObject = require('./_is-object');
var document = require('./_global').document;
// typeof document.createElement is 'object' in old IE
var is = isObject(document) && isObject(document.createElement);
module.exports = function (it) {
  return is ? document.createElement(it) : {};
};

},{"./_global":53,"./_is-object":62}],48:[function(require,module,exports){
// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');

},{}],49:[function(require,module,exports){
// all enumerable object keys, includes symbols
var getKeys = require('./_object-keys');
var gOPS = require('./_object-gops');
var pIE = require('./_object-pie');
module.exports = function (it) {
  var result = getKeys(it);
  var getSymbols = gOPS.f;
  if (getSymbols) {
    var symbols = getSymbols(it);
    var isEnum = pIE.f;
    var i = 0;
    var key;
    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
  } return result;
};

},{"./_object-gops":79,"./_object-keys":82,"./_object-pie":83}],50:[function(require,module,exports){
var global = require('./_global');
var core = require('./_core');
var ctx = require('./_ctx');
var hide = require('./_hide');
var has = require('./_has');
var PROTOTYPE = 'prototype';

var $export = function (type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var IS_WRAP = type & $export.W;
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE];
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];
  var key, own, out;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    if (own && has(exports, key)) continue;
    // export native or passed
    out = own ? target[key] : source[key];
    // prevent global pollution for namespaces
    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
    // bind timers to global for call from export context
    : IS_BIND && own ? ctx(out, global)
    // wrap global constructors for prevent change them in library
    : IS_WRAP && target[key] == out ? (function (C) {
      var F = function (a, b, c) {
        if (this instanceof C) {
          switch (arguments.length) {
            case 0: return new C();
            case 1: return new C(a);
            case 2: return new C(a, b);
          } return new C(a, b, c);
        } return C.apply(this, arguments);
      };
      F[PROTOTYPE] = C[PROTOTYPE];
      return F;
    // make static versions for prototype methods
    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
    if (IS_PROTO) {
      (exports.virtual || (exports.virtual = {}))[key] = out;
      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);
    }
  }
};
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;

},{"./_core":42,"./_ctx":44,"./_global":53,"./_has":54,"./_hide":55}],51:[function(require,module,exports){
module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};

},{}],52:[function(require,module,exports){
var ctx = require('./_ctx');
var call = require('./_iter-call');
var isArrayIter = require('./_is-array-iter');
var anObject = require('./_an-object');
var toLength = require('./_to-length');
var getIterFn = require('./core.get-iterator-method');
var BREAK = {};
var RETURN = {};
var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);
  var f = ctx(fn, that, entries ? 2 : 1);
  var index = 0;
  var length, step, iterator, result;
  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if (result === BREAK || result === RETURN) return result;
  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
    result = call(iterator, f, step.value, entries);
    if (result === BREAK || result === RETURN) return result;
  }
};
exports.BREAK = BREAK;
exports.RETURN = RETURN;

},{"./_an-object":38,"./_ctx":44,"./_is-array-iter":60,"./_iter-call":63,"./_to-length":101,"./core.get-iterator-method":109}],53:[function(require,module,exports){
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self
  // eslint-disable-next-line no-new-func
  : Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef

},{}],54:[function(require,module,exports){
var hasOwnProperty = {}.hasOwnProperty;
module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};

},{}],55:[function(require,module,exports){
var dP = require('./_object-dp');
var createDesc = require('./_property-desc');
module.exports = require('./_descriptors') ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};

},{"./_descriptors":46,"./_object-dp":74,"./_property-desc":87}],56:[function(require,module,exports){
var document = require('./_global').document;
module.exports = document && document.documentElement;

},{"./_global":53}],57:[function(require,module,exports){
module.exports = !require('./_descriptors') && !require('./_fails')(function () {
  return Object.defineProperty(require('./_dom-create')('div'), 'a', { get: function () { return 7; } }).a != 7;
});

},{"./_descriptors":46,"./_dom-create":47,"./_fails":51}],58:[function(require,module,exports){
// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function (fn, args, that) {
  var un = that === undefined;
  switch (args.length) {
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return fn.apply(that, args);
};

},{}],59:[function(require,module,exports){
// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = require('./_cof');
// eslint-disable-next-line no-prototype-builtins
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return cof(it) == 'String' ? it.split('') : Object(it);
};

},{"./_cof":41}],60:[function(require,module,exports){
// check on default Array iterator
var Iterators = require('./_iterators');
var ITERATOR = require('./_wks')('iterator');
var ArrayProto = Array.prototype;

module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};

},{"./_iterators":68,"./_wks":108}],61:[function(require,module,exports){
// 7.2.2 IsArray(argument)
var cof = require('./_cof');
module.exports = Array.isArray || function isArray(arg) {
  return cof(arg) == 'Array';
};

},{"./_cof":41}],62:[function(require,module,exports){
module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};

},{}],63:[function(require,module,exports){
// call something on iterator step with safe closing on error
var anObject = require('./_an-object');
module.exports = function (iterator, fn, value, entries) {
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch (e) {
    var ret = iterator['return'];
    if (ret !== undefined) anObject(ret.call(iterator));
    throw e;
  }
};

},{"./_an-object":38}],64:[function(require,module,exports){
'use strict';
var create = require('./_object-create');
var descriptor = require('./_property-desc');
var setToStringTag = require('./_set-to-string-tag');
var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
require('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function () { return this; });

module.exports = function (Constructor, NAME, next) {
  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
  setToStringTag(Constructor, NAME + ' Iterator');
};

},{"./_hide":55,"./_object-create":73,"./_property-desc":87,"./_set-to-string-tag":92,"./_wks":108}],65:[function(require,module,exports){
'use strict';
var LIBRARY = require('./_library');
var $export = require('./_export');
var redefine = require('./_redefine');
var hide = require('./_hide');
var Iterators = require('./_iterators');
var $iterCreate = require('./_iter-create');
var setToStringTag = require('./_set-to-string-tag');
var getPrototypeOf = require('./_object-gpo');
var ITERATOR = require('./_wks')('iterator');
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function () { return this; };

module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME, next);
  var getMethod = function (kind) {
    if (!BUGGY && kind in proto) return proto[kind];
    switch (kind) {
      case KEYS: return function keys() { return new Constructor(this, kind); };
      case VALUES: return function values() { return new Constructor(this, kind); };
    } return function entries() { return new Constructor(this, kind); };
  };
  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype;
  // Fix native
  if ($anyNative) {
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;
    $default = function values() { return $native.call(this); };
  }
  // Define iterator
  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG] = returnThis;
  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) for (key in methods) {
      if (!(key in proto)) redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};

},{"./_export":50,"./_hide":55,"./_iter-create":64,"./_iterators":68,"./_library":69,"./_object-gpo":80,"./_redefine":89,"./_set-to-string-tag":92,"./_wks":108}],66:[function(require,module,exports){
var ITERATOR = require('./_wks')('iterator');
var SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function () { SAFE_CLOSING = true; };
  // eslint-disable-next-line no-throw-literal
  Array.from(riter, function () { throw 2; });
} catch (e) { /* empty */ }

module.exports = function (exec, skipClosing) {
  if (!skipClosing && !SAFE_CLOSING) return false;
  var safe = false;
  try {
    var arr = [7];
    var iter = arr[ITERATOR]();
    iter.next = function () { return { done: safe = true }; };
    arr[ITERATOR] = function () { return iter; };
    exec(arr);
  } catch (e) { /* empty */ }
  return safe;
};

},{"./_wks":108}],67:[function(require,module,exports){
module.exports = function (done, value) {
  return { value: value, done: !!done };
};

},{}],68:[function(require,module,exports){
module.exports = {};

},{}],69:[function(require,module,exports){
module.exports = true;

},{}],70:[function(require,module,exports){
var META = require('./_uid')('meta');
var isObject = require('./_is-object');
var has = require('./_has');
var setDesc = require('./_object-dp').f;
var id = 0;
var isExtensible = Object.isExtensible || function () {
  return true;
};
var FREEZE = !require('./_fails')(function () {
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function (it) {
  setDesc(it, META, { value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  } });
};
var fastKey = function (it, create) {
  // return primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function (it, create) {
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function (it) {
  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY: META,
  NEED: false,
  fastKey: fastKey,
  getWeak: getWeak,
  onFreeze: onFreeze
};

},{"./_fails":51,"./_has":54,"./_is-object":62,"./_object-dp":74,"./_uid":104}],71:[function(require,module,exports){
var global = require('./_global');
var macrotask = require('./_task').set;
var Observer = global.MutationObserver || global.WebKitMutationObserver;
var process = global.process;
var Promise = global.Promise;
var isNode = require('./_cof')(process) == 'process';

module.exports = function () {
  var head, last, notify;

  var flush = function () {
    var parent, fn;
    if (isNode && (parent = process.domain)) parent.exit();
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (e) {
        if (head) notify();
        else last = undefined;
        throw e;
      }
    } last = undefined;
    if (parent) parent.enter();
  };

  // Node.js
  if (isNode) {
    notify = function () {
      process.nextTick(flush);
    };
  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
  } else if (Observer && !(global.navigator && global.navigator.standalone)) {
    var toggle = true;
    var node = document.createTextNode('');
    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
    notify = function () {
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if (Promise && Promise.resolve) {
    // Promise.resolve without an argument throws an error in LG WebOS 2
    var promise = Promise.resolve(undefined);
    notify = function () {
      promise.then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function () {
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function (fn) {
    var task = { fn: fn, next: undefined };
    if (last) last.next = task;
    if (!head) {
      head = task;
      notify();
    } last = task;
  };
};

},{"./_cof":41,"./_global":53,"./_task":97}],72:[function(require,module,exports){
'use strict';
// 25.4.1.5 NewPromiseCapability(C)
var aFunction = require('./_a-function');

function PromiseCapability(C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject = aFunction(reject);
}

module.exports.f = function (C) {
  return new PromiseCapability(C);
};

},{"./_a-function":35}],73:[function(require,module,exports){
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject = require('./_an-object');
var dPs = require('./_object-dps');
var enumBugKeys = require('./_enum-bug-keys');
var IE_PROTO = require('./_shared-key')('IE_PROTO');
var Empty = function () { /* empty */ };
var PROTOTYPE = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = require('./_dom-create')('iframe');
  var i = enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';
  require('./_html').appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};

},{"./_an-object":38,"./_dom-create":47,"./_enum-bug-keys":48,"./_html":56,"./_object-dps":75,"./_shared-key":93}],74:[function(require,module,exports){
var anObject = require('./_an-object');
var IE8_DOM_DEFINE = require('./_ie8-dom-define');
var toPrimitive = require('./_to-primitive');
var dP = Object.defineProperty;

exports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};

},{"./_an-object":38,"./_descriptors":46,"./_ie8-dom-define":57,"./_to-primitive":103}],75:[function(require,module,exports){
var dP = require('./_object-dp');
var anObject = require('./_an-object');
var getKeys = require('./_object-keys');

module.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = getKeys(Properties);
  var length = keys.length;
  var i = 0;
  var P;
  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
  return O;
};

},{"./_an-object":38,"./_descriptors":46,"./_object-dp":74,"./_object-keys":82}],76:[function(require,module,exports){
var pIE = require('./_object-pie');
var createDesc = require('./_property-desc');
var toIObject = require('./_to-iobject');
var toPrimitive = require('./_to-primitive');
var has = require('./_has');
var IE8_DOM_DEFINE = require('./_ie8-dom-define');
var gOPD = Object.getOwnPropertyDescriptor;

exports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P) {
  O = toIObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return gOPD(O, P);
  } catch (e) { /* empty */ }
  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
};

},{"./_descriptors":46,"./_has":54,"./_ie8-dom-define":57,"./_object-pie":83,"./_property-desc":87,"./_to-iobject":100,"./_to-primitive":103}],77:[function(require,module,exports){
// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = require('./_to-iobject');
var gOPN = require('./_object-gopn').f;
var toString = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return gOPN(it);
  } catch (e) {
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};

},{"./_object-gopn":78,"./_to-iobject":100}],78:[function(require,module,exports){
// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys = require('./_object-keys-internal');
var hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return $keys(O, hiddenKeys);
};

},{"./_enum-bug-keys":48,"./_object-keys-internal":81}],79:[function(require,module,exports){
exports.f = Object.getOwnPropertySymbols;

},{}],80:[function(require,module,exports){
// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has = require('./_has');
var toObject = require('./_to-object');
var IE_PROTO = require('./_shared-key')('IE_PROTO');
var ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};

},{"./_has":54,"./_shared-key":93,"./_to-object":102}],81:[function(require,module,exports){
var has = require('./_has');
var toIObject = require('./_to-iobject');
var arrayIndexOf = require('./_array-includes')(false);
var IE_PROTO = require('./_shared-key')('IE_PROTO');

module.exports = function (object, names) {
  var O = toIObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};

},{"./_array-includes":39,"./_has":54,"./_shared-key":93,"./_to-iobject":100}],82:[function(require,module,exports){
// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = require('./_object-keys-internal');
var enumBugKeys = require('./_enum-bug-keys');

module.exports = Object.keys || function keys(O) {
  return $keys(O, enumBugKeys);
};

},{"./_enum-bug-keys":48,"./_object-keys-internal":81}],83:[function(require,module,exports){
exports.f = {}.propertyIsEnumerable;

},{}],84:[function(require,module,exports){
// most Object methods by ES6 should accept primitives
var $export = require('./_export');
var core = require('./_core');
var fails = require('./_fails');
module.exports = function (KEY, exec) {
  var fn = (core.Object || {})[KEY] || Object[KEY];
  var exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);
};

},{"./_core":42,"./_export":50,"./_fails":51}],85:[function(require,module,exports){
module.exports = function (exec) {
  try {
    return { e: false, v: exec() };
  } catch (e) {
    return { e: true, v: e };
  }
};

},{}],86:[function(require,module,exports){
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var newPromiseCapability = require('./_new-promise-capability');

module.exports = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};

},{"./_an-object":38,"./_is-object":62,"./_new-promise-capability":72}],87:[function(require,module,exports){
module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};

},{}],88:[function(require,module,exports){
var hide = require('./_hide');
module.exports = function (target, src, safe) {
  for (var key in src) {
    if (safe && target[key]) target[key] = src[key];
    else hide(target, key, src[key]);
  } return target;
};

},{"./_hide":55}],89:[function(require,module,exports){
module.exports = require('./_hide');

},{"./_hide":55}],90:[function(require,module,exports){
// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var isObject = require('./_is-object');
var anObject = require('./_an-object');
var check = function (O, proto) {
  anObject(O);
  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function (test, buggy, set) {
      try {
        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch (e) { buggy = true; }
      return function setPrototypeOf(O, proto) {
        check(O, proto);
        if (buggy) O.__proto__ = proto;
        else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
  check: check
};

},{"./_an-object":38,"./_ctx":44,"./_is-object":62,"./_object-gopd":76}],91:[function(require,module,exports){
'use strict';
var global = require('./_global');
var core = require('./_core');
var dP = require('./_object-dp');
var DESCRIPTORS = require('./_descriptors');
var SPECIES = require('./_wks')('species');

module.exports = function (KEY) {
  var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];
  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
    configurable: true,
    get: function () { return this; }
  });
};

},{"./_core":42,"./_descriptors":46,"./_global":53,"./_object-dp":74,"./_wks":108}],92:[function(require,module,exports){
var def = require('./_object-dp').f;
var has = require('./_has');
var TAG = require('./_wks')('toStringTag');

module.exports = function (it, tag, stat) {
  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
};

},{"./_has":54,"./_object-dp":74,"./_wks":108}],93:[function(require,module,exports){
var shared = require('./_shared')('keys');
var uid = require('./_uid');
module.exports = function (key) {
  return shared[key] || (shared[key] = uid(key));
};

},{"./_shared":94,"./_uid":104}],94:[function(require,module,exports){
var core = require('./_core');
var global = require('./_global');
var SHARED = '__core-js_shared__';
var store = global[SHARED] || (global[SHARED] = {});

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: core.version,
  mode: require('./_library') ? 'pure' : 'global',
  copyright: '© 2020 Denis Pushkarev (zloirock.ru)'
});

},{"./_core":42,"./_global":53,"./_library":69}],95:[function(require,module,exports){
// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject = require('./_an-object');
var aFunction = require('./_a-function');
var SPECIES = require('./_wks')('species');
module.exports = function (O, D) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};

},{"./_a-function":35,"./_an-object":38,"./_wks":108}],96:[function(require,module,exports){
var toInteger = require('./_to-integer');
var defined = require('./_defined');
// true  -> String#at
// false -> String#codePointAt
module.exports = function (TO_STRING) {
  return function (that, pos) {
    var s = String(defined(that));
    var i = toInteger(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};

},{"./_defined":45,"./_to-integer":99}],97:[function(require,module,exports){
var ctx = require('./_ctx');
var invoke = require('./_invoke');
var html = require('./_html');
var cel = require('./_dom-create');
var global = require('./_global');
var process = global.process;
var setTask = global.setImmediate;
var clearTask = global.clearImmediate;
var MessageChannel = global.MessageChannel;
var Dispatch = global.Dispatch;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer, channel, port;
var run = function () {
  var id = +this;
  // eslint-disable-next-line no-prototype-builtins
  if (queue.hasOwnProperty(id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function (event) {
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!setTask || !clearTask) {
  setTask = function setImmediate(fn) {
    var args = [];
    var i = 1;
    while (arguments.length > i) args.push(arguments[i++]);
    queue[++counter] = function () {
      // eslint-disable-next-line no-new-func
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (require('./_cof')(process) == 'process') {
    defer = function (id) {
      process.nextTick(ctx(run, id, 1));
    };
  // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if (MessageChannel) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
    defer = function (id) {
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listener, false);
  // IE8-
  } else if (ONREADYSTATECHANGE in cel('script')) {
    defer = function (id) {
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set: setTask,
  clear: clearTask
};

},{"./_cof":41,"./_ctx":44,"./_dom-create":47,"./_global":53,"./_html":56,"./_invoke":58}],98:[function(require,module,exports){
var toInteger = require('./_to-integer');
var max = Math.max;
var min = Math.min;
module.exports = function (index, length) {
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};

},{"./_to-integer":99}],99:[function(require,module,exports){
// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;
module.exports = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};

},{}],100:[function(require,module,exports){
// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = require('./_iobject');
var defined = require('./_defined');
module.exports = function (it) {
  return IObject(defined(it));
};

},{"./_defined":45,"./_iobject":59}],101:[function(require,module,exports){
// 7.1.15 ToLength
var toInteger = require('./_to-integer');
var min = Math.min;
module.exports = function (it) {
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};

},{"./_to-integer":99}],102:[function(require,module,exports){
// 7.1.13 ToObject(argument)
var defined = require('./_defined');
module.exports = function (it) {
  return Object(defined(it));
};

},{"./_defined":45}],103:[function(require,module,exports){
// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = require('./_is-object');
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};

},{"./_is-object":62}],104:[function(require,module,exports){
var id = 0;
var px = Math.random();
module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};

},{}],105:[function(require,module,exports){
var global = require('./_global');
var navigator = global.navigator;

module.exports = navigator && navigator.userAgent || '';

},{"./_global":53}],106:[function(require,module,exports){
var global = require('./_global');
var core = require('./_core');
var LIBRARY = require('./_library');
var wksExt = require('./_wks-ext');
var defineProperty = require('./_object-dp').f;
module.exports = function (name) {
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
};

},{"./_core":42,"./_global":53,"./_library":69,"./_object-dp":74,"./_wks-ext":107}],107:[function(require,module,exports){
exports.f = require('./_wks');

},{"./_wks":108}],108:[function(require,module,exports){
var store = require('./_shared')('wks');
var uid = require('./_uid');
var Symbol = require('./_global').Symbol;
var USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function (name) {
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;

},{"./_global":53,"./_shared":94,"./_uid":104}],109:[function(require,module,exports){
var classof = require('./_classof');
var ITERATOR = require('./_wks')('iterator');
var Iterators = require('./_iterators');
module.exports = require('./_core').getIteratorMethod = function (it) {
  if (it != undefined) return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};

},{"./_classof":40,"./_core":42,"./_iterators":68,"./_wks":108}],110:[function(require,module,exports){
var anObject = require('./_an-object');
var get = require('./core.get-iterator-method');
module.exports = require('./_core').getIterator = function (it) {
  var iterFn = get(it);
  if (typeof iterFn != 'function') throw TypeError(it + ' is not iterable!');
  return anObject(iterFn.call(it));
};

},{"./_an-object":38,"./_core":42,"./core.get-iterator-method":109}],111:[function(require,module,exports){
var classof = require('./_classof');
var ITERATOR = require('./_wks')('iterator');
var Iterators = require('./_iterators');
module.exports = require('./_core').isIterable = function (it) {
  var O = Object(it);
  return O[ITERATOR] !== undefined
    || '@@iterator' in O
    // eslint-disable-next-line no-prototype-builtins
    || Iterators.hasOwnProperty(classof(O));
};

},{"./_classof":40,"./_core":42,"./_iterators":68,"./_wks":108}],112:[function(require,module,exports){
'use strict';
var ctx = require('./_ctx');
var $export = require('./_export');
var toObject = require('./_to-object');
var call = require('./_iter-call');
var isArrayIter = require('./_is-array-iter');
var toLength = require('./_to-length');
var createProperty = require('./_create-property');
var getIterFn = require('./core.get-iterator-method');

$export($export.S + $export.F * !require('./_iter-detect')(function (iter) { Array.from(iter); }), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
    var O = toObject(arrayLike);
    var C = typeof this == 'function' ? this : Array;
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var index = 0;
    var iterFn = getIterFn(O);
    var length, result, step, iterator;
    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
    // if object isn't iterable or it's array with default iterator - use simple case
    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
      }
    } else {
      length = toLength(O.length);
      for (result = new C(length); length > index; index++) {
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }
    result.length = index;
    return result;
  }
});

},{"./_create-property":43,"./_ctx":44,"./_export":50,"./_is-array-iter":60,"./_iter-call":63,"./_iter-detect":66,"./_to-length":101,"./_to-object":102,"./core.get-iterator-method":109}],113:[function(require,module,exports){
'use strict';
var addToUnscopables = require('./_add-to-unscopables');
var step = require('./_iter-step');
var Iterators = require('./_iterators');
var toIObject = require('./_to-iobject');

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = require('./_iter-define')(Array, 'Array', function (iterated, kind) {
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var kind = this._k;
  var index = this._i++;
  if (!O || index >= O.length) {
    this._t = undefined;
    return step(1);
  }
  if (kind == 'keys') return step(0, index);
  if (kind == 'values') return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');

},{"./_add-to-unscopables":36,"./_iter-define":65,"./_iter-step":67,"./_iterators":68,"./_to-iobject":100}],114:[function(require,module,exports){
var $export = require('./_export');
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
$export($export.S, 'Object', { create: require('./_object-create') });

},{"./_export":50,"./_object-create":73}],115:[function(require,module,exports){
var $export = require('./_export');
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperty: require('./_object-dp').f });

},{"./_descriptors":46,"./_export":50,"./_object-dp":74}],116:[function(require,module,exports){
// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
var toIObject = require('./_to-iobject');
var $getOwnPropertyDescriptor = require('./_object-gopd').f;

require('./_object-sap')('getOwnPropertyDescriptor', function () {
  return function getOwnPropertyDescriptor(it, key) {
    return $getOwnPropertyDescriptor(toIObject(it), key);
  };
});

},{"./_object-gopd":76,"./_object-sap":84,"./_to-iobject":100}],117:[function(require,module,exports){
// 19.1.2.9 Object.getPrototypeOf(O)
var toObject = require('./_to-object');
var $getPrototypeOf = require('./_object-gpo');

require('./_object-sap')('getPrototypeOf', function () {
  return function getPrototypeOf(it) {
    return $getPrototypeOf(toObject(it));
  };
});

},{"./_object-gpo":80,"./_object-sap":84,"./_to-object":102}],118:[function(require,module,exports){
// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export = require('./_export');
$export($export.S, 'Object', { setPrototypeOf: require('./_set-proto').set });

},{"./_export":50,"./_set-proto":90}],119:[function(require,module,exports){

},{}],120:[function(require,module,exports){
'use strict';
var LIBRARY = require('./_library');
var global = require('./_global');
var ctx = require('./_ctx');
var classof = require('./_classof');
var $export = require('./_export');
var isObject = require('./_is-object');
var aFunction = require('./_a-function');
var anInstance = require('./_an-instance');
var forOf = require('./_for-of');
var speciesConstructor = require('./_species-constructor');
var task = require('./_task').set;
var microtask = require('./_microtask')();
var newPromiseCapabilityModule = require('./_new-promise-capability');
var perform = require('./_perform');
var userAgent = require('./_user-agent');
var promiseResolve = require('./_promise-resolve');
var PROMISE = 'Promise';
var TypeError = global.TypeError;
var process = global.process;
var versions = process && process.versions;
var v8 = versions && versions.v8 || '';
var $Promise = global[PROMISE];
var isNode = classof(process) == 'process';
var empty = function () { /* empty */ };
var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;

var USE_NATIVE = !!function () {
  try {
    // correct subclassing with @@species support
    var promise = $Promise.resolve(1);
    var FakePromise = (promise.constructor = {})[require('./_wks')('species')] = function (exec) {
      exec(empty, empty);
    };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function')
      && promise.then(empty) instanceof FakePromise
      // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
      // we can't detect it synchronously, so just check versions
      && v8.indexOf('6.6') !== 0
      && userAgent.indexOf('Chrome/66') === -1;
  } catch (e) { /* empty */ }
}();

// helpers
var isThenable = function (it) {
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var notify = function (promise, isReject) {
  if (promise._n) return;
  promise._n = true;
  var chain = promise._c;
  microtask(function () {
    var value = promise._v;
    var ok = promise._s == 1;
    var i = 0;
    var run = function (reaction) {
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then, exited;
      try {
        if (handler) {
          if (!ok) {
            if (promise._h == 2) onHandleUnhandled(promise);
            promise._h = 1;
          }
          if (handler === true) result = value;
          else {
            if (domain) domain.enter();
            result = handler(value); // may throw
            if (domain) {
              domain.exit();
              exited = true;
            }
          }
          if (result === reaction.promise) {
            reject(TypeError('Promise-chain cycle'));
          } else if (then = isThenable(result)) {
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch (e) {
        if (domain && !exited) domain.exit();
        reject(e);
      }
    };
    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if (isReject && !promise._h) onUnhandled(promise);
  });
};
var onUnhandled = function (promise) {
  task.call(global, function () {
    var value = promise._v;
    var unhandled = isUnhandled(promise);
    var result, handler, console;
    if (unhandled) {
      result = perform(function () {
        if (isNode) {
          process.emit('unhandledRejection', value, promise);
        } else if (handler = global.onunhandledrejection) {
          handler({ promise: promise, reason: value });
        } else if ((console = global.console) && console.error) {
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    } promise._a = undefined;
    if (unhandled && result.e) throw result.v;
  });
};
var isUnhandled = function (promise) {
  return promise._h !== 1 && (promise._a || promise._c).length === 0;
};
var onHandleUnhandled = function (promise) {
  task.call(global, function () {
    var handler;
    if (isNode) {
      process.emit('rejectionHandled', promise);
    } else if (handler = global.onrejectionhandled) {
      handler({ promise: promise, reason: promise._v });
    }
  });
};
var $reject = function (value) {
  var promise = this;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if (!promise._a) promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function (value) {
  var promise = this;
  var then;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if (promise === value) throw TypeError("Promise can't be resolved itself");
    if (then = isThenable(value)) {
      microtask(function () {
        var wrapper = { _w: promise, _d: false }; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch (e) {
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch (e) {
    $reject.call({ _w: promise, _d: false }, e); // wrap
  }
};

// constructor polyfill
if (!USE_NATIVE) {
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor) {
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);
    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch (err) {
      $reject.call(this, err);
    }
  };
  // eslint-disable-next-line no-unused-vars
  Internal = function Promise(executor) {
    this._c = [];             // <- awaiting reactions
    this._a = undefined;      // <- checked in isUnhandled reactions
    this._s = 0;              // <- state
    this._d = false;          // <- done
    this._v = undefined;      // <- value
    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false;          // <- notify
  };
  Internal.prototype = require('./_redefine-all')($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected) {
      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if (this._a) this._a.push(reaction);
      if (this._s) notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function (onRejected) {
      return this.then(undefined, onRejected);
    }
  });
  OwnPromiseCapability = function () {
    var promise = new Internal();
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject = ctx($reject, promise, 1);
  };
  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
    return C === $Promise || C === Wrapper
      ? new OwnPromiseCapability(C)
      : newGenericPromiseCapability(C);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });
require('./_set-to-string-tag')($Promise, PROMISE);
require('./_set-species')(PROMISE);
Wrapper = require('./_core')[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r) {
    var capability = newPromiseCapability(this);
    var $$reject = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x) {
    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
  }
});
$export($export.S + $export.F * !(USE_NATIVE && require('./_iter-detect')(function (iter) {
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var values = [];
      var index = 0;
      var remaining = 1;
      forOf(iterable, false, function (promise) {
        var $index = index++;
        var alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.e) reject(result.v);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var reject = capability.reject;
    var result = perform(function () {
      forOf(iterable, false, function (promise) {
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if (result.e) reject(result.v);
    return capability.promise;
  }
});

},{"./_a-function":35,"./_an-instance":37,"./_classof":40,"./_core":42,"./_ctx":44,"./_export":50,"./_for-of":52,"./_global":53,"./_is-object":62,"./_iter-detect":66,"./_library":69,"./_microtask":71,"./_new-promise-capability":72,"./_perform":85,"./_promise-resolve":86,"./_redefine-all":88,"./_set-species":91,"./_set-to-string-tag":92,"./_species-constructor":95,"./_task":97,"./_user-agent":105,"./_wks":108}],121:[function(require,module,exports){
'use strict';
var $at = require('./_string-at')(true);

// 21.1.3.27 String.prototype[@@iterator]()
require('./_iter-define')(String, 'String', function (iterated) {
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var index = this._i;
  var point;
  if (index >= O.length) return { value: undefined, done: true };
  point = $at(O, index);
  this._i += point.length;
  return { value: point, done: false };
});

},{"./_iter-define":65,"./_string-at":96}],122:[function(require,module,exports){
'use strict';
// ECMAScript 6 symbols shim
var global = require('./_global');
var has = require('./_has');
var DESCRIPTORS = require('./_descriptors');
var $export = require('./_export');
var redefine = require('./_redefine');
var META = require('./_meta').KEY;
var $fails = require('./_fails');
var shared = require('./_shared');
var setToStringTag = require('./_set-to-string-tag');
var uid = require('./_uid');
var wks = require('./_wks');
var wksExt = require('./_wks-ext');
var wksDefine = require('./_wks-define');
var enumKeys = require('./_enum-keys');
var isArray = require('./_is-array');
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var toObject = require('./_to-object');
var toIObject = require('./_to-iobject');
var toPrimitive = require('./_to-primitive');
var createDesc = require('./_property-desc');
var _create = require('./_object-create');
var gOPNExt = require('./_object-gopn-ext');
var $GOPD = require('./_object-gopd');
var $GOPS = require('./_object-gops');
var $DP = require('./_object-dp');
var $keys = require('./_object-keys');
var gOPD = $GOPD.f;
var dP = $DP.f;
var gOPN = gOPNExt.f;
var $Symbol = global.Symbol;
var $JSON = global.JSON;
var _stringify = $JSON && $JSON.stringify;
var PROTOTYPE = 'prototype';
var HIDDEN = wks('_hidden');
var TO_PRIMITIVE = wks('toPrimitive');
var isEnum = {}.propertyIsEnumerable;
var SymbolRegistry = shared('symbol-registry');
var AllSymbols = shared('symbols');
var OPSymbols = shared('op-symbols');
var ObjectProto = Object[PROTOTYPE];
var USE_NATIVE = typeof $Symbol == 'function' && !!$GOPS.f;
var QObject = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function () {
  return _create(dP({}, 'a', {
    get: function () { return dP(this, 'a', { value: 7 }).a; }
  })).a != 7;
}) ? function (it, key, D) {
  var protoDesc = gOPD(ObjectProto, key);
  if (protoDesc) delete ObjectProto[key];
  dP(it, key, D);
  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function (tag) {
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D) {
  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if (has(AllSymbols, key)) {
    if (!D.enumerable) {
      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
      D = _create(D, { enumerable: createDesc(0, false) });
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P) {
  anObject(it);
  var keys = enumKeys(P = toIObject(P));
  var i = 0;
  var l = keys.length;
  var key;
  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P) {
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key) {
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
  it = toIObject(it);
  key = toPrimitive(key, true);
  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
  var D = gOPD(it, key);
  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it) {
  var names = gOPN(toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
  var IS_OP = it === ObjectProto;
  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if (!USE_NATIVE) {
  $Symbol = function Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function (value) {
      if (this === ObjectProto) $set.call(OPSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f = $defineProperty;
  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;
  require('./_object-pie').f = $propertyIsEnumerable;
  $GOPS.f = $getOwnPropertySymbols;

  if (DESCRIPTORS && !require('./_library')) {
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function (name) {
    return wrap(wks(name));
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

for (var es6Symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);

for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function (key) {
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
  },
  useSetter: function () { setter = true; },
  useSimple: function () { setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
// https://bugs.chromium.org/p/v8/issues/detail?id=3443
var FAILS_ON_PRIMITIVES = $fails(function () { $GOPS.f(1); });

$export($export.S + $export.F * FAILS_ON_PRIMITIVES, 'Object', {
  getOwnPropertySymbols: function getOwnPropertySymbols(it) {
    return $GOPS.f(toObject(it));
  }
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it) {
    var args = [it];
    var i = 1;
    var replacer, $replacer;
    while (arguments.length > i) args.push(arguments[i++]);
    $replacer = replacer = args[1];
    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
    if (!isArray(replacer)) replacer = function (key, value) {
      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
      if (!isSymbol(value)) return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);

},{"./_an-object":38,"./_descriptors":46,"./_enum-keys":49,"./_export":50,"./_fails":51,"./_global":53,"./_has":54,"./_hide":55,"./_is-array":61,"./_is-object":62,"./_library":69,"./_meta":70,"./_object-create":73,"./_object-dp":74,"./_object-gopd":76,"./_object-gopn":78,"./_object-gopn-ext":77,"./_object-gops":79,"./_object-keys":82,"./_object-pie":83,"./_property-desc":87,"./_redefine":89,"./_set-to-string-tag":92,"./_shared":94,"./_to-iobject":100,"./_to-object":102,"./_to-primitive":103,"./_uid":104,"./_wks":108,"./_wks-define":106,"./_wks-ext":107}],123:[function(require,module,exports){
// https://github.com/tc39/proposal-promise-finally
'use strict';
var $export = require('./_export');
var core = require('./_core');
var global = require('./_global');
var speciesConstructor = require('./_species-constructor');
var promiseResolve = require('./_promise-resolve');

$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {
  var C = speciesConstructor(this, core.Promise || global.Promise);
  var isFunction = typeof onFinally == 'function';
  return this.then(
    isFunction ? function (x) {
      return promiseResolve(C, onFinally()).then(function () { return x; });
    } : onFinally,
    isFunction ? function (e) {
      return promiseResolve(C, onFinally()).then(function () { throw e; });
    } : onFinally
  );
} });

},{"./_core":42,"./_export":50,"./_global":53,"./_promise-resolve":86,"./_species-constructor":95}],124:[function(require,module,exports){
'use strict';
// https://github.com/tc39/proposal-promise-try
var $export = require('./_export');
var newPromiseCapability = require('./_new-promise-capability');
var perform = require('./_perform');

$export($export.S, 'Promise', { 'try': function (callbackfn) {
  var promiseCapability = newPromiseCapability.f(this);
  var result = perform(callbackfn);
  (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);
  return promiseCapability.promise;
} });

},{"./_export":50,"./_new-promise-capability":72,"./_perform":85}],125:[function(require,module,exports){
require('./_wks-define')('asyncIterator');

},{"./_wks-define":106}],126:[function(require,module,exports){
require('./_wks-define')('observable');

},{"./_wks-define":106}],127:[function(require,module,exports){
require('./es6.array.iterator');
var global = require('./_global');
var hide = require('./_hide');
var Iterators = require('./_iterators');
var TO_STRING_TAG = require('./_wks')('toStringTag');

var DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' +
  'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' +
  'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' +
  'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' +
  'TextTrackList,TouchList').split(',');

for (var i = 0; i < DOMIterables.length; i++) {
  var NAME = DOMIterables[i];
  var Collection = global[NAME];
  var proto = Collection && Collection.prototype;
  if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
  Iterators[NAME] = Iterators.Array;
}

},{"./_global":53,"./_hide":55,"./_iterators":68,"./_wks":108,"./es6.array.iterator":113}],128:[function(require,module,exports){
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// This method of obtaining a reference to the global object needs to be
// kept identical to the way it is obtained in runtime.js
var g = (function() { return this })() || Function("return this")();

// Use `getOwnPropertyNames` because not all browsers support calling
// `hasOwnProperty` on the global `self` object in a worker. See #183.
var hadRuntime = g.regeneratorRuntime &&
  Object.getOwnPropertyNames(g).indexOf("regeneratorRuntime") >= 0;

// Save the old regeneratorRuntime in case it needs to be restored later.
var oldRuntime = hadRuntime && g.regeneratorRuntime;

// Force reevalutation of runtime.js.
g.regeneratorRuntime = undefined;

module.exports = require("./runtime");

if (hadRuntime) {
  // Restore the original runtime.
  g.regeneratorRuntime = oldRuntime;
} else {
  // Remove the global property added by runtime.js.
  try {
    delete g.regeneratorRuntime;
  } catch(e) {
    g.regeneratorRuntime = undefined;
  }
}

},{"./runtime":129}],129:[function(require,module,exports){
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

!(function(global) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    }
    // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.
    return;
  }

  // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  runtime.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  runtime.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration. If the Promise is rejected, however, the
          // result for this iteration will be rejected with the same
          // reason. Note that rejections of yielded Promises are not
          // thrown back into the generator function, as is the case
          // when an awaited Promise is rejected. This difference in
          // behavior between yield and await is important, because it
          // allows the consumer to decide what to do with the yielded
          // rejection (swallow it and continue, manually .throw it back
          // into the generator, abandon iteration, whatever). With
          // await, by contrast, there is no opportunity to examine the
          // rejection reason outside the generator function, so the
          // only option is to throw it from the await expression, and
          // let the generator function handle the exception.
          result.value = unwrapped;
          resolve(result);
        }, reject);
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  runtime.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return runtime.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        if (delegate.iterator.return) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };
})(
  // In sloppy mode, unbound `this` refers to the global object, fallback to
  // Function constructor if we're in global strict mode. That is sadly a form
  // of indirect eval which violates Content Security Policy.
  (function() { return this })() || Function("return this")()
);

},{}],130:[function(require,module,exports){
/*
 *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */
'use strict';

var SDPUtils = require('sdp');

function fixStatsType(stat) {
  return {
    inboundrtp: 'inbound-rtp',
    outboundrtp: 'outbound-rtp',
    candidatepair: 'candidate-pair',
    localcandidate: 'local-candidate',
    remotecandidate: 'remote-candidate'
  }[stat.type] || stat.type;
}

function writeMediaSection(transceiver, caps, type, stream, dtlsRole) {
  var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps);

  // Map ICE parameters (ufrag, pwd) to SDP.
  sdp += SDPUtils.writeIceParameters(
      transceiver.iceGatherer.getLocalParameters());

  // Map DTLS parameters to SDP.
  sdp += SDPUtils.writeDtlsParameters(
      transceiver.dtlsTransport.getLocalParameters(),
      type === 'offer' ? 'actpass' : dtlsRole || 'active');

  sdp += 'a=mid:' + transceiver.mid + '\r\n';

  if (transceiver.rtpSender && transceiver.rtpReceiver) {
    sdp += 'a=sendrecv\r\n';
  } else if (transceiver.rtpSender) {
    sdp += 'a=sendonly\r\n';
  } else if (transceiver.rtpReceiver) {
    sdp += 'a=recvonly\r\n';
  } else {
    sdp += 'a=inactive\r\n';
  }

  if (transceiver.rtpSender) {
    var trackId = transceiver.rtpSender._initialTrackId ||
        transceiver.rtpSender.track.id;
    transceiver.rtpSender._initialTrackId = trackId;
    // spec.
    var msid = 'msid:' + (stream ? stream.id : '-') + ' ' +
        trackId + '\r\n';
    sdp += 'a=' + msid;
    // for Chrome. Legacy should no longer be required.
    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +
        ' ' + msid;

    // RTX
    if (transceiver.sendEncodingParameters[0].rtx) {
      sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +
          ' ' + msid;
      sdp += 'a=ssrc-group:FID ' +
          transceiver.sendEncodingParameters[0].ssrc + ' ' +
          transceiver.sendEncodingParameters[0].rtx.ssrc +
          '\r\n';
    }
  }
  // FIXME: this should be written by writeRtpDescription.
  sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +
      ' cname:' + SDPUtils.localCName + '\r\n';
  if (transceiver.rtpSender && transceiver.sendEncodingParameters[0].rtx) {
    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +
        ' cname:' + SDPUtils.localCName + '\r\n';
  }
  return sdp;
}

// Edge does not like
// 1) stun: filtered after 14393 unless ?transport=udp is present
// 2) turn: that does not have all of turn:host:port?transport=udp
// 3) turn: with ipv6 addresses
// 4) turn: occurring muliple times
function filterIceServers(iceServers, edgeVersion) {
  var hasTurn = false;
  iceServers = JSON.parse(JSON.stringify(iceServers));
  return iceServers.filter(function(server) {
    if (server && (server.urls || server.url)) {
      var urls = server.urls || server.url;
      if (server.url && !server.urls) {
        console.warn('RTCIceServer.url is deprecated! Use urls instead.');
      }
      var isString = typeof urls === 'string';
      if (isString) {
        urls = [urls];
      }
      urls = urls.filter(function(url) {
        var validTurn = url.indexOf('turn:') === 0 &&
            url.indexOf('transport=udp') !== -1 &&
            url.indexOf('turn:[') === -1 &&
            !hasTurn;

        if (validTurn) {
          hasTurn = true;
          return true;
        }
        return url.indexOf('stun:') === 0 && edgeVersion >= 14393 &&
            url.indexOf('?transport=udp') === -1;
      });

      delete server.url;
      server.urls = isString ? urls[0] : urls;
      return !!urls.length;
    }
  });
}

// Determines the intersection of local and remote capabilities.
function getCommonCapabilities(localCapabilities, remoteCapabilities) {
  var commonCapabilities = {
    codecs: [],
    headerExtensions: [],
    fecMechanisms: []
  };

  var findCodecByPayloadType = function(pt, codecs) {
    pt = parseInt(pt, 10);
    for (var i = 0; i < codecs.length; i++) {
      if (codecs[i].payloadType === pt ||
          codecs[i].preferredPayloadType === pt) {
        return codecs[i];
      }
    }
  };

  var rtxCapabilityMatches = function(lRtx, rRtx, lCodecs, rCodecs) {
    var lCodec = findCodecByPayloadType(lRtx.parameters.apt, lCodecs);
    var rCodec = findCodecByPayloadType(rRtx.parameters.apt, rCodecs);
    return lCodec && rCodec &&
        lCodec.name.toLowerCase() === rCodec.name.toLowerCase();
  };

  localCapabilities.codecs.forEach(function(lCodec) {
    for (var i = 0; i < remoteCapabilities.codecs.length; i++) {
      var rCodec = remoteCapabilities.codecs[i];
      if (lCodec.name.toLowerCase() === rCodec.name.toLowerCase() &&
          lCodec.clockRate === rCodec.clockRate) {
        if (lCodec.name.toLowerCase() === 'rtx' &&
            lCodec.parameters && rCodec.parameters.apt) {
          // for RTX we need to find the local rtx that has a apt
          // which points to the same local codec as the remote one.
          if (!rtxCapabilityMatches(lCodec, rCodec,
              localCapabilities.codecs, remoteCapabilities.codecs)) {
            continue;
          }
        }
        rCodec = JSON.parse(JSON.stringify(rCodec)); // deepcopy
        // number of channels is the highest common number of channels
        rCodec.numChannels = Math.min(lCodec.numChannels,
            rCodec.numChannels);
        // push rCodec so we reply with offerer payload type
        commonCapabilities.codecs.push(rCodec);

        // determine common feedback mechanisms
        rCodec.rtcpFeedback = rCodec.rtcpFeedback.filter(function(fb) {
          for (var j = 0; j < lCodec.rtcpFeedback.length; j++) {
            if (lCodec.rtcpFeedback[j].type === fb.type &&
                lCodec.rtcpFeedback[j].parameter === fb.parameter) {
              return true;
            }
          }
          return false;
        });
        // FIXME: also need to determine .parameters
        //  see https://github.com/openpeer/ortc/issues/569
        break;
      }
    }
  });

  localCapabilities.headerExtensions.forEach(function(lHeaderExtension) {
    for (var i = 0; i < remoteCapabilities.headerExtensions.length;
         i++) {
      var rHeaderExtension = remoteCapabilities.headerExtensions[i];
      if (lHeaderExtension.uri === rHeaderExtension.uri) {
        commonCapabilities.headerExtensions.push(rHeaderExtension);
        break;
      }
    }
  });

  // FIXME: fecMechanisms
  return commonCapabilities;
}

// is action=setLocalDescription with type allowed in signalingState
function isActionAllowedInSignalingState(action, type, signalingState) {
  return {
    offer: {
      setLocalDescription: ['stable', 'have-local-offer'],
      setRemoteDescription: ['stable', 'have-remote-offer']
    },
    answer: {
      setLocalDescription: ['have-remote-offer', 'have-local-pranswer'],
      setRemoteDescription: ['have-local-offer', 'have-remote-pranswer']
    }
  }[type][action].indexOf(signalingState) !== -1;
}

function maybeAddCandidate(iceTransport, candidate) {
  // Edge's internal representation adds some fields therefore
  // not all fieldѕ are taken into account.
  var alreadyAdded = iceTransport.getRemoteCandidates()
      .find(function(remoteCandidate) {
        return candidate.foundation === remoteCandidate.foundation &&
            candidate.ip === remoteCandidate.ip &&
            candidate.port === remoteCandidate.port &&
            candidate.priority === remoteCandidate.priority &&
            candidate.protocol === remoteCandidate.protocol &&
            candidate.type === remoteCandidate.type;
      });
  if (!alreadyAdded) {
    iceTransport.addRemoteCandidate(candidate);
  }
  return !alreadyAdded;
}


function makeError(name, description) {
  var e = new Error(description);
  e.name = name;
  // legacy error codes from https://heycam.github.io/webidl/#idl-DOMException-error-names
  e.code = {
    NotSupportedError: 9,
    InvalidStateError: 11,
    InvalidAccessError: 15,
    TypeError: undefined,
    OperationError: undefined
  }[name];
  return e;
}

module.exports = function(window, edgeVersion) {
  // https://w3c.github.io/mediacapture-main/#mediastream
  // Helper function to add the track to the stream and
  // dispatch the event ourselves.
  function addTrackToStreamAndFireEvent(track, stream) {
    stream.addTrack(track);
    stream.dispatchEvent(new window.MediaStreamTrackEvent('addtrack',
        {track: track}));
  }

  function removeTrackFromStreamAndFireEvent(track, stream) {
    stream.removeTrack(track);
    stream.dispatchEvent(new window.MediaStreamTrackEvent('removetrack',
        {track: track}));
  }

  function fireAddTrack(pc, track, receiver, streams) {
    var trackEvent = new Event('track');
    trackEvent.track = track;
    trackEvent.receiver = receiver;
    trackEvent.transceiver = {receiver: receiver};
    trackEvent.streams = streams;
    window.setTimeout(function() {
      pc._dispatchEvent('track', trackEvent);
    });
  }

  var RTCPeerConnection = function(config) {
    var pc = this;

    var _eventTarget = document.createDocumentFragment();
    ['addEventListener', 'removeEventListener', 'dispatchEvent']
        .forEach(function(method) {
          pc[method] = _eventTarget[method].bind(_eventTarget);
        });

    this.canTrickleIceCandidates = null;

    this.needNegotiation = false;

    this.localStreams = [];
    this.remoteStreams = [];

    this._localDescription = null;
    this._remoteDescription = null;

    this.signalingState = 'stable';
    this.iceConnectionState = 'new';
    this.connectionState = 'new';
    this.iceGatheringState = 'new';

    config = JSON.parse(JSON.stringify(config || {}));

    this.usingBundle = config.bundlePolicy === 'max-bundle';
    if (config.rtcpMuxPolicy === 'negotiate') {
      throw(makeError('NotSupportedError',
          'rtcpMuxPolicy \'negotiate\' is not supported'));
    } else if (!config.rtcpMuxPolicy) {
      config.rtcpMuxPolicy = 'require';
    }

    switch (config.iceTransportPolicy) {
      case 'all':
      case 'relay':
        break;
      default:
        config.iceTransportPolicy = 'all';
        break;
    }

    switch (config.bundlePolicy) {
      case 'balanced':
      case 'max-compat':
      case 'max-bundle':
        break;
      default:
        config.bundlePolicy = 'balanced';
        break;
    }

    config.iceServers = filterIceServers(config.iceServers || [], edgeVersion);

    this._iceGatherers = [];
    if (config.iceCandidatePoolSize) {
      for (var i = config.iceCandidatePoolSize; i > 0; i--) {
        this._iceGatherers.push(new window.RTCIceGatherer({
          iceServers: config.iceServers,
          gatherPolicy: config.iceTransportPolicy
        }));
      }
    } else {
      config.iceCandidatePoolSize = 0;
    }

    this._config = config;

    // per-track iceGathers, iceTransports, dtlsTransports, rtpSenders, ...
    // everything that is needed to describe a SDP m-line.
    this.transceivers = [];

    this._sdpSessionId = SDPUtils.generateSessionId();
    this._sdpSessionVersion = 0;

    this._dtlsRole = undefined; // role for a=setup to use in answers.

    this._isClosed = false;
  };

  Object.defineProperty(RTCPeerConnection.prototype, 'localDescription', {
    configurable: true,
    get: function() {
      return this._localDescription;
    }
  });
  Object.defineProperty(RTCPeerConnection.prototype, 'remoteDescription', {
    configurable: true,
    get: function() {
      return this._remoteDescription;
    }
  });

  // set up event handlers on prototype
  RTCPeerConnection.prototype.onicecandidate = null;
  RTCPeerConnection.prototype.onaddstream = null;
  RTCPeerConnection.prototype.ontrack = null;
  RTCPeerConnection.prototype.onremovestream = null;
  RTCPeerConnection.prototype.onsignalingstatechange = null;
  RTCPeerConnection.prototype.oniceconnectionstatechange = null;
  RTCPeerConnection.prototype.onconnectionstatechange = null;
  RTCPeerConnection.prototype.onicegatheringstatechange = null;
  RTCPeerConnection.prototype.onnegotiationneeded = null;
  RTCPeerConnection.prototype.ondatachannel = null;

  RTCPeerConnection.prototype._dispatchEvent = function(name, event) {
    if (this._isClosed) {
      return;
    }
    this.dispatchEvent(event);
    if (typeof this['on' + name] === 'function') {
      this['on' + name](event);
    }
  };

  RTCPeerConnection.prototype._emitGatheringStateChange = function() {
    var event = new Event('icegatheringstatechange');
    this._dispatchEvent('icegatheringstatechange', event);
  };

  RTCPeerConnection.prototype.getConfiguration = function() {
    return this._config;
  };

  RTCPeerConnection.prototype.getLocalStreams = function() {
    return this.localStreams;
  };

  RTCPeerConnection.prototype.getRemoteStreams = function() {
    return this.remoteStreams;
  };

  // internal helper to create a transceiver object.
  // (which is not yet the same as the WebRTC 1.0 transceiver)
  RTCPeerConnection.prototype._createTransceiver = function(kind, doNotAdd) {
    var hasBundleTransport = this.transceivers.length > 0;
    var transceiver = {
      track: null,
      iceGatherer: null,
      iceTransport: null,
      dtlsTransport: null,
      localCapabilities: null,
      remoteCapabilities: null,
      rtpSender: null,
      rtpReceiver: null,
      kind: kind,
      mid: null,
      sendEncodingParameters: null,
      recvEncodingParameters: null,
      stream: null,
      associatedRemoteMediaStreams: [],
      wantReceive: true
    };
    if (this.usingBundle && hasBundleTransport) {
      transceiver.iceTransport = this.transceivers[0].iceTransport;
      transceiver.dtlsTransport = this.transceivers[0].dtlsTransport;
    } else {
      var transports = this._createIceAndDtlsTransports();
      transceiver.iceTransport = transports.iceTransport;
      transceiver.dtlsTransport = transports.dtlsTransport;
    }
    if (!doNotAdd) {
      this.transceivers.push(transceiver);
    }
    return transceiver;
  };

  RTCPeerConnection.prototype.addTrack = function(track, stream) {
    if (this._isClosed) {
      throw makeError('InvalidStateError',
          'Attempted to call addTrack on a closed peerconnection.');
    }

    var alreadyExists = this.transceivers.find(function(s) {
      return s.track === track;
    });

    if (alreadyExists) {
      throw makeError('InvalidAccessError', 'Track already exists.');
    }

    var transceiver;
    for (var i = 0; i < this.transceivers.length; i++) {
      if (!this.transceivers[i].track &&
          this.transceivers[i].kind === track.kind) {
        transceiver = this.transceivers[i];
      }
    }
    if (!transceiver) {
      transceiver = this._createTransceiver(track.kind);
    }

    this._maybeFireNegotiationNeeded();

    if (this.localStreams.indexOf(stream) === -1) {
      this.localStreams.push(stream);
    }

    transceiver.track = track;
    transceiver.stream = stream;
    transceiver.rtpSender = new window.RTCRtpSender(track,
        transceiver.dtlsTransport);
    return transceiver.rtpSender;
  };

  RTCPeerConnection.prototype.addStream = function(stream) {
    var pc = this;
    if (edgeVersion >= 15025) {
      stream.getTracks().forEach(function(track) {
        pc.addTrack(track, stream);
      });
    } else {
      // Clone is necessary for local demos mostly, attaching directly
      // to two different senders does not work (build 10547).
      // Fixed in 15025 (or earlier)
      var clonedStream = stream.clone();
      stream.getTracks().forEach(function(track, idx) {
        var clonedTrack = clonedStream.getTracks()[idx];
        track.addEventListener('enabled', function(event) {
          clonedTrack.enabled = event.enabled;
        });
      });
      clonedStream.getTracks().forEach(function(track) {
        pc.addTrack(track, clonedStream);
      });
    }
  };

  RTCPeerConnection.prototype.removeTrack = function(sender) {
    if (this._isClosed) {
      throw makeError('InvalidStateError',
          'Attempted to call removeTrack on a closed peerconnection.');
    }

    if (!(sender instanceof window.RTCRtpSender)) {
      throw new TypeError('Argument 1 of RTCPeerConnection.removeTrack ' +
          'does not implement interface RTCRtpSender.');
    }

    var transceiver = this.transceivers.find(function(t) {
      return t.rtpSender === sender;
    });

    if (!transceiver) {
      throw makeError('InvalidAccessError',
          'Sender was not created by this connection.');
    }
    var stream = transceiver.stream;

    transceiver.rtpSender.stop();
    transceiver.rtpSender = null;
    transceiver.track = null;
    transceiver.stream = null;

    // remove the stream from the set of local streams
    var localStreams = this.transceivers.map(function(t) {
      return t.stream;
    });
    if (localStreams.indexOf(stream) === -1 &&
        this.localStreams.indexOf(stream) > -1) {
      this.localStreams.splice(this.localStreams.indexOf(stream), 1);
    }

    this._maybeFireNegotiationNeeded();
  };

  RTCPeerConnection.prototype.removeStream = function(stream) {
    var pc = this;
    stream.getTracks().forEach(function(track) {
      var sender = pc.getSenders().find(function(s) {
        return s.track === track;
      });
      if (sender) {
        pc.removeTrack(sender);
      }
    });
  };

  RTCPeerConnection.prototype.getSenders = function() {
    return this.transceivers.filter(function(transceiver) {
      return !!transceiver.rtpSender;
    })
    .map(function(transceiver) {
      return transceiver.rtpSender;
    });
  };

  RTCPeerConnection.prototype.getReceivers = function() {
    return this.transceivers.filter(function(transceiver) {
      return !!transceiver.rtpReceiver;
    })
    .map(function(transceiver) {
      return transceiver.rtpReceiver;
    });
  };


  RTCPeerConnection.prototype._createIceGatherer = function(sdpMLineIndex,
      usingBundle) {
    var pc = this;
    if (usingBundle && sdpMLineIndex > 0) {
      return this.transceivers[0].iceGatherer;
    } else if (this._iceGatherers.length) {
      return this._iceGatherers.shift();
    }
    var iceGatherer = new window.RTCIceGatherer({
      iceServers: this._config.iceServers,
      gatherPolicy: this._config.iceTransportPolicy
    });
    Object.defineProperty(iceGatherer, 'state',
        {value: 'new', writable: true}
    );

    this.transceivers[sdpMLineIndex].bufferedCandidateEvents = [];
    this.transceivers[sdpMLineIndex].bufferCandidates = function(event) {
      var end = !event.candidate || Object.keys(event.candidate).length === 0;
      // polyfill since RTCIceGatherer.state is not implemented in
      // Edge 10547 yet.
      iceGatherer.state = end ? 'completed' : 'gathering';
      if (pc.transceivers[sdpMLineIndex].bufferedCandidateEvents !== null) {
        pc.transceivers[sdpMLineIndex].bufferedCandidateEvents.push(event);
      }
    };
    iceGatherer.addEventListener('localcandidate',
      this.transceivers[sdpMLineIndex].bufferCandidates);
    return iceGatherer;
  };

  // start gathering from an RTCIceGatherer.
  RTCPeerConnection.prototype._gather = function(mid, sdpMLineIndex) {
    var pc = this;
    var iceGatherer = this.transceivers[sdpMLineIndex].iceGatherer;
    if (iceGatherer.onlocalcandidate) {
      return;
    }
    var bufferedCandidateEvents =
      this.transceivers[sdpMLineIndex].bufferedCandidateEvents;
    this.transceivers[sdpMLineIndex].bufferedCandidateEvents = null;
    iceGatherer.removeEventListener('localcandidate',
      this.transceivers[sdpMLineIndex].bufferCandidates);
    iceGatherer.onlocalcandidate = function(evt) {
      if (pc.usingBundle && sdpMLineIndex > 0) {
        // if we know that we use bundle we can drop candidates with
        // ѕdpMLineIndex > 0. If we don't do this then our state gets
        // confused since we dispose the extra ice gatherer.
        return;
      }
      var event = new Event('icecandidate');
      event.candidate = {sdpMid: mid, sdpMLineIndex: sdpMLineIndex};

      var cand = evt.candidate;
      // Edge emits an empty object for RTCIceCandidateComplete‥
      var end = !cand || Object.keys(cand).length === 0;
      if (end) {
        // polyfill since RTCIceGatherer.state is not implemented in
        // Edge 10547 yet.
        if (iceGatherer.state === 'new' || iceGatherer.state === 'gathering') {
          iceGatherer.state = 'completed';
        }
      } else {
        if (iceGatherer.state === 'new') {
          iceGatherer.state = 'gathering';
        }
        // RTCIceCandidate doesn't have a component, needs to be added
        cand.component = 1;
        // also the usernameFragment. TODO: update SDP to take both variants.
        cand.ufrag = iceGatherer.getLocalParameters().usernameFragment;

        var serializedCandidate = SDPUtils.writeCandidate(cand);
        event.candidate = Object.assign(event.candidate,
            SDPUtils.parseCandidate(serializedCandidate));

        event.candidate.candidate = serializedCandidate;
        event.candidate.toJSON = function() {
          return {
            candidate: event.candidate.candidate,
            sdpMid: event.candidate.sdpMid,
            sdpMLineIndex: event.candidate.sdpMLineIndex,
            usernameFragment: event.candidate.usernameFragment
          };
        };
      }

      // update local description.
      var sections = SDPUtils.getMediaSections(pc._localDescription.sdp);
      if (!end) {
        sections[event.candidate.sdpMLineIndex] +=
            'a=' + event.candidate.candidate + '\r\n';
      } else {
        sections[event.candidate.sdpMLineIndex] +=
            'a=end-of-candidates\r\n';
      }
      pc._localDescription.sdp =
          SDPUtils.getDescription(pc._localDescription.sdp) +
          sections.join('');
      var complete = pc.transceivers.every(function(transceiver) {
        return transceiver.iceGatherer &&
            transceiver.iceGatherer.state === 'completed';
      });

      if (pc.iceGatheringState !== 'gathering') {
        pc.iceGatheringState = 'gathering';
        pc._emitGatheringStateChange();
      }

      // Emit candidate. Also emit null candidate when all gatherers are
      // complete.
      if (!end) {
        pc._dispatchEvent('icecandidate', event);
      }
      if (complete) {
        pc._dispatchEvent('icecandidate', new Event('icecandidate'));
        pc.iceGatheringState = 'complete';
        pc._emitGatheringStateChange();
      }
    };

    // emit already gathered candidates.
    window.setTimeout(function() {
      bufferedCandidateEvents.forEach(function(e) {
        iceGatherer.onlocalcandidate(e);
      });
    }, 0);
  };

  // Create ICE transport and DTLS transport.
  RTCPeerConnection.prototype._createIceAndDtlsTransports = function() {
    var pc = this;
    var iceTransport = new window.RTCIceTransport(null);
    iceTransport.onicestatechange = function() {
      pc._updateIceConnectionState();
      pc._updateConnectionState();
    };

    var dtlsTransport = new window.RTCDtlsTransport(iceTransport);
    dtlsTransport.ondtlsstatechange = function() {
      pc._updateConnectionState();
    };
    dtlsTransport.onerror = function() {
      // onerror does not set state to failed by itself.
      Object.defineProperty(dtlsTransport, 'state',
          {value: 'failed', writable: true});
      pc._updateConnectionState();
    };

    return {
      iceTransport: iceTransport,
      dtlsTransport: dtlsTransport
    };
  };

  // Destroy ICE gatherer, ICE transport and DTLS transport.
  // Without triggering the callbacks.
  RTCPeerConnection.prototype._disposeIceAndDtlsTransports = function(
      sdpMLineIndex) {
    var iceGatherer = this.transceivers[sdpMLineIndex].iceGatherer;
    if (iceGatherer) {
      delete iceGatherer.onlocalcandidate;
      delete this.transceivers[sdpMLineIndex].iceGatherer;
    }
    var iceTransport = this.transceivers[sdpMLineIndex].iceTransport;
    if (iceTransport) {
      delete iceTransport.onicestatechange;
      delete this.transceivers[sdpMLineIndex].iceTransport;
    }
    var dtlsTransport = this.transceivers[sdpMLineIndex].dtlsTransport;
    if (dtlsTransport) {
      delete dtlsTransport.ondtlsstatechange;
      delete dtlsTransport.onerror;
      delete this.transceivers[sdpMLineIndex].dtlsTransport;
    }
  };

  // Start the RTP Sender and Receiver for a transceiver.
  RTCPeerConnection.prototype._transceive = function(transceiver,
      send, recv) {
    var params = getCommonCapabilities(transceiver.localCapabilities,
        transceiver.remoteCapabilities);
    if (send && transceiver.rtpSender) {
      params.encodings = transceiver.sendEncodingParameters;
      params.rtcp = {
        cname: SDPUtils.localCName,
        compound: transceiver.rtcpParameters.compound
      };
      if (transceiver.recvEncodingParameters.length) {
        params.rtcp.ssrc = transceiver.recvEncodingParameters[0].ssrc;
      }
      transceiver.rtpSender.send(params);
    }
    if (recv && transceiver.rtpReceiver && params.codecs.length > 0) {
      // remove RTX field in Edge 14942
      if (transceiver.kind === 'video'
          && transceiver.recvEncodingParameters
          && edgeVersion < 15019) {
        transceiver.recvEncodingParameters.forEach(function(p) {
          delete p.rtx;
        });
      }
      if (transceiver.recvEncodingParameters.length) {
        params.encodings = transceiver.recvEncodingParameters;
      } else {
        params.encodings = [{}];
      }
      params.rtcp = {
        compound: transceiver.rtcpParameters.compound
      };
      if (transceiver.rtcpParameters.cname) {
        params.rtcp.cname = transceiver.rtcpParameters.cname;
      }
      if (transceiver.sendEncodingParameters.length) {
        params.rtcp.ssrc = transceiver.sendEncodingParameters[0].ssrc;
      }
      transceiver.rtpReceiver.receive(params);
    }
  };

  RTCPeerConnection.prototype.setLocalDescription = function(description) {
    var pc = this;

    // Note: pranswer is not supported.
    if (['offer', 'answer'].indexOf(description.type) === -1) {
      return Promise.reject(makeError('TypeError',
          'Unsupported type "' + description.type + '"'));
    }

    if (!isActionAllowedInSignalingState('setLocalDescription',
        description.type, pc.signalingState) || pc._isClosed) {
      return Promise.reject(makeError('InvalidStateError',
          'Can not set local ' + description.type +
          ' in state ' + pc.signalingState));
    }

    var sections;
    var sessionpart;
    if (description.type === 'offer') {
      // VERY limited support for SDP munging. Limited to:
      // * changing the order of codecs
      sections = SDPUtils.splitSections(description.sdp);
      sessionpart = sections.shift();
      sections.forEach(function(mediaSection, sdpMLineIndex) {
        var caps = SDPUtils.parseRtpParameters(mediaSection);
        pc.transceivers[sdpMLineIndex].localCapabilities = caps;
      });

      pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {
        pc._gather(transceiver.mid, sdpMLineIndex);
      });
    } else if (description.type === 'answer') {
      sections = SDPUtils.splitSections(pc._remoteDescription.sdp);
      sessionpart = sections.shift();
      var isIceLite = SDPUtils.matchPrefix(sessionpart,
          'a=ice-lite').length > 0;
      sections.forEach(function(mediaSection, sdpMLineIndex) {
        var transceiver = pc.transceivers[sdpMLineIndex];
        var iceGatherer = transceiver.iceGatherer;
        var iceTransport = transceiver.iceTransport;
        var dtlsTransport = transceiver.dtlsTransport;
        var localCapabilities = transceiver.localCapabilities;
        var remoteCapabilities = transceiver.remoteCapabilities;

        // treat bundle-only as not-rejected.
        var rejected = SDPUtils.isRejected(mediaSection) &&
            SDPUtils.matchPrefix(mediaSection, 'a=bundle-only').length === 0;

        if (!rejected && !transceiver.rejected) {
          var remoteIceParameters = SDPUtils.getIceParameters(
              mediaSection, sessionpart);
          var remoteDtlsParameters = SDPUtils.getDtlsParameters(
              mediaSection, sessionpart);
          if (isIceLite) {
            remoteDtlsParameters.role = 'server';
          }

          if (!pc.usingBundle || sdpMLineIndex === 0) {
            pc._gather(transceiver.mid, sdpMLineIndex);
            if (iceTransport.state === 'new') {
              iceTransport.start(iceGatherer, remoteIceParameters,
                  isIceLite ? 'controlling' : 'controlled');
            }
            if (dtlsTransport.state === 'new') {
              dtlsTransport.start(remoteDtlsParameters);
            }
          }

          // Calculate intersection of capabilities.
          var params = getCommonCapabilities(localCapabilities,
              remoteCapabilities);

          // Start the RTCRtpSender. The RTCRtpReceiver for this
          // transceiver has already been started in setRemoteDescription.
          pc._transceive(transceiver,
              params.codecs.length > 0,
              false);
        }
      });
    }

    pc._localDescription = {
      type: description.type,
      sdp: description.sdp
    };
    if (description.type === 'offer') {
      pc._updateSignalingState('have-local-offer');
    } else {
      pc._updateSignalingState('stable');
    }

    return Promise.resolve();
  };

  RTCPeerConnection.prototype.setRemoteDescription = function(description) {
    var pc = this;

    // Note: pranswer is not supported.
    if (['offer', 'answer'].indexOf(description.type) === -1) {
      return Promise.reject(makeError('TypeError',
          'Unsupported type "' + description.type + '"'));
    }

    if (!isActionAllowedInSignalingState('setRemoteDescription',
        description.type, pc.signalingState) || pc._isClosed) {
      return Promise.reject(makeError('InvalidStateError',
          'Can not set remote ' + description.type +
          ' in state ' + pc.signalingState));
    }

    var streams = {};
    pc.remoteStreams.forEach(function(stream) {
      streams[stream.id] = stream;
    });
    var receiverList = [];
    var sections = SDPUtils.splitSections(description.sdp);
    var sessionpart = sections.shift();
    var isIceLite = SDPUtils.matchPrefix(sessionpart,
        'a=ice-lite').length > 0;
    var usingBundle = SDPUtils.matchPrefix(sessionpart,
        'a=group:BUNDLE ').length > 0;
    pc.usingBundle = usingBundle;
    var iceOptions = SDPUtils.matchPrefix(sessionpart,
        'a=ice-options:')[0];
    if (iceOptions) {
      pc.canTrickleIceCandidates = iceOptions.substr(14).split(' ')
          .indexOf('trickle') >= 0;
    } else {
      pc.canTrickleIceCandidates = false;
    }

    sections.forEach(function(mediaSection, sdpMLineIndex) {
      var lines = SDPUtils.splitLines(mediaSection);
      var kind = SDPUtils.getKind(mediaSection);
      // treat bundle-only as not-rejected.
      var rejected = SDPUtils.isRejected(mediaSection) &&
          SDPUtils.matchPrefix(mediaSection, 'a=bundle-only').length === 0;
      var protocol = lines[0].substr(2).split(' ')[2];

      var direction = SDPUtils.getDirection(mediaSection, sessionpart);
      var remoteMsid = SDPUtils.parseMsid(mediaSection);

      var mid = SDPUtils.getMid(mediaSection) || SDPUtils.generateIdentifier();

      // Reject datachannels which are not implemented yet.
      if (rejected || (kind === 'application' && (protocol === 'DTLS/SCTP' ||
          protocol === 'UDP/DTLS/SCTP'))) {
        // TODO: this is dangerous in the case where a non-rejected m-line
        //     becomes rejected.
        pc.transceivers[sdpMLineIndex] = {
          mid: mid,
          kind: kind,
          protocol: protocol,
          rejected: true
        };
        return;
      }

      if (!rejected && pc.transceivers[sdpMLineIndex] &&
          pc.transceivers[sdpMLineIndex].rejected) {
        // recycle a rejected transceiver.
        pc.transceivers[sdpMLineIndex] = pc._createTransceiver(kind, true);
      }

      var transceiver;
      var iceGatherer;
      var iceTransport;
      var dtlsTransport;
      var rtpReceiver;
      var sendEncodingParameters;
      var recvEncodingParameters;
      var localCapabilities;

      var track;
      // FIXME: ensure the mediaSection has rtcp-mux set.
      var remoteCapabilities = SDPUtils.parseRtpParameters(mediaSection);
      var remoteIceParameters;
      var remoteDtlsParameters;
      if (!rejected) {
        remoteIceParameters = SDPUtils.getIceParameters(mediaSection,
            sessionpart);
        remoteDtlsParameters = SDPUtils.getDtlsParameters(mediaSection,
            sessionpart);
        remoteDtlsParameters.role = 'client';
      }
      recvEncodingParameters =
          SDPUtils.parseRtpEncodingParameters(mediaSection);

      var rtcpParameters = SDPUtils.parseRtcpParameters(mediaSection);

      var isComplete = SDPUtils.matchPrefix(mediaSection,
          'a=end-of-candidates', sessionpart).length > 0;
      var cands = SDPUtils.matchPrefix(mediaSection, 'a=candidate:')
          .map(function(cand) {
            return SDPUtils.parseCandidate(cand);
          })
          .filter(function(cand) {
            return cand.component === 1;
          });

      // Check if we can use BUNDLE and dispose transports.
      if ((description.type === 'offer' || description.type === 'answer') &&
          !rejected && usingBundle && sdpMLineIndex > 0 &&
          pc.transceivers[sdpMLineIndex]) {
        pc._disposeIceAndDtlsTransports(sdpMLineIndex);
        pc.transceivers[sdpMLineIndex].iceGatherer =
            pc.transceivers[0].iceGatherer;
        pc.transceivers[sdpMLineIndex].iceTransport =
            pc.transceivers[0].iceTransport;
        pc.transceivers[sdpMLineIndex].dtlsTransport =
            pc.transceivers[0].dtlsTransport;
        if (pc.transceivers[sdpMLineIndex].rtpSender) {
          pc.transceivers[sdpMLineIndex].rtpSender.setTransport(
              pc.transceivers[0].dtlsTransport);
        }
        if (pc.transceivers[sdpMLineIndex].rtpReceiver) {
          pc.transceivers[sdpMLineIndex].rtpReceiver.setTransport(
              pc.transceivers[0].dtlsTransport);
        }
      }
      if (description.type === 'offer' && !rejected) {
        transceiver = pc.transceivers[sdpMLineIndex] ||
            pc._createTransceiver(kind);
        transceiver.mid = mid;

        if (!transceiver.iceGatherer) {
          transceiver.iceGatherer = pc._createIceGatherer(sdpMLineIndex,
              usingBundle);
        }

        if (cands.length && transceiver.iceTransport.state === 'new') {
          if (isComplete && (!usingBundle || sdpMLineIndex === 0)) {
            transceiver.iceTransport.setRemoteCandidates(cands);
          } else {
            cands.forEach(function(candidate) {
              maybeAddCandidate(transceiver.iceTransport, candidate);
            });
          }
        }

        localCapabilities = window.RTCRtpReceiver.getCapabilities(kind);

        // filter RTX until additional stuff needed for RTX is implemented
        // in adapter.js
        if (edgeVersion < 15019) {
          localCapabilities.codecs = localCapabilities.codecs.filter(
              function(codec) {
                return codec.name !== 'rtx';
              });
        }

        sendEncodingParameters = transceiver.sendEncodingParameters || [{
          ssrc: (2 * sdpMLineIndex + 2) * 1001
        }];

        // TODO: rewrite to use http://w3c.github.io/webrtc-pc/#set-associated-remote-streams
        var isNewTrack = false;
        if (direction === 'sendrecv' || direction === 'sendonly') {
          isNewTrack = !transceiver.rtpReceiver;
          rtpReceiver = transceiver.rtpReceiver ||
              new window.RTCRtpReceiver(transceiver.dtlsTransport, kind);

          if (isNewTrack) {
            var stream;
            track = rtpReceiver.track;
            // FIXME: does not work with Plan B.
            if (remoteMsid && remoteMsid.stream === '-') {
              // no-op. a stream id of '-' means: no associated stream.
            } else if (remoteMsid) {
              if (!streams[remoteMsid.stream]) {
                streams[remoteMsid.stream] = new window.MediaStream();
                Object.defineProperty(streams[remoteMsid.stream], 'id', {
                  get: function() {
                    return remoteMsid.stream;
                  }
                });
              }
              Object.defineProperty(track, 'id', {
                get: function() {
                  return remoteMsid.track;
                }
              });
              stream = streams[remoteMsid.stream];
            } else {
              if (!streams.default) {
                streams.default = new window.MediaStream();
              }
              stream = streams.default;
            }
            if (stream) {
              addTrackToStreamAndFireEvent(track, stream);
              transceiver.associatedRemoteMediaStreams.push(stream);
            }
            receiverList.push([track, rtpReceiver, stream]);
          }
        } else if (transceiver.rtpReceiver && transceiver.rtpReceiver.track) {
          transceiver.associatedRemoteMediaStreams.forEach(function(s) {
            var nativeTrack = s.getTracks().find(function(t) {
              return t.id === transceiver.rtpReceiver.track.id;
            });
            if (nativeTrack) {
              removeTrackFromStreamAndFireEvent(nativeTrack, s);
            }
          });
          transceiver.associatedRemoteMediaStreams = [];
        }

        transceiver.localCapabilities = localCapabilities;
        transceiver.remoteCapabilities = remoteCapabilities;
        transceiver.rtpReceiver = rtpReceiver;
        transceiver.rtcpParameters = rtcpParameters;
        transceiver.sendEncodingParameters = sendEncodingParameters;
        transceiver.recvEncodingParameters = recvEncodingParameters;

        // Start the RTCRtpReceiver now. The RTPSender is started in
        // setLocalDescription.
        pc._transceive(pc.transceivers[sdpMLineIndex],
            false,
            isNewTrack);
      } else if (description.type === 'answer' && !rejected) {
        transceiver = pc.transceivers[sdpMLineIndex];
        iceGatherer = transceiver.iceGatherer;
        iceTransport = transceiver.iceTransport;
        dtlsTransport = transceiver.dtlsTransport;
        rtpReceiver = transceiver.rtpReceiver;
        sendEncodingParameters = transceiver.sendEncodingParameters;
        localCapabilities = transceiver.localCapabilities;

        pc.transceivers[sdpMLineIndex].recvEncodingParameters =
            recvEncodingParameters;
        pc.transceivers[sdpMLineIndex].remoteCapabilities =
            remoteCapabilities;
        pc.transceivers[sdpMLineIndex].rtcpParameters = rtcpParameters;

        if (cands.length && iceTransport.state === 'new') {
          if ((isIceLite || isComplete) &&
              (!usingBundle || sdpMLineIndex === 0)) {
            iceTransport.setRemoteCandidates(cands);
          } else {
            cands.forEach(function(candidate) {
              maybeAddCandidate(transceiver.iceTransport, candidate);
            });
          }
        }

        if (!usingBundle || sdpMLineIndex === 0) {
          if (iceTransport.state === 'new') {
            iceTransport.start(iceGatherer, remoteIceParameters,
                'controlling');
          }
          if (dtlsTransport.state === 'new') {
            dtlsTransport.start(remoteDtlsParameters);
          }
        }

        // If the offer contained RTX but the answer did not,
        // remove RTX from sendEncodingParameters.
        var commonCapabilities = getCommonCapabilities(
          transceiver.localCapabilities,
          transceiver.remoteCapabilities);

        var hasRtx = commonCapabilities.codecs.filter(function(c) {
          return c.name.toLowerCase() === 'rtx';
        }).length;
        if (!hasRtx && transceiver.sendEncodingParameters[0].rtx) {
          delete transceiver.sendEncodingParameters[0].rtx;
        }

        pc._transceive(transceiver,
            direction === 'sendrecv' || direction === 'recvonly',
            direction === 'sendrecv' || direction === 'sendonly');

        // TODO: rewrite to use http://w3c.github.io/webrtc-pc/#set-associated-remote-streams
        if (rtpReceiver &&
            (direction === 'sendrecv' || direction === 'sendonly')) {
          track = rtpReceiver.track;
          if (remoteMsid) {
            if (!streams[remoteMsid.stream]) {
              streams[remoteMsid.stream] = new window.MediaStream();
            }
            addTrackToStreamAndFireEvent(track, streams[remoteMsid.stream]);
            receiverList.push([track, rtpReceiver, streams[remoteMsid.stream]]);
          } else {
            if (!streams.default) {
              streams.default = new window.MediaStream();
            }
            addTrackToStreamAndFireEvent(track, streams.default);
            receiverList.push([track, rtpReceiver, streams.default]);
          }
        } else {
          // FIXME: actually the receiver should be created later.
          delete transceiver.rtpReceiver;
        }
      }
    });

    if (pc._dtlsRole === undefined) {
      pc._dtlsRole = description.type === 'offer' ? 'active' : 'passive';
    }

    pc._remoteDescription = {
      type: description.type,
      sdp: description.sdp
    };
    if (description.type === 'offer') {
      pc._updateSignalingState('have-remote-offer');
    } else {
      pc._updateSignalingState('stable');
    }
    Object.keys(streams).forEach(function(sid) {
      var stream = streams[sid];
      if (stream.getTracks().length) {
        if (pc.remoteStreams.indexOf(stream) === -1) {
          pc.remoteStreams.push(stream);
          var event = new Event('addstream');
          event.stream = stream;
          window.setTimeout(function() {
            pc._dispatchEvent('addstream', event);
          });
        }

        receiverList.forEach(function(item) {
          var track = item[0];
          var receiver = item[1];
          if (stream.id !== item[2].id) {
            return;
          }
          fireAddTrack(pc, track, receiver, [stream]);
        });
      }
    });
    receiverList.forEach(function(item) {
      if (item[2]) {
        return;
      }
      fireAddTrack(pc, item[0], item[1], []);
    });

    // check whether addIceCandidate({}) was called within four seconds after
    // setRemoteDescription.
    window.setTimeout(function() {
      if (!(pc && pc.transceivers)) {
        return;
      }
      pc.transceivers.forEach(function(transceiver) {
        if (transceiver.iceTransport &&
            transceiver.iceTransport.state === 'new' &&
            transceiver.iceTransport.getRemoteCandidates().length > 0) {
          console.warn('Timeout for addRemoteCandidate. Consider sending ' +
              'an end-of-candidates notification');
          transceiver.iceTransport.addRemoteCandidate({});
        }
      });
    }, 4000);

    return Promise.resolve();
  };

  RTCPeerConnection.prototype.close = function() {
    this.transceivers.forEach(function(transceiver) {
      /* not yet
      if (transceiver.iceGatherer) {
        transceiver.iceGatherer.close();
      }
      */
      if (transceiver.iceTransport) {
        transceiver.iceTransport.stop();
      }
      if (transceiver.dtlsTransport) {
        transceiver.dtlsTransport.stop();
      }
      if (transceiver.rtpSender) {
        transceiver.rtpSender.stop();
      }
      if (transceiver.rtpReceiver) {
        transceiver.rtpReceiver.stop();
      }
    });
    // FIXME: clean up tracks, local streams, remote streams, etc
    this._isClosed = true;
    this._updateSignalingState('closed');
  };

  // Update the signaling state.
  RTCPeerConnection.prototype._updateSignalingState = function(newState) {
    this.signalingState = newState;
    var event = new Event('signalingstatechange');
    this._dispatchEvent('signalingstatechange', event);
  };

  // Determine whether to fire the negotiationneeded event.
  RTCPeerConnection.prototype._maybeFireNegotiationNeeded = function() {
    var pc = this;
    if (this.signalingState !== 'stable' || this.needNegotiation === true) {
      return;
    }
    this.needNegotiation = true;
    window.setTimeout(function() {
      if (pc.needNegotiation) {
        pc.needNegotiation = false;
        var event = new Event('negotiationneeded');
        pc._dispatchEvent('negotiationneeded', event);
      }
    }, 0);
  };

  // Update the ice connection state.
  RTCPeerConnection.prototype._updateIceConnectionState = function() {
    var newState;
    var states = {
      'new': 0,
      closed: 0,
      checking: 0,
      connected: 0,
      completed: 0,
      disconnected: 0,
      failed: 0
    };
    this.transceivers.forEach(function(transceiver) {
      if (transceiver.iceTransport && !transceiver.rejected) {
        states[transceiver.iceTransport.state]++;
      }
    });

    newState = 'new';
    if (states.failed > 0) {
      newState = 'failed';
    } else if (states.checking > 0) {
      newState = 'checking';
    } else if (states.disconnected > 0) {
      newState = 'disconnected';
    } else if (states.new > 0) {
      newState = 'new';
    } else if (states.connected > 0) {
      newState = 'connected';
    } else if (states.completed > 0) {
      newState = 'completed';
    }

    if (newState !== this.iceConnectionState) {
      this.iceConnectionState = newState;
      var event = new Event('iceconnectionstatechange');
      this._dispatchEvent('iceconnectionstatechange', event);
    }
  };

  // Update the connection state.
  RTCPeerConnection.prototype._updateConnectionState = function() {
    var newState;
    var states = {
      'new': 0,
      closed: 0,
      connecting: 0,
      connected: 0,
      completed: 0,
      disconnected: 0,
      failed: 0
    };
    this.transceivers.forEach(function(transceiver) {
      if (transceiver.iceTransport && transceiver.dtlsTransport &&
          !transceiver.rejected) {
        states[transceiver.iceTransport.state]++;
        states[transceiver.dtlsTransport.state]++;
      }
    });
    // ICETransport.completed and connected are the same for this purpose.
    states.connected += states.completed;

    newState = 'new';
    if (states.failed > 0) {
      newState = 'failed';
    } else if (states.connecting > 0) {
      newState = 'connecting';
    } else if (states.disconnected > 0) {
      newState = 'disconnected';
    } else if (states.new > 0) {
      newState = 'new';
    } else if (states.connected > 0) {
      newState = 'connected';
    }

    if (newState !== this.connectionState) {
      this.connectionState = newState;
      var event = new Event('connectionstatechange');
      this._dispatchEvent('connectionstatechange', event);
    }
  };

  RTCPeerConnection.prototype.createOffer = function() {
    var pc = this;

    if (pc._isClosed) {
      return Promise.reject(makeError('InvalidStateError',
          'Can not call createOffer after close'));
    }

    var numAudioTracks = pc.transceivers.filter(function(t) {
      return t.kind === 'audio';
    }).length;
    var numVideoTracks = pc.transceivers.filter(function(t) {
      return t.kind === 'video';
    }).length;

    // Determine number of audio and video tracks we need to send/recv.
    var offerOptions = arguments[0];
    if (offerOptions) {
      // Reject Chrome legacy constraints.
      if (offerOptions.mandatory || offerOptions.optional) {
        throw new TypeError(
            'Legacy mandatory/optional constraints not supported.');
      }
      if (offerOptions.offerToReceiveAudio !== undefined) {
        if (offerOptions.offerToReceiveAudio === true) {
          numAudioTracks = 1;
        } else if (offerOptions.offerToReceiveAudio === false) {
          numAudioTracks = 0;
        } else {
          numAudioTracks = offerOptions.offerToReceiveAudio;
        }
      }
      if (offerOptions.offerToReceiveVideo !== undefined) {
        if (offerOptions.offerToReceiveVideo === true) {
          numVideoTracks = 1;
        } else if (offerOptions.offerToReceiveVideo === false) {
          numVideoTracks = 0;
        } else {
          numVideoTracks = offerOptions.offerToReceiveVideo;
        }
      }
    }

    pc.transceivers.forEach(function(transceiver) {
      if (transceiver.kind === 'audio') {
        numAudioTracks--;
        if (numAudioTracks < 0) {
          transceiver.wantReceive = false;
        }
      } else if (transceiver.kind === 'video') {
        numVideoTracks--;
        if (numVideoTracks < 0) {
          transceiver.wantReceive = false;
        }
      }
    });

    // Create M-lines for recvonly streams.
    while (numAudioTracks > 0 || numVideoTracks > 0) {
      if (numAudioTracks > 0) {
        pc._createTransceiver('audio');
        numAudioTracks--;
      }
      if (numVideoTracks > 0) {
        pc._createTransceiver('video');
        numVideoTracks--;
      }
    }

    var sdp = SDPUtils.writeSessionBoilerplate(pc._sdpSessionId,
        pc._sdpSessionVersion++);
    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {
      // For each track, create an ice gatherer, ice transport,
      // dtls transport, potentially rtpsender and rtpreceiver.
      var track = transceiver.track;
      var kind = transceiver.kind;
      var mid = transceiver.mid || SDPUtils.generateIdentifier();
      transceiver.mid = mid;

      if (!transceiver.iceGatherer) {
        transceiver.iceGatherer = pc._createIceGatherer(sdpMLineIndex,
            pc.usingBundle);
      }

      var localCapabilities = window.RTCRtpSender.getCapabilities(kind);
      // filter RTX until additional stuff needed for RTX is implemented
      // in adapter.js
      if (edgeVersion < 15019) {
        localCapabilities.codecs = localCapabilities.codecs.filter(
            function(codec) {
              return codec.name !== 'rtx';
            });
      }
      localCapabilities.codecs.forEach(function(codec) {
        // work around https://bugs.chromium.org/p/webrtc/issues/detail?id=6552
        // by adding level-asymmetry-allowed=1
        if (codec.name === 'H264' &&
            codec.parameters['level-asymmetry-allowed'] === undefined) {
          codec.parameters['level-asymmetry-allowed'] = '1';
        }

        // for subsequent offers, we might have to re-use the payload
        // type of the last offer.
        if (transceiver.remoteCapabilities &&
            transceiver.remoteCapabilities.codecs) {
          transceiver.remoteCapabilities.codecs.forEach(function(remoteCodec) {
            if (codec.name.toLowerCase() === remoteCodec.name.toLowerCase() &&
                codec.clockRate === remoteCodec.clockRate) {
              codec.preferredPayloadType = remoteCodec.payloadType;
            }
          });
        }
      });
      localCapabilities.headerExtensions.forEach(function(hdrExt) {
        var remoteExtensions = transceiver.remoteCapabilities &&
            transceiver.remoteCapabilities.headerExtensions || [];
        remoteExtensions.forEach(function(rHdrExt) {
          if (hdrExt.uri === rHdrExt.uri) {
            hdrExt.id = rHdrExt.id;
          }
        });
      });

      // generate an ssrc now, to be used later in rtpSender.send
      var sendEncodingParameters = transceiver.sendEncodingParameters || [{
        ssrc: (2 * sdpMLineIndex + 1) * 1001
      }];
      if (track) {
        // add RTX
        if (edgeVersion >= 15019 && kind === 'video' &&
            !sendEncodingParameters[0].rtx) {
          sendEncodingParameters[0].rtx = {
            ssrc: sendEncodingParameters[0].ssrc + 1
          };
        }
      }

      if (transceiver.wantReceive) {
        transceiver.rtpReceiver = new window.RTCRtpReceiver(
            transceiver.dtlsTransport, kind);
      }

      transceiver.localCapabilities = localCapabilities;
      transceiver.sendEncodingParameters = sendEncodingParameters;
    });

    // always offer BUNDLE and dispose on return if not supported.
    if (pc._config.bundlePolicy !== 'max-compat') {
      sdp += 'a=group:BUNDLE ' + pc.transceivers.map(function(t) {
        return t.mid;
      }).join(' ') + '\r\n';
    }
    sdp += 'a=ice-options:trickle\r\n';

    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {
      sdp += writeMediaSection(transceiver, transceiver.localCapabilities,
          'offer', transceiver.stream, pc._dtlsRole);
      sdp += 'a=rtcp-rsize\r\n';

      if (transceiver.iceGatherer && pc.iceGatheringState !== 'new' &&
          (sdpMLineIndex === 0 || !pc.usingBundle)) {
        transceiver.iceGatherer.getLocalCandidates().forEach(function(cand) {
          cand.component = 1;
          sdp += 'a=' + SDPUtils.writeCandidate(cand) + '\r\n';
        });

        if (transceiver.iceGatherer.state === 'completed') {
          sdp += 'a=end-of-candidates\r\n';
        }
      }
    });

    var desc = new window.RTCSessionDescription({
      type: 'offer',
      sdp: sdp
    });
    return Promise.resolve(desc);
  };

  RTCPeerConnection.prototype.createAnswer = function() {
    var pc = this;

    if (pc._isClosed) {
      return Promise.reject(makeError('InvalidStateError',
          'Can not call createAnswer after close'));
    }

    if (!(pc.signalingState === 'have-remote-offer' ||
        pc.signalingState === 'have-local-pranswer')) {
      return Promise.reject(makeError('InvalidStateError',
          'Can not call createAnswer in signalingState ' + pc.signalingState));
    }

    var sdp = SDPUtils.writeSessionBoilerplate(pc._sdpSessionId,
        pc._sdpSessionVersion++);
    if (pc.usingBundle) {
      sdp += 'a=group:BUNDLE ' + pc.transceivers.map(function(t) {
        return t.mid;
      }).join(' ') + '\r\n';
    }
    sdp += 'a=ice-options:trickle\r\n';

    var mediaSectionsInOffer = SDPUtils.getMediaSections(
        pc._remoteDescription.sdp).length;
    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {
      if (sdpMLineIndex + 1 > mediaSectionsInOffer) {
        return;
      }
      if (transceiver.rejected) {
        if (transceiver.kind === 'application') {
          if (transceiver.protocol === 'DTLS/SCTP') { // legacy fmt
            sdp += 'm=application 0 DTLS/SCTP 5000\r\n';
          } else {
            sdp += 'm=application 0 ' + transceiver.protocol +
                ' webrtc-datachannel\r\n';
          }
        } else if (transceiver.kind === 'audio') {
          sdp += 'm=audio 0 UDP/TLS/RTP/SAVPF 0\r\n' +
              'a=rtpmap:0 PCMU/8000\r\n';
        } else if (transceiver.kind === 'video') {
          sdp += 'm=video 0 UDP/TLS/RTP/SAVPF 120\r\n' +
              'a=rtpmap:120 VP8/90000\r\n';
        }
        sdp += 'c=IN IP4 0.0.0.0\r\n' +
            'a=inactive\r\n' +
            'a=mid:' + transceiver.mid + '\r\n';
        return;
      }

      // FIXME: look at direction.
      if (transceiver.stream) {
        var localTrack;
        if (transceiver.kind === 'audio') {
          localTrack = transceiver.stream.getAudioTracks()[0];
        } else if (transceiver.kind === 'video') {
          localTrack = transceiver.stream.getVideoTracks()[0];
        }
        if (localTrack) {
          // add RTX
          if (edgeVersion >= 15019 && transceiver.kind === 'video' &&
              !transceiver.sendEncodingParameters[0].rtx) {
            transceiver.sendEncodingParameters[0].rtx = {
              ssrc: transceiver.sendEncodingParameters[0].ssrc + 1
            };
          }
        }
      }

      // Calculate intersection of capabilities.
      var commonCapabilities = getCommonCapabilities(
          transceiver.localCapabilities,
          transceiver.remoteCapabilities);

      var hasRtx = commonCapabilities.codecs.filter(function(c) {
        return c.name.toLowerCase() === 'rtx';
      }).length;
      if (!hasRtx && transceiver.sendEncodingParameters[0].rtx) {
        delete transceiver.sendEncodingParameters[0].rtx;
      }

      sdp += writeMediaSection(transceiver, commonCapabilities,
          'answer', transceiver.stream, pc._dtlsRole);
      if (transceiver.rtcpParameters &&
          transceiver.rtcpParameters.reducedSize) {
        sdp += 'a=rtcp-rsize\r\n';
      }
    });

    var desc = new window.RTCSessionDescription({
      type: 'answer',
      sdp: sdp
    });
    return Promise.resolve(desc);
  };

  RTCPeerConnection.prototype.addIceCandidate = function(candidate) {
    var pc = this;
    var sections;
    if (candidate && !(candidate.sdpMLineIndex !== undefined ||
        candidate.sdpMid)) {
      return Promise.reject(new TypeError('sdpMLineIndex or sdpMid required'));
    }

    // TODO: needs to go into ops queue.
    return new Promise(function(resolve, reject) {
      if (!pc._remoteDescription) {
        return reject(makeError('InvalidStateError',
            'Can not add ICE candidate without a remote description'));
      } else if (!candidate || candidate.candidate === '') {
        for (var j = 0; j < pc.transceivers.length; j++) {
          if (pc.transceivers[j].rejected) {
            continue;
          }
          pc.transceivers[j].iceTransport.addRemoteCandidate({});
          sections = SDPUtils.getMediaSections(pc._remoteDescription.sdp);
          sections[j] += 'a=end-of-candidates\r\n';
          pc._remoteDescription.sdp =
              SDPUtils.getDescription(pc._remoteDescription.sdp) +
              sections.join('');
          if (pc.usingBundle) {
            break;
          }
        }
      } else {
        var sdpMLineIndex = candidate.sdpMLineIndex;
        if (candidate.sdpMid) {
          for (var i = 0; i < pc.transceivers.length; i++) {
            if (pc.transceivers[i].mid === candidate.sdpMid) {
              sdpMLineIndex = i;
              break;
            }
          }
        }
        var transceiver = pc.transceivers[sdpMLineIndex];
        if (transceiver) {
          if (transceiver.rejected) {
            return resolve();
          }
          var cand = Object.keys(candidate.candidate).length > 0 ?
              SDPUtils.parseCandidate(candidate.candidate) : {};
          // Ignore Chrome's invalid candidates since Edge does not like them.
          if (cand.protocol === 'tcp' && (cand.port === 0 || cand.port === 9)) {
            return resolve();
          }
          // Ignore RTCP candidates, we assume RTCP-MUX.
          if (cand.component && cand.component !== 1) {
            return resolve();
          }
          // when using bundle, avoid adding candidates to the wrong
          // ice transport. And avoid adding candidates added in the SDP.
          if (sdpMLineIndex === 0 || (sdpMLineIndex > 0 &&
              transceiver.iceTransport !== pc.transceivers[0].iceTransport)) {
            if (!maybeAddCandidate(transceiver.iceTransport, cand)) {
              return reject(makeError('OperationError',
                  'Can not add ICE candidate'));
            }
          }

          // update the remoteDescription.
          var candidateString = candidate.candidate.trim();
          if (candidateString.indexOf('a=') === 0) {
            candidateString = candidateString.substr(2);
          }
          sections = SDPUtils.getMediaSections(pc._remoteDescription.sdp);
          sections[sdpMLineIndex] += 'a=' +
              (cand.type ? candidateString : 'end-of-candidates')
              + '\r\n';
          pc._remoteDescription.sdp =
              SDPUtils.getDescription(pc._remoteDescription.sdp) +
              sections.join('');
        } else {
          return reject(makeError('OperationError',
              'Can not add ICE candidate'));
        }
      }
      resolve();
    });
  };

  RTCPeerConnection.prototype.getStats = function(selector) {
    if (selector && selector instanceof window.MediaStreamTrack) {
      var senderOrReceiver = null;
      this.transceivers.forEach(function(transceiver) {
        if (transceiver.rtpSender &&
            transceiver.rtpSender.track === selector) {
          senderOrReceiver = transceiver.rtpSender;
        } else if (transceiver.rtpReceiver &&
            transceiver.rtpReceiver.track === selector) {
          senderOrReceiver = transceiver.rtpReceiver;
        }
      });
      if (!senderOrReceiver) {
        throw makeError('InvalidAccessError', 'Invalid selector.');
      }
      return senderOrReceiver.getStats();
    }

    var promises = [];
    this.transceivers.forEach(function(transceiver) {
      ['rtpSender', 'rtpReceiver', 'iceGatherer', 'iceTransport',
          'dtlsTransport'].forEach(function(method) {
            if (transceiver[method]) {
              promises.push(transceiver[method].getStats());
            }
          });
    });
    return Promise.all(promises).then(function(allStats) {
      var results = new Map();
      allStats.forEach(function(stats) {
        stats.forEach(function(stat) {
          results.set(stat.id, stat);
        });
      });
      return results;
    });
  };

  // fix low-level stat names and return Map instead of object.
  var ortcObjects = ['RTCRtpSender', 'RTCRtpReceiver', 'RTCIceGatherer',
    'RTCIceTransport', 'RTCDtlsTransport'];
  ortcObjects.forEach(function(ortcObjectName) {
    var obj = window[ortcObjectName];
    if (obj && obj.prototype && obj.prototype.getStats) {
      var nativeGetstats = obj.prototype.getStats;
      obj.prototype.getStats = function() {
        return nativeGetstats.apply(this)
        .then(function(nativeStats) {
          var mapStats = new Map();
          Object.keys(nativeStats).forEach(function(id) {
            nativeStats[id].type = fixStatsType(nativeStats[id]);
            mapStats.set(id, nativeStats[id]);
          });
          return mapStats;
        });
      };
    }
  });

  // legacy callback shims. Should be moved to adapter.js some days.
  var methods = ['createOffer', 'createAnswer'];
  methods.forEach(function(method) {
    var nativeMethod = RTCPeerConnection.prototype[method];
    RTCPeerConnection.prototype[method] = function() {
      var args = arguments;
      if (typeof args[0] === 'function' ||
          typeof args[1] === 'function') { // legacy
        return nativeMethod.apply(this, [arguments[2]])
        .then(function(description) {
          if (typeof args[0] === 'function') {
            args[0].apply(null, [description]);
          }
        }, function(error) {
          if (typeof args[1] === 'function') {
            args[1].apply(null, [error]);
          }
        });
      }
      return nativeMethod.apply(this, arguments);
    };
  });

  methods = ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate'];
  methods.forEach(function(method) {
    var nativeMethod = RTCPeerConnection.prototype[method];
    RTCPeerConnection.prototype[method] = function() {
      var args = arguments;
      if (typeof args[1] === 'function' ||
          typeof args[2] === 'function') { // legacy
        return nativeMethod.apply(this, arguments)
        .then(function() {
          if (typeof args[1] === 'function') {
            args[1].apply(null);
          }
        }, function(error) {
          if (typeof args[2] === 'function') {
            args[2].apply(null, [error]);
          }
        });
      }
      return nativeMethod.apply(this, arguments);
    };
  });

  // getStats is special. It doesn't have a spec legacy method yet we support
  // getStats(something, cb) without error callbacks.
  ['getStats'].forEach(function(method) {
    var nativeMethod = RTCPeerConnection.prototype[method];
    RTCPeerConnection.prototype[method] = function() {
      var args = arguments;
      if (typeof args[1] === 'function') {
        return nativeMethod.apply(this, arguments)
        .then(function() {
          if (typeof args[1] === 'function') {
            args[1].apply(null);
          }
        });
      }
      return nativeMethod.apply(this, arguments);
    };
  });

  return RTCPeerConnection;
};

},{"sdp":131}],131:[function(require,module,exports){
/* eslint-env node */
'use strict';

// SDP helpers.
var SDPUtils = {};

// Generate an alphanumeric identifier for cname or mids.
// TODO: use UUIDs instead? https://gist.github.com/jed/982883
SDPUtils.generateIdentifier = function() {
  return Math.random().toString(36).substr(2, 10);
};

// The RTCP CNAME used by all peerconnections from the same JS.
SDPUtils.localCName = SDPUtils.generateIdentifier();

// Splits SDP into lines, dealing with both CRLF and LF.
SDPUtils.splitLines = function(blob) {
  return blob.trim().split('\n').map(function(line) {
    return line.trim();
  });
};
// Splits SDP into sessionpart and mediasections. Ensures CRLF.
SDPUtils.splitSections = function(blob) {
  var parts = blob.split('\nm=');
  return parts.map(function(part, index) {
    return (index > 0 ? 'm=' + part : part).trim() + '\r\n';
  });
};

// returns the session description.
SDPUtils.getDescription = function(blob) {
  var sections = SDPUtils.splitSections(blob);
  return sections && sections[0];
};

// returns the individual media sections.
SDPUtils.getMediaSections = function(blob) {
  var sections = SDPUtils.splitSections(blob);
  sections.shift();
  return sections;
};

// Returns lines that start with a certain prefix.
SDPUtils.matchPrefix = function(blob, prefix) {
  return SDPUtils.splitLines(blob).filter(function(line) {
    return line.indexOf(prefix) === 0;
  });
};

// Parses an ICE candidate line. Sample input:
// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8
// rport 55996"
SDPUtils.parseCandidate = function(line) {
  var parts;
  // Parse both variants.
  if (line.indexOf('a=candidate:') === 0) {
    parts = line.substring(12).split(' ');
  } else {
    parts = line.substring(10).split(' ');
  }

  var candidate = {
    foundation: parts[0],
    component: parseInt(parts[1], 10),
    protocol: parts[2].toLowerCase(),
    priority: parseInt(parts[3], 10),
    ip: parts[4],
    address: parts[4], // address is an alias for ip.
    port: parseInt(parts[5], 10),
    // skip parts[6] == 'typ'
    type: parts[7]
  };

  for (var i = 8; i < parts.length; i += 2) {
    switch (parts[i]) {
      case 'raddr':
        candidate.relatedAddress = parts[i + 1];
        break;
      case 'rport':
        candidate.relatedPort = parseInt(parts[i + 1], 10);
        break;
      case 'tcptype':
        candidate.tcpType = parts[i + 1];
        break;
      case 'ufrag':
        candidate.ufrag = parts[i + 1]; // for backward compability.
        candidate.usernameFragment = parts[i + 1];
        break;
      default: // extension handling, in particular ufrag
        candidate[parts[i]] = parts[i + 1];
        break;
    }
  }
  return candidate;
};

// Translates a candidate object into SDP candidate attribute.
SDPUtils.writeCandidate = function(candidate) {
  var sdp = [];
  sdp.push(candidate.foundation);
  sdp.push(candidate.component);
  sdp.push(candidate.protocol.toUpperCase());
  sdp.push(candidate.priority);
  sdp.push(candidate.address || candidate.ip);
  sdp.push(candidate.port);

  var type = candidate.type;
  sdp.push('typ');
  sdp.push(type);
  if (type !== 'host' && candidate.relatedAddress &&
      candidate.relatedPort) {
    sdp.push('raddr');
    sdp.push(candidate.relatedAddress);
    sdp.push('rport');
    sdp.push(candidate.relatedPort);
  }
  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {
    sdp.push('tcptype');
    sdp.push(candidate.tcpType);
  }
  if (candidate.usernameFragment || candidate.ufrag) {
    sdp.push('ufrag');
    sdp.push(candidate.usernameFragment || candidate.ufrag);
  }
  return 'candidate:' + sdp.join(' ');
};

// Parses an ice-options line, returns an array of option tags.
// a=ice-options:foo bar
SDPUtils.parseIceOptions = function(line) {
  return line.substr(14).split(' ');
};

// Parses an rtpmap line, returns RTCRtpCoddecParameters. Sample input:
// a=rtpmap:111 opus/48000/2
SDPUtils.parseRtpMap = function(line) {
  var parts = line.substr(9).split(' ');
  var parsed = {
    payloadType: parseInt(parts.shift(), 10) // was: id
  };

  parts = parts[0].split('/');

  parsed.name = parts[0];
  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate
  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;
  // legacy alias, got renamed back to channels in ORTC.
  parsed.numChannels = parsed.channels;
  return parsed;
};

// Generate an a=rtpmap line from RTCRtpCodecCapability or
// RTCRtpCodecParameters.
SDPUtils.writeRtpMap = function(codec) {
  var pt = codec.payloadType;
  if (codec.preferredPayloadType !== undefined) {
    pt = codec.preferredPayloadType;
  }
  var channels = codec.channels || codec.numChannels || 1;
  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +
      (channels !== 1 ? '/' + channels : '') + '\r\n';
};

// Parses an a=extmap line (headerextension from RFC 5285). Sample input:
// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset
// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset
SDPUtils.parseExtmap = function(line) {
  var parts = line.substr(9).split(' ');
  return {
    id: parseInt(parts[0], 10),
    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',
    uri: parts[1]
  };
};

// Generates a=extmap line from RTCRtpHeaderExtensionParameters or
// RTCRtpHeaderExtension.
SDPUtils.writeExtmap = function(headerExtension) {
  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +
      (headerExtension.direction && headerExtension.direction !== 'sendrecv'
        ? '/' + headerExtension.direction
        : '') +
      ' ' + headerExtension.uri + '\r\n';
};

// Parses an ftmp line, returns dictionary. Sample input:
// a=fmtp:96 vbr=on;cng=on
// Also deals with vbr=on; cng=on
SDPUtils.parseFmtp = function(line) {
  var parsed = {};
  var kv;
  var parts = line.substr(line.indexOf(' ') + 1).split(';');
  for (var j = 0; j < parts.length; j++) {
    kv = parts[j].trim().split('=');
    parsed[kv[0].trim()] = kv[1];
  }
  return parsed;
};

// Generates an a=ftmp line from RTCRtpCodecCapability or RTCRtpCodecParameters.
SDPUtils.writeFmtp = function(codec) {
  var line = '';
  var pt = codec.payloadType;
  if (codec.preferredPayloadType !== undefined) {
    pt = codec.preferredPayloadType;
  }
  if (codec.parameters && Object.keys(codec.parameters).length) {
    var params = [];
    Object.keys(codec.parameters).forEach(function(param) {
      if (codec.parameters[param]) {
        params.push(param + '=' + codec.parameters[param]);
      } else {
        params.push(param);
      }
    });
    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\r\n';
  }
  return line;
};

// Parses an rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:
// a=rtcp-fb:98 nack rpsi
SDPUtils.parseRtcpFb = function(line) {
  var parts = line.substr(line.indexOf(' ') + 1).split(' ');
  return {
    type: parts.shift(),
    parameter: parts.join(' ')
  };
};
// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.
SDPUtils.writeRtcpFb = function(codec) {
  var lines = '';
  var pt = codec.payloadType;
  if (codec.preferredPayloadType !== undefined) {
    pt = codec.preferredPayloadType;
  }
  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {
    // FIXME: special handling for trr-int?
    codec.rtcpFeedback.forEach(function(fb) {
      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +
      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +
          '\r\n';
    });
  }
  return lines;
};

// Parses an RFC 5576 ssrc media attribute. Sample input:
// a=ssrc:3735928559 cname:something
SDPUtils.parseSsrcMedia = function(line) {
  var sp = line.indexOf(' ');
  var parts = {
    ssrc: parseInt(line.substr(7, sp - 7), 10)
  };
  var colon = line.indexOf(':', sp);
  if (colon > -1) {
    parts.attribute = line.substr(sp + 1, colon - sp - 1);
    parts.value = line.substr(colon + 1);
  } else {
    parts.attribute = line.substr(sp + 1);
  }
  return parts;
};

SDPUtils.parseSsrcGroup = function(line) {
  var parts = line.substr(13).split(' ');
  return {
    semantics: parts.shift(),
    ssrcs: parts.map(function(ssrc) {
      return parseInt(ssrc, 10);
    })
  };
};

// Extracts the MID (RFC 5888) from a media section.
// returns the MID or undefined if no mid line was found.
SDPUtils.getMid = function(mediaSection) {
  var mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];
  if (mid) {
    return mid.substr(6);
  }
};

SDPUtils.parseFingerprint = function(line) {
  var parts = line.substr(14).split(' ');
  return {
    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.
    value: parts[1]
  };
};

// Extracts DTLS parameters from SDP media section or sessionpart.
// FIXME: for consistency with other functions this should only
//   get the fingerprint line as input. See also getIceParameters.
SDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {
  var lines = SDPUtils.matchPrefix(mediaSection + sessionpart,
    'a=fingerprint:');
  // Note: a=setup line is ignored since we use the 'auto' role.
  // Note2: 'algorithm' is not case sensitive except in Edge.
  return {
    role: 'auto',
    fingerprints: lines.map(SDPUtils.parseFingerprint)
  };
};

// Serializes DTLS parameters to SDP.
SDPUtils.writeDtlsParameters = function(params, setupType) {
  var sdp = 'a=setup:' + setupType + '\r\n';
  params.fingerprints.forEach(function(fp) {
    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\r\n';
  });
  return sdp;
};

// Parses a=crypto lines into
//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members
SDPUtils.parseCryptoLine = function(line) {
  var parts = line.substr(9).split(' ');
  return {
    tag: parseInt(parts[0], 10),
    cryptoSuite: parts[1],
    keyParams: parts[2],
    sessionParams: parts.slice(3),
  };
};

SDPUtils.writeCryptoLine = function(parameters) {
  return 'a=crypto:' + parameters.tag + ' ' +
    parameters.cryptoSuite + ' ' +
    (typeof parameters.keyParams === 'object'
      ? SDPUtils.writeCryptoKeyParams(parameters.keyParams)
      : parameters.keyParams) +
    (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') +
    '\r\n';
};

// Parses the crypto key parameters into
//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*
SDPUtils.parseCryptoKeyParams = function(keyParams) {
  if (keyParams.indexOf('inline:') !== 0) {
    return null;
  }
  var parts = keyParams.substr(7).split('|');
  return {
    keyMethod: 'inline',
    keySalt: parts[0],
    lifeTime: parts[1],
    mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,
    mkiLength: parts[2] ? parts[2].split(':')[1] : undefined,
  };
};

SDPUtils.writeCryptoKeyParams = function(keyParams) {
  return keyParams.keyMethod + ':'
    + keyParams.keySalt +
    (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') +
    (keyParams.mkiValue && keyParams.mkiLength
      ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength
      : '');
};

// Extracts all SDES paramters.
SDPUtils.getCryptoParameters = function(mediaSection, sessionpart) {
  var lines = SDPUtils.matchPrefix(mediaSection + sessionpart,
    'a=crypto:');
  return lines.map(SDPUtils.parseCryptoLine);
};

// Parses ICE information from SDP media section or sessionpart.
// FIXME: for consistency with other functions this should only
//   get the ice-ufrag and ice-pwd lines as input.
SDPUtils.getIceParameters = function(mediaSection, sessionpart) {
  var ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart,
    'a=ice-ufrag:')[0];
  var pwd = SDPUtils.matchPrefix(mediaSection + sessionpart,
    'a=ice-pwd:')[0];
  if (!(ufrag && pwd)) {
    return null;
  }
  return {
    usernameFragment: ufrag.substr(12),
    password: pwd.substr(10),
  };
};

// Serializes ICE parameters to SDP.
SDPUtils.writeIceParameters = function(params) {
  return 'a=ice-ufrag:' + params.usernameFragment + '\r\n' +
      'a=ice-pwd:' + params.password + '\r\n';
};

// Parses the SDP media section and returns RTCRtpParameters.
SDPUtils.parseRtpParameters = function(mediaSection) {
  var description = {
    codecs: [],
    headerExtensions: [],
    fecMechanisms: [],
    rtcp: []
  };
  var lines = SDPUtils.splitLines(mediaSection);
  var mline = lines[0].split(' ');
  for (var i = 3; i < mline.length; i++) { // find all codecs from mline[3..]
    var pt = mline[i];
    var rtpmapline = SDPUtils.matchPrefix(
      mediaSection, 'a=rtpmap:' + pt + ' ')[0];
    if (rtpmapline) {
      var codec = SDPUtils.parseRtpMap(rtpmapline);
      var fmtps = SDPUtils.matchPrefix(
        mediaSection, 'a=fmtp:' + pt + ' ');
      // Only the first a=fmtp:<pt> is considered.
      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};
      codec.rtcpFeedback = SDPUtils.matchPrefix(
        mediaSection, 'a=rtcp-fb:' + pt + ' ')
        .map(SDPUtils.parseRtcpFb);
      description.codecs.push(codec);
      // parse FEC mechanisms from rtpmap lines.
      switch (codec.name.toUpperCase()) {
        case 'RED':
        case 'ULPFEC':
          description.fecMechanisms.push(codec.name.toUpperCase());
          break;
        default: // only RED and ULPFEC are recognized as FEC mechanisms.
          break;
      }
    }
  }
  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(function(line) {
    description.headerExtensions.push(SDPUtils.parseExtmap(line));
  });
  // FIXME: parse rtcp.
  return description;
};

// Generates parts of the SDP media section describing the capabilities /
// parameters.
SDPUtils.writeRtpDescription = function(kind, caps) {
  var sdp = '';

  // Build the mline.
  sdp += 'm=' + kind + ' ';
  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.
  sdp += ' UDP/TLS/RTP/SAVPF ';
  sdp += caps.codecs.map(function(codec) {
    if (codec.preferredPayloadType !== undefined) {
      return codec.preferredPayloadType;
    }
    return codec.payloadType;
  }).join(' ') + '\r\n';

  sdp += 'c=IN IP4 0.0.0.0\r\n';
  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\r\n';

  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.
  caps.codecs.forEach(function(codec) {
    sdp += SDPUtils.writeRtpMap(codec);
    sdp += SDPUtils.writeFmtp(codec);
    sdp += SDPUtils.writeRtcpFb(codec);
  });
  var maxptime = 0;
  caps.codecs.forEach(function(codec) {
    if (codec.maxptime > maxptime) {
      maxptime = codec.maxptime;
    }
  });
  if (maxptime > 0) {
    sdp += 'a=maxptime:' + maxptime + '\r\n';
  }
  sdp += 'a=rtcp-mux\r\n';

  if (caps.headerExtensions) {
    caps.headerExtensions.forEach(function(extension) {
      sdp += SDPUtils.writeExtmap(extension);
    });
  }
  // FIXME: write fecMechanisms.
  return sdp;
};

// Parses the SDP media section and returns an array of
// RTCRtpEncodingParameters.
SDPUtils.parseRtpEncodingParameters = function(mediaSection) {
  var encodingParameters = [];
  var description = SDPUtils.parseRtpParameters(mediaSection);
  var hasRed = description.fecMechanisms.indexOf('RED') !== -1;
  var hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;

  // filter a=ssrc:... cname:, ignore PlanB-msid
  var ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
    .map(function(line) {
      return SDPUtils.parseSsrcMedia(line);
    })
    .filter(function(parts) {
      return parts.attribute === 'cname';
    });
  var primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;
  var secondarySsrc;

  var flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')
    .map(function(line) {
      var parts = line.substr(17).split(' ');
      return parts.map(function(part) {
        return parseInt(part, 10);
      });
    });
  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {
    secondarySsrc = flows[0][1];
  }

  description.codecs.forEach(function(codec) {
    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {
      var encParam = {
        ssrc: primarySsrc,
        codecPayloadType: parseInt(codec.parameters.apt, 10)
      };
      if (primarySsrc && secondarySsrc) {
        encParam.rtx = {ssrc: secondarySsrc};
      }
      encodingParameters.push(encParam);
      if (hasRed) {
        encParam = JSON.parse(JSON.stringify(encParam));
        encParam.fec = {
          ssrc: primarySsrc,
          mechanism: hasUlpfec ? 'red+ulpfec' : 'red'
        };
        encodingParameters.push(encParam);
      }
    }
  });
  if (encodingParameters.length === 0 && primarySsrc) {
    encodingParameters.push({
      ssrc: primarySsrc
    });
  }

  // we support both b=AS and b=TIAS but interpret AS as TIAS.
  var bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');
  if (bandwidth.length) {
    if (bandwidth[0].indexOf('b=TIAS:') === 0) {
      bandwidth = parseInt(bandwidth[0].substr(7), 10);
    } else if (bandwidth[0].indexOf('b=AS:') === 0) {
      // use formula from JSEP to convert b=AS to TIAS value.
      bandwidth = parseInt(bandwidth[0].substr(5), 10) * 1000 * 0.95
          - (50 * 40 * 8);
    } else {
      bandwidth = undefined;
    }
    encodingParameters.forEach(function(params) {
      params.maxBitrate = bandwidth;
    });
  }
  return encodingParameters;
};

// parses http://draft.ortc.org/#rtcrtcpparameters*
SDPUtils.parseRtcpParameters = function(mediaSection) {
  var rtcpParameters = {};

  // Gets the first SSRC. Note tha with RTX there might be multiple
  // SSRCs.
  var remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
    .map(function(line) {
      return SDPUtils.parseSsrcMedia(line);
    })
    .filter(function(obj) {
      return obj.attribute === 'cname';
    })[0];
  if (remoteSsrc) {
    rtcpParameters.cname = remoteSsrc.value;
    rtcpParameters.ssrc = remoteSsrc.ssrc;
  }

  // Edge uses the compound attribute instead of reducedSize
  // compound is !reducedSize
  var rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');
  rtcpParameters.reducedSize = rsize.length > 0;
  rtcpParameters.compound = rsize.length === 0;

  // parses the rtcp-mux attrіbute.
  // Note that Edge does not support unmuxed RTCP.
  var mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');
  rtcpParameters.mux = mux.length > 0;

  return rtcpParameters;
};

// parses either a=msid: or a=ssrc:... msid lines and returns
// the id of the MediaStream and MediaStreamTrack.
SDPUtils.parseMsid = function(mediaSection) {
  var parts;
  var spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');
  if (spec.length === 1) {
    parts = spec[0].substr(7).split(' ');
    return {stream: parts[0], track: parts[1]};
  }
  var planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
    .map(function(line) {
      return SDPUtils.parseSsrcMedia(line);
    })
    .filter(function(msidParts) {
      return msidParts.attribute === 'msid';
    });
  if (planB.length > 0) {
    parts = planB[0].value.split(' ');
    return {stream: parts[0], track: parts[1]};
  }
};

// SCTP
// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back
// to draft-ietf-mmusic-sctp-sdp-05
SDPUtils.parseSctpDescription = function(mediaSection) {
  var mline = SDPUtils.parseMLine(mediaSection);
  var maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');
  var maxMessageSize;
  if (maxSizeLine.length > 0) {
    maxMessageSize = parseInt(maxSizeLine[0].substr(19), 10);
  }
  if (isNaN(maxMessageSize)) {
    maxMessageSize = 65536;
  }
  var sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');
  if (sctpPort.length > 0) {
    return {
      port: parseInt(sctpPort[0].substr(12), 10),
      protocol: mline.fmt,
      maxMessageSize: maxMessageSize
    };
  }
  var sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');
  if (sctpMapLines.length > 0) {
    var parts = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:')[0]
      .substr(10)
      .split(' ');
    return {
      port: parseInt(parts[0], 10),
      protocol: parts[1],
      maxMessageSize: maxMessageSize
    };
  }
};

// SCTP
// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers
// support by now receiving in this format, unless we originally parsed
// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line
// protocol of DTLS/SCTP -- without UDP/ or TCP/)
SDPUtils.writeSctpDescription = function(media, sctp) {
  var output = [];
  if (media.protocol !== 'DTLS/SCTP') {
    output = [
      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\r\n',
      'c=IN IP4 0.0.0.0\r\n',
      'a=sctp-port:' + sctp.port + '\r\n'
    ];
  } else {
    output = [
      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\r\n',
      'c=IN IP4 0.0.0.0\r\n',
      'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\r\n'
    ];
  }
  if (sctp.maxMessageSize !== undefined) {
    output.push('a=max-message-size:' + sctp.maxMessageSize + '\r\n');
  }
  return output.join('');
};

// Generate a session ID for SDP.
// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1
// recommends using a cryptographically random +ve 64-bit value
// but right now this should be acceptable and within the right range
SDPUtils.generateSessionId = function() {
  return Math.random().toString().substr(2, 21);
};

// Write boilder plate for start of SDP
// sessId argument is optional - if not supplied it will
// be generated randomly
// sessVersion is optional and defaults to 2
// sessUser is optional and defaults to 'thisisadapterortc'
SDPUtils.writeSessionBoilerplate = function(sessId, sessVer, sessUser) {
  var sessionId;
  var version = sessVer !== undefined ? sessVer : 2;
  if (sessId) {
    sessionId = sessId;
  } else {
    sessionId = SDPUtils.generateSessionId();
  }
  var user = sessUser || 'thisisadapterortc';
  // FIXME: sess-id should be an NTP timestamp.
  return 'v=0\r\n' +
      'o=' + user + ' ' + sessionId + ' ' + version +
        ' IN IP4 127.0.0.1\r\n' +
      's=-\r\n' +
      't=0 0\r\n';
};

SDPUtils.writeMediaSection = function(transceiver, caps, type, stream) {
  var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps);

  // Map ICE parameters (ufrag, pwd) to SDP.
  sdp += SDPUtils.writeIceParameters(
    transceiver.iceGatherer.getLocalParameters());

  // Map DTLS parameters to SDP.
  sdp += SDPUtils.writeDtlsParameters(
    transceiver.dtlsTransport.getLocalParameters(),
    type === 'offer' ? 'actpass' : 'active');

  sdp += 'a=mid:' + transceiver.mid + '\r\n';

  if (transceiver.direction) {
    sdp += 'a=' + transceiver.direction + '\r\n';
  } else if (transceiver.rtpSender && transceiver.rtpReceiver) {
    sdp += 'a=sendrecv\r\n';
  } else if (transceiver.rtpSender) {
    sdp += 'a=sendonly\r\n';
  } else if (transceiver.rtpReceiver) {
    sdp += 'a=recvonly\r\n';
  } else {
    sdp += 'a=inactive\r\n';
  }

  if (transceiver.rtpSender) {
    // spec.
    var msid = 'msid:' + stream.id + ' ' +
        transceiver.rtpSender.track.id + '\r\n';
    sdp += 'a=' + msid;

    // for Chrome.
    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +
        ' ' + msid;
    if (transceiver.sendEncodingParameters[0].rtx) {
      sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +
          ' ' + msid;
      sdp += 'a=ssrc-group:FID ' +
          transceiver.sendEncodingParameters[0].ssrc + ' ' +
          transceiver.sendEncodingParameters[0].rtx.ssrc +
          '\r\n';
    }
  }
  // FIXME: this should be written by writeRtpDescription.
  sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +
      ' cname:' + SDPUtils.localCName + '\r\n';
  if (transceiver.rtpSender && transceiver.sendEncodingParameters[0].rtx) {
    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +
        ' cname:' + SDPUtils.localCName + '\r\n';
  }
  return sdp;
};

// Gets the direction from the mediaSection or the sessionpart.
SDPUtils.getDirection = function(mediaSection, sessionpart) {
  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.
  var lines = SDPUtils.splitLines(mediaSection);
  for (var i = 0; i < lines.length; i++) {
    switch (lines[i]) {
      case 'a=sendrecv':
      case 'a=sendonly':
      case 'a=recvonly':
      case 'a=inactive':
        return lines[i].substr(2);
      default:
        // FIXME: What should happen here?
    }
  }
  if (sessionpart) {
    return SDPUtils.getDirection(sessionpart);
  }
  return 'sendrecv';
};

SDPUtils.getKind = function(mediaSection) {
  var lines = SDPUtils.splitLines(mediaSection);
  var mline = lines[0].split(' ');
  return mline[0].substr(2);
};

SDPUtils.isRejected = function(mediaSection) {
  return mediaSection.split(' ', 2)[1] === '0';
};

SDPUtils.parseMLine = function(mediaSection) {
  var lines = SDPUtils.splitLines(mediaSection);
  var parts = lines[0].substr(2).split(' ');
  return {
    kind: parts[0],
    port: parseInt(parts[1], 10),
    protocol: parts[2],
    fmt: parts.slice(3).join(' ')
  };
};

SDPUtils.parseOLine = function(mediaSection) {
  var line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];
  var parts = line.substr(2).split(' ');
  return {
    username: parts[0],
    sessionId: parts[1],
    sessionVersion: parseInt(parts[2], 10),
    netType: parts[3],
    addressType: parts[4],
    address: parts[5]
  };
};

// a very naive interpretation of a valid SDP.
SDPUtils.isValidSDP = function(blob) {
  if (typeof blob !== 'string' || blob.length === 0) {
    return false;
  }
  var lines = SDPUtils.splitLines(blob);
  for (var i = 0; i < lines.length; i++) {
    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {
      return false;
    }
    // TODO: check the modifier a bit more.
  }
  return true;
};

// Expose public methods.
if (typeof module === 'object') {
  module.exports = SDPUtils;
}

},{}],132:[function(require,module,exports){
/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */
var byteToHex = [];
for (var i = 0; i < 256; ++i) {
  byteToHex[i] = (i + 0x100).toString(16).substr(1);
}

function bytesToUuid(buf, offset) {
  var i = offset || 0;
  var bth = byteToHex;
  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4
  return ([
    bth[buf[i++]], bth[buf[i++]],
    bth[buf[i++]], bth[buf[i++]], '-',
    bth[buf[i++]], bth[buf[i++]], '-',
    bth[buf[i++]], bth[buf[i++]], '-',
    bth[buf[i++]], bth[buf[i++]], '-',
    bth[buf[i++]], bth[buf[i++]],
    bth[buf[i++]], bth[buf[i++]],
    bth[buf[i++]], bth[buf[i++]]
  ]).join('');
}

module.exports = bytesToUuid;

},{}],133:[function(require,module,exports){
// Unique ID creation requires a high quality random # generator.  In the
// browser this is a little complicated due to unknown quality of Math.random()
// and inconsistent support for the `crypto` API.  We do the best we can via
// feature-detection

// getRandomValues needs to be invoked in a context where "this" is a Crypto
// implementation. Also, find the complete implementation of crypto on IE11.
var getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||
                      (typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));

if (getRandomValues) {
  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto
  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef

  module.exports = function whatwgRNG() {
    getRandomValues(rnds8);
    return rnds8;
  };
} else {
  // Math.random()-based (RNG)
  //
  // If all else fails, use Math.random().  It's fast, but is of unspecified
  // quality.
  var rnds = new Array(16);

  module.exports = function mathRNG() {
    for (var i = 0, r; i < 16; i++) {
      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
    }

    return rnds;
  };
}

},{}],134:[function(require,module,exports){
var rng = require('./lib/rng');
var bytesToUuid = require('./lib/bytesToUuid');

function v4(options, buf, offset) {
  var i = buf && offset || 0;

  if (typeof(options) == 'string') {
    buf = options === 'binary' ? new Array(16) : null;
    options = null;
  }
  options = options || {};

  var rnds = options.random || (options.rng || rng)();

  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
  rnds[6] = (rnds[6] & 0x0f) | 0x40;
  rnds[8] = (rnds[8] & 0x3f) | 0x80;

  // Copy bytes to buffer, if provided
  if (buf) {
    for (var ii = 0; ii < 16; ++ii) {
      buf[i + ii] = rnds[ii];
    }
  }

  return buf || bytesToUuid(rnds);
}

module.exports = v4;

},{"./lib/bytesToUuid":132,"./lib/rng":133}],135:[function(require,module,exports){
(function (global){(function (){
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */

'use strict';

var adapterFactory = require('./adapter_factory.js');
module.exports = adapterFactory({window: global.window});

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./adapter_factory.js":136}],136:[function(require,module,exports){
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */

'use strict';

var utils = require('./utils');
// Shimming starts here.
module.exports = function(dependencies, opts) {
  var window = dependencies && dependencies.window;

  var options = {
    shimChrome: true,
    shimFirefox: true,
    shimEdge: true,
    shimSafari: true,
  };

  for (var key in opts) {
    if (hasOwnProperty.call(opts, key)) {
      options[key] = opts[key];
    }
  }

  // Utils.
  var logging = utils.log;
  var browserDetails = utils.detectBrowser(window);

  // Uncomment the line below if you want logging to occur, including logging
  // for the switch statement below. Can also be turned on in the browser via
  // adapter.disableLog(false), but then logging from the switch statement below
  // will not appear.
  // require('./utils').disableLog(false);

  // Browser shims.
  var chromeShim = require('./chrome/chrome_shim') || null;
  var edgeShim = require('./edge/edge_shim') || null;
  var firefoxShim = require('./firefox/firefox_shim') || null;
  var safariShim = require('./safari/safari_shim') || null;
  var commonShim = require('./common_shim') || null;

  // Export to the adapter global object visible in the browser.
  var adapter = {
    browserDetails: browserDetails,
    commonShim: commonShim,
    extractVersion: utils.extractVersion,
    disableLog: utils.disableLog,
    disableWarnings: utils.disableWarnings
  };

  // Shim browser if found.
  switch (browserDetails.browser) {
    case 'chrome':
      if (!chromeShim || !chromeShim.shimPeerConnection ||
          !options.shimChrome) {
        logging('Chrome shim is not included in this adapter release.');
        return adapter;
      }
      logging('adapter.js shimming chrome.');
      // Export to the adapter global object visible in the browser.
      adapter.browserShim = chromeShim;
      commonShim.shimCreateObjectURL(window);

      chromeShim.shimGetUserMedia(window);
      chromeShim.shimMediaStream(window);
      chromeShim.shimSourceObject(window);
      chromeShim.shimPeerConnection(window);
      chromeShim.shimOnTrack(window);
      chromeShim.shimAddTrackRemoveTrack(window);
      chromeShim.shimGetSendersWithDtmf(window);
      chromeShim.shimSenderReceiverGetStats(window);
      chromeShim.fixNegotiationNeeded(window);

      commonShim.shimRTCIceCandidate(window);
      commonShim.shimMaxMessageSize(window);
      commonShim.shimSendThrowTypeError(window);
      break;
    case 'firefox':
      if (!firefoxShim || !firefoxShim.shimPeerConnection ||
          !options.shimFirefox) {
        logging('Firefox shim is not included in this adapter release.');
        return adapter;
      }
      logging('adapter.js shimming firefox.');
      // Export to the adapter global object visible in the browser.
      adapter.browserShim = firefoxShim;
      commonShim.shimCreateObjectURL(window);

      firefoxShim.shimGetUserMedia(window);
      firefoxShim.shimSourceObject(window);
      firefoxShim.shimPeerConnection(window);
      firefoxShim.shimOnTrack(window);
      firefoxShim.shimRemoveStream(window);
      firefoxShim.shimSenderGetStats(window);
      firefoxShim.shimReceiverGetStats(window);
      firefoxShim.shimRTCDataChannel(window);

      commonShim.shimRTCIceCandidate(window);
      commonShim.shimMaxMessageSize(window);
      commonShim.shimSendThrowTypeError(window);
      break;
    case 'edge':
      if (!edgeShim || !edgeShim.shimPeerConnection || !options.shimEdge) {
        logging('MS edge shim is not included in this adapter release.');
        return adapter;
      }
      logging('adapter.js shimming edge.');
      // Export to the adapter global object visible in the browser.
      adapter.browserShim = edgeShim;
      commonShim.shimCreateObjectURL(window);

      edgeShim.shimGetUserMedia(window);
      edgeShim.shimPeerConnection(window);
      edgeShim.shimReplaceTrack(window);
      edgeShim.shimGetDisplayMedia(window);

      // the edge shim implements the full RTCIceCandidate object.

      commonShim.shimMaxMessageSize(window);
      commonShim.shimSendThrowTypeError(window);
      break;
    case 'safari':
      if (!safariShim || !options.shimSafari) {
        logging('Safari shim is not included in this adapter release.');
        return adapter;
      }
      logging('adapter.js shimming safari.');
      // Export to the adapter global object visible in the browser.
      adapter.browserShim = safariShim;
      commonShim.shimCreateObjectURL(window);

      safariShim.shimRTCIceServerUrls(window);
      safariShim.shimCreateOfferLegacy(window);
      safariShim.shimCallbacksAPI(window);
      safariShim.shimLocalStreamsAPI(window);
      safariShim.shimRemoteStreamsAPI(window);
      safariShim.shimTrackEventTransceiver(window);
      safariShim.shimGetUserMedia(window);

      commonShim.shimRTCIceCandidate(window);
      commonShim.shimMaxMessageSize(window);
      commonShim.shimSendThrowTypeError(window);
      break;
    default:
      logging('Unsupported browser!');
      break;
  }

  return adapter;
};

},{"./chrome/chrome_shim":137,"./common_shim":139,"./edge/edge_shim":140,"./firefox/firefox_shim":143,"./safari/safari_shim":145,"./utils":146}],137:[function(require,module,exports){

/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */
'use strict';
var utils = require('../utils.js');
var logging = utils.log;

/* iterates the stats graph recursively. */
function walkStats(stats, base, resultSet) {
  if (!base || resultSet.has(base.id)) {
    return;
  }
  resultSet.set(base.id, base);
  Object.keys(base).forEach(function(name) {
    if (name.endsWith('Id')) {
      walkStats(stats, stats.get(base[name]), resultSet);
    } else if (name.endsWith('Ids')) {
      base[name].forEach(function(id) {
        walkStats(stats, stats.get(id), resultSet);
      });
    }
  });
}

/* filter getStats for a sender/receiver track. */
function filterStats(result, track, outbound) {
  var streamStatsType = outbound ? 'outbound-rtp' : 'inbound-rtp';
  var filteredResult = new Map();
  if (track === null) {
    return filteredResult;
  }
  var trackStats = [];
  result.forEach(function(value) {
    if (value.type === 'track' &&
        value.trackIdentifier === track.id) {
      trackStats.push(value);
    }
  });
  trackStats.forEach(function(trackStat) {
    result.forEach(function(stats) {
      if (stats.type === streamStatsType && stats.trackId === trackStat.id) {
        walkStats(result, stats, filteredResult);
      }
    });
  });
  return filteredResult;
}

module.exports = {
  shimGetUserMedia: require('./getusermedia'),
  shimMediaStream: function(window) {
    window.MediaStream = window.MediaStream || window.webkitMediaStream;
  },

  shimOnTrack: function(window) {
    if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in
        window.RTCPeerConnection.prototype)) {
      Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {
        get: function() {
          return this._ontrack;
        },
        set: function(f) {
          if (this._ontrack) {
            this.removeEventListener('track', this._ontrack);
          }
          this.addEventListener('track', this._ontrack = f);
        },
        enumerable: true,
        configurable: true
      });
      var origSetRemoteDescription =
          window.RTCPeerConnection.prototype.setRemoteDescription;
      window.RTCPeerConnection.prototype.setRemoteDescription = function() {
        var pc = this;
        if (!pc._ontrackpoly) {
          pc._ontrackpoly = function(e) {
            // onaddstream does not fire when a track is added to an existing
            // stream. But stream.onaddtrack is implemented so we use that.
            e.stream.addEventListener('addtrack', function(te) {
              var receiver;
              if (window.RTCPeerConnection.prototype.getReceivers) {
                receiver = pc.getReceivers().find(function(r) {
                  return r.track && r.track.id === te.track.id;
                });
              } else {
                receiver = {track: te.track};
              }

              var event = new Event('track');
              event.track = te.track;
              event.receiver = receiver;
              event.transceiver = {receiver: receiver};
              event.streams = [e.stream];
              pc.dispatchEvent(event);
            });
            e.stream.getTracks().forEach(function(track) {
              var receiver;
              if (window.RTCPeerConnection.prototype.getReceivers) {
                receiver = pc.getReceivers().find(function(r) {
                  return r.track && r.track.id === track.id;
                });
              } else {
                receiver = {track: track};
              }
              var event = new Event('track');
              event.track = track;
              event.receiver = receiver;
              event.transceiver = {receiver: receiver};
              event.streams = [e.stream];
              pc.dispatchEvent(event);
            });
          };
          pc.addEventListener('addstream', pc._ontrackpoly);
        }
        return origSetRemoteDescription.apply(pc, arguments);
      };
    } else {
      // even if RTCRtpTransceiver is in window, it is only used and
      // emitted in unified-plan. Unfortunately this means we need
      // to unconditionally wrap the event.
      utils.wrapPeerConnectionEvent(window, 'track', function(e) {
        if (!e.transceiver) {
          Object.defineProperty(e, 'transceiver',
            {value: {receiver: e.receiver}});
        }
        return e;
      });
    }
  },

  shimGetSendersWithDtmf: function(window) {
    // Overrides addTrack/removeTrack, depends on shimAddTrackRemoveTrack.
    if (typeof window === 'object' && window.RTCPeerConnection &&
        !('getSenders' in window.RTCPeerConnection.prototype) &&
        'createDTMFSender' in window.RTCPeerConnection.prototype) {
      var shimSenderWithDtmf = function(pc, track) {
        return {
          track: track,
          get dtmf() {
            if (this._dtmf === undefined) {
              if (track.kind === 'audio') {
                this._dtmf = pc.createDTMFSender(track);
              } else {
                this._dtmf = null;
              }
            }
            return this._dtmf;
          },
          _pc: pc
        };
      };

      // augment addTrack when getSenders is not available.
      if (!window.RTCPeerConnection.prototype.getSenders) {
        window.RTCPeerConnection.prototype.getSenders = function() {
          this._senders = this._senders || [];
          return this._senders.slice(); // return a copy of the internal state.
        };
        var origAddTrack = window.RTCPeerConnection.prototype.addTrack;
        window.RTCPeerConnection.prototype.addTrack = function(track, stream) {
          var pc = this;
          var sender = origAddTrack.apply(pc, arguments);
          if (!sender) {
            sender = shimSenderWithDtmf(pc, track);
            pc._senders.push(sender);
          }
          return sender;
        };

        var origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;
        window.RTCPeerConnection.prototype.removeTrack = function(sender) {
          var pc = this;
          origRemoveTrack.apply(pc, arguments);
          var idx = pc._senders.indexOf(sender);
          if (idx !== -1) {
            pc._senders.splice(idx, 1);
          }
        };
      }
      var origAddStream = window.RTCPeerConnection.prototype.addStream;
      window.RTCPeerConnection.prototype.addStream = function(stream) {
        var pc = this;
        pc._senders = pc._senders || [];
        origAddStream.apply(pc, [stream]);
        stream.getTracks().forEach(function(track) {
          pc._senders.push(shimSenderWithDtmf(pc, track));
        });
      };

      var origRemoveStream = window.RTCPeerConnection.prototype.removeStream;
      window.RTCPeerConnection.prototype.removeStream = function(stream) {
        var pc = this;
        pc._senders = pc._senders || [];
        origRemoveStream.apply(pc, [stream]);

        stream.getTracks().forEach(function(track) {
          var sender = pc._senders.find(function(s) {
            return s.track === track;
          });
          if (sender) {
            pc._senders.splice(pc._senders.indexOf(sender), 1); // remove sender
          }
        });
      };
    } else if (typeof window === 'object' && window.RTCPeerConnection &&
               'getSenders' in window.RTCPeerConnection.prototype &&
               'createDTMFSender' in window.RTCPeerConnection.prototype &&
               window.RTCRtpSender &&
               !('dtmf' in window.RTCRtpSender.prototype)) {
      var origGetSenders = window.RTCPeerConnection.prototype.getSenders;
      window.RTCPeerConnection.prototype.getSenders = function() {
        var pc = this;
        var senders = origGetSenders.apply(pc, []);
        senders.forEach(function(sender) {
          sender._pc = pc;
        });
        return senders;
      };

      Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {
        get: function() {
          if (this._dtmf === undefined) {
            if (this.track.kind === 'audio') {
              this._dtmf = this._pc.createDTMFSender(this.track);
            } else {
              this._dtmf = null;
            }
          }
          return this._dtmf;
        }
      });
    }
  },

  shimSenderReceiverGetStats: function(window) {
    if (!(typeof window === 'object' && window.RTCPeerConnection &&
        window.RTCRtpSender && window.RTCRtpReceiver)) {
      return;
    }

    // shim sender stats.
    if (!('getStats' in window.RTCRtpSender.prototype)) {
      var origGetSenders = window.RTCPeerConnection.prototype.getSenders;
      if (origGetSenders) {
        window.RTCPeerConnection.prototype.getSenders = function() {
          var pc = this;
          var senders = origGetSenders.apply(pc, []);
          senders.forEach(function(sender) {
            sender._pc = pc;
          });
          return senders;
        };
      }

      var origAddTrack = window.RTCPeerConnection.prototype.addTrack;
      if (origAddTrack) {
        window.RTCPeerConnection.prototype.addTrack = function() {
          var sender = origAddTrack.apply(this, arguments);
          sender._pc = this;
          return sender;
        };
      }
      window.RTCRtpSender.prototype.getStats = function() {
        var sender = this;
        return this._pc.getStats().then(function(result) {
          /* Note: this will include stats of all senders that
           *   send a track with the same id as sender.track as
           *   it is not possible to identify the RTCRtpSender.
           */
          return filterStats(result, sender.track, true);
        });
      };
    }

    // shim receiver stats.
    if (!('getStats' in window.RTCRtpReceiver.prototype)) {
      var origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;
      if (origGetReceivers) {
        window.RTCPeerConnection.prototype.getReceivers = function() {
          var pc = this;
          var receivers = origGetReceivers.apply(pc, []);
          receivers.forEach(function(receiver) {
            receiver._pc = pc;
          });
          return receivers;
        };
      }
      utils.wrapPeerConnectionEvent(window, 'track', function(e) {
        e.receiver._pc = e.srcElement;
        return e;
      });
      window.RTCRtpReceiver.prototype.getStats = function() {
        var receiver = this;
        return this._pc.getStats().then(function(result) {
          return filterStats(result, receiver.track, false);
        });
      };
    }

    if (!('getStats' in window.RTCRtpSender.prototype &&
        'getStats' in window.RTCRtpReceiver.prototype)) {
      return;
    }

    // shim RTCPeerConnection.getStats(track).
    var origGetStats = window.RTCPeerConnection.prototype.getStats;
    window.RTCPeerConnection.prototype.getStats = function() {
      var pc = this;
      if (arguments.length > 0 &&
          arguments[0] instanceof window.MediaStreamTrack) {
        var track = arguments[0];
        var sender;
        var receiver;
        var err;
        pc.getSenders().forEach(function(s) {
          if (s.track === track) {
            if (sender) {
              err = true;
            } else {
              sender = s;
            }
          }
        });
        pc.getReceivers().forEach(function(r) {
          if (r.track === track) {
            if (receiver) {
              err = true;
            } else {
              receiver = r;
            }
          }
          return r.track === track;
        });
        if (err || (sender && receiver)) {
          return Promise.reject(new DOMException(
            'There are more than one sender or receiver for the track.',
            'InvalidAccessError'));
        } else if (sender) {
          return sender.getStats();
        } else if (receiver) {
          return receiver.getStats();
        }
        return Promise.reject(new DOMException(
          'There is no sender or receiver for the track.',
          'InvalidAccessError'));
      }
      return origGetStats.apply(pc, arguments);
    };
  },

  shimSourceObject: function(window) {
    var URL = window && window.URL;

    if (typeof window === 'object') {
      if (window.HTMLMediaElement &&
        !('srcObject' in window.HTMLMediaElement.prototype)) {
        // Shim the srcObject property, once, when HTMLMediaElement is found.
        Object.defineProperty(window.HTMLMediaElement.prototype, 'srcObject', {
          get: function() {
            return this._srcObject;
          },
          set: function(stream) {
            var self = this;
            // Use _srcObject as a private property for this shim
            this._srcObject = stream;
            if (this.src) {
              URL.revokeObjectURL(this.src);
            }

            if (!stream) {
              this.src = '';
              return undefined;
            }
            this.src = URL.createObjectURL(stream);
            // We need to recreate the blob url when a track is added or
            // removed. Doing it manually since we want to avoid a recursion.
            stream.addEventListener('addtrack', function() {
              if (self.src) {
                URL.revokeObjectURL(self.src);
              }
              self.src = URL.createObjectURL(stream);
            });
            stream.addEventListener('removetrack', function() {
              if (self.src) {
                URL.revokeObjectURL(self.src);
              }
              self.src = URL.createObjectURL(stream);
            });
          }
        });
      }
    }
  },

  shimAddTrackRemoveTrackWithNative: function(window) {
    // shim addTrack/removeTrack with native variants in order to make
    // the interactions with legacy getLocalStreams behave as in other browsers.
    // Keeps a mapping stream.id => [stream, rtpsenders...]
    window.RTCPeerConnection.prototype.getLocalStreams = function() {
      var pc = this;
      this._shimmedLocalStreams = this._shimmedLocalStreams || {};
      return Object.keys(this._shimmedLocalStreams).map(function(streamId) {
        return pc._shimmedLocalStreams[streamId][0];
      });
    };

    var origAddTrack = window.RTCPeerConnection.prototype.addTrack;
    window.RTCPeerConnection.prototype.addTrack = function(track, stream) {
      if (!stream) {
        return origAddTrack.apply(this, arguments);
      }
      this._shimmedLocalStreams = this._shimmedLocalStreams || {};

      var sender = origAddTrack.apply(this, arguments);
      if (!this._shimmedLocalStreams[stream.id]) {
        this._shimmedLocalStreams[stream.id] = [stream, sender];
      } else if (this._shimmedLocalStreams[stream.id].indexOf(sender) === -1) {
        this._shimmedLocalStreams[stream.id].push(sender);
      }
      return sender;
    };

    var origAddStream = window.RTCPeerConnection.prototype.addStream;
    window.RTCPeerConnection.prototype.addStream = function(stream) {
      var pc = this;
      this._shimmedLocalStreams = this._shimmedLocalStreams || {};

      stream.getTracks().forEach(function(track) {
        var alreadyExists = pc.getSenders().find(function(s) {
          return s.track === track;
        });
        if (alreadyExists) {
          throw new DOMException('Track already exists.',
              'InvalidAccessError');
        }
      });
      var existingSenders = pc.getSenders();
      origAddStream.apply(this, arguments);
      var newSenders = pc.getSenders().filter(function(newSender) {
        return existingSenders.indexOf(newSender) === -1;
      });
      this._shimmedLocalStreams[stream.id] = [stream].concat(newSenders);
    };

    var origRemoveStream = window.RTCPeerConnection.prototype.removeStream;
    window.RTCPeerConnection.prototype.removeStream = function(stream) {
      this._shimmedLocalStreams = this._shimmedLocalStreams || {};
      delete this._shimmedLocalStreams[stream.id];
      return origRemoveStream.apply(this, arguments);
    };

    var origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;
    window.RTCPeerConnection.prototype.removeTrack = function(sender) {
      var pc = this;
      this._shimmedLocalStreams = this._shimmedLocalStreams || {};
      if (sender) {
        Object.keys(this._shimmedLocalStreams).forEach(function(streamId) {
          var idx = pc._shimmedLocalStreams[streamId].indexOf(sender);
          if (idx !== -1) {
            pc._shimmedLocalStreams[streamId].splice(idx, 1);
          }
          if (pc._shimmedLocalStreams[streamId].length === 1) {
            delete pc._shimmedLocalStreams[streamId];
          }
        });
      }
      return origRemoveTrack.apply(this, arguments);
    };
  },

  shimAddTrackRemoveTrack: function(window) {
    if (!window.RTCPeerConnection) {
      return;
    }
    var browserDetails = utils.detectBrowser(window);
    // shim addTrack and removeTrack.
    if (window.RTCPeerConnection.prototype.addTrack &&
        browserDetails.version >= 65) {
      return this.shimAddTrackRemoveTrackWithNative(window);
    }

    // also shim pc.getLocalStreams when addTrack is shimmed
    // to return the original streams.
    var origGetLocalStreams = window.RTCPeerConnection.prototype
        .getLocalStreams;
    window.RTCPeerConnection.prototype.getLocalStreams = function() {
      var pc = this;
      var nativeStreams = origGetLocalStreams.apply(this);
      pc._reverseStreams = pc._reverseStreams || {};
      return nativeStreams.map(function(stream) {
        return pc._reverseStreams[stream.id];
      });
    };

    var origAddStream = window.RTCPeerConnection.prototype.addStream;
    window.RTCPeerConnection.prototype.addStream = function(stream) {
      var pc = this;
      pc._streams = pc._streams || {};
      pc._reverseStreams = pc._reverseStreams || {};

      stream.getTracks().forEach(function(track) {
        var alreadyExists = pc.getSenders().find(function(s) {
          return s.track === track;
        });
        if (alreadyExists) {
          throw new DOMException('Track already exists.',
              'InvalidAccessError');
        }
      });
      // Add identity mapping for consistency with addTrack.
      // Unless this is being used with a stream from addTrack.
      if (!pc._reverseStreams[stream.id]) {
        var newStream = new window.MediaStream(stream.getTracks());
        pc._streams[stream.id] = newStream;
        pc._reverseStreams[newStream.id] = stream;
        stream = newStream;
      }
      origAddStream.apply(pc, [stream]);
    };

    var origRemoveStream = window.RTCPeerConnection.prototype.removeStream;
    window.RTCPeerConnection.prototype.removeStream = function(stream) {
      var pc = this;
      pc._streams = pc._streams || {};
      pc._reverseStreams = pc._reverseStreams || {};

      origRemoveStream.apply(pc, [(pc._streams[stream.id] || stream)]);
      delete pc._reverseStreams[(pc._streams[stream.id] ?
          pc._streams[stream.id].id : stream.id)];
      delete pc._streams[stream.id];
    };

    window.RTCPeerConnection.prototype.addTrack = function(track, stream) {
      var pc = this;
      if (pc.signalingState === 'closed') {
        throw new DOMException(
          'The RTCPeerConnection\'s signalingState is \'closed\'.',
          'InvalidStateError');
      }
      var streams = [].slice.call(arguments, 1);
      if (streams.length !== 1 ||
          !streams[0].getTracks().find(function(t) {
            return t === track;
          })) {
        // this is not fully correct but all we can manage without
        // [[associated MediaStreams]] internal slot.
        throw new DOMException(
          'The adapter.js addTrack polyfill only supports a single ' +
          ' stream which is associated with the specified track.',
          'NotSupportedError');
      }

      var alreadyExists = pc.getSenders().find(function(s) {
        return s.track === track;
      });
      if (alreadyExists) {
        throw new DOMException('Track already exists.',
            'InvalidAccessError');
      }

      pc._streams = pc._streams || {};
      pc._reverseStreams = pc._reverseStreams || {};
      var oldStream = pc._streams[stream.id];
      if (oldStream) {
        // this is using odd Chrome behaviour, use with caution:
        // https://bugs.chromium.org/p/webrtc/issues/detail?id=7815
        // Note: we rely on the high-level addTrack/dtmf shim to
        // create the sender with a dtmf sender.
        oldStream.addTrack(track);

        // Trigger ONN async.
        Promise.resolve().then(function() {
          pc.dispatchEvent(new Event('negotiationneeded'));
        });
      } else {
        var newStream = new window.MediaStream([track]);
        pc._streams[stream.id] = newStream;
        pc._reverseStreams[newStream.id] = stream;
        pc.addStream(newStream);
      }
      return pc.getSenders().find(function(s) {
        return s.track === track;
      });
    };

    // replace the internal stream id with the external one and
    // vice versa.
    function replaceInternalStreamId(pc, description) {
      var sdp = description.sdp;
      Object.keys(pc._reverseStreams || []).forEach(function(internalId) {
        var externalStream = pc._reverseStreams[internalId];
        var internalStream = pc._streams[externalStream.id];
        sdp = sdp.replace(new RegExp(internalStream.id, 'g'),
            externalStream.id);
      });
      return new RTCSessionDescription({
        type: description.type,
        sdp: sdp
      });
    }
    function replaceExternalStreamId(pc, description) {
      var sdp = description.sdp;
      Object.keys(pc._reverseStreams || []).forEach(function(internalId) {
        var externalStream = pc._reverseStreams[internalId];
        var internalStream = pc._streams[externalStream.id];
        sdp = sdp.replace(new RegExp(externalStream.id, 'g'),
            internalStream.id);
      });
      return new RTCSessionDescription({
        type: description.type,
        sdp: sdp
      });
    }
    ['createOffer', 'createAnswer'].forEach(function(method) {
      var nativeMethod = window.RTCPeerConnection.prototype[method];
      window.RTCPeerConnection.prototype[method] = function() {
        var pc = this;
        var args = arguments;
        var isLegacyCall = arguments.length &&
            typeof arguments[0] === 'function';
        if (isLegacyCall) {
          return nativeMethod.apply(pc, [
            function(description) {
              var desc = replaceInternalStreamId(pc, description);
              args[0].apply(null, [desc]);
            },
            function(err) {
              if (args[1]) {
                args[1].apply(null, err);
              }
            }, arguments[2]
          ]);
        }
        return nativeMethod.apply(pc, arguments)
        .then(function(description) {
          return replaceInternalStreamId(pc, description);
        });
      };
    });

    var origSetLocalDescription =
        window.RTCPeerConnection.prototype.setLocalDescription;
    window.RTCPeerConnection.prototype.setLocalDescription = function() {
      var pc = this;
      if (!arguments.length || !arguments[0].type) {
        return origSetLocalDescription.apply(pc, arguments);
      }
      arguments[0] = replaceExternalStreamId(pc, arguments[0]);
      return origSetLocalDescription.apply(pc, arguments);
    };

    // TODO: mangle getStats: https://w3c.github.io/webrtc-stats/#dom-rtcmediastreamstats-streamidentifier

    var origLocalDescription = Object.getOwnPropertyDescriptor(
        window.RTCPeerConnection.prototype, 'localDescription');
    Object.defineProperty(window.RTCPeerConnection.prototype,
        'localDescription', {
          get: function() {
            var pc = this;
            var description = origLocalDescription.get.apply(this);
            if (description.type === '') {
              return description;
            }
            return replaceInternalStreamId(pc, description);
          }
        });

    window.RTCPeerConnection.prototype.removeTrack = function(sender) {
      var pc = this;
      if (pc.signalingState === 'closed') {
        throw new DOMException(
          'The RTCPeerConnection\'s signalingState is \'closed\'.',
          'InvalidStateError');
      }
      // We can not yet check for sender instanceof RTCRtpSender
      // since we shim RTPSender. So we check if sender._pc is set.
      if (!sender._pc) {
        throw new DOMException('Argument 1 of RTCPeerConnection.removeTrack ' +
            'does not implement interface RTCRtpSender.', 'TypeError');
      }
      var isLocal = sender._pc === pc;
      if (!isLocal) {
        throw new DOMException('Sender was not created by this connection.',
            'InvalidAccessError');
      }

      // Search for the native stream the senders track belongs to.
      pc._streams = pc._streams || {};
      var stream;
      Object.keys(pc._streams).forEach(function(streamid) {
        var hasTrack = pc._streams[streamid].getTracks().find(function(track) {
          return sender.track === track;
        });
        if (hasTrack) {
          stream = pc._streams[streamid];
        }
      });

      if (stream) {
        if (stream.getTracks().length === 1) {
          // if this is the last track of the stream, remove the stream. This
          // takes care of any shimmed _senders.
          pc.removeStream(pc._reverseStreams[stream.id]);
        } else {
          // relying on the same odd chrome behaviour as above.
          stream.removeTrack(sender.track);
        }
        pc.dispatchEvent(new Event('negotiationneeded'));
      }
    };
  },

  shimPeerConnection: function(window) {
    var browserDetails = utils.detectBrowser(window);

    // The RTCPeerConnection object.
    if (!window.RTCPeerConnection && window.webkitRTCPeerConnection) {
      window.RTCPeerConnection = function(pcConfig, pcConstraints) {
        // Translate iceTransportPolicy to iceTransports,
        // see https://code.google.com/p/webrtc/issues/detail?id=4869
        // this was fixed in M56 along with unprefixing RTCPeerConnection.
        logging('PeerConnection');
        if (pcConfig && pcConfig.iceTransportPolicy) {
          pcConfig.iceTransports = pcConfig.iceTransportPolicy;
        }

        return new window.webkitRTCPeerConnection(pcConfig, pcConstraints);
      };
      window.RTCPeerConnection.prototype =
          window.webkitRTCPeerConnection.prototype;
      // wrap static methods. Currently just generateCertificate.
      if (window.webkitRTCPeerConnection.generateCertificate) {
        Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {
          get: function() {
            return window.webkitRTCPeerConnection.generateCertificate;
          }
        });
      }
    }
    if (!window.RTCPeerConnection) {
      return;
    }

    var origGetStats = window.RTCPeerConnection.prototype.getStats;
    window.RTCPeerConnection.prototype.getStats = function(selector,
        successCallback, errorCallback) {
      var pc = this;
      var args = arguments;

      // If selector is a function then we are in the old style stats so just
      // pass back the original getStats format to avoid breaking old users.
      if (arguments.length > 0 && typeof selector === 'function') {
        return origGetStats.apply(this, arguments);
      }

      // When spec-style getStats is supported, return those when called with
      // either no arguments or the selector argument is null.
      if (origGetStats.length === 0 && (arguments.length === 0 ||
          typeof arguments[0] !== 'function')) {
        return origGetStats.apply(this, []);
      }

      var fixChromeStats_ = function(response) {
        var standardReport = {};
        var reports = response.result();
        reports.forEach(function(report) {
          var standardStats = {
            id: report.id,
            timestamp: report.timestamp,
            type: {
              localcandidate: 'local-candidate',
              remotecandidate: 'remote-candidate'
            }[report.type] || report.type
          };
          report.names().forEach(function(name) {
            standardStats[name] = report.stat(name);
          });
          standardReport[standardStats.id] = standardStats;
        });

        return standardReport;
      };

      // shim getStats with maplike support
      var makeMapStats = function(stats) {
        return new Map(Object.keys(stats).map(function(key) {
          return [key, stats[key]];
        }));
      };

      if (arguments.length >= 2) {
        var successCallbackWrapper_ = function(response) {
          args[1](makeMapStats(fixChromeStats_(response)));
        };

        return origGetStats.apply(this, [successCallbackWrapper_,
          arguments[0]]);
      }

      // promise-support
      return new Promise(function(resolve, reject) {
        origGetStats.apply(pc, [
          function(response) {
            resolve(makeMapStats(fixChromeStats_(response)));
          }, reject]);
      }).then(successCallback, errorCallback);
    };

    // add promise support -- natively available in Chrome 51
    if (browserDetails.version < 51) {
      ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']
          .forEach(function(method) {
            var nativeMethod = window.RTCPeerConnection.prototype[method];
            window.RTCPeerConnection.prototype[method] = function() {
              var args = arguments;
              var pc = this;
              var promise = new Promise(function(resolve, reject) {
                nativeMethod.apply(pc, [args[0], resolve, reject]);
              });
              if (args.length < 2) {
                return promise;
              }
              return promise.then(function() {
                args[1].apply(null, []);
              },
              function(err) {
                if (args.length >= 3) {
                  args[2].apply(null, [err]);
                }
              });
            };
          });
    }

    // promise support for createOffer and createAnswer. Available (without
    // bugs) since M52: crbug/619289
    if (browserDetails.version < 52) {
      ['createOffer', 'createAnswer'].forEach(function(method) {
        var nativeMethod = window.RTCPeerConnection.prototype[method];
        window.RTCPeerConnection.prototype[method] = function() {
          var pc = this;
          if (arguments.length < 1 || (arguments.length === 1 &&
              typeof arguments[0] === 'object')) {
            var opts = arguments.length === 1 ? arguments[0] : undefined;
            return new Promise(function(resolve, reject) {
              nativeMethod.apply(pc, [resolve, reject, opts]);
            });
          }
          return nativeMethod.apply(this, arguments);
        };
      });
    }

    // shim implicit creation of RTCSessionDescription/RTCIceCandidate
    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']
        .forEach(function(method) {
          var nativeMethod = window.RTCPeerConnection.prototype[method];
          window.RTCPeerConnection.prototype[method] = function() {
            arguments[0] = new ((method === 'addIceCandidate') ?
                window.RTCIceCandidate :
                window.RTCSessionDescription)(arguments[0]);
            return nativeMethod.apply(this, arguments);
          };
        });

    // support for addIceCandidate(null or undefined)
    var nativeAddIceCandidate =
        window.RTCPeerConnection.prototype.addIceCandidate;
    window.RTCPeerConnection.prototype.addIceCandidate = function() {
      if (!arguments[0]) {
        if (arguments[1]) {
          arguments[1].apply(null);
        }
        return Promise.resolve();
      }
      return nativeAddIceCandidate.apply(this, arguments);
    };
  },

  fixNegotiationNeeded: function(window) {
    utils.wrapPeerConnectionEvent(window, 'negotiationneeded', function(e) {
      var pc = e.target;
      if (pc.signalingState !== 'stable') {
        return;
      }
      return e;
    });
  },

  shimGetDisplayMedia: function(window, getSourceId) {
    if (!window.navigator || !window.navigator.mediaDevices ||
        'getDisplayMedia' in window.navigator.mediaDevices) {
      return;
    }
    // getSourceId is a function that returns a promise resolving with
    // the sourceId of the screen/window/tab to be shared.
    if (typeof getSourceId !== 'function') {
      console.error('shimGetDisplayMedia: getSourceId argument is not ' +
          'a function');
      return;
    }
    window.navigator.mediaDevices.getDisplayMedia = function(constraints) {
      return getSourceId(constraints)
        .then(function(sourceId) {
          var widthSpecified = constraints.video && constraints.video.width;
          var heightSpecified = constraints.video && constraints.video.height;
          var frameRateSpecified = constraints.video &&
            constraints.video.frameRate;
          constraints.video = {
            mandatory: {
              chromeMediaSource: 'desktop',
              chromeMediaSourceId: sourceId,
              maxFrameRate: frameRateSpecified || 3
            }
          };
          if (widthSpecified) {
            constraints.video.mandatory.maxWidth = widthSpecified;
          }
          if (heightSpecified) {
            constraints.video.mandatory.maxHeight = heightSpecified;
          }
          return window.navigator.mediaDevices.getUserMedia(constraints);
        });
    };
    window.navigator.getDisplayMedia = function(constraints) {
      utils.deprecated('navigator.getDisplayMedia',
          'navigator.mediaDevices.getDisplayMedia');
      return window.navigator.mediaDevices.getDisplayMedia(constraints);
    };
  }
};

},{"../utils.js":146,"./getusermedia":138}],138:[function(require,module,exports){
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */
'use strict';
var utils = require('../utils.js');
var logging = utils.log;

// Expose public methods.
module.exports = function(window) {
  var browserDetails = utils.detectBrowser(window);
  var navigator = window && window.navigator;

  var constraintsToChrome_ = function(c) {
    if (typeof c !== 'object' || c.mandatory || c.optional) {
      return c;
    }
    var cc = {};
    Object.keys(c).forEach(function(key) {
      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {
        return;
      }
      var r = (typeof c[key] === 'object') ? c[key] : {ideal: c[key]};
      if (r.exact !== undefined && typeof r.exact === 'number') {
        r.min = r.max = r.exact;
      }
      var oldname_ = function(prefix, name) {
        if (prefix) {
          return prefix + name.charAt(0).toUpperCase() + name.slice(1);
        }
        return (name === 'deviceId') ? 'sourceId' : name;
      };
      if (r.ideal !== undefined) {
        cc.optional = cc.optional || [];
        var oc = {};
        if (typeof r.ideal === 'number') {
          oc[oldname_('min', key)] = r.ideal;
          cc.optional.push(oc);
          oc = {};
          oc[oldname_('max', key)] = r.ideal;
          cc.optional.push(oc);
        } else {
          oc[oldname_('', key)] = r.ideal;
          cc.optional.push(oc);
        }
      }
      if (r.exact !== undefined && typeof r.exact !== 'number') {
        cc.mandatory = cc.mandatory || {};
        cc.mandatory[oldname_('', key)] = r.exact;
      } else {
        ['min', 'max'].forEach(function(mix) {
          if (r[mix] !== undefined) {
            cc.mandatory = cc.mandatory || {};
            cc.mandatory[oldname_(mix, key)] = r[mix];
          }
        });
      }
    });
    if (c.advanced) {
      cc.optional = (cc.optional || []).concat(c.advanced);
    }
    return cc;
  };

  var shimConstraints_ = function(constraints, func) {
    if (browserDetails.version >= 61) {
      return func(constraints);
    }
    constraints = JSON.parse(JSON.stringify(constraints));
    if (constraints && typeof constraints.audio === 'object') {
      var remap = function(obj, a, b) {
        if (a in obj && !(b in obj)) {
          obj[b] = obj[a];
          delete obj[a];
        }
      };
      constraints = JSON.parse(JSON.stringify(constraints));
      remap(constraints.audio, 'autoGainControl', 'googAutoGainControl');
      remap(constraints.audio, 'noiseSuppression', 'googNoiseSuppression');
      constraints.audio = constraintsToChrome_(constraints.audio);
    }
    if (constraints && typeof constraints.video === 'object') {
      // Shim facingMode for mobile & surface pro.
      var face = constraints.video.facingMode;
      face = face && ((typeof face === 'object') ? face : {ideal: face});
      var getSupportedFacingModeLies = browserDetails.version < 66;

      if ((face && (face.exact === 'user' || face.exact === 'environment' ||
                    face.ideal === 'user' || face.ideal === 'environment')) &&
          !(navigator.mediaDevices.getSupportedConstraints &&
            navigator.mediaDevices.getSupportedConstraints().facingMode &&
            !getSupportedFacingModeLies)) {
        delete constraints.video.facingMode;
        var matches;
        if (face.exact === 'environment' || face.ideal === 'environment') {
          matches = ['back', 'rear'];
        } else if (face.exact === 'user' || face.ideal === 'user') {
          matches = ['front'];
        }
        if (matches) {
          // Look for matches in label, or use last cam for back (typical).
          return navigator.mediaDevices.enumerateDevices()
          .then(function(devices) {
            devices = devices.filter(function(d) {
              return d.kind === 'videoinput';
            });
            var dev = devices.find(function(d) {
              return matches.some(function(match) {
                return d.label.toLowerCase().indexOf(match) !== -1;
              });
            });
            if (!dev && devices.length && matches.indexOf('back') !== -1) {
              dev = devices[devices.length - 1]; // more likely the back cam
            }
            if (dev) {
              constraints.video.deviceId = face.exact ? {exact: dev.deviceId} :
                                                        {ideal: dev.deviceId};
            }
            constraints.video = constraintsToChrome_(constraints.video);
            logging('chrome: ' + JSON.stringify(constraints));
            return func(constraints);
          });
        }
      }
      constraints.video = constraintsToChrome_(constraints.video);
    }
    logging('chrome: ' + JSON.stringify(constraints));
    return func(constraints);
  };

  var shimError_ = function(e) {
    if (browserDetails.version >= 64) {
      return e;
    }
    return {
      name: {
        PermissionDeniedError: 'NotAllowedError',
        PermissionDismissedError: 'NotAllowedError',
        InvalidStateError: 'NotAllowedError',
        DevicesNotFoundError: 'NotFoundError',
        ConstraintNotSatisfiedError: 'OverconstrainedError',
        TrackStartError: 'NotReadableError',
        MediaDeviceFailedDueToShutdown: 'NotAllowedError',
        MediaDeviceKillSwitchOn: 'NotAllowedError',
        TabCaptureError: 'AbortError',
        ScreenCaptureError: 'AbortError',
        DeviceCaptureError: 'AbortError'
      }[e.name] || e.name,
      message: e.message,
      constraint: e.constraint || e.constraintName,
      toString: function() {
        return this.name + (this.message && ': ') + this.message;
      }
    };
  };

  var getUserMedia_ = function(constraints, onSuccess, onError) {
    shimConstraints_(constraints, function(c) {
      navigator.webkitGetUserMedia(c, onSuccess, function(e) {
        if (onError) {
          onError(shimError_(e));
        }
      });
    });
  };

  navigator.getUserMedia = getUserMedia_;

  // Returns the result of getUserMedia as a Promise.
  var getUserMediaPromise_ = function(constraints) {
    return new Promise(function(resolve, reject) {
      navigator.getUserMedia(constraints, resolve, reject);
    });
  };

  if (!navigator.mediaDevices) {
    navigator.mediaDevices = {
      getUserMedia: getUserMediaPromise_,
      enumerateDevices: function() {
        return new Promise(function(resolve) {
          var kinds = {audio: 'audioinput', video: 'videoinput'};
          return window.MediaStreamTrack.getSources(function(devices) {
            resolve(devices.map(function(device) {
              return {label: device.label,
                kind: kinds[device.kind],
                deviceId: device.id,
                groupId: ''};
            }));
          });
        });
      },
      getSupportedConstraints: function() {
        return {
          deviceId: true, echoCancellation: true, facingMode: true,
          frameRate: true, height: true, width: true
        };
      }
    };
  }

  // A shim for getUserMedia method on the mediaDevices object.
  // TODO(KaptenJansson) remove once implemented in Chrome stable.
  if (!navigator.mediaDevices.getUserMedia) {
    navigator.mediaDevices.getUserMedia = function(constraints) {
      return getUserMediaPromise_(constraints);
    };
  } else {
    // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia
    // function which returns a Promise, it does not accept spec-style
    // constraints.
    var origGetUserMedia = navigator.mediaDevices.getUserMedia.
        bind(navigator.mediaDevices);
    navigator.mediaDevices.getUserMedia = function(cs) {
      return shimConstraints_(cs, function(c) {
        return origGetUserMedia(c).then(function(stream) {
          if (c.audio && !stream.getAudioTracks().length ||
              c.video && !stream.getVideoTracks().length) {
            stream.getTracks().forEach(function(track) {
              track.stop();
            });
            throw new DOMException('', 'NotFoundError');
          }
          return stream;
        }, function(e) {
          return Promise.reject(shimError_(e));
        });
      });
    };
  }

  // Dummy devicechange event methods.
  // TODO(KaptenJansson) remove once implemented in Chrome stable.
  if (typeof navigator.mediaDevices.addEventListener === 'undefined') {
    navigator.mediaDevices.addEventListener = function() {
      logging('Dummy mediaDevices.addEventListener called.');
    };
  }
  if (typeof navigator.mediaDevices.removeEventListener === 'undefined') {
    navigator.mediaDevices.removeEventListener = function() {
      logging('Dummy mediaDevices.removeEventListener called.');
    };
  }
};

},{"../utils.js":146}],139:[function(require,module,exports){
/*
 *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */
'use strict';

var SDPUtils = require('sdp');
var utils = require('./utils');

module.exports = {
  shimRTCIceCandidate: function(window) {
    // foundation is arbitrarily chosen as an indicator for full support for
    // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface
    if (!window.RTCIceCandidate || (window.RTCIceCandidate && 'foundation' in
        window.RTCIceCandidate.prototype)) {
      return;
    }

    var NativeRTCIceCandidate = window.RTCIceCandidate;
    window.RTCIceCandidate = function(args) {
      // Remove the a= which shouldn't be part of the candidate string.
      if (typeof args === 'object' && args.candidate &&
          args.candidate.indexOf('a=') === 0) {
        args = JSON.parse(JSON.stringify(args));
        args.candidate = args.candidate.substr(2);
      }

      if (args.candidate && args.candidate.length) {
        // Augment the native candidate with the parsed fields.
        var nativeCandidate = new NativeRTCIceCandidate(args);
        var parsedCandidate = SDPUtils.parseCandidate(args.candidate);
        var augmentedCandidate = Object.assign(nativeCandidate,
            parsedCandidate);

        // Add a serializer that does not serialize the extra attributes.
        augmentedCandidate.toJSON = function() {
          return {
            candidate: augmentedCandidate.candidate,
            sdpMid: augmentedCandidate.sdpMid,
            sdpMLineIndex: augmentedCandidate.sdpMLineIndex,
            usernameFragment: augmentedCandidate.usernameFragment,
          };
        };
        return augmentedCandidate;
      }
      return new NativeRTCIceCandidate(args);
    };
    window.RTCIceCandidate.prototype = NativeRTCIceCandidate.prototype;

    // Hook up the augmented candidate in onicecandidate and
    // addEventListener('icecandidate', ...)
    utils.wrapPeerConnectionEvent(window, 'icecandidate', function(e) {
      if (e.candidate) {
        Object.defineProperty(e, 'candidate', {
          value: new window.RTCIceCandidate(e.candidate),
          writable: 'false'
        });
      }
      return e;
    });
  },

  // shimCreateObjectURL must be called before shimSourceObject to avoid loop.

  shimCreateObjectURL: function(window) {
    var URL = window && window.URL;

    if (!(typeof window === 'object' && window.HTMLMediaElement &&
          'srcObject' in window.HTMLMediaElement.prototype &&
        URL.createObjectURL && URL.revokeObjectURL)) {
      // Only shim CreateObjectURL using srcObject if srcObject exists.
      return undefined;
    }

    var nativeCreateObjectURL = URL.createObjectURL.bind(URL);
    var nativeRevokeObjectURL = URL.revokeObjectURL.bind(URL);
    var streams = new Map(), newId = 0;

    URL.createObjectURL = function(stream) {
      if ('getTracks' in stream) {
        var url = 'polyblob:' + (++newId);
        streams.set(url, stream);
        utils.deprecated('URL.createObjectURL(stream)',
            'elem.srcObject = stream');
        return url;
      }
      return nativeCreateObjectURL(stream);
    };
    URL.revokeObjectURL = function(url) {
      nativeRevokeObjectURL(url);
      streams.delete(url);
    };

    var dsc = Object.getOwnPropertyDescriptor(window.HTMLMediaElement.prototype,
                                              'src');
    Object.defineProperty(window.HTMLMediaElement.prototype, 'src', {
      get: function() {
        return dsc.get.apply(this);
      },
      set: function(url) {
        this.srcObject = streams.get(url) || null;
        return dsc.set.apply(this, [url]);
      }
    });

    var nativeSetAttribute = window.HTMLMediaElement.prototype.setAttribute;
    window.HTMLMediaElement.prototype.setAttribute = function() {
      if (arguments.length === 2 &&
          ('' + arguments[0]).toLowerCase() === 'src') {
        this.srcObject = streams.get(arguments[1]) || null;
      }
      return nativeSetAttribute.apply(this, arguments);
    };
  },

  shimMaxMessageSize: function(window) {
    if (window.RTCSctpTransport || !window.RTCPeerConnection) {
      return;
    }
    var browserDetails = utils.detectBrowser(window);

    if (!('sctp' in window.RTCPeerConnection.prototype)) {
      Object.defineProperty(window.RTCPeerConnection.prototype, 'sctp', {
        get: function() {
          return typeof this._sctp === 'undefined' ? null : this._sctp;
        }
      });
    }

    var sctpInDescription = function(description) {
      var sections = SDPUtils.splitSections(description.sdp);
      sections.shift();
      return sections.some(function(mediaSection) {
        var mLine = SDPUtils.parseMLine(mediaSection);
        return mLine && mLine.kind === 'application'
            && mLine.protocol.indexOf('SCTP') !== -1;
      });
    };

    var getRemoteFirefoxVersion = function(description) {
      // TODO: Is there a better solution for detecting Firefox?
      var match = description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\d+)/);
      if (match === null || match.length < 2) {
        return -1;
      }
      var version = parseInt(match[1], 10);
      // Test for NaN (yes, this is ugly)
      return version !== version ? -1 : version;
    };

    var getCanSendMaxMessageSize = function(remoteIsFirefox) {
      // Every implementation we know can send at least 64 KiB.
      // Note: Although Chrome is technically able to send up to 256 KiB, the
      //       data does not reach the other peer reliably.
      //       See: https://bugs.chromium.org/p/webrtc/issues/detail?id=8419
      var canSendMaxMessageSize = 65536;
      if (browserDetails.browser === 'firefox') {
        if (browserDetails.version < 57) {
          if (remoteIsFirefox === -1) {
            // FF < 57 will send in 16 KiB chunks using the deprecated PPID
            // fragmentation.
            canSendMaxMessageSize = 16384;
          } else {
            // However, other FF (and RAWRTC) can reassemble PPID-fragmented
            // messages. Thus, supporting ~2 GiB when sending.
            canSendMaxMessageSize = 2147483637;
          }
        } else if (browserDetails.version < 60) {
          // Currently, all FF >= 57 will reset the remote maximum message size
          // to the default value when a data channel is created at a later
          // stage. :(
          // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831
          canSendMaxMessageSize =
            browserDetails.version === 57 ? 65535 : 65536;
        } else {
          // FF >= 60 supports sending ~2 GiB
          canSendMaxMessageSize = 2147483637;
        }
      }
      return canSendMaxMessageSize;
    };

    var getMaxMessageSize = function(description, remoteIsFirefox) {
      // Note: 65536 bytes is the default value from the SDP spec. Also,
      //       every implementation we know supports receiving 65536 bytes.
      var maxMessageSize = 65536;

      // FF 57 has a slightly incorrect default remote max message size, so
      // we need to adjust it here to avoid a failure when sending.
      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1425697
      if (browserDetails.browser === 'firefox'
           && browserDetails.version === 57) {
        maxMessageSize = 65535;
      }

      var match = SDPUtils.matchPrefix(description.sdp, 'a=max-message-size:');
      if (match.length > 0) {
        maxMessageSize = parseInt(match[0].substr(19), 10);
      } else if (browserDetails.browser === 'firefox' &&
                  remoteIsFirefox !== -1) {
        // If the maximum message size is not present in the remote SDP and
        // both local and remote are Firefox, the remote peer can receive
        // ~2 GiB.
        maxMessageSize = 2147483637;
      }
      return maxMessageSize;
    };

    var origSetRemoteDescription =
        window.RTCPeerConnection.prototype.setRemoteDescription;
    window.RTCPeerConnection.prototype.setRemoteDescription = function() {
      var pc = this;
      pc._sctp = null;

      if (sctpInDescription(arguments[0])) {
        // Check if the remote is FF.
        var isFirefox = getRemoteFirefoxVersion(arguments[0]);

        // Get the maximum message size the local peer is capable of sending
        var canSendMMS = getCanSendMaxMessageSize(isFirefox);

        // Get the maximum message size of the remote peer.
        var remoteMMS = getMaxMessageSize(arguments[0], isFirefox);

        // Determine final maximum message size
        var maxMessageSize;
        if (canSendMMS === 0 && remoteMMS === 0) {
          maxMessageSize = Number.POSITIVE_INFINITY;
        } else if (canSendMMS === 0 || remoteMMS === 0) {
          maxMessageSize = Math.max(canSendMMS, remoteMMS);
        } else {
          maxMessageSize = Math.min(canSendMMS, remoteMMS);
        }

        // Create a dummy RTCSctpTransport object and the 'maxMessageSize'
        // attribute.
        var sctp = {};
        Object.defineProperty(sctp, 'maxMessageSize', {
          get: function() {
            return maxMessageSize;
          }
        });
        pc._sctp = sctp;
      }

      return origSetRemoteDescription.apply(pc, arguments);
    };
  },

  shimSendThrowTypeError: function(window) {
    if (!(window.RTCPeerConnection &&
        'createDataChannel' in window.RTCPeerConnection.prototype)) {
      return;
    }

    // Note: Although Firefox >= 57 has a native implementation, the maximum
    //       message size can be reset for all data channels at a later stage.
    //       See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831

    function wrapDcSend(dc, pc) {
      var origDataChannelSend = dc.send;
      dc.send = function() {
        var data = arguments[0];
        var length = data.length || data.size || data.byteLength;
        if (dc.readyState === 'open' &&
            pc.sctp && length > pc.sctp.maxMessageSize) {
          throw new TypeError('Message too large (can send a maximum of ' +
            pc.sctp.maxMessageSize + ' bytes)');
        }
        return origDataChannelSend.apply(dc, arguments);
      };
    }
    var origCreateDataChannel =
      window.RTCPeerConnection.prototype.createDataChannel;
    window.RTCPeerConnection.prototype.createDataChannel = function() {
      var pc = this;
      var dataChannel = origCreateDataChannel.apply(pc, arguments);
      wrapDcSend(dataChannel, pc);
      return dataChannel;
    };
    utils.wrapPeerConnectionEvent(window, 'datachannel', function(e) {
      wrapDcSend(e.channel, e.target);
      return e;
    });
  }
};

},{"./utils":146,"sdp":131}],140:[function(require,module,exports){
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */
'use strict';

var utils = require('../utils');
var filterIceServers = require('./filtericeservers');
var shimRTCPeerConnection = require('rtcpeerconnection-shim');

module.exports = {
  shimGetUserMedia: require('./getusermedia'),
  shimPeerConnection: function(window) {
    var browserDetails = utils.detectBrowser(window);

    if (window.RTCIceGatherer) {
      if (!window.RTCIceCandidate) {
        window.RTCIceCandidate = function(args) {
          return args;
        };
      }
      if (!window.RTCSessionDescription) {
        window.RTCSessionDescription = function(args) {
          return args;
        };
      }
      // this adds an additional event listener to MediaStrackTrack that signals
      // when a tracks enabled property was changed. Workaround for a bug in
      // addStream, see below. No longer required in 15025+
      if (browserDetails.version < 15025) {
        var origMSTEnabled = Object.getOwnPropertyDescriptor(
            window.MediaStreamTrack.prototype, 'enabled');
        Object.defineProperty(window.MediaStreamTrack.prototype, 'enabled', {
          set: function(value) {
            origMSTEnabled.set.call(this, value);
            var ev = new Event('enabled');
            ev.enabled = value;
            this.dispatchEvent(ev);
          }
        });
      }
    }

    // ORTC defines the DTMF sender a bit different.
    // https://github.com/w3c/ortc/issues/714
    if (window.RTCRtpSender && !('dtmf' in window.RTCRtpSender.prototype)) {
      Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {
        get: function() {
          if (this._dtmf === undefined) {
            if (this.track.kind === 'audio') {
              this._dtmf = new window.RTCDtmfSender(this);
            } else if (this.track.kind === 'video') {
              this._dtmf = null;
            }
          }
          return this._dtmf;
        }
      });
    }
    // Edge currently only implements the RTCDtmfSender, not the
    // RTCDTMFSender alias. See http://draft.ortc.org/#rtcdtmfsender2*
    if (window.RTCDtmfSender && !window.RTCDTMFSender) {
      window.RTCDTMFSender = window.RTCDtmfSender;
    }

    var RTCPeerConnectionShim = shimRTCPeerConnection(window,
        browserDetails.version);
    window.RTCPeerConnection = function(config) {
      if (config && config.iceServers) {
        config.iceServers = filterIceServers(config.iceServers);
      }
      return new RTCPeerConnectionShim(config);
    };
    window.RTCPeerConnection.prototype = RTCPeerConnectionShim.prototype;
  },
  shimReplaceTrack: function(window) {
    // ORTC has replaceTrack -- https://github.com/w3c/ortc/issues/614
    if (window.RTCRtpSender &&
        !('replaceTrack' in window.RTCRtpSender.prototype)) {
      window.RTCRtpSender.prototype.replaceTrack =
          window.RTCRtpSender.prototype.setTrack;
    }
  },
  shimGetDisplayMedia: function(window, preferredMediaSource) {
    if (!('getDisplayMedia' in window.navigator) ||
        !window.navigator.mediaDevices ||
        'getDisplayMedia' in window.navigator.mediaDevices) {
      return;
    }
    var origGetDisplayMedia = window.navigator.getDisplayMedia;
    window.navigator.mediaDevices.getDisplayMedia = function(constraints) {
      return origGetDisplayMedia.call(window.navigator, constraints);
    };
    window.navigator.getDisplayMedia = function(constraints) {
      utils.deprecated('navigator.getDisplayMedia',
          'navigator.mediaDevices.getDisplayMedia');
      return origGetDisplayMedia.call(window.navigator, constraints);
    };
  }
};

},{"../utils":146,"./filtericeservers":141,"./getusermedia":142,"rtcpeerconnection-shim":130}],141:[function(require,module,exports){
/*
 *  Copyright (c) 2018 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */
'use strict';

var utils = require('../utils');
// Edge does not like
// 1) stun: filtered after 14393 unless ?transport=udp is present
// 2) turn: that does not have all of turn:host:port?transport=udp
// 3) turn: with ipv6 addresses
// 4) turn: occurring muliple times
module.exports = function(iceServers, edgeVersion) {
  var hasTurn = false;
  iceServers = JSON.parse(JSON.stringify(iceServers));
  return iceServers.filter(function(server) {
    if (server && (server.urls || server.url)) {
      var urls = server.urls || server.url;
      if (server.url && !server.urls) {
        utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');
      }
      var isString = typeof urls === 'string';
      if (isString) {
        urls = [urls];
      }
      urls = urls.filter(function(url) {
        var validTurn = url.indexOf('turn:') === 0 &&
            url.indexOf('transport=udp') !== -1 &&
            url.indexOf('turn:[') === -1 &&
            !hasTurn;

        if (validTurn) {
          hasTurn = true;
          return true;
        }
        return url.indexOf('stun:') === 0 && edgeVersion >= 14393 &&
            url.indexOf('?transport=udp') === -1;
      });

      delete server.url;
      server.urls = isString ? urls[0] : urls;
      return !!urls.length;
    }
  });
};

},{"../utils":146}],142:[function(require,module,exports){
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */
'use strict';

// Expose public methods.
module.exports = function(window) {
  var navigator = window && window.navigator;

  var shimError_ = function(e) {
    return {
      name: {PermissionDeniedError: 'NotAllowedError'}[e.name] || e.name,
      message: e.message,
      constraint: e.constraint,
      toString: function() {
        return this.name;
      }
    };
  };

  // getUserMedia error shim.
  var origGetUserMedia = navigator.mediaDevices.getUserMedia.
      bind(navigator.mediaDevices);
  navigator.mediaDevices.getUserMedia = function(c) {
    return origGetUserMedia(c).catch(function(e) {
      return Promise.reject(shimError_(e));
    });
  };
};

},{}],143:[function(require,module,exports){
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */
'use strict';

var utils = require('../utils');

module.exports = {
  shimGetUserMedia: require('./getusermedia'),
  shimOnTrack: function(window) {
    if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in
        window.RTCPeerConnection.prototype)) {
      Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {
        get: function() {
          return this._ontrack;
        },
        set: function(f) {
          if (this._ontrack) {
            this.removeEventListener('track', this._ontrack);
            this.removeEventListener('addstream', this._ontrackpoly);
          }
          this.addEventListener('track', this._ontrack = f);
          this.addEventListener('addstream', this._ontrackpoly = function(e) {
            e.stream.getTracks().forEach(function(track) {
              var event = new Event('track');
              event.track = track;
              event.receiver = {track: track};
              event.transceiver = {receiver: event.receiver};
              event.streams = [e.stream];
              this.dispatchEvent(event);
            }.bind(this));
          }.bind(this));
        },
        enumerable: true,
        configurable: true
      });
    }
    if (typeof window === 'object' && window.RTCTrackEvent &&
        ('receiver' in window.RTCTrackEvent.prototype) &&
        !('transceiver' in window.RTCTrackEvent.prototype)) {
      Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {
        get: function() {
          return {receiver: this.receiver};
        }
      });
    }
  },

  shimSourceObject: function(window) {
    // Firefox has supported mozSrcObject since FF22, unprefixed in 42.
    if (typeof window === 'object') {
      if (window.HTMLMediaElement &&
        !('srcObject' in window.HTMLMediaElement.prototype)) {
        // Shim the srcObject property, once, when HTMLMediaElement is found.
        Object.defineProperty(window.HTMLMediaElement.prototype, 'srcObject', {
          get: function() {
            return this.mozSrcObject;
          },
          set: function(stream) {
            this.mozSrcObject = stream;
          }
        });
      }
    }
  },

  shimPeerConnection: function(window) {
    var browserDetails = utils.detectBrowser(window);

    if (typeof window !== 'object' || !(window.RTCPeerConnection ||
        window.mozRTCPeerConnection)) {
      return; // probably media.peerconnection.enabled=false in about:config
    }
    // The RTCPeerConnection object.
    if (!window.RTCPeerConnection) {
      window.RTCPeerConnection = function(pcConfig, pcConstraints) {
        if (browserDetails.version < 38) {
          // .urls is not supported in FF < 38.
          // create RTCIceServers with a single url.
          if (pcConfig && pcConfig.iceServers) {
            var newIceServers = [];
            for (var i = 0; i < pcConfig.iceServers.length; i++) {
              var server = pcConfig.iceServers[i];
              if (server.hasOwnProperty('urls')) {
                for (var j = 0; j < server.urls.length; j++) {
                  var newServer = {
                    url: server.urls[j]
                  };
                  if (server.urls[j].indexOf('turn') === 0) {
                    newServer.username = server.username;
                    newServer.credential = server.credential;
                  }
                  newIceServers.push(newServer);
                }
              } else {
                newIceServers.push(pcConfig.iceServers[i]);
              }
            }
            pcConfig.iceServers = newIceServers;
          }
        }
        return new window.mozRTCPeerConnection(pcConfig, pcConstraints);
      };
      window.RTCPeerConnection.prototype =
          window.mozRTCPeerConnection.prototype;

      // wrap static methods. Currently just generateCertificate.
      if (window.mozRTCPeerConnection.generateCertificate) {
        Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {
          get: function() {
            return window.mozRTCPeerConnection.generateCertificate;
          }
        });
      }

      window.RTCSessionDescription = window.mozRTCSessionDescription;
      window.RTCIceCandidate = window.mozRTCIceCandidate;
    }

    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.
    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']
        .forEach(function(method) {
          var nativeMethod = window.RTCPeerConnection.prototype[method];
          window.RTCPeerConnection.prototype[method] = function() {
            arguments[0] = new ((method === 'addIceCandidate') ?
                window.RTCIceCandidate :
                window.RTCSessionDescription)(arguments[0]);
            return nativeMethod.apply(this, arguments);
          };
        });

    // support for addIceCandidate(null or undefined)
    var nativeAddIceCandidate =
        window.RTCPeerConnection.prototype.addIceCandidate;
    window.RTCPeerConnection.prototype.addIceCandidate = function() {
      if (!arguments[0]) {
        if (arguments[1]) {
          arguments[1].apply(null);
        }
        return Promise.resolve();
      }
      return nativeAddIceCandidate.apply(this, arguments);
    };

    // shim getStats with maplike support
    var makeMapStats = function(stats) {
      var map = new Map();
      Object.keys(stats).forEach(function(key) {
        map.set(key, stats[key]);
        map[key] = stats[key];
      });
      return map;
    };

    var modernStatsTypes = {
      inboundrtp: 'inbound-rtp',
      outboundrtp: 'outbound-rtp',
      candidatepair: 'candidate-pair',
      localcandidate: 'local-candidate',
      remotecandidate: 'remote-candidate'
    };

    var nativeGetStats = window.RTCPeerConnection.prototype.getStats;
    window.RTCPeerConnection.prototype.getStats = function(
      selector,
      onSucc,
      onErr
    ) {
      return nativeGetStats.apply(this, [selector || null])
        .then(function(stats) {
          if (browserDetails.version < 48) {
            stats = makeMapStats(stats);
          }
          if (browserDetails.version < 53 && !onSucc) {
            // Shim only promise getStats with spec-hyphens in type names
            // Leave callback version alone; misc old uses of forEach before Map
            try {
              stats.forEach(function(stat) {
                stat.type = modernStatsTypes[stat.type] || stat.type;
              });
            } catch (e) {
              if (e.name !== 'TypeError') {
                throw e;
              }
              // Avoid TypeError: "type" is read-only, in old versions. 34-43ish
              stats.forEach(function(stat, i) {
                stats.set(i, Object.assign({}, stat, {
                  type: modernStatsTypes[stat.type] || stat.type
                }));
              });
            }
          }
          return stats;
        })
        .then(onSucc, onErr);
    };
  },

  shimSenderGetStats: function(window) {
    if (!(typeof window === 'object' && window.RTCPeerConnection &&
        window.RTCRtpSender)) {
      return;
    }
    if (window.RTCRtpSender && 'getStats' in window.RTCRtpSender.prototype) {
      return;
    }
    var origGetSenders = window.RTCPeerConnection.prototype.getSenders;
    if (origGetSenders) {
      window.RTCPeerConnection.prototype.getSenders = function() {
        var pc = this;
        var senders = origGetSenders.apply(pc, []);
        senders.forEach(function(sender) {
          sender._pc = pc;
        });
        return senders;
      };
    }

    var origAddTrack = window.RTCPeerConnection.prototype.addTrack;
    if (origAddTrack) {
      window.RTCPeerConnection.prototype.addTrack = function() {
        var sender = origAddTrack.apply(this, arguments);
        sender._pc = this;
        return sender;
      };
    }
    window.RTCRtpSender.prototype.getStats = function() {
      return this.track ? this._pc.getStats(this.track) :
          Promise.resolve(new Map());
    };
  },

  shimReceiverGetStats: function(window) {
    if (!(typeof window === 'object' && window.RTCPeerConnection &&
        window.RTCRtpSender)) {
      return;
    }
    if (window.RTCRtpSender && 'getStats' in window.RTCRtpReceiver.prototype) {
      return;
    }
    var origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;
    if (origGetReceivers) {
      window.RTCPeerConnection.prototype.getReceivers = function() {
        var pc = this;
        var receivers = origGetReceivers.apply(pc, []);
        receivers.forEach(function(receiver) {
          receiver._pc = pc;
        });
        return receivers;
      };
    }
    utils.wrapPeerConnectionEvent(window, 'track', function(e) {
      e.receiver._pc = e.srcElement;
      return e;
    });
    window.RTCRtpReceiver.prototype.getStats = function() {
      return this._pc.getStats(this.track);
    };
  },

  shimRemoveStream: function(window) {
    if (!window.RTCPeerConnection ||
        'removeStream' in window.RTCPeerConnection.prototype) {
      return;
    }
    window.RTCPeerConnection.prototype.removeStream = function(stream) {
      var pc = this;
      utils.deprecated('removeStream', 'removeTrack');
      this.getSenders().forEach(function(sender) {
        if (sender.track && stream.getTracks().indexOf(sender.track) !== -1) {
          pc.removeTrack(sender);
        }
      });
    };
  },

  shimRTCDataChannel: function(window) {
    // rename DataChannel to RTCDataChannel (native fix in FF60):
    // https://bugzilla.mozilla.org/show_bug.cgi?id=1173851
    if (window.DataChannel && !window.RTCDataChannel) {
      window.RTCDataChannel = window.DataChannel;
    }
  },

  shimGetDisplayMedia: function(window, preferredMediaSource) {
    if (!window.navigator || !window.navigator.mediaDevices ||
        'getDisplayMedia' in window.navigator.mediaDevices) {
      return;
    }
    window.navigator.mediaDevices.getDisplayMedia = function(constraints) {
      if (!(constraints && constraints.video)) {
        var err = new DOMException('getDisplayMedia without video ' +
            'constraints is undefined');
        err.name = 'NotFoundError';
        // from https://heycam.github.io/webidl/#idl-DOMException-error-names
        err.code = 8;
        return Promise.reject(err);
      }
      if (constraints.video === true) {
        constraints.video = {mediaSource: preferredMediaSource};
      } else {
        constraints.video.mediaSource = preferredMediaSource;
      }
      return window.navigator.mediaDevices.getUserMedia(constraints);
    };
    window.navigator.getDisplayMedia = function(constraints) {
      utils.deprecated('navigator.getDisplayMedia',
          'navigator.mediaDevices.getDisplayMedia');
      return window.navigator.mediaDevices.getDisplayMedia(constraints);
    };
  }
};

},{"../utils":146,"./getusermedia":144}],144:[function(require,module,exports){
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */
'use strict';

var utils = require('../utils');
var logging = utils.log;

// Expose public methods.
module.exports = function(window) {
  var browserDetails = utils.detectBrowser(window);
  var navigator = window && window.navigator;
  var MediaStreamTrack = window && window.MediaStreamTrack;

  var shimError_ = function(e) {
    return {
      name: {
        InternalError: 'NotReadableError',
        NotSupportedError: 'TypeError',
        PermissionDeniedError: 'NotAllowedError',
        SecurityError: 'NotAllowedError'
      }[e.name] || e.name,
      message: {
        'The operation is insecure.': 'The request is not allowed by the ' +
        'user agent or the platform in the current context.'
      }[e.message] || e.message,
      constraint: e.constraint,
      toString: function() {
        return this.name + (this.message && ': ') + this.message;
      }
    };
  };

  // getUserMedia constraints shim.
  var getUserMedia_ = function(constraints, onSuccess, onError) {
    var constraintsToFF37_ = function(c) {
      if (typeof c !== 'object' || c.require) {
        return c;
      }
      var require = [];
      Object.keys(c).forEach(function(key) {
        if (key === 'require' || key === 'advanced' || key === 'mediaSource') {
          return;
        }
        var r = c[key] = (typeof c[key] === 'object') ?
            c[key] : {ideal: c[key]};
        if (r.min !== undefined ||
            r.max !== undefined || r.exact !== undefined) {
          require.push(key);
        }
        if (r.exact !== undefined) {
          if (typeof r.exact === 'number') {
            r. min = r.max = r.exact;
          } else {
            c[key] = r.exact;
          }
          delete r.exact;
        }
        if (r.ideal !== undefined) {
          c.advanced = c.advanced || [];
          var oc = {};
          if (typeof r.ideal === 'number') {
            oc[key] = {min: r.ideal, max: r.ideal};
          } else {
            oc[key] = r.ideal;
          }
          c.advanced.push(oc);
          delete r.ideal;
          if (!Object.keys(r).length) {
            delete c[key];
          }
        }
      });
      if (require.length) {
        c.require = require;
      }
      return c;
    };
    constraints = JSON.parse(JSON.stringify(constraints));
    if (browserDetails.version < 38) {
      logging('spec: ' + JSON.stringify(constraints));
      if (constraints.audio) {
        constraints.audio = constraintsToFF37_(constraints.audio);
      }
      if (constraints.video) {
        constraints.video = constraintsToFF37_(constraints.video);
      }
      logging('ff37: ' + JSON.stringify(constraints));
    }
    return navigator.mozGetUserMedia(constraints, onSuccess, function(e) {
      onError(shimError_(e));
    });
  };

  // Returns the result of getUserMedia as a Promise.
  var getUserMediaPromise_ = function(constraints) {
    return new Promise(function(resolve, reject) {
      getUserMedia_(constraints, resolve, reject);
    });
  };

  // Shim for mediaDevices on older versions.
  if (!navigator.mediaDevices) {
    navigator.mediaDevices = {getUserMedia: getUserMediaPromise_,
      addEventListener: function() { },
      removeEventListener: function() { }
    };
  }
  navigator.mediaDevices.enumerateDevices =
      navigator.mediaDevices.enumerateDevices || function() {
        return new Promise(function(resolve) {
          var infos = [
            {kind: 'audioinput', deviceId: 'default', label: '', groupId: ''},
            {kind: 'videoinput', deviceId: 'default', label: '', groupId: ''}
          ];
          resolve(infos);
        });
      };

  if (browserDetails.version < 41) {
    // Work around http://bugzil.la/1169665
    var orgEnumerateDevices =
        navigator.mediaDevices.enumerateDevices.bind(navigator.mediaDevices);
    navigator.mediaDevices.enumerateDevices = function() {
      return orgEnumerateDevices().then(undefined, function(e) {
        if (e.name === 'NotFoundError') {
          return [];
        }
        throw e;
      });
    };
  }
  if (browserDetails.version < 49) {
    var origGetUserMedia = navigator.mediaDevices.getUserMedia.
        bind(navigator.mediaDevices);
    navigator.mediaDevices.getUserMedia = function(c) {
      return origGetUserMedia(c).then(function(stream) {
        // Work around https://bugzil.la/802326
        if (c.audio && !stream.getAudioTracks().length ||
            c.video && !stream.getVideoTracks().length) {
          stream.getTracks().forEach(function(track) {
            track.stop();
          });
          throw new DOMException('The object can not be found here.',
                                 'NotFoundError');
        }
        return stream;
      }, function(e) {
        return Promise.reject(shimError_(e));
      });
    };
  }
  if (!(browserDetails.version > 55 &&
      'autoGainControl' in navigator.mediaDevices.getSupportedConstraints())) {
    var remap = function(obj, a, b) {
      if (a in obj && !(b in obj)) {
        obj[b] = obj[a];
        delete obj[a];
      }
    };

    var nativeGetUserMedia = navigator.mediaDevices.getUserMedia.
        bind(navigator.mediaDevices);
    navigator.mediaDevices.getUserMedia = function(c) {
      if (typeof c === 'object' && typeof c.audio === 'object') {
        c = JSON.parse(JSON.stringify(c));
        remap(c.audio, 'autoGainControl', 'mozAutoGainControl');
        remap(c.audio, 'noiseSuppression', 'mozNoiseSuppression');
      }
      return nativeGetUserMedia(c);
    };

    if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {
      var nativeGetSettings = MediaStreamTrack.prototype.getSettings;
      MediaStreamTrack.prototype.getSettings = function() {
        var obj = nativeGetSettings.apply(this, arguments);
        remap(obj, 'mozAutoGainControl', 'autoGainControl');
        remap(obj, 'mozNoiseSuppression', 'noiseSuppression');
        return obj;
      };
    }

    if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {
      var nativeApplyConstraints = MediaStreamTrack.prototype.applyConstraints;
      MediaStreamTrack.prototype.applyConstraints = function(c) {
        if (this.kind === 'audio' && typeof c === 'object') {
          c = JSON.parse(JSON.stringify(c));
          remap(c, 'autoGainControl', 'mozAutoGainControl');
          remap(c, 'noiseSuppression', 'mozNoiseSuppression');
        }
        return nativeApplyConstraints.apply(this, [c]);
      };
    }
  }
  navigator.getUserMedia = function(constraints, onSuccess, onError) {
    if (browserDetails.version < 44) {
      return getUserMedia_(constraints, onSuccess, onError);
    }
    // Replace Firefox 44+'s deprecation warning with unprefixed version.
    utils.deprecated('navigator.getUserMedia',
        'navigator.mediaDevices.getUserMedia');
    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);
  };
};

},{"../utils":146}],145:[function(require,module,exports){
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
'use strict';
var utils = require('../utils');

module.exports = {
  shimLocalStreamsAPI: function(window) {
    if (typeof window !== 'object' || !window.RTCPeerConnection) {
      return;
    }
    if (!('getLocalStreams' in window.RTCPeerConnection.prototype)) {
      window.RTCPeerConnection.prototype.getLocalStreams = function() {
        if (!this._localStreams) {
          this._localStreams = [];
        }
        return this._localStreams;
      };
    }
    if (!('getStreamById' in window.RTCPeerConnection.prototype)) {
      window.RTCPeerConnection.prototype.getStreamById = function(id) {
        var result = null;
        if (this._localStreams) {
          this._localStreams.forEach(function(stream) {
            if (stream.id === id) {
              result = stream;
            }
          });
        }
        if (this._remoteStreams) {
          this._remoteStreams.forEach(function(stream) {
            if (stream.id === id) {
              result = stream;
            }
          });
        }
        return result;
      };
    }
    if (!('addStream' in window.RTCPeerConnection.prototype)) {
      var _addTrack = window.RTCPeerConnection.prototype.addTrack;
      window.RTCPeerConnection.prototype.addStream = function(stream) {
        if (!this._localStreams) {
          this._localStreams = [];
        }
        if (this._localStreams.indexOf(stream) === -1) {
          this._localStreams.push(stream);
        }
        var pc = this;
        stream.getTracks().forEach(function(track) {
          _addTrack.call(pc, track, stream);
        });
      };

      window.RTCPeerConnection.prototype.addTrack = function(track, stream) {
        if (stream) {
          if (!this._localStreams) {
            this._localStreams = [stream];
          } else if (this._localStreams.indexOf(stream) === -1) {
            this._localStreams.push(stream);
          }
        }
        return _addTrack.call(this, track, stream);
      };
    }
    if (!('removeStream' in window.RTCPeerConnection.prototype)) {
      window.RTCPeerConnection.prototype.removeStream = function(stream) {
        if (!this._localStreams) {
          this._localStreams = [];
        }
        var index = this._localStreams.indexOf(stream);
        if (index === -1) {
          return;
        }
        this._localStreams.splice(index, 1);
        var pc = this;
        var tracks = stream.getTracks();
        this.getSenders().forEach(function(sender) {
          if (tracks.indexOf(sender.track) !== -1) {
            pc.removeTrack(sender);
          }
        });
      };
    }
  },
  shimRemoteStreamsAPI: function(window) {
    if (typeof window !== 'object' || !window.RTCPeerConnection) {
      return;
    }
    if (!('getRemoteStreams' in window.RTCPeerConnection.prototype)) {
      window.RTCPeerConnection.prototype.getRemoteStreams = function() {
        return this._remoteStreams ? this._remoteStreams : [];
      };
    }
    if (!('onaddstream' in window.RTCPeerConnection.prototype)) {
      Object.defineProperty(window.RTCPeerConnection.prototype, 'onaddstream', {
        get: function() {
          return this._onaddstream;
        },
        set: function(f) {
          if (this._onaddstream) {
            this.removeEventListener('addstream', this._onaddstream);
          }
          this.addEventListener('addstream', this._onaddstream = f);
        }
      });
      var origSetRemoteDescription =
          window.RTCPeerConnection.prototype.setRemoteDescription;
      window.RTCPeerConnection.prototype.setRemoteDescription = function() {
        var pc = this;
        if (!this._onaddstreampoly) {
          this.addEventListener('track', this._onaddstreampoly = function(e) {
            e.streams.forEach(function(stream) {
              if (!pc._remoteStreams) {
                pc._remoteStreams = [];
              }
              if (pc._remoteStreams.indexOf(stream) >= 0) {
                return;
              }
              pc._remoteStreams.push(stream);
              var event = new Event('addstream');
              event.stream = stream;
              pc.dispatchEvent(event);
            });
          });
        }
        return origSetRemoteDescription.apply(pc, arguments);
      };
    }
  },
  shimCallbacksAPI: function(window) {
    if (typeof window !== 'object' || !window.RTCPeerConnection) {
      return;
    }
    var prototype = window.RTCPeerConnection.prototype;
    var createOffer = prototype.createOffer;
    var createAnswer = prototype.createAnswer;
    var setLocalDescription = prototype.setLocalDescription;
    var setRemoteDescription = prototype.setRemoteDescription;
    var addIceCandidate = prototype.addIceCandidate;

    prototype.createOffer = function(successCallback, failureCallback) {
      var options = (arguments.length >= 2) ? arguments[2] : arguments[0];
      var promise = createOffer.apply(this, [options]);
      if (!failureCallback) {
        return promise;
      }
      promise.then(successCallback, failureCallback);
      return Promise.resolve();
    };

    prototype.createAnswer = function(successCallback, failureCallback) {
      var options = (arguments.length >= 2) ? arguments[2] : arguments[0];
      var promise = createAnswer.apply(this, [options]);
      if (!failureCallback) {
        return promise;
      }
      promise.then(successCallback, failureCallback);
      return Promise.resolve();
    };

    var withCallback = function(description, successCallback, failureCallback) {
      var promise = setLocalDescription.apply(this, [description]);
      if (!failureCallback) {
        return promise;
      }
      promise.then(successCallback, failureCallback);
      return Promise.resolve();
    };
    prototype.setLocalDescription = withCallback;

    withCallback = function(description, successCallback, failureCallback) {
      var promise = setRemoteDescription.apply(this, [description]);
      if (!failureCallback) {
        return promise;
      }
      promise.then(successCallback, failureCallback);
      return Promise.resolve();
    };
    prototype.setRemoteDescription = withCallback;

    withCallback = function(candidate, successCallback, failureCallback) {
      var promise = addIceCandidate.apply(this, [candidate]);
      if (!failureCallback) {
        return promise;
      }
      promise.then(successCallback, failureCallback);
      return Promise.resolve();
    };
    prototype.addIceCandidate = withCallback;
  },
  shimGetUserMedia: function(window) {
    var navigator = window && window.navigator;

    if (!navigator.getUserMedia) {
      if (navigator.webkitGetUserMedia) {
        navigator.getUserMedia = navigator.webkitGetUserMedia.bind(navigator);
      } else if (navigator.mediaDevices &&
          navigator.mediaDevices.getUserMedia) {
        navigator.getUserMedia = function(constraints, cb, errcb) {
          navigator.mediaDevices.getUserMedia(constraints)
          .then(cb, errcb);
        }.bind(navigator);
      }
    }
  },
  shimRTCIceServerUrls: function(window) {
    // migrate from non-spec RTCIceServer.url to RTCIceServer.urls
    var OrigPeerConnection = window.RTCPeerConnection;
    window.RTCPeerConnection = function(pcConfig, pcConstraints) {
      if (pcConfig && pcConfig.iceServers) {
        var newIceServers = [];
        for (var i = 0; i < pcConfig.iceServers.length; i++) {
          var server = pcConfig.iceServers[i];
          if (!server.hasOwnProperty('urls') &&
              server.hasOwnProperty('url')) {
            utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');
            server = JSON.parse(JSON.stringify(server));
            server.urls = server.url;
            delete server.url;
            newIceServers.push(server);
          } else {
            newIceServers.push(pcConfig.iceServers[i]);
          }
        }
        pcConfig.iceServers = newIceServers;
      }
      return new OrigPeerConnection(pcConfig, pcConstraints);
    };
    window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;
    // wrap static methods. Currently just generateCertificate.
    if ('generateCertificate' in window.RTCPeerConnection) {
      Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {
        get: function() {
          return OrigPeerConnection.generateCertificate;
        }
      });
    }
  },
  shimTrackEventTransceiver: function(window) {
    // Add event.transceiver member over deprecated event.receiver
    if (typeof window === 'object' && window.RTCPeerConnection &&
        ('receiver' in window.RTCTrackEvent.prototype) &&
        // can't check 'transceiver' in window.RTCTrackEvent.prototype, as it is
        // defined for some reason even when window.RTCTransceiver is not.
        !window.RTCTransceiver) {
      Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {
        get: function() {
          return {receiver: this.receiver};
        }
      });
    }
  },

  shimCreateOfferLegacy: function(window) {
    var origCreateOffer = window.RTCPeerConnection.prototype.createOffer;
    window.RTCPeerConnection.prototype.createOffer = function(offerOptions) {
      var pc = this;
      if (offerOptions) {
        if (typeof offerOptions.offerToReceiveAudio !== 'undefined') {
          // support bit values
          offerOptions.offerToReceiveAudio = !!offerOptions.offerToReceiveAudio;
        }
        var audioTransceiver = pc.getTransceivers().find(function(transceiver) {
          return transceiver.sender.track &&
              transceiver.sender.track.kind === 'audio';
        });
        if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {
          if (audioTransceiver.direction === 'sendrecv') {
            if (audioTransceiver.setDirection) {
              audioTransceiver.setDirection('sendonly');
            } else {
              audioTransceiver.direction = 'sendonly';
            }
          } else if (audioTransceiver.direction === 'recvonly') {
            if (audioTransceiver.setDirection) {
              audioTransceiver.setDirection('inactive');
            } else {
              audioTransceiver.direction = 'inactive';
            }
          }
        } else if (offerOptions.offerToReceiveAudio === true &&
            !audioTransceiver) {
          pc.addTransceiver('audio');
        }


        if (typeof offerOptions.offerToReceiveVideo !== 'undefined') {
          // support bit values
          offerOptions.offerToReceiveVideo = !!offerOptions.offerToReceiveVideo;
        }
        var videoTransceiver = pc.getTransceivers().find(function(transceiver) {
          return transceiver.sender.track &&
              transceiver.sender.track.kind === 'video';
        });
        if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {
          if (videoTransceiver.direction === 'sendrecv') {
            videoTransceiver.setDirection('sendonly');
          } else if (videoTransceiver.direction === 'recvonly') {
            videoTransceiver.setDirection('inactive');
          }
        } else if (offerOptions.offerToReceiveVideo === true &&
            !videoTransceiver) {
          pc.addTransceiver('video');
        }
      }
      return origCreateOffer.apply(pc, arguments);
    };
  }
};

},{"../utils":146}],146:[function(require,module,exports){
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */
'use strict';

var logDisabled_ = true;
var deprecationWarnings_ = true;

/**
 * Extract browser version out of the provided user agent string.
 *
 * @param {!string} uastring userAgent string.
 * @param {!string} expr Regular expression used as match criteria.
 * @param {!number} pos position in the version string to be returned.
 * @return {!number} browser version.
 */
function extractVersion(uastring, expr, pos) {
  var match = uastring.match(expr);
  return match && match.length >= pos && parseInt(match[pos], 10);
}

// Wraps the peerconnection event eventNameToWrap in a function
// which returns the modified event object (or false to prevent
// the event).
function wrapPeerConnectionEvent(window, eventNameToWrap, wrapper) {
  if (!window.RTCPeerConnection) {
    return;
  }
  var proto = window.RTCPeerConnection.prototype;
  var nativeAddEventListener = proto.addEventListener;
  proto.addEventListener = function(nativeEventName, cb) {
    if (nativeEventName !== eventNameToWrap) {
      return nativeAddEventListener.apply(this, arguments);
    }
    var wrappedCallback = function(e) {
      var modifiedEvent = wrapper(e);
      if (modifiedEvent) {
        cb(modifiedEvent);
      }
    };
    this._eventMap = this._eventMap || {};
    this._eventMap[cb] = wrappedCallback;
    return nativeAddEventListener.apply(this, [nativeEventName,
      wrappedCallback]);
  };

  var nativeRemoveEventListener = proto.removeEventListener;
  proto.removeEventListener = function(nativeEventName, cb) {
    if (nativeEventName !== eventNameToWrap || !this._eventMap
        || !this._eventMap[cb]) {
      return nativeRemoveEventListener.apply(this, arguments);
    }
    var unwrappedCb = this._eventMap[cb];
    delete this._eventMap[cb];
    return nativeRemoveEventListener.apply(this, [nativeEventName,
      unwrappedCb]);
  };

  Object.defineProperty(proto, 'on' + eventNameToWrap, {
    get: function() {
      return this['_on' + eventNameToWrap];
    },
    set: function(cb) {
      if (this['_on' + eventNameToWrap]) {
        this.removeEventListener(eventNameToWrap,
            this['_on' + eventNameToWrap]);
        delete this['_on' + eventNameToWrap];
      }
      if (cb) {
        this.addEventListener(eventNameToWrap,
            this['_on' + eventNameToWrap] = cb);
      }
    },
    enumerable: true,
    configurable: true
  });
}

// Utility methods.
module.exports = {
  extractVersion: extractVersion,
  wrapPeerConnectionEvent: wrapPeerConnectionEvent,
  disableLog: function(bool) {
    if (typeof bool !== 'boolean') {
      return new Error('Argument type: ' + typeof bool +
          '. Please use a boolean.');
    }
    logDisabled_ = bool;
    return (bool) ? 'adapter.js logging disabled' :
        'adapter.js logging enabled';
  },

  /**
   * Disable or enable deprecation warnings
   * @param {!boolean} bool set to true to disable warnings.
   */
  disableWarnings: function(bool) {
    if (typeof bool !== 'boolean') {
      return new Error('Argument type: ' + typeof bool +
          '. Please use a boolean.');
    }
    deprecationWarnings_ = !bool;
    return 'adapter.js deprecation warnings ' + (bool ? 'disabled' : 'enabled');
  },

  log: function() {
    if (typeof window === 'object') {
      if (logDisabled_) {
        return;
      }
      if (typeof console !== 'undefined' && typeof console.log === 'function') {
        console.log.apply(console, arguments);
      }
    }
  },

  /**
   * Shows a deprecation warning suggesting the modern and spec-compatible API.
   */
  deprecated: function(oldMethod, newMethod) {
    if (!deprecationWarnings_) {
      return;
    }
    console.warn(oldMethod + ' is deprecated, please use ' + newMethod +
        ' instead.');
  },

  /**
   * Browser detector.
   *
   * @return {object} result containing browser and version
   *     properties.
   */
  detectBrowser: function(window) {
    var navigator = window && window.navigator;

    // Returned result object.
    var result = {};
    result.browser = null;
    result.version = null;

    // Fail early if it's not a browser
    if (typeof window === 'undefined' || !window.navigator) {
      result.browser = 'Not a browser.';
      return result;
    }

    if (navigator.mozGetUserMedia) { // Firefox.
      result.browser = 'firefox';
      result.version = extractVersion(navigator.userAgent,
          /Firefox\/(\d+)\./, 1);
    } else if (navigator.webkitGetUserMedia) {
      // Chrome, Chromium, Webview, Opera.
      // Version matches Chrome/WebRTC version.
      result.browser = 'chrome';
      result.version = extractVersion(navigator.userAgent,
          /Chrom(e|ium)\/(\d+)\./, 2);
    } else if (navigator.mediaDevices &&
        navigator.userAgent.match(/Edge\/(\d+).(\d+)$/)) { // Edge.
      result.browser = 'edge';
      result.version = extractVersion(navigator.userAgent,
          /Edge\/(\d+).(\d+)$/, 2);
    } else if (window.RTCPeerConnection &&
        navigator.userAgent.match(/AppleWebKit\/(\d+)\./)) { // Safari.
      result.browser = 'safari';
      result.version = extractVersion(navigator.userAgent,
          /AppleWebKit\/(\d+)\./, 1);
    } else { // Default fallthrough: not supported.
      result.browser = 'Not a supported browser.';
      return result;
    }

    return result;
  }
};

},{}],147:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var UNDEFINED = exports.UNDEFINED = 'undefined';
var DCV_STRATEGY = exports.DCV_STRATEGY = 'DCVStrategy';
var AUDIO = exports.AUDIO = 'audio';
var ANSWER = exports.ANSWER = 'answer';
var CHROME = exports.CHROME = 'chrome';

},{}],148:[function(require,module,exports){
(function (global){(function (){
'use strict';

require('webrtc-adapter');

var _rtc_session = require('./rtc_session');

var _rtc_session2 = _interopRequireDefault(_rtc_session);

var _rtc_const = require('./rtc_const');

var _rtc_peer_connection_factory = require('./rtc_peer_connection_factory');

var _rtc_peer_connection_factory2 = _interopRequireDefault(_rtc_peer_connection_factory);

var _v = require('uuid/v4');

var _v2 = _interopRequireDefault(_v);

var _StandardStrategy = require('./strategies/StandardStrategy');

var _StandardStrategy2 = _interopRequireDefault(_StandardStrategy);

var _CitrixVDIStrategy = require('./strategies/CitrixVDIStrategy');

var _CitrixVDIStrategy2 = _interopRequireDefault(_CitrixVDIStrategy);

var _DCVWebRTCStrategy = require('./strategies/DCVWebRTCStrategy');

var _DCVWebRTCStrategy2 = _interopRequireDefault(_DCVWebRTCStrategy);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @license
 * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * @license
 * License info for webrtc-adapter module assembled into js bundle:
 *
 * Copyright (c) 2014, The WebRTC project authors. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 * Neither the name of Google nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/**
 * @license
 * License info for sdp module assembled into js bundle:
 *
 * See https://www.npmjs.com/package/sdp
 */
global.connect = global.connect || {};
/**
 * @license
 * License info for uuid module assembled into js bundle:
 *
 * The MIT License (MIT)
 *
 * Copyright (c) 2010-2016 Robert Kieffer and other contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

global.connect.RTCSession = _rtc_session2.default;
global.connect.RTCErrors = _rtc_const.RTC_ERRORS;
global.connect.RtcPeerConnectionFactory = _rtc_peer_connection_factory2.default;
global.connect.uuid = _v2.default;
global.connect.StandardStrategy = _StandardStrategy2.default;
global.connect.CitrixVDIStrategy = _CitrixVDIStrategy2.default;
global.connect.DCVWebRTCStrategy = _DCVWebRTCStrategy2.default;

global.lily = global.lily || {};
global.lily.RTCSession = _rtc_session2.default;
global.lily.RTCErrors = _rtc_const.RTC_ERRORS;

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./rtc_const":150,"./rtc_peer_connection_factory":151,"./rtc_session":152,"./strategies/CitrixVDIStrategy":157,"./strategies/DCVWebRTCStrategy":158,"./strategies/StandardStrategy":159,"uuid/v4":134,"webrtc-adapter":135}],149:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.UnknownSignalingError = exports.UnknownSignalingErrorName = exports.CallNotFoundException = exports.CallNotFoundExceptionName = exports.BusyException = exports.BusyExceptionName = exports.UnsupportedOperation = exports.UnsupportedOperationExceptionName = exports.IllegalState = exports.IllegalStateExceptionName = exports.IllegalParameters = exports.IllegalParametersExceptionName = exports.GumTimeout = exports.GumTimeoutExceptionName = exports.Timeout = exports.TimeoutExceptionName = undefined;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */
var TimeoutExceptionName = exports.TimeoutExceptionName = 'Timeout';

var Timeout = exports.Timeout = function (_Error) {
    (0, _inherits3.default)(Timeout, _Error);

    function Timeout(msg) {
        (0, _classCallCheck3.default)(this, Timeout);

        var _this = (0, _possibleConstructorReturn3.default)(this, (Timeout.__proto__ || Object.getPrototypeOf(Timeout)).call(this, msg));

        _this.name = TimeoutExceptionName;
        return _this;
    }

    return Timeout;
}(Error);

var GumTimeoutExceptionName = exports.GumTimeoutExceptionName = 'GumTimeout';

var GumTimeout = exports.GumTimeout = function (_Timeout) {
    (0, _inherits3.default)(GumTimeout, _Timeout);

    function GumTimeout(msg) {
        (0, _classCallCheck3.default)(this, GumTimeout);

        var _this2 = (0, _possibleConstructorReturn3.default)(this, (GumTimeout.__proto__ || Object.getPrototypeOf(GumTimeout)).call(this, msg));

        _this2.name = GumTimeoutExceptionName;
        return _this2;
    }

    return GumTimeout;
}(Timeout);

var IllegalParametersExceptionName = exports.IllegalParametersExceptionName = 'IllegalParameters';

var IllegalParameters = exports.IllegalParameters = function (_Error2) {
    (0, _inherits3.default)(IllegalParameters, _Error2);

    function IllegalParameters(msg) {
        (0, _classCallCheck3.default)(this, IllegalParameters);

        var _this3 = (0, _possibleConstructorReturn3.default)(this, (IllegalParameters.__proto__ || Object.getPrototypeOf(IllegalParameters)).call(this, msg));

        _this3.name = IllegalParametersExceptionName;
        return _this3;
    }

    return IllegalParameters;
}(Error);

var IllegalStateExceptionName = exports.IllegalStateExceptionName = 'IllegalState';

var IllegalState = exports.IllegalState = function (_Error3) {
    (0, _inherits3.default)(IllegalState, _Error3);

    function IllegalState(msg) {
        (0, _classCallCheck3.default)(this, IllegalState);

        var _this4 = (0, _possibleConstructorReturn3.default)(this, (IllegalState.__proto__ || Object.getPrototypeOf(IllegalState)).call(this, msg));

        _this4.name = IllegalStateExceptionName;
        return _this4;
    }

    return IllegalState;
}(Error);

var UnsupportedOperationExceptionName = exports.UnsupportedOperationExceptionName = 'UnsupportedOperation';

var UnsupportedOperation = exports.UnsupportedOperation = function (_Error4) {
    (0, _inherits3.default)(UnsupportedOperation, _Error4);

    function UnsupportedOperation(msg) {
        (0, _classCallCheck3.default)(this, UnsupportedOperation);

        var _this5 = (0, _possibleConstructorReturn3.default)(this, (UnsupportedOperation.__proto__ || Object.getPrototypeOf(UnsupportedOperation)).call(this, msg));

        _this5.name = UnsupportedOperationExceptionName;
        return _this5;
    }

    return UnsupportedOperation;
}(Error);

var BusyExceptionName = exports.BusyExceptionName = 'BusyException';

var BusyException = exports.BusyException = function (_Error5) {
    (0, _inherits3.default)(BusyException, _Error5);

    function BusyException(msg) {
        (0, _classCallCheck3.default)(this, BusyException);

        var _this6 = (0, _possibleConstructorReturn3.default)(this, (BusyException.__proto__ || Object.getPrototypeOf(BusyException)).call(this, msg));

        _this6.name = BusyExceptionName;
        return _this6;
    }

    return BusyException;
}(Error);

var CallNotFoundExceptionName = exports.CallNotFoundExceptionName = 'CallNotFoundException';

var CallNotFoundException = exports.CallNotFoundException = function (_Error6) {
    (0, _inherits3.default)(CallNotFoundException, _Error6);

    function CallNotFoundException(msg) {
        (0, _classCallCheck3.default)(this, CallNotFoundException);

        var _this7 = (0, _possibleConstructorReturn3.default)(this, (CallNotFoundException.__proto__ || Object.getPrototypeOf(CallNotFoundException)).call(this, msg));

        _this7.name = CallNotFoundExceptionName;
        return _this7;
    }

    return CallNotFoundException;
}(Error);

var UnknownSignalingErrorName = exports.UnknownSignalingErrorName = 'UnknownSignalingError';

var UnknownSignalingError = exports.UnknownSignalingError = function (_Error7) {
    (0, _inherits3.default)(UnknownSignalingError, _Error7);

    function UnknownSignalingError() {
        (0, _classCallCheck3.default)(this, UnknownSignalingError);

        var _this8 = (0, _possibleConstructorReturn3.default)(this, (UnknownSignalingError.__proto__ || Object.getPrototypeOf(UnknownSignalingError)).call(this));

        _this8.name = UnknownSignalingErrorName;
        return _this8;
    }

    return UnknownSignalingError;
}(Error);

},{"babel-runtime/helpers/classCallCheck":15,"babel-runtime/helpers/inherits":18,"babel-runtime/helpers/possibleConstructorReturn":19}],150:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
/**
 * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * Timeout waiting for server response to accept/hangup request.
 */
var MAX_ACCEPT_BYE_DELAY_MS = exports.MAX_ACCEPT_BYE_DELAY_MS = 2000;
/**
 * Timeout waiting for server response to invite.
 */
var MAX_INVITE_DELAY_MS = exports.MAX_INVITE_DELAY_MS = 5000;
/**
 *  Default timeout on opening WebSocket connection.
 */
var DEFAULT_CONNECT_TIMEOUT_MS = exports.DEFAULT_CONNECT_TIMEOUT_MS = 10000;
/**
 * Default ice collection timeout in milliseconds.
 */
var DEFAULT_ICE_TIMEOUT_MS = exports.DEFAULT_ICE_TIMEOUT_MS = 8000;
/**
 * Default gum timeout in milliseconds to be enforced during start of a call.
 */
var DEFAULT_GUM_TIMEOUT_MS = exports.DEFAULT_GUM_TIMEOUT_MS = 10000;

var SOFTPHONE_ROUTE_KEY = exports.SOFTPHONE_ROUTE_KEY = "aws/softphone";

var INVITE_METHOD_NAME = exports.INVITE_METHOD_NAME = "invite";
var ACCEPT_METHOD_NAME = exports.ACCEPT_METHOD_NAME = "accept";
var BYE_METHOD_NAME = exports.BYE_METHOD_NAME = "bye";

var RTC_PEER_CONNECTION_CONFIG = exports.RTC_PEER_CONNECTION_CONFIG = {
    iceTransportPolicy: 'relay',
    rtcpMuxPolicy: 'require',
    bundlePolicy: 'balanced',
    sdpSemantics: 'unified-plan',
    enableDtlsSrtp: true
};

var RTC_PEER_CONNECTION_OPTIONAL_CONFIG = exports.RTC_PEER_CONNECTION_OPTIONAL_CONFIG = {
    optional: [{
        googDscp: true

    }, {
        DtlsSrtpKeyAgreement: true
    }]
};

var DEFAULT_ICE_CANDIDATE_POOL_SIZE = exports.DEFAULT_ICE_CANDIDATE_POOL_SIZE = 1;

var RTC_PEER_CONNECTION_IDLE_TIMEOUT_MS = exports.RTC_PEER_CONNECTION_IDLE_TIMEOUT_MS = 1 * 60 * 1000;

var NETWORK_CONNECTIVITY_CHECK_INTERVAL_MS = exports.NETWORK_CONNECTIVITY_CHECK_INTERVAL_MS = 250;

var CHROME_SUPPORTED_VERSION = exports.CHROME_SUPPORTED_VERSION = 59;

/**
 * RTC error names.
 */
var RTC_ERRORS = exports.RTC_ERRORS = {
    ICE_COLLECTION_TIMEOUT: 'Ice Collection Timeout',
    USER_BUSY: 'User Busy',
    SIGNALLING_CONNECTION_FAILURE: 'Signalling Connection Failure',
    SIGNALLING_HANDSHAKE_FAILURE: 'Signalling Handshake Failure',
    SET_REMOTE_DESCRIPTION_FAILURE: 'Set Remote Description Failure',
    CREATE_OFFER_FAILURE: 'Create Offer Failure',
    SET_LOCAL_DESCRIPTION_FAILURE: 'Set Local Description Failure',
    INVALID_REMOTE_SDP: 'Invalid Remote SDP',
    NO_REMOTE_ICE_CANDIDATE: 'No Remote ICE Candidate',
    GUM_TIMEOUT_FAILURE: 'GUM Timeout Failure',
    GUM_OTHER_FAILURE: 'GUM Other Failure',
    CALL_NOT_FOUND: 'Call Not Found'
};

var ICE_CONNECTION_STATE = exports.ICE_CONNECTION_STATE = {
    NEW: 'new',
    CHECKING: 'checking',
    CONNECTED: 'connected',
    COMPLETED: 'completed',
    FAILED: 'failed',
    DISCONNECTED: 'disconnected',
    CLOSED: 'closed'
};

var PEER_CONNECTION_STATE = exports.PEER_CONNECTION_STATE = {
    NEW: 'new',
    CONNECTING: 'connecting',
    CONNECTED: 'connected',
    FAILED: 'failed',
    DISCONNECTED: 'disconnected',
    CLOSED: 'closed'
};

},{}],151:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _utils = require('./utils');

var _rtc_const = require('./rtc_const');

var _CCPInitiationStrategyInterface = require('./strategies/CCPInitiationStrategyInterface');

var _CCPInitiationStrategyInterface2 = _interopRequireDefault(_CCPInitiationStrategyInterface);

var _StandardStrategy = require('./strategies/StandardStrategy');

var _StandardStrategy2 = _interopRequireDefault(_StandardStrategy);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var RtcPeerConnectionFactory = function () {

    //transportHandle must be a callback function which should return a promise which is going to return the iceServers. Please refer https://www.w3.org/TR/webrtc/#rtciceserver-dictionary for iceServer example
    //publishError(errorType, errorMessage) must be a callback function which will publish the passed error message to client browser
    function RtcPeerConnectionFactory(logger, wssManager, clientId, transportHandle, publishError) {
        var strategy = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : new _StandardStrategy2.default();
        (0, _classCallCheck3.default)(this, RtcPeerConnectionFactory);

        if (!(strategy instanceof _CCPInitiationStrategyInterface2.default)) {
            throw new Error('Expected a strategy of type CCPInitiationStrategyInterface');
        }
        (0, _utils.assertTrue)((0, _utils.isFunction)(transportHandle), 'transportHandle must be a function');
        (0, _utils.assertTrue)((0, _utils.isFunction)(publishError), 'publishError must be a function');
        this._strategy = strategy;
        this._logger = logger;
        this._clientId = clientId;
        this._wssManager = wssManager;
        this._requestIceAccess = transportHandle;
        this._publishError = publishError;
        this._earlyMediaConnectionSupported = this._isEarlyMediaConnectionSupported();
        this._initializeWebSocketEventListeners();
        this._requestPeerConnection();
        this._networkConnectivityChecker();

        this._logger.log("RTC.js is using " + strategy.getStrategyName());
    }

    (0, _createClass3.default)(RtcPeerConnectionFactory, [{
        key: '_isEarlyMediaConnectionSupported',
        value: function _isEarlyMediaConnectionSupported() {
            return this._strategy._isEarlyMediaConnectionSupported();
        }

        //This will handle the idleConnection and quota limits notification from the server

    }, {
        key: '_webSocketManagerOnMessage',
        value: function _webSocketManagerOnMessage(event) {
            var content = void 0;
            if (event.content) {
                content = JSON.parse(event.content);
            }
            if (content && this._clientId === content.clientId) {
                if (content.jsonRpcMsg.method === "idleConnection") {
                    this._clearIdleRtcPeerConnection();
                } else if (content.jsonRpcMsg.method === "quotaBreached") {
                    this._logger.log("Number of active sessions are more then allowed limit for the client " + this._clientId);
                    this._closeRTCPeerConnection();
                    this._publishError("multiple_softphone_active_sessions", "Number of active sessions are more then allowed limit.");
                }
            }
        }
    }, {
        key: '_initializeWebSocketEventListeners',
        value: function _initializeWebSocketEventListeners() {
            this._wssManager.subscribeTopics([_rtc_const.SOFTPHONE_ROUTE_KEY]);
            this._unSubscribe = this._wssManager.onMessage(_rtc_const.SOFTPHONE_ROUTE_KEY, (0, _utils.hitch)(this, this._webSocketManagerOnMessage));
        }

        // This method will create and return new peer connection if browser is not supporting early ice collection.
        // For the supported browser, this method will request for new peerConnection after returning the existing peerConnection

    }, {
        key: 'get',
        value: function get(iceServers) {
            var self = this;
            var pc = self._pc;
            self._pc = null;
            if (pc == null) {
                pc = self._createRtcPeerConnection(iceServers);
            }
            self.clearIdleRtcPeerConnectionTimerId();
            self._requestPeerConnection();
            return pc;
        }
    }, {
        key: 'clearIdleRtcPeerConnectionTimerId',
        value: function clearIdleRtcPeerConnectionTimerId() {
            var self = this;
            if (self._idleRtcPeerConnectionTimerId) {
                clearTimeout(self._idleRtcPeerConnectionTimerId);
                self._idleRtcPeerConnectionTimerId = null;
            }
        }
    }, {
        key: '_requestPeerConnection',
        value: function _requestPeerConnection() {
            var self = this;
            if (!self._peerConnectionRequestInFlight && self._earlyMediaConnectionSupported) {
                self._peerConnectionRequestInFlight = true;
                self._requestIceAccess().then(function (response) {
                    self._pc = self._createRtcPeerConnection(response);
                    self._peerConnectionRequestInFlight = false;
                    self._idleRtcPeerConnectionTimerId = setTimeout((0, _utils.hitch)(self, self._refreshRtcPeerConnection), _rtc_const.RTC_PEER_CONNECTION_IDLE_TIMEOUT_MS);
                },
                // eslint-disable-next-line no-unused-vars
                function (reason) {
                    self._peerConnectionRequestInFlight = false;
                });
            }
        }
    }, {
        key: '_networkConnectivityChecker',
        value: function _networkConnectivityChecker() {
            var self = this;
            setInterval(function () {
                if (!navigator.onLine && self._pc) {
                    self._logger.log("Network offline. Cleaning up early connection");
                    self._pc.close();
                    self._pc = null;
                }
            }, _rtc_const.NETWORK_CONNECTIVITY_CHECK_INTERVAL_MS);
        }
    }, {
        key: '_createRtcPeerConnection',
        value: function _createRtcPeerConnection(iceServers) {
            var rtcPeerConnectionConfig = JSON.parse(JSON.stringify(_rtc_const.RTC_PEER_CONNECTION_CONFIG));
            rtcPeerConnectionConfig.iceServers = iceServers;
            rtcPeerConnectionConfig.iceCandidatePoolSize = _rtc_const.DEFAULT_ICE_CANDIDATE_POOL_SIZE;
            return this._strategy._createRtcPeerConnection(rtcPeerConnectionConfig, _rtc_const.RTC_PEER_CONNECTION_OPTIONAL_CONFIG);
        }
    }, {
        key: '_clearIdleRtcPeerConnection',
        value: function _clearIdleRtcPeerConnection() {
            this._logger.log("session is idle from long time. closing the peer connection for client " + this._clientId);
            this._closeRTCPeerConnection();
        }
    }, {
        key: '_refreshRtcPeerConnection',
        value: function _refreshRtcPeerConnection() {
            this._idleRtcPeerConnectionTimerId = null;
            this._clearIdleRtcPeerConnection();
            this._logger.log("refreshing peer connection for client " + this._clientId);
            this._requestPeerConnection();
        }
    }, {
        key: '_closeRTCPeerConnection',
        value: function _closeRTCPeerConnection() {
            if (this._pc) {
                this._pc.close();
                this._pc = null;
            }
        }
    }]);
    return RtcPeerConnectionFactory;
}();

exports.default = RtcPeerConnectionFactory;

},{"./rtc_const":150,"./strategies/CCPInitiationStrategyInterface":156,"./strategies/StandardStrategy":159,"./utils":160,"babel-runtime/helpers/classCallCheck":15,"babel-runtime/helpers/createClass":16}],152:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.FailedState = exports.DisconnectedState = exports.CleanUpState = exports.TalkingState = exports.AcceptState = exports.InviteAnswerState = exports.ConnectSignalingAndIceCollectionState = exports.SetLocalSessionDescriptionState = exports.CreateOfferState = exports.GrabLocalMediaState = exports.RTCSessionState = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _get2 = require('babel-runtime/helpers/get');

var _get3 = _interopRequireDefault(_get2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _utils = require('./utils');

var _session_report = require('./session_report');

var _rtc_const = require('./rtc_const');

var _exceptions = require('./exceptions');

var _signaling = require('./signaling');

var _signaling2 = _interopRequireDefault(_signaling);

var _v = require('uuid/v4');

var _v2 = _interopRequireDefault(_v);

var _rtpStats = require('./rtp-stats');

var _sdp = require('sdp');

var _CCPInitiationStrategyInterface = require('./strategies/CCPInitiationStrategyInterface');

var _CCPInitiationStrategyInterface2 = _interopRequireDefault(_CCPInitiationStrategyInterface);

var _StandardStrategy = require('./strategies/StandardStrategy');

var _StandardStrategy2 = _interopRequireDefault(_StandardStrategy);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */
var RTCSessionState = exports.RTCSessionState = function () {
    /**
     *
     * @param {RtcSession} rtcSession
     */
    function RTCSessionState(rtcSession) {
        (0, _classCallCheck3.default)(this, RTCSessionState);

        this._rtcSession = rtcSession;
    }

    (0, _createClass3.default)(RTCSessionState, [{
        key: 'onEnter',
        value: function onEnter() {}
    }, {
        key: 'onExit',
        value: function onExit() {}
    }, {
        key: '_isCurrentState',
        value: function _isCurrentState() {
            return this._rtcSession._state === this;
        }
    }, {
        key: 'transit',
        value: function transit(nextState) {
            if (this._isCurrentState()) {
                this._rtcSession.transit(nextState);
            }
        }
    }, {
        key: 'hangup',
        value: function hangup() {
            this.transit(new FailedState(this._rtcSession));
        }
    }, {
        key: 'onIceCandidate',
        value: function onIceCandidate(evt) {// eslint-disable-line no-unused-vars
            //ignore candidate by default, ConnectSignalingAndIceCollectionState will override to collect candidates, but collecting process could last much longer than ConnectSignalingAndIceCollectionState
            //we don't want to spam the console log
        }
    }, {
        key: 'onRemoteHungup',
        value: function onRemoteHungup() {
            throw new _exceptions.UnsupportedOperation('onRemoteHungup not implemented by ' + this.name);
        }
    }, {
        key: 'onSignalingConnected',
        value: function onSignalingConnected() {
            throw new _exceptions.UnsupportedOperation('onSignalingConnected not implemented by ' + this.name);
        }
    }, {
        key: 'onSignalingHandshaked',
        value: function onSignalingHandshaked() {
            throw new _exceptions.UnsupportedOperation('onSignalingHandshaked not implemented by ' + this.name);
        }
    }, {
        key: 'onSignalingFailed',
        value: function onSignalingFailed(e) {
            // eslint-disable-line no-unused-vars
            throw new _exceptions.UnsupportedOperation('onSignalingFailed not implemented by ' + this.name);
        }
    }, {
        key: 'onIceStateChange',
        value: function onIceStateChange(evt) {// eslint-disable-line no-unused-vars
        }
    }, {
        key: 'logger',
        get: function get() {
            return this._rtcSession._logger;
        }
    }, {
        key: 'name',
        get: function get() {
            return "RTCSessionState";
        }
    }]);
    return RTCSessionState;
}();

var GrabLocalMediaState = exports.GrabLocalMediaState = function (_RTCSessionState) {
    (0, _inherits3.default)(GrabLocalMediaState, _RTCSessionState);

    function GrabLocalMediaState() {
        (0, _classCallCheck3.default)(this, GrabLocalMediaState);
        return (0, _possibleConstructorReturn3.default)(this, (GrabLocalMediaState.__proto__ || Object.getPrototypeOf(GrabLocalMediaState)).apply(this, arguments));
    }

    (0, _createClass3.default)(GrabLocalMediaState, [{
        key: 'onEnter',
        value: function onEnter() {
            var self = this;
            var startTime = Date.now();
            if (self._rtcSession._isUserProvidedStream) {
                self.transit(new CreateOfferState(self._rtcSession));
            } else {
                var gumTimeoutPromise = new Promise(function (resolve, reject) {
                    setTimeout(function () {
                        reject(new _exceptions.GumTimeout('Local media has not been initialized yet.'));
                    }, self._rtcSession._gumTimeoutMillis);
                });
                var sessionGumPromise = self._gUM(self._rtcSession._buildMediaConstraints());

                Promise.race([sessionGumPromise, gumTimeoutPromise]).then(function (stream) {
                    self._rtcSession._sessionReport.gumTimeMillis = Date.now() - startTime;
                    self._rtcSession._onGumSuccess(self._rtcSession);
                    self._rtcSession._localStream = stream;
                    self._rtcSession._sessionReport.gumOtherFailure = false;
                    self._rtcSession._sessionReport.gumTimeoutFailure = false;
                    self.transit(new CreateOfferState(self._rtcSession));
                }).catch(function (e) {
                    self._rtcSession._sessionReport.gumTimeMillis = Date.now() - startTime;
                    var errorReason;
                    if (e instanceof _exceptions.GumTimeout) {
                        errorReason = _rtc_const.RTC_ERRORS.GUM_TIMEOUT_FAILURE;
                        self._rtcSession._sessionReport.gumTimeoutFailure = true;
                        self._rtcSession._sessionReport.gumOtherFailure = false;
                    } else {
                        errorReason = _rtc_const.RTC_ERRORS.GUM_OTHER_FAILURE;
                        self._rtcSession._sessionReport.gumOtherFailure = true;
                        self._rtcSession._sessionReport.gumTimeoutFailure = false;
                    }
                    self.logger.error('Local media initialization failed', e);
                    self._rtcSession._onGumError(self._rtcSession);
                    self.transit(new FailedState(self._rtcSession, errorReason));
                });
            }
        }
    }, {
        key: '_gUM',
        value: function _gUM(constraints) {
            return this._rtcSession._strategy._gUM(constraints);
        }
    }, {
        key: 'name',
        get: function get() {
            return "GrabLocalMediaState";
        }
    }]);
    return GrabLocalMediaState;
}(RTCSessionState);

var CreateOfferState = exports.CreateOfferState = function (_RTCSessionState2) {
    (0, _inherits3.default)(CreateOfferState, _RTCSessionState2);

    function CreateOfferState() {
        (0, _classCallCheck3.default)(this, CreateOfferState);
        return (0, _possibleConstructorReturn3.default)(this, (CreateOfferState.__proto__ || Object.getPrototypeOf(CreateOfferState)).apply(this, arguments));
    }

    (0, _createClass3.default)(CreateOfferState, [{
        key: 'onEnter',
        value: function onEnter() {
            var self = this;
            var stream = self._rtcSession._localStream;
            self._rtcSession._strategy.addStream(self._rtcSession._pc, stream);
            self._rtcSession._onLocalStreamAdded(self._rtcSession, stream);
            self._rtcSession._pc.createOffer().then(function (rtcSessionDescription) {
                self._rtcSession._localSessionDescription = rtcSessionDescription;
                self._rtcSession._sessionReport.createOfferFailure = false;
                self.transit(new SetLocalSessionDescriptionState(self._rtcSession));
            }).catch(function (e) {
                self.logger.error('CreateOffer failed', e);
                self._rtcSession._sessionReport.createOfferFailure = true;
                self.transit(new FailedState(self._rtcSession, _rtc_const.RTC_ERRORS.CREATE_OFFER_FAILURE));
            });
        }
    }, {
        key: 'name',
        get: function get() {
            return "CreateOfferState";
        }
    }]);
    return CreateOfferState;
}(RTCSessionState);

var SetLocalSessionDescriptionState = exports.SetLocalSessionDescriptionState = function (_RTCSessionState3) {
    (0, _inherits3.default)(SetLocalSessionDescriptionState, _RTCSessionState3);

    function SetLocalSessionDescriptionState() {
        (0, _classCallCheck3.default)(this, SetLocalSessionDescriptionState);
        return (0, _possibleConstructorReturn3.default)(this, (SetLocalSessionDescriptionState.__proto__ || Object.getPrototypeOf(SetLocalSessionDescriptionState)).apply(this, arguments));
    }

    (0, _createClass3.default)(SetLocalSessionDescriptionState, [{
        key: 'onEnter',
        value: function onEnter() {
            var self = this;

            // fix/modify SDP as needed here, before setLocalDescription
            var localDescription = self._rtcSession._localSessionDescription;
            var sdpOptions = new _utils.SdpOptions();
            // Set audio codec.
            if (self._rtcSession._forceAudioCodec) {
                sdpOptions.forceCodec['audio'] = self._rtcSession._forceAudioCodec;
            }
            // Set video codec.
            if (self._rtcSession._forceVideoCodec) {
                sdpOptions.forceCodec['video'] = self._rtcSession._forceVideoCodec;
            }
            sdpOptions.enableOpusDtx = self._rtcSession._enableOpusDtx;

            var transformedSdp = (0, _utils.transformSdp)(localDescription.sdp, sdpOptions);
            localDescription.sdp = transformedSdp.sdp;
            localDescription.sdp += 'a=ptime:20\r\n';
            localDescription.sdp += 'a=maxptime:20\r\n';
            localDescription.sdp = localDescription.sdp.replace("minptime=10", "minptime=20");

            self.logger.info('LocalSD', self._rtcSession._localSessionDescription);
            self._rtcSession._pc.setLocalDescription(self._rtcSession._localSessionDescription).then(function () {
                var initializationTime = Date.now() - self._rtcSession._connectTimeStamp;
                self._rtcSession._sessionReport.initializationTimeMillis = initializationTime;
                self._rtcSession._onSessionInitialized(self._rtcSession, initializationTime);
                self._rtcSession._sessionReport.setLocalDescriptionFailure = false;
                self.transit(new ConnectSignalingAndIceCollectionState(self._rtcSession, transformedSdp.mLines));
            }).catch(function (e) {
                self.logger.error('SetLocalDescription failed', e);
                self._rtcSession._sessionReport.setLocalDescriptionFailure = true;
                self.transit(new FailedState(self._rtcSession, _rtc_const.RTC_ERRORS.SET_LOCAL_DESCRIPTION_FAILURE));
            });
        }
    }, {
        key: 'name',
        get: function get() {
            return "SetLocalSessionDescriptionState";
        }
    }]);
    return SetLocalSessionDescriptionState;
}(RTCSessionState);

/**
 * Kick off signaling connection. Wait until signaling connects and ICE collection (which already started in previous state) completes.
 * ICE collection times out after user specified amount of time (default to DEFAULT_ICE_TIMEOUT_MS) in case user has complex network environment that blackholes STUN/TURN requests. In this case at least one candidate is required to move forward.
 * ICE collection could also wrap up before timeout if it's determined that RTP candidates from same TURN server have been collected for all m lines.
 */


var ConnectSignalingAndIceCollectionState = exports.ConnectSignalingAndIceCollectionState = function (_RTCSessionState4) {
    (0, _inherits3.default)(ConnectSignalingAndIceCollectionState, _RTCSessionState4);

    /**
     * Create ConnectSignalingAndIceCollectionState object.
     * @param {RtcSession} rtcSession
     * @param {number} mLines Number of m lines in SDP
     */
    function ConnectSignalingAndIceCollectionState(rtcSession, mLines) {
        (0, _classCallCheck3.default)(this, ConnectSignalingAndIceCollectionState);

        var _this4 = (0, _possibleConstructorReturn3.default)(this, (ConnectSignalingAndIceCollectionState.__proto__ || Object.getPrototypeOf(ConnectSignalingAndIceCollectionState)).call(this, rtcSession));

        _this4._iceCandidates = [];
        _this4._iceCandidateFoundationsMap = {};
        _this4._mLines = mLines;
        return _this4;
    }

    (0, _createClass3.default)(ConnectSignalingAndIceCollectionState, [{
        key: 'onEnter',
        value: function onEnter() {
            var self = this;
            self._startTime = Date.now();
            setTimeout(function () {
                if (self._isCurrentState() && !self._iceCompleted) {
                    self.logger.warn('ICE collection timed out');
                    self._reportIceCompleted(true);
                }
            }, self._rtcSession._iceTimeoutMillis);
            self._rtcSession._createSignalingChannel().connect();
        }
    }, {
        key: 'onSignalingConnected',
        value: function onSignalingConnected() {
            this._rtcSession._signallingConnectTimestamp = Date.now();
            this._rtcSession._sessionReport.signallingConnectTimeMillis = this._rtcSession._signallingConnectTimestamp - this._startTime;
            this._signalingConnected = true;
            this._rtcSession._onSignalingConnected(this._rtcSession);
            this._rtcSession._sessionReport.signallingConnectionFailure = false;
            this._checkAndTransit();
        }
    }, {
        key: 'onSignalingFailed',
        value: function onSignalingFailed(e) {
            this._rtcSession._sessionReport.signallingConnectTimeMillis = Date.now() - this._startTime;
            this.logger.error('Failed connecting to signaling server', e);
            this._rtcSession._sessionReport.signallingConnectionFailure = true;
            this.transit(new FailedState(this._rtcSession, _rtc_const.RTC_ERRORS.SIGNALLING_CONNECTION_FAILURE));
        }
    }, {
        key: '_createLocalCandidate',
        value: function _createLocalCandidate(initDict) {
            return new RTCIceCandidate(initDict);
        }
    }, {
        key: 'onIceCandidate',
        value: function onIceCandidate(evt) {
            var candidate = evt.candidate;
            this.logger.log('onicecandidate ' + JSON.stringify(candidate));
            if (candidate) {
                if (candidate.candidate) {
                    this._iceCandidates.push(this._createLocalCandidate(candidate));
                    if (!this._iceCompleted) {
                        this._checkCandidatesSufficient(candidate);
                    }
                }
            } else {
                this._reportIceCompleted(false);
            }
        }
    }, {
        key: '_checkCandidatesSufficient',
        value: function _checkCandidatesSufficient(candidate) {
            //check if we collected sufficient candidates from single media server to start the call
            var candidateObj = (0, _sdp.parseCandidate)(candidate.candidate);
            if (candidateObj.component != 1) {
                return;
            }
            var candidateFoundation = candidateObj.foundation;
            var candidateMLineIndex = candidate.sdpMLineIndex;
            if (candidateFoundation && candidateMLineIndex >= 0 && candidateMLineIndex < this._mLines) {
                var mIndexList = this._iceCandidateFoundationsMap[candidateFoundation] || [];
                if (!mIndexList.includes(candidateMLineIndex)) {
                    mIndexList.push(candidateMLineIndex);
                }
                this._iceCandidateFoundationsMap[candidateFoundation] = mIndexList;

                if (this._mLines == mIndexList.length) {
                    this._reportIceCompleted(false);
                }
            }
        }
    }, {
        key: '_reportIceCompleted',
        value: function _reportIceCompleted(isTimeout) {
            this._rtcSession._sessionReport.iceCollectionTimeMillis = Date.now() - this._startTime;
            this._iceCompleted = true;
            this._rtcSession._onIceCollectionComplete(this._rtcSession, isTimeout, this._iceCandidates.length);
            if (this._iceCandidates.length > 0) {
                this._rtcSession._sessionReport.iceCollectionFailure = false;
                this._checkAndTransit();
            } else {
                this.logger.error('No ICE candidate');
                this._rtcSession._sessionReport.iceCollectionFailure = true;
                this.transit(new FailedState(this._rtcSession, _rtc_const.RTC_ERRORS.ICE_COLLECTION_TIMEOUT));
            }
        }
    }, {
        key: '_checkAndTransit',
        value: function _checkAndTransit() {
            if (this._iceCompleted && this._signalingConnected) {
                this.transit(new InviteAnswerState(this._rtcSession, this._iceCandidates));
            } else if (!this._iceCompleted) {
                this.logger.log('Pending ICE collection');
            } else {
                //implies _signalingConnected == false
                this.logger.log('Pending signaling connection');
            }
        }
    }, {
        key: 'name',
        get: function get() {
            return "ConnectSignalingAndIceCollectionState";
        }
    }]);
    return ConnectSignalingAndIceCollectionState;
}(RTCSessionState);

var InviteAnswerState = exports.InviteAnswerState = function (_RTCSessionState5) {
    (0, _inherits3.default)(InviteAnswerState, _RTCSessionState5);

    function InviteAnswerState(rtcSession, iceCandidates) {
        (0, _classCallCheck3.default)(this, InviteAnswerState);

        var _this5 = (0, _possibleConstructorReturn3.default)(this, (InviteAnswerState.__proto__ || Object.getPrototypeOf(InviteAnswerState)).call(this, rtcSession));

        _this5._iceCandidates = iceCandidates;
        return _this5;
    }

    (0, _createClass3.default)(InviteAnswerState, [{
        key: 'onEnter',
        value: function onEnter() {
            var rtcSession = this._rtcSession;
            rtcSession._onSignalingStarted(rtcSession);
            rtcSession._signalingChannel.invite(rtcSession._localSessionDescription.sdp, this._iceCandidates);
        }
    }, {
        key: 'onSignalingAnswered',
        value: function onSignalingAnswered(sdp, candidates) {
            this._rtcSession._sessionReport.userBusyFailure = false;
            this._rtcSession._sessionReport.handshakingFailure = false;
            this.transit(new AcceptState(this._rtcSession, sdp, candidates));
        }
    }, {
        key: 'onSignalingFailed',
        value: function onSignalingFailed(e) {
            var reason;
            if (e.name == _exceptions.BusyExceptionName) {
                this.logger.error('User Busy, possibly multiple CCP windows open', e);
                this._rtcSession._sessionReport.userBusyFailure = true;
                this._rtcSession._sessionReport.handshakingFailure = true;
                reason = _rtc_const.RTC_ERRORS.USER_BUSY;
            } else if (e.name == _exceptions.CallNotFoundExceptionName) {
                this.logger.error('Call not found. One of the participant probably hungup.', e);
                reason = _rtc_const.RTC_ERRORS.CALL_NOT_FOUND;
                this._rtcSession._sessionReport.handshakingFailure = true;
            } else {
                this.logger.error('Failed handshaking with signaling server', e);
                this._rtcSession._sessionReport.userBusyFailure = false;
                this._rtcSession._sessionReport.handshakingFailure = true;
                reason = _rtc_const.RTC_ERRORS.SIGNALLING_HANDSHAKE_FAILURE;
            }
            this.transit(new FailedState(this._rtcSession, reason));
        }
    }, {
        key: 'name',
        get: function get() {
            return "InviteAnswerState";
        }
    }]);
    return InviteAnswerState;
}(RTCSessionState);

var AcceptState = exports.AcceptState = function (_RTCSessionState6) {
    (0, _inherits3.default)(AcceptState, _RTCSessionState6);

    function AcceptState(rtcSession, sdp, candidates) {
        (0, _classCallCheck3.default)(this, AcceptState);

        var _this6 = (0, _possibleConstructorReturn3.default)(this, (AcceptState.__proto__ || Object.getPrototypeOf(AcceptState)).call(this, rtcSession));

        _this6._sdp = sdp;
        _this6._candidates = candidates;
        return _this6;
    }

    (0, _createClass3.default)(AcceptState, [{
        key: '_createSessionDescription',
        value: function _createSessionDescription(initDict) {
            return new RTCSessionDescription(initDict);
        }
    }, {
        key: '_createRemoteCandidate',
        value: function _createRemoteCandidate(initDict) {
            return new RTCIceCandidate(initDict);
        }
    }, {
        key: 'onEnter',
        value: function onEnter() {
            var self = this;
            var rtcSession = self._rtcSession;

            if (!self._sdp) {
                self.logger.error('Invalid remote SDP');
                rtcSession._stopSession();
                rtcSession._sessionReport.invalidRemoteSDPFailure = true;
                self.transit(new FailedState(rtcSession, _rtc_const.RTC_ERRORS.INVALID_REMOTE_SDP));
                return;
            } else if (!self._candidates || self._candidates.length < 1) {
                self.logger.error('No remote ICE candidate');
                rtcSession._stopSession();
                rtcSession._sessionReport.noRemoteIceCandidateFailure = true;
                self.transit(new FailedState(rtcSession, _rtc_const.RTC_ERRORS.NO_REMOTE_ICE_CANDIDATE));
                return;
            }

            rtcSession._sessionReport.invalidRemoteSDPFailure = false;
            rtcSession._sessionReport.noRemoteIceCandidateFailure = false;
            self._rtcSession._strategy.setRemoteDescription(self, rtcSession);
        }
    }, {
        key: 'onSignalingHandshaked',
        value: function onSignalingHandshaked() {
            this._rtcSession._sessionReport.handshakingTimeMillis = Date.now() - this._rtcSession._signallingConnectTimestamp;
            this._signalingHandshaked = true;
            this._checkAndTransit();
        }
    }, {
        key: '_checkAndTransit',
        value: function _checkAndTransit() {
            if (this._signalingHandshaked && this._remoteDescriptionSet) {
                this.transit(new TalkingState(this._rtcSession));
            } else if (!this._signalingHandshaked) {
                this.logger.log('Pending handshaking');
            } else {
                //implies _remoteDescriptionSet == false
                this.logger.log('Pending setting remote description');
            }
        }
    }, {
        key: 'name',
        get: function get() {
            return "AcceptState";
        }
    }]);
    return AcceptState;
}(RTCSessionState);

var TalkingState = exports.TalkingState = function (_RTCSessionState7) {
    (0, _inherits3.default)(TalkingState, _RTCSessionState7);

    function TalkingState() {
        (0, _classCallCheck3.default)(this, TalkingState);
        return (0, _possibleConstructorReturn3.default)(this, (TalkingState.__proto__ || Object.getPrototypeOf(TalkingState)).apply(this, arguments));
    }

    (0, _createClass3.default)(TalkingState, [{
        key: 'onEnter',
        value: function onEnter() {
            this._startTime = Date.now();
            this._rtcSession._sessionReport.preTalkingTimeMillis = this._startTime - this._rtcSession._connectTimeStamp;
            this._rtcSession._onSessionConnected(this._rtcSession);
        }
    }, {
        key: 'onSignalingReconnected',
        value: function onSignalingReconnected() {}
    }, {
        key: 'onRemoteHungup',
        value: function onRemoteHungup() {
            this._rtcSession._signalingChannel.hangup();
            this.transit(new DisconnectedState(this._rtcSession));
        }
    }, {
        key: 'hangup',
        value: function hangup() {
            this._rtcSession._signalingChannel.hangup();
            this.transit(new DisconnectedState(this._rtcSession));
        }
    }, {
        key: 'onIceStateChange',
        value: function onIceStateChange(evt) {
            var iceState = this._rtcSession._strategy.onIceStateChange(evt, this._rtcSession._pc);
            this.logger.info('ICE Connection State: ', iceState);

            if (iceState == _rtc_const.ICE_CONNECTION_STATE.DISCONNECTED) {
                this.logger.info('Lost ICE connection');
                this._rtcSession._sessionReport.iceConnectionsLost += 1;
            }
            if (iceState == _rtc_const.ICE_CONNECTION_STATE.FAILED) {
                this._rtcSession._sessionReport.iceConnectionsFailed = true;
            }
        }
    }, {
        key: 'onPeerConnectionStateChange',
        value: function onPeerConnectionStateChange() {
            var peerConnectionState = this._rtcSession._strategy.onPeerConnectionStateChange(this._rtcSession._pc);
            this.logger.info('Peer Connection State: ', peerConnectionState);

            if (peerConnectionState == _rtc_const.PEER_CONNECTION_STATE.FAILED) {
                this._rtcSession._sessionReport.peerConnectionFailed = true;
            }
        }
    }, {
        key: 'onExit',
        value: function onExit() {
            this._rtcSession._sessionReport.talkingTimeMillis = Date.now() - this._startTime;
            this._rtcSession._detachMedia();
            this._rtcSession._sessionReport.sessionEndTime = new Date();
            this._rtcSession._onSessionCompleted(this._rtcSession);
        }
    }, {
        key: 'name',
        get: function get() {
            return "TalkingState";
        }
    }]);
    return TalkingState;
}(RTCSessionState);

var CleanUpState = exports.CleanUpState = function (_RTCSessionState8) {
    (0, _inherits3.default)(CleanUpState, _RTCSessionState8);

    function CleanUpState() {
        (0, _classCallCheck3.default)(this, CleanUpState);
        return (0, _possibleConstructorReturn3.default)(this, (CleanUpState.__proto__ || Object.getPrototypeOf(CleanUpState)).apply(this, arguments));
    }

    (0, _createClass3.default)(CleanUpState, [{
        key: 'onEnter',
        value: function onEnter() {
            this._startTime = Date.now();
            this._rtcSession._stopSession();
            this._rtcSession._sessionReport.cleanupTimeMillis = Date.now() - this._startTime;
            this._rtcSession._onSessionDestroyed(this._rtcSession, this._rtcSession._sessionReport);
        }
    }, {
        key: 'hangup',
        value: function hangup() {
            //do nothing, already at the end of lifecycle
        }
    }, {
        key: 'name',
        get: function get() {
            return "CleanUpState";
        }
    }]);
    return CleanUpState;
}(RTCSessionState);

var DisconnectedState = exports.DisconnectedState = function (_CleanUpState) {
    (0, _inherits3.default)(DisconnectedState, _CleanUpState);

    function DisconnectedState() {
        (0, _classCallCheck3.default)(this, DisconnectedState);
        return (0, _possibleConstructorReturn3.default)(this, (DisconnectedState.__proto__ || Object.getPrototypeOf(DisconnectedState)).apply(this, arguments));
    }

    (0, _createClass3.default)(DisconnectedState, [{
        key: 'name',
        get: function get() {
            return "DisconnectedState";
        }
    }]);
    return DisconnectedState;
}(CleanUpState);

var FailedState = exports.FailedState = function (_CleanUpState2) {
    (0, _inherits3.default)(FailedState, _CleanUpState2);

    function FailedState(rtcSession, failureReason) {
        (0, _classCallCheck3.default)(this, FailedState);

        var _this10 = (0, _possibleConstructorReturn3.default)(this, (FailedState.__proto__ || Object.getPrototypeOf(FailedState)).call(this, rtcSession));

        _this10._failureReason = failureReason;
        return _this10;
    }

    (0, _createClass3.default)(FailedState, [{
        key: 'onEnter',
        value: function onEnter() {
            this._rtcSession._sessionReport.sessionEndTime = new Date();
            this._rtcSession._onSessionFailed(this._rtcSession, this._failureReason);
            (0, _get3.default)(FailedState.prototype.__proto__ || Object.getPrototypeOf(FailedState.prototype), 'onEnter', this).call(this);
        }
    }, {
        key: 'name',
        get: function get() {
            return "FailedState";
        }
    }]);
    return FailedState;
}(CleanUpState);

var RtcSession = function () {
    /**
     * Build an AmazonConnect RTC session.
     * @param {*} signalingUri
     * @param {*} iceServers Array of ice servers
     * @param {*} contactToken A string representing the contact token (optional)
     * @param {*} logger An object provides logging functions, such as console
     * @param {*} contactId Must be UUID, uniquely identifies the session.
     */
    function RtcSession(signalingUri, iceServers, contactToken, logger, contactId, connectionId, wssManager) {
        var strategy = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : new _StandardStrategy2.default();
        (0, _classCallCheck3.default)(this, RtcSession);

        if (!(strategy instanceof _CCPInitiationStrategyInterface2.default)) {
            throw new Error('Expected a strategy of type CCPInitiationStrategyInterface');
        }
        if (typeof signalingUri !== 'string' || signalingUri.trim().length === 0) {
            throw new _exceptions.IllegalParameters('signalingUri required');
        }
        if (!iceServers) {
            throw new _exceptions.IllegalParameters('iceServers required');
        }
        if ((typeof logger === 'undefined' ? 'undefined' : (0, _typeof3.default)(logger)) !== 'object') {
            throw new _exceptions.IllegalParameters('logger required');
        }
        if (!contactId) {
            this._callId = (0, _v2.default)();
        } else {
            this._callId = contactId;
        }
        this._strategy = strategy;
        this._connectionId = connectionId;
        this._wssManager = wssManager;
        this._sessionReport = new _session_report.SessionReport();
        this._signalingUri = signalingUri;
        this._iceServers = iceServers;
        this._contactToken = contactToken;
        this._originalLogger = logger;
        this._logger = (0, _utils.wrapLogger)(this._originalLogger, this._callId, 'SESSION');
        this._iceTimeoutMillis = _rtc_const.DEFAULT_ICE_TIMEOUT_MS;
        this._gumTimeoutMillis = _rtc_const.DEFAULT_GUM_TIMEOUT_MS;

        this._enableAudio = true;
        this._enableVideo = false;
        this._facingMode = 'user';
        this._legacyStatsReportSupport = false;
        /**
         * user may provide the stream to the RtcSession directly to connect to the other end.
         * user may also acquire the stream from the local device.
         * This flag is used to track where the stream is acquired.
         * If it's acquired from local devices, then we must close the stream when the session ends.
         * If it's provided by user (rather than local camera/microphone), then we should leave it open when the
         * session ends.
         */
        this._isUserProvidedStream = false;

        this._onGumError = this._onGumSuccess = this._onLocalStreamAdded = this._onSessionFailed = this._onSessionInitialized = this._onSignalingConnected = this._onIceCollectionComplete = this._onSignalingStarted = this._onSessionConnected = this._onRemoteStreamAdded = this._onSessionCompleted = this._onSessionDestroyed = function () {};
    }

    (0, _createClass3.default)(RtcSession, [{
        key: 'pauseLocalVideo',
        value: function pauseLocalVideo() {
            if (this._localStream) {
                var videoTrack = this._localStream.getVideoTracks()[0];
                if (videoTrack) {
                    videoTrack.enabled = false;
                }
            }
        }
    }, {
        key: 'resumeLocalVideo',
        value: function resumeLocalVideo() {
            if (this._localStream) {
                var videoTrack = this._localStream.getVideoTracks()[0];
                if (videoTrack) {
                    videoTrack.enabled = true;
                }
            }
        }
    }, {
        key: 'pauseRemoteVideo',
        value: function pauseRemoteVideo() {
            if (this._remoteVideoStream) {
                var videoTrack = this._remoteVideoStream.getTracks()[1];
                if (videoTrack) {
                    videoTrack.enabled = false;
                }
            }
        }
    }, {
        key: 'resumeRemoteVideo',
        value: function resumeRemoteVideo() {
            if (this._remoteVideoStream) {
                var videoTrack = this._remoteVideoStream.getTracks()[1];
                if (videoTrack) {
                    videoTrack.enabled = true;
                }
            }
        }
    }, {
        key: 'pauseLocalAudio',
        value: function pauseLocalAudio() {
            if (this._localStream) {
                var audioTrack = this._localStream.getAudioTracks()[0];
                if (audioTrack) {
                    audioTrack.enabled = false;
                }
            }
        }
    }, {
        key: 'resumeLocalAudio',
        value: function resumeLocalAudio() {
            if (this._localStream) {
                var audioTrack = this._localStream.getAudioTracks()[0];
                if (audioTrack) {
                    audioTrack.enabled = true;
                }
            }
        }
    }, {
        key: 'pauseRemoteAudio',
        value: function pauseRemoteAudio() {
            if (this._remoteAudioStream) {
                var audioTrack = this._remoteAudioStream.getTracks()[0];
                if (audioTrack) {
                    audioTrack.enabled = false;
                }
            }
        }
    }, {
        key: 'resumeRemoteAudio',
        value: function resumeRemoteAudio() {
            if (this._remoteAudioStream) {
                var audioTrack = this._remoteAudioStream.getTracks()[0];
                if (audioTrack) {
                    audioTrack.enabled = true;
                }
            }
        }
        /**
         * Callback when gUM succeeds.
         * First param is RtcSession object.
         */

    }, {
        key: 'transit',
        value: function transit(nextState) {
            try {
                this._logger.info((this._state ? this._state.name : 'null') + ' => ' + nextState.name);
                if (this._state && this._state.onExit) {
                    this._state.onExit();
                }
            } finally {
                this._state = nextState;
                if (nextState.onEnter) {
                    try {
                        nextState.onEnter();
                    } catch (e) {
                        this._logger.warn(nextState.name + '#onEnter failed', e);
                        throw e; // eslint-disable-line no-unsafe-finally
                    }
                }
            }
        }
    }, {
        key: '_createSignalingChannel',
        value: function _createSignalingChannel() {
            var signalingChannel = new _signaling2.default(this._callId, this._signalingUri, this._contactToken, this._originalLogger, this._signalingConnectTimeout, this._connectionId, this._wssManager);
            signalingChannel.onConnected = (0, _utils.hitch)(this, this._signalingConnected);
            signalingChannel.onAnswered = (0, _utils.hitch)(this, this._signalingAnswered);
            signalingChannel.onHandshaked = (0, _utils.hitch)(this, this._signalingHandshaked);
            signalingChannel.onRemoteHungup = (0, _utils.hitch)(this, this._signalingRemoteHungup);
            signalingChannel.onFailed = (0, _utils.hitch)(this, this._signalingFailed);
            signalingChannel.onDisconnected = (0, _utils.hitch)(this, this._signalingDisconnected);

            this._signalingChannel = signalingChannel;

            return signalingChannel;
        }
    }, {
        key: '_signalingConnected',
        value: function _signalingConnected() {
            this._state.onSignalingConnected();
        }
    }, {
        key: '_signalingAnswered',
        value: function _signalingAnswered(sdp, candidates) {
            this._state.onSignalingAnswered(sdp, candidates);
        }
    }, {
        key: '_signalingHandshaked',
        value: function _signalingHandshaked() {
            this._state.onSignalingHandshaked();
        }
    }, {
        key: '_signalingRemoteHungup',
        value: function _signalingRemoteHungup() {
            this._state.onRemoteHungup();
        }
    }, {
        key: '_signalingFailed',
        value: function _signalingFailed(e) {
            this._state.onSignalingFailed(e);
        }
    }, {
        key: '_signalingDisconnected',
        value: function _signalingDisconnected() {}
    }, {
        key: '_createPeerConnection',
        value: function _createPeerConnection(configuration, optionalConfiguration) {
            return this._strategy._createPeerConnection(configuration, optionalConfiguration);
        }
    }, {
        key: 'connect',
        value: function connect(pc) {
            var self = this;
            var now = new Date();
            self._sessionReport.sessionStartTime = now;
            self._connectTimeStamp = now.getTime();
            if (pc && pc.signalingState != 'closed') {
                self._pc = pc;
            } else {
                if (pc) {
                    pc.close();
                    pc = null;
                }
                _rtc_const.RTC_PEER_CONNECTION_CONFIG.iceServers = self._iceServers;
                self._pc = self._createPeerConnection(_rtc_const.RTC_PEER_CONNECTION_CONFIG, _rtc_const.RTC_PEER_CONNECTION_OPTIONAL_CONFIG);
            }
            self._pc.ontrack = (0, _utils.hitch)(self, self._ontrack);
            self._pc.onicecandidate = (0, _utils.hitch)(self, self._onIceCandidate);
            self._pc.onconnectionstatechange = (0, _utils.hitch)(self, self._onPeerConnectionStateChange);
            self._pc.oniceconnectionstatechange = (0, _utils.hitch)(self, self._onIceStateChange);

            (0, _utils.isLegacyStatsReportSupported)(self._pc).then(function (result) {
                self._legacyStatsReportSupport = result;
                self.transit(new GrabLocalMediaState(self));
            });
        }
    }, {
        key: 'accept',
        value: function accept() {
            throw new _exceptions.UnsupportedOperation('accept does not go through signaling channel at this moment');
        }
    }, {
        key: 'hangup',
        value: function hangup() {
            this._state.hangup();
        }

        /**
         * Get a promise containing an object with two named lists of audio stats, one for each channel on each
         * media type of 'video' and 'audio'.
         * @return Rejected promise if failed to get MediaRtpStats. The promise is never resolved with null value.
         */

    }, {
        key: 'getStats',
        value: function () {
            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3() {
                var _this11 = this;

                var timestamp, impl, statsResult, rttReducer, audioInputRttMilliseconds, videoInputRttMilliseconds;
                return _regenerator2.default.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                timestamp = new Date();

                                impl = function () {
                                    var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(stream, streamType) {
                                        var tracks;
                                        return _regenerator2.default.wrap(function _callee2$(_context2) {
                                            while (1) {
                                                switch (_context2.prev = _context2.next) {
                                                    case 0:
                                                        tracks = [];

                                                        if (stream) {
                                                            _context2.next = 3;
                                                            break;
                                                        }

                                                        return _context2.abrupt('return', []);

                                                    case 3:
                                                        _context2.t0 = streamType;
                                                        _context2.next = _context2.t0 === 'audio_input' ? 6 : _context2.t0 === 'audio_output' ? 6 : _context2.t0 === 'video_input' ? 8 : _context2.t0 === 'video_output' ? 8 : 10;
                                                        break;

                                                    case 6:
                                                        tracks = stream.getAudioTracks();
                                                        return _context2.abrupt('break', 11);

                                                    case 8:
                                                        tracks = stream.getVideoTracks();
                                                        return _context2.abrupt('break', 11);

                                                    case 10:
                                                        throw new Error('Unsupported stream type while trying to get stats: ' + streamType);

                                                    case 11:
                                                        _context2.next = 13;
                                                        return Promise.all(tracks.map((0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
                                                            return _regenerator2.default.wrap(function _callee$(_context) {
                                                                while (1) {
                                                                    switch (_context.prev = _context.next) {
                                                                        case 0:
                                                                            return _context.abrupt('return', _this11._pc.getStats().then(function (rawStats) {
                                                                                var digestedStats = (0, _rtpStats.extractMediaStatsFromStats)(timestamp, rawStats, streamType);
                                                                                if (!digestedStats) {
                                                                                    throw new Error('Failed to extract MediaRtpStats from RTCStatsReport for stream type ' + streamType);
                                                                                }
                                                                                return digestedStats;
                                                                            }));

                                                                        case 1:
                                                                        case 'end':
                                                                            return _context.stop();
                                                                    }
                                                                }
                                                            }, _callee, _this11);
                                                        }))));

                                                    case 13:
                                                        return _context2.abrupt('return', _context2.sent);

                                                    case 14:
                                                    case 'end':
                                                        return _context2.stop();
                                                }
                                            }
                                        }, _callee2, _this11);
                                    }));

                                    return function impl(_x2, _x3) {
                                        return _ref2.apply(this, arguments);
                                    };
                                }();

                                if (!(this._pc && this._pc.signalingState === 'stable')) {
                                    _context3.next = 26;
                                    break;
                                }

                                _context3.next = 5;
                                return impl(this._remoteAudioStream, 'audio_input');

                            case 5:
                                _context3.t0 = _context3.sent;
                                _context3.next = 8;
                                return impl(this._localStream, 'audio_output');

                            case 8:
                                _context3.t1 = _context3.sent;
                                _context3.t2 = {
                                    input: _context3.t0,
                                    output: _context3.t1
                                };
                                _context3.next = 12;
                                return impl(this._remoteVideoStream, 'video_input');

                            case 12:
                                _context3.t3 = _context3.sent;
                                _context3.next = 15;
                                return impl(this._localStream, 'video_output');

                            case 15:
                                _context3.t4 = _context3.sent;
                                _context3.t5 = {
                                    input: _context3.t3,
                                    output: _context3.t4
                                };
                                statsResult = {
                                    audio: _context3.t2,
                                    video: _context3.t5
                                };

                                // For consistency's sake, coalesce rttMilliseconds into the output for audio and video.
                                rttReducer = function rttReducer(acc, stats) {
                                    if (stats.rttMilliseconds !== null && (acc === null || stats.rttMilliseconds > acc)) {
                                        acc = stats.rttMilliseconds;
                                    }
                                    stats._rttMilliseconds = null;
                                    return acc;
                                };

                                audioInputRttMilliseconds = statsResult.audio.input.reduce(rttReducer, null);
                                videoInputRttMilliseconds = statsResult.video.input.reduce(rttReducer, null);


                                if (audioInputRttMilliseconds !== null) {
                                    statsResult.audio.output.forEach(function (stats) {
                                        stats._rttMilliseconds = audioInputRttMilliseconds;
                                    });
                                }

                                if (videoInputRttMilliseconds !== null) {
                                    statsResult.video.output.forEach(function (stats) {
                                        stats._rttMilliseconds = videoInputRttMilliseconds;
                                    });
                                }

                                return _context3.abrupt('return', statsResult);

                            case 26:
                                return _context3.abrupt('return', Promise.reject(new _exceptions.IllegalState()));

                            case 27:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee3, this);
            }));

            function getStats() {
                return _ref.apply(this, arguments);
            }

            return getStats;
        }()

        /**
         * Get a promise of MediaRtpStats object for remote audio (from Amazon Connect to client).
         * @return Rejected promise if failed to get MediaRtpStats. The promise is never resolved with null value.
         * @deprecated in favor of getStats()
         */

    }, {
        key: 'getRemoteAudioStats',
        value: function getRemoteAudioStats() {
            return this.getStats().then(function (stats) {
                if (stats.audio.output.length > 0) {
                    return stats.audio.output[0];
                } else {
                    return Promise.reject(new _exceptions.IllegalState());
                }
            });
        }

        /**
         * Get a promise of MediaRtpStats object for user audio (from client to Amazon Connect).
         * @return Rejected promise if failed to get MediaRtpStats. The promise is never resolved with null value.
         * @deprecated in favor of getStats()
         */

    }, {
        key: 'getUserAudioStats',
        value: function getUserAudioStats() {
            return this.getStats().then(function (stats) {
                if (stats.audio.input.length > 0) {
                    return stats.audio.input[0];
                } else {
                    return Promise.reject(new _exceptions.IllegalState());
                }
            });
        }

        /**
         * Get a promise of MediaRtpStats object for user video (from client to Amazon Connect).
         * @return Rejected promise if failed to get MediaRtpStats. The promise is never resolved with null value.
         * @deprecated in favor of getStats()
         */

    }, {
        key: 'getRemoteVideoStats',
        value: function getRemoteVideoStats() {
            return this.getStats().then(function (stats) {
                if (stats.video.output.length > 0) {
                    return stats.video.output[0];
                } else {
                    return Promise.reject(new _exceptions.IllegalState());
                }
            });
        }

        /**
         * Get a promise of MediaRtpStats object for user video (from client to Amazon Connect).
         * @return Rejected promise if failed to get MediaRtpStats. The promise is never resolved with null value.
         * @deprecated in favor of getStats()
         */

    }, {
        key: 'getUserVideoStats',
        value: function getUserVideoStats() {
            return this.getStats().then(function (stats) {
                if (stats.video.input.length > 0) {
                    return stats.video.input[0];
                } else {
                    return Promise.reject(new _exceptions.IllegalState());
                }
            });
        }
    }, {
        key: '_onIceCandidate',
        value: function _onIceCandidate(evt) {
            this._state.onIceCandidate(evt);
        }
    }, {
        key: '_onPeerConnectionStateChange',
        value: function _onPeerConnectionStateChange() {
            this._state.onPeerConnectionStateChange();
        }
    }, {
        key: '_onIceStateChange',
        value: function _onIceStateChange(evt) {
            this._state.onIceStateChange(evt);
        }

        /**
         * Attach remote media stream to web element.
         */

    }, {
        key: '_ontrack',
        value: function _ontrack(evt) {
            this._strategy._ontrack(this, evt);
            this._onRemoteStreamAdded(this, evt.streams[0]);
        }
    }, {
        key: '_detachMedia',
        value: function _detachMedia() {
            if (this._remoteVideoElement) {
                this._remoteVideoElement.srcObject = null;
            }
            if (this._remoteAudioElement) {
                this._remoteAudioElement.srcObject = null;
                this._remoteAudioStream = null;
            }
        }
    }, {
        key: '_stopSession',
        value: function _stopSession() {
            try {
                if (this._localStream && !this._isUserProvidedStream) {
                    (0, _utils.closeStream)(this._localStream);
                    this._localStream = null;
                    this._isUserProvidedStream = false;
                }
            } finally {
                try {
                    if (this._pc) {
                        this._pc.close();
                    }
                } catch (e) {
                    // eat exception
                } finally {
                    this._pc = null;
                }
            }
        }
    }, {
        key: '_buildMediaConstraints',
        value: function _buildMediaConstraints() {
            var self = this;
            var mediaConstraints = {};

            self._strategy._buildMediaConstraints(self, mediaConstraints);

            if (self._enableVideo) {
                var videoConstraints = {};
                var widthConstraints = {};
                var heightConstraints = {};
                var frameRateConstraints = {};

                //build video width constraints
                if (typeof self._idealVideoWidth !== 'undefined') {
                    widthConstraints.ideal = self._idealVideoWidth;
                }
                if (typeof self._maxVideoWidth !== 'undefined') {
                    widthConstraints.max = self._maxVideoWidth;
                }
                if (typeof self._minVideoWidth !== 'undefined') {
                    widthConstraints.min = self._minVideoWidth;
                }
                // build video height constraints
                if (typeof self._idealVideoHeight !== 'undefined') {
                    heightConstraints.ideal = self._idealVideoHeight;
                }
                if (typeof self._maxVideoHeight !== 'undefined') {
                    heightConstraints.max = self._maxVideoHeight;
                }
                if (typeof self._minVideoHeight !== 'undefined') {
                    heightConstraints.min = self._minVideoHeight;
                }
                if (Object.keys(widthConstraints).length > 0 && Object.keys(heightConstraints).length > 0) {
                    videoConstraints.width = widthConstraints;
                    videoConstraints.height = heightConstraints;
                }
                // build frame rate constraints
                if (typeof self._videoFrameRate !== 'undefined') {
                    frameRateConstraints.ideal = self._videoFrameRate;
                }
                if (typeof self._minVideoFrameRate !== 'undefined') {
                    frameRateConstraints.min = self._minVideoFrameRate;
                }
                if (typeof self._maxVideoFrameRate !== 'undefined') {
                    frameRateConstraints.max = self._maxVideoFrameRate;
                }
                if (Object.keys(frameRateConstraints).length > 0) {
                    videoConstraints.frameRate = frameRateConstraints;
                }

                // build facing mode constraints
                if (self._facingMode !== 'user' && self._facingMode !== "environment") {
                    self._facingMode = 'user';
                }
                videoConstraints.facingMode = self._facingMode;

                // set video constraints
                if (Object.keys(videoConstraints).length > 0) {
                    mediaConstraints.video = videoConstraints;
                } else {
                    mediaConstraints.video = true;
                }
            }

            return mediaConstraints;
        }
    }, {
        key: 'sessionReport',
        get: function get() {
            return this._sessionReport;
        }
    }, {
        key: 'callId',
        get: function get() {
            return this._callId;
        }
        /**
         * getMediaStream returns the local stream, which may be acquired from local device or from user provided stream.
         * Rather than getting a stream by calling getUserMedia (which gets a stream from local device such as camera),
         * user could also provide the stream to the RtcSession directly to connect to the other end.
         */

    }, {
        key: 'mediaStream',
        get: function get() {
            return this._localStream;
        },

        /**
         * Optional. RtcSession will grab input device if this is not specified.
         * Please note: this RtcSession class only support single audio track and/or single video track.
         */
        set: function set(input) {
            this._localStream = input;
            this._isUserProvidedStream = true;
        }
        /**
         * Needed, expect an audio element that can be used to play remote audio stream.
         */

    }, {
        key: 'remoteVideoStream',
        get: function get() {
            return this._remoteVideoStream;
        }
    }, {
        key: 'onGumSuccess',
        set: function set(handler) {
            this._onGumSuccess = handler;
        }
        /**
         * Callback when gUM fails.
         * First param is RtcSession object.
         * Second param is the error.
         */

    }, {
        key: 'onGumError',
        set: function set(handler) {
            this._onGumError = handler;
        }
        /**
         * Callback if failed initializing local resources
         * First param is RtcSession object.
         */

    }, {
        key: 'onSessionFailed',
        set: function set(handler) {
            this._onSessionFailed = handler;
        }
        /**
         * Callback after local user media stream is added to the session.
         * First param is RtcSession object.
         * Second param is media stream
         */

    }, {
        key: 'onLocalStreamAdded',
        set: function set(handler) {
            this._onLocalStreamAdded = handler;
        }
        /**
         * Callback when all local resources are ready. Establishing signaling chanel and ICE collection happens at the same time after this.
         * First param is RtcSession object.
         */

    }, {
        key: 'onSessionInitialized',
        set: function set(handler) {
            this._onSessionInitialized = handler;
        }
        /**
         * Callback when signaling channel is established.
         * RTC session will move forward only if onSignalingConnected and onIceCollectionComplete are both called.
         *
         * First param is RtcSession object.
         */

    }, {
        key: 'onSignalingConnected',
        set: function set(handler) {
            this._onSignalingConnected = handler;
        }
        /**
         * Callback when ICE collection completes either because there is no more candidate or collection timed out.
         * RTC session will move forward only if onSignalingConnected and onIceCollectionComplete are both called.
         *
         * First param is RtcSession object.
         * Second param is boolean, TRUE - ICE collection timed out.
         * Third param is number of candidates collected.
         */

    }, {
        key: 'onIceCollectionComplete',
        set: function set(handler) {
            this._onIceCollectionComplete = handler;
        }
        /**
         * Callback when signaling channel is established and ICE collection completed with at least one candidate.
         * First param is RtcSession object.
         */

    }, {
        key: 'onSignalingStarted',
        set: function set(handler) {
            this._onSignalingStarted = handler;
        }
        /**
         * Callback when the call is established (handshaked and media stream should be flowing)
         * First param is RtcSession object.
         */

    }, {
        key: 'onSessionConnected',
        set: function set(handler) {
            this._onSessionConnected = handler;
        }
        /**
         * Callback after remote media stream is added to the session.
         * This could be called multiple times with the same stream if multiple tracks are included in the same stream.
         *
         * First param is RtcSession object.
         * Second param is media stream track.
         */

    }, {
        key: 'onRemoteStreamAdded',
        set: function set(handler) {
            this._onRemoteStreamAdded = handler;
        }
        /**
         * Callback when the hangup is initiated (implies the call was successfully established).
         * First param is RtcSession object.
         */

    }, {
        key: 'onSessionCompleted',
        set: function set(handler) {
            this._onSessionCompleted = handler;
        }
        /**
         * Callback after session is cleaned up, no matter if the call was successfully established or not.
         * First param is RtcSession object.
         * Second param is SessionReport object.
         */

    }, {
        key: 'onSessionDestroyed',
        set: function set(handler) {
            this._onSessionDestroyed = handler;
        }
    }, {
        key: 'enableAudio',
        set: function set(flag) {
            this._enableAudio = flag;
        }
    }, {
        key: 'echoCancellation',
        set: function set(flag) {
            this._echoCancellation = flag;
        }
    }, {
        key: 'enableVideo',
        set: function set(flag) {
            this._enableVideo = flag;
        }
    }, {
        key: 'maxVideoFrameRate',
        set: function set(frameRate) {
            this._maxVideoFrameRate = frameRate;
        }
    }, {
        key: 'minVideoFrameRate',
        set: function set(frameRate) {
            this._minVideoFrameRate = frameRate;
        }
    }, {
        key: 'videoFrameRate',
        set: function set(frameRate) {
            this._videoFrameRate = frameRate;
        }
    }, {
        key: 'maxVideoWidth',
        set: function set(width) {
            this._maxVideoWidth = width;
        }
    }, {
        key: 'minVideoWidth',
        set: function set(width) {
            this._minVideoWidth = width;
        }
    }, {
        key: 'idealVideoWidth',
        set: function set(width) {
            this._idealVideoWidth = width;
        }
    }, {
        key: 'maxVideoHeight',
        set: function set(height) {
            this._maxVideoHeight = height;
        }
    }, {
        key: 'minVideoHeight',
        set: function set(height) {
            this._minVideoHeight = height;
        }
    }, {
        key: 'idealVideoHeight',
        set: function set(height) {
            this._idealVideoHeight = height;
        }
    }, {
        key: 'facingMode',
        set: function set(mode) {
            this._facingMode = mode;
        }
    }, {
        key: 'remoteAudioElement',
        set: function set(element) {
            this._remoteAudioElement = element;
        }
    }, {
        key: 'remoteVideoElement',
        set: function set(element) {
            this._remoteVideoElement = element;
        }
        /**
         * Override the default signaling connect time out.
         */

    }, {
        key: 'signalingConnectTimeout',
        set: function set(ms) {
            this._signalingConnectTimeout = ms;
        }
        /**
         * Override the default ICE collection time limit.
         */

    }, {
        key: 'iceTimeoutMillis',
        set: function set(timeoutMillis) {
            this._iceTimeoutMillis = timeoutMillis;
        }
        /**
         * Override the default GUM timeout time limit.
         */

    }, {
        key: 'gumTimeoutMillis',
        set: function set(timeoutMillis) {
            this._gumTimeoutMillis = timeoutMillis;
        }
        /**
         * connect-rtc-js initiate the handshaking with all browser supported codec by default, Amazon Connect service will choose the codec according to its preference setting.
         * Setting this attribute will force connect-rtc-js to only use specified codec.
         * WARNING: Setting this to unsupported codec will cause the failure of handshaking.
         * Supported audio codecs: opus.
         */

    }, {
        key: 'forceAudioCodec',
        set: function set(audioCodec) {
            this._forceAudioCodec = audioCodec;
        }

        /**
         * connect-rtc-js initiate the handshaking with all browser supported codec by default, Amazon Connect service will choose the codec according to its preference setting.
         * Setting this attribute will force connect-rtc-js to only use specified codec.
         * WARNING: Setting this to unsupported codec will cause the failure of handshaking.
         * Supported video codecs: VP8, VP9, H264.
         */

    }, {
        key: 'forceVideoCodec',
        set: function set(videoCodec) {
            this._forceVideoCodec = videoCodec;
        }

        /**
         * connect-rtc-js disables OPUS DTX by default because it harms audio quality.
         * @param flag boolean
         */

    }, {
        key: 'enableOpusDtx',
        set: function set(flag) {
            this._enableOpusDtx = flag;
        }
    }]);
    return RtcSession;
}();

exports.default = RtcSession;

},{"./exceptions":149,"./rtc_const":150,"./rtp-stats":153,"./session_report":154,"./signaling":155,"./strategies/CCPInitiationStrategyInterface":156,"./strategies/StandardStrategy":159,"./utils":160,"babel-runtime/helpers/asyncToGenerator":14,"babel-runtime/helpers/classCallCheck":15,"babel-runtime/helpers/createClass":16,"babel-runtime/helpers/get":17,"babel-runtime/helpers/inherits":18,"babel-runtime/helpers/possibleConstructorReturn":19,"babel-runtime/helpers/typeof":22,"babel-runtime/regenerator":23,"sdp":131,"uuid/v4":134}],153:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

exports.extractMediaStatsFromStats = extractMediaStatsFromStats;

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function extractMediaStatsFromStats(timestamp, stats, streamType) {
    var extractedStats = null;
    var reportType = null;

    stats.forEach(function (statsReport) {
        if (statsReport) {
            if (statsReport.type === 'inbound-rtp' && streamType === 'audio_input') {
                // inbound-rtp: Stats for stream from Server to CCP, as seen on the browser
                reportType = statsReport.type;
                extractedStats = {
                    timestamp: timestamp,
                    packetsLost: statsReport.packetsLost,
                    // packetsCount: number of packet received by CCP, as seen on the browser
                    packetsCount: statsReport.packetsReceived,
                    jbMilliseconds: Math.floor((0, _utils.when_defined)(statsReport.jitter, 0) * 1000),
                    // Multiplying audioLevel by 32768 aligns its value with the legacy getStats API.
                    audioLevel: (0, _utils.is_defined)(statsReport.audioLevel) ? Math.floor(statsReport.audioLevel * 32768) : null
                };
            } else if (statsReport.type === 'outbound-rtp' && streamType === 'audio_output') {
                // outbound-rtp: Stats for stream from CCP to Server, as seen on the browser
                extractedStats = extractedStats || {};
                // packetsCount: number of packet sent by CCP, as seen on the browser
                extractedStats.packetsCount = statsReport.packetsSent;
            } else if (statsReport.type === 'media-source' && streamType === 'audio_output') {
                extractedStats = extractedStats || {};
                // Multiplying audioLevel by 32768 aligns its value with the legacy getStats API.
                extractedStats.audioLevel = (0, _utils.is_defined)(statsReport.audioLevel) ? Math.floor(statsReport.audioLevel * 32768) : null;
            } else if (statsReport.type === 'remote-inbound-rtp' && streamType === 'audio_output') {
                // remote-inbound-rtp: Stats for stream from CCP to Server, as seen on Server side
                reportType = statsReport.type;
                extractedStats = extractedStats || {};
                extractedStats.timestamp = timestamp;
                extractedStats.packetsLost = statsReport.packetsLost;
                extractedStats.rttMilliseconds = (0, _utils.is_defined)(statsReport.roundTripTime) ? Math.floor(statsReport.roundTripTime * 1000) : null;
                extractedStats.jbMilliseconds = Math.floor((0, _utils.when_defined)(statsReport.jitter, 0) * 1000);
            }
        }
    });

    return extractedStats ? new MediaRtpStats(extractedStats, reportType, streamType) : null;
}

/**
 * Basic RTP statistics object, represents statistics of an audio or video stream.
 */
/**
 * Extract rtp stats of specified stream from RTCStatsReport
 * Chrome reports all stream stats in statsReports whereas firefox reports only single stream stats in report
 * StreamType is passed only to pull right stream stats audio_input or audio_output.
 */

var MediaRtpStats = function () {
    function MediaRtpStats(paramsIn, statsReportType, streamType) {
        (0, _classCallCheck3.default)(this, MediaRtpStats);

        var params = paramsIn || {};

        this._timestamp = params.timestamp || new Date().getTime();
        this._packetsLost = (0, _utils.when_defined)(params.packetsLost);
        this._packetsCount = (0, _utils.when_defined)(params.packetsCount);
        this._audioLevel = (0, _utils.when_defined)(params.audioLevel);
        this._procMilliseconds = (0, _utils.when_defined)(params.procMilliseconds);
        this._rttMilliseconds = (0, _utils.when_defined)(params.rttMilliseconds);
        this._jbMilliseconds = (0, _utils.when_defined)(params.jbMilliseconds);
        this._bytesSent = (0, _utils.when_defined)(params.bytesSent);
        this._bytesReceived = (0, _utils.when_defined)(params.bytesReceived);
        this._framesEncoded = (0, _utils.when_defined)(params.framesEncoded);
        this._framesDecoded = (0, _utils.when_defined)(params.framesDecoded);
        this._frameRateSent = (0, _utils.when_defined)(params.frameRateSent);
        this._frameRateReceived = (0, _utils.when_defined)(params.frameRateReceived);
        this._statsReportType = statsReportType || params._statsReportType || "unknown";
        this._streamType = streamType || params.streamType || "unknown";
    }

    /** {number} number of packets sent to the channel */


    (0, _createClass3.default)(MediaRtpStats, [{
        key: 'packetsCount',
        get: function get() {
            return this._packetsCount;
        }
        /** {number} number of packets lost after travelling through the channel */

    }, {
        key: 'packetsLost',
        get: function get() {
            return this._packetsLost;
        }
        /** {number} number of packets lost after travelling through the channel */

    }, {
        key: 'packetLossPercentage',
        get: function get() {
            return this._packetsCount > 0 ? this._packetsLost / this._packetsCount : 0;
        }
        /** Audio volume level
         * Currently firefox doesn't provide audio level in rtp stats.
         */

    }, {
        key: 'audioLevel',
        get: function get() {
            return this._audioLevel;
        }
        /** Timestamp when stats are collected. */

    }, {
        key: 'timestamp',
        get: function get() {
            return this._timestamp;
        }
        /** {number} Processing delay calculated by time to process packet header */

    }, {
        key: 'procMilliseconds',
        get: function get() {
            return this._procMilliseconds;
        }
        /** {number} Round trip time calculated with RTCP reports */

    }, {
        key: 'rttMilliseconds',
        get: function get() {
            return this._rttMilliseconds;
        }
        /** {number} Statistical variance of RTP data packet inter-arrival time */

    }, {
        key: 'jbMilliseconds',
        get: function get() {
            return this._jbMilliseconds;
        }
        /** {number} number of bytes sent to the channel*/

    }, {
        key: 'bytesSent',
        get: function get() {
            return this._bytesSent;
        }
        /** {number} number of bytes received from the channel*/

    }, {
        key: 'bytesReceived',
        get: function get() {
            return this._bytesReceived;
        }
        /** {number} number of video frames encoded*/

    }, {
        key: 'framesEncoded',
        get: function get() {
            return this._framesEncoded;
        }
        /** {number} number of video frames decoded*/

    }, {
        key: 'framesDecoded',
        get: function get() {
            return this._framesDecoded;
        }
        /** {number} frames per second sent to the channel*/

    }, {
        key: 'frameRateSent',
        get: function get() {
            return this._frameRateSent;
        }
        /** {number} frames per second received from the channel*/

    }, {
        key: 'frameRateReceived',
        get: function get() {
            return this._frameRateReceived;
        }
        /** {string} the type of the stats report */

    }, {
        key: 'statsReportType',
        get: function get() {
            return this._statsReportType;
        }
        /** {string} the type of the stream */

    }, {
        key: 'streamType',
        get: function get() {
            return this._streamType;
        }
    }]);
    return MediaRtpStats;
}();

},{"./utils":160,"babel-runtime/helpers/classCallCheck":15,"babel-runtime/helpers/createClass":16}],154:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SessionReport = undefined;

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

var SessionReport = exports.SessionReport = function () {
    /**
     * @class Prototype for tracking various RTC session report
     * @constructs
     */
    function SessionReport() {
        (0, _classCallCheck3.default)(this, SessionReport);

        this._sessionStartTime = null;
        this._sessionEndTime = null;
        this._gumTimeMillis = null;
        this._initializationTimeMillis = null;
        this._iceCollectionTimeMillis = null;
        this._signallingConnectTimeMillis = null;
        this._handshakingTimeMillis = null;
        this._preTalkingTimeMillis = null;
        this._talkingTimeMillis = null;
        this._iceConnectionsLost = 0;
        this._iceConnectionsFailed = null;
        this._peerConnectionFailed = null;
        this._cleanupTimeMillis = null;
        this._iceCollectionFailure = null;
        this._signallingConnectionFailure = null;
        this._handshakingFailure = null;
        this._gumOtherFailure = null;
        this._gumTimeoutFailure = null;
        this._createOfferFailure = null;
        this._setLocalDescriptionFailure = null;
        this._userBusyFailure = null;
        this._invalidRemoteSDPFailure = null;
        this._noRemoteIceCandidateFailure = null;
        this._setRemoteDescriptionFailure = null;
        this._streamStats = [];
        this._rtcJsVersion = "1.1.25";
    }
    /**
     *Timestamp when RTCSession started.
     */


    (0, _createClass3.default)(SessionReport, [{
        key: "sessionStartTime",
        get: function get() {
            return this._sessionStartTime;
        }
        /**
         * Timestamp when RTCSession ended.
         */
        ,
        set: function set(value) {
            this._sessionStartTime = value;
        }
    }, {
        key: "sessionEndTime",
        get: function get() {
            return this._sessionEndTime;
        }
        /**
         * Time taken for grabbing user microphone at the time of connecting RTCSession.
         */
        ,
        set: function set(value) {
            this._sessionEndTime = value;
        }
    }, {
        key: "gumTimeMillis",
        get: function get() {
            return this._gumTimeMillis;
        }
        /**
         * Time taken for session initialization in millis. Includes time spent in GrabLocalMedia, SetLocalSDP states.
         */
        ,
        set: function set(value) {
            this._gumTimeMillis = value;
        }
    }, {
        key: "initializationTimeMillis",
        get: function get() {
            return this._initializationTimeMillis;
        }
        /**
         * Time spent on ICECollection in millis.
         */
        ,
        set: function set(value) {
            this._initializationTimeMillis = value;
        }
    }, {
        key: "iceCollectionTimeMillis",
        get: function get() {
            return this._iceCollectionTimeMillis;
        }
        /**
         * Time taken for connecting the signalling in millis.
         */
        ,
        set: function set(value) {
            this._iceCollectionTimeMillis = value;
        }
    }, {
        key: "signallingConnectTimeMillis",
        get: function get() {
            return this._signallingConnectTimeMillis;
        }
        /**
         * Times spent from RTCSession connection until entering Talking state in millis.
         */
        ,
        set: function set(value) {
            this._signallingConnectTimeMillis = value;
        }
    }, {
        key: "preTalkingTimeMillis",
        get: function get() {
            return this._preTalkingTimeMillis;
        }
        /**
         *  Times spent in completing handshaking process of the RTCSession in millis.
         */
        ,
        set: function set(value) {
            this._preTalkingTimeMillis = value;
        }
    }, {
        key: "handshakingTimeMillis",
        get: function get() {
            return this._handshakingTimeMillis;
        }
        /**
         *  Times spent in Talking state in millis.
         */
        ,
        set: function set(value) {
            this._handshakingTimeMillis = value;
        }
    }, {
        key: "talkingTimeMillis",
        get: function get() {
            return this._talkingTimeMillis;
        }
        /**
         * How many times the RTCSession has lost ICE connection in talking state.
         */
        ,
        set: function set(value) {
            this._talkingTimeMillis = value;
        }
    }, {
        key: "iceConnectionsLost",
        get: function get() {
            return this._iceConnectionsLost;
        }
        /**
         * Tells if the RTCSession has failed RTCPeerConnection.iceConnectionState
         */
        ,
        set: function set(value) {
            this._iceConnectionsLost = value;
        }
    }, {
        key: "iceConnectionsFailed",
        get: function get() {
            return this._iceConnectionsFailed;
        }
        /**
         * Tells if the RTCSession has failed RTCPeerConnection.connectionState
         */
        ,
        set: function set(value) {
            this._iceConnectionsFailed = value;
        }
    }, {
        key: "peerConnectionFailed",
        get: function get() {
            return this._peerConnectionFailed;
        }
        /**
         * Times spent in Cleanup state in millis
         */
        ,
        set: function set(value) {
            this._peerConnectionFailed = value;
        }
    }, {
        key: "cleanupTimeMillis",
        get: function get() {
            return this._cleanupTimeMillis;
        }
        /**
         * Tells if the RTCSession fails in ICECollection.
         */
        ,
        set: function set(value) {
            this._cleanupTimeMillis = value;
        }
    }, {
        key: "iceCollectionFailure",
        get: function get() {
            return this._iceCollectionFailure;
        }
        /**
         * Tells if the RTCSession failed in signalling connect stage.
         */
        ,
        set: function set(value) {
            this._iceCollectionFailure = value;
        }
    }, {
        key: "signallingConnectionFailure",
        get: function get() {
            return this._signallingConnectionFailure;
        }
        /**
         * Handshaking failure of the RTCSession
         */
        ,
        set: function set(value) {
            this._signallingConnectionFailure = value;
        }
    }, {
        key: "handshakingFailure",
        get: function get() {
            return this._handshakingFailure;
        }
        /**
         * Gum failed due to timeout at the time of new RTCSession connection
         */
        ,
        set: function set(value) {
            this._handshakingFailure = value;
        }
    }, {
        key: "gumTimeoutFailure",
        get: function get() {
            return this._gumTimeoutFailure;
        }
        /**
         * Gum failed due to other reasons (other than Timeout)
         */
        ,
        set: function set(value) {
            this._gumTimeoutFailure = value;
        }
    }, {
        key: "gumOtherFailure",
        get: function get() {
            return this._gumOtherFailure;
        }
        /**
         * RTC Session failed in create Offer state.
         */
        ,
        set: function set(value) {
            this._gumOtherFailure = value;
        }
    }, {
        key: "createOfferFailure",
        get: function get() {
            return this._createOfferFailure;
        }
        /**
         * Tells if setLocalDescription failed for the RTC Session.
         */
        ,
        set: function set(value) {
            this._createOfferFailure = value;
        }
    }, {
        key: "setLocalDescriptionFailure",
        get: function get() {
            return this._setLocalDescriptionFailure;
        }
        /**
         * Tells if handshaking failed due to user busy case,
         * happens when multiple softphone calls are initiated at same time.
         */
        ,
        set: function set(value) {
            this._setLocalDescriptionFailure = value;
        }
    }, {
        key: "userBusyFailure",
        get: function get() {
            return this._userBusyFailure;
        }
        /**
         * Tells it remote SDP is invalid.
         */
        ,
        set: function set(value) {
            this._userBusyFailure = value;
        }
    }, {
        key: "invalidRemoteSDPFailure",
        get: function get() {
            return this._invalidRemoteSDPFailure;
        }
        /**
         * Tells if the setRemoteDescription failed for the RTC Session.
         */
        ,
        set: function set(value) {
            this._invalidRemoteSDPFailure = value;
        }
    }, {
        key: "setRemoteDescriptionFailure",
        get: function get() {
            return this._setRemoteDescriptionFailure;
        }
        /**
         * A failure case when there is no RemoteIceCandidate.
         */
        ,
        set: function set(value) {
            this._setRemoteDescriptionFailure = value;
        }
    }, {
        key: "noRemoteIceCandidateFailure",
        get: function get() {
            return this._noRemoteIceCandidateFailure;
        }
        /**
         * Statistics for each stream(audio-in, audio-out, video-in, video-out) of the RTCSession.
         */
        ,
        set: function set(value) {
            this._noRemoteIceCandidateFailure = value;
        }
    }, {
        key: "streamStats",
        get: function get() {
            return this._streamStats;
        }
        /**
         * get current connect-rtc-js version
         */
        ,
        set: function set(value) {
            this._streamStats = value;
        }
    }, {
        key: "rtcJsVersion",
        get: function get() {
            return this._rtcJsVersion;
        },
        set: function set(value) {
            this._rtcJsVersion = value;
        }
    }]);
    return SessionReport;
}();

},{"babel-runtime/helpers/classCallCheck":15,"babel-runtime/helpers/createClass":16}],155:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.FailedState = exports.DisconnectedState = exports.PendingLocalHangupState = exports.PendingRemoteHangupState = exports.PendingReconnectState = exports.TalkingState = exports.PendingAcceptAckState = exports.PendingAcceptState = exports.PendingAnswerState = exports.PendingInviteState = exports.PendingConnectState = exports.FailOnTimeoutState = exports.SignalingState = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _utils = require('./utils');

var _rtc_const = require('./rtc_const');

var _exceptions = require('./exceptions');

var _v = require('uuid/v4');

var _v2 = _interopRequireDefault(_v);

var _virtual_wss_connection_manager = require('./virtual_wss_connection_manager');

var _virtual_wss_connection_manager2 = _interopRequireDefault(_virtual_wss_connection_manager);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CONNECT_MAX_RETRIES = 3;

/**
 * Abstract signaling state class.
 */
/**
 * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

var SignalingState = exports.SignalingState = function () {
    /**
     * @param {AmznRtcSignaling} signaling Signaling object.
     */
    function SignalingState(signaling) {
        (0, _classCallCheck3.default)(this, SignalingState);

        this._signaling = signaling;
        this._createTime = new Date().getTime();
    }

    (0, _createClass3.default)(SignalingState, [{
        key: 'setStateTimeout',
        value: function setStateTimeout(timeoutMs) {
            setTimeout((0, _utils.hitch)(this, this._onTimeoutChecked), timeoutMs);
        }
    }, {
        key: 'onEnter',
        value: function onEnter() {}
    }, {
        key: '_onTimeoutChecked',
        value: function _onTimeoutChecked() {
            if (this.isCurrentState) {
                this.onTimeout();
            }
        }
    }, {
        key: 'onTimeout',
        value: function onTimeout() {
            throw new _exceptions.UnsupportedOperation();
        }
    }, {
        key: 'transit',
        value: function transit(newState) {
            this._signaling.transit(newState);
        }
    }, {
        key: 'onExit',
        value: function onExit() {}
    }, {
        key: 'onOpen',
        value: function onOpen() {
            throw new _exceptions.UnsupportedOperation('onOpen not supported by ' + this.name);
        }
    }, {
        key: 'onError',
        value: function onError() {
            this.channelDown();
        }
    }, {
        key: 'onClose',
        value: function onClose() {
            this.channelDown();
        }
    }, {
        key: 'channelDown',
        value: function channelDown() {
            throw new _exceptions.UnsupportedOperation('channelDown not supported by ' + this.name);
        }
    }, {
        key: 'onRpcMsg',
        value: function onRpcMsg(rpcMsg) {
            // eslint-disable-line no-unused-vars
            throw new _exceptions.UnsupportedOperation('onRpcMsg not supported by ' + this.name);
        }
    }, {
        key: 'invite',
        value: function invite(sdp, iceCandidates) {
            // eslint-disable-line no-unused-vars
            throw new _exceptions.UnsupportedOperation('invite not supported by ' + this.name);
        }
    }, {
        key: 'accept',
        value: function accept() {
            throw new _exceptions.UnsupportedOperation('accept not supported by ' + this.name);
        }
    }, {
        key: 'hangup',
        value: function hangup() {
            throw new _exceptions.UnsupportedOperation('hangup not supported by ' + this.name);
        }
    }, {
        key: 'isCurrentState',
        get: function get() {
            return this === this._signaling.state;
        }
    }, {
        key: 'name',
        get: function get() {
            return "SignalingState";
        }
    }, {
        key: 'logger',
        get: function get() {
            return this._signaling._logger;
        }
    }]);
    return SignalingState;
}();

var FailOnTimeoutState = exports.FailOnTimeoutState = function (_SignalingState) {
    (0, _inherits3.default)(FailOnTimeoutState, _SignalingState);

    function FailOnTimeoutState(signaling, timeoutMs) {
        (0, _classCallCheck3.default)(this, FailOnTimeoutState);

        var _this = (0, _possibleConstructorReturn3.default)(this, (FailOnTimeoutState.__proto__ || Object.getPrototypeOf(FailOnTimeoutState)).call(this, signaling));

        _this._timeoutMs = timeoutMs;
        return _this;
    }

    (0, _createClass3.default)(FailOnTimeoutState, [{
        key: 'onEnter',
        value: function onEnter() {
            this.setStateTimeout(this._timeoutMs);
        }
    }, {
        key: 'onTimeout',
        value: function onTimeout() {
            this.transit(new FailedState(this._signaling, new _exceptions.Timeout()));
        }
    }, {
        key: 'name',
        get: function get() {
            return "FailOnTimeoutState";
        }
    }]);
    return FailOnTimeoutState;
}(SignalingState);

var PendingConnectState = exports.PendingConnectState = function (_FailOnTimeoutState) {
    (0, _inherits3.default)(PendingConnectState, _FailOnTimeoutState);

    function PendingConnectState(signaling, timeoutMs, initialStartTimeIn, retriesIn) {
        (0, _classCallCheck3.default)(this, PendingConnectState);

        var _this2 = (0, _possibleConstructorReturn3.default)(this, (PendingConnectState.__proto__ || Object.getPrototypeOf(PendingConnectState)).call(this, signaling, timeoutMs));

        _this2._initialStartTime = initialStartTimeIn || new Date().getTime();
        _this2._retries = retriesIn || 0;
        return _this2;
    }

    (0, _createClass3.default)(PendingConnectState, [{
        key: 'onOpen',
        value: function onOpen() {
            this.transit(new PendingInviteState(this._signaling));
        }
    }, {
        key: 'channelDown',
        value: function channelDown() {
            var now = new Date().getTime();
            var untilTimeoutMs = this._initialStartTime + this._timeoutMs - now;
            if (untilTimeoutMs > 0 && ++this._retries < CONNECT_MAX_RETRIES) {
                this._signaling._connect();
                this.transit(new PendingConnectState(this._signaling, untilTimeoutMs, this._initialStartTime, this._retries));
            } else {
                this.transit(new FailedState(this._signaling, new Error('channelDown')));
            }
        }
    }, {
        key: 'name',
        get: function get() {
            return "PendingConnectState";
        }
    }]);
    return PendingConnectState;
}(FailOnTimeoutState);

var PendingInviteState = exports.PendingInviteState = function (_SignalingState2) {
    (0, _inherits3.default)(PendingInviteState, _SignalingState2);

    function PendingInviteState() {
        (0, _classCallCheck3.default)(this, PendingInviteState);
        return (0, _possibleConstructorReturn3.default)(this, (PendingInviteState.__proto__ || Object.getPrototypeOf(PendingInviteState)).apply(this, arguments));
    }

    (0, _createClass3.default)(PendingInviteState, [{
        key: 'onEnter',
        value: function onEnter() {
            var self = this;
            new Promise(function notifyConnected(resolve) {
                self._signaling._connectedHandler();
                resolve();
            });
        }
    }, {
        key: 'invite',
        value: function invite(sdp, iceCandidates) {
            var self = this;
            var inviteId = (0, _v2.default)();

            var inviteParams = {
                sdp: sdp,
                candidates: iceCandidates,
                callContextToken: self._signaling._contactToken
            };
            self.logger.log('Sending SDP', (0, _utils.getRedactedSdp)(sdp));
            self._signaling._wss.send(JSON.stringify({
                jsonrpc: '2.0',
                method: _rtc_const.INVITE_METHOD_NAME,
                params: inviteParams,
                id: inviteId
            }));
            self.transit(new PendingAnswerState(self._signaling, inviteId));
        }
    }, {
        key: 'channelDown',
        value: function channelDown() {
            this.transit(new FailedState(this._signaling));
        }
    }, {
        key: 'name',
        get: function get() {
            return "PendingInviteState";
        }
    }]);
    return PendingInviteState;
}(SignalingState);

var PendingAnswerState = exports.PendingAnswerState = function (_FailOnTimeoutState2) {
    (0, _inherits3.default)(PendingAnswerState, _FailOnTimeoutState2);

    function PendingAnswerState(signaling, inviteId) {
        (0, _classCallCheck3.default)(this, PendingAnswerState);

        var _this4 = (0, _possibleConstructorReturn3.default)(this, (PendingAnswerState.__proto__ || Object.getPrototypeOf(PendingAnswerState)).call(this, signaling, _rtc_const.MAX_INVITE_DELAY_MS));

        _this4._inviteId = inviteId;
        return _this4;
    }

    (0, _createClass3.default)(PendingAnswerState, [{
        key: 'onRpcMsg',
        value: function onRpcMsg(msg) {
            var self = this;
            if (msg.id === this._inviteId) {
                if (msg.error || !msg.result) {
                    this.transit(new FailedState(this._signaling, self.translateInviteError(msg)));
                } else {
                    new Promise(function notifyAnswered(resolve) {
                        self.logger.log('Received SDP', (0, _utils.getRedactedSdp)(msg.result.sdp));
                        self._signaling._answeredHandler(msg.result.sdp, msg.result.candidates);
                        resolve();
                    });
                    this.transit(new PendingAcceptState(this._signaling, this._signaling._autoAnswer));
                }
            }
        }
    }, {
        key: 'translateInviteError',
        value: function translateInviteError(msg) {
            if (msg.error && msg.error.code == 486) {
                return new _exceptions.BusyException(msg.error.message);
            } else if (msg.error && msg.error.code == 404) {
                return new _exceptions.CallNotFoundException(msg.error.message);
            } else {
                return new _exceptions.UnknownSignalingError();
            }
        }
    }, {
        key: 'name',
        get: function get() {
            return "PendingAnswerState";
        }
    }]);
    return PendingAnswerState;
}(FailOnTimeoutState);

var PendingAcceptState = exports.PendingAcceptState = function (_SignalingState3) {
    (0, _inherits3.default)(PendingAcceptState, _SignalingState3);

    function PendingAcceptState(signaling, autoAnswer) {
        (0, _classCallCheck3.default)(this, PendingAcceptState);

        var _this5 = (0, _possibleConstructorReturn3.default)(this, (PendingAcceptState.__proto__ || Object.getPrototypeOf(PendingAcceptState)).call(this, signaling));

        _this5._autoAnswer = autoAnswer;
        return _this5;
    }

    (0, _createClass3.default)(PendingAcceptState, [{
        key: 'onEnter',
        value: function onEnter() {
            if (this._autoAnswer) {
                this.accept();
            }
        }
    }, {
        key: 'accept',
        value: function accept() {
            this.sendAcceptRequest();
            this.transit(new TalkingState(this._signaling));
        }
    }, {
        key: 'channelDown',
        value: function channelDown() {
            this.transit(new FailedState(this._signaling));
        }
    }, {
        key: 'sendAcceptRequest',
        value: function () {
            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
                var acceptId;
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                acceptId = (0, _v2.default)();

                                this._signaling._wss.send(JSON.stringify({
                                    jsonrpc: '2.0',
                                    method: _rtc_const.ACCEPT_METHOD_NAME,
                                    params: {},
                                    id: acceptId
                                }));

                            case 2:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function sendAcceptRequest() {
                return _ref.apply(this, arguments);
            }

            return sendAcceptRequest;
        }()
    }, {
        key: 'name',
        get: function get() {
            return "PendingAcceptState";
        }
    }]);
    return PendingAcceptState;
}(SignalingState);

var PendingAcceptAckState = exports.PendingAcceptAckState = function (_FailOnTimeoutState3) {
    (0, _inherits3.default)(PendingAcceptAckState, _FailOnTimeoutState3);

    function PendingAcceptAckState(signaling, acceptId) {
        (0, _classCallCheck3.default)(this, PendingAcceptAckState);

        var _this6 = (0, _possibleConstructorReturn3.default)(this, (PendingAcceptAckState.__proto__ || Object.getPrototypeOf(PendingAcceptAckState)).call(this, signaling, _rtc_const.MAX_ACCEPT_BYE_DELAY_MS));

        _this6._acceptId = acceptId;
        return _this6;
    }

    (0, _createClass3.default)(PendingAcceptAckState, [{
        key: 'onRpcMsg',
        value: function onRpcMsg(msg) {
            if (msg.id === this._acceptId) {
                if (msg.error) {
                    this.transit(new FailedState(this._signaling));
                } else {
                    this._signaling._clientToken = msg.result.clientToken;
                    this.transit(new TalkingState(this._signaling));
                }
            }
        }
    }, {
        key: 'name',
        get: function get() {
            return "PendingAcceptAckState";
        }
    }]);
    return PendingAcceptAckState;
}(FailOnTimeoutState);

var TalkingState = exports.TalkingState = function (_SignalingState4) {
    (0, _inherits3.default)(TalkingState, _SignalingState4);

    function TalkingState() {
        (0, _classCallCheck3.default)(this, TalkingState);
        return (0, _possibleConstructorReturn3.default)(this, (TalkingState.__proto__ || Object.getPrototypeOf(TalkingState)).apply(this, arguments));
    }

    (0, _createClass3.default)(TalkingState, [{
        key: 'onEnter',
        value: function onEnter() {
            var self = this;
            new Promise(function notifyHandshaked(resolve) {
                self._signaling._handshakedHandler();
                resolve();
            });
        }
    }, {
        key: 'hangup',
        value: function hangup() {
            var byeId = (0, _v2.default)();
            this._signaling._wss.send(JSON.stringify({
                jsonrpc: '2.0',
                method: _rtc_const.BYE_METHOD_NAME,
                params: { callContextToken: this._signaling._contactToken },
                id: byeId
            }));
            this.transit(new PendingRemoteHangupState(this._signaling, byeId));
        }
    }, {
        key: 'onRpcMsg',
        value: function onRpcMsg(msg) {
            if (msg.method === _rtc_const.BYE_METHOD_NAME) {
                this.transit(new PendingLocalHangupState(this._signaling, msg.id));
            } else if (msg.method === 'renewClientToken') {
                this._signaling._clientToken = msg.params.clientToken;
            }
        }
    }, {
        key: 'channelDown',
        value: function channelDown() {
            this._signaling._reconnect();
            this._signaling.transit(new PendingReconnectState(this._signaling));
        }
    }, {
        key: 'name',
        get: function get() {
            return "TalkingState";
        }
    }]);
    return TalkingState;
}(SignalingState);

var PendingReconnectState = exports.PendingReconnectState = function (_FailOnTimeoutState4) {
    (0, _inherits3.default)(PendingReconnectState, _FailOnTimeoutState4);

    function PendingReconnectState(signaling) {
        (0, _classCallCheck3.default)(this, PendingReconnectState);
        return (0, _possibleConstructorReturn3.default)(this, (PendingReconnectState.__proto__ || Object.getPrototypeOf(PendingReconnectState)).call(this, signaling, _rtc_const.DEFAULT_CONNECT_TIMEOUT_MS));
    }

    (0, _createClass3.default)(PendingReconnectState, [{
        key: 'onOpen',
        value: function onOpen() {
            this.transit(new TalkingState(this._signaling));
        }
    }, {
        key: 'channelDown',
        value: function channelDown() {
            this.transit(new FailedState(this._signaling));
        }
    }, {
        key: 'name',
        get: function get() {
            return "PendingReconnectState";
        }
    }]);
    return PendingReconnectState;
}(FailOnTimeoutState);

var PendingRemoteHangupState = exports.PendingRemoteHangupState = function (_FailOnTimeoutState5) {
    (0, _inherits3.default)(PendingRemoteHangupState, _FailOnTimeoutState5);

    function PendingRemoteHangupState(signaling, byeId) {
        (0, _classCallCheck3.default)(this, PendingRemoteHangupState);

        var _this9 = (0, _possibleConstructorReturn3.default)(this, (PendingRemoteHangupState.__proto__ || Object.getPrototypeOf(PendingRemoteHangupState)).call(this, signaling, _rtc_const.MAX_ACCEPT_BYE_DELAY_MS));

        _this9._byeId = byeId;
        return _this9;
    }

    (0, _createClass3.default)(PendingRemoteHangupState, [{
        key: 'onRpcMsg',
        value: function onRpcMsg(msg) {
            if (msg.id === this._byeId || msg.method === _rtc_const.BYE_METHOD_NAME) {
                this.transit(new DisconnectedState(this._signaling));
            }
        }
    }, {
        key: 'name',
        get: function get() {
            return "PendingRemoteHangupState";
        }
    }]);
    return PendingRemoteHangupState;
}(FailOnTimeoutState);

var PendingLocalHangupState = exports.PendingLocalHangupState = function (_SignalingState5) {
    (0, _inherits3.default)(PendingLocalHangupState, _SignalingState5);

    function PendingLocalHangupState(signaling, byeId) {
        (0, _classCallCheck3.default)(this, PendingLocalHangupState);

        var _this10 = (0, _possibleConstructorReturn3.default)(this, (PendingLocalHangupState.__proto__ || Object.getPrototypeOf(PendingLocalHangupState)).call(this, signaling));

        _this10._byeId = byeId;
        return _this10;
    }

    (0, _createClass3.default)(PendingLocalHangupState, [{
        key: 'onEnter',
        value: function onEnter() {
            var self = this;
            new Promise(function notifyRemoteHungup(resolve) {
                self._signaling._remoteHungupHandler();
                resolve();
            });
        }
    }, {
        key: 'hangup',
        value: function hangup() {
            var self = this;
            self._signaling._wss.send(JSON.stringify({
                jsonrpc: '2.0',
                result: {},
                id: self._byeId
            }));
            self.transit(new DisconnectedState(self._signaling));
        }
    }, {
        key: 'onRpcMsg',
        value: function onRpcMsg() {
            //Do nothing
        }
    }, {
        key: 'channelDown',
        value: function channelDown() {
            this.transit(new DisconnectedState(this._signaling));
        }
    }, {
        key: 'name',
        get: function get() {
            return "PendingLocalHangupState";
        }
    }]);
    return PendingLocalHangupState;
}(SignalingState);

var DisconnectedState = exports.DisconnectedState = function (_SignalingState6) {
    (0, _inherits3.default)(DisconnectedState, _SignalingState6);

    function DisconnectedState() {
        (0, _classCallCheck3.default)(this, DisconnectedState);
        return (0, _possibleConstructorReturn3.default)(this, (DisconnectedState.__proto__ || Object.getPrototypeOf(DisconnectedState)).apply(this, arguments));
    }

    (0, _createClass3.default)(DisconnectedState, [{
        key: 'onEnter',
        value: function onEnter() {
            var self = this;
            new Promise(function notifyDisconnected(resolve) {
                self._signaling._disconnectedHandler();
                resolve();
            });
            this._signaling._wss.close();
        }
    }, {
        key: 'channelDown',
        value: function channelDown() {
            //Do nothing
        }
    }, {
        key: 'onRpcMsg',
        value: function onRpcMsg() {
            //Do nothing
        }
    }, {
        key: 'name',
        get: function get() {
            return "DisconnectedState";
        }
    }]);
    return DisconnectedState;
}(SignalingState);

var FailedState = exports.FailedState = function (_SignalingState7) {
    (0, _inherits3.default)(FailedState, _SignalingState7);

    function FailedState(signaling, exception) {
        (0, _classCallCheck3.default)(this, FailedState);

        var _this12 = (0, _possibleConstructorReturn3.default)(this, (FailedState.__proto__ || Object.getPrototypeOf(FailedState)).call(this, signaling));

        _this12._exception = exception;
        return _this12;
    }

    (0, _createClass3.default)(FailedState, [{
        key: 'onEnter',
        value: function onEnter() {
            var self = this;
            new Promise(function notifyFailed(resolve) {
                self._signaling._failedHandler(self._exception);
                resolve();
            });
            this._signaling._wss.close();
        }
    }, {
        key: 'channelDown',
        value: function channelDown() {
            //Do nothing
        }
    }, {
        key: 'name',
        get: function get() {
            return "FailedState";
        }
    }, {
        key: 'exception',
        get: function get() {
            return this._exception;
        }
    }]);
    return FailedState;
}(SignalingState);

var AmznRtcSignaling = function () {
    function AmznRtcSignaling(callId, signalingUri, contactToken, logger, connectTimeoutMs, connectionId, wssManager) {
        (0, _classCallCheck3.default)(this, AmznRtcSignaling);

        this._callId = callId;
        this._connectTimeoutMs = connectTimeoutMs || _rtc_const.DEFAULT_CONNECT_TIMEOUT_MS;
        this._autoAnswer = true;
        this._signalingUri = signalingUri;
        this._contactToken = contactToken;
        this._logger = (0, _utils.wrapLogger)(logger, callId, 'SIGNALING');
        this._connectionId = connectionId;
        this._wssManager = wssManager;

        //empty event handlers
        this._connectedHandler = this._answeredHandler = this._handshakedHandler = this._reconnectedHandler = this._remoteHungupHandler = this._disconnectedHandler = this._failedHandler = function noOp() {};
    }

    (0, _createClass3.default)(AmznRtcSignaling, [{
        key: 'connect',
        value: function connect() {
            this._connect();
            this.transit(new PendingConnectState(this, this._connectTimeoutMs));
        }
    }, {
        key: '_connect',
        value: function _connect() {
            this._wss = this._connectWebSocket(this._buildInviteUri());
        }
    }, {
        key: 'transit',
        value: function transit(nextState) {
            try {
                this._logger.info((this._state ? this._state.name : 'null') + ' => ' + nextState.name);
                if (this.state && this.state.onExit) {
                    this.state.onExit();
                }
            } finally {
                this._state = nextState;
                if (this._state.onEnter) {
                    this._state.onEnter();
                }
            }
        }
    }, {
        key: '_connectWebSocket',
        value: function _connectWebSocket(uri) {
            var wsConnection = void 0;
            if (this._wssManager) {
                wsConnection = new _virtual_wss_connection_manager2.default(this._logger, this._connectionId, this._wssManager);
            } else {
                wsConnection = new WebSocket(uri);
            }
            wsConnection.onopen = (0, _utils.hitch)(this, this._onOpen);
            wsConnection.onmessage = (0, _utils.hitch)(this, this._onMessage);
            wsConnection.onerror = (0, _utils.hitch)(this, this._onError);
            wsConnection.onclose = (0, _utils.hitch)(this, this._onClose);
            return wsConnection;
        }
    }, {
        key: '_buildInviteUri',
        value: function _buildInviteUri() {
            if (this._contactToken) {
                return this._buildUriBase() + '&contactCtx=' + encodeURIComponent(this._contactToken);
            } else {
                return this._buildUriBase();
            }
        }
    }, {
        key: '_buildReconnectUri',
        value: function _buildReconnectUri() {
            return this._buildUriBase() + '&clientToken=' + encodeURIComponent(this._clientToken);
        }
    }, {
        key: '_buildUriBase',
        value: function _buildUriBase() {
            var separator = '?';
            if (this._signalingUri.indexOf(separator) > -1) {
                separator = '&';
            }
            return this._signalingUri + separator + 'callId=' + encodeURIComponent(this._callId);
        }
    }, {
        key: '_onMessage',
        value: function _onMessage(evt) {
            this.state.onRpcMsg(JSON.parse(evt.data));
        }
    }, {
        key: '_onOpen',
        value: function _onOpen(evt) {
            this.state.onOpen(evt);
        }
    }, {
        key: '_onError',
        value: function _onError(evt) {
            this.state.onError(evt);
        }
    }, {
        key: '_onClose',
        value: function _onClose(evt) {
            this._logger.log('WebSocket onclose code=' + evt.code + ', reason=' + evt.reason);
            this.state.onClose(evt);
        }
    }, {
        key: '_reconnect',
        value: function _reconnect() {
            this._wss = this._connectWebSocket(this._buildReconnectUri());
        }
    }, {
        key: 'invite',
        value: function invite(sdp, iceCandidates) {
            this.state.invite(sdp, iceCandidates);
        }
    }, {
        key: 'accept',
        value: function accept() {
            this.state.accept();
        }
    }, {
        key: 'hangup',
        value: function hangup() {
            this.state.hangup();
        }
    }, {
        key: 'callId',
        get: function get() {
            return this._callId;
        }
    }, {
        key: 'onConnected',
        set: function set(connectedHandler) {
            this._connectedHandler = connectedHandler;
        }
    }, {
        key: 'onAnswered',
        set: function set(answeredHandler) {
            this._answeredHandler = answeredHandler;
        }
    }, {
        key: 'onHandshaked',
        set: function set(handshakedHandler) {
            this._handshakedHandler = handshakedHandler;
        }
    }, {
        key: 'onReconnected',
        set: function set(reconnectedHandler) {
            this._reconnectedHandler = reconnectedHandler;
        }
    }, {
        key: 'onRemoteHungup',
        set: function set(remoteHungupHandler) {
            this._remoteHungupHandler = remoteHungupHandler;
        }
    }, {
        key: 'onDisconnected',
        set: function set(disconnectedHandler) {
            this._disconnectedHandler = disconnectedHandler;
        }
    }, {
        key: 'onFailed',
        set: function set(failedHandler) {
            this._failedHandler = failedHandler;
        }
    }, {
        key: 'state',
        get: function get() {
            return this._state;
        }
    }]);
    return AmznRtcSignaling;
}();

exports.default = AmznRtcSignaling;

},{"./exceptions":149,"./rtc_const":150,"./utils":160,"./virtual_wss_connection_manager":161,"babel-runtime/helpers/asyncToGenerator":14,"babel-runtime/helpers/classCallCheck":15,"babel-runtime/helpers/createClass":16,"babel-runtime/helpers/inherits":18,"babel-runtime/helpers/possibleConstructorReturn":19,"babel-runtime/regenerator":23,"uuid/v4":134}],156:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CCPInitiationStrategyInterface = function () {
    function CCPInitiationStrategyInterface() {
        (0, _classCallCheck3.default)(this, CCPInitiationStrategyInterface);

        console.log("CCPInitiationStrategyInterface initialized");
    }

    (0, _createClass3.default)(CCPInitiationStrategyInterface, [{
        key: "getStrategyName",
        value: function getStrategyName() {
            console.error("getStrategyName needs to be overridden");
        }

        // the following functions are rtc_peer_connection_factory related functions
        // check if the browser supports early media connection

    }, {
        key: "_isEarlyMediaConnectionSupported",
        value: function _isEarlyMediaConnectionSupported() {
            console.error("_isEarlyMediaConnectionSupported needs to be overridden");
        }
    }, {
        key: "_createRtcPeerConnection",
        value: function _createRtcPeerConnection() {
            console.error("_createRtcPeerConnection needs to be overridden");
        }

        // the following functions are rtc_session related functions

    }, {
        key: "_guM",
        value: function _guM() {
            console.error("_guM needs to be overridden");
        }
    }, {
        key: "addStream",
        value: function addStream() {
            console.error("addStream needs to be overridden");
        }
    }, {
        key: "setRemoteDescription",
        value: function setRemoteDescription() {
            console.error("setRemoteDescription needs to be overridden");
        }
    }, {
        key: "onIceStateChange",
        value: function onIceStateChange() {
            console.error("onIceStateChange needs to be overridden");
        }
    }, {
        key: "onPeerConnectionStateChange",
        value: function onPeerConnectionStateChange() {
            console.error("onPeerConnectionStateChange needs to be overridden");
        }
    }, {
        key: "_createPeerConnection",
        value: function _createPeerConnection() {
            console.error("_createPeerConnection needs to be overridden");
        }
    }, {
        key: "connect",
        value: function connect() {
            console.error("connect needs to be overridden");
        }
    }, {
        key: "_ontrack",
        value: function _ontrack() {
            console.error("_ontrack needs to be overridden");
        }
    }, {
        key: "_buildMediaConstraints",
        value: function _buildMediaConstraints() {
            console.error("_buildMediaConstraints needs to be overridden");
        }
    }]);
    return CCPInitiationStrategyInterface;
}();

exports.default = CCPInitiationStrategyInterface;

},{"babel-runtime/helpers/classCallCheck":15,"babel-runtime/helpers/createClass":16}],157:[function(require,module,exports){
(function (global){(function (){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require("babel-runtime/helpers/inherits");

var _inherits3 = _interopRequireDefault(_inherits2);

var _CCPInitiationStrategyInterface = require("./CCPInitiationStrategyInterface");

var _CCPInitiationStrategyInterface2 = _interopRequireDefault(_CCPInitiationStrategyInterface);

var _rtc_session = require("../rtc_session");

var _rtc_const = require("../rtc_const");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CitrixVDIStrategy = function (_CCPInitiationStrateg) {
    (0, _inherits3.default)(CitrixVDIStrategy, _CCPInitiationStrateg);

    function CitrixVDIStrategy() {
        var useRealCitrix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
        (0, _classCallCheck3.default)(this, CitrixVDIStrategy);

        var _this = (0, _possibleConstructorReturn3.default)(this, (CitrixVDIStrategy.__proto__ || Object.getPrototypeOf(CitrixVDIStrategy)).call(this));

        if (useRealCitrix) {
            require("@citrix/ucsdk/CitrixWebRTC");
        }
        console.log("CitrixVDIStrategy initializing");
        _this.initCitrixWebRTC();
        _this.initGetCitrixWebrtcRedir();
        _this.initLog();
        return _this;
    }

    (0, _createClass3.default)(CitrixVDIStrategy, [{
        key: "initCitrixWebRTC",
        value: function initCitrixWebRTC() {
            window.CitrixWebRTC.setVMEventCallback(function (event) {
                if (event.event === 'vdiClientConnected') {
                    if (!window.CitrixWebRTC.isFeatureOn("webrtc1.0")) {
                        throw new Error('Citrix WebRTC redirection feature is NOT supported!');
                    }
                    console.log("CitrixVDIStrategy initialized");
                } else if (event.event === 'vdiClientDisconnected') {
                    console.log("vdiClientDisconnected");
                }
            });
            window.CitrixWebRTC.initUCSDK("AmazonConnect");
        }
    }, {
        key: "initGetCitrixWebrtcRedir",
        value: function initGetCitrixWebrtcRedir() {
            window.getCitrixWebrtcRedir = function () {
                return Promise.resolve(1);
            };
        }
    }, {
        key: "initLog",
        value: function initLog() {
            window.CitrixWebRTC.initLog(global.connect.getLog());
        }

        // the following functions are rtc_peer_connection_factory related functions
        // check if the browser supports early media connection

    }, {
        key: "_isEarlyMediaConnectionSupported",
        value: function _isEarlyMediaConnectionSupported() {
            // Citrix WebRTC SDK doesn't support early media connection
            return false;
        }
    }, {
        key: "_createRtcPeerConnection",
        value: function _createRtcPeerConnection(rtcPeerConnectionConfig, rtcPeerConnectionOptionalConfig) {
            return new window.CitrixWebRTC.CitrixPeerConnection(rtcPeerConnectionConfig, rtcPeerConnectionOptionalConfig);
        }

        // the following functions are rtc_session related functions

    }, {
        key: "_gUM",
        value: function _gUM(constraints) {
            return window.CitrixWebRTC.getUserMedia(constraints);
        }
    }, {
        key: "addStream",
        value: function addStream(_pc, stream) {
            stream.getTracks().forEach(function (track) {
                _pc.addTransceiver(track, {});
            });
        }
    }, {
        key: "setRemoteDescription",
        value: function setRemoteDescription(self, rtcSession) {
            var answerSessionDescription = self._createSessionDescription({ type: 'answer', sdp: self._sdp });

            rtcSession._pc.setRemoteDescription(answerSessionDescription, function () {
                var remoteCandidatePromises = Promise.all(self._candidates.map(function (candidate) {
                    var remoteCandidate = self._createRemoteCandidate(candidate);
                    self.logger.info('Adding remote candidate', remoteCandidate);
                    return rtcSession._pc.addIceCandidate(remoteCandidate);
                }));
                remoteCandidatePromises.catch(function (reason) {
                    self.logger.warn('Error adding remote candidate', reason);
                });
                rtcSession._sessionReport.setRemoteDescriptionFailure = false;
                self._remoteDescriptionSet = true;
                self._checkAndTransit();
            }, function () {
                rtcSession._stopSession();
                rtcSession._sessionReport.setRemoteDescriptionFailure = true;
                self.transit(new _rtc_session.FailedState(rtcSession, _rtc_const.RTC_ERRORS.SET_REMOTE_DESCRIPTION_FAILURE));
            });
        }
    }, {
        key: "onIceStateChange",
        value: function onIceStateChange(evt, _pc) {
            return _pc.iceConnectionState;
        }
    }, {
        key: "onPeerConnectionStateChange",
        value: function onPeerConnectionStateChange(_pc) {
            return _pc.connectionState_;
        }
    }, {
        key: "_createPeerConnection",
        value: function _createPeerConnection(configuration, optionalConfiguration) {
            return new window.CitrixWebRTC.CitrixPeerConnection(configuration, optionalConfiguration);
        }
    }, {
        key: "_ontrack",
        value: function _ontrack(self, evt) {
            window.CitrixWebRTC.mapAudioElement(self._remoteAudioElement);
            if (evt.streams.length > 1) {
                self._logger.warn('Found more than 1 streams for ' + evt.track.kind + ' track ' + evt.track.id + ' : ' + evt.streams.map(function (stream) {
                    return stream.id;
                }).join(','));
            }
            if (evt.track.kind === 'video' && self._remoteVideoElement) {
                self._remoteVideoElement.srcObject = evt.streams[0];
                self._remoteVideoStream = evt.streams[0];
            } else if (evt.track.kind === 'audio' && self._remoteAudioElement) {
                self._remoteAudioElement.srcObject = evt.streams[0];
                self._remoteAudioStream = evt.streams[0];
            }
            self._remoteAudioElement.play();
        }
    }, {
        key: "_buildMediaConstraints",
        value: function _buildMediaConstraints(self, mediaConstraints) {
            if (self._enableAudio) {
                var audioConstraints = {};
                if (typeof self._echoCancellation !== 'undefined') {
                    audioConstraints.echoCancellation = !!self._echoCancellation;
                }
                if (window.audio_input) {
                    audioConstraints.deviceId = window.audio_input;
                }
                if (Object.keys(audioConstraints).length > 0) {
                    mediaConstraints.audio = audioConstraints;
                } else {
                    mediaConstraints.audio = true;
                }
            } else {
                mediaConstraints.audio = false;
            }
        }
    }, {
        key: "getStrategyName",
        value: function getStrategyName() {
            return 'CitrixVDIStrategy';
        }
    }]);
    return CitrixVDIStrategy;
}(_CCPInitiationStrategyInterface2.default); /**
                                              * By using the Citrix ucsdk (https://www.npmjs.com/package/@citrix/ucsdk), you are accepting the Citrix Developer Terms of Use  located here: https://www.cloud.com/terms-of-use.
                                              */

exports.default = CitrixVDIStrategy;

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../rtc_const":150,"../rtc_session":152,"./CCPInitiationStrategyInterface":156,"@citrix/ucsdk/CitrixWebRTC":2,"babel-runtime/helpers/classCallCheck":15,"babel-runtime/helpers/createClass":16,"babel-runtime/helpers/inherits":18,"babel-runtime/helpers/possibleConstructorReturn":19}],158:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof2 = require("babel-runtime/helpers/typeof");

var _typeof3 = _interopRequireDefault(_typeof2);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require("babel-runtime/helpers/inherits");

var _inherits3 = _interopRequireDefault(_inherits2);

var _CCPInitiationStrategyInterface = require("./CCPInitiationStrategyInterface");

var _CCPInitiationStrategyInterface2 = _interopRequireDefault(_CCPInitiationStrategyInterface);

var _rtc_session = require("../rtc_session");

var _rtc_const = require("../rtc_const");

var _constants = require("../config/constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CHROME_SUPPORTED_VERSION = 59;

var DCVWebRTCStrategy = function (_CCPInitiationStrateg) {
    (0, _inherits3.default)(DCVWebRTCStrategy, _CCPInitiationStrateg);

    function DCVWebRTCStrategy() {
        (0, _classCallCheck3.default)(this, DCVWebRTCStrategy);

        var _this = (0, _possibleConstructorReturn3.default)(this, (DCVWebRTCStrategy.__proto__ || Object.getPrototypeOf(DCVWebRTCStrategy)).call(this));

        if (window.DCVWebRTCPeerConnectionProxy) {
            window.DCVWebRTCPeerConnectionProxy.setInitCallback(function (result) {
                if (result.success) {
                    // This is only created when:
                    // 1) the dcv webrtc chrome extension is installed and enabled and
                    // 2) this browser is running within a DCV server environment and
                    // 3) the dcv server is connected from a WebRTC redirection-enabled client
                    _this.proxy = window.DCVWebRTCRedirProxy;
                    _this.proxy.overrideWebRTC();
                    console.log('DCVStrategy initialized');
                } else {
                    throw new Error('DCV WebRTC redirection feature is NOT supported!');
                }
            }, 5000);
        } else {
            throw new Error('DCV WebRTC redirection feature is NOT supported!');
        }
        return _this;
    }

    (0, _createClass3.default)(DCVWebRTCStrategy, [{
        key: "isChromeBrowser",
        value: function isChromeBrowser() {
            return this.proxy.clientInfo.browserDetails.browser === _constants.CHROME;
        }
    }, {
        key: "getChromeBrowserVersion",
        value: function getChromeBrowserVersion() {
            return this.proxy.clientInfo.browserDetails.version;
        }
    }, {
        key: "_isEarlyMediaConnectionSupported",
        value: function _isEarlyMediaConnectionSupported() {
            return this.isChromeBrowser() && this.getChromeBrowserVersion() >= CHROME_SUPPORTED_VERSION;
        }
    }, {
        key: "_createRtcPeerConnection",
        value: function _createRtcPeerConnection(rtcPeerConnectionConfig, rtcPeerConnectionOptionalConfig) {
            return this.proxy.createPeerConnection(rtcPeerConnectionConfig, rtcPeerConnectionOptionalConfig);
        }
    }, {
        key: "_buildMediaConstraints",
        value: function _buildMediaConstraints(self, mediaConstraints) {
            if (self._enableAudio) {
                var audioConstraints = {};
                if ((0, _typeof3.default)(self._echoCancellation) !== _constants.UNDEFINED) {
                    audioConstraints.echoCancellation = !!self._echoCancellation;
                }
                if (Object.keys(audioConstraints).length > 0) {
                    mediaConstraints.audio = audioConstraints;
                } else {
                    mediaConstraints.audio = true;
                }
            } else {
                mediaConstraints.audio = false;
            }
        }
    }, {
        key: "_gUM",
        value: function _gUM(constraints) {
            return this.proxy.getUserMedia(constraints);
        }
    }, {
        key: "_createPeerConnection",
        value: function _createPeerConnection(configuration, optionalConfiguration) {
            return this.proxy.createPeerConnection(configuration, optionalConfiguration);
        }
    }, {
        key: "addStream",
        value: function addStream(_pc, stream) {
            stream.getTracks().forEach(function (track) {
                var transceiver = _pc.addTransceiver(track.kind, {
                    streams: [stream]
                });
                transceiver.sender.replaceTrack(track);
            });
        }
    }, {
        key: "setRemoteDescription",
        value: function setRemoteDescription(self, rtcSession) {
            var setRemoteDescriptionPromise = rtcSession._pc.setRemoteDescription(self._createSessionDescription({
                type: _constants.ANSWER,
                sdp: self._sdp
            }));
            setRemoteDescriptionPromise.catch(function (e) {
                self.logger.error('SetRemoteDescription failed', e);
            });
            setRemoteDescriptionPromise.then(function () {
                var remoteCandidatePromises = Promise.all(self._candidates.map(function (candidate) {
                    var remoteCandidate = self._createRemoteCandidate(candidate);
                    self.logger.info('Adding remote candidate', remoteCandidate);
                    return rtcSession._pc.addIceCandidate(remoteCandidate);
                }));
                remoteCandidatePromises.catch(function (reason) {
                    self.logger.warn('Error adding remote candidate', reason);
                });
                return remoteCandidatePromises;
            }).then(function () {
                rtcSession._sessionReport.setRemoteDescriptionFailure = false;
                self._remoteDescriptionSet = true;
                self._checkAndTransit();
            }).catch(function () {
                rtcSession._stopSession();
                rtcSession._sessionReport.setRemoteDescriptionFailure = true;
                self.transit(new _rtc_session.FailedState(rtcSession, _rtc_const.RTC_ERRORS.SET_REMOTE_DESCRIPTION_FAILURE));
            });
        }
    }, {
        key: "onIceStateChange",
        value: function onIceStateChange(evt, _pc) {
            return _pc.iceConnectionState;
        }
    }, {
        key: "onPeerConnectionStateChange",
        value: function onPeerConnectionStateChange(_pc) {
            return _pc.connectionState;
        }
    }, {
        key: "_ontrack",
        value: function _ontrack(self, evt) {
            if (evt.streams.length > 1) {
                console.warn('Found more than 1 streams for ' + evt.track.kind + ' track ' + evt.track.id + ' : ' + evt.streams.map(function (stream) {
                    return stream.id;
                }).join(','));
            }
            var stream = evt.streams[0];
            self._remoteAudioElement = this.createMediaElement(stream);
            self._remoteAudioStream = stream;
            self._remoteAudioElement.srcObject = stream;
        }
    }, {
        key: "createMediaElement",
        value: function createMediaElement(stream) {
            var props = {
                kind: _constants.AUDIO,
                autoplay: true
            };
            var element = stream.createMediaElement(props);
            console.log("Creating proxied media element.");
            return element;
        }
    }, {
        key: "getStrategyName",
        value: function getStrategyName() {
            return _constants.DCV_STRATEGY;
        }
    }]);
    return DCVWebRTCStrategy;
}(_CCPInitiationStrategyInterface2.default);

exports.default = DCVWebRTCStrategy;

},{"../config/constants":147,"../rtc_const":150,"../rtc_session":152,"./CCPInitiationStrategyInterface":156,"babel-runtime/helpers/classCallCheck":15,"babel-runtime/helpers/createClass":16,"babel-runtime/helpers/inherits":18,"babel-runtime/helpers/possibleConstructorReturn":19,"babel-runtime/helpers/typeof":22}],159:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require("babel-runtime/helpers/inherits");

var _inherits3 = _interopRequireDefault(_inherits2);

var _CCPInitiationStrategyInterface = require("./CCPInitiationStrategyInterface");

var _CCPInitiationStrategyInterface2 = _interopRequireDefault(_CCPInitiationStrategyInterface);

var _rtc_const = require("../rtc_const");

var _utils = require("../utils");

var _rtc_session = require("../rtc_session");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var StandardStrategy = function (_CCPInitiationStrateg) {
    (0, _inherits3.default)(StandardStrategy, _CCPInitiationStrateg);

    function StandardStrategy() {
        (0, _classCallCheck3.default)(this, StandardStrategy);

        var _this = (0, _possibleConstructorReturn3.default)(this, (StandardStrategy.__proto__ || Object.getPrototypeOf(StandardStrategy)).call(this));

        console.log("StandardStrategy initialized");
        return _this;
    }

    // the following functions are rtc_peer_connection_factory related functions
    // check if the browser supports early media connection


    (0, _createClass3.default)(StandardStrategy, [{
        key: "_isEarlyMediaConnectionSupported",
        value: function _isEarlyMediaConnectionSupported() {
            return (0, _utils.isChromeBrowser)() && (0, _utils.getChromeBrowserVersion)() >= _rtc_const.CHROME_SUPPORTED_VERSION;
        }
    }, {
        key: "_createRtcPeerConnection",
        value: function _createRtcPeerConnection(rtcPeerConnectionConfig, rtcPeerConnectionOptionalConfig) {
            return new RTCPeerConnection(rtcPeerConnectionConfig, rtcPeerConnectionOptionalConfig);
        }

        // the following functions are rtc_session related functions

    }, {
        key: "_gUM",
        value: function _gUM(constraints) {
            return navigator.mediaDevices.getUserMedia(constraints);
        }
    }, {
        key: "addStream",
        value: function addStream(_pc, stream) {
            _pc.addStream(stream);
        }
    }, {
        key: "setRemoteDescription",
        value: function setRemoteDescription(self, rtcSession) {
            var setRemoteDescriptionPromise = rtcSession._pc.setRemoteDescription(self._createSessionDescription({
                type: 'answer',
                sdp: self._sdp
            }));
            setRemoteDescriptionPromise.catch(function (e) {
                self.logger.error('SetRemoteDescription failed', e);
            });
            setRemoteDescriptionPromise.then(function () {
                var remoteCandidatePromises = Promise.all(self._candidates.map(function (candidate) {
                    var remoteCandidate = self._createRemoteCandidate(candidate);
                    self.logger.info('Adding remote candidate', remoteCandidate);
                    return rtcSession._pc.addIceCandidate(remoteCandidate);
                }));
                remoteCandidatePromises.catch(function (reason) {
                    self.logger.warn('Error adding remote candidate', reason);
                });
                return remoteCandidatePromises;
            }).then(function () {
                rtcSession._sessionReport.setRemoteDescriptionFailure = false;
                self._remoteDescriptionSet = true;
                self._checkAndTransit();
            }).catch(function () {
                rtcSession._stopSession();
                rtcSession._sessionReport.setRemoteDescriptionFailure = true;
                self.transit(new _rtc_session.FailedState(rtcSession, _rtc_const.RTC_ERRORS.SET_REMOTE_DESCRIPTION_FAILURE));
            });
        }
    }, {
        key: "onIceStateChange",
        value: function onIceStateChange(evt, _pc) {
            // eslint-disable-line no-unused-vars
            return evt.currentTarget.iceConnectionState;
        }
    }, {
        key: "onPeerConnectionStateChange",
        value: function onPeerConnectionStateChange(_pc) {
            return _pc.connectionState;
        }
    }, {
        key: "_createPeerConnection",
        value: function _createPeerConnection(configuration, optionalConfiguration) {
            return new RTCPeerConnection(configuration, optionalConfiguration);
        }
    }, {
        key: "_ontrack",
        value: function _ontrack(self, evt) {
            if (evt.streams.length > 1) {
                self._logger.warn('Found more than 1 streams for ' + evt.track.kind + ' track ' + evt.track.id + ' : ' + evt.streams.map(function (stream) {
                    return stream.id;
                }).join(','));
            }
            if (evt.track.kind === 'video' && self._remoteVideoElement) {
                self._remoteVideoElement.srcObject = evt.streams[0];
                self._remoteVideoStream = evt.streams[0];
            } else if (evt.track.kind === 'audio' && self._remoteAudioElement) {
                self._remoteAudioElement.srcObject = evt.streams[0];
                self._remoteAudioStream = evt.streams[0];
            }
        }
    }, {
        key: "_buildMediaConstraints",
        value: function _buildMediaConstraints(self, mediaConstraints) {
            if (self._enableAudio) {
                var audioConstraints = {};
                if (typeof self._echoCancellation !== 'undefined') {
                    audioConstraints.echoCancellation = !!self._echoCancellation;
                }
                if (Object.keys(audioConstraints).length > 0) {
                    mediaConstraints.audio = audioConstraints;
                } else {
                    mediaConstraints.audio = true;
                }
            } else {
                mediaConstraints.audio = false;
            }
        }
    }, {
        key: "getStrategyName",
        value: function getStrategyName() {
            return 'StandardStrategy';
        }
    }]);
    return StandardStrategy;
}(_CCPInitiationStrategyInterface2.default);

exports.default = StandardStrategy;

},{"../rtc_const":150,"../rtc_session":152,"../utils":160,"./CCPInitiationStrategyInterface":156,"babel-runtime/helpers/classCallCheck":15,"babel-runtime/helpers/createClass":16,"babel-runtime/helpers/inherits":18,"babel-runtime/helpers/possibleConstructorReturn":19}],160:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SdpOptions = undefined;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

exports.hitch = hitch;
exports.wrapLogger = wrapLogger;
exports.closeStream = closeStream;
exports.transformSdp = transformSdp;
exports.is_defined = is_defined;
exports.when_defined = when_defined;
exports.isLegacyStatsReportSupported = isLegacyStatsReportSupported;
exports.isFunction = isFunction;
exports.assertTrue = assertTrue;
exports.isChromeBrowser = isChromeBrowser;
exports.getChromeBrowserVersion = getChromeBrowserVersion;
exports.getRedactedSdp = getRedactedSdp;

var _exceptions = require('./exceptions');

var _sdp = require('sdp');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * All logging methods used by connect-rtc.
 */
/**
 * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

var logMethods = ['log', 'info', 'warn', 'error'];

/**
 * Binds the given instance object as the context for
 * the method provided.
 *
 * @param scope The instance object to be set as the scope
 *    of the function.
 * @param method The method to be encapsulated.
 *
 * All other arguments, if any, are bound to the method
 * invocation inside the closure.
 *
 * @return A closure encapsulating the invocation of the
 *    method provided in context of the given instance.
 */
function hitch() {
    var args = Array.prototype.slice.call(arguments);
    var scope = args.shift();
    var method = args.shift();

    if (!scope) {
        throw new _exceptions.IllegalParameters('utils.hitch(): scope is required!');
    }

    if (!method) {
        throw new _exceptions.IllegalParameters('utils.hitch(): method is required!');
    }

    if (typeof method !== 'function') {
        throw new _exceptions.IllegalParameters('utils.hitch(): method is not a function!');
    }

    return function _hitchedFunction() {
        var closureArgs = Array.prototype.slice.call(arguments);
        return method.apply(scope, args.concat(closureArgs));
    };
}

function wrapLogger(logger, callId, logCategory) {
    var _logger = {};
    logMethods.forEach(function (logMethod) {
        if (!logger[logMethod]) {
            throw new Error('Logging method ' + logMethod + ' required');
        }
        _logger[logMethod] = hitch(logger, logger[logMethod], callId, logCategory);
    });
    return _logger;
}

function closeStream(stream) {
    if (stream) {
        var tracks = stream.getTracks();
        for (var i = 0; i < tracks.length; i++) {
            var track = tracks[i];
            try {
                track.stop();
            } catch (e) {
                // eat exception
            }
        }
    }
}

/**
 * A parameter of transformSdp.
 * This defines all the SDP options connect-rtc-js supports.
 */

var SdpOptions = exports.SdpOptions = function () {
    function SdpOptions() {
        (0, _classCallCheck3.default)(this, SdpOptions);

        this._forceCodec = {};
    }

    (0, _createClass3.default)(SdpOptions, [{
        key: '_shouldDeleteCodec',


        /**
         * Test if given codec should be removed from SDP.
         * @param mediaType audio|video
         * @param codecName case insensitive
         * @return TRUE - should remove
         */
        value: function _shouldDeleteCodec(mediaType, codecName) {
            var upperCaseCodecName = codecName.toUpperCase();
            return this._forceCodec[mediaType] && upperCaseCodecName !== this._forceCodec[mediaType].toUpperCase() && upperCaseCodecName !== 'TELEPHONE-EVENT';
        }
    }, {
        key: 'enableOpusDtx',
        get: function get() {
            return this._enableOpusDtx;
        }

        /**
         * By default transformSdp disables dtx for OPUS codec.
         * Setting this to true would force it to turn on DTX.
         */
        ,
        set: function set(flag) {
            this._enableOpusDtx = flag;
        }

        /**
         * A map from media type (audio/video) to codec (case insensitive).
         * Add entry for force connect-rtc-js to use specified codec for certain media type.
         * For example: sdpOptions.forceCodec['audio'] = 'opus';
         */

    }, {
        key: 'forceCodec',
        get: function get() {
            return this._forceCodec;
        }
    }]);
    return SdpOptions;
}();

/**
 * Modifies input SDP according to sdpOptions.
 * See SdpOptions for available options.
 * @param sdp original SDP
 * @param sdpOptions defines changes to be applied to SDP
 * @returns a map with 'sdp' containing the transformed SDP and 'mLines' containing the number of m lines in SDP
 */


function transformSdp(sdp, sdpOptions) {
    var sections = (0, _sdp.splitSections)(sdp);
    for (var i = 1; i < sections.length; i++) {
        var mediaType = (0, _sdp.getKind)(sections[i]);
        var rtpParams = (0, _sdp.parseRtpParameters)(sections[i]);
        // a map from payload type (string) to codec object
        var codecMap = rtpParams.codecs.reduce(function (map, codec) {
            map['' + codec.payloadType] = codec;
            return map;
        }, {});
        sections[i] = (0, _sdp.splitLines)(sections[i]).map(function (line) {
            if (line.startsWith('m=')) {
                // modify m= line if SdpOptions#forceCodec specifies codec for current media type
                if (sdpOptions.forceCodec[mediaType]) {
                    var targetCodecPts = Object.keys(codecMap).filter(function (pt) {
                        return !sdpOptions._shouldDeleteCodec(mediaType, codecMap[pt].name);
                    });
                    return (/.*RTP\/S?AVPF? /.exec(line) + targetCodecPts.join(' ')
                    );
                } else {
                    return line;
                }
            } else if (line.startsWith('a=rtpmap:')) {
                var rtpMap = (0, _sdp.parseRtpMap)(line);
                var currentCodec = codecMap[rtpMap.payloadType];

                // remove this codec if SdpOptions#forceCodec specifies a different codec for current media type
                if (is_defined(currentCodec) && sdpOptions._shouldDeleteCodec(mediaType, currentCodec.name)) {
                    return null;
                }

                // append a=fmtp line immediately if current codec is OPUS (to explicitly specify OPUS parameters)
                if (is_defined(currentCodec) && currentCodec.name.toUpperCase() === 'OPUS') {
                    currentCodec.parameters.usedtx = sdpOptions.enableOpusDtx ? "1" : "0";
                    // generate fmtp line immediately after rtpmap line, and remove original fmtp line once we see it
                    return (line + "\r\n" + (0, _sdp.writeFmtp)(currentCodec)).trim();
                } else {
                    return line;
                }
            } else if (line.startsWith('a=fmtp:')) {
                var pt = line.substring('a=fmtp:'.length, line.indexOf(' '));
                var currentCodec = codecMap[pt]; // eslint-disable-line no-redeclare

                // remove this codec if SdpOptions#forceCodec specifies a different codec for current media type
                if (is_defined(currentCodec) && sdpOptions._shouldDeleteCodec(mediaType, currentCodec.name)) {
                    return null;
                }

                if (is_defined(currentCodec) && currentCodec.name.toUpperCase() === 'OPUS') {
                    // this is a line for OPUS, remove it because FMTP line is already generated when rtpmap line is processed
                    return null;
                } else {
                    return line;
                }
            } else if (line.startsWith('a=rtcp-fb:')) {
                var pt = line.substring(line.indexOf(':') + 1, line.indexOf(' ')); // eslint-disable-line no-redeclare
                if (pt === '*') {
                    //always allow wildcard in rtc-fb
                    return line;
                } else {
                    var currentCodec = codecMap[pt]; // eslint-disable-line no-redeclare

                    // remove this codec if SdpOptions#forceCodec specifies a different codec for current media type
                    if (is_defined(currentCodec) && sdpOptions._shouldDeleteCodec(mediaType, currentCodec.name)) {
                        return null;
                    } else {
                        return line;
                    }
                }
            } else {
                return line;
            }
        }).filter(function (line) {
            return line !== null;
        }).join('\r\n');
    }
    return {
        sdp: sections.map(function (section) {
            return section.trim();
        }).join('\r\n') + '\r\n',
        mLines: sections.length - 1 // first section is session description, the rest are media descriptions
    };
}

function is_defined(v) {
    return typeof v !== 'undefined';
}

function when_defined(v, alternativeIn) {
    var alternative = is_defined(alternativeIn) ? alternativeIn : null;
    return is_defined(v) ? v : alternative;
}

/**
 * Check if the getStats API for retrieving legacy stats report is supported
 */
function isLegacyStatsReportSupported(pc) {
    return new Promise(function (resolve) {
        pc.getStats(function () {
            resolve(true);
        }).catch(function () {
            // Exception thrown if browser does not support legacy stats report
            resolve(false);
        });
    });
}

/**
 * Determine if the given value is a callable function type.
 * Borrowed from Underscore.js.
 */
function isFunction(obj) {
    return !!(obj && obj.constructor && obj.call && obj.apply);
}

/**
 * Asserts that a premise is true.
 */
function assertTrue(premise, message) {
    if (!premise) {
        throw new Error(message);
    }
}

function isChromeBrowser() {
    return navigator.userAgent.indexOf("Chrome") !== -1;
}

function getChromeBrowserVersion() {
    var userAgent = navigator.userAgent;
    var chromeVersion = userAgent.substring(userAgent.indexOf("Chrome") + 7);
    if (chromeVersion) {
        return parseFloat(chromeVersion);
    } else {
        return -1;
    }
}

function getRedactedSdp(sdp) {
    // pattern to find and redact the value after 'a=ice-pwd:'
    var pattern = /a=ice-pwd:[^\r\n]*/;

    // Use the replace method to redact the value with '[redacted]'
    return sdp.replace(pattern, 'a=ice-pwd:[redacted]');
}

},{"./exceptions":149,"babel-runtime/helpers/classCallCheck":15,"babel-runtime/helpers/createClass":16,"sdp":131}],161:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _utils = require('./utils');

var _rtc_const = require('./rtc_const');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var VirtualWssConnectionManager = function () {
    function VirtualWssConnectionManager(logger, connectionId, wssManager) {
        (0, _classCallCheck3.default)(this, VirtualWssConnectionManager);

        this._logger = logger;
        this._connectionId = connectionId;
        this._wssManager = wssManager;
        this._initializeWebSocketEventListeners();
    }

    (0, _createClass3.default)(VirtualWssConnectionManager, [{
        key: '_initializeWebSocketEventListeners',
        value: function _initializeWebSocketEventListeners() {
            var _this = this;

            this._wssManager.subscribeTopics([_rtc_const.SOFTPHONE_ROUTE_KEY]);
            this._unSubscribe = this._wssManager.onMessage(_rtc_const.SOFTPHONE_ROUTE_KEY, (0, _utils.hitch)(this, this._webSocketManagerOnMessage));
            setTimeout(function () {
                _this._onOpen();
            }, 0);
        }
    }, {
        key: '_webSocketManagerOnMessage',
        value: function _webSocketManagerOnMessage(event) {
            var content = void 0;
            if (event.content) {
                content = JSON.parse(event.content);
            }
            if (this._onMessage && content && this._connectionId === content.connectionId) {
                this._onMessage({ data: JSON.stringify(content.jsonRpcMsg) });
            }
        }
    }, {
        key: 'send',
        value: function send(webSocketPayload) {
            var payload = {};
            try {
                payload.topic = _rtc_const.SOFTPHONE_ROUTE_KEY;
                payload.connectionId = this._connectionId;
                payload.jsonRpcMsg = JSON.parse(webSocketPayload);
                this._wssManager.sendMessage(payload);
            } catch (error) {
                this._logger.error("Error in sendMessage ", error);
            }
        }
    }, {
        key: 'close',
        value: function close() {
            this._logger.info("closing virtual connection");
            this._unSubscribe();
        }
    }, {
        key: 'onmessage',
        set: function set(callBack) {
            this._onMessage = callBack;
        }
    }, {
        key: 'onopen',
        set: function set(callBack) {
            this._onOpen = callBack;
        }
    }]);
    return VirtualWssConnectionManager;
}();

exports.default = VirtualWssConnectionManager;

},{"./rtc_const":150,"./utils":160,"babel-runtime/helpers/classCallCheck":15,"babel-runtime/helpers/createClass":16}]},{},[1,148])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJsaWIvZGN2LXdlYnJ0Yy1yZWRpci1jbGllbnQtYnVuZGxlLmpzIiwibm9kZV9tb2R1bGVzL0BjaXRyaXgvdWNzZGsvQ2l0cml4V2ViUlRDLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9hcnJheS9mcm9tLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9nZXQtaXRlcmF0b3IuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL2lzLWl0ZXJhYmxlLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvY3JlYXRlLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZGVmaW5lLXByb3BlcnR5LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZi5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L3NldC1wcm90b3R5cGUtb2YuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL3Byb21pc2UuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL3N5bWJvbC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvc3ltYm9sL2l0ZXJhdG9yLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvaGVscGVycy9hc3luY1RvR2VuZXJhdG9yLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjay5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9oZWxwZXJzL2dldC5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4uanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9oZWxwZXJzL3NsaWNlZFRvQXJyYXkuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9oZWxwZXJzL3RvQXJyYXkuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9oZWxwZXJzL3R5cGVvZi5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL3JlZ2VuZXJhdG9yL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9hcnJheS9mcm9tLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9nZXQtaXRlcmF0b3IuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL2lzLWl0ZXJhYmxlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvY3JlYXRlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZGVmaW5lLXByb3BlcnR5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L3NldC1wcm90b3R5cGUtb2YuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL3Byb21pc2UuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbC9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sL2l0ZXJhdG9yLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hLWZ1bmN0aW9uLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hZGQtdG8tdW5zY29wYWJsZXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FuLWluc3RhbmNlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hbi1vYmplY3QuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FycmF5LWluY2x1ZGVzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jbGFzc29mLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jb2YuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2NvcmUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2NyZWF0ZS1wcm9wZXJ0eS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY3R4LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kZWZpbmVkLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kZXNjcmlwdG9ycy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZG9tLWNyZWF0ZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZW51bS1idWcta2V5cy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZW51bS1rZXlzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19leHBvcnQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2ZhaWxzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19mb3Itb2YuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2dsb2JhbC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faGFzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19oaWRlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19odG1sLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faW52b2tlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pb2JqZWN0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pcy1hcnJheS1pdGVyLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pcy1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXMtb2JqZWN0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLWNhbGwuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXItY3JlYXRlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLWRlZmluZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1kZXRlY3QuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXItc3RlcC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlcmF0b3JzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19saWJyYXJ5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19tZXRhLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19taWNyb3Rhc2suanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX25ldy1wcm9taXNlLWNhcGFiaWxpdHkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1jcmVhdGUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1kcC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWRwcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdvcGQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1nb3BuLWV4dC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdvcG4uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1nb3BzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ3BvLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3Qta2V5cy1pbnRlcm5hbC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWtleXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1waWUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1zYXAuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3BlcmZvcm0uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3Byb21pc2UtcmVzb2x2ZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fcHJvcGVydHktZGVzYy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fcmVkZWZpbmUtYWxsLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19yZWRlZmluZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2V0LXByb3RvLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zZXQtc3BlY2llcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2V0LXRvLXN0cmluZy10YWcuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NoYXJlZC1rZXkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NoYXJlZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc3BlY2llcy1jb25zdHJ1Y3Rvci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc3RyaW5nLWF0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190YXNrLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1hYnNvbHV0ZS1pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8taW50ZWdlci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8taW9iamVjdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8tbGVuZ3RoLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1vYmplY3QuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLXByaW1pdGl2ZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdWlkLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL191c2VyLWFnZW50LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL193a3MtZGVmaW5lLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL193a3MtZXh0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL193a3MuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2NvcmUuZ2V0LWl0ZXJhdG9yLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2NvcmUuaXMtaXRlcmFibGUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2LmFycmF5LmZyb20uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2LmFycmF5Lml0ZXJhdG9yLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2LnByb21pc2UuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYuc3ltYm9sLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNy5wcm9taXNlLmZpbmFsbHkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM3LnByb21pc2UudHJ5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3IuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM3LnN5bWJvbC5vYnNlcnZhYmxlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUuanMiLCJub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLW1vZHVsZS5qcyIsIm5vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiLCJub2RlX21vZHVsZXMvcnRjcGVlcmNvbm5lY3Rpb24tc2hpbS9ydGNwZWVyY29ubmVjdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9zZHAvc2RwLmpzIiwibm9kZV9tb2R1bGVzL3V1aWQvbGliL2J5dGVzVG9VdWlkLmpzIiwibm9kZV9tb2R1bGVzL3V1aWQvbGliL3JuZy1icm93c2VyLmpzIiwibm9kZV9tb2R1bGVzL3V1aWQvdjQuanMiLCJub2RlX21vZHVsZXMvd2VicnRjLWFkYXB0ZXIvc3JjL2pzL2FkYXB0ZXJfY29yZS5qcyIsIm5vZGVfbW9kdWxlcy93ZWJydGMtYWRhcHRlci9zcmMvanMvYWRhcHRlcl9mYWN0b3J5LmpzIiwibm9kZV9tb2R1bGVzL3dlYnJ0Yy1hZGFwdGVyL3NyYy9qcy9jaHJvbWUvY2hyb21lX3NoaW0uanMiLCJub2RlX21vZHVsZXMvd2VicnRjLWFkYXB0ZXIvc3JjL2pzL2Nocm9tZS9nZXR1c2VybWVkaWEuanMiLCJub2RlX21vZHVsZXMvd2VicnRjLWFkYXB0ZXIvc3JjL2pzL2NvbW1vbl9zaGltLmpzIiwibm9kZV9tb2R1bGVzL3dlYnJ0Yy1hZGFwdGVyL3NyYy9qcy9lZGdlL2VkZ2Vfc2hpbS5qcyIsIm5vZGVfbW9kdWxlcy93ZWJydGMtYWRhcHRlci9zcmMvanMvZWRnZS9maWx0ZXJpY2VzZXJ2ZXJzLmpzIiwibm9kZV9tb2R1bGVzL3dlYnJ0Yy1hZGFwdGVyL3NyYy9qcy9lZGdlL2dldHVzZXJtZWRpYS5qcyIsIm5vZGVfbW9kdWxlcy93ZWJydGMtYWRhcHRlci9zcmMvanMvZmlyZWZveC9maXJlZm94X3NoaW0uanMiLCJub2RlX21vZHVsZXMvd2VicnRjLWFkYXB0ZXIvc3JjL2pzL2ZpcmVmb3gvZ2V0dXNlcm1lZGlhLmpzIiwibm9kZV9tb2R1bGVzL3dlYnJ0Yy1hZGFwdGVyL3NyYy9qcy9zYWZhcmkvc2FmYXJpX3NoaW0uanMiLCJub2RlX21vZHVsZXMvd2VicnRjLWFkYXB0ZXIvc3JjL2pzL3V0aWxzLmpzIiwic3JjL2pzL2NvbmZpZy9jb25zdGFudHMuanMiLCJzcmMvanMvY29ubmVjdC1ydGMuanMiLCJzcmMvanMvZXhjZXB0aW9ucy5qcyIsInNyYy9qcy9ydGNfY29uc3QuanMiLCJzcmMvanMvcnRjX3BlZXJfY29ubmVjdGlvbl9mYWN0b3J5LmpzIiwic3JjL2pzL3J0Y19zZXNzaW9uLmpzIiwic3JjL2pzL3J0cC1zdGF0cy5qcyIsInNyYy9qcy9zZXNzaW9uX3JlcG9ydC5qcyIsInNyYy9qcy9zaWduYWxpbmcuanMiLCJzcmMvanMvc3RyYXRlZ2llcy9DQ1BJbml0aWF0aW9uU3RyYXRlZ3lJbnRlcmZhY2UuanMiLCJzcmMvanMvc3RyYXRlZ2llcy9DaXRyaXhWRElTdHJhdGVneS5qcyIsInNyYy9qcy9zdHJhdGVnaWVzL0RDVldlYlJUQ1N0cmF0ZWd5LmpzIiwic3JjL2pzL3N0cmF0ZWdpZXMvU3RhbmRhcmRTdHJhdGVneS5qcyIsInNyYy9qcy91dGlscy5qcyIsInNyYy9qcy92aXJ0dWFsX3dzc19jb25uZWN0aW9uX21hbmFnZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ0FBLENBQUMsVUFBUyxDQUFULEVBQVcsQ0FBWCxFQUFhO0FBQUMsc0JBQWlCLE9BQWpCLHVEQUFpQixPQUFqQixNQUEwQixvQkFBaUIsTUFBakIsdURBQWlCLE1BQWpCLEVBQTFCLEdBQWtELE9BQU8sT0FBUCxHQUFlLEdBQWpFLEdBQXFFLGNBQVksT0FBTyxNQUFuQixJQUEyQixPQUFPLEdBQWxDLEdBQXNDLE9BQU8sRUFBUCxFQUFVLENBQVYsQ0FBdEMsR0FBbUQsb0JBQWlCLE9BQWpCLHVEQUFpQixPQUFqQixLQUF5QixRQUFRLGNBQVIsR0FBdUIsR0FBaEQsR0FBb0QsRUFBRSxjQUFGLEdBQWlCLEdBQTdMO0FBQWlNLENBQS9NLENBQWdOLElBQWhOLEVBQXNOO0FBQUEsU0FBSyxZQUFJO0FBQUMsUUFBSSxJQUFFLEVBQUMsS0FBSSxXQUFTLENBQVQsRUFBVyxDQUFYLEVBQWE7QUFBQyxTQUFDLFVBQVMsQ0FBVCxFQUFXO0FBQUM7QUFBYSxlQUFJLElBQUks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QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDM29CQTs7QUNBQTs7QUNBQTs7QUNBQTs7QUNBQTs7QUNBQTs7QUNBQTs7QUNBQTs7QUNBQTs7QUNBQTs7QUNBQTs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BCQTtBQUNBOztBQ0RBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTs7QUNGQTtBQUNBO0FBQ0E7O0FDRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBOztBQ0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7O0FDRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7O0FDRkE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RCQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBOztBQ0RBO0FBQ0E7O0FDREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNiQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7O0FDREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNiQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTs7QUNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTs7QUNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTs7QUNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNWQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xDQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1pBO0FBQ0E7O0FDREE7QUFDQTs7QUNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdnRCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqMERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3p6QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQzdCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDYkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3o2QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2UEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeEdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3VEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMVRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7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WixxQkFBSyxPQUFMLENBQWEsS0FBYixDQUFtQix1QkFBbkIsRUFBNEMsS0FBNUM7QUFDSDtBQUNKOzs7Z0NBRU87QUFDSixpQkFBSyxPQUFMLENBQWEsSUFBYixDQUFrQiw0QkFBbEI7QUFDQSxpQkFBSyxZQUFMO0FBQ0g7OzswQkF2QmEsUSxFQUFVO0FBQ3BCLGlCQUFLLFVBQUwsR0FBa0IsUUFBbEI7QUFDSDs7OzBCQUVVLFEsRUFBVTtBQUNqQixpQkFBSyxPQUFMLEdBQWUsUUFBZjtBQUNIOzs7OztrQkFoQ2dCLDJCIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpIiwiIWZ1bmN0aW9uKGUsdCl7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGU/bW9kdWxlLmV4cG9ydHM9dCgpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW10sdCk6XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHM/ZXhwb3J0cy5kY3Z3ZWJydGNyZWRpcj10KCk6ZS5kY3Z3ZWJydGNyZWRpcj10KCl9KHNlbGYsKCgpPT4oKCk9Pnt2YXIgZT17MTE0OmZ1bmN0aW9uKGUsdCl7IWZ1bmN0aW9uKGUpe1widXNlIHN0cmljdFwiO2Zvcih2YXIgdD1cIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky9cIixyPVwidW5kZWZpbmVkXCI9PXR5cGVvZiBVaW50OEFycmF5P1tdOm5ldyBVaW50OEFycmF5KDI1Niksbj0wO248dC5sZW5ndGg7bisrKXJbdC5jaGFyQ29kZUF0KG4pXT1uO3ZhciBpPWZ1bmN0aW9uKGUpe3ZhciByLG49bmV3IFVpbnQ4QXJyYXkoZSksaT1uLmxlbmd0aCxzPVwiXCI7Zm9yKHI9MDtyPGk7cis9MylzKz10W25bcl0+PjJdLHMrPXRbKDMmbltyXSk8PDR8bltyKzFdPj40XSxzKz10WygxNSZuW3IrMV0pPDwyfG5bcisyXT4+Nl0scys9dFs2MyZuW3IrMl1dO3JldHVybiBpJTM9PTI/cz1zLnN1YnN0cmluZygwLHMubGVuZ3RoLTEpK1wiPVwiOmklMz09MSYmKHM9cy5zdWJzdHJpbmcoMCxzLmxlbmd0aC0yKStcIj09XCIpLHN9LHM9ZnVuY3Rpb24oZSl7dmFyIHQsbixpLHMsYSxvPS43NSplLmxlbmd0aCxjPWUubGVuZ3RoLGQ9MDtcIj1cIj09PWVbZS5sZW5ndGgtMV0mJihvLS0sXCI9XCI9PT1lW2UubGVuZ3RoLTJdJiZvLS0pO3ZhciBsPW5ldyBBcnJheUJ1ZmZlcihvKSxwPW5ldyBVaW50OEFycmF5KGwpO2Zvcih0PTA7dDxjO3QrPTQpbj1yW2UuY2hhckNvZGVBdCh0KV0saT1yW2UuY2hhckNvZGVBdCh0KzEpXSxzPXJbZS5jaGFyQ29kZUF0KHQrMildLGE9cltlLmNoYXJDb2RlQXQodCszKV0scFtkKytdPW48PDJ8aT4+NCxwW2QrK109KDE1JmkpPDw0fHM+PjIscFtkKytdPSgzJnMpPDw2fDYzJmE7cmV0dXJuIGx9O2UuZGVjb2RlPXMsZS5lbmNvZGU9aSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KX0odCl9LDQzOmZ1bmN0aW9uKGUsdCxyKXt2YXIgbixpOyFmdW5jdGlvbihzLGEpe1widXNlIHN0cmljdFwiO249ZnVuY3Rpb24oKXt2YXIgZT1mdW5jdGlvbigpe30sdD1cInVuZGVmaW5lZFwiLHI9dHlwZW9mIHdpbmRvdyE9PXQmJnR5cGVvZiB3aW5kb3cubmF2aWdhdG9yIT09dCYmL1RyaWRlbnRcXC98TVNJRSAvLnRlc3Qod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpLG49W1widHJhY2VcIixcImRlYnVnXCIsXCJpbmZvXCIsXCJ3YXJuXCIsXCJlcnJvclwiXTtmdW5jdGlvbiBpKGUsdCl7dmFyIHI9ZVt0XTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiByLmJpbmQpcmV0dXJuIHIuYmluZChlKTt0cnl7cmV0dXJuIEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLmNhbGwocixlKX1jYXRjaCh0KXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmFwcGx5KHIsW2UsYXJndW1lbnRzXSl9fX1mdW5jdGlvbiBzKCl7Y29uc29sZS5sb2cmJihjb25zb2xlLmxvZy5hcHBseT9jb25zb2xlLmxvZy5hcHBseShjb25zb2xlLGFyZ3VtZW50cyk6RnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmFwcGx5KGNvbnNvbGUubG9nLFtjb25zb2xlLGFyZ3VtZW50c10pKSxjb25zb2xlLnRyYWNlJiZjb25zb2xlLnRyYWNlKCl9ZnVuY3Rpb24gYShuKXtyZXR1cm5cImRlYnVnXCI9PT1uJiYobj1cImxvZ1wiKSx0eXBlb2YgY29uc29sZSE9PXQmJihcInRyYWNlXCI9PT1uJiZyP3M6dm9pZCAwIT09Y29uc29sZVtuXT9pKGNvbnNvbGUsbik6dm9pZCAwIT09Y29uc29sZS5sb2c/aShjb25zb2xlLFwibG9nXCIpOmUpfWZ1bmN0aW9uIG8odCxyKXtmb3IodmFyIGk9MDtpPG4ubGVuZ3RoO2krKyl7dmFyIHM9bltpXTt0aGlzW3NdPWk8dD9lOnRoaXMubWV0aG9kRmFjdG9yeShzLHQscil9dGhpcy5sb2c9dGhpcy5kZWJ1Z31mdW5jdGlvbiBjKGUscixuKXtyZXR1cm4gZnVuY3Rpb24oKXt0eXBlb2YgY29uc29sZSE9PXQmJihvLmNhbGwodGhpcyxyLG4pLHRoaXNbZV0uYXBwbHkodGhpcyxhcmd1bWVudHMpKX19ZnVuY3Rpb24gZChlLHQscil7cmV0dXJuIGEoZSl8fGMuYXBwbHkodGhpcyxhcmd1bWVudHMpfWZ1bmN0aW9uIGwoZSxyLGkpe3ZhciBzLGE9dGhpcztyPW51bGw9PXI/XCJXQVJOXCI6cjt2YXIgYz1cImxvZ2xldmVsXCI7ZnVuY3Rpb24gbChlKXt2YXIgcj0obltlXXx8XCJzaWxlbnRcIikudG9VcHBlckNhc2UoKTtpZih0eXBlb2Ygd2luZG93IT09dCYmYyl7dHJ5e3JldHVybiB2b2lkKHdpbmRvdy5sb2NhbFN0b3JhZ2VbY109cil9Y2F0Y2goZSl7fXRyeXt3aW5kb3cuZG9jdW1lbnQuY29va2llPWVuY29kZVVSSUNvbXBvbmVudChjKStcIj1cIityK1wiO1wifWNhdGNoKGUpe319fWZ1bmN0aW9uIHAoKXt2YXIgZTtpZih0eXBlb2Ygd2luZG93IT09dCYmYyl7dHJ5e2U9d2luZG93LmxvY2FsU3RvcmFnZVtjXX1jYXRjaChlKXt9aWYodHlwZW9mIGU9PT10KXRyeXt2YXIgcj13aW5kb3cuZG9jdW1lbnQuY29va2llLG49ci5pbmRleE9mKGVuY29kZVVSSUNvbXBvbmVudChjKStcIj1cIik7LTEhPT1uJiYoZT0vXihbXjtdKykvLmV4ZWMoci5zbGljZShuKSlbMV0pfWNhdGNoKGUpe31yZXR1cm4gdm9pZCAwPT09YS5sZXZlbHNbZV0mJihlPXZvaWQgMCksZX19ZnVuY3Rpb24gaCgpe2lmKHR5cGVvZiB3aW5kb3chPT10JiZjKXt0cnl7cmV0dXJuIHZvaWQgd2luZG93LmxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGMpfWNhdGNoKGUpe310cnl7d2luZG93LmRvY3VtZW50LmNvb2tpZT1lbmNvZGVVUklDb21wb25lbnQoYykrXCI9OyBleHBpcmVzPVRodSwgMDEgSmFuIDE5NzAgMDA6MDA6MDAgVVRDXCJ9Y2F0Y2goZSl7fX19XCJzdHJpbmdcIj09dHlwZW9mIGU/Yys9XCI6XCIrZTpcInN5bWJvbFwiPT10eXBlb2YgZSYmKGM9dm9pZCAwKSxhLm5hbWU9ZSxhLmxldmVscz17VFJBQ0U6MCxERUJVRzoxLElORk86MixXQVJOOjMsRVJST1I6NCxTSUxFTlQ6NX0sYS5tZXRob2RGYWN0b3J5PWl8fGQsYS5nZXRMZXZlbD1mdW5jdGlvbigpe3JldHVybiBzfSxhLnNldExldmVsPWZ1bmN0aW9uKHIsbil7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHImJnZvaWQgMCE9PWEubGV2ZWxzW3IudG9VcHBlckNhc2UoKV0mJihyPWEubGV2ZWxzW3IudG9VcHBlckNhc2UoKV0pLCEoXCJudW1iZXJcIj09dHlwZW9mIHImJnI+PTAmJnI8PWEubGV2ZWxzLlNJTEVOVCkpdGhyb3dcImxvZy5zZXRMZXZlbCgpIGNhbGxlZCB3aXRoIGludmFsaWQgbGV2ZWw6IFwiK3I7aWYocz1yLCExIT09biYmbChyKSxvLmNhbGwoYSxyLGUpLHR5cGVvZiBjb25zb2xlPT09dCYmcjxhLmxldmVscy5TSUxFTlQpcmV0dXJuXCJObyBjb25zb2xlIGF2YWlsYWJsZSBmb3IgbG9nZ2luZ1wifSxhLnNldERlZmF1bHRMZXZlbD1mdW5jdGlvbihlKXtyPWUscCgpfHxhLnNldExldmVsKGUsITEpfSxhLnJlc2V0TGV2ZWw9ZnVuY3Rpb24oKXthLnNldExldmVsKHIsITEpLGgoKX0sYS5lbmFibGVBbGw9ZnVuY3Rpb24oZSl7YS5zZXRMZXZlbChhLmxldmVscy5UUkFDRSxlKX0sYS5kaXNhYmxlQWxsPWZ1bmN0aW9uKGUpe2Euc2V0TGV2ZWwoYS5sZXZlbHMuU0lMRU5ULGUpfTt2YXIgdT1wKCk7bnVsbD09dSYmKHU9ciksYS5zZXRMZXZlbCh1LCExKX12YXIgcD1uZXcgbCxoPXt9O3AuZ2V0TG9nZ2VyPWZ1bmN0aW9uKGUpe2lmKFwic3ltYm9sXCIhPXR5cGVvZiBlJiZcInN0cmluZ1wiIT10eXBlb2YgZXx8XCJcIj09PWUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIllvdSBtdXN0IHN1cHBseSBhIG5hbWUgd2hlbiBjcmVhdGluZyBhIGxvZ2dlci5cIik7dmFyIHQ9aFtlXTtyZXR1cm4gdHx8KHQ9aFtlXT1uZXcgbChlLHAuZ2V0TGV2ZWwoKSxwLm1ldGhvZEZhY3RvcnkpKSx0fTt2YXIgdT10eXBlb2Ygd2luZG93IT09dD93aW5kb3cubG9nOnZvaWQgMDtyZXR1cm4gcC5ub0NvbmZsaWN0PWZ1bmN0aW9uKCl7cmV0dXJuIHR5cGVvZiB3aW5kb3chPT10JiZ3aW5kb3cubG9nPT09cCYmKHdpbmRvdy5sb2c9dSkscH0scC5nZXRMb2dnZXJzPWZ1bmN0aW9uKCl7cmV0dXJuIGh9LHAuZGVmYXVsdD1wLHB9LHZvaWQgMD09PShpPVwiZnVuY3Rpb25cIj09dHlwZW9mIG4/bi5jYWxsKHQscix0LGUpOm4pfHwoZS5leHBvcnRzPWkpfSgpfSw1OTE6KGUsdCxyKT0+e1widXNlIHN0cmljdFwiO2NvbnN0e0RlZmxhdGU6bixkZWZsYXRlOmksZGVmbGF0ZVJhdzpzLGd6aXA6YX09cig1NTUpLHtJbmZsYXRlOm8saW5mbGF0ZTpjLGluZmxhdGVSYXc6ZCx1bmd6aXA6bH09cig4NDMpLHA9cig2MTkpO2UuZXhwb3J0cy5EZWZsYXRlPW4sZS5leHBvcnRzLmRlZmxhdGU9aSxlLmV4cG9ydHMuZGVmbGF0ZVJhdz1zLGUuZXhwb3J0cy5nemlwPWEsZS5leHBvcnRzLkluZmxhdGU9byxlLmV4cG9ydHMuaW5mbGF0ZT1jLGUuZXhwb3J0cy5pbmZsYXRlUmF3PWQsZS5leHBvcnRzLnVuZ3ppcD1sLGUuZXhwb3J0cy5jb25zdGFudHM9cH0sNTU1OihlLHQscik9PntcInVzZSBzdHJpY3RcIjtjb25zdCBuPXIoNDA1KSxpPXIoMjM2KSxzPXIoMzczKSxhPXIoODk4KSxvPXIoMjkyKSxjPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcse1pfTk9fRkxVU0g6ZCxaX1NZTkNfRkxVU0g6bCxaX0ZVTExfRkxVU0g6cCxaX0ZJTklTSDpoLFpfT0s6dSxaX1NUUkVBTV9FTkQ6ZixaX0RFRkFVTFRfQ09NUFJFU1NJT046bSxaX0RFRkFVTFRfU1RSQVRFR1k6XyxaX0RFRkxBVEVEOmd9PXIoNjE5KTtmdW5jdGlvbiB2KGUpe3RoaXMub3B0aW9ucz1pLmFzc2lnbih7bGV2ZWw6bSxtZXRob2Q6ZyxjaHVua1NpemU6MTYzODQsd2luZG93Qml0czoxNSxtZW1MZXZlbDo4LHN0cmF0ZWd5Ol99LGV8fHt9KTtsZXQgdD10aGlzLm9wdGlvbnM7dC5yYXcmJnQud2luZG93Qml0cz4wP3Qud2luZG93Qml0cz0tdC53aW5kb3dCaXRzOnQuZ3ppcCYmdC53aW5kb3dCaXRzPjAmJnQud2luZG93Qml0czwxNiYmKHQud2luZG93Qml0cys9MTYpLHRoaXMuZXJyPTAsdGhpcy5tc2c9XCJcIix0aGlzLmVuZGVkPSExLHRoaXMuY2h1bmtzPVtdLHRoaXMuc3RybT1uZXcgbyx0aGlzLnN0cm0uYXZhaWxfb3V0PTA7bGV0IHI9bi5kZWZsYXRlSW5pdDIodGhpcy5zdHJtLHQubGV2ZWwsdC5tZXRob2QsdC53aW5kb3dCaXRzLHQubWVtTGV2ZWwsdC5zdHJhdGVneSk7aWYociE9PXUpdGhyb3cgbmV3IEVycm9yKGFbcl0pO2lmKHQuaGVhZGVyJiZuLmRlZmxhdGVTZXRIZWFkZXIodGhpcy5zdHJtLHQuaGVhZGVyKSx0LmRpY3Rpb25hcnkpe2xldCBlO2lmKGU9XCJzdHJpbmdcIj09dHlwZW9mIHQuZGljdGlvbmFyeT9zLnN0cmluZzJidWYodC5kaWN0aW9uYXJ5KTpcIltvYmplY3QgQXJyYXlCdWZmZXJdXCI9PT1jLmNhbGwodC5kaWN0aW9uYXJ5KT9uZXcgVWludDhBcnJheSh0LmRpY3Rpb25hcnkpOnQuZGljdGlvbmFyeSxyPW4uZGVmbGF0ZVNldERpY3Rpb25hcnkodGhpcy5zdHJtLGUpLHIhPT11KXRocm93IG5ldyBFcnJvcihhW3JdKTt0aGlzLl9kaWN0X3NldD0hMH19ZnVuY3Rpb24gRShlLHQpe2NvbnN0IHI9bmV3IHYodCk7aWYoci5wdXNoKGUsITApLHIuZXJyKXRocm93IHIubXNnfHxhW3IuZXJyXTtyZXR1cm4gci5yZXN1bHR9di5wcm90b3R5cGUucHVzaD1mdW5jdGlvbihlLHQpe2NvbnN0IHI9dGhpcy5zdHJtLGk9dGhpcy5vcHRpb25zLmNodW5rU2l6ZTtsZXQgYSxvO2lmKHRoaXMuZW5kZWQpcmV0dXJuITE7Zm9yKG89dD09PX5+dD90OiEwPT09dD9oOmQsXCJzdHJpbmdcIj09dHlwZW9mIGU/ci5pbnB1dD1zLnN0cmluZzJidWYoZSk6XCJbb2JqZWN0IEFycmF5QnVmZmVyXVwiPT09Yy5jYWxsKGUpP3IuaW5wdXQ9bmV3IFVpbnQ4QXJyYXkoZSk6ci5pbnB1dD1lLHIubmV4dF9pbj0wLHIuYXZhaWxfaW49ci5pbnB1dC5sZW5ndGg7OylpZigwPT09ci5hdmFpbF9vdXQmJihyLm91dHB1dD1uZXcgVWludDhBcnJheShpKSxyLm5leHRfb3V0PTAsci5hdmFpbF9vdXQ9aSksKG89PT1sfHxvPT09cCkmJnIuYXZhaWxfb3V0PD02KXRoaXMub25EYXRhKHIub3V0cHV0LnN1YmFycmF5KDAsci5uZXh0X291dCkpLHIuYXZhaWxfb3V0PTA7ZWxzZXtpZihhPW4uZGVmbGF0ZShyLG8pLGE9PT1mKXJldHVybiByLm5leHRfb3V0PjAmJnRoaXMub25EYXRhKHIub3V0cHV0LnN1YmFycmF5KDAsci5uZXh0X291dCkpLGE9bi5kZWZsYXRlRW5kKHRoaXMuc3RybSksdGhpcy5vbkVuZChhKSx0aGlzLmVuZGVkPSEwLGE9PT11O2lmKDAhPT1yLmF2YWlsX291dCl7aWYobz4wJiZyLm5leHRfb3V0PjApdGhpcy5vbkRhdGEoci5vdXRwdXQuc3ViYXJyYXkoMCxyLm5leHRfb3V0KSksci5hdmFpbF9vdXQ9MDtlbHNlIGlmKDA9PT1yLmF2YWlsX2luKWJyZWFrfWVsc2UgdGhpcy5vbkRhdGEoci5vdXRwdXQpfXJldHVybiEwfSx2LnByb3RvdHlwZS5vbkRhdGE9ZnVuY3Rpb24oZSl7dGhpcy5jaHVua3MucHVzaChlKX0sdi5wcm90b3R5cGUub25FbmQ9ZnVuY3Rpb24oZSl7ZT09PXUmJih0aGlzLnJlc3VsdD1pLmZsYXR0ZW5DaHVua3ModGhpcy5jaHVua3MpKSx0aGlzLmNodW5rcz1bXSx0aGlzLmVycj1lLHRoaXMubXNnPXRoaXMuc3RybS5tc2d9LGUuZXhwb3J0cy5EZWZsYXRlPXYsZS5leHBvcnRzLmRlZmxhdGU9RSxlLmV4cG9ydHMuZGVmbGF0ZVJhdz1mdW5jdGlvbihlLHQpe3JldHVybih0PXR8fHt9KS5yYXc9ITAsRShlLHQpfSxlLmV4cG9ydHMuZ3ppcD1mdW5jdGlvbihlLHQpe3JldHVybih0PXR8fHt9KS5nemlwPSEwLEUoZSx0KX0sZS5leHBvcnRzLmNvbnN0YW50cz1yKDYxOSl9LDg0MzooZSx0LHIpPT57XCJ1c2Ugc3RyaWN0XCI7Y29uc3Qgbj1yKDk0OCksaT1yKDIzNikscz1yKDM3MyksYT1yKDg5OCksbz1yKDI5MiksYz1yKDE4OCksZD1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLHtaX05PX0ZMVVNIOmwsWl9GSU5JU0g6cCxaX09LOmgsWl9TVFJFQU1fRU5EOnUsWl9ORUVEX0RJQ1Q6ZixaX1NUUkVBTV9FUlJPUjptLFpfREFUQV9FUlJPUjpfLFpfTUVNX0VSUk9SOmd9PXIoNjE5KTtmdW5jdGlvbiB2KGUpe3RoaXMub3B0aW9ucz1pLmFzc2lnbih7Y2h1bmtTaXplOjY1NTM2LHdpbmRvd0JpdHM6MTUsdG86XCJcIn0sZXx8e30pO2NvbnN0IHQ9dGhpcy5vcHRpb25zO3QucmF3JiZ0LndpbmRvd0JpdHM+PTAmJnQud2luZG93Qml0czwxNiYmKHQud2luZG93Qml0cz0tdC53aW5kb3dCaXRzLDA9PT10LndpbmRvd0JpdHMmJih0LndpbmRvd0JpdHM9LTE1KSksISh0LndpbmRvd0JpdHM+PTAmJnQud2luZG93Qml0czwxNil8fGUmJmUud2luZG93Qml0c3x8KHQud2luZG93Qml0cys9MzIpLHQud2luZG93Qml0cz4xNSYmdC53aW5kb3dCaXRzPDQ4JiYwPT0oMTUmdC53aW5kb3dCaXRzKSYmKHQud2luZG93Qml0c3w9MTUpLHRoaXMuZXJyPTAsdGhpcy5tc2c9XCJcIix0aGlzLmVuZGVkPSExLHRoaXMuY2h1bmtzPVtdLHRoaXMuc3RybT1uZXcgbyx0aGlzLnN0cm0uYXZhaWxfb3V0PTA7bGV0IHI9bi5pbmZsYXRlSW5pdDIodGhpcy5zdHJtLHQud2luZG93Qml0cyk7aWYociE9PWgpdGhyb3cgbmV3IEVycm9yKGFbcl0pO2lmKHRoaXMuaGVhZGVyPW5ldyBjLG4uaW5mbGF0ZUdldEhlYWRlcih0aGlzLnN0cm0sdGhpcy5oZWFkZXIpLHQuZGljdGlvbmFyeSYmKFwic3RyaW5nXCI9PXR5cGVvZiB0LmRpY3Rpb25hcnk/dC5kaWN0aW9uYXJ5PXMuc3RyaW5nMmJ1Zih0LmRpY3Rpb25hcnkpOlwiW29iamVjdCBBcnJheUJ1ZmZlcl1cIj09PWQuY2FsbCh0LmRpY3Rpb25hcnkpJiYodC5kaWN0aW9uYXJ5PW5ldyBVaW50OEFycmF5KHQuZGljdGlvbmFyeSkpLHQucmF3JiYocj1uLmluZmxhdGVTZXREaWN0aW9uYXJ5KHRoaXMuc3RybSx0LmRpY3Rpb25hcnkpLHIhPT1oKSkpdGhyb3cgbmV3IEVycm9yKGFbcl0pfWZ1bmN0aW9uIEUoZSx0KXtjb25zdCByPW5ldyB2KHQpO2lmKHIucHVzaChlKSxyLmVycil0aHJvdyByLm1zZ3x8YVtyLmVycl07cmV0dXJuIHIucmVzdWx0fXYucHJvdG90eXBlLnB1c2g9ZnVuY3Rpb24oZSx0KXtjb25zdCByPXRoaXMuc3RybSxpPXRoaXMub3B0aW9ucy5jaHVua1NpemUsYT10aGlzLm9wdGlvbnMuZGljdGlvbmFyeTtsZXQgbyxjLHY7aWYodGhpcy5lbmRlZClyZXR1cm4hMTtmb3IoYz10PT09fn50P3Q6ITA9PT10P3A6bCxcIltvYmplY3QgQXJyYXlCdWZmZXJdXCI9PT1kLmNhbGwoZSk/ci5pbnB1dD1uZXcgVWludDhBcnJheShlKTpyLmlucHV0PWUsci5uZXh0X2luPTAsci5hdmFpbF9pbj1yLmlucHV0Lmxlbmd0aDs7KXtmb3IoMD09PXIuYXZhaWxfb3V0JiYoci5vdXRwdXQ9bmV3IFVpbnQ4QXJyYXkoaSksci5uZXh0X291dD0wLHIuYXZhaWxfb3V0PWkpLG89bi5pbmZsYXRlKHIsYyksbz09PWYmJmEmJihvPW4uaW5mbGF0ZVNldERpY3Rpb25hcnkocixhKSxvPT09aD9vPW4uaW5mbGF0ZShyLGMpOm89PT1fJiYobz1mKSk7ci5hdmFpbF9pbj4wJiZvPT09dSYmci5zdGF0ZS53cmFwPjAmJjAhPT1lW3IubmV4dF9pbl07KW4uaW5mbGF0ZVJlc2V0KHIpLG89bi5pbmZsYXRlKHIsYyk7c3dpdGNoKG8pe2Nhc2UgbTpjYXNlIF86Y2FzZSBmOmNhc2UgZzpyZXR1cm4gdGhpcy5vbkVuZChvKSx0aGlzLmVuZGVkPSEwLCExfWlmKHY9ci5hdmFpbF9vdXQsci5uZXh0X291dCYmKDA9PT1yLmF2YWlsX291dHx8bz09PXUpKWlmKFwic3RyaW5nXCI9PT10aGlzLm9wdGlvbnMudG8pe2xldCBlPXMudXRmOGJvcmRlcihyLm91dHB1dCxyLm5leHRfb3V0KSx0PXIubmV4dF9vdXQtZSxuPXMuYnVmMnN0cmluZyhyLm91dHB1dCxlKTtyLm5leHRfb3V0PXQsci5hdmFpbF9vdXQ9aS10LHQmJnIub3V0cHV0LnNldChyLm91dHB1dC5zdWJhcnJheShlLGUrdCksMCksdGhpcy5vbkRhdGEobil9ZWxzZSB0aGlzLm9uRGF0YShyLm91dHB1dC5sZW5ndGg9PT1yLm5leHRfb3V0P3Iub3V0cHV0OnIub3V0cHV0LnN1YmFycmF5KDAsci5uZXh0X291dCkpO2lmKG8hPT1ofHwwIT09dil7aWYobz09PXUpcmV0dXJuIG89bi5pbmZsYXRlRW5kKHRoaXMuc3RybSksdGhpcy5vbkVuZChvKSx0aGlzLmVuZGVkPSEwLCEwO2lmKDA9PT1yLmF2YWlsX2luKWJyZWFrfX1yZXR1cm4hMH0sdi5wcm90b3R5cGUub25EYXRhPWZ1bmN0aW9uKGUpe3RoaXMuY2h1bmtzLnB1c2goZSl9LHYucHJvdG90eXBlLm9uRW5kPWZ1bmN0aW9uKGUpe2U9PT1oJiYoXCJzdHJpbmdcIj09PXRoaXMub3B0aW9ucy50bz90aGlzLnJlc3VsdD10aGlzLmNodW5rcy5qb2luKFwiXCIpOnRoaXMucmVzdWx0PWkuZmxhdHRlbkNodW5rcyh0aGlzLmNodW5rcykpLHRoaXMuY2h1bmtzPVtdLHRoaXMuZXJyPWUsdGhpcy5tc2c9dGhpcy5zdHJtLm1zZ30sZS5leHBvcnRzLkluZmxhdGU9dixlLmV4cG9ydHMuaW5mbGF0ZT1FLGUuZXhwb3J0cy5pbmZsYXRlUmF3PWZ1bmN0aW9uKGUsdCl7cmV0dXJuKHQ9dHx8e30pLnJhdz0hMCxFKGUsdCl9LGUuZXhwb3J0cy51bmd6aXA9RSxlLmV4cG9ydHMuY29uc3RhbnRzPXIoNjE5KX0sMjM2OmU9PntcInVzZSBzdHJpY3RcIjtjb25zdCB0PShlLHQpPT5PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSx0KTtlLmV4cG9ydHMuYXNzaWduPWZ1bmN0aW9uKGUpe2NvbnN0IHI9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDEpO2Zvcig7ci5sZW5ndGg7KXtjb25zdCBuPXIuc2hpZnQoKTtpZihuKXtpZihcIm9iamVjdFwiIT10eXBlb2Ygbil0aHJvdyBuZXcgVHlwZUVycm9yKG4rXCJtdXN0IGJlIG5vbi1vYmplY3RcIik7Zm9yKGNvbnN0IHIgaW4gbil0KG4scikmJihlW3JdPW5bcl0pfX1yZXR1cm4gZX0sZS5leHBvcnRzLmZsYXR0ZW5DaHVua3M9ZT0+e2xldCB0PTA7Zm9yKGxldCByPTAsbj1lLmxlbmd0aDtyPG47cisrKXQrPWVbcl0ubGVuZ3RoO2NvbnN0IHI9bmV3IFVpbnQ4QXJyYXkodCk7Zm9yKGxldCB0PTAsbj0wLGk9ZS5sZW5ndGg7dDxpO3QrKyl7bGV0IGk9ZVt0XTtyLnNldChpLG4pLG4rPWkubGVuZ3RofXJldHVybiByfX0sMzczOmU9PntcInVzZSBzdHJpY3RcIjtsZXQgdD0hMDt0cnl7U3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLG5ldyBVaW50OEFycmF5KDEpKX1jYXRjaChlKXt0PSExfWNvbnN0IHI9bmV3IFVpbnQ4QXJyYXkoMjU2KTtmb3IobGV0IGU9MDtlPDI1NjtlKyspcltlXT1lPj0yNTI/NjplPj0yNDg/NTplPj0yNDA/NDplPj0yMjQ/MzplPj0xOTI/MjoxO3JbMjU0XT1yWzI1NF09MSxlLmV4cG9ydHMuc3RyaW5nMmJ1Zj1lPT57aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgVGV4dEVuY29kZXImJlRleHRFbmNvZGVyLnByb3RvdHlwZS5lbmNvZGUpcmV0dXJuKG5ldyBUZXh0RW5jb2RlcikuZW5jb2RlKGUpO2xldCB0LHIsbixpLHMsYT1lLmxlbmd0aCxvPTA7Zm9yKGk9MDtpPGE7aSsrKXI9ZS5jaGFyQ29kZUF0KGkpLDU1Mjk2PT0oNjQ1MTImcikmJmkrMTxhJiYobj1lLmNoYXJDb2RlQXQoaSsxKSw1NjMyMD09KDY0NTEyJm4pJiYocj02NTUzNisoci01NTI5Njw8MTApKyhuLTU2MzIwKSxpKyspKSxvKz1yPDEyOD8xOnI8MjA0OD8yOnI8NjU1MzY/Mzo0O2Zvcih0PW5ldyBVaW50OEFycmF5KG8pLHM9MCxpPTA7czxvO2krKylyPWUuY2hhckNvZGVBdChpKSw1NTI5Nj09KDY0NTEyJnIpJiZpKzE8YSYmKG49ZS5jaGFyQ29kZUF0KGkrMSksNTYzMjA9PSg2NDUxMiZuKSYmKHI9NjU1MzYrKHItNTUyOTY8PDEwKSsobi01NjMyMCksaSsrKSkscjwxMjg/dFtzKytdPXI6cjwyMDQ4Pyh0W3MrK109MTkyfHI+Pj42LHRbcysrXT0xMjh8NjMmcik6cjw2NTUzNj8odFtzKytdPTIyNHxyPj4+MTIsdFtzKytdPTEyOHxyPj4+NiY2Myx0W3MrK109MTI4fDYzJnIpOih0W3MrK109MjQwfHI+Pj4xOCx0W3MrK109MTI4fHI+Pj4xMiY2Myx0W3MrK109MTI4fHI+Pj42JjYzLHRbcysrXT0xMjh8NjMmcik7cmV0dXJuIHR9O2UuZXhwb3J0cy5idWYyc3RyaW5nPShlLG4pPT57Y29uc3QgaT1ufHxlLmxlbmd0aDtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBUZXh0RGVjb2RlciYmVGV4dERlY29kZXIucHJvdG90eXBlLmRlY29kZSlyZXR1cm4obmV3IFRleHREZWNvZGVyKS5kZWNvZGUoZS5zdWJhcnJheSgwLG4pKTtsZXQgcyxhO2NvbnN0IG89bmV3IEFycmF5KDIqaSk7Zm9yKGE9MCxzPTA7czxpOyl7bGV0IHQ9ZVtzKytdO2lmKHQ8MTI4KXtvW2ErK109dDtjb250aW51ZX1sZXQgbj1yW3RdO2lmKG4+NClvW2ErK109NjU1MzMscys9bi0xO2Vsc2V7Zm9yKHQmPTI9PT1uPzMxOjM9PT1uPzE1Ojc7bj4xJiZzPGk7KXQ9dDw8Nnw2MyZlW3MrK10sbi0tO24+MT9vW2ErK109NjU1MzM6dDw2NTUzNj9vW2ErK109dDoodC09NjU1MzYsb1thKytdPTU1Mjk2fHQ+PjEwJjEwMjMsb1thKytdPTU2MzIwfDEwMjMmdCl9fXJldHVybigoZSxyKT0+e2lmKHI8NjU1MzQmJmUuc3ViYXJyYXkmJnQpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCxlLmxlbmd0aD09PXI/ZTplLnN1YmFycmF5KDAscikpO2xldCBuPVwiXCI7Zm9yKGxldCB0PTA7dDxyO3QrKyluKz1TdHJpbmcuZnJvbUNoYXJDb2RlKGVbdF0pO3JldHVybiBufSkobyxhKX0sZS5leHBvcnRzLnV0Zjhib3JkZXI9KGUsdCk9PnsodD10fHxlLmxlbmd0aCk+ZS5sZW5ndGgmJih0PWUubGVuZ3RoKTtsZXQgbj10LTE7Zm9yKDtuPj0wJiYxMjg9PSgxOTImZVtuXSk7KW4tLTtyZXR1cm4gbjwwfHwwPT09bj90Om4rcltlW25dXT50P246dH19LDY5OmU9PntcInVzZSBzdHJpY3RcIjtlLmV4cG9ydHM9KGUsdCxyLG4pPT57bGV0IGk9NjU1MzUmZXwwLHM9ZT4+PjE2JjY1NTM1fDAsYT0wO2Zvcig7MCE9PXI7KXthPXI+MmUzPzJlMzpyLHItPWE7ZG97aT1pK3RbbisrXXwwLHM9cytpfDB9d2hpbGUoLS1hKTtpJT02NTUyMSxzJT02NTUyMX1yZXR1cm4gaXxzPDwxNnwwfX0sNjE5OmU9PntcInVzZSBzdHJpY3RcIjtlLmV4cG9ydHM9e1pfTk9fRkxVU0g6MCxaX1BBUlRJQUxfRkxVU0g6MSxaX1NZTkNfRkxVU0g6MixaX0ZVTExfRkxVU0g6MyxaX0ZJTklTSDo0LFpfQkxPQ0s6NSxaX1RSRUVTOjYsWl9PSzowLFpfU1RSRUFNX0VORDoxLFpfTkVFRF9ESUNUOjIsWl9FUlJOTzotMSxaX1NUUkVBTV9FUlJPUjotMixaX0RBVEFfRVJST1I6LTMsWl9NRU1fRVJST1I6LTQsWl9CVUZfRVJST1I6LTUsWl9OT19DT01QUkVTU0lPTjowLFpfQkVTVF9TUEVFRDoxLFpfQkVTVF9DT01QUkVTU0lPTjo5LFpfREVGQVVMVF9DT01QUkVTU0lPTjotMSxaX0ZJTFRFUkVEOjEsWl9IVUZGTUFOX09OTFk6MixaX1JMRTozLFpfRklYRUQ6NCxaX0RFRkFVTFRfU1RSQVRFR1k6MCxaX0JJTkFSWTowLFpfVEVYVDoxLFpfVU5LTk9XTjoyLFpfREVGTEFURUQ6OH19LDg2OTplPT57XCJ1c2Ugc3RyaWN0XCI7Y29uc3QgdD1uZXcgVWludDMyQXJyYXkoKCgpPT57bGV0IGUsdD1bXTtmb3IodmFyIHI9MDtyPDI1NjtyKyspe2U9cjtmb3IodmFyIG49MDtuPDg7bisrKWU9MSZlPzM5ODgyOTIzODReZT4+PjE6ZT4+PjE7dFtyXT1lfXJldHVybiB0fSkoKSk7ZS5leHBvcnRzPShlLHIsbixpKT0+e2NvbnN0IHM9dCxhPWkrbjtlXj0tMTtmb3IobGV0IHQ9aTt0PGE7dCsrKWU9ZT4+Pjhec1syNTUmKGVeclt0XSldO3JldHVybi0xXmV9fSw0MDU6KGUsdCxyKT0+e1widXNlIHN0cmljdFwiO2NvbnN0e190cl9pbml0Om4sX3RyX3N0b3JlZF9ibG9jazppLF90cl9mbHVzaF9ibG9jazpzLF90cl90YWxseTphLF90cl9hbGlnbjpvfT1yKDM0MiksYz1yKDY5KSxkPXIoODY5KSxsPXIoODk4KSx7Wl9OT19GTFVTSDpwLFpfUEFSVElBTF9GTFVTSDpoLFpfRlVMTF9GTFVTSDp1LFpfRklOSVNIOmYsWl9CTE9DSzptLFpfT0s6XyxaX1NUUkVBTV9FTkQ6ZyxaX1NUUkVBTV9FUlJPUjp2LFpfREFUQV9FUlJPUjpFLFpfQlVGX0VSUk9SOnksWl9ERUZBVUxUX0NPTVBSRVNTSU9OOlQsWl9GSUxURVJFRDpDLFpfSFVGRk1BTl9PTkxZOmIsWl9STEU6dyxaX0ZJWEVEOkEsWl9ERUZBVUxUX1NUUkFURUdZOlIsWl9VTktOT1dOOlMsWl9ERUZMQVRFRDpQfT1yKDYxOSksaz0yNTgseD0yNjIsST00MixEPTExMyxPPTY2NixOPShlLHQpPT4oZS5tc2c9bFt0XSx0KSxNPWU9PjIqZS0oZT40Pzk6MCksTD1lPT57bGV0IHQ9ZS5sZW5ndGg7Zm9yKDstLXQ+PTA7KWVbdF09MH0sVT1lPT57bGV0IHQscixuLGk9ZS53X3NpemU7dD1lLmhhc2hfc2l6ZSxuPXQ7ZG97cj1lLmhlYWRbLS1uXSxlLmhlYWRbbl09cj49aT9yLWk6MH13aGlsZSgtLXQpO3Q9aSxuPXQ7ZG97cj1lLnByZXZbLS1uXSxlLnByZXZbbl09cj49aT9yLWk6MH13aGlsZSgtLXQpfTtsZXQgaj0oZSx0LHIpPT4odDw8ZS5oYXNoX3NoaWZ0XnIpJmUuaGFzaF9tYXNrO2NvbnN0IHo9ZT0+e2NvbnN0IHQ9ZS5zdGF0ZTtsZXQgcj10LnBlbmRpbmc7cj5lLmF2YWlsX291dCYmKHI9ZS5hdmFpbF9vdXQpLDAhPT1yJiYoZS5vdXRwdXQuc2V0KHQucGVuZGluZ19idWYuc3ViYXJyYXkodC5wZW5kaW5nX291dCx0LnBlbmRpbmdfb3V0K3IpLGUubmV4dF9vdXQpLGUubmV4dF9vdXQrPXIsdC5wZW5kaW5nX291dCs9cixlLnRvdGFsX291dCs9cixlLmF2YWlsX291dC09cix0LnBlbmRpbmctPXIsMD09PXQucGVuZGluZyYmKHQucGVuZGluZ19vdXQ9MCkpfSxHPShlLHQpPT57cyhlLGUuYmxvY2tfc3RhcnQ+PTA/ZS5ibG9ja19zdGFydDotMSxlLnN0cnN0YXJ0LWUuYmxvY2tfc3RhcnQsdCksZS5ibG9ja19zdGFydD1lLnN0cnN0YXJ0LHooZS5zdHJtKX0sRj0oZSx0KT0+e2UucGVuZGluZ19idWZbZS5wZW5kaW5nKytdPXR9LFY9KGUsdCk9PntlLnBlbmRpbmdfYnVmW2UucGVuZGluZysrXT10Pj4+OCYyNTUsZS5wZW5kaW5nX2J1ZltlLnBlbmRpbmcrK109MjU1JnR9LFc9KGUsdCxyLG4pPT57bGV0IGk9ZS5hdmFpbF9pbjtyZXR1cm4gaT5uJiYoaT1uKSwwPT09aT8wOihlLmF2YWlsX2luLT1pLHQuc2V0KGUuaW5wdXQuc3ViYXJyYXkoZS5uZXh0X2luLGUubmV4dF9pbitpKSxyKSwxPT09ZS5zdGF0ZS53cmFwP2UuYWRsZXI9YyhlLmFkbGVyLHQsaSxyKToyPT09ZS5zdGF0ZS53cmFwJiYoZS5hZGxlcj1kKGUuYWRsZXIsdCxpLHIpKSxlLm5leHRfaW4rPWksZS50b3RhbF9pbis9aSxpKX0scT0oZSx0KT0+e2xldCByLG4saT1lLm1heF9jaGFpbl9sZW5ndGgscz1lLnN0cnN0YXJ0LGE9ZS5wcmV2X2xlbmd0aCxvPWUubmljZV9tYXRjaDtjb25zdCBjPWUuc3Ryc3RhcnQ+ZS53X3NpemUteD9lLnN0cnN0YXJ0LShlLndfc2l6ZS14KTowLGQ9ZS53aW5kb3csbD1lLndfbWFzayxwPWUucHJldixoPWUuc3Ryc3RhcnQraztsZXQgdT1kW3MrYS0xXSxmPWRbcythXTtlLnByZXZfbGVuZ3RoPj1lLmdvb2RfbWF0Y2gmJihpPj49Miksbz5lLmxvb2thaGVhZCYmKG89ZS5sb29rYWhlYWQpO2Rve2lmKHI9dCxkW3IrYV09PT1mJiZkW3IrYS0xXT09PXUmJmRbcl09PT1kW3NdJiZkWysrcl09PT1kW3MrMV0pe3MrPTIscisrO2Rve313aGlsZShkWysrc109PT1kWysrcl0mJmRbKytzXT09PWRbKytyXSYmZFsrK3NdPT09ZFsrK3JdJiZkWysrc109PT1kWysrcl0mJmRbKytzXT09PWRbKytyXSYmZFsrK3NdPT09ZFsrK3JdJiZkWysrc109PT1kWysrcl0mJmRbKytzXT09PWRbKytyXSYmczxoKTtpZihuPWstKGgtcykscz1oLWssbj5hKXtpZihlLm1hdGNoX3N0YXJ0PXQsYT1uLG4+PW8pYnJlYWs7dT1kW3MrYS0xXSxmPWRbcythXX19fXdoaWxlKCh0PXBbdCZsXSk+YyYmMCE9LS1pKTtyZXR1cm4gYTw9ZS5sb29rYWhlYWQ/YTplLmxvb2thaGVhZH0sWj1lPT57Y29uc3QgdD1lLndfc2l6ZTtsZXQgcixuLGk7ZG97aWYobj1lLndpbmRvd19zaXplLWUubG9va2FoZWFkLWUuc3Ryc3RhcnQsZS5zdHJzdGFydD49dCsodC14KSYmKGUud2luZG93LnNldChlLndpbmRvdy5zdWJhcnJheSh0LHQrdC1uKSwwKSxlLm1hdGNoX3N0YXJ0LT10LGUuc3Ryc3RhcnQtPXQsZS5ibG9ja19zdGFydC09dCxlLmluc2VydD5lLnN0cnN0YXJ0JiYoZS5pbnNlcnQ9ZS5zdHJzdGFydCksVShlKSxuKz10KSwwPT09ZS5zdHJtLmF2YWlsX2luKWJyZWFrO2lmKHI9VyhlLnN0cm0sZS53aW5kb3csZS5zdHJzdGFydCtlLmxvb2thaGVhZCxuKSxlLmxvb2thaGVhZCs9cixlLmxvb2thaGVhZCtlLmluc2VydD49Mylmb3IoaT1lLnN0cnN0YXJ0LWUuaW5zZXJ0LGUuaW5zX2g9ZS53aW5kb3dbaV0sZS5pbnNfaD1qKGUsZS5pbnNfaCxlLndpbmRvd1tpKzFdKTtlLmluc2VydCYmKGUuaW5zX2g9aihlLGUuaW5zX2gsZS53aW5kb3dbaSszLTFdKSxlLnByZXZbaSZlLndfbWFza109ZS5oZWFkW2UuaW5zX2hdLGUuaGVhZFtlLmluc19oXT1pLGkrKyxlLmluc2VydC0tLCEoZS5sb29rYWhlYWQrZS5pbnNlcnQ8MykpOyk7fXdoaWxlKGUubG9va2FoZWFkPHgmJjAhPT1lLnN0cm0uYXZhaWxfaW4pfSxCPShlLHQpPT57bGV0IHIsbixzLGE9ZS5wZW5kaW5nX2J1Zl9zaXplLTU+ZS53X3NpemU/ZS53X3NpemU6ZS5wZW5kaW5nX2J1Zl9zaXplLTUsbz0wLGM9ZS5zdHJtLmF2YWlsX2luO2Rve2lmKHI9NjU1MzUscz1lLmJpX3ZhbGlkKzQyPj4zLGUuc3RybS5hdmFpbF9vdXQ8cylicmVhaztpZihzPWUuc3RybS5hdmFpbF9vdXQtcyxuPWUuc3Ryc3RhcnQtZS5ibG9ja19zdGFydCxyPm4rZS5zdHJtLmF2YWlsX2luJiYocj1uK2Uuc3RybS5hdmFpbF9pbikscj5zJiYocj1zKSxyPGEmJigwPT09ciYmdCE9PWZ8fHQ9PT1wfHxyIT09bitlLnN0cm0uYXZhaWxfaW4pKWJyZWFrO289dD09PWYmJnI9PT1uK2Uuc3RybS5hdmFpbF9pbj8xOjAsaShlLDAsMCxvKSxlLnBlbmRpbmdfYnVmW2UucGVuZGluZy00XT1yLGUucGVuZGluZ19idWZbZS5wZW5kaW5nLTNdPXI+PjgsZS5wZW5kaW5nX2J1ZltlLnBlbmRpbmctMl09fnIsZS5wZW5kaW5nX2J1ZltlLnBlbmRpbmctMV09fnI+PjgseihlLnN0cm0pLG4mJihuPnImJihuPXIpLGUuc3RybS5vdXRwdXQuc2V0KGUud2luZG93LnN1YmFycmF5KGUuYmxvY2tfc3RhcnQsZS5ibG9ja19zdGFydCtuKSxlLnN0cm0ubmV4dF9vdXQpLGUuc3RybS5uZXh0X291dCs9bixlLnN0cm0uYXZhaWxfb3V0LT1uLGUuc3RybS50b3RhbF9vdXQrPW4sZS5ibG9ja19zdGFydCs9bixyLT1uKSxyJiYoVyhlLnN0cm0sZS5zdHJtLm91dHB1dCxlLnN0cm0ubmV4dF9vdXQsciksZS5zdHJtLm5leHRfb3V0Kz1yLGUuc3RybS5hdmFpbF9vdXQtPXIsZS5zdHJtLnRvdGFsX291dCs9cil9d2hpbGUoMD09PW8pO3JldHVybiBjLT1lLnN0cm0uYXZhaWxfaW4sYyYmKGM+PWUud19zaXplPyhlLm1hdGNoZXM9MixlLndpbmRvdy5zZXQoZS5zdHJtLmlucHV0LnN1YmFycmF5KGUuc3RybS5uZXh0X2luLWUud19zaXplLGUuc3RybS5uZXh0X2luKSwwKSxlLnN0cnN0YXJ0PWUud19zaXplLGUuaW5zZXJ0PWUuc3Ryc3RhcnQpOihlLndpbmRvd19zaXplLWUuc3Ryc3RhcnQ8PWMmJihlLnN0cnN0YXJ0LT1lLndfc2l6ZSxlLndpbmRvdy5zZXQoZS53aW5kb3cuc3ViYXJyYXkoZS53X3NpemUsZS53X3NpemUrZS5zdHJzdGFydCksMCksZS5tYXRjaGVzPDImJmUubWF0Y2hlcysrLGUuaW5zZXJ0PmUuc3Ryc3RhcnQmJihlLmluc2VydD1lLnN0cnN0YXJ0KSksZS53aW5kb3cuc2V0KGUuc3RybS5pbnB1dC5zdWJhcnJheShlLnN0cm0ubmV4dF9pbi1jLGUuc3RybS5uZXh0X2luKSxlLnN0cnN0YXJ0KSxlLnN0cnN0YXJ0Kz1jLGUuaW5zZXJ0Kz1jPmUud19zaXplLWUuaW5zZXJ0P2Uud19zaXplLWUuaW5zZXJ0OmMpLGUuYmxvY2tfc3RhcnQ9ZS5zdHJzdGFydCksZS5oaWdoX3dhdGVyPGUuc3Ryc3RhcnQmJihlLmhpZ2hfd2F0ZXI9ZS5zdHJzdGFydCksbz80OnQhPT1wJiZ0IT09ZiYmMD09PWUuc3RybS5hdmFpbF9pbiYmZS5zdHJzdGFydD09PWUuYmxvY2tfc3RhcnQ/Mjoocz1lLndpbmRvd19zaXplLWUuc3Ryc3RhcnQsZS5zdHJtLmF2YWlsX2luPnMmJmUuYmxvY2tfc3RhcnQ+PWUud19zaXplJiYoZS5ibG9ja19zdGFydC09ZS53X3NpemUsZS5zdHJzdGFydC09ZS53X3NpemUsZS53aW5kb3cuc2V0KGUud2luZG93LnN1YmFycmF5KGUud19zaXplLGUud19zaXplK2Uuc3Ryc3RhcnQpLDApLGUubWF0Y2hlczwyJiZlLm1hdGNoZXMrKyxzKz1lLndfc2l6ZSxlLmluc2VydD5lLnN0cnN0YXJ0JiYoZS5pbnNlcnQ9ZS5zdHJzdGFydCkpLHM+ZS5zdHJtLmF2YWlsX2luJiYocz1lLnN0cm0uYXZhaWxfaW4pLHMmJihXKGUuc3RybSxlLndpbmRvdyxlLnN0cnN0YXJ0LHMpLGUuc3Ryc3RhcnQrPXMsZS5pbnNlcnQrPXM+ZS53X3NpemUtZS5pbnNlcnQ/ZS53X3NpemUtZS5pbnNlcnQ6cyksZS5oaWdoX3dhdGVyPGUuc3Ryc3RhcnQmJihlLmhpZ2hfd2F0ZXI9ZS5zdHJzdGFydCkscz1lLmJpX3ZhbGlkKzQyPj4zLHM9ZS5wZW5kaW5nX2J1Zl9zaXplLXM+NjU1MzU/NjU1MzU6ZS5wZW5kaW5nX2J1Zl9zaXplLXMsYT1zPmUud19zaXplP2Uud19zaXplOnMsbj1lLnN0cnN0YXJ0LWUuYmxvY2tfc3RhcnQsKG4+PWF8fChufHx0PT09ZikmJnQhPT1wJiYwPT09ZS5zdHJtLmF2YWlsX2luJiZuPD1zKSYmKHI9bj5zP3M6bixvPXQ9PT1mJiYwPT09ZS5zdHJtLmF2YWlsX2luJiZyPT09bj8xOjAsaShlLGUuYmxvY2tfc3RhcnQscixvKSxlLmJsb2NrX3N0YXJ0Kz1yLHooZS5zdHJtKSksbz8zOjEpfSxIPShlLHQpPT57bGV0IHIsbjtmb3IoOzspe2lmKGUubG9va2FoZWFkPHgpe2lmKFooZSksZS5sb29rYWhlYWQ8eCYmdD09PXApcmV0dXJuIDE7aWYoMD09PWUubG9va2FoZWFkKWJyZWFrfWlmKHI9MCxlLmxvb2thaGVhZD49MyYmKGUuaW5zX2g9aihlLGUuaW5zX2gsZS53aW5kb3dbZS5zdHJzdGFydCszLTFdKSxyPWUucHJldltlLnN0cnN0YXJ0JmUud19tYXNrXT1lLmhlYWRbZS5pbnNfaF0sZS5oZWFkW2UuaW5zX2hdPWUuc3Ryc3RhcnQpLDAhPT1yJiZlLnN0cnN0YXJ0LXI8PWUud19zaXplLXgmJihlLm1hdGNoX2xlbmd0aD1xKGUscikpLGUubWF0Y2hfbGVuZ3RoPj0zKWlmKG49YShlLGUuc3Ryc3RhcnQtZS5tYXRjaF9zdGFydCxlLm1hdGNoX2xlbmd0aC0zKSxlLmxvb2thaGVhZC09ZS5tYXRjaF9sZW5ndGgsZS5tYXRjaF9sZW5ndGg8PWUubWF4X2xhenlfbWF0Y2gmJmUubG9va2FoZWFkPj0zKXtlLm1hdGNoX2xlbmd0aC0tO2Rve2Uuc3Ryc3RhcnQrKyxlLmluc19oPWooZSxlLmluc19oLGUud2luZG93W2Uuc3Ryc3RhcnQrMy0xXSkscj1lLnByZXZbZS5zdHJzdGFydCZlLndfbWFza109ZS5oZWFkW2UuaW5zX2hdLGUuaGVhZFtlLmluc19oXT1lLnN0cnN0YXJ0fXdoaWxlKDAhPS0tZS5tYXRjaF9sZW5ndGgpO2Uuc3Ryc3RhcnQrK31lbHNlIGUuc3Ryc3RhcnQrPWUubWF0Y2hfbGVuZ3RoLGUubWF0Y2hfbGVuZ3RoPTAsZS5pbnNfaD1lLndpbmRvd1tlLnN0cnN0YXJ0XSxlLmluc19oPWooZSxlLmluc19oLGUud2luZG93W2Uuc3Ryc3RhcnQrMV0pO2Vsc2Ugbj1hKGUsMCxlLndpbmRvd1tlLnN0cnN0YXJ0XSksZS5sb29rYWhlYWQtLSxlLnN0cnN0YXJ0Kys7aWYobiYmKEcoZSwhMSksMD09PWUuc3RybS5hdmFpbF9vdXQpKXJldHVybiAxfXJldHVybiBlLmluc2VydD1lLnN0cnN0YXJ0PDI/ZS5zdHJzdGFydDoyLHQ9PT1mPyhHKGUsITApLDA9PT1lLnN0cm0uYXZhaWxfb3V0PzM6NCk6ZS5zeW1fbmV4dCYmKEcoZSwhMSksMD09PWUuc3RybS5hdmFpbF9vdXQpPzE6Mn0sSz0oZSx0KT0+e2xldCByLG4saTtmb3IoOzspe2lmKGUubG9va2FoZWFkPHgpe2lmKFooZSksZS5sb29rYWhlYWQ8eCYmdD09PXApcmV0dXJuIDE7aWYoMD09PWUubG9va2FoZWFkKWJyZWFrfWlmKHI9MCxlLmxvb2thaGVhZD49MyYmKGUuaW5zX2g9aihlLGUuaW5zX2gsZS53aW5kb3dbZS5zdHJzdGFydCszLTFdKSxyPWUucHJldltlLnN0cnN0YXJ0JmUud19tYXNrXT1lLmhlYWRbZS5pbnNfaF0sZS5oZWFkW2UuaW5zX2hdPWUuc3Ryc3RhcnQpLGUucHJldl9sZW5ndGg9ZS5tYXRjaF9sZW5ndGgsZS5wcmV2X21hdGNoPWUubWF0Y2hfc3RhcnQsZS5tYXRjaF9sZW5ndGg9MiwwIT09ciYmZS5wcmV2X2xlbmd0aDxlLm1heF9sYXp5X21hdGNoJiZlLnN0cnN0YXJ0LXI8PWUud19zaXplLXgmJihlLm1hdGNoX2xlbmd0aD1xKGUsciksZS5tYXRjaF9sZW5ndGg8PTUmJihlLnN0cmF0ZWd5PT09Q3x8Mz09PWUubWF0Y2hfbGVuZ3RoJiZlLnN0cnN0YXJ0LWUubWF0Y2hfc3RhcnQ+NDA5NikmJihlLm1hdGNoX2xlbmd0aD0yKSksZS5wcmV2X2xlbmd0aD49MyYmZS5tYXRjaF9sZW5ndGg8PWUucHJldl9sZW5ndGgpe2k9ZS5zdHJzdGFydCtlLmxvb2thaGVhZC0zLG49YShlLGUuc3Ryc3RhcnQtMS1lLnByZXZfbWF0Y2gsZS5wcmV2X2xlbmd0aC0zKSxlLmxvb2thaGVhZC09ZS5wcmV2X2xlbmd0aC0xLGUucHJldl9sZW5ndGgtPTI7ZG97KytlLnN0cnN0YXJ0PD1pJiYoZS5pbnNfaD1qKGUsZS5pbnNfaCxlLndpbmRvd1tlLnN0cnN0YXJ0KzMtMV0pLHI9ZS5wcmV2W2Uuc3Ryc3RhcnQmZS53X21hc2tdPWUuaGVhZFtlLmluc19oXSxlLmhlYWRbZS5pbnNfaF09ZS5zdHJzdGFydCl9d2hpbGUoMCE9LS1lLnByZXZfbGVuZ3RoKTtpZihlLm1hdGNoX2F2YWlsYWJsZT0wLGUubWF0Y2hfbGVuZ3RoPTIsZS5zdHJzdGFydCsrLG4mJihHKGUsITEpLDA9PT1lLnN0cm0uYXZhaWxfb3V0KSlyZXR1cm4gMX1lbHNlIGlmKGUubWF0Y2hfYXZhaWxhYmxlKXtpZihuPWEoZSwwLGUud2luZG93W2Uuc3Ryc3RhcnQtMV0pLG4mJkcoZSwhMSksZS5zdHJzdGFydCsrLGUubG9va2FoZWFkLS0sMD09PWUuc3RybS5hdmFpbF9vdXQpcmV0dXJuIDF9ZWxzZSBlLm1hdGNoX2F2YWlsYWJsZT0xLGUuc3Ryc3RhcnQrKyxlLmxvb2thaGVhZC0tfXJldHVybiBlLm1hdGNoX2F2YWlsYWJsZSYmKG49YShlLDAsZS53aW5kb3dbZS5zdHJzdGFydC0xXSksZS5tYXRjaF9hdmFpbGFibGU9MCksZS5pbnNlcnQ9ZS5zdHJzdGFydDwyP2Uuc3Ryc3RhcnQ6Mix0PT09Zj8oRyhlLCEwKSwwPT09ZS5zdHJtLmF2YWlsX291dD8zOjQpOmUuc3ltX25leHQmJihHKGUsITEpLDA9PT1lLnN0cm0uYXZhaWxfb3V0KT8xOjJ9O2Z1bmN0aW9uIEooZSx0LHIsbixpKXt0aGlzLmdvb2RfbGVuZ3RoPWUsdGhpcy5tYXhfbGF6eT10LHRoaXMubmljZV9sZW5ndGg9cix0aGlzLm1heF9jaGFpbj1uLHRoaXMuZnVuYz1pfWNvbnN0ICQ9W25ldyBKKDAsMCwwLDAsQiksbmV3IEooNCw0LDgsNCxIKSxuZXcgSig0LDUsMTYsOCxIKSxuZXcgSig0LDYsMzIsMzIsSCksbmV3IEooNCw0LDE2LDE2LEspLG5ldyBKKDgsMTYsMzIsMzIsSyksbmV3IEooOCwxNiwxMjgsMTI4LEspLG5ldyBKKDgsMzIsMTI4LDI1NixLKSxuZXcgSigzMiwxMjgsMjU4LDEwMjQsSyksbmV3IEooMzIsMjU4LDI1OCw0MDk2LEspXTtmdW5jdGlvbiBZKCl7dGhpcy5zdHJtPW51bGwsdGhpcy5zdGF0dXM9MCx0aGlzLnBlbmRpbmdfYnVmPW51bGwsdGhpcy5wZW5kaW5nX2J1Zl9zaXplPTAsdGhpcy5wZW5kaW5nX291dD0wLHRoaXMucGVuZGluZz0wLHRoaXMud3JhcD0wLHRoaXMuZ3poZWFkPW51bGwsdGhpcy5nemluZGV4PTAsdGhpcy5tZXRob2Q9UCx0aGlzLmxhc3RfZmx1c2g9LTEsdGhpcy53X3NpemU9MCx0aGlzLndfYml0cz0wLHRoaXMud19tYXNrPTAsdGhpcy53aW5kb3c9bnVsbCx0aGlzLndpbmRvd19zaXplPTAsdGhpcy5wcmV2PW51bGwsdGhpcy5oZWFkPW51bGwsdGhpcy5pbnNfaD0wLHRoaXMuaGFzaF9zaXplPTAsdGhpcy5oYXNoX2JpdHM9MCx0aGlzLmhhc2hfbWFzaz0wLHRoaXMuaGFzaF9zaGlmdD0wLHRoaXMuYmxvY2tfc3RhcnQ9MCx0aGlzLm1hdGNoX2xlbmd0aD0wLHRoaXMucHJldl9tYXRjaD0wLHRoaXMubWF0Y2hfYXZhaWxhYmxlPTAsdGhpcy5zdHJzdGFydD0wLHRoaXMubWF0Y2hfc3RhcnQ9MCx0aGlzLmxvb2thaGVhZD0wLHRoaXMucHJldl9sZW5ndGg9MCx0aGlzLm1heF9jaGFpbl9sZW5ndGg9MCx0aGlzLm1heF9sYXp5X21hdGNoPTAsdGhpcy5sZXZlbD0wLHRoaXMuc3RyYXRlZ3k9MCx0aGlzLmdvb2RfbWF0Y2g9MCx0aGlzLm5pY2VfbWF0Y2g9MCx0aGlzLmR5bl9sdHJlZT1uZXcgVWludDE2QXJyYXkoMTE0NiksdGhpcy5keW5fZHRyZWU9bmV3IFVpbnQxNkFycmF5KDEyMiksdGhpcy5ibF90cmVlPW5ldyBVaW50MTZBcnJheSg3OCksTCh0aGlzLmR5bl9sdHJlZSksTCh0aGlzLmR5bl9kdHJlZSksTCh0aGlzLmJsX3RyZWUpLHRoaXMubF9kZXNjPW51bGwsdGhpcy5kX2Rlc2M9bnVsbCx0aGlzLmJsX2Rlc2M9bnVsbCx0aGlzLmJsX2NvdW50PW5ldyBVaW50MTZBcnJheSgxNiksdGhpcy5oZWFwPW5ldyBVaW50MTZBcnJheSg1NzMpLEwodGhpcy5oZWFwKSx0aGlzLmhlYXBfbGVuPTAsdGhpcy5oZWFwX21heD0wLHRoaXMuZGVwdGg9bmV3IFVpbnQxNkFycmF5KDU3MyksTCh0aGlzLmRlcHRoKSx0aGlzLnN5bV9idWY9MCx0aGlzLmxpdF9idWZzaXplPTAsdGhpcy5zeW1fbmV4dD0wLHRoaXMuc3ltX2VuZD0wLHRoaXMub3B0X2xlbj0wLHRoaXMuc3RhdGljX2xlbj0wLHRoaXMubWF0Y2hlcz0wLHRoaXMuaW5zZXJ0PTAsdGhpcy5iaV9idWY9MCx0aGlzLmJpX3ZhbGlkPTB9Y29uc3QgWD1lPT57aWYoIWUpcmV0dXJuIDE7Y29uc3QgdD1lLnN0YXRlO3JldHVybiF0fHx0LnN0cm0hPT1lfHx0LnN0YXR1cyE9PUkmJjU3IT09dC5zdGF0dXMmJjY5IT09dC5zdGF0dXMmJjczIT09dC5zdGF0dXMmJjkxIT09dC5zdGF0dXMmJjEwMyE9PXQuc3RhdHVzJiZ0LnN0YXR1cyE9PUQmJnQuc3RhdHVzIT09Tz8xOjB9LFE9ZT0+e2lmKFgoZSkpcmV0dXJuIE4oZSx2KTtlLnRvdGFsX2luPWUudG90YWxfb3V0PTAsZS5kYXRhX3R5cGU9Uztjb25zdCB0PWUuc3RhdGU7cmV0dXJuIHQucGVuZGluZz0wLHQucGVuZGluZ19vdXQ9MCx0LndyYXA8MCYmKHQud3JhcD0tdC53cmFwKSx0LnN0YXR1cz0yPT09dC53cmFwPzU3OnQud3JhcD9JOkQsZS5hZGxlcj0yPT09dC53cmFwPzA6MSx0Lmxhc3RfZmx1c2g9LTIsbih0KSxffSxlZT1lPT57Y29uc3QgdD1RKGUpO3ZhciByO3JldHVybiB0PT09XyYmKChyPWUuc3RhdGUpLndpbmRvd19zaXplPTIqci53X3NpemUsTChyLmhlYWQpLHIubWF4X2xhenlfbWF0Y2g9JFtyLmxldmVsXS5tYXhfbGF6eSxyLmdvb2RfbWF0Y2g9JFtyLmxldmVsXS5nb29kX2xlbmd0aCxyLm5pY2VfbWF0Y2g9JFtyLmxldmVsXS5uaWNlX2xlbmd0aCxyLm1heF9jaGFpbl9sZW5ndGg9JFtyLmxldmVsXS5tYXhfY2hhaW4sci5zdHJzdGFydD0wLHIuYmxvY2tfc3RhcnQ9MCxyLmxvb2thaGVhZD0wLHIuaW5zZXJ0PTAsci5tYXRjaF9sZW5ndGg9ci5wcmV2X2xlbmd0aD0yLHIubWF0Y2hfYXZhaWxhYmxlPTAsci5pbnNfaD0wKSx0fSx0ZT0oZSx0LHIsbixpLHMpPT57aWYoIWUpcmV0dXJuIHY7bGV0IGE9MTtpZih0PT09VCYmKHQ9NiksbjwwPyhhPTAsbj0tbik6bj4xNSYmKGE9MixuLT0xNiksaTwxfHxpPjl8fHIhPT1QfHxuPDh8fG4+MTV8fHQ8MHx8dD45fHxzPDB8fHM+QXx8OD09PW4mJjEhPT1hKXJldHVybiBOKGUsdik7OD09PW4mJihuPTkpO2NvbnN0IG89bmV3IFk7cmV0dXJuIGUuc3RhdGU9byxvLnN0cm09ZSxvLnN0YXR1cz1JLG8ud3JhcD1hLG8uZ3poZWFkPW51bGwsby53X2JpdHM9bixvLndfc2l6ZT0xPDxvLndfYml0cyxvLndfbWFzaz1vLndfc2l6ZS0xLG8uaGFzaF9iaXRzPWkrNyxvLmhhc2hfc2l6ZT0xPDxvLmhhc2hfYml0cyxvLmhhc2hfbWFzaz1vLmhhc2hfc2l6ZS0xLG8uaGFzaF9zaGlmdD1+figoby5oYXNoX2JpdHMrMy0xKS8zKSxvLndpbmRvdz1uZXcgVWludDhBcnJheSgyKm8ud19zaXplKSxvLmhlYWQ9bmV3IFVpbnQxNkFycmF5KG8uaGFzaF9zaXplKSxvLnByZXY9bmV3IFVpbnQxNkFycmF5KG8ud19zaXplKSxvLmxpdF9idWZzaXplPTE8PGkrNixvLnBlbmRpbmdfYnVmX3NpemU9NCpvLmxpdF9idWZzaXplLG8ucGVuZGluZ19idWY9bmV3IFVpbnQ4QXJyYXkoby5wZW5kaW5nX2J1Zl9zaXplKSxvLnN5bV9idWY9by5saXRfYnVmc2l6ZSxvLnN5bV9lbmQ9Myooby5saXRfYnVmc2l6ZS0xKSxvLmxldmVsPXQsby5zdHJhdGVneT1zLG8ubWV0aG9kPXIsZWUoZSl9O2UuZXhwb3J0cy5kZWZsYXRlSW5pdD0oZSx0KT0+dGUoZSx0LFAsMTUsOCxSKSxlLmV4cG9ydHMuZGVmbGF0ZUluaXQyPXRlLGUuZXhwb3J0cy5kZWZsYXRlUmVzZXQ9ZWUsZS5leHBvcnRzLmRlZmxhdGVSZXNldEtlZXA9USxlLmV4cG9ydHMuZGVmbGF0ZVNldEhlYWRlcj0oZSx0KT0+WChlKXx8MiE9PWUuc3RhdGUud3JhcD92OihlLnN0YXRlLmd6aGVhZD10LF8pLGUuZXhwb3J0cy5kZWZsYXRlPShlLHQpPT57aWYoWChlKXx8dD5tfHx0PDApcmV0dXJuIGU/TihlLHYpOnY7Y29uc3Qgcj1lLnN0YXRlO2lmKCFlLm91dHB1dHx8MCE9PWUuYXZhaWxfaW4mJiFlLmlucHV0fHxyLnN0YXR1cz09PU8mJnQhPT1mKXJldHVybiBOKGUsMD09PWUuYXZhaWxfb3V0P3k6dik7Y29uc3Qgbj1yLmxhc3RfZmx1c2g7aWYoci5sYXN0X2ZsdXNoPXQsMCE9PXIucGVuZGluZyl7aWYoeihlKSwwPT09ZS5hdmFpbF9vdXQpcmV0dXJuIHIubGFzdF9mbHVzaD0tMSxffWVsc2UgaWYoMD09PWUuYXZhaWxfaW4mJk0odCk8PU0obikmJnQhPT1mKXJldHVybiBOKGUseSk7aWYoci5zdGF0dXM9PT1PJiYwIT09ZS5hdmFpbF9pbilyZXR1cm4gTihlLHkpO2lmKHIuc3RhdHVzPT09SSYmMD09PXIud3JhcCYmKHIuc3RhdHVzPUQpLHIuc3RhdHVzPT09SSl7bGV0IHQ9UCsoci53X2JpdHMtODw8NCk8PDgsbj0tMTtpZihuPXIuc3RyYXRlZ3k+PWJ8fHIubGV2ZWw8Mj8wOnIubGV2ZWw8Nj8xOjY9PT1yLmxldmVsPzI6Myx0fD1uPDw2LDAhPT1yLnN0cnN0YXJ0JiYodHw9MzIpLHQrPTMxLXQlMzEsVihyLHQpLDAhPT1yLnN0cnN0YXJ0JiYoVihyLGUuYWRsZXI+Pj4xNiksVihyLDY1NTM1JmUuYWRsZXIpKSxlLmFkbGVyPTEsci5zdGF0dXM9RCx6KGUpLDAhPT1yLnBlbmRpbmcpcmV0dXJuIHIubGFzdF9mbHVzaD0tMSxffWlmKDU3PT09ci5zdGF0dXMpaWYoZS5hZGxlcj0wLEYociwzMSksRihyLDEzOSksRihyLDgpLHIuZ3poZWFkKUYociwoci5nemhlYWQudGV4dD8xOjApKyhyLmd6aGVhZC5oY3JjPzI6MCkrKHIuZ3poZWFkLmV4dHJhPzQ6MCkrKHIuZ3poZWFkLm5hbWU/ODowKSsoci5nemhlYWQuY29tbWVudD8xNjowKSksRihyLDI1NSZyLmd6aGVhZC50aW1lKSxGKHIsci5nemhlYWQudGltZT4+OCYyNTUpLEYocixyLmd6aGVhZC50aW1lPj4xNiYyNTUpLEYocixyLmd6aGVhZC50aW1lPj4yNCYyNTUpLEYociw5PT09ci5sZXZlbD8yOnIuc3RyYXRlZ3k+PWJ8fHIubGV2ZWw8Mj80OjApLEYociwyNTUmci5nemhlYWQub3MpLHIuZ3poZWFkLmV4dHJhJiZyLmd6aGVhZC5leHRyYS5sZW5ndGgmJihGKHIsMjU1JnIuZ3poZWFkLmV4dHJhLmxlbmd0aCksRihyLHIuZ3poZWFkLmV4dHJhLmxlbmd0aD4+OCYyNTUpKSxyLmd6aGVhZC5oY3JjJiYoZS5hZGxlcj1kKGUuYWRsZXIsci5wZW5kaW5nX2J1ZixyLnBlbmRpbmcsMCkpLHIuZ3ppbmRleD0wLHIuc3RhdHVzPTY5O2Vsc2UgaWYoRihyLDApLEYociwwKSxGKHIsMCksRihyLDApLEYociwwKSxGKHIsOT09PXIubGV2ZWw/MjpyLnN0cmF0ZWd5Pj1ifHxyLmxldmVsPDI/NDowKSxGKHIsMyksci5zdGF0dXM9RCx6KGUpLDAhPT1yLnBlbmRpbmcpcmV0dXJuIHIubGFzdF9mbHVzaD0tMSxfO2lmKDY5PT09ci5zdGF0dXMpe2lmKHIuZ3poZWFkLmV4dHJhKXtsZXQgdD1yLnBlbmRpbmcsbj0oNjU1MzUmci5nemhlYWQuZXh0cmEubGVuZ3RoKS1yLmd6aW5kZXg7Zm9yKDtyLnBlbmRpbmcrbj5yLnBlbmRpbmdfYnVmX3NpemU7KXtsZXQgaT1yLnBlbmRpbmdfYnVmX3NpemUtci5wZW5kaW5nO2lmKHIucGVuZGluZ19idWYuc2V0KHIuZ3poZWFkLmV4dHJhLnN1YmFycmF5KHIuZ3ppbmRleCxyLmd6aW5kZXgraSksci5wZW5kaW5nKSxyLnBlbmRpbmc9ci5wZW5kaW5nX2J1Zl9zaXplLHIuZ3poZWFkLmhjcmMmJnIucGVuZGluZz50JiYoZS5hZGxlcj1kKGUuYWRsZXIsci5wZW5kaW5nX2J1ZixyLnBlbmRpbmctdCx0KSksci5nemluZGV4Kz1pLHooZSksMCE9PXIucGVuZGluZylyZXR1cm4gci5sYXN0X2ZsdXNoPS0xLF87dD0wLG4tPWl9bGV0IGk9bmV3IFVpbnQ4QXJyYXkoci5nemhlYWQuZXh0cmEpO3IucGVuZGluZ19idWYuc2V0KGkuc3ViYXJyYXkoci5nemluZGV4LHIuZ3ppbmRleCtuKSxyLnBlbmRpbmcpLHIucGVuZGluZys9bixyLmd6aGVhZC5oY3JjJiZyLnBlbmRpbmc+dCYmKGUuYWRsZXI9ZChlLmFkbGVyLHIucGVuZGluZ19idWYsci5wZW5kaW5nLXQsdCkpLHIuZ3ppbmRleD0wfXIuc3RhdHVzPTczfWlmKDczPT09ci5zdGF0dXMpe2lmKHIuZ3poZWFkLm5hbWUpe2xldCB0LG49ci5wZW5kaW5nO2Rve2lmKHIucGVuZGluZz09PXIucGVuZGluZ19idWZfc2l6ZSl7aWYoci5nemhlYWQuaGNyYyYmci5wZW5kaW5nPm4mJihlLmFkbGVyPWQoZS5hZGxlcixyLnBlbmRpbmdfYnVmLHIucGVuZGluZy1uLG4pKSx6KGUpLDAhPT1yLnBlbmRpbmcpcmV0dXJuIHIubGFzdF9mbHVzaD0tMSxfO249MH10PXIuZ3ppbmRleDxyLmd6aGVhZC5uYW1lLmxlbmd0aD8yNTUmci5nemhlYWQubmFtZS5jaGFyQ29kZUF0KHIuZ3ppbmRleCsrKTowLEYocix0KX13aGlsZSgwIT09dCk7ci5nemhlYWQuaGNyYyYmci5wZW5kaW5nPm4mJihlLmFkbGVyPWQoZS5hZGxlcixyLnBlbmRpbmdfYnVmLHIucGVuZGluZy1uLG4pKSxyLmd6aW5kZXg9MH1yLnN0YXR1cz05MX1pZig5MT09PXIuc3RhdHVzKXtpZihyLmd6aGVhZC5jb21tZW50KXtsZXQgdCxuPXIucGVuZGluZztkb3tpZihyLnBlbmRpbmc9PT1yLnBlbmRpbmdfYnVmX3NpemUpe2lmKHIuZ3poZWFkLmhjcmMmJnIucGVuZGluZz5uJiYoZS5hZGxlcj1kKGUuYWRsZXIsci5wZW5kaW5nX2J1ZixyLnBlbmRpbmctbixuKSkseihlKSwwIT09ci5wZW5kaW5nKXJldHVybiByLmxhc3RfZmx1c2g9LTEsXztuPTB9dD1yLmd6aW5kZXg8ci5nemhlYWQuY29tbWVudC5sZW5ndGg/MjU1JnIuZ3poZWFkLmNvbW1lbnQuY2hhckNvZGVBdChyLmd6aW5kZXgrKyk6MCxGKHIsdCl9d2hpbGUoMCE9PXQpO3IuZ3poZWFkLmhjcmMmJnIucGVuZGluZz5uJiYoZS5hZGxlcj1kKGUuYWRsZXIsci5wZW5kaW5nX2J1ZixyLnBlbmRpbmctbixuKSl9ci5zdGF0dXM9MTAzfWlmKDEwMz09PXIuc3RhdHVzKXtpZihyLmd6aGVhZC5oY3JjKXtpZihyLnBlbmRpbmcrMj5yLnBlbmRpbmdfYnVmX3NpemUmJih6KGUpLDAhPT1yLnBlbmRpbmcpKXJldHVybiByLmxhc3RfZmx1c2g9LTEsXztGKHIsMjU1JmUuYWRsZXIpLEYocixlLmFkbGVyPj44JjI1NSksZS5hZGxlcj0wfWlmKHIuc3RhdHVzPUQseihlKSwwIT09ci5wZW5kaW5nKXJldHVybiByLmxhc3RfZmx1c2g9LTEsX31pZigwIT09ZS5hdmFpbF9pbnx8MCE9PXIubG9va2FoZWFkfHx0IT09cCYmci5zdGF0dXMhPT1PKXtsZXQgbj0wPT09ci5sZXZlbD9CKHIsdCk6ci5zdHJhdGVneT09PWI/KChlLHQpPT57bGV0IHI7Zm9yKDs7KXtpZigwPT09ZS5sb29rYWhlYWQmJihaKGUpLDA9PT1lLmxvb2thaGVhZCkpe2lmKHQ9PT1wKXJldHVybiAxO2JyZWFrfWlmKGUubWF0Y2hfbGVuZ3RoPTAscj1hKGUsMCxlLndpbmRvd1tlLnN0cnN0YXJ0XSksZS5sb29rYWhlYWQtLSxlLnN0cnN0YXJ0KyssciYmKEcoZSwhMSksMD09PWUuc3RybS5hdmFpbF9vdXQpKXJldHVybiAxfXJldHVybiBlLmluc2VydD0wLHQ9PT1mPyhHKGUsITApLDA9PT1lLnN0cm0uYXZhaWxfb3V0PzM6NCk6ZS5zeW1fbmV4dCYmKEcoZSwhMSksMD09PWUuc3RybS5hdmFpbF9vdXQpPzE6Mn0pKHIsdCk6ci5zdHJhdGVneT09PXc/KChlLHQpPT57bGV0IHIsbixpLHM7Y29uc3Qgbz1lLndpbmRvdztmb3IoOzspe2lmKGUubG9va2FoZWFkPD1rKXtpZihaKGUpLGUubG9va2FoZWFkPD1rJiZ0PT09cClyZXR1cm4gMTtpZigwPT09ZS5sb29rYWhlYWQpYnJlYWt9aWYoZS5tYXRjaF9sZW5ndGg9MCxlLmxvb2thaGVhZD49MyYmZS5zdHJzdGFydD4wJiYoaT1lLnN0cnN0YXJ0LTEsbj1vW2ldLG49PT1vWysraV0mJm49PT1vWysraV0mJm49PT1vWysraV0pKXtzPWUuc3Ryc3RhcnQraztkb3t9d2hpbGUobj09PW9bKytpXSYmbj09PW9bKytpXSYmbj09PW9bKytpXSYmbj09PW9bKytpXSYmbj09PW9bKytpXSYmbj09PW9bKytpXSYmbj09PW9bKytpXSYmbj09PW9bKytpXSYmaTxzKTtlLm1hdGNoX2xlbmd0aD1rLShzLWkpLGUubWF0Y2hfbGVuZ3RoPmUubG9va2FoZWFkJiYoZS5tYXRjaF9sZW5ndGg9ZS5sb29rYWhlYWQpfWlmKGUubWF0Y2hfbGVuZ3RoPj0zPyhyPWEoZSwxLGUubWF0Y2hfbGVuZ3RoLTMpLGUubG9va2FoZWFkLT1lLm1hdGNoX2xlbmd0aCxlLnN0cnN0YXJ0Kz1lLm1hdGNoX2xlbmd0aCxlLm1hdGNoX2xlbmd0aD0wKToocj1hKGUsMCxlLndpbmRvd1tlLnN0cnN0YXJ0XSksZS5sb29rYWhlYWQtLSxlLnN0cnN0YXJ0KyspLHImJihHKGUsITEpLDA9PT1lLnN0cm0uYXZhaWxfb3V0KSlyZXR1cm4gMX1yZXR1cm4gZS5pbnNlcnQ9MCx0PT09Zj8oRyhlLCEwKSwwPT09ZS5zdHJtLmF2YWlsX291dD8zOjQpOmUuc3ltX25leHQmJihHKGUsITEpLDA9PT1lLnN0cm0uYXZhaWxfb3V0KT8xOjJ9KShyLHQpOiRbci5sZXZlbF0uZnVuYyhyLHQpO2lmKDMhPT1uJiY0IT09bnx8KHIuc3RhdHVzPU8pLDE9PT1ufHwzPT09bilyZXR1cm4gMD09PWUuYXZhaWxfb3V0JiYoci5sYXN0X2ZsdXNoPS0xKSxfO2lmKDI9PT1uJiYodD09PWg/byhyKTp0IT09bSYmKGkociwwLDAsITEpLHQ9PT11JiYoTChyLmhlYWQpLDA9PT1yLmxvb2thaGVhZCYmKHIuc3Ryc3RhcnQ9MCxyLmJsb2NrX3N0YXJ0PTAsci5pbnNlcnQ9MCkpKSx6KGUpLDA9PT1lLmF2YWlsX291dCkpcmV0dXJuIHIubGFzdF9mbHVzaD0tMSxffXJldHVybiB0IT09Zj9fOnIud3JhcDw9MD9nOigyPT09ci53cmFwPyhGKHIsMjU1JmUuYWRsZXIpLEYocixlLmFkbGVyPj44JjI1NSksRihyLGUuYWRsZXI+PjE2JjI1NSksRihyLGUuYWRsZXI+PjI0JjI1NSksRihyLDI1NSZlLnRvdGFsX2luKSxGKHIsZS50b3RhbF9pbj4+OCYyNTUpLEYocixlLnRvdGFsX2luPj4xNiYyNTUpLEYocixlLnRvdGFsX2luPj4yNCYyNTUpKTooVihyLGUuYWRsZXI+Pj4xNiksVihyLDY1NTM1JmUuYWRsZXIpKSx6KGUpLHIud3JhcD4wJiYoci53cmFwPS1yLndyYXApLDAhPT1yLnBlbmRpbmc/XzpnKX0sZS5leHBvcnRzLmRlZmxhdGVFbmQ9ZT0+e2lmKFgoZSkpcmV0dXJuIHY7Y29uc3QgdD1lLnN0YXRlLnN0YXR1cztyZXR1cm4gZS5zdGF0ZT1udWxsLHQ9PT1EP04oZSxFKTpffSxlLmV4cG9ydHMuZGVmbGF0ZVNldERpY3Rpb25hcnk9KGUsdCk9PntsZXQgcj10Lmxlbmd0aDtpZihYKGUpKXJldHVybiB2O2NvbnN0IG49ZS5zdGF0ZSxpPW4ud3JhcDtpZigyPT09aXx8MT09PWkmJm4uc3RhdHVzIT09SXx8bi5sb29rYWhlYWQpcmV0dXJuIHY7aWYoMT09PWkmJihlLmFkbGVyPWMoZS5hZGxlcix0LHIsMCkpLG4ud3JhcD0wLHI+PW4ud19zaXplKXswPT09aSYmKEwobi5oZWFkKSxuLnN0cnN0YXJ0PTAsbi5ibG9ja19zdGFydD0wLG4uaW5zZXJ0PTApO2xldCBlPW5ldyBVaW50OEFycmF5KG4ud19zaXplKTtlLnNldCh0LnN1YmFycmF5KHItbi53X3NpemUsciksMCksdD1lLHI9bi53X3NpemV9Y29uc3Qgcz1lLmF2YWlsX2luLGE9ZS5uZXh0X2luLG89ZS5pbnB1dDtmb3IoZS5hdmFpbF9pbj1yLGUubmV4dF9pbj0wLGUuaW5wdXQ9dCxaKG4pO24ubG9va2FoZWFkPj0zOyl7bGV0IGU9bi5zdHJzdGFydCx0PW4ubG9va2FoZWFkLTI7ZG97bi5pbnNfaD1qKG4sbi5pbnNfaCxuLndpbmRvd1tlKzMtMV0pLG4ucHJldltlJm4ud19tYXNrXT1uLmhlYWRbbi5pbnNfaF0sbi5oZWFkW24uaW5zX2hdPWUsZSsrfXdoaWxlKC0tdCk7bi5zdHJzdGFydD1lLG4ubG9va2FoZWFkPTIsWihuKX1yZXR1cm4gbi5zdHJzdGFydCs9bi5sb29rYWhlYWQsbi5ibG9ja19zdGFydD1uLnN0cnN0YXJ0LG4uaW5zZXJ0PW4ubG9va2FoZWFkLG4ubG9va2FoZWFkPTAsbi5tYXRjaF9sZW5ndGg9bi5wcmV2X2xlbmd0aD0yLG4ubWF0Y2hfYXZhaWxhYmxlPTAsZS5uZXh0X2luPWEsZS5pbnB1dD1vLGUuYXZhaWxfaW49cyxuLndyYXA9aSxffSxlLmV4cG9ydHMuZGVmbGF0ZUluZm89XCJwYWtvIGRlZmxhdGUgKGZyb20gTm9kZWNhIHByb2plY3QpXCJ9LDE4ODplPT57XCJ1c2Ugc3RyaWN0XCI7ZS5leHBvcnRzPWZ1bmN0aW9uKCl7dGhpcy50ZXh0PTAsdGhpcy50aW1lPTAsdGhpcy54ZmxhZ3M9MCx0aGlzLm9zPTAsdGhpcy5leHRyYT1udWxsLHRoaXMuZXh0cmFfbGVuPTAsdGhpcy5uYW1lPVwiXCIsdGhpcy5jb21tZW50PVwiXCIsdGhpcy5oY3JjPTAsdGhpcy5kb25lPSExfX0sMjY0OmU9PntcInVzZSBzdHJpY3RcIjtjb25zdCB0PTE2MjA5O2UuZXhwb3J0cz1mdW5jdGlvbihlLHIpe2xldCBuLGkscyxhLG8sYyxkLGwscCxoLHUsZixtLF8sZyx2LEUseSxULEMsYix3LEEsUjtjb25zdCBTPWUuc3RhdGU7bj1lLm5leHRfaW4sQT1lLmlucHV0LGk9bisoZS5hdmFpbF9pbi01KSxzPWUubmV4dF9vdXQsUj1lLm91dHB1dCxhPXMtKHItZS5hdmFpbF9vdXQpLG89cysoZS5hdmFpbF9vdXQtMjU3KSxjPVMuZG1heCxkPVMud3NpemUsbD1TLndoYXZlLHA9Uy53bmV4dCxoPVMud2luZG93LHU9Uy5ob2xkLGY9Uy5iaXRzLG09Uy5sZW5jb2RlLF89Uy5kaXN0Y29kZSxnPSgxPDxTLmxlbmJpdHMpLTEsdj0oMTw8Uy5kaXN0Yml0cyktMTtlOmRve2Y8MTUmJih1Kz1BW24rK108PGYsZis9OCx1Kz1BW24rK108PGYsZis9OCksRT1tW3UmZ107dDpmb3IoOzspe2lmKHk9RT4+PjI0LHU+Pj49eSxmLT15LHk9RT4+PjE2JjI1NSwwPT09eSlSW3MrK109NjU1MzUmRTtlbHNle2lmKCEoMTYmeSkpe2lmKDA9PSg2NCZ5KSl7RT1tWyg2NTUzNSZFKSsodSYoMTw8eSktMSldO2NvbnRpbnVlIHR9aWYoMzImeSl7Uy5tb2RlPTE2MTkxO2JyZWFrIGV9ZS5tc2c9XCJpbnZhbGlkIGxpdGVyYWwvbGVuZ3RoIGNvZGVcIixTLm1vZGU9dDticmVhayBlfVQ9NjU1MzUmRSx5Jj0xNSx5JiYoZjx5JiYodSs9QVtuKytdPDxmLGYrPTgpLFQrPXUmKDE8PHkpLTEsdT4+Pj15LGYtPXkpLGY8MTUmJih1Kz1BW24rK108PGYsZis9OCx1Kz1BW24rK108PGYsZis9OCksRT1fW3Umdl07cjpmb3IoOzspe2lmKHk9RT4+PjI0LHU+Pj49eSxmLT15LHk9RT4+PjE2JjI1NSwhKDE2JnkpKXtpZigwPT0oNjQmeSkpe0U9X1soNjU1MzUmRSkrKHUmKDE8PHkpLTEpXTtjb250aW51ZSByfWUubXNnPVwiaW52YWxpZCBkaXN0YW5jZSBjb2RlXCIsUy5tb2RlPXQ7YnJlYWsgZX1pZihDPTY1NTM1JkUseSY9MTUsZjx5JiYodSs9QVtuKytdPDxmLGYrPTgsZjx5JiYodSs9QVtuKytdPDxmLGYrPTgpKSxDKz11JigxPDx5KS0xLEM+Yyl7ZS5tc2c9XCJpbnZhbGlkIGRpc3RhbmNlIHRvbyBmYXIgYmFja1wiLFMubW9kZT10O2JyZWFrIGV9aWYodT4+Pj15LGYtPXkseT1zLWEsQz55KXtpZih5PUMteSx5PmwmJlMuc2FuZSl7ZS5tc2c9XCJpbnZhbGlkIGRpc3RhbmNlIHRvbyBmYXIgYmFja1wiLFMubW9kZT10O2JyZWFrIGV9aWYoYj0wLHc9aCwwPT09cCl7aWYoYis9ZC15LHk8VCl7VC09eTtkb3tSW3MrK109aFtiKytdfXdoaWxlKC0teSk7Yj1zLUMsdz1SfX1lbHNlIGlmKHA8eSl7aWYoYis9ZCtwLXkseS09cCx5PFQpe1QtPXk7ZG97UltzKytdPWhbYisrXX13aGlsZSgtLXkpO2lmKGI9MCxwPFQpe3k9cCxULT15O2Rve1JbcysrXT1oW2IrK119d2hpbGUoLS15KTtiPXMtQyx3PVJ9fX1lbHNlIGlmKGIrPXAteSx5PFQpe1QtPXk7ZG97UltzKytdPWhbYisrXX13aGlsZSgtLXkpO2I9cy1DLHc9Un1mb3IoO1Q+MjspUltzKytdPXdbYisrXSxSW3MrK109d1tiKytdLFJbcysrXT13W2IrK10sVC09MztUJiYoUltzKytdPXdbYisrXSxUPjEmJihSW3MrK109d1tiKytdKSl9ZWxzZXtiPXMtQztkb3tSW3MrK109UltiKytdLFJbcysrXT1SW2IrK10sUltzKytdPVJbYisrXSxULT0zfXdoaWxlKFQ+Mik7VCYmKFJbcysrXT1SW2IrK10sVD4xJiYoUltzKytdPVJbYisrXSkpfWJyZWFrfX1icmVha319d2hpbGUobjxpJiZzPG8pO1Q9Zj4+MyxuLT1ULGYtPVQ8PDMsdSY9KDE8PGYpLTEsZS5uZXh0X2luPW4sZS5uZXh0X291dD1zLGUuYXZhaWxfaW49bjxpP2ktbis1OjUtKG4taSksZS5hdmFpbF9vdXQ9czxvP28tcysyNTc6MjU3LShzLW8pLFMuaG9sZD11LFMuYml0cz1mfX0sOTQ4OihlLHQscik9PntcInVzZSBzdHJpY3RcIjtjb25zdCBuPXIoNjkpLGk9cig4NjkpLHM9cigyNjQpLGE9cigyNDEpLHtaX0ZJTklTSDpvLFpfQkxPQ0s6YyxaX1RSRUVTOmQsWl9PSzpsLFpfU1RSRUFNX0VORDpwLFpfTkVFRF9ESUNUOmgsWl9TVFJFQU1fRVJST1I6dSxaX0RBVEFfRVJST1I6ZixaX01FTV9FUlJPUjptLFpfQlVGX0VSUk9SOl8sWl9ERUZMQVRFRDpnfT1yKDYxOSksdj0xNjE4MCxFPTE2MTkwLHk9MTYxOTEsVD0xNjE5MixDPTE2MTk0LGI9MTYxOTksdz0xNjIwMCxBPTE2MjA2LFI9MTYyMDksUz0xNjIxMCxQPWU9PihlPj4+MjQmMjU1KSsoZT4+PjgmNjUyODApKygoNjUyODAmZSk8PDgpKygoMjU1JmUpPDwyNCk7ZnVuY3Rpb24gaygpe3RoaXMuc3RybT1udWxsLHRoaXMubW9kZT0wLHRoaXMubGFzdD0hMSx0aGlzLndyYXA9MCx0aGlzLmhhdmVkaWN0PSExLHRoaXMuZmxhZ3M9MCx0aGlzLmRtYXg9MCx0aGlzLmNoZWNrPTAsdGhpcy50b3RhbD0wLHRoaXMuaGVhZD1udWxsLHRoaXMud2JpdHM9MCx0aGlzLndzaXplPTAsdGhpcy53aGF2ZT0wLHRoaXMud25leHQ9MCx0aGlzLndpbmRvdz1udWxsLHRoaXMuaG9sZD0wLHRoaXMuYml0cz0wLHRoaXMubGVuZ3RoPTAsdGhpcy5vZmZzZXQ9MCx0aGlzLmV4dHJhPTAsdGhpcy5sZW5jb2RlPW51bGwsdGhpcy5kaXN0Y29kZT1udWxsLHRoaXMubGVuYml0cz0wLHRoaXMuZGlzdGJpdHM9MCx0aGlzLm5jb2RlPTAsdGhpcy5ubGVuPTAsdGhpcy5uZGlzdD0wLHRoaXMuaGF2ZT0wLHRoaXMubmV4dD1udWxsLHRoaXMubGVucz1uZXcgVWludDE2QXJyYXkoMzIwKSx0aGlzLndvcms9bmV3IFVpbnQxNkFycmF5KDI4OCksdGhpcy5sZW5keW49bnVsbCx0aGlzLmRpc3RkeW49bnVsbCx0aGlzLnNhbmU9MCx0aGlzLmJhY2s9MCx0aGlzLndhcz0wfWNvbnN0IHg9ZT0+e2lmKCFlKXJldHVybiAxO2NvbnN0IHQ9ZS5zdGF0ZTtyZXR1cm4hdHx8dC5zdHJtIT09ZXx8dC5tb2RlPHZ8fHQubW9kZT4xNjIxMT8xOjB9LEk9ZT0+e2lmKHgoZSkpcmV0dXJuIHU7Y29uc3QgdD1lLnN0YXRlO3JldHVybiBlLnRvdGFsX2luPWUudG90YWxfb3V0PXQudG90YWw9MCxlLm1zZz1cIlwiLHQud3JhcCYmKGUuYWRsZXI9MSZ0LndyYXApLHQubW9kZT12LHQubGFzdD0wLHQuaGF2ZWRpY3Q9MCx0LmZsYWdzPS0xLHQuZG1heD0zMjc2OCx0LmhlYWQ9bnVsbCx0LmhvbGQ9MCx0LmJpdHM9MCx0LmxlbmNvZGU9dC5sZW5keW49bmV3IEludDMyQXJyYXkoODUyKSx0LmRpc3Rjb2RlPXQuZGlzdGR5bj1uZXcgSW50MzJBcnJheSg1OTIpLHQuc2FuZT0xLHQuYmFjaz0tMSxsfSxEPWU9PntpZih4KGUpKXJldHVybiB1O2NvbnN0IHQ9ZS5zdGF0ZTtyZXR1cm4gdC53c2l6ZT0wLHQud2hhdmU9MCx0LnduZXh0PTAsSShlKX0sTz0oZSx0KT0+e2xldCByO2lmKHgoZSkpcmV0dXJuIHU7Y29uc3Qgbj1lLnN0YXRlO3JldHVybiB0PDA/KHI9MCx0PS10KToocj01Kyh0Pj40KSx0PDQ4JiYodCY9MTUpKSx0JiYodDw4fHx0PjE1KT91OihudWxsIT09bi53aW5kb3cmJm4ud2JpdHMhPT10JiYobi53aW5kb3c9bnVsbCksbi53cmFwPXIsbi53Yml0cz10LEQoZSkpfSxOPShlLHQpPT57aWYoIWUpcmV0dXJuIHU7Y29uc3Qgcj1uZXcgaztlLnN0YXRlPXIsci5zdHJtPWUsci53aW5kb3c9bnVsbCxyLm1vZGU9djtjb25zdCBuPU8oZSx0KTtyZXR1cm4gbiE9PWwmJihlLnN0YXRlPW51bGwpLG59O2xldCBNLEwsVT0hMDtjb25zdCBqPWU9PntpZihVKXtNPW5ldyBJbnQzMkFycmF5KDUxMiksTD1uZXcgSW50MzJBcnJheSgzMik7bGV0IHQ9MDtmb3IoO3Q8MTQ0OyllLmxlbnNbdCsrXT04O2Zvcig7dDwyNTY7KWUubGVuc1t0KytdPTk7Zm9yKDt0PDI4MDspZS5sZW5zW3QrK109Nztmb3IoO3Q8Mjg4OyllLmxlbnNbdCsrXT04O2ZvcihhKDEsZS5sZW5zLDAsMjg4LE0sMCxlLndvcmsse2JpdHM6OX0pLHQ9MDt0PDMyOyllLmxlbnNbdCsrXT01O2EoMixlLmxlbnMsMCwzMixMLDAsZS53b3JrLHtiaXRzOjV9KSxVPSExfWUubGVuY29kZT1NLGUubGVuYml0cz05LGUuZGlzdGNvZGU9TCxlLmRpc3RiaXRzPTV9LHo9KGUsdCxyLG4pPT57bGV0IGk7Y29uc3Qgcz1lLnN0YXRlO3JldHVybiBudWxsPT09cy53aW5kb3cmJihzLndzaXplPTE8PHMud2JpdHMscy53bmV4dD0wLHMud2hhdmU9MCxzLndpbmRvdz1uZXcgVWludDhBcnJheShzLndzaXplKSksbj49cy53c2l6ZT8ocy53aW5kb3cuc2V0KHQuc3ViYXJyYXkoci1zLndzaXplLHIpLDApLHMud25leHQ9MCxzLndoYXZlPXMud3NpemUpOihpPXMud3NpemUtcy53bmV4dCxpPm4mJihpPW4pLHMud2luZG93LnNldCh0LnN1YmFycmF5KHItbixyLW4raSkscy53bmV4dCksKG4tPWkpPyhzLndpbmRvdy5zZXQodC5zdWJhcnJheShyLW4sciksMCkscy53bmV4dD1uLHMud2hhdmU9cy53c2l6ZSk6KHMud25leHQrPWkscy53bmV4dD09PXMud3NpemUmJihzLnduZXh0PTApLHMud2hhdmU8cy53c2l6ZSYmKHMud2hhdmUrPWkpKSksMH07ZS5leHBvcnRzLmluZmxhdGVSZXNldD1ELGUuZXhwb3J0cy5pbmZsYXRlUmVzZXQyPU8sZS5leHBvcnRzLmluZmxhdGVSZXNldEtlZXA9SSxlLmV4cG9ydHMuaW5mbGF0ZUluaXQ9ZT0+TihlLDE1KSxlLmV4cG9ydHMuaW5mbGF0ZUluaXQyPU4sZS5leHBvcnRzLmluZmxhdGU9KGUsdCk9PntsZXQgcixrLEksRCxPLE4sTSxMLFUsRyxGLFYsVyxxLFosQixILEssSiwkLFksWCxRPTA7Y29uc3QgZWU9bmV3IFVpbnQ4QXJyYXkoNCk7bGV0IHRlLHJlO2NvbnN0IG5lPW5ldyBVaW50OEFycmF5KFsxNiwxNywxOCwwLDgsNyw5LDYsMTAsNSwxMSw0LDEyLDMsMTMsMiwxNCwxLDE1XSk7aWYoeChlKXx8IWUub3V0cHV0fHwhZS5pbnB1dCYmMCE9PWUuYXZhaWxfaW4pcmV0dXJuIHU7cj1lLnN0YXRlLHIubW9kZT09PXkmJihyLm1vZGU9VCksTz1lLm5leHRfb3V0LEk9ZS5vdXRwdXQsTT1lLmF2YWlsX291dCxEPWUubmV4dF9pbixrPWUuaW5wdXQsTj1lLmF2YWlsX2luLEw9ci5ob2xkLFU9ci5iaXRzLEc9TixGPU0sWD1sO2U6Zm9yKDs7KXN3aXRjaChyLm1vZGUpe2Nhc2UgdjppZigwPT09ci53cmFwKXtyLm1vZGU9VDticmVha31mb3IoO1U8MTY7KXtpZigwPT09TilicmVhayBlO04tLSxMKz1rW0QrK108PFUsVSs9OH1pZigyJnIud3JhcCYmMzU2MTU9PT1MKXswPT09ci53Yml0cyYmKHIud2JpdHM9MTUpLHIuY2hlY2s9MCxlZVswXT0yNTUmTCxlZVsxXT1MPj4+OCYyNTUsci5jaGVjaz1pKHIuY2hlY2ssZWUsMiwwKSxMPTAsVT0wLHIubW9kZT0xNjE4MTticmVha31pZihyLmhlYWQmJihyLmhlYWQuZG9uZT0hMSksISgxJnIud3JhcCl8fCgoKDI1NSZMKTw8OCkrKEw+PjgpKSUzMSl7ZS5tc2c9XCJpbmNvcnJlY3QgaGVhZGVyIGNoZWNrXCIsci5tb2RlPVI7YnJlYWt9aWYoKDE1JkwpIT09Zyl7ZS5tc2c9XCJ1bmtub3duIGNvbXByZXNzaW9uIG1ldGhvZFwiLHIubW9kZT1SO2JyZWFrfWlmKEw+Pj49NCxVLT00LFk9OCsoMTUmTCksMD09PXIud2JpdHMmJihyLndiaXRzPVkpLFk+MTV8fFk+ci53Yml0cyl7ZS5tc2c9XCJpbnZhbGlkIHdpbmRvdyBzaXplXCIsci5tb2RlPVI7YnJlYWt9ci5kbWF4PTE8PHIud2JpdHMsci5mbGFncz0wLGUuYWRsZXI9ci5jaGVjaz0xLHIubW9kZT01MTImTD8xNjE4OTp5LEw9MCxVPTA7YnJlYWs7Y2FzZSAxNjE4MTpmb3IoO1U8MTY7KXtpZigwPT09TilicmVhayBlO04tLSxMKz1rW0QrK108PFUsVSs9OH1pZihyLmZsYWdzPUwsKDI1NSZyLmZsYWdzKSE9PWcpe2UubXNnPVwidW5rbm93biBjb21wcmVzc2lvbiBtZXRob2RcIixyLm1vZGU9UjticmVha31pZig1NzM0NCZyLmZsYWdzKXtlLm1zZz1cInVua25vd24gaGVhZGVyIGZsYWdzIHNldFwiLHIubW9kZT1SO2JyZWFrfXIuaGVhZCYmKHIuaGVhZC50ZXh0PUw+PjgmMSksNTEyJnIuZmxhZ3MmJjQmci53cmFwJiYoZWVbMF09MjU1JkwsZWVbMV09TD4+PjgmMjU1LHIuY2hlY2s9aShyLmNoZWNrLGVlLDIsMCkpLEw9MCxVPTAsci5tb2RlPTE2MTgyO2Nhc2UgMTYxODI6Zm9yKDtVPDMyOyl7aWYoMD09PU4pYnJlYWsgZTtOLS0sTCs9a1tEKytdPDxVLFUrPTh9ci5oZWFkJiYoci5oZWFkLnRpbWU9TCksNTEyJnIuZmxhZ3MmJjQmci53cmFwJiYoZWVbMF09MjU1JkwsZWVbMV09TD4+PjgmMjU1LGVlWzJdPUw+Pj4xNiYyNTUsZWVbM109TD4+PjI0JjI1NSxyLmNoZWNrPWkoci5jaGVjayxlZSw0LDApKSxMPTAsVT0wLHIubW9kZT0xNjE4MztjYXNlIDE2MTgzOmZvcig7VTwxNjspe2lmKDA9PT1OKWJyZWFrIGU7Ti0tLEwrPWtbRCsrXTw8VSxVKz04fXIuaGVhZCYmKHIuaGVhZC54ZmxhZ3M9MjU1Jkwsci5oZWFkLm9zPUw+PjgpLDUxMiZyLmZsYWdzJiY0JnIud3JhcCYmKGVlWzBdPTI1NSZMLGVlWzFdPUw+Pj44JjI1NSxyLmNoZWNrPWkoci5jaGVjayxlZSwyLDApKSxMPTAsVT0wLHIubW9kZT0xNjE4NDtjYXNlIDE2MTg0OmlmKDEwMjQmci5mbGFncyl7Zm9yKDtVPDE2Oyl7aWYoMD09PU4pYnJlYWsgZTtOLS0sTCs9a1tEKytdPDxVLFUrPTh9ci5sZW5ndGg9TCxyLmhlYWQmJihyLmhlYWQuZXh0cmFfbGVuPUwpLDUxMiZyLmZsYWdzJiY0JnIud3JhcCYmKGVlWzBdPTI1NSZMLGVlWzFdPUw+Pj44JjI1NSxyLmNoZWNrPWkoci5jaGVjayxlZSwyLDApKSxMPTAsVT0wfWVsc2Ugci5oZWFkJiYoci5oZWFkLmV4dHJhPW51bGwpO3IubW9kZT0xNjE4NTtjYXNlIDE2MTg1OmlmKDEwMjQmci5mbGFncyYmKFY9ci5sZW5ndGgsVj5OJiYoVj1OKSxWJiYoci5oZWFkJiYoWT1yLmhlYWQuZXh0cmFfbGVuLXIubGVuZ3RoLHIuaGVhZC5leHRyYXx8KHIuaGVhZC5leHRyYT1uZXcgVWludDhBcnJheShyLmhlYWQuZXh0cmFfbGVuKSksci5oZWFkLmV4dHJhLnNldChrLnN1YmFycmF5KEQsRCtWKSxZKSksNTEyJnIuZmxhZ3MmJjQmci53cmFwJiYoci5jaGVjaz1pKHIuY2hlY2ssayxWLEQpKSxOLT1WLEQrPVYsci5sZW5ndGgtPVYpLHIubGVuZ3RoKSlicmVhayBlO3IubGVuZ3RoPTAsci5tb2RlPTE2MTg2O2Nhc2UgMTYxODY6aWYoMjA0OCZyLmZsYWdzKXtpZigwPT09TilicmVhayBlO1Y9MDtkb3tZPWtbRCtWKytdLHIuaGVhZCYmWSYmci5sZW5ndGg8NjU1MzYmJihyLmhlYWQubmFtZSs9U3RyaW5nLmZyb21DaGFyQ29kZShZKSl9d2hpbGUoWSYmVjxOKTtpZig1MTImci5mbGFncyYmNCZyLndyYXAmJihyLmNoZWNrPWkoci5jaGVjayxrLFYsRCkpLE4tPVYsRCs9VixZKWJyZWFrIGV9ZWxzZSByLmhlYWQmJihyLmhlYWQubmFtZT1udWxsKTtyLmxlbmd0aD0wLHIubW9kZT0xNjE4NztjYXNlIDE2MTg3OmlmKDQwOTYmci5mbGFncyl7aWYoMD09PU4pYnJlYWsgZTtWPTA7ZG97WT1rW0QrVisrXSxyLmhlYWQmJlkmJnIubGVuZ3RoPDY1NTM2JiYoci5oZWFkLmNvbW1lbnQrPVN0cmluZy5mcm9tQ2hhckNvZGUoWSkpfXdoaWxlKFkmJlY8Tik7aWYoNTEyJnIuZmxhZ3MmJjQmci53cmFwJiYoci5jaGVjaz1pKHIuY2hlY2ssayxWLEQpKSxOLT1WLEQrPVYsWSlicmVhayBlfWVsc2Ugci5oZWFkJiYoci5oZWFkLmNvbW1lbnQ9bnVsbCk7ci5tb2RlPTE2MTg4O2Nhc2UgMTYxODg6aWYoNTEyJnIuZmxhZ3Mpe2Zvcig7VTwxNjspe2lmKDA9PT1OKWJyZWFrIGU7Ti0tLEwrPWtbRCsrXTw8VSxVKz04fWlmKDQmci53cmFwJiZMIT09KDY1NTM1JnIuY2hlY2spKXtlLm1zZz1cImhlYWRlciBjcmMgbWlzbWF0Y2hcIixyLm1vZGU9UjticmVha31MPTAsVT0wfXIuaGVhZCYmKHIuaGVhZC5oY3JjPXIuZmxhZ3M+PjkmMSxyLmhlYWQuZG9uZT0hMCksZS5hZGxlcj1yLmNoZWNrPTAsci5tb2RlPXk7YnJlYWs7Y2FzZSAxNjE4OTpmb3IoO1U8MzI7KXtpZigwPT09TilicmVhayBlO04tLSxMKz1rW0QrK108PFUsVSs9OH1lLmFkbGVyPXIuY2hlY2s9UChMKSxMPTAsVT0wLHIubW9kZT1FO2Nhc2UgRTppZigwPT09ci5oYXZlZGljdClyZXR1cm4gZS5uZXh0X291dD1PLGUuYXZhaWxfb3V0PU0sZS5uZXh0X2luPUQsZS5hdmFpbF9pbj1OLHIuaG9sZD1MLHIuYml0cz1VLGg7ZS5hZGxlcj1yLmNoZWNrPTEsci5tb2RlPXk7Y2FzZSB5OmlmKHQ9PT1jfHx0PT09ZClicmVhayBlO2Nhc2UgVDppZihyLmxhc3Qpe0w+Pj49NyZVLFUtPTcmVSxyLm1vZGU9QTticmVha31mb3IoO1U8Mzspe2lmKDA9PT1OKWJyZWFrIGU7Ti0tLEwrPWtbRCsrXTw8VSxVKz04fXN3aXRjaChyLmxhc3Q9MSZMLEw+Pj49MSxVLT0xLDMmTCl7Y2FzZSAwOnIubW9kZT0xNjE5MzticmVhaztjYXNlIDE6aWYoaihyKSxyLm1vZGU9Yix0PT09ZCl7TD4+Pj0yLFUtPTI7YnJlYWsgZX1icmVhaztjYXNlIDI6ci5tb2RlPTE2MTk2O2JyZWFrO2Nhc2UgMzplLm1zZz1cImludmFsaWQgYmxvY2sgdHlwZVwiLHIubW9kZT1SfUw+Pj49MixVLT0yO2JyZWFrO2Nhc2UgMTYxOTM6Zm9yKEw+Pj49NyZVLFUtPTcmVTtVPDMyOyl7aWYoMD09PU4pYnJlYWsgZTtOLS0sTCs9a1tEKytdPDxVLFUrPTh9aWYoKDY1NTM1JkwpIT0oTD4+PjE2XjY1NTM1KSl7ZS5tc2c9XCJpbnZhbGlkIHN0b3JlZCBibG9jayBsZW5ndGhzXCIsci5tb2RlPVI7YnJlYWt9aWYoci5sZW5ndGg9NjU1MzUmTCxMPTAsVT0wLHIubW9kZT1DLHQ9PT1kKWJyZWFrIGU7Y2FzZSBDOnIubW9kZT0xNjE5NTtjYXNlIDE2MTk1OmlmKFY9ci5sZW5ndGgsVil7aWYoVj5OJiYoVj1OKSxWPk0mJihWPU0pLDA9PT1WKWJyZWFrIGU7SS5zZXQoay5zdWJhcnJheShELEQrViksTyksTi09VixEKz1WLE0tPVYsTys9VixyLmxlbmd0aC09VjticmVha31yLm1vZGU9eTticmVhaztjYXNlIDE2MTk2OmZvcig7VTwxNDspe2lmKDA9PT1OKWJyZWFrIGU7Ti0tLEwrPWtbRCsrXTw8VSxVKz04fWlmKHIubmxlbj0yNTcrKDMxJkwpLEw+Pj49NSxVLT01LHIubmRpc3Q9MSsoMzEmTCksTD4+Pj01LFUtPTUsci5uY29kZT00KygxNSZMKSxMPj4+PTQsVS09NCxyLm5sZW4+Mjg2fHxyLm5kaXN0PjMwKXtlLm1zZz1cInRvbyBtYW55IGxlbmd0aCBvciBkaXN0YW5jZSBzeW1ib2xzXCIsci5tb2RlPVI7YnJlYWt9ci5oYXZlPTAsci5tb2RlPTE2MTk3O2Nhc2UgMTYxOTc6Zm9yKDtyLmhhdmU8ci5uY29kZTspe2Zvcig7VTwzOyl7aWYoMD09PU4pYnJlYWsgZTtOLS0sTCs9a1tEKytdPDxVLFUrPTh9ci5sZW5zW25lW3IuaGF2ZSsrXV09NyZMLEw+Pj49MyxVLT0zfWZvcig7ci5oYXZlPDE5OylyLmxlbnNbbmVbci5oYXZlKytdXT0wO2lmKHIubGVuY29kZT1yLmxlbmR5bixyLmxlbmJpdHM9Nyx0ZT17Yml0czpyLmxlbmJpdHN9LFg9YSgwLHIubGVucywwLDE5LHIubGVuY29kZSwwLHIud29yayx0ZSksci5sZW5iaXRzPXRlLmJpdHMsWCl7ZS5tc2c9XCJpbnZhbGlkIGNvZGUgbGVuZ3RocyBzZXRcIixyLm1vZGU9UjticmVha31yLmhhdmU9MCxyLm1vZGU9MTYxOTg7Y2FzZSAxNjE5ODpmb3IoO3IuaGF2ZTxyLm5sZW4rci5uZGlzdDspe2Zvcig7UT1yLmxlbmNvZGVbTCYoMTw8ci5sZW5iaXRzKS0xXSxaPVE+Pj4yNCxCPVE+Pj4xNiYyNTUsSD02NTUzNSZRLCEoWjw9VSk7KXtpZigwPT09TilicmVhayBlO04tLSxMKz1rW0QrK108PFUsVSs9OH1pZihIPDE2KUw+Pj49WixVLT1aLHIubGVuc1tyLmhhdmUrK109SDtlbHNle2lmKDE2PT09SCl7Zm9yKHJlPVorMjtVPHJlOyl7aWYoMD09PU4pYnJlYWsgZTtOLS0sTCs9a1tEKytdPDxVLFUrPTh9aWYoTD4+Pj1aLFUtPVosMD09PXIuaGF2ZSl7ZS5tc2c9XCJpbnZhbGlkIGJpdCBsZW5ndGggcmVwZWF0XCIsci5tb2RlPVI7YnJlYWt9WT1yLmxlbnNbci5oYXZlLTFdLFY9MysoMyZMKSxMPj4+PTIsVS09Mn1lbHNlIGlmKDE3PT09SCl7Zm9yKHJlPVorMztVPHJlOyl7aWYoMD09PU4pYnJlYWsgZTtOLS0sTCs9a1tEKytdPDxVLFUrPTh9TD4+Pj1aLFUtPVosWT0wLFY9MysoNyZMKSxMPj4+PTMsVS09M31lbHNle2ZvcihyZT1aKzc7VTxyZTspe2lmKDA9PT1OKWJyZWFrIGU7Ti0tLEwrPWtbRCsrXTw8VSxVKz04fUw+Pj49WixVLT1aLFk9MCxWPTExKygxMjcmTCksTD4+Pj03LFUtPTd9aWYoci5oYXZlK1Y+ci5ubGVuK3IubmRpc3Qpe2UubXNnPVwiaW52YWxpZCBiaXQgbGVuZ3RoIHJlcGVhdFwiLHIubW9kZT1SO2JyZWFrfWZvcig7Vi0tOylyLmxlbnNbci5oYXZlKytdPVl9fWlmKHIubW9kZT09PVIpYnJlYWs7aWYoMD09PXIubGVuc1syNTZdKXtlLm1zZz1cImludmFsaWQgY29kZSAtLSBtaXNzaW5nIGVuZC1vZi1ibG9ja1wiLHIubW9kZT1SO2JyZWFrfWlmKHIubGVuYml0cz05LHRlPXtiaXRzOnIubGVuYml0c30sWD1hKDEsci5sZW5zLDAsci5ubGVuLHIubGVuY29kZSwwLHIud29yayx0ZSksci5sZW5iaXRzPXRlLmJpdHMsWCl7ZS5tc2c9XCJpbnZhbGlkIGxpdGVyYWwvbGVuZ3RocyBzZXRcIixyLm1vZGU9UjticmVha31pZihyLmRpc3RiaXRzPTYsci5kaXN0Y29kZT1yLmRpc3RkeW4sdGU9e2JpdHM6ci5kaXN0Yml0c30sWD1hKDIsci5sZW5zLHIubmxlbixyLm5kaXN0LHIuZGlzdGNvZGUsMCxyLndvcmssdGUpLHIuZGlzdGJpdHM9dGUuYml0cyxYKXtlLm1zZz1cImludmFsaWQgZGlzdGFuY2VzIHNldFwiLHIubW9kZT1SO2JyZWFrfWlmKHIubW9kZT1iLHQ9PT1kKWJyZWFrIGU7Y2FzZSBiOnIubW9kZT13O2Nhc2UgdzppZihOPj02JiZNPj0yNTgpe2UubmV4dF9vdXQ9TyxlLmF2YWlsX291dD1NLGUubmV4dF9pbj1ELGUuYXZhaWxfaW49TixyLmhvbGQ9TCxyLmJpdHM9VSxzKGUsRiksTz1lLm5leHRfb3V0LEk9ZS5vdXRwdXQsTT1lLmF2YWlsX291dCxEPWUubmV4dF9pbixrPWUuaW5wdXQsTj1lLmF2YWlsX2luLEw9ci5ob2xkLFU9ci5iaXRzLHIubW9kZT09PXkmJihyLmJhY2s9LTEpO2JyZWFrfWZvcihyLmJhY2s9MDtRPXIubGVuY29kZVtMJigxPDxyLmxlbmJpdHMpLTFdLFo9UT4+PjI0LEI9UT4+PjE2JjI1NSxIPTY1NTM1JlEsIShaPD1VKTspe2lmKDA9PT1OKWJyZWFrIGU7Ti0tLEwrPWtbRCsrXTw8VSxVKz04fWlmKEImJjA9PSgyNDAmQikpe2ZvcihLPVosSj1CLCQ9SDtRPXIubGVuY29kZVskKygoTCYoMTw8SytKKS0xKT4+SyldLFo9UT4+PjI0LEI9UT4+PjE2JjI1NSxIPTY1NTM1JlEsIShLK1o8PVUpOyl7aWYoMD09PU4pYnJlYWsgZTtOLS0sTCs9a1tEKytdPDxVLFUrPTh9TD4+Pj1LLFUtPUssci5iYWNrKz1LfWlmKEw+Pj49WixVLT1aLHIuYmFjays9WixyLmxlbmd0aD1ILDA9PT1CKXtyLm1vZGU9MTYyMDU7YnJlYWt9aWYoMzImQil7ci5iYWNrPS0xLHIubW9kZT15O2JyZWFrfWlmKDY0JkIpe2UubXNnPVwiaW52YWxpZCBsaXRlcmFsL2xlbmd0aCBjb2RlXCIsci5tb2RlPVI7YnJlYWt9ci5leHRyYT0xNSZCLHIubW9kZT0xNjIwMTtjYXNlIDE2MjAxOmlmKHIuZXh0cmEpe2ZvcihyZT1yLmV4dHJhO1U8cmU7KXtpZigwPT09TilicmVhayBlO04tLSxMKz1rW0QrK108PFUsVSs9OH1yLmxlbmd0aCs9TCYoMTw8ci5leHRyYSktMSxMPj4+PXIuZXh0cmEsVS09ci5leHRyYSxyLmJhY2srPXIuZXh0cmF9ci53YXM9ci5sZW5ndGgsci5tb2RlPTE2MjAyO2Nhc2UgMTYyMDI6Zm9yKDtRPXIuZGlzdGNvZGVbTCYoMTw8ci5kaXN0Yml0cyktMV0sWj1RPj4+MjQsQj1RPj4+MTYmMjU1LEg9NjU1MzUmUSwhKFo8PVUpOyl7aWYoMD09PU4pYnJlYWsgZTtOLS0sTCs9a1tEKytdPDxVLFUrPTh9aWYoMD09KDI0MCZCKSl7Zm9yKEs9WixKPUIsJD1IO1E9ci5kaXN0Y29kZVskKygoTCYoMTw8SytKKS0xKT4+SyldLFo9UT4+PjI0LEI9UT4+PjE2JjI1NSxIPTY1NTM1JlEsIShLK1o8PVUpOyl7aWYoMD09PU4pYnJlYWsgZTtOLS0sTCs9a1tEKytdPDxVLFUrPTh9TD4+Pj1LLFUtPUssci5iYWNrKz1LfWlmKEw+Pj49WixVLT1aLHIuYmFjays9Wiw2NCZCKXtlLm1zZz1cImludmFsaWQgZGlzdGFuY2UgY29kZVwiLHIubW9kZT1SO2JyZWFrfXIub2Zmc2V0PUgsci5leHRyYT0xNSZCLHIubW9kZT0xNjIwMztjYXNlIDE2MjAzOmlmKHIuZXh0cmEpe2ZvcihyZT1yLmV4dHJhO1U8cmU7KXtpZigwPT09TilicmVhayBlO04tLSxMKz1rW0QrK108PFUsVSs9OH1yLm9mZnNldCs9TCYoMTw8ci5leHRyYSktMSxMPj4+PXIuZXh0cmEsVS09ci5leHRyYSxyLmJhY2srPXIuZXh0cmF9aWYoci5vZmZzZXQ+ci5kbWF4KXtlLm1zZz1cImludmFsaWQgZGlzdGFuY2UgdG9vIGZhciBiYWNrXCIsci5tb2RlPVI7YnJlYWt9ci5tb2RlPTE2MjA0O2Nhc2UgMTYyMDQ6aWYoMD09PU0pYnJlYWsgZTtpZihWPUYtTSxyLm9mZnNldD5WKXtpZihWPXIub2Zmc2V0LVYsVj5yLndoYXZlJiZyLnNhbmUpe2UubXNnPVwiaW52YWxpZCBkaXN0YW5jZSB0b28gZmFyIGJhY2tcIixyLm1vZGU9UjticmVha31WPnIud25leHQ/KFYtPXIud25leHQsVz1yLndzaXplLVYpOlc9ci53bmV4dC1WLFY+ci5sZW5ndGgmJihWPXIubGVuZ3RoKSxxPXIud2luZG93fWVsc2UgcT1JLFc9Ty1yLm9mZnNldCxWPXIubGVuZ3RoO1Y+TSYmKFY9TSksTS09VixyLmxlbmd0aC09Vjtkb3tJW08rK109cVtXKytdfXdoaWxlKC0tVik7MD09PXIubGVuZ3RoJiYoci5tb2RlPXcpO2JyZWFrO2Nhc2UgMTYyMDU6aWYoMD09PU0pYnJlYWsgZTtJW08rK109ci5sZW5ndGgsTS0tLHIubW9kZT13O2JyZWFrO2Nhc2UgQTppZihyLndyYXApe2Zvcig7VTwzMjspe2lmKDA9PT1OKWJyZWFrIGU7Ti0tLEx8PWtbRCsrXTw8VSxVKz04fWlmKEYtPU0sZS50b3RhbF9vdXQrPUYsci50b3RhbCs9Riw0JnIud3JhcCYmRiYmKGUuYWRsZXI9ci5jaGVjaz1yLmZsYWdzP2koci5jaGVjayxJLEYsTy1GKTpuKHIuY2hlY2ssSSxGLE8tRikpLEY9TSw0JnIud3JhcCYmKHIuZmxhZ3M/TDpQKEwpKSE9PXIuY2hlY2spe2UubXNnPVwiaW5jb3JyZWN0IGRhdGEgY2hlY2tcIixyLm1vZGU9UjticmVha31MPTAsVT0wfXIubW9kZT0xNjIwNztjYXNlIDE2MjA3OmlmKHIud3JhcCYmci5mbGFncyl7Zm9yKDtVPDMyOyl7aWYoMD09PU4pYnJlYWsgZTtOLS0sTCs9a1tEKytdPDxVLFUrPTh9aWYoNCZyLndyYXAmJkwhPT0oNDI5NDk2NzI5NSZyLnRvdGFsKSl7ZS5tc2c9XCJpbmNvcnJlY3QgbGVuZ3RoIGNoZWNrXCIsci5tb2RlPVI7YnJlYWt9TD0wLFU9MH1yLm1vZGU9MTYyMDg7Y2FzZSAxNjIwODpYPXA7YnJlYWsgZTtjYXNlIFI6WD1mO2JyZWFrIGU7Y2FzZSBTOnJldHVybiBtO2RlZmF1bHQ6cmV0dXJuIHV9cmV0dXJuIGUubmV4dF9vdXQ9TyxlLmF2YWlsX291dD1NLGUubmV4dF9pbj1ELGUuYXZhaWxfaW49TixyLmhvbGQ9TCxyLmJpdHM9VSwoci53c2l6ZXx8RiE9PWUuYXZhaWxfb3V0JiZyLm1vZGU8UiYmKHIubW9kZTxBfHx0IT09bykpJiZ6KGUsZS5vdXRwdXQsZS5uZXh0X291dCxGLWUuYXZhaWxfb3V0KT8oci5tb2RlPVMsbSk6KEctPWUuYXZhaWxfaW4sRi09ZS5hdmFpbF9vdXQsZS50b3RhbF9pbis9RyxlLnRvdGFsX291dCs9RixyLnRvdGFsKz1GLDQmci53cmFwJiZGJiYoZS5hZGxlcj1yLmNoZWNrPXIuZmxhZ3M/aShyLmNoZWNrLEksRixlLm5leHRfb3V0LUYpOm4oci5jaGVjayxJLEYsZS5uZXh0X291dC1GKSksZS5kYXRhX3R5cGU9ci5iaXRzKyhyLmxhc3Q/NjQ6MCkrKHIubW9kZT09PXk/MTI4OjApKyhyLm1vZGU9PT1ifHxyLm1vZGU9PT1DPzI1NjowKSwoMD09PUcmJjA9PT1GfHx0PT09bykmJlg9PT1sJiYoWD1fKSxYKX0sZS5leHBvcnRzLmluZmxhdGVFbmQ9ZT0+e2lmKHgoZSkpcmV0dXJuIHU7bGV0IHQ9ZS5zdGF0ZTtyZXR1cm4gdC53aW5kb3cmJih0LndpbmRvdz1udWxsKSxlLnN0YXRlPW51bGwsbH0sZS5leHBvcnRzLmluZmxhdGVHZXRIZWFkZXI9KGUsdCk9PntpZih4KGUpKXJldHVybiB1O2NvbnN0IHI9ZS5zdGF0ZTtyZXR1cm4gMD09KDImci53cmFwKT91OihyLmhlYWQ9dCx0LmRvbmU9ITEsbCl9LGUuZXhwb3J0cy5pbmZsYXRlU2V0RGljdGlvbmFyeT0oZSx0KT0+e2NvbnN0IHI9dC5sZW5ndGg7bGV0IGkscyxhO3JldHVybiB4KGUpP3U6KGk9ZS5zdGF0ZSwwIT09aS53cmFwJiZpLm1vZGUhPT1FP3U6aS5tb2RlPT09RSYmKHM9MSxzPW4ocyx0LHIsMCkscyE9PWkuY2hlY2spP2Y6KGE9eihlLHQscixyKSxhPyhpLm1vZGU9UyxtKTooaS5oYXZlZGljdD0xLGwpKSl9LGUuZXhwb3J0cy5pbmZsYXRlSW5mbz1cInBha28gaW5mbGF0ZSAoZnJvbSBOb2RlY2EgcHJvamVjdClcIn0sMjQxOmU9PntcInVzZSBzdHJpY3RcIjtjb25zdCB0PTE1LHI9bmV3IFVpbnQxNkFycmF5KFszLDQsNSw2LDcsOCw5LDEwLDExLDEzLDE1LDE3LDE5LDIzLDI3LDMxLDM1LDQzLDUxLDU5LDY3LDgzLDk5LDExNSwxMzEsMTYzLDE5NSwyMjcsMjU4LDAsMF0pLG49bmV3IFVpbnQ4QXJyYXkoWzE2LDE2LDE2LDE2LDE2LDE2LDE2LDE2LDE3LDE3LDE3LDE3LDE4LDE4LDE4LDE4LDE5LDE5LDE5LDE5LDIwLDIwLDIwLDIwLDIxLDIxLDIxLDIxLDE2LDcyLDc4XSksaT1uZXcgVWludDE2QXJyYXkoWzEsMiwzLDQsNSw3LDksMTMsMTcsMjUsMzMsNDksNjUsOTcsMTI5LDE5MywyNTcsMzg1LDUxMyw3NjksMTAyNSwxNTM3LDIwNDksMzA3Myw0MDk3LDYxNDUsODE5MywxMjI4OSwxNjM4NSwyNDU3NywwLDBdKSxzPW5ldyBVaW50OEFycmF5KFsxNiwxNiwxNiwxNiwxNywxNywxOCwxOCwxOSwxOSwyMCwyMCwyMSwyMSwyMiwyMiwyMywyMywyNCwyNCwyNSwyNSwyNiwyNiwyNywyNywyOCwyOCwyOSwyOSw2NCw2NF0pO2UuZXhwb3J0cz0oZSxhLG8sYyxkLGwscCxoKT0+e2NvbnN0IHU9aC5iaXRzO2xldCBmLG0sXyxnLHYsRSx5PTAsVD0wLEM9MCxiPTAsdz0wLEE9MCxSPTAsUz0wLFA9MCxrPTAseD1udWxsO2NvbnN0IEk9bmV3IFVpbnQxNkFycmF5KDE2KSxEPW5ldyBVaW50MTZBcnJheSgxNik7bGV0IE8sTixNLEw9bnVsbDtmb3IoeT0wO3k8PXQ7eSsrKUlbeV09MDtmb3IoVD0wO1Q8YztUKyspSVthW28rVF1dKys7Zm9yKHc9dSxiPXQ7Yj49MSYmMD09PUlbYl07Yi0tKTtpZih3PmImJih3PWIpLDA9PT1iKXJldHVybiBkW2wrK109MjA5NzE1MjAsZFtsKytdPTIwOTcxNTIwLGguYml0cz0xLDA7Zm9yKEM9MTtDPGImJjA9PT1JW0NdO0MrKyk7Zm9yKHc8QyYmKHc9QyksUz0xLHk9MTt5PD10O3krKylpZihTPDw9MSxTLT1JW3ldLFM8MClyZXR1cm4tMTtpZihTPjAmJigwPT09ZXx8MSE9PWIpKXJldHVybi0xO2ZvcihEWzFdPTAseT0xO3k8dDt5KyspRFt5KzFdPURbeV0rSVt5XTtmb3IoVD0wO1Q8YztUKyspMCE9PWFbbytUXSYmKHBbRFthW28rVF1dKytdPVQpO2lmKDA9PT1lPyh4PUw9cCxFPTIwKToxPT09ZT8oeD1yLEw9bixFPTI1Nyk6KHg9aSxMPXMsRT0wKSxrPTAsVD0wLHk9Qyx2PWwsQT13LFI9MCxfPS0xLFA9MTw8dyxnPVAtMSwxPT09ZSYmUD44NTJ8fDI9PT1lJiZQPjU5MilyZXR1cm4gMTtmb3IoOzspe089eS1SLHBbVF0rMTxFPyhOPTAsTT1wW1RdKTpwW1RdPj1FPyhOPUxbcFtUXS1FXSxNPXhbcFtUXS1FXSk6KE49OTYsTT0wKSxmPTE8PHktUixtPTE8PEEsQz1tO2Rve20tPWYsZFt2KyhrPj5SKSttXT1PPDwyNHxOPDwxNnxNfDB9d2hpbGUoMCE9PW0pO2ZvcihmPTE8PHktMTtrJmY7KWY+Pj0xO2lmKDAhPT1mPyhrJj1mLTEsays9Zik6az0wLFQrKywwPT0tLUlbeV0pe2lmKHk9PT1iKWJyZWFrO3k9YVtvK3BbVF1dfWlmKHk+dyYmKGsmZykhPT1fKXtmb3IoMD09PVImJihSPXcpLHYrPUMsQT15LVIsUz0xPDxBO0ErUjxiJiYoUy09SVtBK1JdLCEoUzw9MCkpOylBKyssUzw8PTE7aWYoUCs9MTw8QSwxPT09ZSYmUD44NTJ8fDI9PT1lJiZQPjU5MilyZXR1cm4gMTtfPWsmZyxkW19dPXc8PDI0fEE8PDE2fHYtbHwwfX1yZXR1cm4gMCE9PWsmJihkW3Yra109eS1SPDwyNHw2NDw8MTZ8MCksaC5iaXRzPXcsMH19LDg5ODplPT57XCJ1c2Ugc3RyaWN0XCI7ZS5leHBvcnRzPXsyOlwibmVlZCBkaWN0aW9uYXJ5XCIsMTpcInN0cmVhbSBlbmRcIiwwOlwiXCIsXCItMVwiOlwiZmlsZSBlcnJvclwiLFwiLTJcIjpcInN0cmVhbSBlcnJvclwiLFwiLTNcIjpcImRhdGEgZXJyb3JcIixcIi00XCI6XCJpbnN1ZmZpY2llbnQgbWVtb3J5XCIsXCItNVwiOlwiYnVmZmVyIGVycm9yXCIsXCItNlwiOlwiaW5jb21wYXRpYmxlIHZlcnNpb25cIn19LDM0MjplPT57XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gdChlKXtsZXQgdD1lLmxlbmd0aDtmb3IoOy0tdD49MDspZVt0XT0wfWNvbnN0IHI9MjU2LG49Mjg2LGk9MzAscz0xNSxhPW5ldyBVaW50OEFycmF5KFswLDAsMCwwLDAsMCwwLDAsMSwxLDEsMSwyLDIsMiwyLDMsMywzLDMsNCw0LDQsNCw1LDUsNSw1LDBdKSxvPW5ldyBVaW50OEFycmF5KFswLDAsMCwwLDEsMSwyLDIsMywzLDQsNCw1LDUsNiw2LDcsNyw4LDgsOSw5LDEwLDEwLDExLDExLDEyLDEyLDEzLDEzXSksYz1uZXcgVWludDhBcnJheShbMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwyLDMsN10pLGQ9bmV3IFVpbnQ4QXJyYXkoWzE2LDE3LDE4LDAsOCw3LDksNiwxMCw1LDExLDQsMTIsMywxMywyLDE0LDEsMTVdKSxsPW5ldyBBcnJheSg1NzYpO3QobCk7Y29uc3QgcD1uZXcgQXJyYXkoNjApO3QocCk7Y29uc3QgaD1uZXcgQXJyYXkoNTEyKTt0KGgpO2NvbnN0IHU9bmV3IEFycmF5KDI1Nik7dCh1KTtjb25zdCBmPW5ldyBBcnJheSgyOSk7dChmKTtjb25zdCBtPW5ldyBBcnJheShpKTtmdW5jdGlvbiBfKGUsdCxyLG4saSl7dGhpcy5zdGF0aWNfdHJlZT1lLHRoaXMuZXh0cmFfYml0cz10LHRoaXMuZXh0cmFfYmFzZT1yLHRoaXMuZWxlbXM9bix0aGlzLm1heF9sZW5ndGg9aSx0aGlzLmhhc19zdHJlZT1lJiZlLmxlbmd0aH1sZXQgZyx2LEU7ZnVuY3Rpb24geShlLHQpe3RoaXMuZHluX3RyZWU9ZSx0aGlzLm1heF9jb2RlPTAsdGhpcy5zdGF0X2Rlc2M9dH10KG0pO2NvbnN0IFQ9ZT0+ZTwyNTY/aFtlXTpoWzI1NisoZT4+PjcpXSxDPShlLHQpPT57ZS5wZW5kaW5nX2J1ZltlLnBlbmRpbmcrK109MjU1JnQsZS5wZW5kaW5nX2J1ZltlLnBlbmRpbmcrK109dD4+PjgmMjU1fSxiPShlLHQscik9PntlLmJpX3ZhbGlkPjE2LXI/KGUuYmlfYnVmfD10PDxlLmJpX3ZhbGlkJjY1NTM1LEMoZSxlLmJpX2J1ZiksZS5iaV9idWY9dD4+MTYtZS5iaV92YWxpZCxlLmJpX3ZhbGlkKz1yLTE2KTooZS5iaV9idWZ8PXQ8PGUuYmlfdmFsaWQmNjU1MzUsZS5iaV92YWxpZCs9cil9LHc9KGUsdCxyKT0+e2IoZSxyWzIqdF0sclsyKnQrMV0pfSxBPShlLHQpPT57bGV0IHI9MDtkb3tyfD0xJmUsZT4+Pj0xLHI8PD0xfXdoaWxlKC0tdD4wKTtyZXR1cm4gcj4+PjF9LFI9KGUsdCxyKT0+e2NvbnN0IG49bmV3IEFycmF5KDE2KTtsZXQgaSxhLG89MDtmb3IoaT0xO2k8PXM7aSsrKW89bytyW2ktMV08PDEsbltpXT1vO2ZvcihhPTA7YTw9dDthKyspe2xldCB0PWVbMiphKzFdOzAhPT10JiYoZVsyKmFdPUEoblt0XSsrLHQpKX19LFM9ZT0+e2xldCB0O2Zvcih0PTA7dDxuO3QrKyllLmR5bl9sdHJlZVsyKnRdPTA7Zm9yKHQ9MDt0PGk7dCsrKWUuZHluX2R0cmVlWzIqdF09MDtmb3IodD0wO3Q8MTk7dCsrKWUuYmxfdHJlZVsyKnRdPTA7ZS5keW5fbHRyZWVbNTEyXT0xLGUub3B0X2xlbj1lLnN0YXRpY19sZW49MCxlLnN5bV9uZXh0PWUubWF0Y2hlcz0wfSxQPWU9PntlLmJpX3ZhbGlkPjg/QyhlLGUuYmlfYnVmKTplLmJpX3ZhbGlkPjAmJihlLnBlbmRpbmdfYnVmW2UucGVuZGluZysrXT1lLmJpX2J1ZiksZS5iaV9idWY9MCxlLmJpX3ZhbGlkPTB9LGs9KGUsdCxyLG4pPT57Y29uc3QgaT0yKnQscz0yKnI7cmV0dXJuIGVbaV08ZVtzXXx8ZVtpXT09PWVbc10mJm5bdF08PW5bcl19LHg9KGUsdCxyKT0+e2NvbnN0IG49ZS5oZWFwW3JdO2xldCBpPXI8PDE7Zm9yKDtpPD1lLmhlYXBfbGVuJiYoaTxlLmhlYXBfbGVuJiZrKHQsZS5oZWFwW2krMV0sZS5oZWFwW2ldLGUuZGVwdGgpJiZpKyssIWsodCxuLGUuaGVhcFtpXSxlLmRlcHRoKSk7KWUuaGVhcFtyXT1lLmhlYXBbaV0scj1pLGk8PD0xO2UuaGVhcFtyXT1ufSxJPShlLHQsbik9PntsZXQgaSxzLGMsZCxsPTA7aWYoMCE9PWUuc3ltX25leHQpZG97aT0yNTUmZS5wZW5kaW5nX2J1ZltlLnN5bV9idWYrbCsrXSxpKz0oMjU1JmUucGVuZGluZ19idWZbZS5zeW1fYnVmK2wrK10pPDw4LHM9ZS5wZW5kaW5nX2J1ZltlLnN5bV9idWYrbCsrXSwwPT09aT93KGUscyx0KTooYz11W3NdLHcoZSxjK3IrMSx0KSxkPWFbY10sMCE9PWQmJihzLT1mW2NdLGIoZSxzLGQpKSxpLS0sYz1UKGkpLHcoZSxjLG4pLGQ9b1tjXSwwIT09ZCYmKGktPW1bY10sYihlLGksZCkpKX13aGlsZShsPGUuc3ltX25leHQpO3coZSwyNTYsdCl9LEQ9KGUsdCk9Pntjb25zdCByPXQuZHluX3RyZWUsbj10LnN0YXRfZGVzYy5zdGF0aWNfdHJlZSxpPXQuc3RhdF9kZXNjLmhhc19zdHJlZSxhPXQuc3RhdF9kZXNjLmVsZW1zO2xldCBvLGMsZCxsPS0xO2ZvcihlLmhlYXBfbGVuPTAsZS5oZWFwX21heD01NzMsbz0wO288YTtvKyspMCE9PXJbMipvXT8oZS5oZWFwWysrZS5oZWFwX2xlbl09bD1vLGUuZGVwdGhbb109MCk6clsyKm8rMV09MDtmb3IoO2UuaGVhcF9sZW48MjspZD1lLmhlYXBbKytlLmhlYXBfbGVuXT1sPDI/KytsOjAsclsyKmRdPTEsZS5kZXB0aFtkXT0wLGUub3B0X2xlbi0tLGkmJihlLnN0YXRpY19sZW4tPW5bMipkKzFdKTtmb3IodC5tYXhfY29kZT1sLG89ZS5oZWFwX2xlbj4+MTtvPj0xO28tLSl4KGUscixvKTtkPWE7ZG97bz1lLmhlYXBbMV0sZS5oZWFwWzFdPWUuaGVhcFtlLmhlYXBfbGVuLS1dLHgoZSxyLDEpLGM9ZS5oZWFwWzFdLGUuaGVhcFstLWUuaGVhcF9tYXhdPW8sZS5oZWFwWy0tZS5oZWFwX21heF09YyxyWzIqZF09clsyKm9dK3JbMipjXSxlLmRlcHRoW2RdPShlLmRlcHRoW29dPj1lLmRlcHRoW2NdP2UuZGVwdGhbb106ZS5kZXB0aFtjXSkrMSxyWzIqbysxXT1yWzIqYysxXT1kLGUuaGVhcFsxXT1kKysseChlLHIsMSl9d2hpbGUoZS5oZWFwX2xlbj49Mik7ZS5oZWFwWy0tZS5oZWFwX21heF09ZS5oZWFwWzFdLCgoZSx0KT0+e2NvbnN0IHI9dC5keW5fdHJlZSxuPXQubWF4X2NvZGUsaT10LnN0YXRfZGVzYy5zdGF0aWNfdHJlZSxhPXQuc3RhdF9kZXNjLmhhc19zdHJlZSxvPXQuc3RhdF9kZXNjLmV4dHJhX2JpdHMsYz10LnN0YXRfZGVzYy5leHRyYV9iYXNlLGQ9dC5zdGF0X2Rlc2MubWF4X2xlbmd0aDtsZXQgbCxwLGgsdSxmLG0sXz0wO2Zvcih1PTA7dTw9czt1KyspZS5ibF9jb3VudFt1XT0wO2ZvcihyWzIqZS5oZWFwW2UuaGVhcF9tYXhdKzFdPTAsbD1lLmhlYXBfbWF4KzE7bDw1NzM7bCsrKXA9ZS5oZWFwW2xdLHU9clsyKnJbMipwKzFdKzFdKzEsdT5kJiYodT1kLF8rKyksclsyKnArMV09dSxwPm58fChlLmJsX2NvdW50W3VdKyssZj0wLHA+PWMmJihmPW9bcC1jXSksbT1yWzIqcF0sZS5vcHRfbGVuKz1tKih1K2YpLGEmJihlLnN0YXRpY19sZW4rPW0qKGlbMipwKzFdK2YpKSk7aWYoMCE9PV8pe2Rve2Zvcih1PWQtMTswPT09ZS5ibF9jb3VudFt1XTspdS0tO2UuYmxfY291bnRbdV0tLSxlLmJsX2NvdW50W3UrMV0rPTIsZS5ibF9jb3VudFtkXS0tLF8tPTJ9d2hpbGUoXz4wKTtmb3IodT1kOzAhPT11O3UtLSlmb3IocD1lLmJsX2NvdW50W3VdOzAhPT1wOyloPWUuaGVhcFstLWxdLGg+bnx8KHJbMipoKzFdIT09dSYmKGUub3B0X2xlbis9KHUtclsyKmgrMV0pKnJbMipoXSxyWzIqaCsxXT11KSxwLS0pfX0pKGUsdCksUihyLGwsZS5ibF9jb3VudCl9LE89KGUsdCxyKT0+e2xldCBuLGkscz0tMSxhPXRbMV0sbz0wLGM9NyxkPTQ7Zm9yKDA9PT1hJiYoYz0xMzgsZD0zKSx0WzIqKHIrMSkrMV09NjU1MzUsbj0wO248PXI7bisrKWk9YSxhPXRbMioobisxKSsxXSwrK288YyYmaT09PWF8fChvPGQ/ZS5ibF90cmVlWzIqaV0rPW86MCE9PWk/KGkhPT1zJiZlLmJsX3RyZWVbMippXSsrLGUuYmxfdHJlZVszMl0rKyk6bzw9MTA/ZS5ibF90cmVlWzM0XSsrOmUuYmxfdHJlZVszNl0rKyxvPTAscz1pLDA9PT1hPyhjPTEzOCxkPTMpOmk9PT1hPyhjPTYsZD0zKTooYz03LGQ9NCkpfSxOPShlLHQscik9PntsZXQgbixpLHM9LTEsYT10WzFdLG89MCxjPTcsZD00O2ZvcigwPT09YSYmKGM9MTM4LGQ9Myksbj0wO248PXI7bisrKWlmKGk9YSxhPXRbMioobisxKSsxXSwhKCsrbzxjJiZpPT09YSkpe2lmKG88ZClkb3t3KGUsaSxlLmJsX3RyZWUpfXdoaWxlKDAhPS0tbyk7ZWxzZSAwIT09aT8oaSE9PXMmJih3KGUsaSxlLmJsX3RyZWUpLG8tLSksdyhlLDE2LGUuYmxfdHJlZSksYihlLG8tMywyKSk6bzw9MTA/KHcoZSwxNyxlLmJsX3RyZWUpLGIoZSxvLTMsMykpOih3KGUsMTgsZS5ibF90cmVlKSxiKGUsby0xMSw3KSk7bz0wLHM9aSwwPT09YT8oYz0xMzgsZD0zKTppPT09YT8oYz02LGQ9Myk6KGM9NyxkPTQpfX07bGV0IE09ITE7Y29uc3QgTD0oZSx0LHIsbik9PntiKGUsMCsobj8xOjApLDMpLFAoZSksQyhlLHIpLEMoZSx+ciksciYmZS5wZW5kaW5nX2J1Zi5zZXQoZS53aW5kb3cuc3ViYXJyYXkodCx0K3IpLGUucGVuZGluZyksZS5wZW5kaW5nKz1yfTtlLmV4cG9ydHMuX3RyX2luaXQ9ZT0+e018fCgoKCk9PntsZXQgZSx0LHIsZCx5O2NvbnN0IFQ9bmV3IEFycmF5KDE2KTtmb3Iocj0wLGQ9MDtkPDI4O2QrKylmb3IoZltkXT1yLGU9MDtlPDE8PGFbZF07ZSsrKXVbcisrXT1kO2Zvcih1W3ItMV09ZCx5PTAsZD0wO2Q8MTY7ZCsrKWZvcihtW2RdPXksZT0wO2U8MTw8b1tkXTtlKyspaFt5KytdPWQ7Zm9yKHk+Pj03O2Q8aTtkKyspZm9yKG1bZF09eTw8NyxlPTA7ZTwxPDxvW2RdLTc7ZSsrKWhbMjU2K3krK109ZDtmb3IodD0wO3Q8PXM7dCsrKVRbdF09MDtmb3IoZT0wO2U8PTE0MzspbFsyKmUrMV09OCxlKyssVFs4XSsrO2Zvcig7ZTw9MjU1OylsWzIqZSsxXT05LGUrKyxUWzldKys7Zm9yKDtlPD0yNzk7KWxbMiplKzFdPTcsZSsrLFRbN10rKztmb3IoO2U8PTI4NzspbFsyKmUrMV09OCxlKyssVFs4XSsrO2ZvcihSKGwsMjg3LFQpLGU9MDtlPGk7ZSsrKXBbMiplKzFdPTUscFsyKmVdPUEoZSw1KTtnPW5ldyBfKGwsYSwyNTcsbixzKSx2PW5ldyBfKHAsbywwLGkscyksRT1uZXcgXyhuZXcgQXJyYXkoMCksYywwLDE5LDcpfSkoKSxNPSEwKSxlLmxfZGVzYz1uZXcgeShlLmR5bl9sdHJlZSxnKSxlLmRfZGVzYz1uZXcgeShlLmR5bl9kdHJlZSx2KSxlLmJsX2Rlc2M9bmV3IHkoZS5ibF90cmVlLEUpLGUuYmlfYnVmPTAsZS5iaV92YWxpZD0wLFMoZSl9LGUuZXhwb3J0cy5fdHJfc3RvcmVkX2Jsb2NrPUwsZS5leHBvcnRzLl90cl9mbHVzaF9ibG9jaz0oZSx0LG4saSk9PntsZXQgcyxhLG89MDtlLmxldmVsPjA/KDI9PT1lLnN0cm0uZGF0YV90eXBlJiYoZS5zdHJtLmRhdGFfdHlwZT0oZT0+e2xldCB0LG49NDA5MzYyNDQ0Nztmb3IodD0wO3Q8PTMxO3QrKyxuPj4+PTEpaWYoMSZuJiYwIT09ZS5keW5fbHRyZWVbMip0XSlyZXR1cm4gMDtpZigwIT09ZS5keW5fbHRyZWVbMThdfHwwIT09ZS5keW5fbHRyZWVbMjBdfHwwIT09ZS5keW5fbHRyZWVbMjZdKXJldHVybiAxO2Zvcih0PTMyO3Q8cjt0KyspaWYoMCE9PWUuZHluX2x0cmVlWzIqdF0pcmV0dXJuIDE7cmV0dXJuIDB9KShlKSksRChlLGUubF9kZXNjKSxEKGUsZS5kX2Rlc2MpLG89KGU9PntsZXQgdDtmb3IoTyhlLGUuZHluX2x0cmVlLGUubF9kZXNjLm1heF9jb2RlKSxPKGUsZS5keW5fZHRyZWUsZS5kX2Rlc2MubWF4X2NvZGUpLEQoZSxlLmJsX2Rlc2MpLHQ9MTg7dD49MyYmMD09PWUuYmxfdHJlZVsyKmRbdF0rMV07dC0tKTtyZXR1cm4gZS5vcHRfbGVuKz0zKih0KzEpKzUrNSs0LHR9KShlKSxzPWUub3B0X2xlbiszKzc+Pj4zLGE9ZS5zdGF0aWNfbGVuKzMrNz4+PjMsYTw9cyYmKHM9YSkpOnM9YT1uKzUsbis0PD1zJiYtMSE9PXQ/TChlLHQsbixpKTo0PT09ZS5zdHJhdGVneXx8YT09PXM/KGIoZSwyKyhpPzE6MCksMyksSShlLGwscCkpOihiKGUsNCsoaT8xOjApLDMpLCgoZSx0LHIsbik9PntsZXQgaTtmb3IoYihlLHQtMjU3LDUpLGIoZSxyLTEsNSksYihlLG4tNCw0KSxpPTA7aTxuO2krKyliKGUsZS5ibF90cmVlWzIqZFtpXSsxXSwzKTtOKGUsZS5keW5fbHRyZWUsdC0xKSxOKGUsZS5keW5fZHRyZWUsci0xKX0pKGUsZS5sX2Rlc2MubWF4X2NvZGUrMSxlLmRfZGVzYy5tYXhfY29kZSsxLG8rMSksSShlLGUuZHluX2x0cmVlLGUuZHluX2R0cmVlKSksUyhlKSxpJiZQKGUpfSxlLmV4cG9ydHMuX3RyX3RhbGx5PShlLHQsbik9PihlLnBlbmRpbmdfYnVmW2Uuc3ltX2J1ZitlLnN5bV9uZXh0KytdPXQsZS5wZW5kaW5nX2J1ZltlLnN5bV9idWYrZS5zeW1fbmV4dCsrXT10Pj44LGUucGVuZGluZ19idWZbZS5zeW1fYnVmK2Uuc3ltX25leHQrK109biwwPT09dD9lLmR5bl9sdHJlZVsyKm5dKys6KGUubWF0Y2hlcysrLHQtLSxlLmR5bl9sdHJlZVsyKih1W25dK3IrMSldKyssZS5keW5fZHRyZWVbMipUKHQpXSsrKSxlLnN5bV9uZXh0PT09ZS5zeW1fZW5kKSxlLmV4cG9ydHMuX3RyX2FsaWduPWU9PntiKGUsMiwzKSx3KGUsMjU2LGwpLChlPT57MTY9PT1lLmJpX3ZhbGlkPyhDKGUsZS5iaV9idWYpLGUuYmlfYnVmPTAsZS5iaV92YWxpZD0wKTplLmJpX3ZhbGlkPj04JiYoZS5wZW5kaW5nX2J1ZltlLnBlbmRpbmcrK109MjU1JmUuYmlfYnVmLGUuYmlfYnVmPj49OCxlLmJpX3ZhbGlkLT04KX0pKGUpfX0sMjkyOmU9PntcInVzZSBzdHJpY3RcIjtlLmV4cG9ydHM9ZnVuY3Rpb24oKXt0aGlzLmlucHV0PW51bGwsdGhpcy5uZXh0X2luPTAsdGhpcy5hdmFpbF9pbj0wLHRoaXMudG90YWxfaW49MCx0aGlzLm91dHB1dD1udWxsLHRoaXMubmV4dF9vdXQ9MCx0aGlzLmF2YWlsX291dD0wLHRoaXMudG90YWxfb3V0PTAsdGhpcy5tc2c9XCJcIix0aGlzLnN0YXRlPW51bGwsdGhpcy5kYXRhX3R5cGU9Mix0aGlzLmFkbGVyPTB9fSw1Mzk6ZT0+e1widXNlIHN0cmljdFwiO2NvbnN0IHQ9e2dlbmVyYXRlSWRlbnRpZmllcjpmdW5jdGlvbigpe3JldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoMiwxMil9fTt0LmxvY2FsQ05hbWU9dC5nZW5lcmF0ZUlkZW50aWZpZXIoKSx0LnNwbGl0TGluZXM9ZnVuY3Rpb24oZSl7cmV0dXJuIGUudHJpbSgpLnNwbGl0KFwiXFxuXCIpLm1hcCgoZT0+ZS50cmltKCkpKX0sdC5zcGxpdFNlY3Rpb25zPWZ1bmN0aW9uKGUpe3JldHVybiBlLnNwbGl0KFwiXFxubT1cIikubWFwKCgoZSx0KT0+KHQ+MD9cIm09XCIrZTplKS50cmltKCkrXCJcXHJcXG5cIikpfSx0LmdldERlc2NyaXB0aW9uPWZ1bmN0aW9uKGUpe2NvbnN0IHI9dC5zcGxpdFNlY3Rpb25zKGUpO3JldHVybiByJiZyWzBdfSx0LmdldE1lZGlhU2VjdGlvbnM9ZnVuY3Rpb24oZSl7Y29uc3Qgcj10LnNwbGl0U2VjdGlvbnMoZSk7cmV0dXJuIHIuc2hpZnQoKSxyfSx0Lm1hdGNoUHJlZml4PWZ1bmN0aW9uKGUscil7cmV0dXJuIHQuc3BsaXRMaW5lcyhlKS5maWx0ZXIoKGU9PjA9PT1lLmluZGV4T2YocikpKX0sdC5wYXJzZUNhbmRpZGF0ZT1mdW5jdGlvbihlKXtsZXQgdDt0PTA9PT1lLmluZGV4T2YoXCJhPWNhbmRpZGF0ZTpcIik/ZS5zdWJzdHJpbmcoMTIpLnNwbGl0KFwiIFwiKTplLnN1YnN0cmluZygxMCkuc3BsaXQoXCIgXCIpO2NvbnN0IHI9e2ZvdW5kYXRpb246dFswXSxjb21wb25lbnQ6ezE6XCJydHBcIiwyOlwicnRjcFwifVt0WzFdXXx8dFsxXSxwcm90b2NvbDp0WzJdLnRvTG93ZXJDYXNlKCkscHJpb3JpdHk6cGFyc2VJbnQodFszXSwxMCksaXA6dFs0XSxhZGRyZXNzOnRbNF0scG9ydDpwYXJzZUludCh0WzVdLDEwKSx0eXBlOnRbN119O2ZvcihsZXQgZT04O2U8dC5sZW5ndGg7ZSs9Milzd2l0Y2godFtlXSl7Y2FzZVwicmFkZHJcIjpyLnJlbGF0ZWRBZGRyZXNzPXRbZSsxXTticmVhaztjYXNlXCJycG9ydFwiOnIucmVsYXRlZFBvcnQ9cGFyc2VJbnQodFtlKzFdLDEwKTticmVhaztjYXNlXCJ0Y3B0eXBlXCI6ci50Y3BUeXBlPXRbZSsxXTticmVhaztjYXNlXCJ1ZnJhZ1wiOnIudWZyYWc9dFtlKzFdLHIudXNlcm5hbWVGcmFnbWVudD10W2UrMV07YnJlYWs7ZGVmYXVsdDp2b2lkIDA9PT1yW3RbZV1dJiYoclt0W2VdXT10W2UrMV0pfXJldHVybiByfSx0LndyaXRlQ2FuZGlkYXRlPWZ1bmN0aW9uKGUpe2NvbnN0IHQ9W107dC5wdXNoKGUuZm91bmRhdGlvbik7Y29uc3Qgcj1lLmNvbXBvbmVudDtcInJ0cFwiPT09cj90LnB1c2goMSk6XCJydGNwXCI9PT1yP3QucHVzaCgyKTp0LnB1c2gociksdC5wdXNoKGUucHJvdG9jb2wudG9VcHBlckNhc2UoKSksdC5wdXNoKGUucHJpb3JpdHkpLHQucHVzaChlLmFkZHJlc3N8fGUuaXApLHQucHVzaChlLnBvcnQpO2NvbnN0IG49ZS50eXBlO3JldHVybiB0LnB1c2goXCJ0eXBcIiksdC5wdXNoKG4pLFwiaG9zdFwiIT09biYmZS5yZWxhdGVkQWRkcmVzcyYmZS5yZWxhdGVkUG9ydCYmKHQucHVzaChcInJhZGRyXCIpLHQucHVzaChlLnJlbGF0ZWRBZGRyZXNzKSx0LnB1c2goXCJycG9ydFwiKSx0LnB1c2goZS5yZWxhdGVkUG9ydCkpLGUudGNwVHlwZSYmXCJ0Y3BcIj09PWUucHJvdG9jb2wudG9Mb3dlckNhc2UoKSYmKHQucHVzaChcInRjcHR5cGVcIiksdC5wdXNoKGUudGNwVHlwZSkpLChlLnVzZXJuYW1lRnJhZ21lbnR8fGUudWZyYWcpJiYodC5wdXNoKFwidWZyYWdcIiksdC5wdXNoKGUudXNlcm5hbWVGcmFnbWVudHx8ZS51ZnJhZykpLFwiY2FuZGlkYXRlOlwiK3Quam9pbihcIiBcIil9LHQucGFyc2VJY2VPcHRpb25zPWZ1bmN0aW9uKGUpe3JldHVybiBlLnN1YnN0cmluZygxNCkuc3BsaXQoXCIgXCIpfSx0LnBhcnNlUnRwTWFwPWZ1bmN0aW9uKGUpe2xldCB0PWUuc3Vic3RyaW5nKDkpLnNwbGl0KFwiIFwiKTtjb25zdCByPXtwYXlsb2FkVHlwZTpwYXJzZUludCh0LnNoaWZ0KCksMTApfTtyZXR1cm4gdD10WzBdLnNwbGl0KFwiL1wiKSxyLm5hbWU9dFswXSxyLmNsb2NrUmF0ZT1wYXJzZUludCh0WzFdLDEwKSxyLmNoYW5uZWxzPTM9PT10Lmxlbmd0aD9wYXJzZUludCh0WzJdLDEwKToxLHIubnVtQ2hhbm5lbHM9ci5jaGFubmVscyxyfSx0LndyaXRlUnRwTWFwPWZ1bmN0aW9uKGUpe2xldCB0PWUucGF5bG9hZFR5cGU7dm9pZCAwIT09ZS5wcmVmZXJyZWRQYXlsb2FkVHlwZSYmKHQ9ZS5wcmVmZXJyZWRQYXlsb2FkVHlwZSk7Y29uc3Qgcj1lLmNoYW5uZWxzfHxlLm51bUNoYW5uZWxzfHwxO3JldHVyblwiYT1ydHBtYXA6XCIrdCtcIiBcIitlLm5hbWUrXCIvXCIrZS5jbG9ja1JhdGUrKDEhPT1yP1wiL1wiK3I6XCJcIikrXCJcXHJcXG5cIn0sdC5wYXJzZUV4dG1hcD1mdW5jdGlvbihlKXtjb25zdCB0PWUuc3Vic3RyaW5nKDkpLnNwbGl0KFwiIFwiKTtyZXR1cm57aWQ6cGFyc2VJbnQodFswXSwxMCksZGlyZWN0aW9uOnRbMF0uaW5kZXhPZihcIi9cIik+MD90WzBdLnNwbGl0KFwiL1wiKVsxXTpcInNlbmRyZWN2XCIsdXJpOnRbMV0sYXR0cmlidXRlczp0LnNsaWNlKDIpLmpvaW4oXCIgXCIpfX0sdC53cml0ZUV4dG1hcD1mdW5jdGlvbihlKXtyZXR1cm5cImE9ZXh0bWFwOlwiKyhlLmlkfHxlLnByZWZlcnJlZElkKSsoZS5kaXJlY3Rpb24mJlwic2VuZHJlY3ZcIiE9PWUuZGlyZWN0aW9uP1wiL1wiK2UuZGlyZWN0aW9uOlwiXCIpK1wiIFwiK2UudXJpKyhlLmF0dHJpYnV0ZXM/XCIgXCIrZS5hdHRyaWJ1dGVzOlwiXCIpK1wiXFxyXFxuXCJ9LHQucGFyc2VGbXRwPWZ1bmN0aW9uKGUpe2NvbnN0IHQ9e307bGV0IHI7Y29uc3Qgbj1lLnN1YnN0cmluZyhlLmluZGV4T2YoXCIgXCIpKzEpLnNwbGl0KFwiO1wiKTtmb3IobGV0IGU9MDtlPG4ubGVuZ3RoO2UrKylyPW5bZV0udHJpbSgpLnNwbGl0KFwiPVwiKSx0W3JbMF0udHJpbSgpXT1yWzFdO3JldHVybiB0fSx0LndyaXRlRm10cD1mdW5jdGlvbihlKXtsZXQgdD1cIlwiLHI9ZS5wYXlsb2FkVHlwZTtpZih2b2lkIDAhPT1lLnByZWZlcnJlZFBheWxvYWRUeXBlJiYocj1lLnByZWZlcnJlZFBheWxvYWRUeXBlKSxlLnBhcmFtZXRlcnMmJk9iamVjdC5rZXlzKGUucGFyYW1ldGVycykubGVuZ3RoKXtjb25zdCBuPVtdO09iamVjdC5rZXlzKGUucGFyYW1ldGVycykuZm9yRWFjaCgodD0+e3ZvaWQgMCE9PWUucGFyYW1ldGVyc1t0XT9uLnB1c2godCtcIj1cIitlLnBhcmFtZXRlcnNbdF0pOm4ucHVzaCh0KX0pKSx0Kz1cImE9Zm10cDpcIityK1wiIFwiK24uam9pbihcIjtcIikrXCJcXHJcXG5cIn1yZXR1cm4gdH0sdC5wYXJzZVJ0Y3BGYj1mdW5jdGlvbihlKXtjb25zdCB0PWUuc3Vic3RyaW5nKGUuaW5kZXhPZihcIiBcIikrMSkuc3BsaXQoXCIgXCIpO3JldHVybnt0eXBlOnQuc2hpZnQoKSxwYXJhbWV0ZXI6dC5qb2luKFwiIFwiKX19LHQud3JpdGVSdGNwRmI9ZnVuY3Rpb24oZSl7bGV0IHQ9XCJcIixyPWUucGF5bG9hZFR5cGU7cmV0dXJuIHZvaWQgMCE9PWUucHJlZmVycmVkUGF5bG9hZFR5cGUmJihyPWUucHJlZmVycmVkUGF5bG9hZFR5cGUpLGUucnRjcEZlZWRiYWNrJiZlLnJ0Y3BGZWVkYmFjay5sZW5ndGgmJmUucnRjcEZlZWRiYWNrLmZvckVhY2goKGU9Pnt0Kz1cImE9cnRjcC1mYjpcIityK1wiIFwiK2UudHlwZSsoZS5wYXJhbWV0ZXImJmUucGFyYW1ldGVyLmxlbmd0aD9cIiBcIitlLnBhcmFtZXRlcjpcIlwiKStcIlxcclxcblwifSkpLHR9LHQucGFyc2VTc3JjTWVkaWE9ZnVuY3Rpb24oZSl7Y29uc3QgdD1lLmluZGV4T2YoXCIgXCIpLHI9e3NzcmM6cGFyc2VJbnQoZS5zdWJzdHJpbmcoNyx0KSwxMCl9LG49ZS5pbmRleE9mKFwiOlwiLHQpO3JldHVybiBuPi0xPyhyLmF0dHJpYnV0ZT1lLnN1YnN0cmluZyh0KzEsbiksci52YWx1ZT1lLnN1YnN0cmluZyhuKzEpKTpyLmF0dHJpYnV0ZT1lLnN1YnN0cmluZyh0KzEpLHJ9LHQucGFyc2VTc3JjR3JvdXA9ZnVuY3Rpb24oZSl7Y29uc3QgdD1lLnN1YnN0cmluZygxMykuc3BsaXQoXCIgXCIpO3JldHVybntzZW1hbnRpY3M6dC5zaGlmdCgpLHNzcmNzOnQubWFwKChlPT5wYXJzZUludChlLDEwKSkpfX0sdC5nZXRNaWQ9ZnVuY3Rpb24oZSl7Y29uc3Qgcj10Lm1hdGNoUHJlZml4KGUsXCJhPW1pZDpcIilbMF07aWYocilyZXR1cm4gci5zdWJzdHJpbmcoNil9LHQucGFyc2VGaW5nZXJwcmludD1mdW5jdGlvbihlKXtjb25zdCB0PWUuc3Vic3RyaW5nKDE0KS5zcGxpdChcIiBcIik7cmV0dXJue2FsZ29yaXRobTp0WzBdLnRvTG93ZXJDYXNlKCksdmFsdWU6dFsxXS50b1VwcGVyQ2FzZSgpfX0sdC5nZXREdGxzUGFyYW1ldGVycz1mdW5jdGlvbihlLHIpe3JldHVybntyb2xlOlwiYXV0b1wiLGZpbmdlcnByaW50czp0Lm1hdGNoUHJlZml4KGUrcixcImE9ZmluZ2VycHJpbnQ6XCIpLm1hcCh0LnBhcnNlRmluZ2VycHJpbnQpfX0sdC53cml0ZUR0bHNQYXJhbWV0ZXJzPWZ1bmN0aW9uKGUsdCl7bGV0IHI9XCJhPXNldHVwOlwiK3QrXCJcXHJcXG5cIjtyZXR1cm4gZS5maW5nZXJwcmludHMuZm9yRWFjaCgoZT0+e3IrPVwiYT1maW5nZXJwcmludDpcIitlLmFsZ29yaXRobStcIiBcIitlLnZhbHVlK1wiXFxyXFxuXCJ9KSkscn0sdC5wYXJzZUNyeXB0b0xpbmU9ZnVuY3Rpb24oZSl7Y29uc3QgdD1lLnN1YnN0cmluZyg5KS5zcGxpdChcIiBcIik7cmV0dXJue3RhZzpwYXJzZUludCh0WzBdLDEwKSxjcnlwdG9TdWl0ZTp0WzFdLGtleVBhcmFtczp0WzJdLHNlc3Npb25QYXJhbXM6dC5zbGljZSgzKX19LHQud3JpdGVDcnlwdG9MaW5lPWZ1bmN0aW9uKGUpe3JldHVyblwiYT1jcnlwdG86XCIrZS50YWcrXCIgXCIrZS5jcnlwdG9TdWl0ZStcIiBcIisoXCJvYmplY3RcIj09dHlwZW9mIGUua2V5UGFyYW1zP3Qud3JpdGVDcnlwdG9LZXlQYXJhbXMoZS5rZXlQYXJhbXMpOmUua2V5UGFyYW1zKSsoZS5zZXNzaW9uUGFyYW1zP1wiIFwiK2Uuc2Vzc2lvblBhcmFtcy5qb2luKFwiIFwiKTpcIlwiKStcIlxcclxcblwifSx0LnBhcnNlQ3J5cHRvS2V5UGFyYW1zPWZ1bmN0aW9uKGUpe2lmKDAhPT1lLmluZGV4T2YoXCJpbmxpbmU6XCIpKXJldHVybiBudWxsO2NvbnN0IHQ9ZS5zdWJzdHJpbmcoNykuc3BsaXQoXCJ8XCIpO3JldHVybntrZXlNZXRob2Q6XCJpbmxpbmVcIixrZXlTYWx0OnRbMF0sbGlmZVRpbWU6dFsxXSxta2lWYWx1ZTp0WzJdP3RbMl0uc3BsaXQoXCI6XCIpWzBdOnZvaWQgMCxta2lMZW5ndGg6dFsyXT90WzJdLnNwbGl0KFwiOlwiKVsxXTp2b2lkIDB9fSx0LndyaXRlQ3J5cHRvS2V5UGFyYW1zPWZ1bmN0aW9uKGUpe3JldHVybiBlLmtleU1ldGhvZCtcIjpcIitlLmtleVNhbHQrKGUubGlmZVRpbWU/XCJ8XCIrZS5saWZlVGltZTpcIlwiKSsoZS5ta2lWYWx1ZSYmZS5ta2lMZW5ndGg/XCJ8XCIrZS5ta2lWYWx1ZStcIjpcIitlLm1raUxlbmd0aDpcIlwiKX0sdC5nZXRDcnlwdG9QYXJhbWV0ZXJzPWZ1bmN0aW9uKGUscil7cmV0dXJuIHQubWF0Y2hQcmVmaXgoZStyLFwiYT1jcnlwdG86XCIpLm1hcCh0LnBhcnNlQ3J5cHRvTGluZSl9LHQuZ2V0SWNlUGFyYW1ldGVycz1mdW5jdGlvbihlLHIpe2NvbnN0IG49dC5tYXRjaFByZWZpeChlK3IsXCJhPWljZS11ZnJhZzpcIilbMF0saT10Lm1hdGNoUHJlZml4KGUrcixcImE9aWNlLXB3ZDpcIilbMF07cmV0dXJuIG4mJmk/e3VzZXJuYW1lRnJhZ21lbnQ6bi5zdWJzdHJpbmcoMTIpLHBhc3N3b3JkOmkuc3Vic3RyaW5nKDEwKX06bnVsbH0sdC53cml0ZUljZVBhcmFtZXRlcnM9ZnVuY3Rpb24oZSl7bGV0IHQ9XCJhPWljZS11ZnJhZzpcIitlLnVzZXJuYW1lRnJhZ21lbnQrXCJcXHJcXG5hPWljZS1wd2Q6XCIrZS5wYXNzd29yZCtcIlxcclxcblwiO3JldHVybiBlLmljZUxpdGUmJih0Kz1cImE9aWNlLWxpdGVcXHJcXG5cIiksdH0sdC5wYXJzZVJ0cFBhcmFtZXRlcnM9ZnVuY3Rpb24oZSl7Y29uc3Qgcj17Y29kZWNzOltdLGhlYWRlckV4dGVuc2lvbnM6W10sZmVjTWVjaGFuaXNtczpbXSxydGNwOltdfSxuPXQuc3BsaXRMaW5lcyhlKVswXS5zcGxpdChcIiBcIik7ci5wcm9maWxlPW5bMl07Zm9yKGxldCBpPTM7aTxuLmxlbmd0aDtpKyspe2NvbnN0IHM9bltpXSxhPXQubWF0Y2hQcmVmaXgoZSxcImE9cnRwbWFwOlwiK3MrXCIgXCIpWzBdO2lmKGEpe2NvbnN0IG49dC5wYXJzZVJ0cE1hcChhKSxpPXQubWF0Y2hQcmVmaXgoZSxcImE9Zm10cDpcIitzK1wiIFwiKTtzd2l0Y2gobi5wYXJhbWV0ZXJzPWkubGVuZ3RoP3QucGFyc2VGbXRwKGlbMF0pOnt9LG4ucnRjcEZlZWRiYWNrPXQubWF0Y2hQcmVmaXgoZSxcImE9cnRjcC1mYjpcIitzK1wiIFwiKS5tYXAodC5wYXJzZVJ0Y3BGYiksci5jb2RlY3MucHVzaChuKSxuLm5hbWUudG9VcHBlckNhc2UoKSl7Y2FzZVwiUkVEXCI6Y2FzZVwiVUxQRkVDXCI6ci5mZWNNZWNoYW5pc21zLnB1c2gobi5uYW1lLnRvVXBwZXJDYXNlKCkpfX19dC5tYXRjaFByZWZpeChlLFwiYT1leHRtYXA6XCIpLmZvckVhY2goKGU9PntyLmhlYWRlckV4dGVuc2lvbnMucHVzaCh0LnBhcnNlRXh0bWFwKGUpKX0pKTtjb25zdCBpPXQubWF0Y2hQcmVmaXgoZSxcImE9cnRjcC1mYjoqIFwiKS5tYXAodC5wYXJzZVJ0Y3BGYik7cmV0dXJuIHIuY29kZWNzLmZvckVhY2goKGU9PntpLmZvckVhY2goKHQ9PntlLnJ0Y3BGZWVkYmFjay5maW5kKChlPT5lLnR5cGU9PT10LnR5cGUmJmUucGFyYW1ldGVyPT09dC5wYXJhbWV0ZXIpKXx8ZS5ydGNwRmVlZGJhY2sucHVzaCh0KX0pKX0pKSxyfSx0LndyaXRlUnRwRGVzY3JpcHRpb249ZnVuY3Rpb24oZSxyKXtsZXQgbj1cIlwiO24rPVwibT1cIitlK1wiIFwiLG4rPXIuY29kZWNzLmxlbmd0aD4wP1wiOVwiOlwiMFwiLG4rPVwiIFwiKyhyLnByb2ZpbGV8fFwiVURQL1RMUy9SVFAvU0FWUEZcIikrXCIgXCIsbis9ci5jb2RlY3MubWFwKChlPT52b2lkIDAhPT1lLnByZWZlcnJlZFBheWxvYWRUeXBlP2UucHJlZmVycmVkUGF5bG9hZFR5cGU6ZS5wYXlsb2FkVHlwZSkpLmpvaW4oXCIgXCIpK1wiXFxyXFxuXCIsbis9XCJjPUlOIElQNCAwLjAuMC4wXFxyXFxuXCIsbis9XCJhPXJ0Y3A6OSBJTiBJUDQgMC4wLjAuMFxcclxcblwiLHIuY29kZWNzLmZvckVhY2goKGU9PntuKz10LndyaXRlUnRwTWFwKGUpLG4rPXQud3JpdGVGbXRwKGUpLG4rPXQud3JpdGVSdGNwRmIoZSl9KSk7bGV0IGk9MDtyZXR1cm4gci5jb2RlY3MuZm9yRWFjaCgoZT0+e2UubWF4cHRpbWU+aSYmKGk9ZS5tYXhwdGltZSl9KSksaT4wJiYobis9XCJhPW1heHB0aW1lOlwiK2krXCJcXHJcXG5cIiksci5oZWFkZXJFeHRlbnNpb25zJiZyLmhlYWRlckV4dGVuc2lvbnMuZm9yRWFjaCgoZT0+e24rPXQud3JpdGVFeHRtYXAoZSl9KSksbn0sdC5wYXJzZVJ0cEVuY29kaW5nUGFyYW1ldGVycz1mdW5jdGlvbihlKXtjb25zdCByPVtdLG49dC5wYXJzZVJ0cFBhcmFtZXRlcnMoZSksaT0tMSE9PW4uZmVjTWVjaGFuaXNtcy5pbmRleE9mKFwiUkVEXCIpLHM9LTEhPT1uLmZlY01lY2hhbmlzbXMuaW5kZXhPZihcIlVMUEZFQ1wiKSxhPXQubWF0Y2hQcmVmaXgoZSxcImE9c3NyYzpcIikubWFwKChlPT50LnBhcnNlU3NyY01lZGlhKGUpKSkuZmlsdGVyKChlPT5cImNuYW1lXCI9PT1lLmF0dHJpYnV0ZSkpLG89YS5sZW5ndGg+MCYmYVswXS5zc3JjO2xldCBjO2NvbnN0IGQ9dC5tYXRjaFByZWZpeChlLFwiYT1zc3JjLWdyb3VwOkZJRFwiKS5tYXAoKGU9PmUuc3Vic3RyaW5nKDE3KS5zcGxpdChcIiBcIikubWFwKChlPT5wYXJzZUludChlLDEwKSkpKSk7ZC5sZW5ndGg+MCYmZFswXS5sZW5ndGg+MSYmZFswXVswXT09PW8mJihjPWRbMF1bMV0pLG4uY29kZWNzLmZvckVhY2goKGU9PntpZihcIlJUWFwiPT09ZS5uYW1lLnRvVXBwZXJDYXNlKCkmJmUucGFyYW1ldGVycy5hcHQpe2xldCB0PXtzc3JjOm8sY29kZWNQYXlsb2FkVHlwZTpwYXJzZUludChlLnBhcmFtZXRlcnMuYXB0LDEwKX07byYmYyYmKHQucnR4PXtzc3JjOmN9KSxyLnB1c2godCksaSYmKHQ9SlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0KSksdC5mZWM9e3NzcmM6byxtZWNoYW5pc206cz9cInJlZCt1bHBmZWNcIjpcInJlZFwifSxyLnB1c2godCkpfX0pKSwwPT09ci5sZW5ndGgmJm8mJnIucHVzaCh7c3NyYzpvfSk7bGV0IGw9dC5tYXRjaFByZWZpeChlLFwiYj1cIik7cmV0dXJuIGwubGVuZ3RoJiYobD0wPT09bFswXS5pbmRleE9mKFwiYj1USUFTOlwiKT9wYXJzZUludChsWzBdLnN1YnN0cmluZyg3KSwxMCk6MD09PWxbMF0uaW5kZXhPZihcImI9QVM6XCIpPzFlMypwYXJzZUludChsWzBdLnN1YnN0cmluZyg1KSwxMCkqLjk1LTE2ZTM6dm9pZCAwLHIuZm9yRWFjaCgoZT0+e2UubWF4Qml0cmF0ZT1sfSkpKSxyfSx0LnBhcnNlUnRjcFBhcmFtZXRlcnM9ZnVuY3Rpb24oZSl7Y29uc3Qgcj17fSxuPXQubWF0Y2hQcmVmaXgoZSxcImE9c3NyYzpcIikubWFwKChlPT50LnBhcnNlU3NyY01lZGlhKGUpKSkuZmlsdGVyKChlPT5cImNuYW1lXCI9PT1lLmF0dHJpYnV0ZSkpWzBdO24mJihyLmNuYW1lPW4udmFsdWUsci5zc3JjPW4uc3NyYyk7Y29uc3QgaT10Lm1hdGNoUHJlZml4KGUsXCJhPXJ0Y3AtcnNpemVcIik7ci5yZWR1Y2VkU2l6ZT1pLmxlbmd0aD4wLHIuY29tcG91bmQ9MD09PWkubGVuZ3RoO2NvbnN0IHM9dC5tYXRjaFByZWZpeChlLFwiYT1ydGNwLW11eFwiKTtyZXR1cm4gci5tdXg9cy5sZW5ndGg+MCxyfSx0LndyaXRlUnRjcFBhcmFtZXRlcnM9ZnVuY3Rpb24oZSl7bGV0IHQ9XCJcIjtyZXR1cm4gZS5yZWR1Y2VkU2l6ZSYmKHQrPVwiYT1ydGNwLXJzaXplXFxyXFxuXCIpLGUubXV4JiYodCs9XCJhPXJ0Y3AtbXV4XFxyXFxuXCIpLHZvaWQgMCE9PWUuc3NyYyYmZS5jbmFtZSYmKHQrPVwiYT1zc3JjOlwiK2Uuc3NyYytcIiBjbmFtZTpcIitlLmNuYW1lK1wiXFxyXFxuXCIpLHR9LHQucGFyc2VNc2lkPWZ1bmN0aW9uKGUpe2xldCByO2NvbnN0IG49dC5tYXRjaFByZWZpeChlLFwiYT1tc2lkOlwiKTtpZigxPT09bi5sZW5ndGgpcmV0dXJuIHI9blswXS5zdWJzdHJpbmcoNykuc3BsaXQoXCIgXCIpLHtzdHJlYW06clswXSx0cmFjazpyWzFdfTtjb25zdCBpPXQubWF0Y2hQcmVmaXgoZSxcImE9c3NyYzpcIikubWFwKChlPT50LnBhcnNlU3NyY01lZGlhKGUpKSkuZmlsdGVyKChlPT5cIm1zaWRcIj09PWUuYXR0cmlidXRlKSk7cmV0dXJuIGkubGVuZ3RoPjA/KHI9aVswXS52YWx1ZS5zcGxpdChcIiBcIikse3N0cmVhbTpyWzBdLHRyYWNrOnJbMV19KTp2b2lkIDB9LHQucGFyc2VTY3RwRGVzY3JpcHRpb249ZnVuY3Rpb24oZSl7Y29uc3Qgcj10LnBhcnNlTUxpbmUoZSksbj10Lm1hdGNoUHJlZml4KGUsXCJhPW1heC1tZXNzYWdlLXNpemU6XCIpO2xldCBpO24ubGVuZ3RoPjAmJihpPXBhcnNlSW50KG5bMF0uc3Vic3RyaW5nKDE5KSwxMCkpLGlzTmFOKGkpJiYoaT02NTUzNik7Y29uc3Qgcz10Lm1hdGNoUHJlZml4KGUsXCJhPXNjdHAtcG9ydDpcIik7aWYocy5sZW5ndGg+MClyZXR1cm57cG9ydDpwYXJzZUludChzWzBdLnN1YnN0cmluZygxMiksMTApLHByb3RvY29sOnIuZm10LG1heE1lc3NhZ2VTaXplOml9O2NvbnN0IGE9dC5tYXRjaFByZWZpeChlLFwiYT1zY3RwbWFwOlwiKTtpZihhLmxlbmd0aD4wKXtjb25zdCBlPWFbMF0uc3Vic3RyaW5nKDEwKS5zcGxpdChcIiBcIik7cmV0dXJue3BvcnQ6cGFyc2VJbnQoZVswXSwxMCkscHJvdG9jb2w6ZVsxXSxtYXhNZXNzYWdlU2l6ZTppfX19LHQud3JpdGVTY3RwRGVzY3JpcHRpb249ZnVuY3Rpb24oZSx0KXtsZXQgcj1bXTtyZXR1cm4gcj1cIkRUTFMvU0NUUFwiIT09ZS5wcm90b2NvbD9bXCJtPVwiK2Uua2luZCtcIiA5IFwiK2UucHJvdG9jb2wrXCIgXCIrdC5wcm90b2NvbCtcIlxcclxcblwiLFwiYz1JTiBJUDQgMC4wLjAuMFxcclxcblwiLFwiYT1zY3RwLXBvcnQ6XCIrdC5wb3J0K1wiXFxyXFxuXCJdOltcIm09XCIrZS5raW5kK1wiIDkgXCIrZS5wcm90b2NvbCtcIiBcIit0LnBvcnQrXCJcXHJcXG5cIixcImM9SU4gSVA0IDAuMC4wLjBcXHJcXG5cIixcImE9c2N0cG1hcDpcIit0LnBvcnQrXCIgXCIrdC5wcm90b2NvbCtcIiA2NTUzNVxcclxcblwiXSx2b2lkIDAhPT10Lm1heE1lc3NhZ2VTaXplJiZyLnB1c2goXCJhPW1heC1tZXNzYWdlLXNpemU6XCIrdC5tYXhNZXNzYWdlU2l6ZStcIlxcclxcblwiKSxyLmpvaW4oXCJcIil9LHQuZ2VuZXJhdGVTZXNzaW9uSWQ9ZnVuY3Rpb24oKXtyZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygpLnN1YnN0cigyLDIyKX0sdC53cml0ZVNlc3Npb25Cb2lsZXJwbGF0ZT1mdW5jdGlvbihlLHIsbil7bGV0IGk7Y29uc3Qgcz12b2lkIDAhPT1yP3I6MjtpPWV8fHQuZ2VuZXJhdGVTZXNzaW9uSWQoKTtyZXR1cm5cInY9MFxcclxcbm89XCIrKG58fFwidGhpc2lzYWRhcHRlcm9ydGNcIikrXCIgXCIraStcIiBcIitzK1wiIElOIElQNCAxMjcuMC4wLjFcXHJcXG5zPS1cXHJcXG50PTAgMFxcclxcblwifSx0LmdldERpcmVjdGlvbj1mdW5jdGlvbihlLHIpe2NvbnN0IG49dC5zcGxpdExpbmVzKGUpO2ZvcihsZXQgZT0wO2U8bi5sZW5ndGg7ZSsrKXN3aXRjaChuW2VdKXtjYXNlXCJhPXNlbmRyZWN2XCI6Y2FzZVwiYT1zZW5kb25seVwiOmNhc2VcImE9cmVjdm9ubHlcIjpjYXNlXCJhPWluYWN0aXZlXCI6cmV0dXJuIG5bZV0uc3Vic3RyaW5nKDIpfXJldHVybiByP3QuZ2V0RGlyZWN0aW9uKHIpOlwic2VuZHJlY3ZcIn0sdC5nZXRLaW5kPWZ1bmN0aW9uKGUpe3JldHVybiB0LnNwbGl0TGluZXMoZSlbMF0uc3BsaXQoXCIgXCIpWzBdLnN1YnN0cmluZygyKX0sdC5pc1JlamVjdGVkPWZ1bmN0aW9uKGUpe3JldHVyblwiMFwiPT09ZS5zcGxpdChcIiBcIiwyKVsxXX0sdC5wYXJzZU1MaW5lPWZ1bmN0aW9uKGUpe2NvbnN0IHI9dC5zcGxpdExpbmVzKGUpWzBdLnN1YnN0cmluZygyKS5zcGxpdChcIiBcIik7cmV0dXJue2tpbmQ6clswXSxwb3J0OnBhcnNlSW50KHJbMV0sMTApLHByb3RvY29sOnJbMl0sZm10OnIuc2xpY2UoMykuam9pbihcIiBcIil9fSx0LnBhcnNlT0xpbmU9ZnVuY3Rpb24oZSl7Y29uc3Qgcj10Lm1hdGNoUHJlZml4KGUsXCJvPVwiKVswXS5zdWJzdHJpbmcoMikuc3BsaXQoXCIgXCIpO3JldHVybnt1c2VybmFtZTpyWzBdLHNlc3Npb25JZDpyWzFdLHNlc3Npb25WZXJzaW9uOnBhcnNlSW50KHJbMl0sMTApLG5ldFR5cGU6clszXSxhZGRyZXNzVHlwZTpyWzRdLGFkZHJlc3M6cls1XX19LHQuaXNWYWxpZFNEUD1mdW5jdGlvbihlKXtpZihcInN0cmluZ1wiIT10eXBlb2YgZXx8MD09PWUubGVuZ3RoKXJldHVybiExO2NvbnN0IHI9dC5zcGxpdExpbmVzKGUpO2ZvcihsZXQgZT0wO2U8ci5sZW5ndGg7ZSsrKWlmKHJbZV0ubGVuZ3RoPDJ8fFwiPVwiIT09cltlXS5jaGFyQXQoMSkpcmV0dXJuITE7cmV0dXJuITB9LGUuZXhwb3J0cz10fSw4NjooZSx0LHIpPT57XCJ1c2Ugc3RyaWN0XCI7dC5aPXZvaWQgMDt2YXIgbj0oMCxyKDMzOCkuYWRhcHRlckZhY3RvcnkpKHt3aW5kb3c6XCJ1bmRlZmluZWRcIj09dHlwZW9mIHdpbmRvdz92b2lkIDA6d2luZG93fSk7dC5aPW59LDMzODooZSx0LHIpPT57XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbihlKXtyZXR1cm4gbj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24oZSl7cmV0dXJuIHR5cGVvZiBlfTpmdW5jdGlvbihlKXtyZXR1cm4gZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZlLmNvbnN0cnVjdG9yPT09U3ltYm9sJiZlIT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiBlfSxuKGUpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuYWRhcHRlckZhY3Rvcnk9ZnVuY3Rpb24oKXt2YXIgZT0oYXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOnt9KS53aW5kb3csdD1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06e3NoaW1DaHJvbWU6ITAsc2hpbUZpcmVmb3g6ITAsc2hpbVNhZmFyaTohMH0scj1pLmxvZyxuPWkuZGV0ZWN0QnJvd3NlcihlKSxsPXticm93c2VyRGV0YWlsczpuLGNvbW1vblNoaW06YyxleHRyYWN0VmVyc2lvbjppLmV4dHJhY3RWZXJzaW9uLGRpc2FibGVMb2c6aS5kaXNhYmxlTG9nLGRpc2FibGVXYXJuaW5nczppLmRpc2FibGVXYXJuaW5ncyxzZHA6ZH07c3dpdGNoKG4uYnJvd3Nlcil7Y2FzZVwiY2hyb21lXCI6aWYoIXN8fCFzLnNoaW1QZWVyQ29ubmVjdGlvbnx8IXQuc2hpbUNocm9tZSlyZXR1cm4gcihcIkNocm9tZSBzaGltIGlzIG5vdCBpbmNsdWRlZCBpbiB0aGlzIGFkYXB0ZXIgcmVsZWFzZS5cIiksbDtpZihudWxsPT09bi52ZXJzaW9uKXJldHVybiByKFwiQ2hyb21lIHNoaW0gY2FuIG5vdCBkZXRlcm1pbmUgdmVyc2lvbiwgbm90IHNoaW1taW5nLlwiKSxsO3IoXCJhZGFwdGVyLmpzIHNoaW1taW5nIGNocm9tZS5cIiksbC5icm93c2VyU2hpbT1zLGMuc2hpbUFkZEljZUNhbmRpZGF0ZU51bGxPckVtcHR5KGUsbiksYy5zaGltUGFyYW1ldGVybGVzc1NldExvY2FsRGVzY3JpcHRpb24oZSxuKSxzLnNoaW1HZXRVc2VyTWVkaWEoZSxuKSxzLnNoaW1NZWRpYVN0cmVhbShlLG4pLHMuc2hpbVBlZXJDb25uZWN0aW9uKGUsbikscy5zaGltT25UcmFjayhlLG4pLHMuc2hpbUFkZFRyYWNrUmVtb3ZlVHJhY2soZSxuKSxzLnNoaW1HZXRTZW5kZXJzV2l0aER0bWYoZSxuKSxzLnNoaW1HZXRTdGF0cyhlLG4pLHMuc2hpbVNlbmRlclJlY2VpdmVyR2V0U3RhdHMoZSxuKSxzLmZpeE5lZ290aWF0aW9uTmVlZGVkKGUsbiksYy5zaGltUlRDSWNlQ2FuZGlkYXRlKGUsbiksYy5zaGltUlRDSWNlQ2FuZGlkYXRlUmVsYXlQcm90b2NvbChlLG4pLGMuc2hpbUNvbm5lY3Rpb25TdGF0ZShlLG4pLGMuc2hpbU1heE1lc3NhZ2VTaXplKGUsbiksYy5zaGltU2VuZFRocm93VHlwZUVycm9yKGUsbiksYy5yZW1vdmVFeHRtYXBBbGxvd01peGVkKGUsbik7YnJlYWs7Y2FzZVwiZmlyZWZveFwiOmlmKCFhfHwhYS5zaGltUGVlckNvbm5lY3Rpb258fCF0LnNoaW1GaXJlZm94KXJldHVybiByKFwiRmlyZWZveCBzaGltIGlzIG5vdCBpbmNsdWRlZCBpbiB0aGlzIGFkYXB0ZXIgcmVsZWFzZS5cIiksbDtyKFwiYWRhcHRlci5qcyBzaGltbWluZyBmaXJlZm94LlwiKSxsLmJyb3dzZXJTaGltPWEsYy5zaGltQWRkSWNlQ2FuZGlkYXRlTnVsbE9yRW1wdHkoZSxuKSxjLnNoaW1QYXJhbWV0ZXJsZXNzU2V0TG9jYWxEZXNjcmlwdGlvbihlLG4pLGEuc2hpbUdldFVzZXJNZWRpYShlLG4pLGEuc2hpbVBlZXJDb25uZWN0aW9uKGUsbiksYS5zaGltT25UcmFjayhlLG4pLGEuc2hpbVJlbW92ZVN0cmVhbShlLG4pLGEuc2hpbVNlbmRlckdldFN0YXRzKGUsbiksYS5zaGltUmVjZWl2ZXJHZXRTdGF0cyhlLG4pLGEuc2hpbVJUQ0RhdGFDaGFubmVsKGUsbiksYS5zaGltQWRkVHJhbnNjZWl2ZXIoZSxuKSxhLnNoaW1HZXRQYXJhbWV0ZXJzKGUsbiksYS5zaGltQ3JlYXRlT2ZmZXIoZSxuKSxhLnNoaW1DcmVhdGVBbnN3ZXIoZSxuKSxjLnNoaW1SVENJY2VDYW5kaWRhdGUoZSxuKSxjLnNoaW1Db25uZWN0aW9uU3RhdGUoZSxuKSxjLnNoaW1NYXhNZXNzYWdlU2l6ZShlLG4pLGMuc2hpbVNlbmRUaHJvd1R5cGVFcnJvcihlLG4pO2JyZWFrO2Nhc2VcInNhZmFyaVwiOmlmKCFvfHwhdC5zaGltU2FmYXJpKXJldHVybiByKFwiU2FmYXJpIHNoaW0gaXMgbm90IGluY2x1ZGVkIGluIHRoaXMgYWRhcHRlciByZWxlYXNlLlwiKSxsO3IoXCJhZGFwdGVyLmpzIHNoaW1taW5nIHNhZmFyaS5cIiksbC5icm93c2VyU2hpbT1vLGMuc2hpbUFkZEljZUNhbmRpZGF0ZU51bGxPckVtcHR5KGUsbiksYy5zaGltUGFyYW1ldGVybGVzc1NldExvY2FsRGVzY3JpcHRpb24oZSxuKSxvLnNoaW1SVENJY2VTZXJ2ZXJVcmxzKGUsbiksby5zaGltQ3JlYXRlT2ZmZXJMZWdhY3koZSxuKSxvLnNoaW1DYWxsYmFja3NBUEkoZSxuKSxvLnNoaW1Mb2NhbFN0cmVhbXNBUEkoZSxuKSxvLnNoaW1SZW1vdGVTdHJlYW1zQVBJKGUsbiksby5zaGltVHJhY2tFdmVudFRyYW5zY2VpdmVyKGUsbiksby5zaGltR2V0VXNlck1lZGlhKGUsbiksby5zaGltQXVkaW9Db250ZXh0KGUsbiksYy5zaGltUlRDSWNlQ2FuZGlkYXRlKGUsbiksYy5zaGltUlRDSWNlQ2FuZGlkYXRlUmVsYXlQcm90b2NvbChlLG4pLGMuc2hpbU1heE1lc3NhZ2VTaXplKGUsbiksYy5zaGltU2VuZFRocm93VHlwZUVycm9yKGUsbiksYy5yZW1vdmVFeHRtYXBBbGxvd01peGVkKGUsbik7YnJlYWs7ZGVmYXVsdDpyKFwiVW5zdXBwb3J0ZWQgYnJvd3NlciFcIil9cmV0dXJuIGx9O3ZhciBpPXAocigyODgpKSxzPXAocigzMCkpLGE9cChyKDMxMSkpLG89cChyKDU0MCkpLGM9cChyKDQwMSkpLGQ9cChyKDUzOSkpO2Z1bmN0aW9uIGwoZSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgV2Vha01hcClyZXR1cm4gbnVsbDt2YXIgdD1uZXcgV2Vha01hcCxyPW5ldyBXZWFrTWFwO3JldHVybihsPWZ1bmN0aW9uKGUpe3JldHVybiBlP3I6dH0pKGUpfWZ1bmN0aW9uIHAoZSx0KXtpZighdCYmZSYmZS5fX2VzTW9kdWxlKXJldHVybiBlO2lmKG51bGw9PT1lfHxcIm9iamVjdFwiIT09bihlKSYmXCJmdW5jdGlvblwiIT10eXBlb2YgZSlyZXR1cm57ZGVmYXVsdDplfTt2YXIgcj1sKHQpO2lmKHImJnIuaGFzKGUpKXJldHVybiByLmdldChlKTt2YXIgaT17fSxzPU9iamVjdC5kZWZpbmVQcm9wZXJ0eSYmT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtmb3IodmFyIGEgaW4gZSlpZihcImRlZmF1bHRcIiE9PWEmJk9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLGEpKXt2YXIgbz1zP09iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSxhKTpudWxsO28mJihvLmdldHx8by5zZXQpP09iamVjdC5kZWZpbmVQcm9wZXJ0eShpLGEsbyk6aVthXT1lW2FdfXJldHVybiBpLmRlZmF1bHQ9ZSxyJiZyLnNldChlLGkpLGl9fSwzMDooZSx0LHIpPT57XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5maXhOZWdvdGlhdGlvbk5lZWRlZD1mdW5jdGlvbihlLHQpe24ud3JhcFBlZXJDb25uZWN0aW9uRXZlbnQoZSxcIm5lZ290aWF0aW9ubmVlZGVkXCIsKGZ1bmN0aW9uKGUpe3ZhciByPWUudGFyZ2V0O2lmKCEodC52ZXJzaW9uPDcyfHxyLmdldENvbmZpZ3VyYXRpb24mJlwicGxhbi1iXCI9PT1yLmdldENvbmZpZ3VyYXRpb24oKS5zZHBTZW1hbnRpY3MpfHxcInN0YWJsZVwiPT09ci5zaWduYWxpbmdTdGF0ZSlyZXR1cm4gZX0pKX0sdC5zaGltQWRkVHJhY2tSZW1vdmVUcmFjaz1mdW5jdGlvbihlLHQpe2lmKCFlLlJUQ1BlZXJDb25uZWN0aW9uKXJldHVybjtpZihlLlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRUcmFjayYmdC52ZXJzaW9uPj02NSlyZXR1cm4gZChlKTt2YXIgcj1lLlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5nZXRMb2NhbFN0cmVhbXM7ZS5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0TG9jYWxTdHJlYW1zPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PXIuYXBwbHkodGhpcyk7cmV0dXJuIHRoaXMuX3JldmVyc2VTdHJlYW1zPXRoaXMuX3JldmVyc2VTdHJlYW1zfHx7fSx0Lm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIGUuX3JldmVyc2VTdHJlYW1zW3QuaWRdfSkpfTt2YXIgbj1lLlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRTdHJlYW07ZS5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuYWRkU3RyZWFtPWZ1bmN0aW9uKHQpe3ZhciByPXRoaXM7aWYodGhpcy5fc3RyZWFtcz10aGlzLl9zdHJlYW1zfHx7fSx0aGlzLl9yZXZlcnNlU3RyZWFtcz10aGlzLl9yZXZlcnNlU3RyZWFtc3x8e30sdC5nZXRUcmFja3MoKS5mb3JFYWNoKChmdW5jdGlvbihlKXtpZihyLmdldFNlbmRlcnMoKS5maW5kKChmdW5jdGlvbih0KXtyZXR1cm4gdC50cmFjaz09PWV9KSkpdGhyb3cgbmV3IERPTUV4Y2VwdGlvbihcIlRyYWNrIGFscmVhZHkgZXhpc3RzLlwiLFwiSW52YWxpZEFjY2Vzc0Vycm9yXCIpfSkpLCF0aGlzLl9yZXZlcnNlU3RyZWFtc1t0LmlkXSl7dmFyIGk9bmV3IGUuTWVkaWFTdHJlYW0odC5nZXRUcmFja3MoKSk7dGhpcy5fc3RyZWFtc1t0LmlkXT1pLHRoaXMuX3JldmVyc2VTdHJlYW1zW2kuaWRdPXQsdD1pfW4uYXBwbHkodGhpcyxbdF0pfTt2YXIgaT1lLlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5yZW1vdmVTdHJlYW07ZnVuY3Rpb24gcyhlLHQpe3ZhciByPXQuc2RwO3JldHVybiBPYmplY3Qua2V5cyhlLl9yZXZlcnNlU3RyZWFtc3x8W10pLmZvckVhY2goKGZ1bmN0aW9uKHQpe3ZhciBuPWUuX3JldmVyc2VTdHJlYW1zW3RdLGk9ZS5fc3RyZWFtc1tuLmlkXTtyPXIucmVwbGFjZShuZXcgUmVnRXhwKGkuaWQsXCJnXCIpLG4uaWQpfSkpLG5ldyBSVENTZXNzaW9uRGVzY3JpcHRpb24oe3R5cGU6dC50eXBlLHNkcDpyfSl9ZS5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUucmVtb3ZlU3RyZWFtPWZ1bmN0aW9uKGUpe3RoaXMuX3N0cmVhbXM9dGhpcy5fc3RyZWFtc3x8e30sdGhpcy5fcmV2ZXJzZVN0cmVhbXM9dGhpcy5fcmV2ZXJzZVN0cmVhbXN8fHt9LGkuYXBwbHkodGhpcyxbdGhpcy5fc3RyZWFtc1tlLmlkXXx8ZV0pLGRlbGV0ZSB0aGlzLl9yZXZlcnNlU3RyZWFtc1t0aGlzLl9zdHJlYW1zW2UuaWRdP3RoaXMuX3N0cmVhbXNbZS5pZF0uaWQ6ZS5pZF0sZGVsZXRlIHRoaXMuX3N0cmVhbXNbZS5pZF19LGUuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmFkZFRyYWNrPWZ1bmN0aW9uKHQscil7dmFyIG49dGhpcztpZihcImNsb3NlZFwiPT09dGhpcy5zaWduYWxpbmdTdGF0ZSl0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKFwiVGhlIFJUQ1BlZXJDb25uZWN0aW9uJ3Mgc2lnbmFsaW5nU3RhdGUgaXMgJ2Nsb3NlZCcuXCIsXCJJbnZhbGlkU3RhdGVFcnJvclwiKTt2YXIgaT1bXS5zbGljZS5jYWxsKGFyZ3VtZW50cywxKTtpZigxIT09aS5sZW5ndGh8fCFpWzBdLmdldFRyYWNrcygpLmZpbmQoKGZ1bmN0aW9uKGUpe3JldHVybiBlPT09dH0pKSl0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKFwiVGhlIGFkYXB0ZXIuanMgYWRkVHJhY2sgcG9seWZpbGwgb25seSBzdXBwb3J0cyBhIHNpbmdsZSAgc3RyZWFtIHdoaWNoIGlzIGFzc29jaWF0ZWQgd2l0aCB0aGUgc3BlY2lmaWVkIHRyYWNrLlwiLFwiTm90U3VwcG9ydGVkRXJyb3JcIik7aWYodGhpcy5nZXRTZW5kZXJzKCkuZmluZCgoZnVuY3Rpb24oZSl7cmV0dXJuIGUudHJhY2s9PT10fSkpKXRocm93IG5ldyBET01FeGNlcHRpb24oXCJUcmFjayBhbHJlYWR5IGV4aXN0cy5cIixcIkludmFsaWRBY2Nlc3NFcnJvclwiKTt0aGlzLl9zdHJlYW1zPXRoaXMuX3N0cmVhbXN8fHt9LHRoaXMuX3JldmVyc2VTdHJlYW1zPXRoaXMuX3JldmVyc2VTdHJlYW1zfHx7fTt2YXIgcz10aGlzLl9zdHJlYW1zW3IuaWRdO2lmKHMpcy5hZGRUcmFjayh0KSxQcm9taXNlLnJlc29sdmUoKS50aGVuKChmdW5jdGlvbigpe24uZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoXCJuZWdvdGlhdGlvbm5lZWRlZFwiKSl9KSk7ZWxzZXt2YXIgYT1uZXcgZS5NZWRpYVN0cmVhbShbdF0pO3RoaXMuX3N0cmVhbXNbci5pZF09YSx0aGlzLl9yZXZlcnNlU3RyZWFtc1thLmlkXT1yLHRoaXMuYWRkU3RyZWFtKGEpfXJldHVybiB0aGlzLmdldFNlbmRlcnMoKS5maW5kKChmdW5jdGlvbihlKXtyZXR1cm4gZS50cmFjaz09PXR9KSl9LFtcImNyZWF0ZU9mZmVyXCIsXCJjcmVhdGVBbnN3ZXJcIl0uZm9yRWFjaCgoZnVuY3Rpb24odCl7dmFyIHI9ZS5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGVbdF0sbj1vKHt9LHQsKGZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PWFyZ3VtZW50cztyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCYmXCJmdW5jdGlvblwiPT10eXBlb2YgYXJndW1lbnRzWzBdP3IuYXBwbHkodGhpcyxbZnVuY3Rpb24ocil7dmFyIG49cyhlLHIpO3RbMF0uYXBwbHkobnVsbCxbbl0pfSxmdW5jdGlvbihlKXt0WzFdJiZ0WzFdLmFwcGx5KG51bGwsZSl9LGFyZ3VtZW50c1syXV0pOnIuYXBwbHkodGhpcyxhcmd1bWVudHMpLnRoZW4oKGZ1bmN0aW9uKHQpe3JldHVybiBzKGUsdCl9KSl9KSk7ZS5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGVbdF09blt0XX0pKTt2YXIgYT1lLlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5zZXRMb2NhbERlc2NyaXB0aW9uO2UuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLnNldExvY2FsRGVzY3JpcHRpb249ZnVuY3Rpb24oKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCYmYXJndW1lbnRzWzBdLnR5cGU/KGFyZ3VtZW50c1swXT0oZT10aGlzLHI9KHQ9YXJndW1lbnRzWzBdKS5zZHAsT2JqZWN0LmtleXMoZS5fcmV2ZXJzZVN0cmVhbXN8fFtdKS5mb3JFYWNoKChmdW5jdGlvbih0KXt2YXIgbj1lLl9yZXZlcnNlU3RyZWFtc1t0XSxpPWUuX3N0cmVhbXNbbi5pZF07cj1yLnJlcGxhY2UobmV3IFJlZ0V4cChuLmlkLFwiZ1wiKSxpLmlkKX0pKSxuZXcgUlRDU2Vzc2lvbkRlc2NyaXB0aW9uKHt0eXBlOnQudHlwZSxzZHA6cn0pKSxhLmFwcGx5KHRoaXMsYXJndW1lbnRzKSk6YS5hcHBseSh0aGlzLGFyZ3VtZW50cyk7dmFyIGUsdCxyfTt2YXIgYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLFwibG9jYWxEZXNjcmlwdGlvblwiKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUsXCJsb2NhbERlc2NyaXB0aW9uXCIse2dldDpmdW5jdGlvbigpe3ZhciBlPWMuZ2V0LmFwcGx5KHRoaXMpO3JldHVyblwiXCI9PT1lLnR5cGU/ZTpzKHRoaXMsZSl9fSksZS5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUucmVtb3ZlVHJhY2s9ZnVuY3Rpb24oZSl7dmFyIHQscj10aGlzO2lmKFwiY2xvc2VkXCI9PT10aGlzLnNpZ25hbGluZ1N0YXRlKXRocm93IG5ldyBET01FeGNlcHRpb24oXCJUaGUgUlRDUGVlckNvbm5lY3Rpb24ncyBzaWduYWxpbmdTdGF0ZSBpcyAnY2xvc2VkJy5cIixcIkludmFsaWRTdGF0ZUVycm9yXCIpO2lmKCFlLl9wYyl0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKFwiQXJndW1lbnQgMSBvZiBSVENQZWVyQ29ubmVjdGlvbi5yZW1vdmVUcmFjayBkb2VzIG5vdCBpbXBsZW1lbnQgaW50ZXJmYWNlIFJUQ1J0cFNlbmRlci5cIixcIlR5cGVFcnJvclwiKTtpZighKGUuX3BjPT09dGhpcykpdGhyb3cgbmV3IERPTUV4Y2VwdGlvbihcIlNlbmRlciB3YXMgbm90IGNyZWF0ZWQgYnkgdGhpcyBjb25uZWN0aW9uLlwiLFwiSW52YWxpZEFjY2Vzc0Vycm9yXCIpO3RoaXMuX3N0cmVhbXM9dGhpcy5fc3RyZWFtc3x8e30sT2JqZWN0LmtleXModGhpcy5fc3RyZWFtcykuZm9yRWFjaCgoZnVuY3Rpb24obil7ci5fc3RyZWFtc1tuXS5nZXRUcmFja3MoKS5maW5kKChmdW5jdGlvbih0KXtyZXR1cm4gZS50cmFjaz09PXR9KSkmJih0PXIuX3N0cmVhbXNbbl0pfSkpLHQmJigxPT09dC5nZXRUcmFja3MoKS5sZW5ndGg/dGhpcy5yZW1vdmVTdHJlYW0odGhpcy5fcmV2ZXJzZVN0cmVhbXNbdC5pZF0pOnQucmVtb3ZlVHJhY2soZS50cmFjayksdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChcIm5lZ290aWF0aW9ubmVlZGVkXCIpKSl9fSx0LnNoaW1BZGRUcmFja1JlbW92ZVRyYWNrV2l0aE5hdGl2ZT1kLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwic2hpbUdldERpc3BsYXlNZWRpYVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBzLnNoaW1HZXREaXNwbGF5TWVkaWF9fSksdC5zaGltR2V0U2VuZGVyc1dpdGhEdG1mPWZ1bmN0aW9uKGUpe2lmKFwib2JqZWN0XCI9PT1jKGUpJiZlLlJUQ1BlZXJDb25uZWN0aW9uJiYhKFwiZ2V0U2VuZGVyc1wiaW4gZS5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUpJiZcImNyZWF0ZURUTUZTZW5kZXJcImluIGUuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlKXt2YXIgdD1mdW5jdGlvbihlLHQpe3JldHVybnt0cmFjazp0LGdldCBkdG1mKCl7cmV0dXJuIHZvaWQgMD09PXRoaXMuX2R0bWYmJihcImF1ZGlvXCI9PT10LmtpbmQ/dGhpcy5fZHRtZj1lLmNyZWF0ZURUTUZTZW5kZXIodCk6dGhpcy5fZHRtZj1udWxsKSx0aGlzLl9kdG1mfSxfcGM6ZX19O2lmKCFlLlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5nZXRTZW5kZXJzKXtlLlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5nZXRTZW5kZXJzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3NlbmRlcnM9dGhpcy5fc2VuZGVyc3x8W10sdGhpcy5fc2VuZGVycy5zbGljZSgpfTt2YXIgcj1lLlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRUcmFjaztlLlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRUcmFjaz1mdW5jdGlvbihlLG4pe3ZhciBpPXIuYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybiBpfHwoaT10KHRoaXMsZSksdGhpcy5fc2VuZGVycy5wdXNoKGkpKSxpfTt2YXIgbj1lLlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5yZW1vdmVUcmFjaztlLlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5yZW1vdmVUcmFjaz1mdW5jdGlvbihlKXtuLmFwcGx5KHRoaXMsYXJndW1lbnRzKTt2YXIgdD10aGlzLl9zZW5kZXJzLmluZGV4T2YoZSk7LTEhPT10JiZ0aGlzLl9zZW5kZXJzLnNwbGljZSh0LDEpfX12YXIgaT1lLlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRTdHJlYW07ZS5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuYWRkU3RyZWFtPWZ1bmN0aW9uKGUpe3ZhciByPXRoaXM7dGhpcy5fc2VuZGVycz10aGlzLl9zZW5kZXJzfHxbXSxpLmFwcGx5KHRoaXMsW2VdKSxlLmdldFRyYWNrcygpLmZvckVhY2goKGZ1bmN0aW9uKGUpe3IuX3NlbmRlcnMucHVzaCh0KHIsZSkpfSkpfTt2YXIgcz1lLlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5yZW1vdmVTdHJlYW07ZS5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUucmVtb3ZlU3RyZWFtPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7dGhpcy5fc2VuZGVycz10aGlzLl9zZW5kZXJzfHxbXSxzLmFwcGx5KHRoaXMsW2VdKSxlLmdldFRyYWNrcygpLmZvckVhY2goKGZ1bmN0aW9uKGUpe3ZhciByPXQuX3NlbmRlcnMuZmluZCgoZnVuY3Rpb24odCl7cmV0dXJuIHQudHJhY2s9PT1lfSkpO3ImJnQuX3NlbmRlcnMuc3BsaWNlKHQuX3NlbmRlcnMuaW5kZXhPZihyKSwxKX0pKX19ZWxzZSBpZihcIm9iamVjdFwiPT09YyhlKSYmZS5SVENQZWVyQ29ubmVjdGlvbiYmXCJnZXRTZW5kZXJzXCJpbiBlLlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZSYmXCJjcmVhdGVEVE1GU2VuZGVyXCJpbiBlLlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZSYmZS5SVENSdHBTZW5kZXImJiEoXCJkdG1mXCJpbiBlLlJUQ1J0cFNlbmRlci5wcm90b3R5cGUpKXt2YXIgYT1lLlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5nZXRTZW5kZXJzO2UuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmdldFNlbmRlcnM9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9YS5hcHBseSh0aGlzLFtdKTtyZXR1cm4gdC5mb3JFYWNoKChmdW5jdGlvbih0KXtyZXR1cm4gdC5fcGM9ZX0pKSx0fSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5SVENSdHBTZW5kZXIucHJvdG90eXBlLFwiZHRtZlwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdm9pZCAwPT09dGhpcy5fZHRtZiYmKFwiYXVkaW9cIj09PXRoaXMudHJhY2sua2luZD90aGlzLl9kdG1mPXRoaXMuX3BjLmNyZWF0ZURUTUZTZW5kZXIodGhpcy50cmFjayk6dGhpcy5fZHRtZj1udWxsKSx0aGlzLl9kdG1mfX0pfX0sdC5zaGltR2V0U3RhdHM9ZnVuY3Rpb24oZSl7aWYoIWUuUlRDUGVlckNvbm5lY3Rpb24pcmV0dXJuO3ZhciB0PWUuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmdldFN0YXRzO2UuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmdldFN0YXRzPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcyxyPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyksbj1yWzBdLGk9clsxXSxzPXJbMl07aWYoYXJndW1lbnRzLmxlbmd0aD4wJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBuKXJldHVybiB0LmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZigwPT09dC5sZW5ndGgmJigwPT09YXJndW1lbnRzLmxlbmd0aHx8XCJmdW5jdGlvblwiIT10eXBlb2YgbikpcmV0dXJuIHQuYXBwbHkodGhpcyxbXSk7dmFyIGE9ZnVuY3Rpb24oZSl7dmFyIHQ9e307cmV0dXJuIGUucmVzdWx0KCkuZm9yRWFjaCgoZnVuY3Rpb24oZSl7dmFyIHI9e2lkOmUuaWQsdGltZXN0YW1wOmUudGltZXN0YW1wLHR5cGU6e2xvY2FsY2FuZGlkYXRlOlwibG9jYWwtY2FuZGlkYXRlXCIscmVtb3RlY2FuZGlkYXRlOlwicmVtb3RlLWNhbmRpZGF0ZVwifVtlLnR5cGVdfHxlLnR5cGV9O2UubmFtZXMoKS5mb3JFYWNoKChmdW5jdGlvbih0KXtyW3RdPWUuc3RhdCh0KX0pKSx0W3IuaWRdPXJ9KSksdH0sbz1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IE1hcChPYmplY3Qua2V5cyhlKS5tYXAoKGZ1bmN0aW9uKHQpe3JldHVyblt0LGVbdF1dfSkpKX07aWYoYXJndW1lbnRzLmxlbmd0aD49Mil7cmV0dXJuIHQuYXBwbHkodGhpcyxbZnVuY3Rpb24oZSl7aShvKGEoZSkpKX0sbl0pfXJldHVybiBuZXcgUHJvbWlzZSgoZnVuY3Rpb24ocixuKXt0LmFwcGx5KGUsW2Z1bmN0aW9uKGUpe3IobyhhKGUpKSl9LG5dKX0pKS50aGVuKGkscyl9fSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcInNoaW1HZXRVc2VyTWVkaWFcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gaS5zaGltR2V0VXNlck1lZGlhfX0pLHQuc2hpbU1lZGlhU3RyZWFtPWZ1bmN0aW9uKGUpe2UuTWVkaWFTdHJlYW09ZS5NZWRpYVN0cmVhbXx8ZS53ZWJraXRNZWRpYVN0cmVhbX0sdC5zaGltT25UcmFjaz1mdW5jdGlvbihlKXtpZihcIm9iamVjdFwiPT09YyhlKSYmZS5SVENQZWVyQ29ubmVjdGlvbiYmIShcIm9udHJhY2tcImluIGUuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlKSl7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLFwib250cmFja1wiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fb250cmFja30sc2V0OmZ1bmN0aW9uKGUpe3RoaXMuX29udHJhY2smJnRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRyYWNrXCIsdGhpcy5fb250cmFjayksdGhpcy5hZGRFdmVudExpc3RlbmVyKFwidHJhY2tcIix0aGlzLl9vbnRyYWNrPWUpfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pO3ZhciB0PWUuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLnNldFJlbW90ZURlc2NyaXB0aW9uO2UuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLnNldFJlbW90ZURlc2NyaXB0aW9uPWZ1bmN0aW9uKCl7dmFyIHI9dGhpcztyZXR1cm4gdGhpcy5fb250cmFja3BvbHl8fCh0aGlzLl9vbnRyYWNrcG9seT1mdW5jdGlvbih0KXt0LnN0cmVhbS5hZGRFdmVudExpc3RlbmVyKFwiYWRkdHJhY2tcIiwoZnVuY3Rpb24obil7dmFyIGk7aT1lLlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5nZXRSZWNlaXZlcnM/ci5nZXRSZWNlaXZlcnMoKS5maW5kKChmdW5jdGlvbihlKXtyZXR1cm4gZS50cmFjayYmZS50cmFjay5pZD09PW4udHJhY2suaWR9KSk6e3RyYWNrOm4udHJhY2t9O3ZhciBzPW5ldyBFdmVudChcInRyYWNrXCIpO3MudHJhY2s9bi50cmFjayxzLnJlY2VpdmVyPWkscy50cmFuc2NlaXZlcj17cmVjZWl2ZXI6aX0scy5zdHJlYW1zPVt0LnN0cmVhbV0sci5kaXNwYXRjaEV2ZW50KHMpfSkpLHQuc3RyZWFtLmdldFRyYWNrcygpLmZvckVhY2goKGZ1bmN0aW9uKG4pe3ZhciBpO2k9ZS5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0UmVjZWl2ZXJzP3IuZ2V0UmVjZWl2ZXJzKCkuZmluZCgoZnVuY3Rpb24oZSl7cmV0dXJuIGUudHJhY2smJmUudHJhY2suaWQ9PT1uLmlkfSkpOnt0cmFjazpufTt2YXIgcz1uZXcgRXZlbnQoXCJ0cmFja1wiKTtzLnRyYWNrPW4scy5yZWNlaXZlcj1pLHMudHJhbnNjZWl2ZXI9e3JlY2VpdmVyOml9LHMuc3RyZWFtcz1bdC5zdHJlYW1dLHIuZGlzcGF0Y2hFdmVudChzKX0pKX0sdGhpcy5hZGRFdmVudExpc3RlbmVyKFwiYWRkc3RyZWFtXCIsdGhpcy5fb250cmFja3BvbHkpKSx0LmFwcGx5KHRoaXMsYXJndW1lbnRzKX19ZWxzZSBuLndyYXBQZWVyQ29ubmVjdGlvbkV2ZW50KGUsXCJ0cmFja1wiLChmdW5jdGlvbihlKXtyZXR1cm4gZS50cmFuc2NlaXZlcnx8T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJ0cmFuc2NlaXZlclwiLHt2YWx1ZTp7cmVjZWl2ZXI6ZS5yZWNlaXZlcn19KSxlfSkpfSx0LnNoaW1QZWVyQ29ubmVjdGlvbj1mdW5jdGlvbihlLHQpeyFlLlJUQ1BlZXJDb25uZWN0aW9uJiZlLndlYmtpdFJUQ1BlZXJDb25uZWN0aW9uJiYoZS5SVENQZWVyQ29ubmVjdGlvbj1lLndlYmtpdFJUQ1BlZXJDb25uZWN0aW9uKTtpZighZS5SVENQZWVyQ29ubmVjdGlvbilyZXR1cm47dC52ZXJzaW9uPDUzJiZbXCJzZXRMb2NhbERlc2NyaXB0aW9uXCIsXCJzZXRSZW1vdGVEZXNjcmlwdGlvblwiLFwiYWRkSWNlQ2FuZGlkYXRlXCJdLmZvckVhY2goKGZ1bmN0aW9uKHQpe3ZhciByPWUuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlW3RdLG49byh7fSx0LChmdW5jdGlvbigpe3JldHVybiBhcmd1bWVudHNbMF09bmV3KFwiYWRkSWNlQ2FuZGlkYXRlXCI9PT10P2UuUlRDSWNlQ2FuZGlkYXRlOmUuUlRDU2Vzc2lvbkRlc2NyaXB0aW9uKShhcmd1bWVudHNbMF0pLHIuYXBwbHkodGhpcyxhcmd1bWVudHMpfSkpO2UuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlW3RdPW5bdF19KSl9LHQuc2hpbVNlbmRlclJlY2VpdmVyR2V0U3RhdHM9ZnVuY3Rpb24oZSl7aWYoIShcIm9iamVjdFwiPT09YyhlKSYmZS5SVENQZWVyQ29ubmVjdGlvbiYmZS5SVENSdHBTZW5kZXImJmUuUlRDUnRwUmVjZWl2ZXIpKXJldHVybjtpZighKFwiZ2V0U3RhdHNcImluIGUuUlRDUnRwU2VuZGVyLnByb3RvdHlwZSkpe3ZhciB0PWUuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmdldFNlbmRlcnM7dCYmKGUuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmdldFNlbmRlcnM9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHI9dC5hcHBseSh0aGlzLFtdKTtyZXR1cm4gci5mb3JFYWNoKChmdW5jdGlvbih0KXtyZXR1cm4gdC5fcGM9ZX0pKSxyfSk7dmFyIHI9ZS5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuYWRkVHJhY2s7ciYmKGUuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmFkZFRyYWNrPWZ1bmN0aW9uKCl7dmFyIGU9ci5hcHBseSh0aGlzLGFyZ3VtZW50cyk7cmV0dXJuIGUuX3BjPXRoaXMsZX0pLGUuUlRDUnRwU2VuZGVyLnByb3RvdHlwZS5nZXRTdGF0cz1mdW5jdGlvbigpe3ZhciBlPXRoaXM7cmV0dXJuIHRoaXMuX3BjLmdldFN0YXRzKCkudGhlbigoZnVuY3Rpb24odCl7cmV0dXJuIG4uZmlsdGVyU3RhdHModCxlLnRyYWNrLCEwKX0pKX19aWYoIShcImdldFN0YXRzXCJpbiBlLlJUQ1J0cFJlY2VpdmVyLnByb3RvdHlwZSkpe3ZhciBpPWUuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmdldFJlY2VpdmVycztpJiYoZS5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0UmVjZWl2ZXJzPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PWkuYXBwbHkodGhpcyxbXSk7cmV0dXJuIHQuZm9yRWFjaCgoZnVuY3Rpb24odCl7cmV0dXJuIHQuX3BjPWV9KSksdH0pLG4ud3JhcFBlZXJDb25uZWN0aW9uRXZlbnQoZSxcInRyYWNrXCIsKGZ1bmN0aW9uKGUpe3JldHVybiBlLnJlY2VpdmVyLl9wYz1lLnNyY0VsZW1lbnQsZX0pKSxlLlJUQ1J0cFJlY2VpdmVyLnByb3RvdHlwZS5nZXRTdGF0cz1mdW5jdGlvbigpe3ZhciBlPXRoaXM7cmV0dXJuIHRoaXMuX3BjLmdldFN0YXRzKCkudGhlbigoZnVuY3Rpb24odCl7cmV0dXJuIG4uZmlsdGVyU3RhdHModCxlLnRyYWNrLCExKX0pKX19aWYoIShcImdldFN0YXRzXCJpbiBlLlJUQ1J0cFNlbmRlci5wcm90b3R5cGUpfHwhKFwiZ2V0U3RhdHNcImluIGUuUlRDUnRwUmVjZWl2ZXIucHJvdG90eXBlKSlyZXR1cm47dmFyIHM9ZS5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0U3RhdHM7ZS5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0U3RhdHM9ZnVuY3Rpb24oKXtpZihhcmd1bWVudHMubGVuZ3RoPjAmJmFyZ3VtZW50c1swXWluc3RhbmNlb2YgZS5NZWRpYVN0cmVhbVRyYWNrKXt2YXIgdCxyLG4saT1hcmd1bWVudHNbMF07cmV0dXJuIHRoaXMuZ2V0U2VuZGVycygpLmZvckVhY2goKGZ1bmN0aW9uKGUpe2UudHJhY2s9PT1pJiYodD9uPSEwOnQ9ZSl9KSksdGhpcy5nZXRSZWNlaXZlcnMoKS5mb3JFYWNoKChmdW5jdGlvbihlKXtyZXR1cm4gZS50cmFjaz09PWkmJihyP249ITA6cj1lKSxlLnRyYWNrPT09aX0pKSxufHx0JiZyP1Byb21pc2UucmVqZWN0KG5ldyBET01FeGNlcHRpb24oXCJUaGVyZSBhcmUgbW9yZSB0aGFuIG9uZSBzZW5kZXIgb3IgcmVjZWl2ZXIgZm9yIHRoZSB0cmFjay5cIixcIkludmFsaWRBY2Nlc3NFcnJvclwiKSk6dD90LmdldFN0YXRzKCk6cj9yLmdldFN0YXRzKCk6UHJvbWlzZS5yZWplY3QobmV3IERPTUV4Y2VwdGlvbihcIlRoZXJlIGlzIG5vIHNlbmRlciBvciByZWNlaXZlciBmb3IgdGhlIHRyYWNrLlwiLFwiSW52YWxpZEFjY2Vzc0Vycm9yXCIpKX1yZXR1cm4gcy5hcHBseSh0aGlzLGFyZ3VtZW50cyl9fTt2YXIgbj1mdW5jdGlvbihlLHQpe2lmKCF0JiZlJiZlLl9fZXNNb2R1bGUpcmV0dXJuIGU7aWYobnVsbD09PWV8fFwib2JqZWN0XCIhPT1jKGUpJiZcImZ1bmN0aW9uXCIhPXR5cGVvZiBlKXJldHVybntkZWZhdWx0OmV9O3ZhciByPWEodCk7aWYociYmci5oYXMoZSkpcmV0dXJuIHIuZ2V0KGUpO3ZhciBuPXt9LGk9T2JqZWN0LmRlZmluZVByb3BlcnR5JiZPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO2Zvcih2YXIgcyBpbiBlKWlmKFwiZGVmYXVsdFwiIT09cyYmT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUscykpe3ZhciBvPWk/T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLHMpOm51bGw7byYmKG8uZ2V0fHxvLnNldCk/T2JqZWN0LmRlZmluZVByb3BlcnR5KG4scyxvKTpuW3NdPWVbc119bi5kZWZhdWx0PWUsciYmci5zZXQoZSxuKTtyZXR1cm4gbn0ocigyODgpKSxpPXIoODcpLHM9cig2ODgpO2Z1bmN0aW9uIGEoZSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgV2Vha01hcClyZXR1cm4gbnVsbDt2YXIgdD1uZXcgV2Vha01hcCxyPW5ldyBXZWFrTWFwO3JldHVybihhPWZ1bmN0aW9uKGUpe3JldHVybiBlP3I6dH0pKGUpfWZ1bmN0aW9uIG8oZSx0LHIpe3JldHVybih0PWZ1bmN0aW9uKGUpe3ZhciB0PWZ1bmN0aW9uKGUsdCl7aWYoXCJvYmplY3RcIiE9PWMoZSl8fG51bGw9PT1lKXJldHVybiBlO3ZhciByPWVbU3ltYm9sLnRvUHJpbWl0aXZlXTtpZih2b2lkIDAhPT1yKXt2YXIgbj1yLmNhbGwoZSx0fHxcImRlZmF1bHRcIik7aWYoXCJvYmplY3RcIiE9PWMobikpcmV0dXJuIG47dGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpfXJldHVybihcInN0cmluZ1wiPT09dD9TdHJpbmc6TnVtYmVyKShlKX0oZSxcInN0cmluZ1wiKTtyZXR1cm5cInN5bWJvbFwiPT09Yyh0KT90OlN0cmluZyh0KX0odCkpaW4gZT9PYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0LHt2YWx1ZTpyLGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwfSk6ZVt0XT1yLGV9ZnVuY3Rpb24gYyhlKXtyZXR1cm4gYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24oZSl7cmV0dXJuIHR5cGVvZiBlfTpmdW5jdGlvbihlKXtyZXR1cm4gZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZlLmNvbnN0cnVjdG9yPT09U3ltYm9sJiZlIT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiBlfSxjKGUpfWZ1bmN0aW9uIGQoZSl7ZS5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0TG9jYWxTdHJlYW1zPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcztyZXR1cm4gdGhpcy5fc2hpbW1lZExvY2FsU3RyZWFtcz10aGlzLl9zaGltbWVkTG9jYWxTdHJlYW1zfHx7fSxPYmplY3Qua2V5cyh0aGlzLl9zaGltbWVkTG9jYWxTdHJlYW1zKS5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiBlLl9zaGltbWVkTG9jYWxTdHJlYW1zW3RdWzBdfSkpfTt2YXIgdD1lLlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRUcmFjaztlLlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRUcmFjaz1mdW5jdGlvbihlLHIpe2lmKCFyKXJldHVybiB0LmFwcGx5KHRoaXMsYXJndW1lbnRzKTt0aGlzLl9zaGltbWVkTG9jYWxTdHJlYW1zPXRoaXMuX3NoaW1tZWRMb2NhbFN0cmVhbXN8fHt9O3ZhciBuPXQuYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybiB0aGlzLl9zaGltbWVkTG9jYWxTdHJlYW1zW3IuaWRdPy0xPT09dGhpcy5fc2hpbW1lZExvY2FsU3RyZWFtc1tyLmlkXS5pbmRleE9mKG4pJiZ0aGlzLl9zaGltbWVkTG9jYWxTdHJlYW1zW3IuaWRdLnB1c2gobik6dGhpcy5fc2hpbW1lZExvY2FsU3RyZWFtc1tyLmlkXT1bcixuXSxufTt2YXIgcj1lLlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRTdHJlYW07ZS5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuYWRkU3RyZWFtPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7dGhpcy5fc2hpbW1lZExvY2FsU3RyZWFtcz10aGlzLl9zaGltbWVkTG9jYWxTdHJlYW1zfHx7fSxlLmdldFRyYWNrcygpLmZvckVhY2goKGZ1bmN0aW9uKGUpe2lmKHQuZ2V0U2VuZGVycygpLmZpbmQoKGZ1bmN0aW9uKHQpe3JldHVybiB0LnRyYWNrPT09ZX0pKSl0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKFwiVHJhY2sgYWxyZWFkeSBleGlzdHMuXCIsXCJJbnZhbGlkQWNjZXNzRXJyb3JcIil9KSk7dmFyIG49dGhpcy5nZXRTZW5kZXJzKCk7ci5hcHBseSh0aGlzLGFyZ3VtZW50cyk7dmFyIGk9dGhpcy5nZXRTZW5kZXJzKCkuZmlsdGVyKChmdW5jdGlvbihlKXtyZXR1cm4tMT09PW4uaW5kZXhPZihlKX0pKTt0aGlzLl9zaGltbWVkTG9jYWxTdHJlYW1zW2UuaWRdPVtlXS5jb25jYXQoaSl9O3ZhciBuPWUuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLnJlbW92ZVN0cmVhbTtlLlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5yZW1vdmVTdHJlYW09ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuX3NoaW1tZWRMb2NhbFN0cmVhbXM9dGhpcy5fc2hpbW1lZExvY2FsU3RyZWFtc3x8e30sZGVsZXRlIHRoaXMuX3NoaW1tZWRMb2NhbFN0cmVhbXNbZS5pZF0sbi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9O3ZhciBpPWUuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLnJlbW92ZVRyYWNrO2UuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLnJlbW92ZVRyYWNrPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7cmV0dXJuIHRoaXMuX3NoaW1tZWRMb2NhbFN0cmVhbXM9dGhpcy5fc2hpbW1lZExvY2FsU3RyZWFtc3x8e30sZSYmT2JqZWN0LmtleXModGhpcy5fc2hpbW1lZExvY2FsU3RyZWFtcykuZm9yRWFjaCgoZnVuY3Rpb24ocil7dmFyIG49dC5fc2hpbW1lZExvY2FsU3RyZWFtc1tyXS5pbmRleE9mKGUpOy0xIT09biYmdC5fc2hpbW1lZExvY2FsU3RyZWFtc1tyXS5zcGxpY2UobiwxKSwxPT09dC5fc2hpbW1lZExvY2FsU3RyZWFtc1tyXS5sZW5ndGgmJmRlbGV0ZSB0Ll9zaGltbWVkTG9jYWxTdHJlYW1zW3JdfSkpLGkuYXBwbHkodGhpcyxhcmd1bWVudHMpfX19LDY4ODooZSx0KT0+e1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuc2hpbUdldERpc3BsYXlNZWRpYT1mdW5jdGlvbihlLHQpe2lmKGUubmF2aWdhdG9yLm1lZGlhRGV2aWNlcyYmXCJnZXREaXNwbGF5TWVkaWFcImluIGUubmF2aWdhdG9yLm1lZGlhRGV2aWNlcylyZXR1cm47aWYoIWUubmF2aWdhdG9yLm1lZGlhRGV2aWNlcylyZXR1cm47aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdClyZXR1cm4gdm9pZCBjb25zb2xlLmVycm9yKFwic2hpbUdldERpc3BsYXlNZWRpYTogZ2V0U291cmNlSWQgYXJndW1lbnQgaXMgbm90IGEgZnVuY3Rpb25cIik7ZS5uYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldERpc3BsYXlNZWRpYT1mdW5jdGlvbihyKXtyZXR1cm4gdChyKS50aGVuKChmdW5jdGlvbih0KXt2YXIgbj1yLnZpZGVvJiZyLnZpZGVvLndpZHRoLGk9ci52aWRlbyYmci52aWRlby5oZWlnaHQscz1yLnZpZGVvJiZyLnZpZGVvLmZyYW1lUmF0ZTtyZXR1cm4gci52aWRlbz17bWFuZGF0b3J5OntjaHJvbWVNZWRpYVNvdXJjZTpcImRlc2t0b3BcIixjaHJvbWVNZWRpYVNvdXJjZUlkOnQsbWF4RnJhbWVSYXRlOnN8fDN9fSxuJiYoci52aWRlby5tYW5kYXRvcnkubWF4V2lkdGg9biksaSYmKHIudmlkZW8ubWFuZGF0b3J5Lm1heEhlaWdodD1pKSxlLm5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKHIpfSkpfX19LDg3OihlLHQscik9PntcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBuKGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIFdlYWtNYXApcmV0dXJuIG51bGw7dmFyIHQ9bmV3IFdlYWtNYXAscj1uZXcgV2Vha01hcDtyZXR1cm4obj1mdW5jdGlvbihlKXtyZXR1cm4gZT9yOnR9KShlKX1mdW5jdGlvbiBpKGUpe3JldHVybiBpPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbihlKXtyZXR1cm4gdHlwZW9mIGV9OmZ1bmN0aW9uKGUpe3JldHVybiBlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJmUuY29uc3RydWN0b3I9PT1TeW1ib2wmJmUhPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIGV9LGkoZSl9T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5zaGltR2V0VXNlck1lZGlhPWZ1bmN0aW9uKGUsdCl7dmFyIHI9ZSYmZS5uYXZpZ2F0b3I7aWYoIXIubWVkaWFEZXZpY2VzKXJldHVybjt2YXIgbj1mdW5jdGlvbihlKXtpZihcIm9iamVjdFwiIT09aShlKXx8ZS5tYW5kYXRvcnl8fGUub3B0aW9uYWwpcmV0dXJuIGU7dmFyIHQ9e307cmV0dXJuIE9iamVjdC5rZXlzKGUpLmZvckVhY2goKGZ1bmN0aW9uKHIpe2lmKFwicmVxdWlyZVwiIT09ciYmXCJhZHZhbmNlZFwiIT09ciYmXCJtZWRpYVNvdXJjZVwiIT09cil7dmFyIG49XCJvYmplY3RcIj09PWkoZVtyXSk/ZVtyXTp7aWRlYWw6ZVtyXX07dm9pZCAwIT09bi5leGFjdCYmXCJudW1iZXJcIj09dHlwZW9mIG4uZXhhY3QmJihuLm1pbj1uLm1heD1uLmV4YWN0KTt2YXIgcz1mdW5jdGlvbihlLHQpe3JldHVybiBlP2UrdC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSt0LnNsaWNlKDEpOlwiZGV2aWNlSWRcIj09PXQ/XCJzb3VyY2VJZFwiOnR9O2lmKHZvaWQgMCE9PW4uaWRlYWwpe3Qub3B0aW9uYWw9dC5vcHRpb25hbHx8W107dmFyIGE9e307XCJudW1iZXJcIj09dHlwZW9mIG4uaWRlYWw/KGFbcyhcIm1pblwiLHIpXT1uLmlkZWFsLHQub3B0aW9uYWwucHVzaChhKSwoYT17fSlbcyhcIm1heFwiLHIpXT1uLmlkZWFsLHQub3B0aW9uYWwucHVzaChhKSk6KGFbcyhcIlwiLHIpXT1uLmlkZWFsLHQub3B0aW9uYWwucHVzaChhKSl9dm9pZCAwIT09bi5leGFjdCYmXCJudW1iZXJcIiE9dHlwZW9mIG4uZXhhY3Q/KHQubWFuZGF0b3J5PXQubWFuZGF0b3J5fHx7fSx0Lm1hbmRhdG9yeVtzKFwiXCIscildPW4uZXhhY3QpOltcIm1pblwiLFwibWF4XCJdLmZvckVhY2goKGZ1bmN0aW9uKGUpe3ZvaWQgMCE9PW5bZV0mJih0Lm1hbmRhdG9yeT10Lm1hbmRhdG9yeXx8e30sdC5tYW5kYXRvcnlbcyhlLHIpXT1uW2VdKX0pKX19KSksZS5hZHZhbmNlZCYmKHQub3B0aW9uYWw9KHQub3B0aW9uYWx8fFtdKS5jb25jYXQoZS5hZHZhbmNlZCkpLHR9LGE9ZnVuY3Rpb24oZSxhKXtpZih0LnZlcnNpb24+PTYxKXJldHVybiBhKGUpO2lmKChlPUpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZSkpKSYmXCJvYmplY3RcIj09PWkoZS5hdWRpbykpe3ZhciBvPWZ1bmN0aW9uKGUsdCxyKXt0IGluIGUmJiEociBpbiBlKSYmKGVbcl09ZVt0XSxkZWxldGUgZVt0XSl9O28oKGU9SlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShlKSkpLmF1ZGlvLFwiYXV0b0dhaW5Db250cm9sXCIsXCJnb29nQXV0b0dhaW5Db250cm9sXCIpLG8oZS5hdWRpbyxcIm5vaXNlU3VwcHJlc3Npb25cIixcImdvb2dOb2lzZVN1cHByZXNzaW9uXCIpLGUuYXVkaW89bihlLmF1ZGlvKX1pZihlJiZcIm9iamVjdFwiPT09aShlLnZpZGVvKSl7dmFyIGM9ZS52aWRlby5mYWNpbmdNb2RlO2M9YyYmKFwib2JqZWN0XCI9PT1pKGMpP2M6e2lkZWFsOmN9KTt2YXIgZCxsPXQudmVyc2lvbjw2NjtpZihjJiYoXCJ1c2VyXCI9PT1jLmV4YWN0fHxcImVudmlyb25tZW50XCI9PT1jLmV4YWN0fHxcInVzZXJcIj09PWMuaWRlYWx8fFwiZW52aXJvbm1lbnRcIj09PWMuaWRlYWwpJiYoIXIubWVkaWFEZXZpY2VzLmdldFN1cHBvcnRlZENvbnN0cmFpbnRzfHwhci5tZWRpYURldmljZXMuZ2V0U3VwcG9ydGVkQ29uc3RyYWludHMoKS5mYWNpbmdNb2RlfHxsKSlpZihkZWxldGUgZS52aWRlby5mYWNpbmdNb2RlLFwiZW52aXJvbm1lbnRcIj09PWMuZXhhY3R8fFwiZW52aXJvbm1lbnRcIj09PWMuaWRlYWw/ZD1bXCJiYWNrXCIsXCJyZWFyXCJdOlwidXNlclwiIT09Yy5leGFjdCYmXCJ1c2VyXCIhPT1jLmlkZWFsfHwoZD1bXCJmcm9udFwiXSksZClyZXR1cm4gci5tZWRpYURldmljZXMuZW51bWVyYXRlRGV2aWNlcygpLnRoZW4oKGZ1bmN0aW9uKHQpe3ZhciByPSh0PXQuZmlsdGVyKChmdW5jdGlvbihlKXtyZXR1cm5cInZpZGVvaW5wdXRcIj09PWUua2luZH0pKSkuZmluZCgoZnVuY3Rpb24oZSl7cmV0dXJuIGQuc29tZSgoZnVuY3Rpb24odCl7cmV0dXJuIGUubGFiZWwudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyh0KX0pKX0pKTtyZXR1cm4hciYmdC5sZW5ndGgmJmQuaW5jbHVkZXMoXCJiYWNrXCIpJiYocj10W3QubGVuZ3RoLTFdKSxyJiYoZS52aWRlby5kZXZpY2VJZD1jLmV4YWN0P3tleGFjdDpyLmRldmljZUlkfTp7aWRlYWw6ci5kZXZpY2VJZH0pLGUudmlkZW89bihlLnZpZGVvKSxzKFwiY2hyb21lOiBcIitKU09OLnN0cmluZ2lmeShlKSksYShlKX0pKTtlLnZpZGVvPW4oZS52aWRlbyl9cmV0dXJuIHMoXCJjaHJvbWU6IFwiK0pTT04uc3RyaW5naWZ5KGUpKSxhKGUpfSxvPWZ1bmN0aW9uKGUpe3JldHVybiB0LnZlcnNpb24+PTY0P2U6e25hbWU6e1Blcm1pc3Npb25EZW5pZWRFcnJvcjpcIk5vdEFsbG93ZWRFcnJvclwiLFBlcm1pc3Npb25EaXNtaXNzZWRFcnJvcjpcIk5vdEFsbG93ZWRFcnJvclwiLEludmFsaWRTdGF0ZUVycm9yOlwiTm90QWxsb3dlZEVycm9yXCIsRGV2aWNlc05vdEZvdW5kRXJyb3I6XCJOb3RGb3VuZEVycm9yXCIsQ29uc3RyYWludE5vdFNhdGlzZmllZEVycm9yOlwiT3ZlcmNvbnN0cmFpbmVkRXJyb3JcIixUcmFja1N0YXJ0RXJyb3I6XCJOb3RSZWFkYWJsZUVycm9yXCIsTWVkaWFEZXZpY2VGYWlsZWREdWVUb1NodXRkb3duOlwiTm90QWxsb3dlZEVycm9yXCIsTWVkaWFEZXZpY2VLaWxsU3dpdGNoT246XCJOb3RBbGxvd2VkRXJyb3JcIixUYWJDYXB0dXJlRXJyb3I6XCJBYm9ydEVycm9yXCIsU2NyZWVuQ2FwdHVyZUVycm9yOlwiQWJvcnRFcnJvclwiLERldmljZUNhcHR1cmVFcnJvcjpcIkFib3J0RXJyb3JcIn1bZS5uYW1lXXx8ZS5uYW1lLG1lc3NhZ2U6ZS5tZXNzYWdlLGNvbnN0cmFpbnQ6ZS5jb25zdHJhaW50fHxlLmNvbnN0cmFpbnROYW1lLHRvU3RyaW5nOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubmFtZSsodGhpcy5tZXNzYWdlJiZcIjogXCIpK3RoaXMubWVzc2FnZX19fTtpZihyLmdldFVzZXJNZWRpYT1mdW5jdGlvbihlLHQsbil7YShlLChmdW5jdGlvbihlKXtyLndlYmtpdEdldFVzZXJNZWRpYShlLHQsKGZ1bmN0aW9uKGUpe24mJm4obyhlKSl9KSl9KSl9LmJpbmQociksci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKXt2YXIgYz1yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEuYmluZChyLm1lZGlhRGV2aWNlcyk7ci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhPWZ1bmN0aW9uKGUpe3JldHVybiBhKGUsKGZ1bmN0aW9uKGUpe3JldHVybiBjKGUpLnRoZW4oKGZ1bmN0aW9uKHQpe2lmKGUuYXVkaW8mJiF0LmdldEF1ZGlvVHJhY2tzKCkubGVuZ3RofHxlLnZpZGVvJiYhdC5nZXRWaWRlb1RyYWNrcygpLmxlbmd0aCl0aHJvdyB0LmdldFRyYWNrcygpLmZvckVhY2goKGZ1bmN0aW9uKGUpe2Uuc3RvcCgpfSkpLG5ldyBET01FeGNlcHRpb24oXCJcIixcIk5vdEZvdW5kRXJyb3JcIik7cmV0dXJuIHR9KSwoZnVuY3Rpb24oZSl7cmV0dXJuIFByb21pc2UucmVqZWN0KG8oZSkpfSkpfSkpfX19O3ZhciBzPWZ1bmN0aW9uKGUsdCl7aWYoIXQmJmUmJmUuX19lc01vZHVsZSlyZXR1cm4gZTtpZihudWxsPT09ZXx8XCJvYmplY3RcIiE9PWkoZSkmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIGUpcmV0dXJue2RlZmF1bHQ6ZX07dmFyIHI9bih0KTtpZihyJiZyLmhhcyhlKSlyZXR1cm4gci5nZXQoZSk7dmFyIHM9e30sYT1PYmplY3QuZGVmaW5lUHJvcGVydHkmJk9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7Zm9yKHZhciBvIGluIGUpaWYoXCJkZWZhdWx0XCIhPT1vJiZPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxvKSl7dmFyIGM9YT9PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsbyk6bnVsbDtjJiYoYy5nZXR8fGMuc2V0KT9PYmplY3QuZGVmaW5lUHJvcGVydHkocyxvLGMpOnNbb109ZVtvXX1zLmRlZmF1bHQ9ZSxyJiZyLnNldChlLHMpO3JldHVybiBzfShyKDI4OCkpLmxvZ30sNDAxOihlLHQscik9PntcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LnJlbW92ZUV4dG1hcEFsbG93TWl4ZWQ9ZnVuY3Rpb24oZSx0KXtpZighZS5SVENQZWVyQ29ubmVjdGlvbilyZXR1cm47aWYoXCJjaHJvbWVcIj09PXQuYnJvd3NlciYmdC52ZXJzaW9uPj03MSlyZXR1cm47aWYoXCJzYWZhcmlcIj09PXQuYnJvd3NlciYmdC52ZXJzaW9uPj02MDUpcmV0dXJuO3ZhciByPWUuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLnNldFJlbW90ZURlc2NyaXB0aW9uO2UuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLnNldFJlbW90ZURlc2NyaXB0aW9uPWZ1bmN0aW9uKHQpe2lmKHQmJnQuc2RwJiYtMSE9PXQuc2RwLmluZGV4T2YoXCJcXG5hPWV4dG1hcC1hbGxvdy1taXhlZFwiKSl7dmFyIG49dC5zZHAuc3BsaXQoXCJcXG5cIikuZmlsdGVyKChmdW5jdGlvbihlKXtyZXR1cm5cImE9ZXh0bWFwLWFsbG93LW1peGVkXCIhPT1lLnRyaW0oKX0pKS5qb2luKFwiXFxuXCIpO2UuUlRDU2Vzc2lvbkRlc2NyaXB0aW9uJiZ0IGluc3RhbmNlb2YgZS5SVENTZXNzaW9uRGVzY3JpcHRpb24/YXJndW1lbnRzWzBdPW5ldyBlLlJUQ1Nlc3Npb25EZXNjcmlwdGlvbih7dHlwZTp0LnR5cGUsc2RwOm59KTp0LnNkcD1ufXJldHVybiByLmFwcGx5KHRoaXMsYXJndW1lbnRzKX19LHQuc2hpbUFkZEljZUNhbmRpZGF0ZU51bGxPckVtcHR5PWZ1bmN0aW9uKGUsdCl7aWYoIWUuUlRDUGVlckNvbm5lY3Rpb258fCFlLlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZSlyZXR1cm47dmFyIHI9ZS5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuYWRkSWNlQ2FuZGlkYXRlO2lmKCFyfHwwPT09ci5sZW5ndGgpcmV0dXJuO2UuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmFkZEljZUNhbmRpZGF0ZT1mdW5jdGlvbigpe3JldHVybiBhcmd1bWVudHNbMF0/KFwiY2hyb21lXCI9PT10LmJyb3dzZXImJnQudmVyc2lvbjw3OHx8XCJmaXJlZm94XCI9PT10LmJyb3dzZXImJnQudmVyc2lvbjw2OHx8XCJzYWZhcmlcIj09PXQuYnJvd3NlcikmJmFyZ3VtZW50c1swXSYmXCJcIj09PWFyZ3VtZW50c1swXS5jYW5kaWRhdGU/UHJvbWlzZS5yZXNvbHZlKCk6ci5hcHBseSh0aGlzLGFyZ3VtZW50cyk6KGFyZ3VtZW50c1sxXSYmYXJndW1lbnRzWzFdLmFwcGx5KG51bGwpLFByb21pc2UucmVzb2x2ZSgpKX19LHQuc2hpbUNvbm5lY3Rpb25TdGF0ZT1mdW5jdGlvbihlKXtpZighZS5SVENQZWVyQ29ubmVjdGlvbnx8XCJjb25uZWN0aW9uU3RhdGVcImluIGUuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlKXJldHVybjt2YXIgdD1lLlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcImNvbm5lY3Rpb25TdGF0ZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm57Y29tcGxldGVkOlwiY29ubmVjdGVkXCIsY2hlY2tpbmc6XCJjb25uZWN0aW5nXCJ9W3RoaXMuaWNlQ29ubmVjdGlvblN0YXRlXXx8dGhpcy5pY2VDb25uZWN0aW9uU3RhdGV9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJvbmNvbm5lY3Rpb25zdGF0ZWNoYW5nZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fb25jb25uZWN0aW9uc3RhdGVjaGFuZ2V8fG51bGx9LHNldDpmdW5jdGlvbihlKXt0aGlzLl9vbmNvbm5lY3Rpb25zdGF0ZWNoYW5nZSYmKHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNvbm5lY3Rpb25zdGF0ZWNoYW5nZVwiLHRoaXMuX29uY29ubmVjdGlvbnN0YXRlY2hhbmdlKSxkZWxldGUgdGhpcy5fb25jb25uZWN0aW9uc3RhdGVjaGFuZ2UpLGUmJnRoaXMuYWRkRXZlbnRMaXN0ZW5lcihcImNvbm5lY3Rpb25zdGF0ZWNoYW5nZVwiLHRoaXMuX29uY29ubmVjdGlvbnN0YXRlY2hhbmdlPWUpfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLFtcInNldExvY2FsRGVzY3JpcHRpb25cIixcInNldFJlbW90ZURlc2NyaXB0aW9uXCJdLmZvckVhY2goKGZ1bmN0aW9uKGUpe3ZhciByPXRbZV07dFtlXT1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9jb25uZWN0aW9uc3RhdGVjaGFuZ2Vwb2x5fHwodGhpcy5fY29ubmVjdGlvbnN0YXRlY2hhbmdlcG9seT1mdW5jdGlvbihlKXt2YXIgdD1lLnRhcmdldDtpZih0Ll9sYXN0Q29ubmVjdGlvblN0YXRlIT09dC5jb25uZWN0aW9uU3RhdGUpe3QuX2xhc3RDb25uZWN0aW9uU3RhdGU9dC5jb25uZWN0aW9uU3RhdGU7dmFyIHI9bmV3IEV2ZW50KFwiY29ubmVjdGlvbnN0YXRlY2hhbmdlXCIsZSk7dC5kaXNwYXRjaEV2ZW50KHIpfXJldHVybiBlfSx0aGlzLmFkZEV2ZW50TGlzdGVuZXIoXCJpY2Vjb25uZWN0aW9uc3RhdGVjaGFuZ2VcIix0aGlzLl9jb25uZWN0aW9uc3RhdGVjaGFuZ2Vwb2x5KSksci5hcHBseSh0aGlzLGFyZ3VtZW50cyl9fSkpfSx0LnNoaW1NYXhNZXNzYWdlU2l6ZT1mdW5jdGlvbihlLHQpe2lmKCFlLlJUQ1BlZXJDb25uZWN0aW9uKXJldHVybjtcInNjdHBcImluIGUuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlfHxPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUsXCJzY3RwXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB2b2lkIDA9PT10aGlzLl9zY3RwP251bGw6dGhpcy5fc2N0cH19KTt2YXIgcj1lLlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5zZXRSZW1vdGVEZXNjcmlwdGlvbjtlLlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5zZXRSZW1vdGVEZXNjcmlwdGlvbj1mdW5jdGlvbigpe3ZhciBlLG47KHRoaXMuX3NjdHA9bnVsbCxcImNocm9tZVwiPT09dC5icm93c2VyJiZ0LnZlcnNpb24+PTc2KSYmKFwicGxhbi1iXCI9PT10aGlzLmdldENvbmZpZ3VyYXRpb24oKS5zZHBTZW1hbnRpY3MmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwic2N0cFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdm9pZCAwPT09dGhpcy5fc2N0cD9udWxsOnRoaXMuX3NjdHB9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSkpO2lmKGZ1bmN0aW9uKGUpe2lmKCFlfHwhZS5zZHApcmV0dXJuITE7dmFyIHQ9aS5kZWZhdWx0LnNwbGl0U2VjdGlvbnMoZS5zZHApO3JldHVybiB0LnNoaWZ0KCksdC5zb21lKChmdW5jdGlvbihlKXt2YXIgdD1pLmRlZmF1bHQucGFyc2VNTGluZShlKTtyZXR1cm4gdCYmXCJhcHBsaWNhdGlvblwiPT09dC5raW5kJiYtMSE9PXQucHJvdG9jb2wuaW5kZXhPZihcIlNDVFBcIil9KSl9KGFyZ3VtZW50c1swXSkpe3ZhciBzLGE9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5zZHAubWF0Y2goL21vemlsbGEuLi5USElTX0lTX1NEUEFSVEEtKFxcZCspLyk7aWYobnVsbD09PXR8fHQubGVuZ3RoPDIpcmV0dXJuLTE7dmFyIHI9cGFyc2VJbnQodFsxXSwxMCk7cmV0dXJuIHIhPXI/LTE6cn0oYXJndW1lbnRzWzBdKSxvPShlPWEsbj02NTUzNixcImZpcmVmb3hcIj09PXQuYnJvd3NlciYmKG49dC52ZXJzaW9uPDU3Py0xPT09ZT8xNjM4NDoyMTQ3NDgzNjM3OnQudmVyc2lvbjw2MD81Nz09PXQudmVyc2lvbj82NTUzNTo2NTUzNjoyMTQ3NDgzNjM3KSxuKSxjPWZ1bmN0aW9uKGUscil7dmFyIG49NjU1MzY7XCJmaXJlZm94XCI9PT10LmJyb3dzZXImJjU3PT09dC52ZXJzaW9uJiYobj02NTUzNSk7dmFyIHM9aS5kZWZhdWx0Lm1hdGNoUHJlZml4KGUuc2RwLFwiYT1tYXgtbWVzc2FnZS1zaXplOlwiKTtyZXR1cm4gcy5sZW5ndGg+MD9uPXBhcnNlSW50KHNbMF0uc3Vic3RyaW5nKDE5KSwxMCk6XCJmaXJlZm94XCI9PT10LmJyb3dzZXImJi0xIT09ciYmKG49MjE0NzQ4MzYzNyksbn0oYXJndW1lbnRzWzBdLGEpO3M9MD09PW8mJjA9PT1jP051bWJlci5QT1NJVElWRV9JTkZJTklUWTowPT09b3x8MD09PWM/TWF0aC5tYXgobyxjKTpNYXRoLm1pbihvLGMpO3ZhciBkPXt9O09iamVjdC5kZWZpbmVQcm9wZXJ0eShkLFwibWF4TWVzc2FnZVNpemVcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHN9fSksdGhpcy5fc2N0cD1kfXJldHVybiByLmFwcGx5KHRoaXMsYXJndW1lbnRzKX19LHQuc2hpbVBhcmFtZXRlcmxlc3NTZXRMb2NhbERlc2NyaXB0aW9uPWZ1bmN0aW9uKGUsdCl7aWYoIWUuUlRDUGVlckNvbm5lY3Rpb258fCFlLlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZSlyZXR1cm47dmFyIHI9ZS5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuc2V0TG9jYWxEZXNjcmlwdGlvbjtpZighcnx8MD09PXIubGVuZ3RoKXJldHVybjtlLlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5zZXRMb2NhbERlc2NyaXB0aW9uPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PWFyZ3VtZW50c1swXXx8e307aWYoXCJvYmplY3RcIiE9PW8odCl8fHQudHlwZSYmdC5zZHApcmV0dXJuIHIuYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKCEodD17dHlwZTp0LnR5cGUsc2RwOnQuc2RwfSkudHlwZSlzd2l0Y2godGhpcy5zaWduYWxpbmdTdGF0ZSl7Y2FzZVwic3RhYmxlXCI6Y2FzZVwiaGF2ZS1sb2NhbC1vZmZlclwiOmNhc2VcImhhdmUtcmVtb3RlLXByYW5zd2VyXCI6dC50eXBlPVwib2ZmZXJcIjticmVhaztkZWZhdWx0OnQudHlwZT1cImFuc3dlclwifXJldHVybiB0LnNkcHx8XCJvZmZlclwiIT09dC50eXBlJiZcImFuc3dlclwiIT09dC50eXBlP3IuYXBwbHkodGhpcyxbdF0pOihcIm9mZmVyXCI9PT10LnR5cGU/dGhpcy5jcmVhdGVPZmZlcjp0aGlzLmNyZWF0ZUFuc3dlcikuYXBwbHkodGhpcykudGhlbigoZnVuY3Rpb24odCl7cmV0dXJuIHIuYXBwbHkoZSxbdF0pfSkpfX0sdC5zaGltUlRDSWNlQ2FuZGlkYXRlPWZ1bmN0aW9uKGUpe2lmKCFlLlJUQ0ljZUNhbmRpZGF0ZXx8ZS5SVENJY2VDYW5kaWRhdGUmJlwiZm91bmRhdGlvblwiaW4gZS5SVENJY2VDYW5kaWRhdGUucHJvdG90eXBlKXJldHVybjt2YXIgdD1lLlJUQ0ljZUNhbmRpZGF0ZTtlLlJUQ0ljZUNhbmRpZGF0ZT1mdW5jdGlvbihlKXtpZihcIm9iamVjdFwiPT09byhlKSYmZS5jYW5kaWRhdGUmJjA9PT1lLmNhbmRpZGF0ZS5pbmRleE9mKFwiYT1cIikmJigoZT1KU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGUpKSkuY2FuZGlkYXRlPWUuY2FuZGlkYXRlLnN1YnN0cmluZygyKSksZS5jYW5kaWRhdGUmJmUuY2FuZGlkYXRlLmxlbmd0aCl7dmFyIHI9bmV3IHQoZSksbj1pLmRlZmF1bHQucGFyc2VDYW5kaWRhdGUoZS5jYW5kaWRhdGUpO2Zvcih2YXIgcyBpbiBuKXMgaW4gcnx8T2JqZWN0LmRlZmluZVByb3BlcnR5KHIscyx7dmFsdWU6bltzXX0pO3JldHVybiByLnRvSlNPTj1mdW5jdGlvbigpe3JldHVybntjYW5kaWRhdGU6ci5jYW5kaWRhdGUsc2RwTWlkOnIuc2RwTWlkLHNkcE1MaW5lSW5kZXg6ci5zZHBNTGluZUluZGV4LHVzZXJuYW1lRnJhZ21lbnQ6ci51c2VybmFtZUZyYWdtZW50fX0scn1yZXR1cm4gbmV3IHQoZSl9LGUuUlRDSWNlQ2FuZGlkYXRlLnByb3RvdHlwZT10LnByb3RvdHlwZSxzLndyYXBQZWVyQ29ubmVjdGlvbkV2ZW50KGUsXCJpY2VjYW5kaWRhdGVcIiwoZnVuY3Rpb24odCl7cmV0dXJuIHQuY2FuZGlkYXRlJiZPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcImNhbmRpZGF0ZVwiLHt2YWx1ZTpuZXcgZS5SVENJY2VDYW5kaWRhdGUodC5jYW5kaWRhdGUpLHdyaXRhYmxlOlwiZmFsc2VcIn0pLHR9KSl9LHQuc2hpbVJUQ0ljZUNhbmRpZGF0ZVJlbGF5UHJvdG9jb2w9ZnVuY3Rpb24oZSl7aWYoIWUuUlRDSWNlQ2FuZGlkYXRlfHxlLlJUQ0ljZUNhbmRpZGF0ZSYmXCJyZWxheVByb3RvY29sXCJpbiBlLlJUQ0ljZUNhbmRpZGF0ZS5wcm90b3R5cGUpcmV0dXJuO3Mud3JhcFBlZXJDb25uZWN0aW9uRXZlbnQoZSxcImljZWNhbmRpZGF0ZVwiLChmdW5jdGlvbihlKXtpZihlLmNhbmRpZGF0ZSl7dmFyIHQ9aS5kZWZhdWx0LnBhcnNlQ2FuZGlkYXRlKGUuY2FuZGlkYXRlLmNhbmRpZGF0ZSk7XCJyZWxheVwiPT09dC50eXBlJiYoZS5jYW5kaWRhdGUucmVsYXlQcm90b2NvbD17MDpcInRsc1wiLDE6XCJ0Y3BcIiwyOlwidWRwXCJ9W3QucHJpb3JpdHk+PjI0XSl9cmV0dXJuIGV9KSl9LHQuc2hpbVNlbmRUaHJvd1R5cGVFcnJvcj1mdW5jdGlvbihlKXtpZighZS5SVENQZWVyQ29ubmVjdGlvbnx8IShcImNyZWF0ZURhdGFDaGFubmVsXCJpbiBlLlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZSkpcmV0dXJuO2Z1bmN0aW9uIHQoZSx0KXt2YXIgcj1lLnNlbmQ7ZS5zZW5kPWZ1bmN0aW9uKCl7dmFyIG49YXJndW1lbnRzWzBdLGk9bi5sZW5ndGh8fG4uc2l6ZXx8bi5ieXRlTGVuZ3RoO2lmKFwib3BlblwiPT09ZS5yZWFkeVN0YXRlJiZ0LnNjdHAmJmk+dC5zY3RwLm1heE1lc3NhZ2VTaXplKXRocm93IG5ldyBUeXBlRXJyb3IoXCJNZXNzYWdlIHRvbyBsYXJnZSAoY2FuIHNlbmQgYSBtYXhpbXVtIG9mIFwiK3Quc2N0cC5tYXhNZXNzYWdlU2l6ZStcIiBieXRlcylcIik7cmV0dXJuIHIuYXBwbHkoZSxhcmd1bWVudHMpfX12YXIgcj1lLlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5jcmVhdGVEYXRhQ2hhbm5lbDtlLlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5jcmVhdGVEYXRhQ2hhbm5lbD1mdW5jdGlvbigpe3ZhciBlPXIuYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybiB0KGUsdGhpcyksZX0scy53cmFwUGVlckNvbm5lY3Rpb25FdmVudChlLFwiZGF0YWNoYW5uZWxcIiwoZnVuY3Rpb24oZSl7cmV0dXJuIHQoZS5jaGFubmVsLGUudGFyZ2V0KSxlfSkpfTt2YXIgbixpPShuPXIoNTM5KSkmJm4uX19lc01vZHVsZT9uOntkZWZhdWx0Om59LHM9ZnVuY3Rpb24oZSx0KXtpZighdCYmZSYmZS5fX2VzTW9kdWxlKXJldHVybiBlO2lmKG51bGw9PT1lfHxcIm9iamVjdFwiIT09byhlKSYmXCJmdW5jdGlvblwiIT10eXBlb2YgZSlyZXR1cm57ZGVmYXVsdDplfTt2YXIgcj1hKHQpO2lmKHImJnIuaGFzKGUpKXJldHVybiByLmdldChlKTt2YXIgbj17fSxpPU9iamVjdC5kZWZpbmVQcm9wZXJ0eSYmT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtmb3IodmFyIHMgaW4gZSlpZihcImRlZmF1bHRcIiE9PXMmJk9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHMpKXt2YXIgYz1pP09iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSxzKTpudWxsO2MmJihjLmdldHx8Yy5zZXQpP09iamVjdC5kZWZpbmVQcm9wZXJ0eShuLHMsYyk6bltzXT1lW3NdfW4uZGVmYXVsdD1lLHImJnIuc2V0KGUsbik7cmV0dXJuIG59KHIoMjg4KSk7ZnVuY3Rpb24gYShlKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBXZWFrTWFwKXJldHVybiBudWxsO3ZhciB0PW5ldyBXZWFrTWFwLHI9bmV3IFdlYWtNYXA7cmV0dXJuKGE9ZnVuY3Rpb24oZSl7cmV0dXJuIGU/cjp0fSkoZSl9ZnVuY3Rpb24gbyhlKXtyZXR1cm4gbz1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24oZSl7cmV0dXJuIHR5cGVvZiBlfTpmdW5jdGlvbihlKXtyZXR1cm4gZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZlLmNvbnN0cnVjdG9yPT09U3ltYm9sJiZlIT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiBlfSxvKGUpfX0sMzExOihlLHQscik9PntcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LnNoaW1BZGRUcmFuc2NlaXZlcj1mdW5jdGlvbihlKXtpZihcIm9iamVjdFwiIT09YyhlKXx8IWUuUlRDUGVlckNvbm5lY3Rpb24pcmV0dXJuO3ZhciB0PWUuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmFkZFRyYW5zY2VpdmVyO3QmJihlLlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRUcmFuc2NlaXZlcj1mdW5jdGlvbigpe3RoaXMuc2V0UGFyYW1ldGVyc1Byb21pc2VzPVtdO3ZhciBlLHI9YXJndW1lbnRzWzFdJiZhcmd1bWVudHNbMV0uc2VuZEVuY29kaW5nczt2b2lkIDA9PT1yJiYocj1bXSk7dmFyIG49KHI9ZnVuY3Rpb24oZSl7aWYoQXJyYXkuaXNBcnJheShlKSlyZXR1cm4gbyhlKX0oZT1yKXx8ZnVuY3Rpb24oZSl7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmbnVsbCE9ZVtTeW1ib2wuaXRlcmF0b3JdfHxudWxsIT1lW1wiQEBpdGVyYXRvclwiXSlyZXR1cm4gQXJyYXkuZnJvbShlKX0oZSl8fGZ1bmN0aW9uKGUsdCl7aWYoZSl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUpcmV0dXJuIG8oZSx0KTt2YXIgcj1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkuc2xpY2UoOCwtMSk7cmV0dXJuXCJPYmplY3RcIj09PXImJmUuY29uc3RydWN0b3ImJihyPWUuY29uc3RydWN0b3IubmFtZSksXCJNYXBcIj09PXJ8fFwiU2V0XCI9PT1yP0FycmF5LmZyb20oZSk6XCJBcmd1bWVudHNcIj09PXJ8fC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KHIpP28oZSx0KTp2b2lkIDB9fShlKXx8ZnVuY3Rpb24oKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKX0oKSkubGVuZ3RoPjA7biYmci5mb3JFYWNoKChmdW5jdGlvbihlKXtpZihcInJpZFwiaW4gZSl7aWYoIS9eW2EtejAtOV17MCwxNn0kL2kudGVzdChlLnJpZCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgUklEIHZhbHVlIHByb3ZpZGVkLlwiKX1pZihcInNjYWxlUmVzb2x1dGlvbkRvd25CeVwiaW4gZSYmIShwYXJzZUZsb2F0KGUuc2NhbGVSZXNvbHV0aW9uRG93bkJ5KT49MSkpdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJzY2FsZV9yZXNvbHV0aW9uX2Rvd25fYnkgbXVzdCBiZSA+PSAxLjBcIik7aWYoXCJtYXhGcmFtZXJhdGVcImluIGUmJiEocGFyc2VGbG9hdChlLm1heEZyYW1lcmF0ZSk+PTApKXRocm93IG5ldyBSYW5nZUVycm9yKFwibWF4X2ZyYW1lcmF0ZSBtdXN0IGJlID49IDAuMFwiKX0pKTt2YXIgaT10LmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihuKXt2YXIgcz1pLnNlbmRlcixhPXMuZ2V0UGFyYW1ldGVycygpOyghKFwiZW5jb2RpbmdzXCJpbiBhKXx8MT09PWEuZW5jb2RpbmdzLmxlbmd0aCYmMD09PU9iamVjdC5rZXlzKGEuZW5jb2RpbmdzWzBdKS5sZW5ndGgpJiYoYS5lbmNvZGluZ3M9cixzLnNlbmRFbmNvZGluZ3M9cix0aGlzLnNldFBhcmFtZXRlcnNQcm9taXNlcy5wdXNoKHMuc2V0UGFyYW1ldGVycyhhKS50aGVuKChmdW5jdGlvbigpe2RlbGV0ZSBzLnNlbmRFbmNvZGluZ3N9KSkuY2F0Y2goKGZ1bmN0aW9uKCl7ZGVsZXRlIHMuc2VuZEVuY29kaW5nc30pKSkpfXJldHVybiBpfSl9LHQuc2hpbUNyZWF0ZUFuc3dlcj1mdW5jdGlvbihlKXtpZihcIm9iamVjdFwiIT09YyhlKXx8IWUuUlRDUGVlckNvbm5lY3Rpb24pcmV0dXJuO3ZhciB0PWUuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmNyZWF0ZUFuc3dlcjtlLlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5jcmVhdGVBbnN3ZXI9ZnVuY3Rpb24oKXt2YXIgZT1hcmd1bWVudHMscj10aGlzO3JldHVybiB0aGlzLnNldFBhcmFtZXRlcnNQcm9taXNlcyYmdGhpcy5zZXRQYXJhbWV0ZXJzUHJvbWlzZXMubGVuZ3RoP1Byb21pc2UuYWxsKHRoaXMuc2V0UGFyYW1ldGVyc1Byb21pc2VzKS50aGVuKChmdW5jdGlvbigpe3JldHVybiB0LmFwcGx5KHIsZSl9KSkuZmluYWxseSgoZnVuY3Rpb24oKXtyLnNldFBhcmFtZXRlcnNQcm9taXNlcz1bXX0pKTp0LmFwcGx5KHRoaXMsYXJndW1lbnRzKX19LHQuc2hpbUNyZWF0ZU9mZmVyPWZ1bmN0aW9uKGUpe2lmKFwib2JqZWN0XCIhPT1jKGUpfHwhZS5SVENQZWVyQ29ubmVjdGlvbilyZXR1cm47dmFyIHQ9ZS5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuY3JlYXRlT2ZmZXI7ZS5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuY3JlYXRlT2ZmZXI9ZnVuY3Rpb24oKXt2YXIgZT1hcmd1bWVudHMscj10aGlzO3JldHVybiB0aGlzLnNldFBhcmFtZXRlcnNQcm9taXNlcyYmdGhpcy5zZXRQYXJhbWV0ZXJzUHJvbWlzZXMubGVuZ3RoP1Byb21pc2UuYWxsKHRoaXMuc2V0UGFyYW1ldGVyc1Byb21pc2VzKS50aGVuKChmdW5jdGlvbigpe3JldHVybiB0LmFwcGx5KHIsZSl9KSkuZmluYWxseSgoZnVuY3Rpb24oKXtyLnNldFBhcmFtZXRlcnNQcm9taXNlcz1bXX0pKTp0LmFwcGx5KHRoaXMsYXJndW1lbnRzKX19LE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwic2hpbUdldERpc3BsYXlNZWRpYVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBzLnNoaW1HZXREaXNwbGF5TWVkaWF9fSksdC5zaGltR2V0UGFyYW1ldGVycz1mdW5jdGlvbihlKXtpZihcIm9iamVjdFwiIT09YyhlKXx8IWUuUlRDUnRwU2VuZGVyKXJldHVybjt2YXIgdD1lLlJUQ1J0cFNlbmRlci5wcm90b3R5cGUuZ2V0UGFyYW1ldGVyczt0JiYoZS5SVENSdHBTZW5kZXIucHJvdG90eXBlLmdldFBhcmFtZXRlcnM9ZnVuY3Rpb24oKXt2YXIgZT10LmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm5cImVuY29kaW5nc1wiaW4gZXx8KGUuZW5jb2RpbmdzPVtdLmNvbmNhdCh0aGlzLnNlbmRFbmNvZGluZ3N8fFt7fV0pKSxlfSl9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwic2hpbUdldFVzZXJNZWRpYVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBpLnNoaW1HZXRVc2VyTWVkaWF9fSksdC5zaGltT25UcmFjaz1mdW5jdGlvbihlKXtcIm9iamVjdFwiPT09YyhlKSYmZS5SVENUcmFja0V2ZW50JiZcInJlY2VpdmVyXCJpbiBlLlJUQ1RyYWNrRXZlbnQucHJvdG90eXBlJiYhKFwidHJhbnNjZWl2ZXJcImluIGUuUlRDVHJhY2tFdmVudC5wcm90b3R5cGUpJiZPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5SVENUcmFja0V2ZW50LnByb3RvdHlwZSxcInRyYW5zY2VpdmVyXCIse2dldDpmdW5jdGlvbigpe3JldHVybntyZWNlaXZlcjp0aGlzLnJlY2VpdmVyfX19KX0sdC5zaGltUGVlckNvbm5lY3Rpb249ZnVuY3Rpb24oZSx0KXtpZihcIm9iamVjdFwiIT09YyhlKXx8IWUuUlRDUGVlckNvbm5lY3Rpb24mJiFlLm1velJUQ1BlZXJDb25uZWN0aW9uKXJldHVybjshZS5SVENQZWVyQ29ubmVjdGlvbiYmZS5tb3pSVENQZWVyQ29ubmVjdGlvbiYmKGUuUlRDUGVlckNvbm5lY3Rpb249ZS5tb3pSVENQZWVyQ29ubmVjdGlvbik7dC52ZXJzaW9uPDUzJiZbXCJzZXRMb2NhbERlc2NyaXB0aW9uXCIsXCJzZXRSZW1vdGVEZXNjcmlwdGlvblwiLFwiYWRkSWNlQ2FuZGlkYXRlXCJdLmZvckVhY2goKGZ1bmN0aW9uKHQpe3ZhciByPWUuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlW3RdLG49ZnVuY3Rpb24oZSx0LHIpeyh0PWZ1bmN0aW9uKGUpe3ZhciB0PWZ1bmN0aW9uKGUsdCl7aWYoXCJvYmplY3RcIiE9PWMoZSl8fG51bGw9PT1lKXJldHVybiBlO3ZhciByPWVbU3ltYm9sLnRvUHJpbWl0aXZlXTtpZih2b2lkIDAhPT1yKXt2YXIgbj1yLmNhbGwoZSx0fHxcImRlZmF1bHRcIik7aWYoXCJvYmplY3RcIiE9PWMobikpcmV0dXJuIG47dGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpfXJldHVybihcInN0cmluZ1wiPT09dD9TdHJpbmc6TnVtYmVyKShlKX0oZSxcInN0cmluZ1wiKTtyZXR1cm5cInN5bWJvbFwiPT09Yyh0KT90OlN0cmluZyh0KX0odCkpaW4gZT9PYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0LHt2YWx1ZTpyLGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwfSk6ZVt0XT1yO3JldHVybiBlfSh7fSx0LChmdW5jdGlvbigpe3JldHVybiBhcmd1bWVudHNbMF09bmV3KFwiYWRkSWNlQ2FuZGlkYXRlXCI9PT10P2UuUlRDSWNlQ2FuZGlkYXRlOmUuUlRDU2Vzc2lvbkRlc2NyaXB0aW9uKShhcmd1bWVudHNbMF0pLHIuYXBwbHkodGhpcyxhcmd1bWVudHMpfSkpO2UuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlW3RdPW5bdF19KSk7dmFyIHI9e2luYm91bmRydHA6XCJpbmJvdW5kLXJ0cFwiLG91dGJvdW5kcnRwOlwib3V0Ym91bmQtcnRwXCIsY2FuZGlkYXRlcGFpcjpcImNhbmRpZGF0ZS1wYWlyXCIsbG9jYWxjYW5kaWRhdGU6XCJsb2NhbC1jYW5kaWRhdGVcIixyZW1vdGVjYW5kaWRhdGU6XCJyZW1vdGUtY2FuZGlkYXRlXCJ9LG49ZS5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0U3RhdHM7ZS5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0U3RhdHM9ZnVuY3Rpb24oKXt2YXIgZT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpLGk9ZVswXSxzPWVbMV0sYT1lWzJdO3JldHVybiBuLmFwcGx5KHRoaXMsW2l8fG51bGxdKS50aGVuKChmdW5jdGlvbihlKXtpZih0LnZlcnNpb248NTMmJiFzKXRyeXtlLmZvckVhY2goKGZ1bmN0aW9uKGUpe2UudHlwZT1yW2UudHlwZV18fGUudHlwZX0pKX1jYXRjaCh0KXtpZihcIlR5cGVFcnJvclwiIT09dC5uYW1lKXRocm93IHQ7ZS5mb3JFYWNoKChmdW5jdGlvbih0LG4pe2Uuc2V0KG4sT2JqZWN0LmFzc2lnbih7fSx0LHt0eXBlOnJbdC50eXBlXXx8dC50eXBlfSkpfSkpfXJldHVybiBlfSkpLnRoZW4ocyxhKX19LHQuc2hpbVJUQ0RhdGFDaGFubmVsPWZ1bmN0aW9uKGUpe2UuRGF0YUNoYW5uZWwmJiFlLlJUQ0RhdGFDaGFubmVsJiYoZS5SVENEYXRhQ2hhbm5lbD1lLkRhdGFDaGFubmVsKX0sdC5zaGltUmVjZWl2ZXJHZXRTdGF0cz1mdW5jdGlvbihlKXtpZihcIm9iamVjdFwiIT09YyhlKXx8IWUuUlRDUGVlckNvbm5lY3Rpb258fCFlLlJUQ1J0cFNlbmRlcilyZXR1cm47aWYoZS5SVENSdHBTZW5kZXImJlwiZ2V0U3RhdHNcImluIGUuUlRDUnRwUmVjZWl2ZXIucHJvdG90eXBlKXJldHVybjt2YXIgdD1lLlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5nZXRSZWNlaXZlcnM7dCYmKGUuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmdldFJlY2VpdmVycz1mdW5jdGlvbigpe3ZhciBlPXRoaXMscj10LmFwcGx5KHRoaXMsW10pO3JldHVybiByLmZvckVhY2goKGZ1bmN0aW9uKHQpe3JldHVybiB0Ll9wYz1lfSkpLHJ9KTtuLndyYXBQZWVyQ29ubmVjdGlvbkV2ZW50KGUsXCJ0cmFja1wiLChmdW5jdGlvbihlKXtyZXR1cm4gZS5yZWNlaXZlci5fcGM9ZS5zcmNFbGVtZW50LGV9KSksZS5SVENSdHBSZWNlaXZlci5wcm90b3R5cGUuZ2V0U3RhdHM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fcGMuZ2V0U3RhdHModGhpcy50cmFjayl9fSx0LnNoaW1SZW1vdmVTdHJlYW09ZnVuY3Rpb24oZSl7aWYoIWUuUlRDUGVlckNvbm5lY3Rpb258fFwicmVtb3ZlU3RyZWFtXCJpbiBlLlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZSlyZXR1cm47ZS5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUucmVtb3ZlU3RyZWFtPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7bi5kZXByZWNhdGVkKFwicmVtb3ZlU3RyZWFtXCIsXCJyZW1vdmVUcmFja1wiKSx0aGlzLmdldFNlbmRlcnMoKS5mb3JFYWNoKChmdW5jdGlvbihyKXtyLnRyYWNrJiZlLmdldFRyYWNrcygpLmluY2x1ZGVzKHIudHJhY2spJiZ0LnJlbW92ZVRyYWNrKHIpfSkpfX0sdC5zaGltU2VuZGVyR2V0U3RhdHM9ZnVuY3Rpb24oZSl7aWYoXCJvYmplY3RcIiE9PWMoZSl8fCFlLlJUQ1BlZXJDb25uZWN0aW9ufHwhZS5SVENSdHBTZW5kZXIpcmV0dXJuO2lmKGUuUlRDUnRwU2VuZGVyJiZcImdldFN0YXRzXCJpbiBlLlJUQ1J0cFNlbmRlci5wcm90b3R5cGUpcmV0dXJuO3ZhciB0PWUuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmdldFNlbmRlcnM7dCYmKGUuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmdldFNlbmRlcnM9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHI9dC5hcHBseSh0aGlzLFtdKTtyZXR1cm4gci5mb3JFYWNoKChmdW5jdGlvbih0KXtyZXR1cm4gdC5fcGM9ZX0pKSxyfSk7dmFyIHI9ZS5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuYWRkVHJhY2s7ciYmKGUuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmFkZFRyYWNrPWZ1bmN0aW9uKCl7dmFyIGU9ci5hcHBseSh0aGlzLGFyZ3VtZW50cyk7cmV0dXJuIGUuX3BjPXRoaXMsZX0pO2UuUlRDUnRwU2VuZGVyLnByb3RvdHlwZS5nZXRTdGF0cz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRyYWNrP3RoaXMuX3BjLmdldFN0YXRzKHRoaXMudHJhY2spOlByb21pc2UucmVzb2x2ZShuZXcgTWFwKX19O3ZhciBuPWZ1bmN0aW9uKGUsdCl7aWYoIXQmJmUmJmUuX19lc01vZHVsZSlyZXR1cm4gZTtpZihudWxsPT09ZXx8XCJvYmplY3RcIiE9PWMoZSkmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIGUpcmV0dXJue2RlZmF1bHQ6ZX07dmFyIHI9YSh0KTtpZihyJiZyLmhhcyhlKSlyZXR1cm4gci5nZXQoZSk7dmFyIG49e30saT1PYmplY3QuZGVmaW5lUHJvcGVydHkmJk9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7Zm9yKHZhciBzIGluIGUpaWYoXCJkZWZhdWx0XCIhPT1zJiZPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxzKSl7dmFyIG89aT9PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUscyk6bnVsbDtvJiYoby5nZXR8fG8uc2V0KT9PYmplY3QuZGVmaW5lUHJvcGVydHkobixzLG8pOm5bc109ZVtzXX1uLmRlZmF1bHQ9ZSxyJiZyLnNldChlLG4pO3JldHVybiBufShyKDI4OCkpLGk9cig1MzIpLHM9cigxNDMpO2Z1bmN0aW9uIGEoZSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgV2Vha01hcClyZXR1cm4gbnVsbDt2YXIgdD1uZXcgV2Vha01hcCxyPW5ldyBXZWFrTWFwO3JldHVybihhPWZ1bmN0aW9uKGUpe3JldHVybiBlP3I6dH0pKGUpfWZ1bmN0aW9uIG8oZSx0KXsobnVsbD09dHx8dD5lLmxlbmd0aCkmJih0PWUubGVuZ3RoKTtmb3IodmFyIHI9MCxuPW5ldyBBcnJheSh0KTtyPHQ7cisrKW5bcl09ZVtyXTtyZXR1cm4gbn1mdW5jdGlvbiBjKGUpe3JldHVybiBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbihlKXtyZXR1cm4gdHlwZW9mIGV9OmZ1bmN0aW9uKGUpe3JldHVybiBlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJmUuY29uc3RydWN0b3I9PT1TeW1ib2wmJmUhPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIGV9LGMoZSl9fSwxNDM6KGUsdCk9PntcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LnNoaW1HZXREaXNwbGF5TWVkaWE9ZnVuY3Rpb24oZSx0KXtpZihlLm5hdmlnYXRvci5tZWRpYURldmljZXMmJlwiZ2V0RGlzcGxheU1lZGlhXCJpbiBlLm5hdmlnYXRvci5tZWRpYURldmljZXMpcmV0dXJuO2lmKCFlLm5hdmlnYXRvci5tZWRpYURldmljZXMpcmV0dXJuO2UubmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXREaXNwbGF5TWVkaWE9ZnVuY3Rpb24ocil7aWYoIXJ8fCFyLnZpZGVvKXt2YXIgbj1uZXcgRE9NRXhjZXB0aW9uKFwiZ2V0RGlzcGxheU1lZGlhIHdpdGhvdXQgdmlkZW8gY29uc3RyYWludHMgaXMgdW5kZWZpbmVkXCIpO3JldHVybiBuLm5hbWU9XCJOb3RGb3VuZEVycm9yXCIsbi5jb2RlPTgsUHJvbWlzZS5yZWplY3Qobil9cmV0dXJuITA9PT1yLnZpZGVvP3IudmlkZW89e21lZGlhU291cmNlOnR9OnIudmlkZW8ubWVkaWFTb3VyY2U9dCxlLm5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKHIpfX19LDUzMjooZSx0LHIpPT57XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5zaGltR2V0VXNlck1lZGlhPWZ1bmN0aW9uKGUsdCl7dmFyIHI9ZSYmZS5uYXZpZ2F0b3IsaT1lJiZlLk1lZGlhU3RyZWFtVHJhY2s7aWYoci5nZXRVc2VyTWVkaWE9ZnVuY3Rpb24oZSx0LGkpe24uZGVwcmVjYXRlZChcIm5hdmlnYXRvci5nZXRVc2VyTWVkaWFcIixcIm5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhXCIpLHIubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYShlKS50aGVuKHQsaSl9LCEodC52ZXJzaW9uPjU1JiZcImF1dG9HYWluQ29udHJvbFwiaW4gci5tZWRpYURldmljZXMuZ2V0U3VwcG9ydGVkQ29uc3RyYWludHMoKSkpe3ZhciBhPWZ1bmN0aW9uKGUsdCxyKXt0IGluIGUmJiEociBpbiBlKSYmKGVbcl09ZVt0XSxkZWxldGUgZVt0XSl9LG89ci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhLmJpbmQoci5tZWRpYURldmljZXMpO2lmKHIubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYT1mdW5jdGlvbihlKXtyZXR1cm5cIm9iamVjdFwiPT09cyhlKSYmXCJvYmplY3RcIj09PXMoZS5hdWRpbykmJihlPUpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZSkpLGEoZS5hdWRpbyxcImF1dG9HYWluQ29udHJvbFwiLFwibW96QXV0b0dhaW5Db250cm9sXCIpLGEoZS5hdWRpbyxcIm5vaXNlU3VwcHJlc3Npb25cIixcIm1vek5vaXNlU3VwcHJlc3Npb25cIikpLG8oZSl9LGkmJmkucHJvdG90eXBlLmdldFNldHRpbmdzKXt2YXIgYz1pLnByb3RvdHlwZS5nZXRTZXR0aW5ncztpLnByb3RvdHlwZS5nZXRTZXR0aW5ncz1mdW5jdGlvbigpe3ZhciBlPWMuYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybiBhKGUsXCJtb3pBdXRvR2FpbkNvbnRyb2xcIixcImF1dG9HYWluQ29udHJvbFwiKSxhKGUsXCJtb3pOb2lzZVN1cHByZXNzaW9uXCIsXCJub2lzZVN1cHByZXNzaW9uXCIpLGV9fWlmKGkmJmkucHJvdG90eXBlLmFwcGx5Q29uc3RyYWludHMpe3ZhciBkPWkucHJvdG90eXBlLmFwcGx5Q29uc3RyYWludHM7aS5wcm90b3R5cGUuYXBwbHlDb25zdHJhaW50cz1mdW5jdGlvbihlKXtyZXR1cm5cImF1ZGlvXCI9PT10aGlzLmtpbmQmJlwib2JqZWN0XCI9PT1zKGUpJiYoZT1KU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGUpKSxhKGUsXCJhdXRvR2FpbkNvbnRyb2xcIixcIm1vekF1dG9HYWluQ29udHJvbFwiKSxhKGUsXCJub2lzZVN1cHByZXNzaW9uXCIsXCJtb3pOb2lzZVN1cHByZXNzaW9uXCIpKSxkLmFwcGx5KHRoaXMsW2VdKX19fX07dmFyIG49ZnVuY3Rpb24oZSx0KXtpZighdCYmZSYmZS5fX2VzTW9kdWxlKXJldHVybiBlO2lmKG51bGw9PT1lfHxcIm9iamVjdFwiIT09cyhlKSYmXCJmdW5jdGlvblwiIT10eXBlb2YgZSlyZXR1cm57ZGVmYXVsdDplfTt2YXIgcj1pKHQpO2lmKHImJnIuaGFzKGUpKXJldHVybiByLmdldChlKTt2YXIgbj17fSxhPU9iamVjdC5kZWZpbmVQcm9wZXJ0eSYmT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtmb3IodmFyIG8gaW4gZSlpZihcImRlZmF1bHRcIiE9PW8mJk9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLG8pKXt2YXIgYz1hP09iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSxvKTpudWxsO2MmJihjLmdldHx8Yy5zZXQpP09iamVjdC5kZWZpbmVQcm9wZXJ0eShuLG8sYyk6bltvXT1lW29dfW4uZGVmYXVsdD1lLHImJnIuc2V0KGUsbik7cmV0dXJuIG59KHIoMjg4KSk7ZnVuY3Rpb24gaShlKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBXZWFrTWFwKXJldHVybiBudWxsO3ZhciB0PW5ldyBXZWFrTWFwLHI9bmV3IFdlYWtNYXA7cmV0dXJuKGk9ZnVuY3Rpb24oZSl7cmV0dXJuIGU/cjp0fSkoZSl9ZnVuY3Rpb24gcyhlKXtyZXR1cm4gcz1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24oZSl7cmV0dXJuIHR5cGVvZiBlfTpmdW5jdGlvbihlKXtyZXR1cm4gZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZlLmNvbnN0cnVjdG9yPT09U3ltYm9sJiZlIT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiBlfSxzKGUpfX0sNTQwOihlLHQscik9PntcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LnNoaW1BdWRpb0NvbnRleHQ9ZnVuY3Rpb24oZSl7aWYoXCJvYmplY3RcIiE9PXMoZSl8fGUuQXVkaW9Db250ZXh0KXJldHVybjtlLkF1ZGlvQ29udGV4dD1lLndlYmtpdEF1ZGlvQ29udGV4dH0sdC5zaGltQ2FsbGJhY2tzQVBJPWZ1bmN0aW9uKGUpe2lmKFwib2JqZWN0XCIhPT1zKGUpfHwhZS5SVENQZWVyQ29ubmVjdGlvbilyZXR1cm47dmFyIHQ9ZS5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUscj10LmNyZWF0ZU9mZmVyLG49dC5jcmVhdGVBbnN3ZXIsaT10LnNldExvY2FsRGVzY3JpcHRpb24sYT10LnNldFJlbW90ZURlc2NyaXB0aW9uLG89dC5hZGRJY2VDYW5kaWRhdGU7dC5jcmVhdGVPZmZlcj1mdW5jdGlvbihlLHQpe3ZhciBuPWFyZ3VtZW50cy5sZW5ndGg+PTI/YXJndW1lbnRzWzJdOmFyZ3VtZW50c1swXSxpPXIuYXBwbHkodGhpcyxbbl0pO3JldHVybiB0PyhpLnRoZW4oZSx0KSxQcm9taXNlLnJlc29sdmUoKSk6aX0sdC5jcmVhdGVBbnN3ZXI9ZnVuY3Rpb24oZSx0KXt2YXIgcj1hcmd1bWVudHMubGVuZ3RoPj0yP2FyZ3VtZW50c1syXTphcmd1bWVudHNbMF0saT1uLmFwcGx5KHRoaXMsW3JdKTtyZXR1cm4gdD8oaS50aGVuKGUsdCksUHJvbWlzZS5yZXNvbHZlKCkpOml9O3ZhciBjPWZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1pLmFwcGx5KHRoaXMsW2VdKTtyZXR1cm4gcj8obi50aGVuKHQsciksUHJvbWlzZS5yZXNvbHZlKCkpOm59O3Quc2V0TG9jYWxEZXNjcmlwdGlvbj1jLGM9ZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWEuYXBwbHkodGhpcyxbZV0pO3JldHVybiByPyhuLnRoZW4odCxyKSxQcm9taXNlLnJlc29sdmUoKSk6bn0sdC5zZXRSZW1vdGVEZXNjcmlwdGlvbj1jLGM9ZnVuY3Rpb24oZSx0LHIpe3ZhciBuPW8uYXBwbHkodGhpcyxbZV0pO3JldHVybiByPyhuLnRoZW4odCxyKSxQcm9taXNlLnJlc29sdmUoKSk6bn0sdC5hZGRJY2VDYW5kaWRhdGU9Y30sdC5zaGltQ29uc3RyYWludHM9YSx0LnNoaW1DcmVhdGVPZmZlckxlZ2FjeT1mdW5jdGlvbihlKXt2YXIgdD1lLlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5jcmVhdGVPZmZlcjtlLlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5jcmVhdGVPZmZlcj1mdW5jdGlvbihlKXtpZihlKXt2b2lkIDAhPT1lLm9mZmVyVG9SZWNlaXZlQXVkaW8mJihlLm9mZmVyVG9SZWNlaXZlQXVkaW89ISFlLm9mZmVyVG9SZWNlaXZlQXVkaW8pO3ZhciByPXRoaXMuZ2V0VHJhbnNjZWl2ZXJzKCkuZmluZCgoZnVuY3Rpb24oZSl7cmV0dXJuXCJhdWRpb1wiPT09ZS5yZWNlaXZlci50cmFjay5raW5kfSkpOyExPT09ZS5vZmZlclRvUmVjZWl2ZUF1ZGlvJiZyP1wic2VuZHJlY3ZcIj09PXIuZGlyZWN0aW9uP3Iuc2V0RGlyZWN0aW9uP3Iuc2V0RGlyZWN0aW9uKFwic2VuZG9ubHlcIik6ci5kaXJlY3Rpb249XCJzZW5kb25seVwiOlwicmVjdm9ubHlcIj09PXIuZGlyZWN0aW9uJiYoci5zZXREaXJlY3Rpb24/ci5zZXREaXJlY3Rpb24oXCJpbmFjdGl2ZVwiKTpyLmRpcmVjdGlvbj1cImluYWN0aXZlXCIpOiEwIT09ZS5vZmZlclRvUmVjZWl2ZUF1ZGlvfHxyfHx0aGlzLmFkZFRyYW5zY2VpdmVyKFwiYXVkaW9cIix7ZGlyZWN0aW9uOlwicmVjdm9ubHlcIn0pLHZvaWQgMCE9PWUub2ZmZXJUb1JlY2VpdmVWaWRlbyYmKGUub2ZmZXJUb1JlY2VpdmVWaWRlbz0hIWUub2ZmZXJUb1JlY2VpdmVWaWRlbyk7dmFyIG49dGhpcy5nZXRUcmFuc2NlaXZlcnMoKS5maW5kKChmdW5jdGlvbihlKXtyZXR1cm5cInZpZGVvXCI9PT1lLnJlY2VpdmVyLnRyYWNrLmtpbmR9KSk7ITE9PT1lLm9mZmVyVG9SZWNlaXZlVmlkZW8mJm4/XCJzZW5kcmVjdlwiPT09bi5kaXJlY3Rpb24/bi5zZXREaXJlY3Rpb24/bi5zZXREaXJlY3Rpb24oXCJzZW5kb25seVwiKTpuLmRpcmVjdGlvbj1cInNlbmRvbmx5XCI6XCJyZWN2b25seVwiPT09bi5kaXJlY3Rpb24mJihuLnNldERpcmVjdGlvbj9uLnNldERpcmVjdGlvbihcImluYWN0aXZlXCIpOm4uZGlyZWN0aW9uPVwiaW5hY3RpdmVcIik6ITAhPT1lLm9mZmVyVG9SZWNlaXZlVmlkZW98fG58fHRoaXMuYWRkVHJhbnNjZWl2ZXIoXCJ2aWRlb1wiLHtkaXJlY3Rpb246XCJyZWN2b25seVwifSl9cmV0dXJuIHQuYXBwbHkodGhpcyxhcmd1bWVudHMpfX0sdC5zaGltR2V0VXNlck1lZGlhPWZ1bmN0aW9uKGUpe3ZhciB0PWUmJmUubmF2aWdhdG9yO2lmKHQubWVkaWFEZXZpY2VzJiZ0Lm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEpe3ZhciByPXQubWVkaWFEZXZpY2VzLG49ci5nZXRVc2VyTWVkaWEuYmluZChyKTt0Lm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWE9ZnVuY3Rpb24oZSl7cmV0dXJuIG4oYShlKSl9fSF0LmdldFVzZXJNZWRpYSYmdC5tZWRpYURldmljZXMmJnQubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYSYmKHQuZ2V0VXNlck1lZGlhPWZ1bmN0aW9uKGUscixuKXt0Lm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEoZSkudGhlbihyLG4pfS5iaW5kKHQpKX0sdC5zaGltTG9jYWxTdHJlYW1zQVBJPWZ1bmN0aW9uKGUpe2lmKFwib2JqZWN0XCIhPT1zKGUpfHwhZS5SVENQZWVyQ29ubmVjdGlvbilyZXR1cm47XCJnZXRMb2NhbFN0cmVhbXNcImluIGUuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlfHwoZS5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0TG9jYWxTdHJlYW1zPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2xvY2FsU3RyZWFtc3x8KHRoaXMuX2xvY2FsU3RyZWFtcz1bXSksdGhpcy5fbG9jYWxTdHJlYW1zfSk7aWYoIShcImFkZFN0cmVhbVwiaW4gZS5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUpKXt2YXIgdD1lLlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRUcmFjaztlLlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRTdHJlYW09ZnVuY3Rpb24oZSl7dmFyIHI9dGhpczt0aGlzLl9sb2NhbFN0cmVhbXN8fCh0aGlzLl9sb2NhbFN0cmVhbXM9W10pLHRoaXMuX2xvY2FsU3RyZWFtcy5pbmNsdWRlcyhlKXx8dGhpcy5fbG9jYWxTdHJlYW1zLnB1c2goZSksZS5nZXRBdWRpb1RyYWNrcygpLmZvckVhY2goKGZ1bmN0aW9uKG4pe3JldHVybiB0LmNhbGwocixuLGUpfSkpLGUuZ2V0VmlkZW9UcmFja3MoKS5mb3JFYWNoKChmdW5jdGlvbihuKXtyZXR1cm4gdC5jYWxsKHIsbixlKX0pKX0sZS5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuYWRkVHJhY2s9ZnVuY3Rpb24oZSl7Zm9yKHZhciByPXRoaXMsbj1hcmd1bWVudHMubGVuZ3RoLGk9bmV3IEFycmF5KG4+MT9uLTE6MCkscz0xO3M8bjtzKyspaVtzLTFdPWFyZ3VtZW50c1tzXTtyZXR1cm4gaSYmaS5mb3JFYWNoKChmdW5jdGlvbihlKXtyLl9sb2NhbFN0cmVhbXM/ci5fbG9jYWxTdHJlYW1zLmluY2x1ZGVzKGUpfHxyLl9sb2NhbFN0cmVhbXMucHVzaChlKTpyLl9sb2NhbFN0cmVhbXM9W2VdfSkpLHQuYXBwbHkodGhpcyxhcmd1bWVudHMpfX1cInJlbW92ZVN0cmVhbVwiaW4gZS5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGV8fChlLlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5yZW1vdmVTdHJlYW09ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpczt0aGlzLl9sb2NhbFN0cmVhbXN8fCh0aGlzLl9sb2NhbFN0cmVhbXM9W10pO3ZhciByPXRoaXMuX2xvY2FsU3RyZWFtcy5pbmRleE9mKGUpO2lmKC0xIT09cil7dGhpcy5fbG9jYWxTdHJlYW1zLnNwbGljZShyLDEpO3ZhciBuPWUuZ2V0VHJhY2tzKCk7dGhpcy5nZXRTZW5kZXJzKCkuZm9yRWFjaCgoZnVuY3Rpb24oZSl7bi5pbmNsdWRlcyhlLnRyYWNrKSYmdC5yZW1vdmVUcmFjayhlKX0pKX19KX0sdC5zaGltUlRDSWNlU2VydmVyVXJscz1mdW5jdGlvbihlKXtpZighZS5SVENQZWVyQ29ubmVjdGlvbilyZXR1cm47dmFyIHQ9ZS5SVENQZWVyQ29ubmVjdGlvbjtlLlJUQ1BlZXJDb25uZWN0aW9uPWZ1bmN0aW9uKGUscil7aWYoZSYmZS5pY2VTZXJ2ZXJzKXtmb3IodmFyIGk9W10scz0wO3M8ZS5pY2VTZXJ2ZXJzLmxlbmd0aDtzKyspe3ZhciBhPWUuaWNlU2VydmVyc1tzXTt2b2lkIDA9PT1hLnVybHMmJmEudXJsPyhuLmRlcHJlY2F0ZWQoXCJSVENJY2VTZXJ2ZXIudXJsXCIsXCJSVENJY2VTZXJ2ZXIudXJsc1wiKSwoYT1KU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGEpKSkudXJscz1hLnVybCxkZWxldGUgYS51cmwsaS5wdXNoKGEpKTppLnB1c2goZS5pY2VTZXJ2ZXJzW3NdKX1lLmljZVNlcnZlcnM9aX1yZXR1cm4gbmV3IHQoZSxyKX0sZS5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGU9dC5wcm90b3R5cGUsXCJnZW5lcmF0ZUNlcnRpZmljYXRlXCJpbiB0JiZPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5SVENQZWVyQ29ubmVjdGlvbixcImdlbmVyYXRlQ2VydGlmaWNhdGVcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHQuZ2VuZXJhdGVDZXJ0aWZpY2F0ZX19KX0sdC5zaGltUmVtb3RlU3RyZWFtc0FQST1mdW5jdGlvbihlKXtpZihcIm9iamVjdFwiIT09cyhlKXx8IWUuUlRDUGVlckNvbm5lY3Rpb24pcmV0dXJuO1wiZ2V0UmVtb3RlU3RyZWFtc1wiaW4gZS5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGV8fChlLlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5nZXRSZW1vdGVTdHJlYW1zPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3JlbW90ZVN0cmVhbXM/dGhpcy5fcmVtb3RlU3RyZWFtczpbXX0pO2lmKCEoXCJvbmFkZHN0cmVhbVwiaW4gZS5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUpKXtPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUsXCJvbmFkZHN0cmVhbVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fb25hZGRzdHJlYW19LHNldDpmdW5jdGlvbihlKXt2YXIgdD10aGlzO3RoaXMuX29uYWRkc3RyZWFtJiYodGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKFwiYWRkc3RyZWFtXCIsdGhpcy5fb25hZGRzdHJlYW0pLHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRyYWNrXCIsdGhpcy5fb25hZGRzdHJlYW1wb2x5KSksdGhpcy5hZGRFdmVudExpc3RlbmVyKFwiYWRkc3RyZWFtXCIsdGhpcy5fb25hZGRzdHJlYW09ZSksdGhpcy5hZGRFdmVudExpc3RlbmVyKFwidHJhY2tcIix0aGlzLl9vbmFkZHN0cmVhbXBvbHk9ZnVuY3Rpb24oZSl7ZS5zdHJlYW1zLmZvckVhY2goKGZ1bmN0aW9uKGUpe2lmKHQuX3JlbW90ZVN0cmVhbXN8fCh0Ll9yZW1vdGVTdHJlYW1zPVtdKSwhdC5fcmVtb3RlU3RyZWFtcy5pbmNsdWRlcyhlKSl7dC5fcmVtb3RlU3RyZWFtcy5wdXNoKGUpO3ZhciByPW5ldyBFdmVudChcImFkZHN0cmVhbVwiKTtyLnN0cmVhbT1lLHQuZGlzcGF0Y2hFdmVudChyKX19KSl9KX19KTt2YXIgdD1lLlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5zZXRSZW1vdGVEZXNjcmlwdGlvbjtlLlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5zZXRSZW1vdGVEZXNjcmlwdGlvbj1mdW5jdGlvbigpe3ZhciBlPXRoaXM7cmV0dXJuIHRoaXMuX29uYWRkc3RyZWFtcG9seXx8dGhpcy5hZGRFdmVudExpc3RlbmVyKFwidHJhY2tcIix0aGlzLl9vbmFkZHN0cmVhbXBvbHk9ZnVuY3Rpb24odCl7dC5zdHJlYW1zLmZvckVhY2goKGZ1bmN0aW9uKHQpe2lmKGUuX3JlbW90ZVN0cmVhbXN8fChlLl9yZW1vdGVTdHJlYW1zPVtdKSwhKGUuX3JlbW90ZVN0cmVhbXMuaW5kZXhPZih0KT49MCkpe2UuX3JlbW90ZVN0cmVhbXMucHVzaCh0KTt2YXIgcj1uZXcgRXZlbnQoXCJhZGRzdHJlYW1cIik7ci5zdHJlYW09dCxlLmRpc3BhdGNoRXZlbnQocil9fSkpfSksdC5hcHBseShlLGFyZ3VtZW50cyl9fX0sdC5zaGltVHJhY2tFdmVudFRyYW5zY2VpdmVyPWZ1bmN0aW9uKGUpe1wib2JqZWN0XCI9PT1zKGUpJiZlLlJUQ1RyYWNrRXZlbnQmJlwicmVjZWl2ZXJcImluIGUuUlRDVHJhY2tFdmVudC5wcm90b3R5cGUmJiEoXCJ0cmFuc2NlaXZlclwiaW4gZS5SVENUcmFja0V2ZW50LnByb3RvdHlwZSkmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLlJUQ1RyYWNrRXZlbnQucHJvdG90eXBlLFwidHJhbnNjZWl2ZXJcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJue3JlY2VpdmVyOnRoaXMucmVjZWl2ZXJ9fX0pfTt2YXIgbj1mdW5jdGlvbihlLHQpe2lmKCF0JiZlJiZlLl9fZXNNb2R1bGUpcmV0dXJuIGU7aWYobnVsbD09PWV8fFwib2JqZWN0XCIhPT1zKGUpJiZcImZ1bmN0aW9uXCIhPXR5cGVvZiBlKXJldHVybntkZWZhdWx0OmV9O3ZhciByPWkodCk7aWYociYmci5oYXMoZSkpcmV0dXJuIHIuZ2V0KGUpO3ZhciBuPXt9LGE9T2JqZWN0LmRlZmluZVByb3BlcnR5JiZPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO2Zvcih2YXIgbyBpbiBlKWlmKFwiZGVmYXVsdFwiIT09byYmT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsbykpe3ZhciBjPWE/T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLG8pOm51bGw7YyYmKGMuZ2V0fHxjLnNldCk/T2JqZWN0LmRlZmluZVByb3BlcnR5KG4sbyxjKTpuW29dPWVbb119bi5kZWZhdWx0PWUsciYmci5zZXQoZSxuKTtyZXR1cm4gbn0ocigyODgpKTtmdW5jdGlvbiBpKGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIFdlYWtNYXApcmV0dXJuIG51bGw7dmFyIHQ9bmV3IFdlYWtNYXAscj1uZXcgV2Vha01hcDtyZXR1cm4oaT1mdW5jdGlvbihlKXtyZXR1cm4gZT9yOnR9KShlKX1mdW5jdGlvbiBzKGUpe3JldHVybiBzPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbihlKXtyZXR1cm4gdHlwZW9mIGV9OmZ1bmN0aW9uKGUpe3JldHVybiBlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJmUuY29uc3RydWN0b3I9PT1TeW1ib2wmJmUhPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIGV9LHMoZSl9ZnVuY3Rpb24gYShlKXtyZXR1cm4gZSYmdm9pZCAwIT09ZS52aWRlbz9PYmplY3QuYXNzaWduKHt9LGUse3ZpZGVvOm4uY29tcGFjdE9iamVjdChlLnZpZGVvKX0pOmV9fSwyODg6KGUsdCk9PntcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiByKGUpe3JldHVybiByPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbihlKXtyZXR1cm4gdHlwZW9mIGV9OmZ1bmN0aW9uKGUpe3JldHVybiBlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJmUuY29uc3RydWN0b3I9PT1TeW1ib2wmJmUhPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIGV9LHIoZSl9T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5jb21wYWN0T2JqZWN0PWZ1bmN0aW9uIGUodCl7aWYoIWEodCkpcmV0dXJuIHQ7cmV0dXJuIE9iamVjdC5rZXlzKHQpLnJlZHVjZSgoZnVuY3Rpb24obixpKXt2YXIgcz1hKHRbaV0pLG89cz9lKHRbaV0pOnRbaV0sYz1zJiYhT2JqZWN0LmtleXMobykubGVuZ3RoO3JldHVybiB2b2lkIDA9PT1vfHxjP246T2JqZWN0LmFzc2lnbihuLGZ1bmN0aW9uKGUsdCxuKXt0PWZ1bmN0aW9uKGUpe3ZhciB0PWZ1bmN0aW9uKGUsdCl7aWYoXCJvYmplY3RcIiE9PXIoZSl8fG51bGw9PT1lKXJldHVybiBlO3ZhciBuPWVbU3ltYm9sLnRvUHJpbWl0aXZlXTtpZih2b2lkIDAhPT1uKXt2YXIgaT1uLmNhbGwoZSx0fHxcImRlZmF1bHRcIik7aWYoXCJvYmplY3RcIiE9PXIoaSkpcmV0dXJuIGk7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpfXJldHVybihcInN0cmluZ1wiPT09dD9TdHJpbmc6TnVtYmVyKShlKX0oZSxcInN0cmluZ1wiKTtyZXR1cm5cInN5bWJvbFwiPT09cih0KT90OlN0cmluZyh0KX0odCksdCBpbiBlP09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHQse3ZhbHVlOm4sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITB9KTplW3RdPW47cmV0dXJuIGV9KHt9LGksbykpfSkse30pfSx0LmRlcHJlY2F0ZWQ9ZnVuY3Rpb24oZSx0KXtpZighaSlyZXR1cm47Y29uc29sZS53YXJuKGUrXCIgaXMgZGVwcmVjYXRlZCwgcGxlYXNlIHVzZSBcIit0K1wiIGluc3RlYWQuXCIpfSx0LmRldGVjdEJyb3dzZXI9ZnVuY3Rpb24oZSl7dmFyIHQ9e2Jyb3dzZXI6bnVsbCx2ZXJzaW9uOm51bGx9O2lmKHZvaWQgMD09PWV8fCFlLm5hdmlnYXRvcnx8IWUubmF2aWdhdG9yLnVzZXJBZ2VudClyZXR1cm4gdC5icm93c2VyPVwiTm90IGEgYnJvd3Nlci5cIix0O3ZhciByPWUubmF2aWdhdG9yO2lmKHIubW96R2V0VXNlck1lZGlhKXQuYnJvd3Nlcj1cImZpcmVmb3hcIix0LnZlcnNpb249cyhyLnVzZXJBZ2VudCwvRmlyZWZveFxcLyhcXGQrKVxcLi8sMSk7ZWxzZSBpZihyLndlYmtpdEdldFVzZXJNZWRpYXx8ITE9PT1lLmlzU2VjdXJlQ29udGV4dCYmZS53ZWJraXRSVENQZWVyQ29ubmVjdGlvbil0LmJyb3dzZXI9XCJjaHJvbWVcIix0LnZlcnNpb249cyhyLnVzZXJBZ2VudCwvQ2hyb20oZXxpdW0pXFwvKFxcZCspXFwuLywyKTtlbHNle2lmKCFlLlJUQ1BlZXJDb25uZWN0aW9ufHwhci51c2VyQWdlbnQubWF0Y2goL0FwcGxlV2ViS2l0XFwvKFxcZCspXFwuLykpcmV0dXJuIHQuYnJvd3Nlcj1cIk5vdCBhIHN1cHBvcnRlZCBicm93c2VyLlwiLHQ7dC5icm93c2VyPVwic2FmYXJpXCIsdC52ZXJzaW9uPXMoci51c2VyQWdlbnQsL0FwcGxlV2ViS2l0XFwvKFxcZCspXFwuLywxKSx0LnN1cHBvcnRzVW5pZmllZFBsYW49ZS5SVENSdHBUcmFuc2NlaXZlciYmXCJjdXJyZW50RGlyZWN0aW9uXCJpbiBlLlJUQ1J0cFRyYW5zY2VpdmVyLnByb3RvdHlwZX1yZXR1cm4gdH0sdC5kaXNhYmxlTG9nPWZ1bmN0aW9uKGUpe2lmKFwiYm9vbGVhblwiIT10eXBlb2YgZSlyZXR1cm4gbmV3IEVycm9yKFwiQXJndW1lbnQgdHlwZTogXCIrcihlKStcIi4gUGxlYXNlIHVzZSBhIGJvb2xlYW4uXCIpO3JldHVybiBuPWUsZT9cImFkYXB0ZXIuanMgbG9nZ2luZyBkaXNhYmxlZFwiOlwiYWRhcHRlci5qcyBsb2dnaW5nIGVuYWJsZWRcIn0sdC5kaXNhYmxlV2FybmluZ3M9ZnVuY3Rpb24oZSl7aWYoXCJib29sZWFuXCIhPXR5cGVvZiBlKXJldHVybiBuZXcgRXJyb3IoXCJBcmd1bWVudCB0eXBlOiBcIityKGUpK1wiLiBQbGVhc2UgdXNlIGEgYm9vbGVhbi5cIik7cmV0dXJuIGk9IWUsXCJhZGFwdGVyLmpzIGRlcHJlY2F0aW9uIHdhcm5pbmdzIFwiKyhlP1wiZGlzYWJsZWRcIjpcImVuYWJsZWRcIil9LHQuZXh0cmFjdFZlcnNpb249cyx0LmZpbHRlclN0YXRzPWZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yP1wib3V0Ym91bmQtcnRwXCI6XCJpbmJvdW5kLXJ0cFwiLGk9bmV3IE1hcDtpZihudWxsPT09dClyZXR1cm4gaTt2YXIgcz1bXTtyZXR1cm4gZS5mb3JFYWNoKChmdW5jdGlvbihlKXtcInRyYWNrXCI9PT1lLnR5cGUmJmUudHJhY2tJZGVudGlmaWVyPT09dC5pZCYmcy5wdXNoKGUpfSkpLHMuZm9yRWFjaCgoZnVuY3Rpb24odCl7ZS5mb3JFYWNoKChmdW5jdGlvbihyKXtyLnR5cGU9PT1uJiZyLnRyYWNrSWQ9PT10LmlkJiZvKGUscixpKX0pKX0pKSxpfSx0LmxvZz1mdW5jdGlvbigpe2lmKFwib2JqZWN0XCI9PT0oXCJ1bmRlZmluZWRcIj09dHlwZW9mIHdpbmRvdz9cInVuZGVmaW5lZFwiOnIod2luZG93KSkpe2lmKG4pcmV0dXJuO1widW5kZWZpbmVkXCIhPXR5cGVvZiBjb25zb2xlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBjb25zb2xlLmxvZyYmY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSxhcmd1bWVudHMpfX0sdC53YWxrU3RhdHM9byx0LndyYXBQZWVyQ29ubmVjdGlvbkV2ZW50PWZ1bmN0aW9uKGUsdCxyKXtpZighZS5SVENQZWVyQ29ubmVjdGlvbilyZXR1cm47dmFyIG49ZS5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUsaT1uLmFkZEV2ZW50TGlzdGVuZXI7bi5hZGRFdmVudExpc3RlbmVyPWZ1bmN0aW9uKGUsbil7aWYoZSE9PXQpcmV0dXJuIGkuYXBwbHkodGhpcyxhcmd1bWVudHMpO3ZhciBzPWZ1bmN0aW9uKGUpe3ZhciB0PXIoZSk7dCYmKG4uaGFuZGxlRXZlbnQ/bi5oYW5kbGVFdmVudCh0KTpuKHQpKX07cmV0dXJuIHRoaXMuX2V2ZW50TWFwPXRoaXMuX2V2ZW50TWFwfHx7fSx0aGlzLl9ldmVudE1hcFt0XXx8KHRoaXMuX2V2ZW50TWFwW3RdPW5ldyBNYXApLHRoaXMuX2V2ZW50TWFwW3RdLnNldChuLHMpLGkuYXBwbHkodGhpcyxbZSxzXSl9O3ZhciBzPW4ucmVtb3ZlRXZlbnRMaXN0ZW5lcjtuLnJlbW92ZUV2ZW50TGlzdGVuZXI9ZnVuY3Rpb24oZSxyKXtpZihlIT09dHx8IXRoaXMuX2V2ZW50TWFwfHwhdGhpcy5fZXZlbnRNYXBbdF0pcmV0dXJuIHMuYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKCF0aGlzLl9ldmVudE1hcFt0XS5oYXMocikpcmV0dXJuIHMuYXBwbHkodGhpcyxhcmd1bWVudHMpO3ZhciBuPXRoaXMuX2V2ZW50TWFwW3RdLmdldChyKTtyZXR1cm4gdGhpcy5fZXZlbnRNYXBbdF0uZGVsZXRlKHIpLDA9PT10aGlzLl9ldmVudE1hcFt0XS5zaXplJiZkZWxldGUgdGhpcy5fZXZlbnRNYXBbdF0sMD09PU9iamVjdC5rZXlzKHRoaXMuX2V2ZW50TWFwKS5sZW5ndGgmJmRlbGV0ZSB0aGlzLl9ldmVudE1hcCxzLmFwcGx5KHRoaXMsW2Usbl0pfSxPYmplY3QuZGVmaW5lUHJvcGVydHkobixcIm9uXCIrdCx7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXNbXCJfb25cIit0XX0sc2V0OmZ1bmN0aW9uKGUpe3RoaXNbXCJfb25cIit0XSYmKHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcih0LHRoaXNbXCJfb25cIit0XSksZGVsZXRlIHRoaXNbXCJfb25cIit0XSksZSYmdGhpcy5hZGRFdmVudExpc3RlbmVyKHQsdGhpc1tcIl9vblwiK3RdPWUpfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pfTt2YXIgbj0hMCxpPSEwO2Z1bmN0aW9uIHMoZSx0LHIpe3ZhciBuPWUubWF0Y2godCk7cmV0dXJuIG4mJm4ubGVuZ3RoPj1yJiZwYXJzZUludChuW3JdLDEwKX1mdW5jdGlvbiBhKGUpe3JldHVyblwiW29iamVjdCBPYmplY3RdXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSl9ZnVuY3Rpb24gbyhlLHQscil7dCYmIXIuaGFzKHQuaWQpJiYoci5zZXQodC5pZCx0KSxPYmplY3Qua2V5cyh0KS5mb3JFYWNoKChmdW5jdGlvbihuKXtuLmVuZHNXaXRoKFwiSWRcIik/byhlLGUuZ2V0KHRbbl0pLHIpOm4uZW5kc1dpdGgoXCJJZHNcIikmJnRbbl0uZm9yRWFjaCgoZnVuY3Rpb24odCl7byhlLGUuZ2V0KHQpLHIpfSkpfSkpKX19fSx0PXt9O2Z1bmN0aW9uIHIobil7dmFyIGk9dFtuXTtpZih2b2lkIDAhPT1pKXJldHVybiBpLmV4cG9ydHM7dmFyIHM9dFtuXT17ZXhwb3J0czp7fX07cmV0dXJuIGVbbl0uY2FsbChzLmV4cG9ydHMscyxzLmV4cG9ydHMscikscy5leHBvcnRzfXIubj1lPT57dmFyIHQ9ZSYmZS5fX2VzTW9kdWxlPygpPT5lLmRlZmF1bHQ6KCk9PmU7cmV0dXJuIHIuZCh0LHthOnR9KSx0fSxyLmQ9KGUsdCk9Pntmb3IodmFyIG4gaW4gdClyLm8odCxuKSYmIXIubyhlLG4pJiZPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxuLHtlbnVtZXJhYmxlOiEwLGdldDp0W25dfSl9LHIubz0oZSx0KT0+T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsdCksci5yPWU9PntcInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZTeW1ib2wudG9TdHJpbmdUYWcmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFN5bWJvbC50b1N0cmluZ1RhZyx7dmFsdWU6XCJNb2R1bGVcIn0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pfTt2YXIgbj17fTtyZXR1cm4oKCk9PntcInVzZSBzdHJpY3RcIjtyLnIobiksci5kKG4se0RDVldlYlJUQ1JlZGlyQ2xpZW50OigpPT5nfSk7Y29uc3QgZT17bWFqb3I6MCxtaW5vcjozLHBhdGNoOjEsYnVpbGROdW1iZXI6MCxnaXRIYXNoOlwiMDk1ZGI1Y2Y5ODE1MTgwZmNhYzgzNmYwMmRmY2UxMTdhMWQwYzYwZlwiLHZlcnNpb25TdHI6XCIwLjMuMStidWlsZC4wXCJ9O3ZhciB0PXIoODYpLGk9cig0Mykscz1yLm4oaSk7Y29uc3QgYT1PYmplY3QuZnJlZXplKHtIRUxMT19BUElfTkFNRTpcImhlbGxvXCIsR0VUVVNFUk1FRElBX0FQSV9OQU1FOlwibmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWFcIixFTlVNRVJBVEVERVZJQ0VTX0FQSV9OQU1FOlwibmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5lbnVtZXJhdGVEZXZpY2VzXCIsR0VORVJBVEVfQ0VSVElGSUNBVEVfQVBJX05BTUU6XCJSVENQZWVyQ29ubmVjdGlvbi5nZW5lcmF0ZUNlcnRpZmljYXRlXCIsTkVXUlRDUEVFUkNPTk5FQ1RJT05fQVBJX05BTUU6XCJuZXcuUlRDUGVlckNvbm5lY3Rpb25cIixQQ19HRVRfQ09ORklHVVJBVElPTjpcInBjcy5nZXRDb25maWd1cmF0aW9uXCIsTkVXX0FVRElPX0NPTlRFWFQ6XCJuZXcuQXVkaW9Db250ZXh0XCIsQ1JFQVRFX1dPUktFUjpcIm5ldy5Xb3JrZXJcIixXT1JLRVJfUE9TVF9NRVNTQUdFOlwid29ya2Vycy5wb3N0TWVzc2FnZVwiLFdPUktFUl9URVJNSU5BVEU6XCJ3b3JrZXJzLnRlcm1pbmF0ZVwiLEFVRElPX0NUWF9DUkVBVEVfQVVESU9fTk9ERTpcImF1ZGlvQ29udGV4dHMuY3JlYXRlQXVkaW9Ob2RlXCIsQVVESU9fQ1RYX0NMT1NFOlwiYXVkaW9Db250ZXh0cy5jbG9zZVwiLEFVRElPX05PREVfQ09OTkVDVDpcImF1ZGlvTm9kZXMuY29ubmVjdFwiLEFVRElPX05PREVfRElTQ09OTkVDVDpcImF1ZGlvTm9kZXMuZGlzY29ubmVjdFwiLEFVRElPX1BBUkFNX1NFVF9WQUxVRV9BVF9USU1FOlwiYXVkaW9QYXJhbXMuc2V0VmFsdWVBdFRpbWVcIixBVURJT19QQVJBTV9TRVRfUkFNUF9UT19WQUxVRV9BVF9USU1FOlwiYXVkaW9QYXJhbXMubGluZWFyUmFtcFRvVmFsdWVBdFRpbWVcIixBVURJT19OT0RFX1NFVF9UWVBFOlwiYXVkaW9Ob2Rlcy5zZXRUeXBlXCIsQVVESU9fTk9ERV9TVEFSVDpcImF1ZGlvTm9kZXMuc3RhcnRcIixBVURJT19OT0RFX1NUT1A6XCJhdWRpb05vZGVzLnN0b3BcIixQQ19DTE9TRV9BUElfTkFNRTpcInBjcy5jbG9zZVwiLEFERFNUUkVBTV9BUElfTkFNRTpcInBjcy5hZGRTdHJlYW1cIixTVFJFQU1fUkVNT1ZFX1RSQUNLOlwic3RyZWFtcy5yZW1vdmVUcmFja1wiLFNUUkVBTV9BRERfVFJBQ0s6XCJzdHJlYW1zLmFkZFRyYWNrXCIsR0VUX1NUQVRTX0FQSV9OQU1FOlwicGNzLmdldFN0YXRzXCIsQ1JFQVRFX09GRkVSX0FQSV9OQU1FOlwicGNzLmNyZWF0ZU9mZmVyXCIsU0VUX0xPQ0FMX0RFU0NSSVBUSU9OX0FQSV9OQU1FOlwicGNzLnNldExvY2FsRGVzY3JpcHRpb25cIixBRERfUENfRVZFTlRfTElTVEVORVI6XCJwY3MuYWRkRXZlbnRMaXN0ZW5lclwiLEFERF9UUkFDS19FVkVOVF9MSVNURU5FUjpcInRyYWNrcy5hZGRFdmVudExpc3RlbmVyXCIsQUREX0RUTUZfRVZFTlRfTElTVEVORVI6XCJkdG1mcy5hZGRFdmVudExpc3RlbmVyXCIsQUREX1dPUktFUl9FVkVOVF9MSVNURU5FUjpcIndvcmtlcnMuYWRkRXZlbnRMaXN0ZW5lclwiLFNFVF9SRU1PVEVfREVTQ1JJUFRJT05fQVBJX05BTUU6XCJwY3Muc2V0UmVtb3RlRGVzY3JpcHRpb25cIixBRERfSUNFX0NBTkRJREFURV9BUElfTkFNRTpcInBjcy5hZGRJY2VDYW5kaWRhdGVcIixDUkVBVEVfTUVESUFfRUxFTUVOVF9BUElfTkFNRTpcImRvY3VtZW50LmNyZWF0ZUVsZW1lbnRcIixNRURJQV9FTEVNRU5UX1NFVF9TSU5LX0lEX0FQSV9OQU1FOlwibWVkaWFFbGVtZW50cy5zZXRTaW5rSWRcIixNRURJQV9FTEVNRU5UX1JFTU9WRTpcIm1lZGlhRWxlbWVudHMucmVtb3ZlXCIsQ1JFQVRFX0FOU1dFUl9BUElfTkFNRTpcInBjcy5jcmVhdGVBbnN3ZXJcIixVTkxPQURfRVZFTlRfTkFNRTpcInVubG9hZFwiLFRPR0dMRV9UUkFDS19FTkFCTEVEX0FQSV9OQU1FOlwidHJhY2tzLmVuYWJsZWRcIixUUkFDS19TVE9QX0FQSV9OQU1FOlwidHJhY2tzLnN0b3BcIixUUkFDS19HRVRfU0VUVElOR1M6XCJ0cmFja3MuZ2V0U2V0dGluZ3NcIixHRVRfUkVDRUlWRVJTX0FQSV9OQU1FOlwicGNzLmdldFJlY2VpdmVyc1wiLEFERF9UUkFDS19BUElfTkFNRTpcInBjcy5hZGRUcmFja1wiLEdFVF9TRU5ERVJTX0FQSV9OQU1FOlwicGNzLmdldFNlbmRlcnNcIixHRVRfU0VOREVSX1NUQVRTX0FQSV9OQU1FOlwic2VuZGVycy5nZXRTdGF0c1wiLEdFVF9SRUNFSVZFUl9TVEFUU19BUElfTkFNRTpcInJlY2VpdmVycy5nZXRTdGF0c1wiLFNFVF9NRURJQV9TUkNfT0JKX0FQSV9OQU1FOlwibWVkaWFFbGVtZW50cy5zcmNPYmplY3RcIixTRVRfTUVESUFfSElEREVOX0FQSV9OQU1FOlwibWVkaWFFbGVtZW50cy5oaWRkZW5cIixTRVRfTUVESUFfVk9MVU1FX0FQSV9OQU1FOlwibWVkaWFFbGVtZW50cy52b2x1bWVcIixNRURJQV9FTEVNRU5UX1BMQVlfQVBJX05BTUU6XCJtZWRpYUVsZW1lbnRzLnBsYXlcIixNRURJQV9FTEVNRU5UX1BBVVNFX0FQSV9OQU1FOlwibWVkaWFFbGVtZW50cy5wYXVzZVwiLE1FRElBX0VMRU1FTlRfTVVURUQ6XCJtZWRpYUVsZW1lbnRzLm11dGVkXCIsQUREX1RSQU5TQ0VJVkVSX0FQSV9OQU1FOlwicGNzLmFkZFRyYW5zY2VpdmVyXCIsR0VUX1RSQU5TQ0VJVkVSU19BUElfTkFNRTpcInBjcy5nZXRUcmFuc2NlaXZlcnNcIixUUkFOU0NFSVZFUl9TRVRfQ09ERUNfUFJFRlM6XCJ0cmFuc2NlaXZlcnMuc2V0Q29kZWNQcmVmZXJlbmNlc1wiLFJFUExBQ0VfU0VOREVSX1RSQUNLX0FQSV9OQU1FOlwic2VuZGVycy5yZXBsYWNlVHJhY2tcIixQQ19SRU1PVkVfVFJBQ0tfQVBJX05BTUU6XCJwY3MucmVtb3ZlVHJhY2tcIixJTlNFUlRfRFRNRl9BUElfTkFNRTpcImR0bWZTZW5kZXJzLmluc2VydERUTUZcIixTRU5ERVJfQ1JFQVRFX0VOQ09ERURfU1RSRUFNUzpcInNlbmRlcnMuY3JlYXRlRW5jb2RlZFN0cmVhbXNcIixSRUNFSVZFUl9DUkVBVEVfRU5DT0RFRF9TVFJFQU1TOlwicmVjZWl2ZXJzLmNyZWF0ZUVuY29kZWRTdHJlYW1zXCJ9KSxvPU9iamVjdC5mcmVlemUoe1NJR19TVEFURV9DSEFOR0U6XCJzaWduYWxpbmdzdGF0ZWNoYW5nZVwiLFRSQUNLOlwidHJhY2tcIixDT05OX1NUQVRFX0NIQU5HRTpcImNvbm5lY3Rpb25zdGF0ZWNoYW5nZVwiLElDRV9DT05OX1NUQVRFX0NIQU5HRTpcImljZWNvbm5lY3Rpb25zdGF0ZWNoYW5nZVwiLElDRV9HQVRIRVJfU1RBVEVfQ0hBTkdFOlwiaWNlZ2F0aGVyaW5nc3RhdGVjaGFuZ2VcIixJQ0VfQ0FORElEQVRFOlwiaWNlY2FuZGlkYXRlXCIsTkVHT1RJQVRJT05fTkVFREVEOlwibmVnb3RpYXRpb25uZWVkZWRcIn0pLGM9T2JqZWN0LmZyZWV6ZSh7RU5ERUQ6XCJlbmRlZFwiLE1VVEU6XCJtdXRlXCIsVU5NVVRFOlwidW5tdXRlXCJ9KSxkPU9iamVjdC5mcmVlemUoe1RPTkVDSEFOR0U6XCJ0b25lY2hhbmdlXCJ9KSxsPU9iamVjdC5mcmVlemUoe0VSUk9SOlwiZXJyb3JcIixNRVNTQUdFOlwibWVzc2FnZVwiLE1FU1NBR0VfRVJST1I6XCJtZXNzYWdlZXJyb3JcIn0pLHA9T2JqZWN0LmZyZWV6ZSh7Q0hST01FOlwiZGlpbHBmcGxjbmhlaGFrY2trcG1jbWlibWhiaW5nbmRcIixFREdFOlwia2piYmtqamllY2NoYmNkb29sbGhnZmZnaGZqbmJoZWZcIn0pO3ZhciBoPXIoMTE0KTtjb25zdCB1PXIoNTkxKTtmdW5jdGlvbiBmKCl7cmV0dXJuIGZ1bmN0aW9uKCl7Y29uc3QgZT13aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpO3JldHVybiBlLmluZGV4T2YoXCJlZGcvXCIpPi0xfHxlLmluZGV4T2YoXCJlZGdlXCIpPi0xfSgpP3AuRURHRTpwLkNIUk9NRX1jbGFzcyBte2NvbnN0cnVjdG9yKHQpe2lmKHRoaXMudmVyc2lvbj1lLHRoaXMuY29uZmlnPXQsdGhpcy5sb2dnZXI9dC5sb2dnZXIsdGhpcy5jbGllbnRJbmZvPW51bGwsdGhpcy5jZXJ0UGFyYW1zPXtuYW1lOlwiRUNEU0FcIixuYW1lZEN1cnZlOlwiUC0yNTZcIn0sdGhpcy5leHRlbnNpb25JZD1mKCksdGhpcy5wY1Byb3hpZXM9bmV3IE1hcCx0aGlzLmF1ZGlvQ29udGV4dFByb3hpZXM9bmV3IE1hcCx0aGlzLmF1ZGlvTm9kZVByb3hpZXM9bmV3IE1hcCx0aGlzLndvcmtlclByb3hpZXM9bmV3IE1hcCx0aGlzLnN0cmVhbVByb3hpZXM9bmV3IE1hcCx0aGlzLmV2ZW50TGlzdGVuZXJzPW5ldyBNYXAsdGhpcy5tZWRpYUVsZW1lbnRQcm94aWVzPW5ldyBNYXAsdGhpcy50cmFuc2NlaXZlclByb3hpZXM9bmV3IE1hcCx0aGlzLnNlbmRlclByb3hpZXM9bmV3IE1hcCx0aGlzLmR0bWZQcm94aWVzPW5ldyBNYXAsdGhpcy5yZWNlaXZlclByb3hpZXM9bmV3IE1hcCx0aGlzLnRyYWNrUHJveGllcz1uZXcgTWFwLHRoaXMub3ZlcnJpZGVuQXBpcz1uZXcgTWFwLHRoaXMuZGVjb2Rlcj1uZXcgVGV4dERlY29kZXIoXCJ1dGYtOFwiKSx0aGlzLmxvZ2dlci5pbmZvKGBDaGVja2luZyBmb3IgY2hyb21lIGV4dGVuc2lvbi4gIENocm9tZSBydW50aW1lOiAke2Nocm9tZS5ydW50aW1lfWApLHZvaWQgMD09PWNocm9tZS5ydW50aW1lKXRocm93IG5ldyBFcnJvcihcIkNocm9tZSBydW50aW1lIG5vdCBhdmFpbGFibGUuICBEQ1YgV2ViUlRDIGNocm9tZSBleHRlbnNpb24gbWF5IG5vdCBiZSBhY3RpdmUuXCIpO3RoaXMub3ZlcnJpZGVuQXBpcy5zZXQoXCJuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYVwiLG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKSx0aGlzLm92ZXJyaWRlbkFwaXMuc2V0KFwibmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5lbnVtZXJhdGVEZXZpY2VzXCIsbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5lbnVtZXJhdGVEZXZpY2VzKSx0aGlzLm92ZXJyaWRlbkFwaXMuc2V0KFwid2luZG93LlJUQ1BlZXJDb25uZWN0aW9uXCIsd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uKSx0aGlzLm92ZXJyaWRlbkFwaXMuc2V0KFwid2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLmdlbmVyYXRlQ2VydGlmaWNhdGVcIix3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24uZ2VuZXJhdGVDZXJ0aWZpY2F0ZSksdGhpcy5vdmVycmlkZW5BcGlzLnNldChcIndpbmRvdy5BdWRpb0NvbnRleHRcIix3aW5kb3cuQXVkaW9Db250ZXh0KSx0aGlzLm92ZXJyaWRlbkFwaXMuc2V0KFwid2luZG93LldvcmtlclwiLHdpbmRvdy5Xb3JrZXIpfW1ha2VNZWRpYURldmljZUluZm9Qcm94aWVzKGUpe3JldHVybiBlLmZvckVhY2goKGU9PntlLnRvSlNPTj0oKT0+ZX0pKSxlfW1ha2VUcmFja1Byb3h5KGUpe2lmKHRoaXMudHJhY2tQcm94aWVzLmhhcyhlLmlkKSl7bGV0IHQ9dGhpcy50cmFja1Byb3hpZXMuZ2V0KGUuaWQpO3JldHVybiBPYmplY3QuYXNzaWduKHQsZSksdH1yZXR1cm4gdGhpcy50cmFja1Byb3hpZXMuc2V0KGUuaWQsZSksZS5wZW5kaW5nRXZlbnRzPW5ldyBNYXAsZS5zdG9wPSgpPT57dGhpcy5zZW5kQXBpUmVxdWVzdChhLlRSQUNLX1NUT1BfQVBJX05BTUUsW2UuaWRdKX0sZS5nZXRTZXR0aW5ncz0oKT0+KHRoaXMuc2VuZEFwaVJlcXVlc3QoYS5UUkFDS19HRVRfU0VUVElOR1MsW2UuaWRdKS50aGVuKCh0PT57ZS5zZXR0aW5ncz10fSkpLGUuc2V0dGluZ3MpLGUuYWRkRXZlbnRMaXN0ZW5lcj0odCxyLG4pPT57dGhpcy5sb2dnZXIuZGVidWcoXCJTZXR0aW5nIGVuZGVkIGV2ZW50IGxpc3RlbmVyIHZpYSBhZGRFdmVudExpc3RlbmVyLlwiKSx0aGlzLmFkZFRyYWNrRXZlbnRMaXN0ZW5lcihlLmlkLHQscixuKX0sZS5yZW1vdmVFdmVudExpc3RlbmVyPSh0LHIpPT57dGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKGUuaWQsdCxyKX0sT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJvbmVuZGVkXCIse3NldDp0PT57dGhpcy5hZGRUcmFja0V2ZW50TGlzdGVuZXIoZS5pZCxjLkVOREVELHQpfSxnZXQ6KCk9Pm51bGx9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIm9ubXV0ZVwiLHtzZXQ6dD0+e3RoaXMuYWRkVHJhY2tFdmVudExpc3RlbmVyKGUuaWQsYy5NVVRFLHQpfSxnZXQ6KCk9Pm51bGx9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIm9udW5tdXRlXCIse3NldDp0PT57dGhpcy5hZGRUcmFja0V2ZW50TGlzdGVuZXIoZS5pZCxjLlVOTVVURSx0KX0sZ2V0OigpPT5udWxsfSksZS50cmFja0VuYWJsZWQ9ZS5lbmFibGVkLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiZW5hYmxlZFwiLHtzZXQ6dD0+e2UudHJhY2tFbmFibGVkPXQsdGhpcy5zZW5kQXBpUmVxdWVzdChhLlRPR0dMRV9UUkFDS19FTkFCTEVEX0FQSV9OQU1FLFtlLmlkLHRdKS50aGVuKCh0PT57dGhpcy50cmFja1Byb3hpZXMuZ2V0KGUuaWQpLnRyYWNrRW5hYmxlZD10LmVuYWJsZWR9KSl9LGdldDooKT0+ZS50cmFja0VuYWJsZWR9KSx0aGlzLnByZVJlZ2lzdGVyRXZlbnRzKGMsZSx0aGlzLmFkZFRyYWNrRXZlbnRMaXN0ZW5lciksZX1tYWtlU3RyZWFtUHJveHkoZSl7dGhpcy5zdHJlYW1Qcm94aWVzLnNldChlLmlkLGUpO2xldCB0PW5ldyBNZWRpYVN0cmVhbTt0LnR5cGU9XCJwcm94eVwiLHQucHJveHk9ZTtsZXQgcj1lLnRyYWNrcz9lLnRyYWNrcy5tYXAoKGU9PnRoaXMubWFrZVRyYWNrUHJveHkoZSkpKTpbXTtyZXR1cm4gZS50cmFja3M9cix0LmdldFRyYWNrcz0oKT0+cix0LmdldEF1ZGlvVHJhY2tzPSgpPT5yLmZpbHRlcigoZT0+XCJhdWRpb1wiPT09ZS5raW5kKSksdC5nZXRWaWRlb1RyYWNrcz0oKT0+ci5maWx0ZXIoKGU9PlwidmlkZW9cIj09PWUua2luZCkpLHQuZ2V0VHJhY2tCeUlkPWU9PnIuZmluZCgodD0+dC5pZD09PWUpKSx0LmNyZWF0ZU1lZGlhRWxlbWVudD1lPT50aGlzLmNyZWF0ZU1lZGlhRWxlbWVudChlKSx0LmFkZFRyYWNrPXQ9Pnt0aGlzLnNlbmRBcGlSZXF1ZXN0KGEuU1RSRUFNX0FERF9UUkFDSyxbZS5pZCx0LmlkXSl9LHQucmVtb3ZlVHJhY2s9dD0+e3RoaXMuc2VuZEFwaVJlcXVlc3QoYS5TVFJFQU1fUkVNT1ZFX1RSQUNLLFtlLmlkLHQuaWRdKX0sdH11cGRhdGVUcmFuc2NlaXZlclByb3h5KGUpe2xldCB0PXRoaXMudHJhbnNjZWl2ZXJQcm94aWVzLmdldChlLmlkKTtyZXR1cm4gdHx8KHQ9e30pLE9iamVjdC5hc3NpZ24odCxlKSxlLnJlY2VpdmVyJiZcInByb3h5XCI9PT1lLnJlY2VpdmVyLnR5cGUmJih0LnJlY2VpdmVyPXRoaXMudXBkYXRlUmVjZWl2ZXJQcm94eShlLnJlY2VpdmVyKSksZS5zZW5kZXImJlwicHJveHlcIj09PWUuc2VuZGVyLnR5cGUmJih0LnNlbmRlcj10aGlzLnVwZGF0ZVNlbmRlclByb3h5KGUuc2VuZGVyKSksdGhpcy50cmFuc2NlaXZlclByb3hpZXMuc2V0KGUuaWQsdCksdH11cGRhdGVQQ1NlbmRlcnMoZSx0KXtsZXQgcj10Lm1hcCgoZT0+dGhpcy51cGRhdGVTZW5kZXJQcm94eShlKSkpO3RoaXMucGNQcm94aWVzLmdldChlKS5zZW5kZXJzPXJ9dXBkYXRlUENSZWNlaXZlcnMoZSx0KXtsZXQgcj10Lm1hcCgoZT0+dGhpcy51cGRhdGVSZWNlaXZlclByb3h5KGUpKSk7dGhpcy5wY1Byb3hpZXMuZ2V0KGUpLnJlY2VpdmVycz1yfXVwZGF0ZVBDVHJhbnNjZWl2ZXJzKGUsdCl7bGV0IHI9dDtyLmZvckVhY2goKGU9Pnt0aGlzLnVwZGF0ZVRyYW5zY2VpdmVyUHJveHkoZSl9KSksdGhpcy5wY1Byb3hpZXMuZ2V0KGUpLnRyYW5zY2VpdmVycz1yfWlzVmFsaWRBcGkoZSl7bGV0IHQ9ITE7Zm9yKGNvbnN0IHIgaW4gYSlpZihhW3JdPT09ZSl7dD0hMDticmVha31yZXR1cm4gdH1hc3luYyBzZW5kQXBpUmVxdWVzdChlLHQscj1jcnlwdG8ucmFuZG9tVVVJRCgpKXt0aGlzLmxvZ2dlci5kZWJ1ZyhlLHQscik7bGV0IG49e2FwaTplLGFyZ3M6dH0saT11LmRlZmxhdGVSYXcoSlNPTi5zdHJpbmdpZnkobikpO2NvbnN0IHM9e3JlcXVlc3RJZDpyLG1lc3NhZ2U6aSx0eXBlOlwicmVxdWVzdFwifTt0aGlzLmxvZ2dlci5kZWJ1ZyhcIlNlbmRpbmcgcmVxdWVzdDpcIixKU09OLnN0cmluZ2lmeShzKSk7bGV0IGE9YXdhaXQgY2hyb21lLnJ1bnRpbWUuc2VuZE1lc3NhZ2UodGhpcy5leHRlbnNpb25JZCxzKTtpPWEubWVzc2FnZTtsZXQgbz11LmluZmxhdGVSYXcoaSksYz10aGlzLmRlY29kZXIuZGVjb2RlKG8pO2lmKGEubWVzc2FnZT1KU09OLnBhcnNlKGMpLHRoaXMubG9nZ2VyLmRlYnVnKFwiUmVjZWl2ZWQgcmVzcG9uc2U6IFwiLEpTT04uc3RyaW5naWZ5KGEpKSwhYXx8IWEubWVzc2FnZXx8IWEudHlwZSl7bGV0IGU9YFJlY2VpdmVkIGVtcHR5IG1lc3NhZ2Ugb3IgdHlwZSwgZXh0ZW5zaW9uUmVzcG9uc2U6ICR7SlNPTi5zdHJpbmdpZnkoYSl9LCByZXF1ZXN0OiAke0pTT04uc3RyaW5naWZ5KHMpfSwgbWVzc2FnZTogJHtKU09OLnN0cmluZ2lmeShuKX1gO3Rocm93IHRoaXMubG9nZ2VyLmVycm9yKGUpLG5ldyBFcnJvcihlKX1pZihcImVycm9yXCI9PT1hLnR5cGUpe2xldCBlPWBSZWNlaXZlZCBlcnJvcjogJHtKU09OLnN0cmluZ2lmeShhKX0sIGZvciByZXF1ZXN0OiAke0pTT04uc3RyaW5naWZ5KHMpfSwgbWVzc2FnZTogJHtKU09OLnN0cmluZ2lmeShuKX1gLHQ9bnVsbDt0aHJvdyB0aGlzLmxvZ2dlci5lcnJvcihlKSxhLm1lc3NhZ2UuZXJyb3ImJmEubWVzc2FnZS5lcnJvci5tZXNzYWdlJiYoZT1hLm1lc3NhZ2UuZXJyb3IubWVzc2FnZSksYS5tZXNzYWdlLmVycm9yJiZhLm1lc3NhZ2UuZXJyb3IubmFtZSYmKHQ9YS5tZXNzYWdlLmVycm9yLm5hbWUpLG5ldyBET01FeGNlcHRpb24oZSx0KX1pZihcInJlc3BvbnNlXCIhPT1hLnR5cGUmJlwiZXZlbnRcIiE9PWEudHlwZSl7bGV0IGU9YFJlY2VpdmVkIGludmFsaWQgbWVzc2FnZSB0eXBlLCB0eXBlOiAke0pTT04uc3RyaW5naWZ5KGEudHlwZSl9LCBldmVudDogJHtKU09OLnN0cmluZ2lmeShhKX0sIHJlcXVlc3Q6ICR7SlNPTi5zdHJpbmdpZnkocyl9LCBtZXNzYWdlOiAke0pTT04uc3RyaW5naWZ5KG4pfWA7dGhyb3cgdGhpcy5sb2dnZXIuZXJyb3IoZSksbmV3IEVycm9yKGUpfWlmKCF0aGlzLmlzVmFsaWRBcGkoYS5tZXNzYWdlLmFwaSkpe2xldCBlPWBSZWNlaXZlZCBpbnZhbGlkIG1lc3NhZ2UgYXBpLCBldmVudDogJHtKU09OLnN0cmluZ2lmeShhKX0sIHJlcXVlc3Q6ICR7SlNPTi5zdHJpbmdpZnkocyl9LCBtZXNzYWdlOiAke0pTT04uc3RyaW5naWZ5KG4pfWA7dGhyb3cgdGhpcy5sb2dnZXIuZXJyb3IoZSksbmV3IEVycm9yKGUpfXJldHVyblwiZXZlbnRcIj09PWEudHlwZT9hLm1lc3NhZ2UuZXZlbnQ6YS5tZXNzYWdlLnJlc3BvbnNlfWFzeW5jIGdldFVzZXJNZWRpYUludGVybmFsKGUpe2xldCB0PWF3YWl0IHRoaXMuc2VuZEFwaVJlcXVlc3QoYS5HRVRVU0VSTUVESUFfQVBJX05BTUUsW2VdKTtyZXR1cm4gdGhpcy5tYWtlU3RyZWFtUHJveHkodCl9Z2V0T3ZlcnJpZGVuQXBpKGUpe3JldHVybiB0aGlzLm92ZXJyaWRlbkFwaXMuZ2V0KGUpfWFzeW5jIGdldFVzZXJNZWRpYShlKXtpZihlLmF1ZGlvJiZlLnZpZGVvKXtsZXQgdD1hd2FpdCBuYXZpZ2F0b3IucGVybWlzc2lvbnMucXVlcnkoe25hbWU6XCJtaWNyb3Bob25lXCJ9KSxyPWF3YWl0IG5hdmlnYXRvci5wZXJtaXNzaW9ucy5xdWVyeSh7bmFtZTpcImNhbWVyYVwifSk7aWYodCYmXCJncmFudGVkXCI9PT10LnN0YXRlJiZyJiZcImdyYW50ZWRcIj09PXIuc3RhdGUpcmV0dXJuIGF3YWl0IHRoaXMuZ2V0VXNlck1lZGlhSW50ZXJuYWwoZSl9ZWxzZSBpZihlLmF1ZGlvKXtsZXQgdD1hd2FpdCBuYXZpZ2F0b3IucGVybWlzc2lvbnMucXVlcnkoe25hbWU6XCJtaWNyb3Bob25lXCJ9KTtpZih0JiZcImdyYW50ZWRcIj09PXQuc3RhdGUpcmV0dXJuIGF3YWl0IHRoaXMuZ2V0VXNlck1lZGlhSW50ZXJuYWwoZSl9ZWxzZSBpZihlLnZpZGVvKXtsZXQgdD1hd2FpdCBuYXZpZ2F0b3IucGVybWlzc2lvbnMucXVlcnkoe25hbWU6XCJjYW1lcmFcIn0pO2lmKHQmJlwiZ3JhbnRlZFwiPT09dC5zdGF0ZSlyZXR1cm4gYXdhaXQgdGhpcy5nZXRVc2VyTWVkaWFJbnRlcm5hbChlKX1sZXQgdD1bXTtpZihlLnZpZGVvJiYodD1hd2FpdCB0aGlzLmdldE92ZXJyaWRlbkFwaShcIm5hdmlnYXRvci5tZWRpYURldmljZXMuZW51bWVyYXRlRGV2aWNlc1wiKS5hcHBseShuYXZpZ2F0b3IubWVkaWFEZXZpY2VzKSx0PXQuZmlsdGVyKChlPT5lLmtpbmQmJmUua2luZC5pbmRleE9mKFwidmlkZW9cIik+LTEpKSksZS5hdWRpbyYmIWUudmlkZW98fGUudmlkZW8mJnQubGVuZ3RoPjApeyhhd2FpdCB0aGlzLmdldE92ZXJyaWRlbkFwaShcIm5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhXCIpLmFwcGx5KG5hdmlnYXRvci5tZWRpYURldmljZXMsW2VdKSkuZ2V0VHJhY2tzKCkuZm9yRWFjaCgoZT0+e2Uuc3RvcCgpfSkpfXJldHVybiBhd2FpdCB0aGlzLmdldFVzZXJNZWRpYUludGVybmFsKGUpfWFzeW5jIGVudW1lcmF0ZURldmljZXMoKXtsZXQgZT1hd2FpdCB0aGlzLnNlbmRBcGlSZXF1ZXN0KGEuRU5VTUVSQVRFREVWSUNFU19BUElfTkFNRSxbXSk7cmV0dXJuIHRoaXMubWFrZU1lZGlhRGV2aWNlSW5mb1Byb3hpZXMoZSl9Z2V0VmVyc2lvbigpe3JldHVybiBlfW1ha2VSZWNlaXZlclByb3h5KGUpe3JldHVybiBlLnRyYWNrJiYoZS50cmFjaz10aGlzLm1ha2VUcmFja1Byb3h5KGUudHJhY2spKSxlLmdldFN5bmNocm9uaXphdGlvblNvdXJjZXM9KCk9PmUuc3luY2hyb25pemF0aW9uU291cmNlcyxlLmdldFN0YXRzPWFzeW5jKCk9PntsZXQgdD1hd2FpdCB0aGlzLnNlbmRBcGlSZXF1ZXN0KGEuR0VUX1JFQ0VJVkVSX1NUQVRTX0FQSV9OQU1FLFtlLmlkXSkscj1uZXcgTWFwO3JldHVybiB0LmZvckVhY2goKGU9PntyLnNldChlLmlkLGUpfSkpLHJ9LGUuY3JlYXRlRW5jb2RlZFN0cmVhbXM9KCk9PntsZXQgdD17aWQ6Y3J5cHRvLnJhbmRvbVVVSUQoKSx0eXBlOlwicHJveHlcIixyZWFkYWJsZTp7aWQ6Y3J5cHRvLnJhbmRvbVVVSUQoKSx0eXBlOlwicHJveHlcIn0sd3JpdGFibGU6e2lkOmNyeXB0by5yYW5kb21VVUlEKCksdHlwZTpcInByb3h5XCJ9fTtyZXR1cm4gdGhpcy5zdHJlYW1Qcm94aWVzLnNldCh0LmlkLHQpLHRoaXMuc2VuZEFwaVJlcXVlc3QoYS5SRUNFSVZFUl9DUkVBVEVfRU5DT0RFRF9TVFJFQU1TLFtlLmlkLHRdKSx0fSx0aGlzLnJlY2VpdmVyUHJveGllcy5zZXQoZS5pZCxlKSxlfW1ha2VEVE1GUHJveHkoZSl7bGV0IHQ9ZTtyZXR1cm4gdGhpcy5kdG1mUHJveGllcy5oYXModC5pZCk/KHQ9dGhpcy5kdG1mUHJveGllcy5nZXQodC5pZCksT2JqZWN0LmFzc2lnbih0LGUpKToodGhpcy5kdG1mUHJveGllcy5zZXQodC5pZCx0KSx0LnBlbmRpbmdFdmVudHM9bmV3IE1hcCx0Lmluc2VydERUTUY9KGUscixuKT0+e3RoaXMuc2VuZEFwaVJlcXVlc3QoYS5JTlNFUlRfRFRNRl9BUElfTkFNRSxbdC5pZCxlLHIsbl0pfSx0LmFkZEV2ZW50TGlzdGVuZXI9KGUscixuKT0+e3RoaXMuYWRkRHRtZkV2ZW50TGlzdGVuZXIodC5pZCxlLHIsbil9LHQucmVtb3ZlRXZlbnRMaXN0ZW5lcj0oZSxyKT0+e3RoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcih0LmlkLGUscil9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwib250b25lY2hhbmdlXCIse3NldDplPT57dGhpcy5hZGREdG1mRXZlbnRMaXN0ZW5lcih0LmlkLGQuVE9ORUNIQU5HRSxlKX0sZ2V0OigpPT5udWxsfSksdGhpcy5wcmVSZWdpc3RlckV2ZW50cyhkLHQsdGhpcy5hZGREdG1mRXZlbnRMaXN0ZW5lcikpLHR9bWFrZVNlbmRlclByb3h5KGUpe3JldHVybiBlLnRyYWNrJiYoZS50cmFjaz10aGlzLm1ha2VUcmFja1Byb3h5KGUudHJhY2spKSxlLmR0bWYmJihlLmR0bWY9dGhpcy5tYWtlRFRNRlByb3h5KGUuZHRtZikpLGUuZ2V0U3RhdHM9YXN5bmMoKT0+e2xldCB0PWF3YWl0IHRoaXMuc2VuZEFwaVJlcXVlc3QoYS5HRVRfU0VOREVSX1NUQVRTX0FQSV9OQU1FLFtlLmlkXSk7cmV0dXJuIHQuaGFzPWU9PnZvaWQgMCE9PXQuZmluZCgodD0+dC5pZD09PWUpKSx0LmdldD1lPT50LmZpbmQoKHQ9PnQuaWQ9PT1lKSksdH0sZS5yZXBsYWNlVHJhY2s9dD0+KGUudHJhY2s9dCx0aGlzLnNlbmRBcGlSZXF1ZXN0KGEuUkVQTEFDRV9TRU5ERVJfVFJBQ0tfQVBJX05BTUUsW2UuaWQsdF0pKSxlLmNyZWF0ZUVuY29kZWRTdHJlYW1zPSgpPT57bGV0IHQ9e2lkOmNyeXB0by5yYW5kb21VVUlEKCksdHlwZTpcInByb3h5XCIscmVhZGFibGU6e3R5cGU6XCJwcm94eVwiLGlkOmNyeXB0by5yYW5kb21VVUlEKCl9LHdyaXRhYmxlOnt0eXBlOlwicHJveHlcIixpZDpjcnlwdG8ucmFuZG9tVVVJRCgpfX07cmV0dXJuIHRoaXMuc3RyZWFtUHJveGllcy5zZXQodC5pZCx0KSx0aGlzLnNlbmRBcGlSZXF1ZXN0KGEuU0VOREVSX0NSRUFURV9FTkNPREVEX1NUUkVBTVMsW2UuaWQsdF0pLHR9LGV9dXBkYXRlU2VuZGVyUHJveHkoZSl7bGV0IHQ9dGhpcy5zZW5kZXJQcm94aWVzLmdldChlLmlkKTtyZXR1cm4gdD9PYmplY3QuYXNzaWduKHQsZSk6KHQ9ZSx0aGlzLnNlbmRlclByb3hpZXMuc2V0KGUuaWQsdCkpLHRoaXMubWFrZVNlbmRlclByb3h5KHQpfXVwZGF0ZVJlY2VpdmVyUHJveHkoZSl7bGV0IHQ9dGhpcy5yZWNlaXZlclByb3hpZXMuZ2V0KGUuaWQpO3JldHVybiB0P09iamVjdC5hc3NpZ24odCxlKToodD1lLHRoaXMucmVjZWl2ZXJQcm94aWVzLnNldChlLmlkLHQpKSx0aGlzLm1ha2VSZWNlaXZlclByb3h5KHQpfWFkZFRyYWNrKGUsdCl7bGV0IHI9Y3J5cHRvLnJhbmRvbVVVSUQoKTt0aGlzLnNlbmRBcGlSZXF1ZXN0KGEuQUREX1RSQUNLX0FQSV9OQU1FLFtyLC4uLmFyZ3VtZW50c10pLnRoZW4oKGU9Pnt0aGlzLnVwZGF0ZVNlbmRlclByb3h5KGUpLHRoaXMudXBkYXRlUENTZW5kZXJzKGUucGNJZCxlLnNlbmRlcnMpLHRoaXMudXBkYXRlUENSZWNlaXZlcnMoZS5wY0lkLGUucmVjZWl2ZXJzKSx0aGlzLnVwZGF0ZVBDVHJhbnNjZWl2ZXJzKGUucGNJZCxlLnRyYW5zY2VpdmVycyl9KSk7bGV0IG49dGhpcy51cGRhdGVTZW5kZXJQcm94eSh7aWQ6cn0pO3JldHVybiB0aGlzLnBjUHJveGllcy5nZXQoZSkuc2VuZGVycy5wdXNoKG4pLG59dXBkYXRlUGVlckNvbm5lY3Rpb25Qcm94eShlKXtsZXQgdD10aGlzLnBjUHJveGllcy5nZXQoZS5wY0lkKTtPYmplY3QuYXNzaWduKHQsZSksdGhpcy51cGRhdGVQQ1NlbmRlcnMoZS5wY0lkLGUuc2VuZGVycyksdGhpcy51cGRhdGVQQ1JlY2VpdmVycyhlLnBjSWQsZS5yZWNlaXZlcnMpLHRoaXMudXBkYXRlUENUcmFuc2NlaXZlcnMoZS5wY0lkLGUudHJhbnNjZWl2ZXJzKX1jcmVhdGVQZWVyQ29ubmVjdGlvbihlLHQpe2xldCByPWNyeXB0by5yYW5kb21VVUlEKCksbj10aGlzO3RoaXMubG9nZ2VyLmRlYnVnKGBDcmVhdGluZyBSVENQZWVyQ29ubmVjdGlvbiB3aXRoIGlkOiAke3J9YCk7bGV0IGk9e3R5cGU6XCJwcm94eVwiLGlkOnIsc2lnbmFsaW5nU3RhdGU6XCJuZXdcIixjb25uZWN0aW9uU3RhdGU6XCJuZXdcIixpY2VDb25uZWN0aW9uU3RhdGU6XCJuZXdcIixpY2VHYXRoZXJpbmdTdGF0ZTpcIm5ld1wiLHJlY2VpdmVyczpbXSxzZW5kZXJzOltdLHRyYW5zY2VpdmVyczpbXSxwZW5kaW5nRXZlbnRzOm5ldyBNYXAsY29uZmlndXJhdGlvbjplLGNsb3NlOigpPT57dGhpcy5jbG9zZShyKX0sYWRkU3RyZWFtOmU9Pnt0aGlzLmFkZFN0cmVhbShyLGUpfSxnZXRDb25maWd1cmF0aW9uOigpPT4odGhpcy5zZW5kQXBpUmVxdWVzdChhLlBDX0dFVF9DT05GSUdVUkFUSU9OLFtyXSkudGhlbigoZT0+e2kuY29uZmlndXJhdGlvbj1lfSkpLGkuY29uZmlndXJhdGlvbiksZ2V0U3RhdHM6ZT0+dGhpcy5nZXRTdGF0cyhyLGUpLGNyZWF0ZU9mZmVyOmU9PnRoaXMuY3JlYXRlT2ZmZXIocixlKSxjcmVhdGVBbnN3ZXI6ZT0+dGhpcy5jcmVhdGVBbnN3ZXIocixlKSxzZXRMb2NhbERlc2NyaXB0aW9uOmU9PnRoaXMuc2V0TG9jYWxEZXNjcmlwdGlvbihyLGUpLGFkZEV2ZW50TGlzdGVuZXI6KGUsdCk9Pnt0aGlzLmFkZFBlZXJDb25uZWN0aW9uRXZlbnRMaXN0ZW5lcihyLGUsdCl9LHJlbW92ZUV2ZW50TGlzdGVuZXI6KGUsdCk9Pnt0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIocixlLHQpfSxnZXRFdmVudExpc3RlbmVyOmU9PnRoaXMuZXZlbnRMaXN0ZW5lcnMuZ2V0KHIpLmdldChlKSxzZXQgb25pY2VjYW5kaWRhdGUoZSl7dGhpcy5hZGRFdmVudExpc3RlbmVyKG8uSUNFX0NBTkRJREFURSxlKX0sZ2V0IG9uaWNlY2FuZGlkYXRlKCl7cmV0dXJuIHRoaXMuZ2V0RXZlbnRMaXN0ZW5lcihvLklDRV9DQU5ESURBVEUpfSxzZXQgb250cmFjayhlKXt0aGlzLmFkZEV2ZW50TGlzdGVuZXIoby5UUkFDSyxlKX0sZ2V0IG9udHJhY2soKXtyZXR1cm4gdGhpcy5nZXRFdmVudExpc3RlbmVyKG8uVFJBQ0spfSxnZXQgb25zaWduYWxpbmdzdGF0ZWNoYW5nZSgpe3JldHVybiB0aGlzLmdldEV2ZW50TGlzdGVuZXIoby5TSUdfU1RBVEVfQ0hBTkdFKX0sc2V0IG9uc2lnbmFsaW5nc3RhdGVjaGFuZ2UoZSl7dGhpcy5hZGRFdmVudExpc3RlbmVyKG8uU0lHX1NUQVRFX0NIQU5HRSxlKX0sZ2V0IG9uY29ubmVjdGlvbnN0YXRlY2hhbmdlKCl7cmV0dXJuIHRoaXMuZ2V0RXZlbnRMaXN0ZW5lcihvLkNPTk5fU1RBVEVfQ0hBTkdFKX0sc2V0IG9uY29ubmVjdGlvbnN0YXRlY2hhbmdlKGUpe3RoaXMuYWRkRXZlbnRMaXN0ZW5lcihvLkNPTk5fU1RBVEVfQ0hBTkdFLGUpfSxnZXQgb25pY2Vjb25uZWN0aW9uc3RhdGVjaGFuZ2UoKXtyZXR1cm4gdGhpcy5nZXRFdmVudExpc3RlbmVyKG8uSUNFX0NPTk5fU1RBVEVfQ0hBTkdFKX0sc2V0IG9uaWNlY29ubmVjdGlvbnN0YXRlY2hhbmdlKGUpe3RoaXMuYWRkRXZlbnRMaXN0ZW5lcihvLklDRV9DT05OX1NUQVRFX0NIQU5HRSxlKX0sZ2V0IG9uaWNlZ2F0aGVyaW5nc3RhdGVjaGFuZ2UoKXtyZXR1cm4gdGhpcy5nZXRFdmVudExpc3RlbmVyKG8uSUNFX0dBVEhFUl9TVEFURV9DSEFOR0UpfSxzZXQgb25pY2VnYXRoZXJpbmdzdGF0ZWNoYW5nZShlKXt0aGlzLmFkZEV2ZW50TGlzdGVuZXIoby5JQ0VfR0FUSEVSX1NUQVRFX0NIQU5HRSxlKX0sZ2V0IG9ubmVnb3RpYXRpb25uZWVkZWQoKXtyZXR1cm4gdGhpcy5nZXRFdmVudExpc3RlbmVyKG8uTkVHT1RJQVRJT05fTkVFREVEKX0sc2V0IG9ubmVnb3RpYXRpb25uZWVkZWQoZSl7dGhpcy5hZGRFdmVudExpc3RlbmVyKG8uTkVHT1RJQVRJT05fTkVFREVELGUpfSxzZXRSZW1vdGVEZXNjcmlwdGlvbjplPT50aGlzLnNldFJlbW90ZURlc2NyaXB0aW9uKHIsZSksYWRkSWNlQ2FuZGlkYXRlOmU9PnRoaXMuYWRkSWNlQ2FuZGlkYXRlKHIsZSksZ2V0UmVtb3RlU3RyZWFtczooKT0+KHRoaXMubG9nZ2VyLndhcm4oXCJnZXRSZW1vdGVTdHJlYW1zIG5vdCBpbXBsZW1lbnRlZCBvbiBwcm94eS5cIiksW10pLGdldFJlY2VpdmVyczooKT0+dGhpcy5nZXRSZWNlaXZlcnMociksZ2V0U2VuZGVyczooKT0+dGhpcy5nZXRTZW5kZXJzKHIpLGFkZFRyYWNrOmZ1bmN0aW9uKGUpe2xldCB0PVtyLC4uLmFyZ3VtZW50c107cmV0dXJuIG4uYWRkVHJhY2suYXBwbHkobix0KX0sYWRkVHJhbnNjZWl2ZXI6KGUsdCk9PnRoaXMuYWRkVHJhbnNjZWl2ZXIocixlLHQpLGdldFRyYW5zY2VpdmVyczooKT0+dGhpcy5nZXRUcmFuc2NlaXZlcnMocikscmVtb3ZlVHJhY2s6ZT0+e3RoaXMucmVtb3ZlVHJhY2socixlKX19O3JldHVybiB0aGlzLnBjUHJveGllcy5zZXQocixpKSx0aGlzLnNlbmRBcGlSZXF1ZXN0KGEuTkVXUlRDUEVFUkNPTk5FQ1RJT05fQVBJX05BTUUsW3IsZSx0XSxyKS50aGVuKChlPT57dGhpcy51cGRhdGVQZWVyQ29ubmVjdGlvblByb3h5KGUpfSksKGU9Pnt0aGlzLmxvZ2dlci5lcnJvcihgRXJyb3IgY3JlYXRpbmcgcHJveGllZCBSVENQZWVyQ29ubmVjdGlvbjogJHtlfWApfSkpLHRoaXMucHJlUmVnaXN0ZXJFdmVudHMobyx0aGlzLnBjUHJveGllcy5nZXQociksdGhpcy5hZGRQZWVyQ29ubmVjdGlvbkV2ZW50TGlzdGVuZXIpLHRoaXMucGNQcm94aWVzLmdldChyKX1wcmVSZWdpc3RlckV2ZW50cyhlLHQscil7Zm9yKGNvbnN0IG4gaW4gZSlcInN0cmluZ1wiPT10eXBlb2YgZVtuXSYmci5hcHBseSh0aGlzLFt0LmlkLGVbbl0sZT0+e3QucGVuZGluZ0V2ZW50cy5oYXMoZS5ldmVudE5hbWUpfHx0LnBlbmRpbmdFdmVudHMuc2V0KGUuZXZlbnROYW1lLFtdKSx0LnBlbmRpbmdFdmVudHMuZ2V0KGUuZXZlbnROYW1lKS5wdXNoKGUpfV0pfXVwZGF0ZUF1ZGlvQ29udGV4dFByb3h5KGUpe2xldCB0PXRoaXMuYXVkaW9Db250ZXh0UHJveGllcy5nZXQoZS5pZCk7T2JqZWN0LmFzc2lnbih0LGUpfXVwZGF0ZUF1ZGlvTm9kZVByb3h5KGUpe2xldCB0PXRoaXMuYXVkaW9Ob2RlUHJveGllcy5nZXQoZS5pZCk7T2JqZWN0LmFzc2lnbih0LGUpLGUuc3RyZWFtJiZ0aGlzLm1ha2VTdHJlYW1Qcm94eShlLnN0cmVhbSl9bWFrZUF1ZGlvTm9kZVByb3h5KGUsdCl7cmV0dXJue3R5cGU6XCJwcm94eVwiLGlkOnQsY29udGV4dDp0aGlzLmF1ZGlvQ29udGV4dFByb3hpZXMuZ2V0KGUpLGNvbm5lY3Q6KGUscixuKT0+KHRoaXMuc2VuZEFwaVJlcXVlc3QoYS5BVURJT19OT0RFX0NPTk5FQ1QsW3QsZSxyLG5dKSxlKSxkaXNjb25uZWN0OihlLHIsbik9Pnt0aGlzLnNlbmRBcGlSZXF1ZXN0KGEuQVVESU9fTk9ERV9ESVNDT05ORUNULFt0LGUscixuXSl9fX1jcmVhdGVBdWRpb05vZGUoZSx0LHIpe2xldCBuPWNyeXB0by5yYW5kb21VVUlEKCk7cmV0dXJuIHRoaXMuYXVkaW9Ob2RlUHJveGllcy5zZXQobix0aGlzLm1ha2VBdWRpb05vZGVQcm94eShlLG4pKSx0aGlzLnNlbmRBcGlSZXF1ZXN0KGEuQVVESU9fQ1RYX0NSRUFURV9BVURJT19OT0RFLFtlLG4sdCxyXSxuKS50aGVuKChlPT57dGhpcy51cGRhdGVBdWRpb05vZGVQcm94eShlKX0pLChlPT57dGhpcy5sb2dnZXIuZXJyb3IoYEVycm9yIGNyZWF0aW5nIHByb3hpZWQgJHt0fTogJHtlfWApfSkpLHRoaXMuYXVkaW9Ob2RlUHJveGllcy5nZXQobil9bWFrZVdvcmtlclByb3h5KGUpe2xldCB0PXtpZDplLHBlbmRpbmdFdmVudHM6bmV3IE1hcCx0eXBlOlwicHJveHlcIixwb3N0TWVzc2FnZToodCxyKT0+e3RoaXMuc2VuZEFwaVJlcXVlc3QoYS5XT1JLRVJfUE9TVF9NRVNTQUdFLFtlLHQscl0pfSx0ZXJtaW5hdGU6KCk9Pnt0aGlzLnNlbmRBcGlSZXF1ZXN0KGEuV09SS0VSX1RFUk1JTkFURSxbZV0pfSxhZGRFdmVudExpc3RlbmVyOihlLHIsbik9Pnt0aGlzLmFkZFdvcmtlckV2ZW50TGlzdGVuZXIodC5pZCxlLHIsbil9LHJlbW92ZUV2ZW50TGlzdGVuZXI6KGUscik9Pnt0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIodC5pZCxlLHIpfX07cmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwib25lcnJvclwiLHtzZXQ6ZT0+e3RoaXMuYWRkV29ya2VyRXZlbnRMaXN0ZW5lcih0LmlkLGwuRVJST1IsZSl9LGdldDooKT0+bnVsbH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwib25tZXNzYWdlXCIse3NldDplPT57dGhpcy5hZGRXb3JrZXJFdmVudExpc3RlbmVyKHQuaWQsbC5NRVNTQUdFLGUpfSxnZXQ6KCk9Pm51bGx9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIm9ubWVzc2FnZWVycm9yXCIse3NldDplPT57dGhpcy5hZGRXb3JrZXJFdmVudExpc3RlbmVyKHQuaWQsbC5NRVNTQUdFX0VSUk9SLGUpfSxnZXQ6KCk9Pm51bGx9KSx0fWNyZWF0ZVdvcmtlcihlLHQpe2xldCByPWNyeXB0by5yYW5kb21VVUlEKCksbj10aGlzLm1ha2VXb3JrZXJQcm94eShyKTtyZXR1cm4gdGhpcy53b3JrZXJQcm94aWVzLnNldChyLG4pLGZldGNoKGUpLnRoZW4oKGU9PntlLmJsb2IoKS50aGVuKChlPT57ZS5hcnJheUJ1ZmZlcigpLnRoZW4oKG49PntsZXQgaT0oMCxoLmVuY29kZSkobik7dGhpcy5zZW5kQXBpUmVxdWVzdChhLkNSRUFURV9XT1JLRVIsW3IsZS50eXBlLGksdF0pLnRoZW4oKGU9Pnt0aGlzLmxvZ2dlci5kZWJ1ZyhgQ3JlYXRlZCB3b3JrZXI6ICR7SlNPTi5zdHJpbmdpZnkoZSl9YCl9KSl9KSl9KSl9KSksdGhpcy5sb2dnZXIuZGVidWcoYFByZXJlZ2lzdGVyaW5nIGV2ZW50cyBmb3Igd29ya2VyOiAke0pTT04uc3RyaW5naWZ5KG4pfWApLHRoaXMucHJlUmVnaXN0ZXJFdmVudHMobCxuLHRoaXMuYWRkV29ya2VyRXZlbnRMaXN0ZW5lciksbn1jcmVhdGVBdWRpb0NvbnRleHQoKXtsZXQgZT1jcnlwdG8ucmFuZG9tVVVJRCgpLHQ9Y3J5cHRvLnJhbmRvbVVVSUQoKTtyZXR1cm4gdGhpcy5hdWRpb0NvbnRleHRQcm94aWVzLnNldChlLHt0eXBlOlwicHJveHlcIixpZDplLGRlc3RpbmF0aW9uOnRoaXMubWFrZUF1ZGlvTm9kZVByb3h5KGUsdCksY3JlYXRlR2FpbjooKT0+e2xldCB0PXRoaXMuY3JlYXRlQXVkaW9Ob2RlKGUsXCJHYWluXCIsW10pLHI9e3NldFZhbHVlQXRUaW1lOihlLG4pPT4oci5jdXJyZW50VmFsdWU9ZSx0aGlzLnNlbmRBcGlSZXF1ZXN0KGEuQVVESU9fUEFSQU1fU0VUX1ZBTFVFX0FUX1RJTUUsW3QuaWQsZSxuXSksciksbGluZWFyUmFtcFRvVmFsdWVBdFRpbWU6KGUsbik9Pih0aGlzLnNlbmRBcGlSZXF1ZXN0KGEuQVVESU9fUEFSQU1fU0VUX1JBTVBfVE9fVkFMVUVfQVRfVElNRSxbdC5pZCxlLG5dKSxyKX07cmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyLFwidmFsdWVcIix7c2V0OmU9PnIuc2V0VmFsdWVBdFRpbWUoZSwwKSxnZXQ6KCk9PnIuY3VycmVudFZhbHVlfSksdC5nYWluPXIsdH0sY3JlYXRlT3NjaWxsYXRvcjooKT0+e2xldCB0PXRoaXMuY3JlYXRlQXVkaW9Ob2RlKGUsXCJPc2NpbGxhdG9yXCIsW10pO3Quc3RhcnQ9KGU9MCk9Pnt0aGlzLnNlbmRBcGlSZXF1ZXN0KGEuQVVESU9fTk9ERV9TVEFSVCxbdC5pZCxlXSl9LHQuc3RvcD0oZT0wKT0+e3RoaXMuc2VuZEFwaVJlcXVlc3QoYS5BVURJT19OT0RFX1NUT1AsW3QuaWQsZV0pfSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcInR5cGVcIix7c2V0OmU9Pnt0LmN1cnJlbnRUeXBlPWUsdGhpcy5zZW5kQXBpUmVxdWVzdChhLkFVRElPX05PREVfU0VUX1RZUEUsW3QuaWQsZV0pfSxnZXQ6KCk9PnQuY3VycmVudFR5cGV9KTtsZXQgcj17c2V0VmFsdWVBdFRpbWU6KGUsbik9Pih0aGlzLnNlbmRBcGlSZXF1ZXN0KGEuQVVESU9fUEFSQU1fU0VUX1ZBTFVFX0FUX1RJTUUsW3QuaWQsZSxuXSkscil9O3JldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkocixcInZhbHVlXCIse3NldDplPT5yLnNldFZhbHVlQXRUaW1lKGUsMCksZ2V0OigpPT5yLmN1cnJlbnRWYWx1ZX0pLHQuZnJlcXVlbmN5PXIsdH0sY3JlYXRlTWVkaWFTdHJlYW1Tb3VyY2U6dD0+dGhpcy5jcmVhdGVBdWRpb05vZGUoZSxcIk1lZGlhU3RyZWFtU291cmNlXCIsW3QucHJveHldKSxjcmVhdGVBbmFseXNlcjooKT0+dGhpcy5jcmVhdGVBdWRpb05vZGUoZSxcIkFuYWx5c2VyXCIsW10pLGNyZWF0ZU1lZGlhU3RyZWFtRGVzdGluYXRpb246KCk9PntsZXQgdD10aGlzLmNyZWF0ZUF1ZGlvTm9kZShlLFwiTWVkaWFTdHJlYW1EZXN0aW5hdGlvblwiLFtdKTtyZXR1cm4gdC5zdHJlYW09dGhpcy5tYWtlU3RyZWFtUHJveHkoe2lkOnQuaWQsdHJhY2tzOlt7aWQ6dC5pZCxraW5kOlwiYXVkaW9cIn1dfSksdH0sY2xvc2U6KCk9PnRoaXMuc2VuZEFwaVJlcXVlc3QoYS5BVURJT19DVFhfQ0xPU0UsW2VdKX0pLHRoaXMuc2VuZEFwaVJlcXVlc3QoYS5ORVdfQVVESU9fQ09OVEVYVCxbZSx0XSxlKS50aGVuKChlPT57dGhpcy51cGRhdGVBdWRpb0NvbnRleHRQcm94eShlKX0pLChlPT57dGhpcy5sb2dnZXIuZXJyb3IoYEVycm9yIGNyZWF0aW5nIHByb3hpZWQgQXVkaW9Db250ZXh0OiAke2V9YCl9KSksdGhpcy5hdWRpb0NvbnRleHRQcm94aWVzLmdldChlKX1jbG9zZShlKXt0aGlzLmV2ZW50TGlzdGVuZXJzLmdldChlKS5jbGVhcigpLHRoaXMuc2VuZEFwaVJlcXVlc3QoYS5QQ19DTE9TRV9BUElfTkFNRSxbZV0pfWFkZFN0cmVhbShlLHQpe3RoaXMuc2VuZEFwaVJlcXVlc3QoYS5BRERTVFJFQU1fQVBJX05BTUUsW2UsdC5wcm94eV0pfWdldFN0YXRzKGUsdCl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgdD9Qcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJjYWxsYmFjayBiYXNlZCBnZXRTdGF0cyBpcyBvYnNvbGV0ZS5cIikpOnRoaXMuc2VuZEFwaVJlcXVlc3QoYS5HRVRfU1RBVFNfQVBJX05BTUUsW2UsdF0pfWNyZWF0ZU9mZmVyKGUsdCl7cmV0dXJuIHRoaXMuc2VuZEFwaVJlcXVlc3QoYS5DUkVBVEVfT0ZGRVJfQVBJX05BTUUsW2UsdF0pfWNyZWF0ZUFuc3dlcihlLHQpe3JldHVybiB0aGlzLnNlbmRBcGlSZXF1ZXN0KGEuQ1JFQVRFX0FOU1dFUl9BUElfTkFNRSxbZSx0XSl9c2V0TG9jYWxEZXNjcmlwdGlvbihlLHQpe3JldHVybiB0aGlzLnBjUHJveGllcy5nZXQoZSkubG9jYWxEZXNjcmlwdGlvbj10LHRoaXMuc2VuZEFwaVJlcXVlc3QoYS5TRVRfTE9DQUxfREVTQ1JJUFRJT05fQVBJX05BTUUsW2UsdF0pfXNldFJlbW90ZURlc2NyaXB0aW9uKGUsdCl7cmV0dXJuIHRoaXMuc2VuZEFwaVJlcXVlc3QoYS5TRVRfUkVNT1RFX0RFU0NSSVBUSU9OX0FQSV9OQU1FLFtlLHRdKX1oYW5kbGVBZGRFdmVudExpc3RlbmVyUmVzcG9uc2UoZSl7ZS5ldmVudE5hbWU9PT1vLlNJR19TVEFURV9DSEFOR0U/dGhpcy51cGRhdGVQZWVyQ29ubmVjdGlvblByb3h5KGUpOmUuZXZlbnROYW1lPT09by5UUkFDSz8oZS5zdHJlYW1zPWUuc3RyZWFtcy5tYXAoKGU9PnRoaXMubWFrZVN0cmVhbVByb3h5KGUpKSksZS50cmFjaz10aGlzLm1ha2VUcmFja1Byb3h5KGUudHJhY2spLHRoaXMudXBkYXRlUGVlckNvbm5lY3Rpb25Qcm94eShlKSk6KGUuZXZlbnROYW1lPT09by5DT05OX1NUQVRFX0NIQU5HRXx8ZS5ldmVudE5hbWU9PT1vLklDRV9DT05OX1NUQVRFX0NIQU5HRXx8ZS5ldmVudE5hbWU9PT1vLklDRV9HQVRIRVJfU1RBVEVfQ0hBTkdFfHxlLmV2ZW50TmFtZT09PW8uSUNFX0NBTkRJREFURXx8ZS5ldmVudE5hbWU9PT1vLk5FR09USUFUSU9OX05FRURFRCkmJnRoaXMudXBkYXRlUGVlckNvbm5lY3Rpb25Qcm94eShlKSx0aGlzLmZpcmVVcEV2ZW50SGFuZGxlcnModGhpcy5wY1Byb3hpZXMuZ2V0KGUucGNJZCksZSksdGhpcy5zZW5kQXBpUmVxdWVzdChhLkFERF9QQ19FVkVOVF9MSVNURU5FUixbZS5wY0lkLGUuZXZlbnROYW1lXSkudGhlbigoZT0+e3RoaXMuaGFuZGxlQWRkRXZlbnRMaXN0ZW5lclJlc3BvbnNlKGUpfSkpfWZpcmVVcEV2ZW50SGFuZGxlcnMoZSx0KXtpZih0aGlzLmV2ZW50TGlzdGVuZXJzLmdldChlLmlkKS5oYXModC5ldmVudE5hbWUpKXtsZXQgcj1lLnBlbmRpbmdFdmVudHM7dGhpcy5ldmVudExpc3RlbmVycy5nZXQoZS5pZCkuZ2V0KHQuZXZlbnROYW1lKS5mb3JFYWNoKCgoZSxuKT0+ezA9PT1uP2UodCk6ci5nZXQodC5ldmVudE5hbWUpLmZvckVhY2goKHQ9PntlKHQpfSkpfSkpLHIuc2V0KHQuZXZlbnROYW1lLFtdKX19aGFuZGxlQWRkVHJhY2tFdmVudExpc3RlbmVyUmVzcG9uc2UoZSl7XCJtdXRlXCIhPT1lLmV2ZW50TmFtZSYmXCJ1bm11dGVcIiE9PWUuZXZlbnROYW1lfHwodGhpcy50cmFja1Byb3hpZXMuZ2V0KGUudHJhY2tJZCkubXV0ZWQ9ZS5tdXRlZCksdGhpcy5maXJlVXBFdmVudEhhbmRsZXJzKHRoaXMudHJhY2tQcm94aWVzLmdldChlLnRyYWNrSWQpLGUpLHRoaXMuc2VuZEFwaVJlcXVlc3QoYS5BRERfVFJBQ0tfRVZFTlRfTElTVEVORVIsW2UudHJhY2tJZCxlLmV2ZW50TmFtZV0pLnRoZW4oKGU9Pnt0aGlzLmhhbmRsZUFkZFRyYWNrRXZlbnRMaXN0ZW5lclJlc3BvbnNlKGUpfSkpfWhhbmRsZUFkZER0bWZFdmVudExpc3RlbmVyUmVzcG9uc2UoZSl7dGhpcy5maXJlVXBFdmVudEhhbmRsZXJzKHRoaXMuZHRtZlByb3hpZXMuZ2V0KGUuZHRtZklkKSxlKSx0aGlzLnNlbmRBcGlSZXF1ZXN0KGEuQUREX0RUTUZfRVZFTlRfTElTVEVORVIsW2UuZHRtZklkLGUuZXZlbnROYW1lXSkudGhlbigoZT0+e3RoaXMuaGFuZGxlQWRkRHRtZkV2ZW50TGlzdGVuZXJSZXNwb25zZShlKX0pKX1oYW5kbGVBZGRXb3JrZXJFdmVudExpc3RlbmVyUmVzcG9uc2UoZSl7dGhpcy5maXJlVXBFdmVudEhhbmRsZXJzKHRoaXMud29ya2VyUHJveGllcy5nZXQoZS53SWQpLGUpLHRoaXMuc2VuZEFwaVJlcXVlc3QoYS5BRERfV09SS0VSX0VWRU5UX0xJU1RFTkVSLFtlLndJZCxlLmV2ZW50TmFtZV0pLnRoZW4oKGU9Pnt0aGlzLmhhbmRsZUFkZFdvcmtlckV2ZW50TGlzdGVuZXJSZXNwb25zZShlKX0pKX1hZGRFdmVudExpc3RlbmVyKGUsdCxyKXt0aGlzLmV2ZW50TGlzdGVuZXJzLmhhcyhlKXx8dGhpcy5ldmVudExpc3RlbmVycy5zZXQoZSxuZXcgTWFwKSx0aGlzLmV2ZW50TGlzdGVuZXJzLmdldChlKS5oYXModCl8fHRoaXMuZXZlbnRMaXN0ZW5lcnMuZ2V0KGUpLnNldCh0LFtdKSx0aGlzLmV2ZW50TGlzdGVuZXJzLmdldChlKS5nZXQodCkucHVzaChyKX1hZGRQZWVyQ29ubmVjdGlvbkV2ZW50TGlzdGVuZXIoZSx0LHIpe3RoaXMuYWRkRXZlbnRMaXN0ZW5lcihlLHQsciksdGhpcy5zZW5kQXBpUmVxdWVzdChhLkFERF9QQ19FVkVOVF9MSVNURU5FUixbZSx0XSkudGhlbigoZT0+e3RoaXMuaGFuZGxlQWRkRXZlbnRMaXN0ZW5lclJlc3BvbnNlKGUpfSkpfWFkZFRyYWNrRXZlbnRMaXN0ZW5lcihlLHQscixuKXt0aGlzLmFkZEV2ZW50TGlzdGVuZXIoZSx0LHIpLHRoaXMuc2VuZEFwaVJlcXVlc3QoYS5BRERfVFJBQ0tfRVZFTlRfTElTVEVORVIsW2UsdCxuXSkudGhlbigoZT0+e3RoaXMuaGFuZGxlQWRkVHJhY2tFdmVudExpc3RlbmVyUmVzcG9uc2UoZSl9KSl9YWRkRHRtZkV2ZW50TGlzdGVuZXIoZSx0LHIsbil7dGhpcy5hZGRFdmVudExpc3RlbmVyKGUsdCxyKSx0aGlzLnNlbmRBcGlSZXF1ZXN0KGEuQUREX0RUTUZfRVZFTlRfTElTVEVORVIsW2UsdCxuXSkudGhlbigoZT0+e3RoaXMuaGFuZGxlQWRkRHRtZkV2ZW50TGlzdGVuZXJSZXNwb25zZShlKX0pKX1hZGRXb3JrZXJFdmVudExpc3RlbmVyKGUsdCxyKXt0aGlzLmFkZEV2ZW50TGlzdGVuZXIoZSx0LHIpLHRoaXMuc2VuZEFwaVJlcXVlc3QoYS5BRERfV09SS0VSX0VWRU5UX0xJU1RFTkVSLFtlLHRdKS50aGVuKChlPT57dGhpcy5oYW5kbGVBZGRXb3JrZXJFdmVudExpc3RlbmVyUmVzcG9uc2UoZSl9KSl9cmVtb3ZlRXZlbnRMaXN0ZW5lcihlLHQscil7bGV0IG49dGhpcy5ldmVudExpc3RlbmVycy5nZXQoZSkuZ2V0KHQpO2NvbnN0IGk9bi5pbmRleE9mKHIpO2k+LTEmJm4uc3BsaWNlKGksMSl9YWRkSWNlQ2FuZGlkYXRlKGUsdCl7bGV0IHI9dD97c2RwTUxpbmVJbmRleDp0LnNkcE1MaW5lSW5kZXgsc2RwTWlkOnQuc2RwTWlkLGNhbmRpZGF0ZTp0LmNhbmRpZGF0ZX06bnVsbDtyZXR1cm4gdGhpcy5zZW5kQXBpUmVxdWVzdChhLkFERF9JQ0VfQ0FORElEQVRFX0FQSV9OQU1FLFtlLHJdKX1jcmVhdGVNZWRpYUVsZW1lbnQoZSl7bGV0IHQ9Y3J5cHRvLnJhbmRvbVVVSUQoKTt0aGlzLnNlbmRBcGlSZXF1ZXN0KGEuQ1JFQVRFX01FRElBX0VMRU1FTlRfQVBJX05BTUUsW3QsZV0sdCkudGhlbigoZT0+e3RoaXMubWVkaWFFbGVtZW50UHJveGllcy5nZXQoZS5pZCkuc2lua0lkPWUuc2lua0lkfSkpO2xldCByPXtpZDp0LHR5cGU6XCJwcm94eVwiLGNsYXNzTGlzdDpuZXcgU2V0LGlzTXV0ZWQ6ITEscGxheTooKT0+e3RoaXMuc2VuZEFwaVJlcXVlc3QoYS5NRURJQV9FTEVNRU5UX1BMQVlfQVBJX05BTUUsW3RdKX0scGF1c2U6KCk9Pnt0aGlzLnNlbmRBcGlSZXF1ZXN0KGEuTUVESUFfRUxFTUVOVF9QQVVTRV9BUElfTkFNRSxbdF0pfSxzZXRTaW5rSWQ6ZT0+dGhpcy5zZW5kQXBpUmVxdWVzdChhLk1FRElBX0VMRU1FTlRfU0VUX1NJTktfSURfQVBJX05BTUUsW3QsZV0pLHJlbW92ZTooKT0+dGhpcy5zZW5kQXBpUmVxdWVzdChhLk1FRElBX0VMRU1FTlRfUkVNT1ZFLFt0XSl9O3JldHVybiB0aGlzLm1lZGlhRWxlbWVudFByb3hpZXMuc2V0KHQsciksci5jbGFzc0xpc3QucmVtb3ZlPWU9PntyLmNsYXNzTGlzdC5kZWxldGUoZSl9LE9iamVjdC5hc3NpZ24ocixlKSxPYmplY3QuZGVmaW5lUHJvcGVydHkocixcInNyY09iamVjdFwiLHtzZXQ6ZT0+e3Iuc3RyZWFtPWUsdGhpcy5zZW5kQXBpUmVxdWVzdChhLlNFVF9NRURJQV9TUkNfT0JKX0FQSV9OQU1FLFtyLmlkLGUmJmUucHJveHk/ZS5wcm94eTplXSl9LGdldDooKT0+ci5zdHJlYW19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkocixcImhpZGRlblwiLHtzZXQ6ZT0+e3RoaXMuc2VuZEFwaVJlcXVlc3QoYS5TRVRfTUVESUFfSElEREVOX0FQSV9OQU1FLFtyLmlkLGVdKX0sZ2V0OigpPT5yLmhpZGRlbn0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyLFwidm9sdW1lXCIse3NldDplPT57dGhpcy5zZW5kQXBpUmVxdWVzdChhLlNFVF9NRURJQV9WT0xVTUVfQVBJX05BTUUsW3IuaWQsZV0pfSxnZXQ6KCk9PnIudm9sdW1lfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHIsXCJtdXRlZFwiLHtzZXQ6ZT0+e3IuaXNNdXRlZD1lLHRoaXMuc2VuZEFwaVJlcXVlc3QoYS5NRURJQV9FTEVNRU5UX01VVEVELFtyLmlkLGVdKS50aGVuKChlPT57ci5pc011dGVkPWUubXV0ZWR9KSl9LGdldDooKT0+ci5pc011dGVkfSkscn1nZW5lcmF0ZUNlcnRpZmljYXRlKGUpe3JldHVybiB0aGlzLnNlbmRBcGlSZXF1ZXN0KGEuR0VORVJBVEVfQ0VSVElGSUNBVEVfQVBJX05BTUUsW2VdKX1nZXRSZWNlaXZlcnMoZSl7cmV0dXJuIHRoaXMuc2VuZEFwaVJlcXVlc3QoYS5HRVRfUkVDRUlWRVJTX0FQSV9OQU1FLFtlXSkudGhlbigoZT0+e3RoaXMudXBkYXRlUENSZWNlaXZlcnMoZS5wY0lkLGUucmVjZWl2ZXJzKX0pKSx0aGlzLnBjUHJveGllcy5nZXQoZSkucmVjZWl2ZXJzfWdldFNlbmRlcnMoZSl7cmV0dXJuIHRoaXMuc2VuZEFwaVJlcXVlc3QoYS5HRVRfU0VOREVSU19BUElfTkFNRSxbZV0pLnRoZW4oKGU9Pnt0aGlzLnVwZGF0ZVBDU2VuZGVycyhlLnBjSWQsZS5zZW5kZXJzKX0pKSx0aGlzLnBjUHJveGllcy5nZXQoZSkuc2VuZGVyc31yZW1vdmVUcmFjayhlLHQpe3RoaXMuc2VuZEFwaVJlcXVlc3QoYS5QQ19SRU1PVkVfVFJBQ0tfQVBJX05BTUUsW2UsdF0pfWdldFRyYW5zY2VpdmVycyhlKXtyZXR1cm4gdGhpcy5zZW5kQXBpUmVxdWVzdChhLkdFVF9UUkFOU0NFSVZFUlNfQVBJX05BTUUsW2VdKS50aGVuKChlPT57dGhpcy51cGRhdGVQQ1RyYW5zY2VpdmVycyhlLnBjSWQsZS50cmFuc2NlaXZlcnMpfSkpLHRoaXMucGNQcm94aWVzLmdldChlKS50cmFuc2NlaXZlcnN9YWRkVHJhbnNjZWl2ZXIoZSx0LHIpe2xldCBuPWNyeXB0by5yYW5kb21VVUlEKCksaT17dHlwZTpcInByb3h5XCIsaWQ6bixzZW5kZXI6dGhpcy5tYWtlU2VuZGVyUHJveHkoe2lkOmNyeXB0by5yYW5kb21VVUlEKCl9KSxyZWNlaXZlcjp0aGlzLm1ha2VSZWNlaXZlclByb3h5KHtpZDpjcnlwdG8ucmFuZG9tVVVJRCgpfSksc2V0Q29kZWNQcmVmZXJlbmNlczplPT57dGhpcy5zZW5kQXBpUmVxdWVzdChhLlRSQU5TQ0VJVkVSX1NFVF9DT0RFQ19QUkVGUyxbbixlXSl9fTtyZXR1cm4gdGhpcy50cmFuc2NlaXZlclByb3hpZXMuc2V0KGkuaWQsaSksdGhpcy5wY1Byb3hpZXMuZ2V0KGUpLnRyYW5zY2VpdmVycy5wdXNoKGkpLHRoaXMucGNQcm94aWVzLmdldChlKS5yZWNlaXZlcnMucHVzaChpLnJlY2VpdmVyKSx0aGlzLnBjUHJveGllcy5nZXQoZSkuc2VuZGVycy5wdXNoKGkuc2VuZGVyKSx0aGlzLnNlbmRBcGlSZXF1ZXN0KGEuQUREX1RSQU5TQ0VJVkVSX0FQSV9OQU1FLFtlLGksXCJzdHJpbmdcIj09dHlwZW9mIHQ/dDp0aGlzLm1ha2VUcmFja1Byb3h5KHQpLHJdKS50aGVuKChlPT57dGhpcy51cGRhdGVUcmFuc2NlaXZlclByb3h5KGUpLHRoaXMudXBkYXRlUENTZW5kZXJzKGUucGNJZCxlLnNlbmRlcnMpLHRoaXMudXBkYXRlUENSZWNlaXZlcnMoZS5wY0lkLGUucmVjZWl2ZXJzKSx0aGlzLnVwZGF0ZVBDVHJhbnNjZWl2ZXJzKGUucGNJZCxlLnRyYW5zY2VpdmVycyl9KSksaX1zZXRMb2dnZXIoZSl7dGhpcy5sb2dnZXI9ZX1vdmVycmlkZVdlYlJUQygpe3RoaXMubG9nZ2VyLmluZm8oXCJPdmVycmlkaW5nIFdlYlJUQyBpbnRlcmZhY2VzIGZvciB0aGUgY3VycmVudCB3ZWJhcHAuXCIpO2xldCBlPXRoaXM7bmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWE9ZT0+dGhpcy5nZXRVc2VyTWVkaWEoZSksbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5lbnVtZXJhdGVEZXZpY2VzPSgpPT50aGlzLmVudW1lcmF0ZURldmljZXMoKSx3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb249ZnVuY3Rpb24odCxyKXtyZXR1cm4gZS5jcmVhdGVQZWVyQ29ubmVjdGlvbih0LHIpfSx3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24uZ2VuZXJhdGVDZXJ0aWZpY2F0ZT1mdW5jdGlvbih0KXtyZXR1cm4gZS5nZW5lcmF0ZUNlcnRpZmljYXRlKHQpfSx3aW5kb3cuQXVkaW9Db250ZXh0PWZ1bmN0aW9uKCl7cmV0dXJuIGUuY3JlYXRlQXVkaW9Db250ZXh0KCl9LHdpbmRvdy5Xb3JrZXI9ZnVuY3Rpb24odCxyKXtyZXR1cm4gZS5jcmVhdGVXb3JrZXIodCxyKX19YXN5bmMgc2VuZEhlbGxvUmVxdWVzdCgpe2xldCB0PWF3YWl0IHRoaXMuc2VuZEFwaVJlcXVlc3QoYS5IRUxMT19BUElfTkFNRSxbXSk7cmV0dXJuIGdsb2JhbFRoaXMuRENWV2ViUlRDUmVkaXJQcm94eXx8KHRoaXMubG9nZ2VyLmluZm8oYFJ1bm5pbmcgaW4gYSBEQ1YgV2ViUlRDIHJlZGlyZWN0aW9uIGVudiwgcHJveHkgdmVyc2lvbjogJHtlLnZlcnNpb25TdHJ9IC0gJHtlLmdpdEhhc2h9YCksdGhpcy5sb2dnZXIuaW5mbyhgQ2xpZW50IGluZm86ICR7SlNPTi5zdHJpbmdpZnkodCl9YCksd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJiZWZvcmV1bmxvYWRcIiwoZT0+e2xldCB0PXtwY0lkczpbXSxzdHJlYW1JZHM6W10sbWVkaWFFbGVtZW50SWRzOltdLHRyYW5zY2VpdmVySWRzOltdLHNlbmRlcklkczpbXSxyZWNlaXZlcklkczpbXSx0cmFja0lkczpbXSx3b3JrZXJJZHM6W119O3RoaXMucGNQcm94aWVzLmZvckVhY2goKChlLHIpPT57dC5wY0lkcy5wdXNoKHIpfSkpLHRoaXMuc3RyZWFtUHJveGllcy5mb3JFYWNoKCgoZSxyKT0+e3Quc3RyZWFtSWRzLnB1c2gocil9KSksdGhpcy50cmFja1Byb3hpZXMuZm9yRWFjaCgoKGUscik9Pnt0LnRyYWNrSWRzLnB1c2gocil9KSksdGhpcy53b3JrZXJQcm94aWVzLmZvckVhY2goKChlLHIpPT57dC53b3JrZXJJZHMucHVzaChyKX0pKSx0aGlzLm1lZGlhRWxlbWVudFByb3hpZXMuZm9yRWFjaCgoKGUscik9Pnt0Lm1lZGlhRWxlbWVudElkcy5wdXNoKHIpfSkpLHRoaXMudHJhbnNjZWl2ZXJQcm94aWVzLmZvckVhY2goKChlLHIpPT57dC50cmFuc2NlaXZlcklkcy5wdXNoKHIpfSkpLHRoaXMuc2VuZGVyUHJveGllcy5mb3JFYWNoKCgoZSxyKT0+e3Quc2VuZGVySWRzLnB1c2gocil9KSksdGhpcy5yZWNlaXZlclByb3hpZXMuZm9yRWFjaCgoKGUscik9Pnt0LnJlY2VpdmVySWRzLnB1c2gocil9KSksdGhpcy5zZW5kQXBpUmVxdWVzdChhLlVOTE9BRF9FVkVOVF9OQU1FLFt0XSl9KSkpLHR9c3RhdGljIHNldEluaXRDYWxsYmFjayhlLHQpe2xldCByPWdsb2JhbFRoaXMuRENWV2ViUlRDUmVkaXJQcm94eTtpZihyKWUoe3N1Y2Nlc3M6ITAscHJveHk6cn0pO2Vsc2V7bS5pbml0Q2FsbGJhY2tzfHwobS5pbml0Q2FsbGJhY2tzPW5ldyBNYXApO2xldCByPXNldFRpbWVvdXQoKGU9PntlKHtzdWNjZXNzOiExLGVycm9yOmBGYWlsZWQgdG8gaW5pdGlhbGl6ZSBEQ1ZXZWJSVENQZWVyQ29ubmVjdGlvblByb3h5IGluICR7dH1tc2B9KSxtLmluaXRDYWxsYmFja3MuZGVsZXRlKGUpfSksdCxlKTttLmluaXRDYWxsYmFja3Muc2V0KGUscil9fX1jb25zdCBfPXIoNTkxKTtjbGFzcyBne2NvbnN0cnVjdG9yKHIpe3RoaXMudmVyc2lvbj1lLHRoaXMuY29uZmlnPXIsdGhpcy5sb2dnZXI9ci5sb2dnZXI/ci5sb2dnZXI6cygpLHRoaXMuY2hhbm5lbD1yLmNoYW5uZWwsdGhpcy5kZWNvZGVyPW5ldyBUZXh0RGVjb2RlcihcInV0Zi04XCIpLHRoaXMubWVzc2FnZUJ1ZmZlcj1udWxsLHRoaXMucGNzPW5ldyBNYXAsdGhpcy5wY1Byb21pc2VzPW5ldyBNYXAsdGhpcy5hdWRpb0NvbnRleHRzPW5ldyBNYXAsdGhpcy5hdWRpb05vZGVzPW5ldyBNYXAsdGhpcy53b3JrZXJzPW5ldyBNYXAsdGhpcy53b3JrZXJQcm9taXNlcz1uZXcgTWFwLHRoaXMuY2VydHM9bmV3IE1hcCx0aGlzLnN0cmVhbXM9bmV3IE1hcCx0aGlzLnRyYWNrcz1uZXcgTWFwLHRoaXMub2ZmZXJzPW5ldyBNYXAsdGhpcy5hbnN3ZXJzPW5ldyBNYXAsdGhpcy5yZW1vdGVEZXNjcmlwdGlvbnM9bmV3IE1hcCx0aGlzLm1lZGlhRWxlbWVudHM9bmV3IE1hcCx0aGlzLmF1ZGlvcz1uZXcgTWFwLHRoaXMuc2VuZGVycz1uZXcgTWFwLHRoaXMuZHRtZlNlbmRlcnM9bmV3IE1hcCx0aGlzLnJlY2VpdmVycz1uZXcgTWFwLHRoaXMudHJhbnNjZWl2ZXJzPW5ldyBNYXAsdGhpcy5sb2dnZXIuaW5mbyhgQ3JlYXRlZCBXZWJSVEMgUmVkaXJlY3Rpb24gQ2xpZW50IHZlcnNpb246ICR7ZS52ZXJzaW9uU3RyfSAtICR7ZS5naXRIYXNofSAtICR7SlNPTi5zdHJpbmdpZnkodC5aLmJyb3dzZXJEZXRhaWxzKX1gKX1lbmNvZGVCYXNlNjQoZSl7cmV0dXJuKDAsaC5lbmNvZGUpKGUpfWRlY29kZUJhc2U2NChlKXtyZXR1cm4oMCxoLmRlY29kZSkoZSl9Z2V0VmVyc2lvbigpe3JldHVybiB0aGlzLnZlcnNpb259Y29uY2F0VWludDhBcnJheXMoZSl7Y29uc3QgdD1lLnJlZHVjZSgoKGUsdCk9PmUrdC5ieXRlTGVuZ3RoKSwwKSxyPW5ldyBVaW50OEFycmF5KHQpO2xldCBuPTA7cmV0dXJuIGUuZm9yRWFjaCgoZT0+e3Iuc2V0KGUsbiksbis9ZS5ieXRlTGVuZ3RofSkpLHJ9cGFyc2VIZWFkZXIoZSl7cmV0dXJuIGVbM108PDI0fGVbMl08PDE2fGVbMV08PDh8ZVswXX1vbk1lc3NhZ2VSZWNlaXZlZChlKXt0aGlzLmxvZ2dlci5kZWJ1Zyhgb25NZXNzYWdlUmVjZWl2ZWQsIGJpbmFyeVBheWxvYWQuYnl0ZUxlbmd0aDogJHtlLmJ5dGVMZW5ndGh9YCk7dHJ5e2xldCB0PTA7Zm9yKG51bGw9PT10aGlzLm1lc3NhZ2VCdWZmZXI/dGhpcy5tZXNzYWdlQnVmZmVyPW5ldyBVaW50OEFycmF5KGUpOnRoaXMubWVzc2FnZUJ1ZmZlcj10aGlzLmNvbmNhdFVpbnQ4QXJyYXlzKFt0aGlzLm1lc3NhZ2VCdWZmZXIsbmV3IFVpbnQ4QXJyYXkoZSldKSx0aGlzLm1lc3NhZ2VCdWZmZXIuYnl0ZUxlbmd0aD49NCYmKHQ9dGhpcy5wYXJzZUhlYWRlcih0aGlzLm1lc3NhZ2VCdWZmZXIpKTt0PjAmJnRoaXMubWVzc2FnZUJ1ZmZlci5ieXRlTGVuZ3RoPj10KzQ7KXtsZXQgZT00LHI9NCt0LG49dGhpcy5tZXNzYWdlQnVmZmVyLnNsaWNlKGUscik7dGhpcy5sb2dnZXIuZGVidWcoXCJEZWNvZGluZyBwYXlsb2FkOiBcIixuKTtsZXQgaT10aGlzLmRlY29kZXIuZGVjb2RlKG4pO3RoaXMubG9nZ2VyLmRlYnVnKGBSZWNlaXZlZCBtZXNzYWdlOiAke2l9YCk7bGV0IHM9SlNPTi5wYXJzZShpKTt0aGlzLmxvZ2dlci5kZWJ1ZyhcIlJlY2VpdmVkIGpzb246IFwiLHMpLHRoaXMuaGFuZGxlTWVzc2FnZShzKSx0aGlzLm1lc3NhZ2VCdWZmZXI9dGhpcy5tZXNzYWdlQnVmZmVyLnNsaWNlKHIpLHQ9dGhpcy5tZXNzYWdlQnVmZmVyLmJ5dGVMZW5ndGg+PTQ/dGhpcy5wYXJzZUhlYWRlcih0aGlzLm1lc3NhZ2VCdWZmZXIpOjB9fWNhdGNoKGUpe3RoaXMubG9nZ2VyLmVycm9yKGBGYWlsZWQgdG8gcGFyc2UgSlNPTiBmcm9tIGJpbmFyeVBheWxvYWQ6ICR7ZX1gKSx0aGlzLm1lc3NhZ2VCdWZmZXI9bnVsbH19Z2V0UGVlckNvbm5lY3Rpb24oZSl7cmV0dXJuIHRoaXMucGNzLmhhcyhlKT90aGlzLnBjcy5nZXQoZSk6KHRoaXMucGNQcm9taXNlcy5oYXMoZSl8fHRoaXMucGNQcm9taXNlcy5zZXQoZSxbXSksbmV3IFByb21pc2UoKCh0LHIpPT57dGhpcy5wY1Byb21pc2VzLmdldChlKS5wdXNoKHtyZXNvbHZlOnQscmVqZWN0OnJ9KX0pKSl9Z2V0UGVuZGluZ0V2ZW50KGUsdCl7cmV0dXJuIGUucGVuZGluZ0V2ZW50cy5oYXModCkmJmUucGVuZGluZ0V2ZW50cy5nZXQodCkubGVuZ3RoPjA/ZS5wZW5kaW5nRXZlbnRzLmdldCh0KS5zaGlmdCgpOihlLmV2ZW50UHJvbWlzZXMuaGFzKHQpfHxlLmV2ZW50UHJvbWlzZXMuc2V0KHQsW10pLG5ldyBQcm9taXNlKCgocixuKT0+e2UuZXZlbnRQcm9taXNlcy5nZXQodCkucHVzaCh7cmVzb2x2ZTpyLHJlamVjdDpufSl9KSkpfWdldFN0cmVhbShlKXtyZXR1cm4gdGhpcy5zdHJlYW1zLmdldChlKX1tYWtlVHJhY2tUTyhlLHQ9KGUuaWQ/ZS5pZDpjcnlwdG8ucmFuZG9tVVVJRCgpKSl7cmV0dXJuIHRoaXMudHJhY2tzLnNldCh0LGUpLHt0eXBlOlwicHJveHlcIixjb250ZW50SGludDplLmNvbnRlbnRIaW50LGVuYWJsZWQ6ZS5lbmFibGVkLGlkOnQsa2luZDplLmtpbmQsbGFiZWw6ZS5sYWJlbCxtdXRlZDplLm11dGVkLHJlYWR5U3RhdGU6ZS5yZWFkeVN0YXRlLHNldHRpbmdzOmUuZ2V0U2V0dGluZ3MoKX19bWFrZVN0cmVhbVRPKGUsdD0oZS5pZD9lLmlkOmNyeXB0by5yYW5kb21VVUlEKCkpKXt0aGlzLnN0cmVhbXMuc2V0KHQsZSk7bGV0IHI9ZS5nZXRUcmFja3MoKS5tYXAoKGU9PnRoaXMubWFrZVRyYWNrVE8oZSkpKTtyZXR1cm57dHlwZTpcInByb3h5XCIsaWQ6dCxhY3RpdmU6ZS5hY3RpdmUsdHJhY2tzOnJ9fW1ha2VTeW5jcm9uaXphdGlvblNvdXJjZVRPKGUpe3JldHVybnthdWRpb0xldmVsOmUuYXVkaW9MZXZlbCxydHBUaW1lc3RhbXA6ZS5ydHBUaW1lc3RhbXAsc291cmNlOmUuc291cmNlLHRpbWVzdGFtcDplLnRpbWVzdGFtcH19bWFrZVJlY2VpdmVyVE8oZSl7bGV0IHQ9ZS5nZXRTeW5jaHJvbml6YXRpb25Tb3VyY2VzKCk7dD10Lm1hcCgoZT0+dGhpcy5tYWtlU3luY3Jvbml6YXRpb25Tb3VyY2VUTyhlKSkpO2xldCByPXtpZDplLmlkP2UuaWQ6Y3J5cHRvLnJhbmRvbVVVSUQoKSx0eXBlOlwicHJveHlcIix0cmFjazplLnRyYWNrP3RoaXMubWFrZVRyYWNrVE8oZS50cmFjayk6bnVsbCxzeW5jaHJvbml6YXRpb25Tb3VyY2VzOnQsc3RhdHM6W119O3JldHVybiBlLmlkPXIuaWQsdGhpcy5yZWNlaXZlcnMuc2V0KHIuaWQsZSkscn1tYWtlRFRNRlNlbmRlclRPKGUpe2xldCB0PXtpZDplLmlkP2UuaWQ6Y3J5cHRvLnJhbmRvbVVVSUQoKSx0eXBlOlwicHJveHlcIix0b25lQnVmZmVyOmUudG9uZUJ1ZmZlcn07cmV0dXJuIGUuaWQ9dC5pZCx0aGlzLmR0bWZTZW5kZXJzLnNldCh0LmlkLGUpLHR9bWFrZVNlbmRlclRPKGUpe2xldCB0PXtpZDplLmlkP2UuaWQ6Y3J5cHRvLnJhbmRvbVVVSUQoKSx0eXBlOlwicHJveHlcIix0cmFjazplLnRyYWNrP3RoaXMubWFrZVRyYWNrVE8oZS50cmFjayk6bnVsbCxkdG1mOmUuZHRtZj90aGlzLm1ha2VEVE1GU2VuZGVyVE8oZS5kdG1mKTpudWxsfTtyZXR1cm4gZS5pZD10LmlkLHRoaXMuc2VuZGVycy5zZXQodC5pZCxlKSx0fW1ha2VUcmFuc2NlaXZlclRPKGUpe3JldHVybntpZDplLmlkLHR5cGU6XCJwcm94eVwiLGN1cnJlbnREaXJlY3Rpb246ZS5jdXJyZW50RGlyZWN0aW9uLGRpcmVjdGlvbjplLmRpcmVjdGlvbixtaWQ6ZS5taWQscmVjZWl2ZXI6ZS5yZWNlaXZlcj90aGlzLm1ha2VSZWNlaXZlclRPKGUucmVjZWl2ZXIpOm51bGwsc2VuZGVyOmUuc2VuZGVyP3RoaXMubWFrZVNlbmRlclRPKGUuc2VuZGVyKTpudWxsLHN0b3BwZWQ6ZS5zdG9wcGVkfX1maW5kUHJveHlTdWJqZWN0KGUpe3JldHVybiB0aGlzLnBjcy5oYXMoZSk/dGhpcy5wY3MuZ2V0KGUpOnRoaXMuYXVkaW9Db250ZXh0cy5oYXMoZSk/dGhpcy5hdWRpb0NvbnRleHRzLmdldChlKTp0aGlzLmF1ZGlvTm9kZXMuaGFzKGUpP3RoaXMuYXVkaW9Ob2Rlcy5nZXQoZSk6dGhpcy53b3JrZXJzLmhhcyhlKT90aGlzLndvcmtlcnMuZ2V0KGUpOnRoaXMuY2VydHMuaGFzKGUpP3RoaXMuY2VydHMuZ2V0KGUpOnRoaXMuc3RyZWFtcy5oYXMoZSk/dGhpcy5zdHJlYW1zLmdldChlKTp0aGlzLm9mZmVycy5oYXMoZSk/dGhpcy5vZmZlcnMuZ2V0KGUpOnRoaXMuYW5zd2Vycy5oYXMoZSk/dGhpcy5hbnN3ZXJzLmdldChlKTp0aGlzLnJlbW90ZURlc2NyaXB0aW9ucy5oYXMoZSk/dGhpcy5yZW1vdGVEZXNjcmlwdGlvbnMuZ2V0KGUpOnRoaXMubWVkaWFFbGVtZW50cy5oYXMoZSk/dGhpcy5tZWRpYUVsZW1lbnRzLmdldChlKTp0aGlzLmF1ZGlvcy5oYXMoZSk/dGhpcy5hdWRpb3MuZ2V0KGUpOnRoaXMuc2VuZGVycy5oYXMoZSk/dGhpcy5zZW5kZXJzLmdldChlKTp0aGlzLmR0bWZTZW5kZXJzLmhhcyhlKT90aGlzLmR0bWZTZW5kZXJzLmdldChlKTp0aGlzLnJlY2VpdmVycy5oYXMoZSk/dGhpcy5yZWNldmVycy5nZXQoZSk6dGhpcy50cmFuc2NlaXZlcnMuaGFzKGUpP3RoaXMudHJhbnNjZWl2ZXJzLmdldChlKTp0aGlzLnRyYWNrcy5oYXMoZSk/dGhpcy50cmFja3MuZ2V0KGUpOm51bGx9dHJhdmVyc2UoZSx0KXtpZihcIm9iamVjdFwiPT10eXBlb2YgZSlmb3IoY29uc3QgciBpbiBlKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHIpJiYodC5hcHBseSh0aGlzLFtlLHIsZVtyXV0pLG51bGwhPT1lW3JdJiZcIm9iamVjdFwiPT10eXBlb2YgZVtyXSYmdGhpcy50cmF2ZXJzZShlW3JdLHQpKX1nZXRXb3JrZXIoZSl7cmV0dXJuIHRoaXMud29ya2Vycy5oYXMoZSk/dGhpcy53b3JrZXJzLmdldChlKToodGhpcy53b3JrZXJQcm9taXNlcy5oYXMoZSl8fHRoaXMud29ya2VyUHJvbWlzZXMuc2V0KGUsW10pLG5ldyBQcm9taXNlKCgodCxyKT0+e3RoaXMud29ya2VyUHJvbWlzZXMuZ2V0KGUpLnB1c2goe3Jlc29sdmU6dCxyZWplY3Q6cn0pfSkpKX1nYXRoZXJQZWVyQ29ubmVjdGlvblN0YXRlKGUsdCl7ZS5jYW5Ucmlja2xlSWNlQ2FuZGlkYXRlcz10LmNhblRyaWNrbGVJY2VDYW5kaWRhdGVzLGUuY29ubmVjdGlvblN0YXRlPXQuY29ubmVjdGlvblN0YXRlLGUuY3VycmVudExvY2FsRGVzY3JpcHRpb249dC5jdXJyZW50TG9jYWxEZXNjcmlwdGlvbixlLmN1cnJlbnRSZW1vdGVEZXNjcmlwdGlvbj10LmN1cnJlbnRSZW1vdGVEZXNjcmlwdGlvbixlLmljZUNvbm5lY3Rpb25TdGF0ZT10LmljZUNvbm5lY3Rpb25TdGF0ZSxlLmljZUdhdGhlcmluZ1N0YXRlPXQuaWNlR2F0aGVyaW5nU3RhdGUsZS5pY2VHYXRoZXJpbmdTdGF0ZT10LmljZUdhdGhlcmluZ1N0YXRlLGUubG9jYWxEZXNjcmlwdGlvbj10LmxvY2FsRGVzY3JpcHRpb24sZS5wZWVySWRlbnRpdHk9dC5wZWVySWRlbnRpdHksZS5wZW5kaW5nTG9jYWxEZXNjcmlwdGlvbj10LnBlbmRpbmdMb2NhbERlc2NyaXB0aW9uLGUucGVuZGluZ1JlbW90ZURlc2NyaXB0aW9uPXQucGVuZGluZ1JlbW90ZURlc2NyaXB0aW9uLGUucmVtb3RlRGVzY3JpcHRpb249dC5yZW1vdGVEZXNjcmlwdGlvbixlLnNjdHA9dC5zY3RwLGUuc2lnbmFsaW5nU3RhdGU9dC5zaWduYWxpbmdTdGF0ZSxlLmNvbmZpZ3VyYXRpb249dC5nZXRDb25maWd1cmF0aW9uKCksZS50cmFuc2NlaXZlcnM9dC5nZXRUcmFuc2NlaXZlcnMoKS5tYXAoKGU9PnRoaXMubWFrZVRyYW5zY2VpdmVyVE8oZSkpKSxlLnNlbmRlcnM9dC5nZXRTZW5kZXJzKCkubWFwKChlPT50aGlzLm1ha2VTZW5kZXJUTyhlKSkpLGUucmVjZWl2ZXJzPXQuZ2V0UmVjZWl2ZXJzKCkubWFwKChlPT50aGlzLm1ha2VSZWNlaXZlclRPKGUpKSl9YXN5bmMgY2FsbFdlYlJUQ0FwaShlLHIsbil7c3dpdGNoKGUpe2Nhc2UgYS5IRUxMT19BUElfTkFNRTpyZXR1cm57dmVyc2lvbjp0aGlzLnZlcnNpb24scGxhdGZvcm06XCJ3ZWJcIixicm93c2VyRGV0YWlsczp0LlouYnJvd3NlckRldGFpbHMsdXNlckFnZW50Om5hdmlnYXRvci51c2VyQWdlbnR9O2Nhc2UgYS5HRVRVU0VSTUVESUFfQVBJX05BTUU6e2xldFtlXT1uLHQ9YXdhaXQgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEoZSk7cmV0dXJuIHRoaXMubWFrZVN0cmVhbVRPKHQpfWNhc2UgYS5FTlVNRVJBVEVERVZJQ0VTX0FQSV9OQU1FOnJldHVybihhd2FpdCBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmVudW1lcmF0ZURldmljZXMoKSkubWFwKChlPT5lLnRvSlNPTigpKSk7Y2FzZSBhLlNUUkVBTV9BRERfVFJBQ0s6e2xldFtlLHRdPW4scj10aGlzLnN0cmVhbXMuZ2V0KGUpLGk9dGhpcy50cmFja3MuZ2V0KHQpO3JldHVybiByLmFkZFRyYWNrKGkpLHt9fWNhc2UgYS5TVFJFQU1fUkVNT1ZFX1RSQUNLOntsZXRbZSx0XT1uLHI9dGhpcy5zdHJlYW1zLmdldChlKSxpPXRoaXMudHJhY2tzLmdldCh0KTtyZXR1cm4gci5yZW1vdmVUcmFjayhpKSx7fX1jYXNlIGEuR0VORVJBVEVfQ0VSVElGSUNBVEVfQVBJX05BTUU6e2xldFtlXT1uLHQ9YXdhaXQgUlRDUGVlckNvbm5lY3Rpb24uZ2VuZXJhdGVDZXJ0aWZpY2F0ZShlKTtyZXR1cm4gdGhpcy5jZXJ0cy5zZXQocix0KSx7dHlwZTpcInByb3h5XCIsaWQ6cixleHBpcmVzOnQuZXhwaXJlcyxmaW5nZXJwcmludHM6dC5nZXRGaW5nZXJwcmludHMoKX19Y2FzZSBhLk5FV1JUQ1BFRVJDT05ORUNUSU9OX0FQSV9OQU1FOntsZXRbZSx0LHJdPW47aWYodCYmdC5jZXJ0aWZpY2F0ZXMpe2xldCBlPXQuY2VydGlmaWNhdGVzLm1hcCgoZT0+dGhpcy5jZXJ0cy5nZXQoZS5pZCkpKTt0LmNlcnRpZmljYXRlcz1lfWxldCBpPW5ldyBSVENQZWVyQ29ubmVjdGlvbih0LHIpO3RoaXMucGNzLnNldChlLGkpLHRoaXMucGNQcm9taXNlcy5oYXMoZSkmJih0aGlzLnBjUHJvbWlzZXMuZ2V0KGUpLmZvckVhY2goKGU9PntlLnJlc29sdmUoZSl9KSksdGhpcy5wY1Byb21pc2VzLnNldChlLFtdKSk7bGV0IHM9e3R5cGU6XCJwcm94eVwiLHBjSWQ6ZX07cmV0dXJuIHRoaXMuZ2F0aGVyUGVlckNvbm5lY3Rpb25TdGF0ZShzLGkpLHN9Y2FzZSBhLlBDX0dFVF9DT05GSUdVUkFUSU9OOntsZXRbZV09bjtyZXR1cm4oYXdhaXQgdGhpcy5nZXRQZWVyQ29ubmVjdGlvbihlKSkuZ2V0Q29uZmlndXJhdGlvbigpfWNhc2UgYS5DUkVBVEVfV09SS0VSOntsZXRbZSx0LHIsaV09bixzPSgwLGguZGVjb2RlKShyKSxhPW5ldyBCbG9iKFtzXSx7dHlwZTp0fSksbz1VUkwuY3JlYXRlT2JqZWN0VVJMKGEpLGM9bmV3IFdvcmtlcihvLGkpO3JldHVybiB0aGlzLndvcmtlcnMuc2V0KGUsYyksdGhpcy53b3JrZXJQcm9taXNlcy5oYXMoZSkmJih0aGlzLndvcmtlclByb21pc2VzLmdldChlKS5mb3JFYWNoKChlPT57ZS5yZXNvbHZlKGMpfSkpLHRoaXMud29ya2VyUHJvbWlzZXMuc2V0KGUsW10pKSx7dHlwZTpcInByb3h5XCIsaWQ6ZX19Y2FzZSBhLldPUktFUl9QT1NUX01FU1NBR0U6e2xldFtlLHQscl09bixpPWF3YWl0IHRoaXMuZ2V0V29ya2VyKGUpO3JldHVybiB0aGlzLmxvZ2dlci5kZWJ1ZyhcIk1lc3NhZ2UgYmVmb3JlIHRyYXZlcnNpbmc6IFwiLEpTT04uc3RyaW5naWZ5KHQpKSx0aGlzLnRyYXZlcnNlKHQsKChlLHQscik9PntcInByb3h5XCI9PT1yLnR5cGUmJnIuaWQmJihlW3RdPXRoaXMuZmluZFByb3h5U3ViamVjdChyLmlkKSl9KSksdGhpcy5sb2dnZXIuZGVidWcoXCJNZXNzYWdlIGFmdGVyIHRyYXZlcnNpbmc6IFwiLHQpLHRoaXMubG9nZ2VyLmRlYnVnKFwiT3B0aW9ucyBiZWZvcmUgdHJhdmVyc2luZzogXCIsSlNPTi5zdHJpbmdpZnkocikpLHRoaXMudHJhdmVyc2UociwoKGUsdCxyKT0+e1wicHJveHlcIj09PXIudHlwZSYmci5pZCYmKGVbdF09dGhpcy5maW5kUHJveHlTdWJqZWN0KHIuaWQpKX0pKSx0aGlzLmxvZ2dlci5kZWJ1ZyhcIk9wdGlvbnMgYWZ0ZXIgdHJhdmVyc2luZzogXCIsciksaS5wb3N0TWVzc2FnZSh0LHIpLHt0eXBlOlwicHJveHlcIixpZDplfX1jYXNlIGEuTkVXX0FVRElPX0NPTlRFWFQ6e2xldFtlLHRdPW4scj1uZXcgQXVkaW9Db250ZXh0O3JldHVybiB0aGlzLmF1ZGlvQ29udGV4dHMuc2V0KGUsciksdGhpcy5hdWRpb05vZGVzLnNldCh0LHIuZGVzdGluYXRpb24pLHt0eXBlOlwicHJveHlcIixpZDplLGJhc2VMYXRlbmN5OnIuYmFzZUxhdGVuY3ksY3VycmVudFRpbWU6ci5jdXJyZW50VGltZSxvdXRwdXRMYXRlbmN5OnIub3V0cHV0TGF0ZW5jeSxzYW1wbGVSYXRlOnIuc2FtcGxlUmF0ZSxzaW5rSWQ6ci5zaW5rSWQsc3RhdGU6ci5zdGF0ZX19Y2FzZSBhLkFVRElPX0NUWF9DUkVBVEVfQVVESU9fTk9ERTp7bGV0W2UsdCxyLGldPW4scz10aGlzLmF1ZGlvQ29udGV4dHMuZ2V0KGUpLGE9c1tcImNyZWF0ZVwiK3JdO2k9aS5tYXAoKGU9PlwicHJveHlcIj09PWUudHlwZT90aGlzLmZpbmRQcm94eVN1YmplY3QoZS5pZCk6ZSkpO2xldCBvPWEuYXBwbHkocyxpKTt0aGlzLmF1ZGlvTm9kZXMuc2V0KHQsbyk7bGV0IGM9bnVsbDtpZihvLnN0cmVhbSl7bGV0IGU9by5zdHJlYW0uZ2V0VHJhY2tzKCkubWFwKChlPT50aGlzLm1ha2VUcmFja1RPKGUsdCkpKTtjPXRoaXMubWFrZVN0cmVhbVRPKG8uc3RyZWFtLHQpLGMudHJhY2tzPWV9cmV0dXJue2lkOnQsY2hhbm5lbENvdW50Om8uY2hhbm5lbENvdW50LGNoYW5uZWxDb3VudE1vZGU6by5jaGFubmVsQ291bnRNb2RlLGNoYW5uZWxJbnRlcnByZXRhdGlvbjpvLmNoYW5uZWxJbnRlcnByZXRhdGlvbixudW1iZXJPZklucHV0czpvLm51bWJlck9mSW5wdXRzLG51bWJlck9mT3V0cHV0czpvLm51bWJlck9mT3V0cHV0cyxmZnRTaXplOm8uZmZ0U2l6ZSxmcmVxdWVuY3lCaW5Db3VudDpvLmZyZXF1ZW5jeUJpbkNvdW50LG1heERlY2liZWxzOm8ubWF4RGVjaWJlbHMsbWluRGVjaWJlbHM6by5taW5EZWNpYmVscyxzbW9vdGhpbmdUaW1lQ29uc3RhbnQ6by5zbW9vdGhpbmdUaW1lQ29uc3RhbnQsc3RyZWFtOmN9fWNhc2UgYS5BVURJT19DVFhfQ0xPU0U6e2xldFtlXT1uO3JldHVybiB0aGlzLmF1ZGlvQ29udGV4dHMuZ2V0KGUpLmNsb3NlKCkse319Y2FzZSBhLkFVRElPX05PREVfQ09OTkVDVDp7bGV0W2UsdCxyLGldPW4scz10aGlzLmF1ZGlvTm9kZXMuZ2V0KGUpLGE9dGhpcy5maW5kUHJveHlTdWJqZWN0KHQuaWQpO3JldHVybiBzLmNvbm5lY3QoYSxyfHwwLGl8fDApLHt9fWNhc2UgYS5BVURJT19OT0RFX0RJU0NPTk5FQ1Q6e2xldFtlLHQscixpXT1uLHM9dGhpcy5hdWRpb05vZGVzLmdldChlKSxhPXRoaXMuZmluZFByb3h5U3ViamVjdCh0LmlkKTtyZXR1cm4gcy5kaXNjb25uZWN0KGEscnx8MCxpfHwwKSx7fX1jYXNlIGEuQVVESU9fTk9ERV9TRVRfVFlQRTp7bGV0W2UsdF09bjtyZXR1cm4gdGhpcy5hdWRpb05vZGVzLmdldChlKS50eXBlPXQse319Y2FzZSBhLkFVRElPX05PREVfU1RBUlQ6e2xldFtlLHRdPW47cmV0dXJuIHRoaXMuYXVkaW9Ob2Rlcy5nZXQoZSkuc3RhcnQodCkse319Y2FzZSBhLkFVRElPX05PREVfU1RPUDp7bGV0W2UsdF09bjtyZXR1cm4gdGhpcy5hdWRpb05vZGVzLmdldChlKS5zdG9wKHQpLHt9fWNhc2UgYS5BVURJT19QQVJBTV9TRVRfVkFMVUVfQVRfVElNRTp7bGV0W2UsdCxyXT1uLGk9dGhpcy5hdWRpb05vZGVzLmdldChlKTtyZXR1cm4gaS5nYWluP2kuZ2Fpbi5zZXRWYWx1ZUF0VGltZSh0LHJ8fGkuY29udGV4dC5jdXJyZW50VGltZSk6aS5mcmVxdWVuY3kmJmkuZnJlcXVlbmN5LnNldFZhbHVlQXRUaW1lKHQscnx8aS5jb250ZXh0LmN1cnJlbnRUaW1lKSx7fX1jYXNlIGEuQVVESU9fUEFSQU1fU0VUX1JBTVBfVE9fVkFMVUVfQVRfVElNRTp7bGV0W2UsdCxyXT1uLGk9dGhpcy5hdWRpb05vZGVzLmdldChlKTtyZXR1cm4gaS5mcmVxdWVuY3kmJmkuZnJlcXVlbmN5LmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKHQscnx8aS5jb250ZXh0LmN1cnJlbnRUaW1lKSx7fX1jYXNlIGEuR0VUX1JFQ0VJVkVSU19BUElfTkFNRTp7bGV0W2VdPW47cmV0dXJue3BjSWQ6ZSxyZWNlaXZlcnM6KGF3YWl0IHRoaXMuZ2V0UGVlckNvbm5lY3Rpb24oZSkpLmdldFJlY2VpdmVycygpLm1hcCgoZT0+dGhpcy5tYWtlUmVjZWl2ZXJUTyhlKSkpfX1jYXNlIGEuR0VUX1NFTkRFUlNfQVBJX05BTUU6e2xldFtlXT1uO3JldHVybntwY0lkOmUsc2VuZGVyczooYXdhaXQgdGhpcy5nZXRQZWVyQ29ubmVjdGlvbihlKSkuZ2V0U2VuZGVycygpLm1hcCgoZT0+dGhpcy5tYWtlU2VuZGVyVE8oZSkpKX19Y2FzZSBhLklOU0VSVF9EVE1GX0FQSV9OQU1FOntsZXRbZSx0LHIsaV09bjtyZXR1cm4gdGhpcy5kdG1mU2VuZGVycy5nZXQoZSkuaW5zZXJ0RFRNRih0LHIsaSkse319Y2FzZSBhLkdFVF9UUkFOU0NFSVZFUlNfQVBJX05BTUU6e2xldFtlXT1uLHQ9KGF3YWl0IHRoaXMuZ2V0UGVlckNvbm5lY3Rpb24oZSkpLmdldFRyYW5zY2VpdmVycygpO3JldHVybiB0PXQubWFwKChlPT4oZS5pZD1lLmlkP2UuaWQ6Y3J5cHRvLnJhbmRvbVVVSUQoKSx0aGlzLm1ha2VUcmFuc2NlaXZlclRPKGUpKSkpLHtwY0lkOmUsdHJhbnNjZWl2ZXJzOnR9fWNhc2UgYS5UUkFOU0NFSVZFUl9TRVRfQ09ERUNfUFJFRlM6cmV0dXJue307Y2FzZSBhLkFERF9UUkFDS19BUElfTkFNRTp7bGV0W2UsdCxyLC4uLmldPW4scz1hd2FpdCB0aGlzLmdldFBlZXJDb25uZWN0aW9uKHQpLGE9W107aS5mb3JFYWNoKChlPT57Y29uc3QgdD10aGlzLnN0cmVhbXMuZ2V0KGUucHJveHkuaWQpO3QmJmEucHVzaCh0KX0pKTtsZXQgbz1bdGhpcy50cmFja3MuZ2V0KHIuaWQpLC4uLmFdLGM9cy5hZGRUcmFjay5hcHBseShzLG8pO2MuaWQ9ZTtsZXQgZD10aGlzLm1ha2VTZW5kZXJUTyhjKTtyZXR1cm4gZC5wY0lkPXQsZC5zZW5kZXJzPXMuZ2V0U2VuZGVycygpLm1hcCgoZT0+dGhpcy5tYWtlU2VuZGVyVE8oZSkpKSxkLnJlY2VpdmVycz1zLmdldFJlY2VpdmVycygpLm1hcCgoZT0+dGhpcy5tYWtlUmVjZWl2ZXJUTyhlKSkpLGQudHJhbnNjZWl2ZXJzPXMuZ2V0VHJhbnNjZWl2ZXJzKCkubWFwKChlPT50aGlzLm1ha2VUcmFuc2NlaXZlclRPKGUpKSksZH1jYXNlIGEuQUREX1RSQU5TQ0VJVkVSX0FQSV9OQU1FOntsZXRbZSx0LHIsaV09bixzPWF3YWl0IHRoaXMuZ2V0UGVlckNvbm5lY3Rpb24oZSk7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIHImJihyPXRoaXMudHJhY2tzLmdldChyLmlkKSksaSYmaS5zdHJlYW1zKXtsZXQgZT1bXTtpLnN0cmVhbXMuZm9yRWFjaCgodD0+e2lmKHQucHJveHkpe2xldCByPXRoaXMuc3RyZWFtcy5nZXQodC5wcm94eS5pZCk7ZS5wdXNoKHIpfX0pKSxpLnN0cmVhbXM9ZX1sZXQgYT1zLmFkZFRyYW5zY2VpdmVyKHIsaSk7YS5pZD10LmlkLHRoaXMudHJhbnNjZWl2ZXJzLnNldCh0LmlkLGEpLGEuc2VuZGVyJiYoYS5zZW5kZXIuaWQ9dC5zZW5kZXIuaWQsdGhpcy5zZW5kZXJzLnNldCh0LnNlbmRlci5pZCxhLnNlbmRlcikpLGEucmVjZWl2ZXImJihhLnJlY2VpdmVyLmlkPXQucmVjZWl2ZXIuaWQsdGhpcy5yZWNlaXZlcnMuc2V0KHQucmVjZWl2ZXIuaWQsYS5yZWNlaXZlcikpO2xldCBvPXRoaXMubWFrZVRyYW5zY2VpdmVyVE8oYSk7cmV0dXJuIG8ucGNJZD1lLG8uc2VuZGVycz1zLmdldFNlbmRlcnMoKS5tYXAoKGU9PnRoaXMubWFrZVNlbmRlclRPKGUpKSksby5yZWNlaXZlcnM9cy5nZXRSZWNlaXZlcnMoKS5tYXAoKGU9PnRoaXMubWFrZVJlY2VpdmVyVE8oZSkpKSxvLnRyYW5zY2VpdmVycz1zLmdldFRyYW5zY2VpdmVycygpLm1hcCgoZT0+dGhpcy5tYWtlVHJhbnNjZWl2ZXJUTyhlKSkpLG99Y2FzZSBhLlBDX0NMT1NFX0FQSV9OQU1FOntsZXRbZV09bjtyZXR1cm4oYXdhaXQgdGhpcy5nZXRQZWVyQ29ubmVjdGlvbihlKSkuY2xvc2UoKSx7fX1jYXNlIGEuQUREU1RSRUFNX0FQSV9OQU1FOntsZXRbZSx0XT1uLHI9dGhpcy5zdHJlYW1zLmdldCh0LmlkKTtyZXR1cm4oYXdhaXQgdGhpcy5nZXRQZWVyQ29ubmVjdGlvbihlKSkuYWRkU3RyZWFtKHIpLHR9Y2FzZSBhLkdFVF9TVEFUU19BUElfTkFNRTp7bGV0W2UsdF09bixyPWF3YWl0IHRoaXMuZ2V0UGVlckNvbm5lY3Rpb24oZSksaT1hd2FpdCByLmdldFN0YXRzKHQpLHM9W107cmV0dXJuIGkuZm9yRWFjaCgoZT0+e2xldCB0PU9iamVjdC5hc3NpZ24oe30sZSk7cy5wdXNoKHQpfSkpLHN9Y2FzZSBhLkdFVF9TRU5ERVJfU1RBVFNfQVBJX05BTUU6e2xldFtlXT1uLHQ9YXdhaXQgdGhpcy5zZW5kZXJzLmdldChlKS5nZXRTdGF0cygpLHI9W107cmV0dXJuIHQuZm9yRWFjaCgoZT0+e2xldCB0PU9iamVjdC5hc3NpZ24oe30sZSk7ci5wdXNoKHQpfSkpLHJ9Y2FzZSBhLkdFVF9SRUNFSVZFUl9TVEFUU19BUElfTkFNRTp7bGV0W2VdPW4sdD1hd2FpdCB0aGlzLnJlY2VpdmVycy5nZXQoZSkuZ2V0U3RhdHMoKSxyPVtdO3JldHVybiB0LmZvckVhY2goKGU9PntsZXQgdD17aWQ6ZS5pZD9lLmlkOmNyeXB0by5yYW5kb21VVUlEKCksdHlwZTplLnR5cGUsY29uY2VhbGVkU2FtcGxlczplLmNvbmNlYWxlZFNhbXBsZXN9O3IucHVzaCh0KX0pKSxyfWNhc2UgYS5SRVBMQUNFX1NFTkRFUl9UUkFDS19BUElfTkFNRTp7bGV0W2UsdF09bixyPXRoaXMuc2VuZGVycy5nZXQoZSksaT10P3RoaXMudHJhY2tzLmdldCh0LmlkKTpudWxsO3JldHVybiBhd2FpdCByLnJlcGxhY2VUcmFjayhpKSx7fX1jYXNlIGEuUENfUkVNT1ZFX1RSQUNLX0FQSV9OQU1FOntsZXRbZSx0XT1uLHI9YXdhaXQgdGhpcy5nZXRQZWVyQ29ubmVjdGlvbihlKSxpPXRoaXMuc2VuZGVycy5nZXQodC5pZCk7cmV0dXJuIHIucmVtb3ZlVHJhY2soaSkse319Y2FzZSBhLkNSRUFURV9PRkZFUl9BUElfTkFNRTp7bGV0W2UsdF09bixpPWF3YWl0IHRoaXMuZ2V0UGVlckNvbm5lY3Rpb24oZSkscz1hd2FpdCBpLmNyZWF0ZU9mZmVyKHQpO3JldHVybiB0aGlzLm9mZmVycy5zZXQocixzKSx7aWQ6cix0eXBlOnMudHlwZSxzZHA6cy5zZHB9fWNhc2UgYS5DUkVBVEVfQU5TV0VSX0FQSV9OQU1FOntsZXRbZSx0XT1uLGk9YXdhaXQgdGhpcy5nZXRQZWVyQ29ubmVjdGlvbihlKSxzPWF3YWl0IGkuY3JlYXRlQW5zd2VyKHQpO3JldHVybiB0aGlzLmFuc3dlcnMuc2V0KHIscykse2lkOnIsdHlwZTpzLnR5cGUsc2RwOnMuc2RwfX1jYXNlIGEuU0VUX0xPQ0FMX0RFU0NSSVBUSU9OX0FQSV9OQU1FOntsZXRbZSx0XT1uLHI9XCJvZmZlclwiPT09dC50eXBlP3RoaXMub2ZmZXJzOnRoaXMuYW5zd2VycyxpPXQuaWQ/ci5nZXQodC5pZCk6dDtpLnNkcD10LnNkcDtsZXQgcz1hd2FpdCB0aGlzLmdldFBlZXJDb25uZWN0aW9uKGUpO3JldHVybiBhd2FpdCBzLnNldExvY2FsRGVzY3JpcHRpb24oaSksdH1jYXNlIGEuU0VUX1JFTU9URV9ERVNDUklQVElPTl9BUElfTkFNRTp7bGV0W2UsdF09bixyPWF3YWl0IHRoaXMuZ2V0UGVlckNvbm5lY3Rpb24oZSk7cmV0dXJuIGF3YWl0IHIuc2V0UmVtb3RlRGVzY3JpcHRpb24odCksdH1jYXNlIGEuQUREX0lDRV9DQU5ESURBVEVfQVBJX05BTUU6e2xldFtlLHRdPW4scj10P25ldyBSVENJY2VDYW5kaWRhdGUoe3NkcE1MaW5lSW5kZXg6dC5zZHBNTGluZUluZGV4LGNhbmRpZGF0ZTp0LmNhbmRpZGF0ZX0pOm51bGw7cmV0dXJuKGF3YWl0IHRoaXMuZ2V0UGVlckNvbm5lY3Rpb24oZSkpLmFkZEljZUNhbmRpZGF0ZShyKSx0fWNhc2UgYS5BRERfUENfRVZFTlRfTElTVEVORVI6e2xldFtlLHRdPW4saT1hd2FpdCB0aGlzLmdldFBlZXJDb25uZWN0aW9uKGUpO2lmKGkucGVuZGluZ0V2ZW50c3x8KGkucGVuZGluZ0V2ZW50cz1uZXcgTWFwKSxpLmV2ZW50UHJvbWlzZXN8fChpLmV2ZW50UHJvbWlzZXM9bmV3IE1hcCksaS5wZW5kaW5nRXZlbnRzLmhhcyh0KSl7bGV0IGU9YXdhaXQgdGhpcy5nZXRQZW5kaW5nRXZlbnQoaSx0KTt0aGlzLnNlbmRFdmVudChhLkFERF9QQ19FVkVOVF9MSVNURU5FUixyLGUpfWVsc2UgaWYoIWlbdF0pe2NvbnN0IG49dD0+e2xldCBuPW51bGw7aWYodC50eXBlPT09by5JQ0VfQ0FORElEQVRFKXt0aGlzLmxvZ2dlci5kZWJ1ZyhcImV2ZW50OiBcIix0KTtsZXQgcj10LmNhbmRpZGF0ZSxzPW51bGw7ciYmKHM9e3NkcE1MaW5lSW5kZXg6ci5zZHBNTGluZUluZGV4LHNkcE1pZDpyLnNkcE1pZCxjYW5kaWRhdGU6ci5jYW5kaWRhdGUsdHlwZTpyLnR5cGUsZm91bmRhdGlvbjpyLmZvdW5kYXRpb24scHJvdG9jb2w6ci5wcm90b2NvbCxhZGRyZXNzOnIuYWRkcmVzcyxwb3J0OnIucG9ydCxwcmlvcml0eTpyLnByaW9yaXR5LHVybDpyLnVybCxyZWxheVByb3RvY29sOnIucmVsYXlQcm90b2NvbCxjb21wb25lbnQ6ci5jb21wb29uZW50LHJlbGF0ZWRBZGRyZXNzOnIucmVsYXRlZEFkZHJlc3MscmVsYXRlZFBvcnQ6ci5yZWxhdGVkUG9ydCx0Y3BUeXBlOnIudGNwVHlwZSx1c2VybmFtZUZyYWdtZW50OnIudXNlcm5hbWVGcmFnbWVudH0pLG49e3BjSWQ6ZSxldmVudE5hbWU6dC50eXBlLHR5cGU6XCJwcm94eVwiLGNhbmRpZGF0ZTpzfSx0aGlzLmdhdGhlclBlZXJDb25uZWN0aW9uU3RhdGUobixpKX1lbHNlIHQudHlwZT09PW8uU0lHX1NUQVRFX0NIQU5HRT8obj17cGNJZDplLGV2ZW50TmFtZTp0LnR5cGUsdHlwZTpcInByb3h5XCJ9LHRoaXMuZ2F0aGVyUGVlckNvbm5lY3Rpb25TdGF0ZShuLGkpKTp0LnR5cGU9PT1vLlRSQUNLPyhuPXtwY0lkOmUsZXZlbnROYW1lOnQudHlwZSx0eXBlOlwicHJveHlcIixzdHJlYW1zOltdLHNlbmRlcnM6W10scmVjZWl2ZXJzOltdLHRyYWNrOnRoaXMubWFrZVRyYWNrVE8odC50cmFjayl9LG4uc3RyZWFtcz10LnN0cmVhbXMubWFwKChlPT50aGlzLm1ha2VTdHJlYW1UTyhlKSkpLHRoaXMuZ2F0aGVyUGVlckNvbm5lY3Rpb25TdGF0ZShuLGkpKTp0LnR5cGU9PT1vLkNPTk5fU1RBVEVfQ0hBTkdFfHx0LnR5cGU9PT1vLklDRV9DT05OX1NUQVRFX0NIQU5HRXx8dC50eXBlPT09by5JQ0VfR0FUSEVSX1NUQVRFX0NIQU5HRXx8dC50eXBlPT09by5ORUdPVElBVElPTl9ORUVERUQ/KG49e3BjSWQ6ZSxldmVudE5hbWU6dC50eXBlLHR5cGU6XCJwcm94eVwifSx0aGlzLmdhdGhlclBlZXJDb25uZWN0aW9uU3RhdGUobixpKSk6dGhpcy5sb2dnZXIud2FybihgSWdub3JlZCBldmVudCwgdHlwZTogJHt0LnR5cGV9LCBldmVudDogJHtKU09OLnN0cmluZ2lmeSh0KX1gKTtuJiZ0aGlzLnByb2Nlc3NQZW5kaW5nRXZlbnRzKGksdCxuLGEuQUREX1BDX0VWRU5UX0xJU1RFTkVSLHIpfTtpW3RdPW4saS5hZGRFdmVudExpc3RlbmVyKHQsbil9cmV0dXJuIG51bGx9Y2FzZSBhLkFERF9UUkFDS19FVkVOVF9MSVNURU5FUjp7bGV0W2UsdCxpXT1uLHM9dGhpcy50cmFja3MuZ2V0KGUpO2lmKHMucGVuZGluZ0V2ZW50c3x8KHMucGVuZGluZ0V2ZW50cz1uZXcgTWFwKSxzLmV2ZW50UHJvbWlzZXN8fChzLmV2ZW50UHJvbWlzZXM9bmV3IE1hcCkscy5wZW5kaW5nRXZlbnRzLmhhcyh0KSl7bGV0IGU9YXdhaXQgdGhpcy5nZXRQZW5kaW5nRXZlbnQocyx0KTt0aGlzLnNlbmRFdmVudChhLkFERF9UUkFDS19FVkVOVF9MSVNURU5FUixyLGUpfWVsc2UgaWYoIXNbdF0pe2NvbnN0IG49bj0+e2lmKE9iamVjdC52YWx1ZXMoYykuaW5jbHVkZXModCkpe2xldCB0PXt0cmFja0lkOmUsZXZlbnROYW1lOm4udHlwZSx0eXBlOlwicHJveHlcIn07dCYmdGhpcy5wcm9jZXNzUGVuZGluZ0V2ZW50cyhzLG4sdCxhLkFERF9UUkFDS19FVkVOVF9MSVNURU5FUixyKX1lbHNlIHRoaXMubG9nZ2VyLndhcm4oYElnbm9yZWQgZXZlbnQ6ICR7SlNPTi5zdHJpbmdpZnkobil9YCl9O3NbdF09bixzLmFkZEV2ZW50TGlzdGVuZXIodCxuLGkpfXJldHVybiBudWxsfWNhc2UgYS5BRERfV09SS0VSX0VWRU5UX0xJU1RFTkVSOntsZXRbZSx0XT1uLGk9YXdhaXQgdGhpcy5nZXRXb3JrZXIoZSk7aWYoaS5wZW5kaW5nRXZlbnRzfHwoaS5wZW5kaW5nRXZlbnRzPW5ldyBNYXApLGkuZXZlbnRQcm9taXNlc3x8KGkuZXZlbnRQcm9taXNlcz1uZXcgTWFwKSxpLnBlbmRpbmdFdmVudHMuaGFzKHQpKXtsZXQgZT1hd2FpdCB0aGlzLmdldFBlbmRpbmdFdmVudChpLHQpO3RoaXMuc2VuZEV2ZW50KGEuQUREX1dPUktFUl9FVkVOVF9MSVNURU5FUixyLGUpfWVsc2UgaWYoIWlbdF0pe2NvbnN0IG49bj0+e2lmKHRoaXMubG9nZ2VyLmRlYnVnKFwiUmVjZWl2ZWQgZXZlbnQ6IFwiLG4pLE9iamVjdC52YWx1ZXMobCkuaW5jbHVkZXModCkpe2xldCB0PXt3SWQ6ZSxldmVudE5hbWU6bi50eXBlLHR5cGU6XCJwcm94eVwiLGRhdGE6bi5kYXRhfTt0JiZ0aGlzLnByb2Nlc3NQZW5kaW5nRXZlbnRzKGksbix0LGEuQUREX1dPUktFUl9FVkVOVF9MSVNURU5FUixyKX1lbHNlIHRoaXMubG9nZ2VyLndhcm4oYElnbm9yZWQgZXZlbnQ6ICR7SlNPTi5zdHJpbmdpZnkobil9YCxuKX07aVt0XT1uLGkuYWRkRXZlbnRMaXN0ZW5lcih0LG4pfXJldHVybiBudWxsfWNhc2UgYS5BRERfRFRNRl9FVkVOVF9MSVNURU5FUjp7bGV0W2UsdCxpXT1uLHM9dGhpcy5kdG1mU2VuZGVycy5nZXQoZSk7aWYocy5wZW5kaW5nRXZlbnRzfHwocy5wZW5kaW5nRXZlbnRzPW5ldyBNYXApLHMuZXZlbnRQcm9taXNlc3x8KHMuZXZlbnRQcm9taXNlcz1uZXcgTWFwKSxzLnBlbmRpbmdFdmVudHMuaGFzKHQpKXtsZXQgZT1hd2FpdCB0aGlzLmdldFBlbmRpbmdFdmVudChzLHQpO3RoaXMuc2VuZEV2ZW50KGEuQUREX0RUTUZfRVZFTlRfTElTVEVORVIscixlKX1lbHNlIGlmKCFzW3RdKXtjb25zdCBuPW49PntpZihPYmplY3QudmFsdWVzKGQpLmluY2x1ZGVzKHQpKXtsZXQgdD17ZHRtZklkOmUsZXZlbnROYW1lOm4udHlwZSx0eXBlOm4udHlwZSx0b25lOm4udG9uZX07dGhpcy5wcm9jZXNzUGVuZGluZ0V2ZW50cyhzLG4sdCxhLkFERF9EVE1GX0VWRU5UX0xJU1RFTkVSLHIpfWVsc2UgdGhpcy5sb2dnZXIud2FybihgSWdub3JlZCBldmVudDogJHtKU09OLnN0cmluZ2lmeShuKX1gKX07c1t0XT1uLHMuYWRkRXZlbnRMaXN0ZW5lcih0LG4saSl9cmV0dXJuIG51bGx9Y2FzZSBhLkNSRUFURV9NRURJQV9FTEVNRU5UX0FQSV9OQU1FOntsZXRbZSx0XT1uO2lmKFwiYXVkaW9cIiE9PXQua2luZCYmXCJ2aWRlb1wiIT09dC5raW5kKXJldHVybiB0aGlzLmxvZ2dlci53YXJuKGBJbnZhbGlkIG1lZGlhIHR5cGU6ICR7SlNPTi5zdHJpbmdpZnkodCl9YCksbnVsbDtsZXQgcj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KHQua2luZCk7cmV0dXJuIE9iamVjdC5hc3NpZ24ocix0KSxkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHIpLHRoaXMubWVkaWFFbGVtZW50cy5zZXQoZSxyKSx7aWQ6ZSxzaW5rSWQ6ci5zaW5rSWR9fWNhc2UgYS5NRURJQV9FTEVNRU5UX1NFVF9TSU5LX0lEX0FQSV9OQU1FOntsZXRbZSx0XT1uLHI9dGhpcy5tZWRpYUVsZW1lbnRzLmdldChlKTtyZXR1cm4gYXdhaXQgci5zZXRTaW5rSWQodCkse2lkOmUsc2lua0lkOnIuc2lua0lkfX1jYXNlIGEuU0VUX01FRElBX1NSQ19PQkpfQVBJX05BTUU6e2xldFtlLHRdPW4scj10P3RoaXMuZ2V0U3RyZWFtKHQuaWQpOm51bGw7cmV0dXJuIHRoaXMubWVkaWFFbGVtZW50cy5nZXQoZSkuc3JjT2JqZWN0PXIse319Y2FzZSBhLk1FRElBX0VMRU1FTlRfTVVURUQ6e2xldFtlLHRdPW47cmV0dXJuIHRoaXMubWVkaWFFbGVtZW50cy5nZXQoZSkubXV0ZWQ9dCx7aWQ6ZSxtdXRlZDp0fX1jYXNlIGEuU0VUX01FRElBX0hJRERFTl9BUElfTkFNRTp7bGV0W2UsdF09bixyPXRoaXMubWVkaWFFbGVtZW50cy5nZXQoZSk7cmV0dXJuIHImJihyLmhpZGRlbj10KSx7fX1jYXNlIGEuU0VUX01FRElBX1ZPTFVNRV9BUElfTkFNRTp7bGV0W2UsdF09bjtyZXR1cm4gdGhpcy5tZWRpYUVsZW1lbnRzLmdldChlKS52b2x1bWU9dCx7fX1jYXNlIGEuTUVESUFfRUxFTUVOVF9QTEFZX0FQSV9OQU1FOntsZXRbZV09bjtyZXR1cm4gdGhpcy5tZWRpYUVsZW1lbnRzLmdldChlKS5wbGF5KCkse319Y2FzZSBhLk1FRElBX0VMRU1FTlRfUEFVU0VfQVBJX05BTUU6e2xldFtlXT1uO3JldHVybiB0aGlzLm1lZGlhRWxlbWVudHMuZ2V0KGUpLnBhdXNlKCkse319Y2FzZSBhLk1FRElBX0VMRU1FTlRfUkVNT1ZFOntsZXRbZV09bjtyZXR1cm4gdGhpcy5tZWRpYUVsZW1lbnRzLmdldChlKS5yZW1vdmUoKSx7fX1jYXNlIGEuVE9HR0xFX1RSQUNLX0VOQUJMRURfQVBJX05BTUU6e2xldFtlLHRdPW4scj10aGlzLnRyYWNrcy5nZXQoZSk7cmV0dXJuIHIuZW5hYmxlZD10LHRoaXMubWFrZVRyYWNrVE8ocil9Y2FzZSBhLlRSQUNLX1NUT1BfQVBJX05BTUU6e2xldFtlXT1uLHQ9dGhpcy50cmFja3MuZ2V0KGUpO3JldHVybiB0JiZ0LnN0b3AoKSx7fX1jYXNlIGEuVFJBQ0tfR0VUX1NFVFRJTkdTOntsZXRbZV09bjtyZXR1cm4gdGhpcy50cmFja3MuZ2V0KGUpLmdldFNldHRpbmdzKCl9Y2FzZSBhLlNFTkRFUl9DUkVBVEVfRU5DT0RFRF9TVFJFQU1TOntsZXRbZSx0XT1uLHI9dGhpcy5zZW5kZXJzLmdldChlKS5jcmVhdGVFbmNvZGVkU3RyZWFtcygpO3JldHVybiB0aGlzLnN0cmVhbXMuc2V0KHQuaWQsciksdGhpcy5zdHJlYW1zLnNldCh0LnJlYWRhYmxlLmlkLHIucmVhZGFibGUpLHRoaXMuc3RyZWFtcy5zZXQodC53cml0YWJsZS5pZCxyLndyaXRhYmxlKSx0fWNhc2UgYS5SRUNFSVZFUl9DUkVBVEVfRU5DT0RFRF9TVFJFQU1TOntsZXRbZSx0XT1uLHI9dGhpcy5yZWNlaXZlcnMuZ2V0KGUpLmNyZWF0ZUVuY29kZWRTdHJlYW1zKCk7cmV0dXJuIHRoaXMuc3RyZWFtcy5zZXQodC5pZCxyKSx0aGlzLnN0cmVhbXMuc2V0KHQucmVhZGFibGUuaWQsci5yZWFkYWJsZSksdGhpcy5zdHJlYW1zLnNldCh0LndyaXRhYmxlLmlkLHIud3JpdGFibGUpLHR9Y2FzZSBhLlVOTE9BRF9FVkVOVF9OQU1FOntsZXRbZV09bjtyZXR1cm4gZS5wY0lkcy5mb3JFYWNoKChlPT57dGhpcy5wY3MuZGVsZXRlKGUpfSkpLGUuc3RyZWFtSWRzLmZvckVhY2goKGU9PntsZXQgdD10aGlzLnN0cmVhbXMuZ2V0KGUpO3QmJihcImZ1bmN0aW9uXCI9PXR5cGVvZiB0LmdldFRyYWNrcyYmdC5nZXRUcmFja3MoKS5mb3JFYWNoKChlPT57ZS5zdG9wKCl9KSksdGhpcy5zdHJlYW1zLmRlbGV0ZShlKSl9KSksZS50cmFja0lkcy5mb3JFYWNoKChlPT57dGhpcy50cmFja3MuZGVsZXRlKGUpfSkpLGUud29ya2VySWRzLmZvckVhY2goKGU9PntsZXQgdD10aGlzLndvcmtlcnMuZ2V0KGUpO3QmJnQudGVybWluYXRlKCksdGhpcy53b3JrZXJzLmRlbGV0ZShlKX0pKSxlLm1lZGlhRWxlbWVudElkcy5mb3JFYWNoKChlPT57bGV0IHQ9dGhpcy5tZWRpYUVsZW1lbnRzLmdldChlKTt0JiYodC5yZW1vdmUoKSx0aGlzLm1lZGlhRWxlbWVudHMuZGVsZXRlKGUpKX0pKSxlLnRyYW5zY2VpdmVySWRzLmZvckVhY2goKGU9Pnt0aGlzLnRyYW5zY2VpdmVycy5kZWxldGUoZSl9KSksZS5zZW5kZXJJZHMuZm9yRWFjaCgoZT0+e3RoaXMuc2VuZGVycy5kZWxldGUoZSl9KSksZS5yZWNlaXZlcklkcy5mb3JFYWNoKChlPT57dGhpcy5yZWNlaXZlcnMuZGVsZXRlKGUpfSkpLHt9fWRlZmF1bHQ6cmV0dXJuIG51bGx9fXNlbmRNZXNzYWdlKGUpe3RoaXMubG9nZ2VyLmRlYnVnKGBTZW5kaW5nIG1lc3NhZ2U6ICR7SlNPTi5zdHJpbmdpZnkoZSl9YCk7bGV0IHQ9ZS5tZXNzYWdlLHI9Xy5kZWZsYXRlUmF3KEpTT04uc3RyaW5naWZ5KHQpKTtlLm1lc3NhZ2U9cjtsZXQgbj0obmV3IFRleHRFbmNvZGVyKS5lbmNvZGUoSlNPTi5zdHJpbmdpZnkoZSkpLGk9bi5ieXRlTGVuZ3RoLHM9bmV3IFVpbnQ4QXJyYXkoW2ksaT4+OCxpPj4xNixpPj4yNF0pO3RoaXMuY2hhbm5lbC5zZW5kTWVzc2FnZShzKSx0aGlzLmNoYW5uZWwuc2VuZE1lc3NhZ2Uobil9c2VuZEV2ZW50KGUsdCxyKXtsZXQgbj17cmVxdWVzdElkOnQsdHlwZTpcImV2ZW50XCIsbWVzc2FnZTp7YXBpOmUsZXZlbnQ6cn19O3RoaXMuc2VuZE1lc3NhZ2Uobil9c2VuZFJlc3BvbnNlKGUsdCxyKXtsZXQgbj17cmVxdWVzdElkOnQsdHlwZTpcInJlc3BvbnNlXCIsbWVzc2FnZTp7YXBpOmUscmVzcG9uc2U6cn19O3RoaXMuc2VuZE1lc3NhZ2Uobil9c2VuZEVycm9yKGUsdCxyKXtsZXQgbj17cmVxdWVzdElkOnQsdHlwZTpcImVycm9yXCIsbWVzc2FnZTp7YXBpOmUsZXJyb3I6cn19O3RoaXMuc2VuZE1lc3NhZ2Uobil9YXN5bmMgaGFuZGxlV2ViUlRDQXBpKGUpe3RyeXtsZXQgdD1hd2FpdCB0aGlzLmNhbGxXZWJSVENBcGkoZS5tZXNzYWdlLmFwaSxlLnJlcXVlc3RJZCxlLm1lc3NhZ2UuYXJncyk7dCYmdGhpcy5zZW5kUmVzcG9uc2UoZS5tZXNzYWdlLmFwaSxlLnJlcXVlc3RJZCx0KX1jYXRjaCh0KXt0aGlzLmxvZ2dlci5lcnJvcihgRXJyb3IgaGFuZGxpbmcgV2ViUlRDIEFQSTogJHtKU09OLnN0cmluZ2lmeShlKX0sIG1lc3NhZ2U6ICR7dC5tZXNzYWdlP3QubWVzc2FnZTpcIihubyBtZXNzYWdlKVwifSwgZXJyb3I6ICR7SlNPTi5zdHJpbmdpZnkodCl9YCksdGhpcy5sb2dnZXIudHJhY2UodCksdGhpcy5zZW5kRXJyb3IoZS5tZXNzYWdlLmFwaSxlLnJlcXVlc3RJZCx7bmFtZTp0Lm5hbWUsbWVzc2FnZTp0Lm1lc3NhZ2V9KX19cHJvY2Vzc1BlbmRpbmdFdmVudHMoZSx0LHIsbixpKXtpZihlLnBlbmRpbmdFdmVudHMuaGFzKHQudHlwZSkpe2UucGVuZGluZ0V2ZW50cy5nZXQodC50eXBlKS5wdXNoKHIpO2xldCBuPWUuZXZlbnRQcm9taXNlcy5nZXQodC50eXBlKTtuJiZuLmZvckVhY2goKGU9PntlLnJlc29sdmUocil9KSl9ZWxzZSB0aGlzLnNlbmRFdmVudChuLGksciksZS5wZW5kaW5nRXZlbnRzLnNldCh0LnR5cGUsW10pfWhhbmRsZU1lc3NhZ2UoZSl7bGV0IHQ9ZS5tZXNzYWdlLHI9Xy5pbmZsYXRlUmF3KHQpLG49dGhpcy5kZWNvZGVyLmRlY29kZShyKTtlLm1lc3NhZ2U9SlNPTi5wYXJzZShuKSxlLm1lc3NhZ2UuYXBpJiZlLnJlcXVlc3RJZCYmZS5tZXNzYWdlLmFyZ3M/dGhpcy5oYW5kbGVXZWJSVENBcGkoZSk6KHRoaXMubG9nZ2VyLmVycm9yKGBJbnZhbGlkIG1lc3NhZ2UgZm9ybWF0OiAke0pTT04uc3RyaW5naWZ5KGUpfWApLHRoaXMubG9nZ2VyLnRyYWNlKGUpKX1vbkNsb3NlKGUpe3RoaXMubG9nZ2VyLmluZm8oYFdlYlJUQyByZWRpciBjdXN0b20gY2hhbm5lbCBjbG9zZWQ6ICR7SlNPTi5zdHJpbmdpZnkoZSl9XCJgKSx0aGlzLnJlbGVhc2UoKX1yZWxlYXNlKCl7dGhpcy5zdHJlYW1zLmZvckVhY2goKGU9PntlLmdldFRyYWNrcygpLmZvckVhY2goKGU9PntlLnN0b3AoKX0pKX0pKSx0aGlzLm1lZGlhRWxlbWVudHMuZm9yRWFjaCgoZT0+e2UucmVtb3ZlKCl9KSl9fWZ1bmN0aW9uIHYoZSx0LHIpe2dsb2JhbFRoaXMuRENWV2ViUlRDUmVkaXJQcm94eT10LG0uaW5pdENhbGxiYWNrcz8obS5pbml0Q2FsbGJhY2tzLmZvckVhY2goKChuLGkpPT57Y2xlYXJUaW1lb3V0KG4pLGkoe3N1Y2Nlc3M6ZSxwcm94eTp0LGVycm9yOnJ9KX0pKSxtLmluaXRDYWxsYmFja3MuY2xlYXIoKSk6cygpLndhcm4oXCJObyBEQ1ZXZWJSVENQZWVyQ29ubmVjdGlvblByb3h5LmluaXRDYWxsYmFjayB3YXMgc3BlY2lmaWVkLlwiKX10cnl7d2luZG93LkRDVldlYlJUQ1BlZXJDb25uZWN0aW9uUHJveHk9bTtsZXQgZT1uZXcgbSh7bG9nZ2VyOnMoKX0pO2Uuc2VuZEhlbGxvUmVxdWVzdCgpLnRoZW4oKHQ9PntlLmxvZ2dlci5pbmZvKGBTdWNjZXNzZnVsbHkgcmVjZWl2ZWQgaGVsbG8gcmVzcG9uc2UgZnJvbSBjbGllbnQ6ICR7SlNPTi5zdHJpbmdpZnkodCl9YCksZS5jbGllbnRJbmZvPXQsdighMCxlKX0pKS5jYXRjaCgoZT0+e2NvbnN0IHQ9YFJ1bm5pbmcgaW4gYW4gaW52YWxpZCBkY3Ygd2VicnRjIGVudiwgc2tpcHBpbmcgc2V0dGluZyB1cCBwcm94eTogJHtKU09OLnN0cmluZ2lmeShlKX1gO3MoKS53YXJuKHQpLHYoITEsbnVsbCx0KX0pKX1jYXRjaChlKXtjb25zdCB0PWUubWVzc2FnZTt2KCExLG51bGwsdCkscygpLmluZm8oYFNraXBwaW5nIHNldHRpbmcgdXAgcHJveHkgaW4gY2xpZW50IGVudjogJHt0fWApfX0pKCksbn0pKCkpKTsiLCIvLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbi8vIEJ5IHVzaW5nIHRoZXNlIERldmVsb3BlciBNYXRlcmlhbHMsIHlvdSBhY2NlcHQgYW5kIGFncmVlIHRvIGNvbXBseSB3aXRoXHJcbi8vIHRoZSB0ZXJtcyBvZiB0aGUgQ2xvdWQgU29mdHdhcmUgR3JvdXAgRGV2ZWxvcGVyIFRlcm1zIG9mIFVzZSBmb3VuZCBoZXJlXHJcbi8vIChodHRwczovL3d3dy5jbG91ZC5jb20vbGVnYWwpXHJcbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcblxyXG5cclxudmFyICRqc2NvbXA9e3Njb3BlOnt9LGdldEdsb2JhbDpmdW5jdGlvbihlKXtyZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiZ3aW5kb3c9PT1lP2U6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbD9nbG9iYWw6ZX19OyRqc2NvbXAuZ2xvYmFsPSRqc2NvbXAuZ2V0R2xvYmFsKHRoaXMpOyRqc2NvbXAuaW5pdFN5bWJvbD1mdW5jdGlvbigpeyRqc2NvbXAuZ2xvYmFsLlN5bWJvbHx8KCRqc2NvbXAuZ2xvYmFsLlN5bWJvbD0kanNjb21wLlN5bWJvbCk7JGpzY29tcC5pbml0U3ltYm9sPWZ1bmN0aW9uKCl7fX07JGpzY29tcC5zeW1ib2xDb3VudGVyXz0wOyRqc2NvbXAuU3ltYm9sPWZ1bmN0aW9uKGUpe3JldHVyblwianNjb21wX3N5bWJvbF9cIitlKyRqc2NvbXAuc3ltYm9sQ291bnRlcl8rK307XHJcbiRqc2NvbXAuaW5pdFN5bWJvbEl0ZXJhdG9yPWZ1bmN0aW9uKCl7JGpzY29tcC5pbml0U3ltYm9sKCk7JGpzY29tcC5nbG9iYWwuU3ltYm9sLml0ZXJhdG9yfHwoJGpzY29tcC5nbG9iYWwuU3ltYm9sLml0ZXJhdG9yPSRqc2NvbXAuZ2xvYmFsLlN5bWJvbChcIml0ZXJhdG9yXCIpKTskanNjb21wLmluaXRTeW1ib2xJdGVyYXRvcj1mdW5jdGlvbigpe319OyRqc2NvbXAubWFrZUl0ZXJhdG9yPWZ1bmN0aW9uKGUpeyRqc2NvbXAuaW5pdFN5bWJvbEl0ZXJhdG9yKCk7aWYoZVskanNjb21wLmdsb2JhbC5TeW1ib2wuaXRlcmF0b3JdKXJldHVybiBlWyRqc2NvbXAuZ2xvYmFsLlN5bWJvbC5pdGVyYXRvcl0oKTt2YXIgbD0wO3JldHVybntuZXh0OmZ1bmN0aW9uKCl7cmV0dXJuIGw9PWUubGVuZ3RoP3tkb25lOiEwfTp7ZG9uZTohMSx2YWx1ZTplW2wrK119fX19O1xyXG4kanNjb21wLmFycmF5RnJvbUl0ZXJhdG9yPWZ1bmN0aW9uKGUpe2Zvcih2YXIgbCxwPVtdOyEobD1lLm5leHQoKSkuZG9uZTspcC5wdXNoKGwudmFsdWUpO3JldHVybiBwfTskanNjb21wLmFycmF5RnJvbUl0ZXJhYmxlPWZ1bmN0aW9uKGUpe3JldHVybiBlIGluc3RhbmNlb2YgQXJyYXk/ZTokanNjb21wLmFycmF5RnJvbUl0ZXJhdG9yKCRqc2NvbXAubWFrZUl0ZXJhdG9yKGUpKX07XHJcbiRqc2NvbXAuaW5oZXJpdHM9ZnVuY3Rpb24oZSxsKXtmdW5jdGlvbiBwKCl7fXAucHJvdG90eXBlPWwucHJvdG90eXBlO2UucHJvdG90eXBlPW5ldyBwO2UucHJvdG90eXBlLmNvbnN0cnVjdG9yPWU7Zm9yKHZhciBiIGluIGwpaWYoJGpzY29tcC5nbG9iYWwuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMpe3ZhciBhPSRqc2NvbXAuZ2xvYmFsLk9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobCxiKTthJiYkanNjb21wLmdsb2JhbC5PYmplY3QuZGVmaW5lUHJvcGVydHkoZSxiLGEpfWVsc2UgZVtiXT1sW2JdfTskanNjb21wLmFycmF5PSRqc2NvbXAuYXJyYXl8fHt9OyRqc2NvbXAuYXJyYXkuZG9uZV89ZnVuY3Rpb24oKXtyZXR1cm57ZG9uZTohMCx2YWx1ZTp2b2lkIDB9fTtcclxuJGpzY29tcC5hcnJheS5hcnJheUl0ZXJhdG9yXz1mdW5jdGlvbihlLGwpe2UgaW5zdGFuY2VvZiBTdHJpbmcmJihlPVN0cmluZyhlKSk7dmFyIHA9MDskanNjb21wLmluaXRTeW1ib2woKTskanNjb21wLmluaXRTeW1ib2xJdGVyYXRvcigpO3ZhciBiPXt9LGE9KGIubmV4dD1mdW5jdGlvbigpe2lmKHA8ZS5sZW5ndGgpe3ZhciBiPXArKztyZXR1cm57dmFsdWU6bChiLGVbYl0pLGRvbmU6ITF9fWEubmV4dD0kanNjb21wLmFycmF5LmRvbmVfO3JldHVybiAkanNjb21wLmFycmF5LmRvbmVfKCl9LGJbU3ltYm9sLml0ZXJhdG9yXT1mdW5jdGlvbigpe3JldHVybiBhfSxiKTtyZXR1cm4gYX07XHJcbiRqc2NvbXAuYXJyYXkuZmluZEludGVybmFsXz1mdW5jdGlvbihlLGwscCl7ZSBpbnN0YW5jZW9mIFN0cmluZyYmKGU9U3RyaW5nKGUpKTtmb3IodmFyIGI9ZS5sZW5ndGgsYT0wO2E8YjthKyspe3ZhciBjPWVbYV07aWYobC5jYWxsKHAsYyxhLGUpKXJldHVybntpOmEsdjpjfX1yZXR1cm57aTotMSx2OnZvaWQgMH19O1xyXG4kanNjb21wLmFycmF5LmZyb209ZnVuY3Rpb24oZSxsLHApe2w9dm9pZCAwPT09bD9mdW5jdGlvbihhKXtyZXR1cm4gYX06bDt2YXIgYj1bXTskanNjb21wLmluaXRTeW1ib2woKTskanNjb21wLmluaXRTeW1ib2xJdGVyYXRvcigpO2lmKGVbU3ltYm9sLml0ZXJhdG9yXSl7JGpzY29tcC5pbml0U3ltYm9sKCk7JGpzY29tcC5pbml0U3ltYm9sSXRlcmF0b3IoKTtlPWVbU3ltYm9sLml0ZXJhdG9yXSgpO2Zvcih2YXIgYTshKGE9ZS5uZXh0KCkpLmRvbmU7KWIucHVzaChsLmNhbGwocCxhLnZhbHVlKSl9ZWxzZXthPWUubGVuZ3RoO2Zvcih2YXIgYz0wO2M8YTtjKyspYi5wdXNoKGwuY2FsbChwLGVbY10pKX1yZXR1cm4gYn07JGpzY29tcC5hcnJheS5vZj1mdW5jdGlvbihlKXtmb3IodmFyIGw9W10scD0wO3A8YXJndW1lbnRzLmxlbmd0aDsrK3ApbFtwLTBdPWFyZ3VtZW50c1twXTtyZXR1cm4gJGpzY29tcC5hcnJheS5mcm9tKGwpfTtcclxuJGpzY29tcC5hcnJheS5lbnRyaWVzPWZ1bmN0aW9uKCl7cmV0dXJuICRqc2NvbXAuYXJyYXkuYXJyYXlJdGVyYXRvcl8odGhpcyxmdW5jdGlvbihlLGwpe3JldHVybltlLGxdfSl9OyRqc2NvbXAuYXJyYXkuZW50cmllcyRpbnN0YWxsPWZ1bmN0aW9uKCl7QXJyYXkucHJvdG90eXBlLmVudHJpZXN8fChBcnJheS5wcm90b3R5cGUuZW50cmllcz0kanNjb21wLmFycmF5LmVudHJpZXMpfTskanNjb21wLmFycmF5LmtleXM9ZnVuY3Rpb24oKXtyZXR1cm4gJGpzY29tcC5hcnJheS5hcnJheUl0ZXJhdG9yXyh0aGlzLGZ1bmN0aW9uKGUpe3JldHVybiBlfSl9OyRqc2NvbXAuYXJyYXkua2V5cyRpbnN0YWxsPWZ1bmN0aW9uKCl7QXJyYXkucHJvdG90eXBlLmtleXN8fChBcnJheS5wcm90b3R5cGUua2V5cz0kanNjb21wLmFycmF5LmtleXMpfTskanNjb21wLmFycmF5LnZhbHVlcz1mdW5jdGlvbigpe3JldHVybiAkanNjb21wLmFycmF5LmFycmF5SXRlcmF0b3JfKHRoaXMsZnVuY3Rpb24oZSxsKXtyZXR1cm4gbH0pfTtcclxuJGpzY29tcC5hcnJheS52YWx1ZXMkaW5zdGFsbD1mdW5jdGlvbigpe0FycmF5LnByb3RvdHlwZS52YWx1ZXN8fChBcnJheS5wcm90b3R5cGUudmFsdWVzPSRqc2NvbXAuYXJyYXkudmFsdWVzKX07JGpzY29tcC5hcnJheS5jb3B5V2l0aGluPWZ1bmN0aW9uKGUsbCxwKXt2YXIgYj10aGlzLmxlbmd0aDtlPU51bWJlcihlKTtsPU51bWJlcihsKTtwPU51bWJlcihudWxsIT1wP3A6Yik7aWYoZTxsKWZvcihwPU1hdGgubWluKHAsYik7bDxwOylsIGluIHRoaXM/dGhpc1tlKytdPXRoaXNbbCsrXTooZGVsZXRlIHRoaXNbZSsrXSxsKyspO2Vsc2UgZm9yKHA9TWF0aC5taW4ocCxiK2wtZSksZSs9cC1sO3A+bDspLS1wIGluIHRoaXM/dGhpc1stLWVdPXRoaXNbcF06ZGVsZXRlIHRoaXNbZV07cmV0dXJuIHRoaXN9OyRqc2NvbXAuYXJyYXkuY29weVdpdGhpbiRpbnN0YWxsPWZ1bmN0aW9uKCl7QXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW58fChBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbj0kanNjb21wLmFycmF5LmNvcHlXaXRoaW4pfTtcclxuJGpzY29tcC5hcnJheS5maWxsPWZ1bmN0aW9uKGUsbCxwKXtudWxsIT1wJiZlLmxlbmd0aHx8KHA9dGhpcy5sZW5ndGh8fDApO3A9TnVtYmVyKHApO2ZvcihsPU51bWJlcigodm9pZCAwPT09bD8wOmwpfHwwKTtsPHA7bCsrKXRoaXNbbF09ZTtyZXR1cm4gdGhpc307JGpzY29tcC5hcnJheS5maWxsJGluc3RhbGw9ZnVuY3Rpb24oKXtBcnJheS5wcm90b3R5cGUuZmlsbHx8KEFycmF5LnByb3RvdHlwZS5maWxsPSRqc2NvbXAuYXJyYXkuZmlsbCl9OyRqc2NvbXAuYXJyYXkuZmluZD1mdW5jdGlvbihlLGwpe3JldHVybiAkanNjb21wLmFycmF5LmZpbmRJbnRlcm5hbF8odGhpcyxlLGwpLnZ9OyRqc2NvbXAuYXJyYXkuZmluZCRpbnN0YWxsPWZ1bmN0aW9uKCl7QXJyYXkucHJvdG90eXBlLmZpbmR8fChBcnJheS5wcm90b3R5cGUuZmluZD0kanNjb21wLmFycmF5LmZpbmQpfTtcclxuJGpzY29tcC5hcnJheS5maW5kSW5kZXg9ZnVuY3Rpb24oZSxsKXtyZXR1cm4gJGpzY29tcC5hcnJheS5maW5kSW50ZXJuYWxfKHRoaXMsZSxsKS5pfTskanNjb21wLmFycmF5LmZpbmRJbmRleCRpbnN0YWxsPWZ1bmN0aW9uKCl7QXJyYXkucHJvdG90eXBlLmZpbmRJbmRleHx8KEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXg9JGpzY29tcC5hcnJheS5maW5kSW5kZXgpfTskanNjb21wLk1hcD1mdW5jdGlvbihlKXtlPXZvaWQgMD09PWU/W106ZTt0aGlzLmRhdGFfPXt9O3RoaXMuaGVhZF89JGpzY29tcC5NYXAuY3JlYXRlSGVhZF8oKTt0aGlzLnNpemU9MDtpZihlKXtlPSRqc2NvbXAubWFrZUl0ZXJhdG9yKGUpO2Zvcih2YXIgbD1lLm5leHQoKTshbC5kb25lO2w9ZS5uZXh0KCkpbD1sLnZhbHVlLHRoaXMuc2V0KGxbMF0sbFsxXSl9fTtcclxuJGpzY29tcC5NYXAuY2hlY2tCcm93c2VyQ29uZm9ybWFuY2VfPWZ1bmN0aW9uKCl7dmFyIGU9JGpzY29tcC5nbG9iYWwuTWFwO2lmKCFlfHwhZS5wcm90b3R5cGUuZW50cmllc3x8IU9iamVjdC5zZWFsKXJldHVybiExO3RyeXt2YXIgbD1PYmplY3Quc2VhbCh7eDo0fSkscD1uZXcgZSgkanNjb21wLm1ha2VJdGVyYXRvcihbW2wsXCJzXCJdXSkpO2lmKFwic1wiIT1wLmdldChsKXx8MSE9cC5zaXplfHxwLmdldCh7eDo0fSl8fHAuc2V0KHt4OjR9LFwidFwiKSE9cHx8MiE9cC5zaXplKXJldHVybiExO3ZhciBiPXAuZW50cmllcygpLGE9Yi5uZXh0KCk7aWYoYS5kb25lfHxhLnZhbHVlWzBdIT1sfHxcInNcIiE9YS52YWx1ZVsxXSlyZXR1cm4hMTthPWIubmV4dCgpO3JldHVybiBhLmRvbmV8fDQhPWEudmFsdWVbMF0ueHx8XCJ0XCIhPWEudmFsdWVbMV18fCFiLm5leHQoKS5kb25lPyExOiEwfWNhdGNoKGMpe3JldHVybiExfX07XHJcbiRqc2NvbXAuTWFwLmNyZWF0ZUhlYWRfPWZ1bmN0aW9uKCl7dmFyIGU9e307cmV0dXJuIGUucHJldmlvdXM9ZS5uZXh0PWUuaGVhZD1lfTskanNjb21wLk1hcC5nZXRJZF89ZnVuY3Rpb24oZSl7aWYoIShlIGluc3RhbmNlb2YgT2JqZWN0KSlyZXR1cm4gU3RyaW5nKGUpOyRqc2NvbXAuTWFwLmtleV8gaW4gZXx8ZSBpbnN0YW5jZW9mIE9iamVjdCYmT2JqZWN0LmlzRXh0ZW5zaWJsZSYmT2JqZWN0LmlzRXh0ZW5zaWJsZShlKSYmJGpzY29tcC5NYXAuZGVmaW5lUHJvcGVydHlfKGUsJGpzY29tcC5NYXAua2V5XywrKyRqc2NvbXAuTWFwLmluZGV4Xyk7cmV0dXJuICRqc2NvbXAuTWFwLmtleV8gaW4gZT9lWyRqc2NvbXAuTWFwLmtleV9dOlwiIFwiK2V9O1xyXG4kanNjb21wLk1hcC5wcm90b3R5cGUuc2V0PWZ1bmN0aW9uKGUsbCl7dmFyIHA9dGhpcy5tYXliZUdldEVudHJ5XyhlKSxiPXAuaWQsYT1wLmxpc3QscD1wLmVudHJ5O2F8fChhPXRoaXMuZGF0YV9bYl09W10pO3A/cC52YWx1ZT1sOihwPXtuZXh0OnRoaXMuaGVhZF8scHJldmlvdXM6dGhpcy5oZWFkXy5wcmV2aW91cyxoZWFkOnRoaXMuaGVhZF8sa2V5OmUsdmFsdWU6bH0sYS5wdXNoKHApLHRoaXMuaGVhZF8ucHJldmlvdXMubmV4dD1wLHRoaXMuaGVhZF8ucHJldmlvdXM9cCx0aGlzLnNpemUrKyk7cmV0dXJuIHRoaXN9O1xyXG4kanNjb21wLk1hcC5wcm90b3R5cGVbXCJkZWxldGVcIl09ZnVuY3Rpb24oZSl7dmFyIGw9dGhpcy5tYXliZUdldEVudHJ5XyhlKTtlPWwuaWQ7dmFyIHA9bC5saXN0LGI9bC5pbmRleDtyZXR1cm4obD1sLmVudHJ5KSYmcD8ocC5zcGxpY2UoYiwxKSxwLmxlbmd0aHx8ZGVsZXRlIHRoaXMuZGF0YV9bZV0sbC5wcmV2aW91cy5uZXh0PWwubmV4dCxsLm5leHQucHJldmlvdXM9bC5wcmV2aW91cyxsLmhlYWQ9bnVsbCx0aGlzLnNpemUtLSwhMCk6ITF9OyRqc2NvbXAuTWFwLnByb3RvdHlwZS5jbGVhcj1mdW5jdGlvbigpe3RoaXMuZGF0YV89e307dGhpcy5oZWFkXz10aGlzLmhlYWRfLnByZXZpb3VzPSRqc2NvbXAuTWFwLmNyZWF0ZUhlYWRfKCk7dGhpcy5zaXplPTB9OyRqc2NvbXAuTWFwLnByb3RvdHlwZS5oYXM9ZnVuY3Rpb24oZSl7cmV0dXJuISF0aGlzLm1heWJlR2V0RW50cnlfKGUpLmVudHJ5fTtcclxuJGpzY29tcC5NYXAucHJvdG90eXBlLmdldD1mdW5jdGlvbihlKXtyZXR1cm4oZT10aGlzLm1heWJlR2V0RW50cnlfKGUpLmVudHJ5KSYmZS52YWx1ZX07JGpzY29tcC5NYXAucHJvdG90eXBlLm1heWJlR2V0RW50cnlfPWZ1bmN0aW9uKGUpe3ZhciBsPSRqc2NvbXAuTWFwLmdldElkXyhlKSxwPXRoaXMuZGF0YV9bbF07aWYocClmb3IodmFyIGI9MDtiPHAubGVuZ3RoO2IrKyl7dmFyIGE9cFtiXTtpZihlIT09ZSYmYS5rZXkhPT1hLmtleXx8ZT09PWEua2V5KXJldHVybntpZDpsLGxpc3Q6cCxpbmRleDpiLGVudHJ5OmF9fXJldHVybntpZDpsLGxpc3Q6cCxpbmRleDotMSxlbnRyeTp2b2lkIDB9fTskanNjb21wLk1hcC5wcm90b3R5cGUuZW50cmllcz1mdW5jdGlvbigpe3JldHVybiB0aGlzLml0ZXJfKGZ1bmN0aW9uKGUpe3JldHVybltlLmtleSxlLnZhbHVlXX0pfTskanNjb21wLk1hcC5wcm90b3R5cGUua2V5cz1mdW5jdGlvbigpe3JldHVybiB0aGlzLml0ZXJfKGZ1bmN0aW9uKGUpe3JldHVybiBlLmtleX0pfTtcclxuJGpzY29tcC5NYXAucHJvdG90eXBlLnZhbHVlcz1mdW5jdGlvbigpe3JldHVybiB0aGlzLml0ZXJfKGZ1bmN0aW9uKGUpe3JldHVybiBlLnZhbHVlfSl9OyRqc2NvbXAuTWFwLnByb3RvdHlwZS5mb3JFYWNoPWZ1bmN0aW9uKGUsbCl7Zm9yKHZhciBwPSRqc2NvbXAubWFrZUl0ZXJhdG9yKHRoaXMuZW50cmllcygpKSxiPXAubmV4dCgpOyFiLmRvbmU7Yj1wLm5leHQoKSliPWIudmFsdWUsZS5jYWxsKGwsYlsxXSxiWzBdLHRoaXMpfTtcclxuJGpzY29tcC5NYXAucHJvdG90eXBlLml0ZXJfPWZ1bmN0aW9uKGUpe3ZhciBsPXRoaXMscD10aGlzLmhlYWRfOyRqc2NvbXAuaW5pdFN5bWJvbCgpOyRqc2NvbXAuaW5pdFN5bWJvbEl0ZXJhdG9yKCk7dmFyIGI9e307cmV0dXJuIGIubmV4dD1mdW5jdGlvbigpe2lmKHApe2Zvcig7cC5oZWFkIT1sLmhlYWRfOylwPXAucHJldmlvdXM7Zm9yKDtwLm5leHQhPXAuaGVhZDspcmV0dXJuIHA9cC5uZXh0LHtkb25lOiExLHZhbHVlOmUocCl9O3A9bnVsbH1yZXR1cm57ZG9uZTohMCx2YWx1ZTp2b2lkIDB9fSxiW1N5bWJvbC5pdGVyYXRvcl09ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30sYn07JGpzY29tcC5NYXAuaW5kZXhfPTA7JGpzY29tcC5NYXAuZGVmaW5lUHJvcGVydHlfPU9iamVjdC5kZWZpbmVQcm9wZXJ0eT9mdW5jdGlvbihlLGwscCl7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbCx7dmFsdWU6U3RyaW5nKHApfSl9OmZ1bmN0aW9uKGUsbCxwKXtlW2xdPVN0cmluZyhwKX07XHJcbiRqc2NvbXAuTWFwLkVudHJ5Xz1mdW5jdGlvbigpe307JGpzY29tcC5NYXAuQVNTVU1FX05PX05BVElWRT0hMTskanNjb21wLk1hcCRpbnN0YWxsPWZ1bmN0aW9uKCl7JGpzY29tcC5pbml0U3ltYm9sKCk7JGpzY29tcC5pbml0U3ltYm9sSXRlcmF0b3IoKTshJGpzY29tcC5NYXAuQVNTVU1FX05PX05BVElWRSYmJGpzY29tcC5NYXAuY2hlY2tCcm93c2VyQ29uZm9ybWFuY2VfKCk/JGpzY29tcC5NYXA9JGpzY29tcC5nbG9iYWwuTWFwOigkanNjb21wLmluaXRTeW1ib2woKSwkanNjb21wLmluaXRTeW1ib2xJdGVyYXRvcigpLCRqc2NvbXAuTWFwLnByb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdPSRqc2NvbXAuTWFwLnByb3RvdHlwZS5lbnRyaWVzLCRqc2NvbXAuaW5pdFN5bWJvbCgpLCRqc2NvbXAuTWFwLmtleV89U3ltYm9sKFwibWFwLWlkLWtleVwiKSk7JGpzY29tcC5NYXAkaW5zdGFsbD1mdW5jdGlvbigpe319OyRqc2NvbXAubWF0aD0kanNjb21wLm1hdGh8fHt9O1xyXG4kanNjb21wLm1hdGguY2x6MzI9ZnVuY3Rpb24oZSl7ZT1OdW1iZXIoZSk+Pj4wO2lmKDA9PT1lKXJldHVybiAzMjt2YXIgbD0wOzA9PT0oZSY0Mjk0OTAxNzYwKSYmKGU8PD0xNixsKz0xNik7MD09PShlJjQyNzgxOTAwODApJiYoZTw8PTgsbCs9OCk7MD09PShlJjQwMjY1MzE4NDApJiYoZTw8PTQsbCs9NCk7MD09PShlJjMyMjEyMjU0NzIpJiYoZTw8PTIsbCs9Mik7MD09PShlJjIxNDc0ODM2NDgpJiZsKys7cmV0dXJuIGx9OyRqc2NvbXAubWF0aC5pbXVsPWZ1bmN0aW9uKGUsbCl7ZT1OdW1iZXIoZSk7bD1OdW1iZXIobCk7dmFyIHA9ZSY2NTUzNSxiPWwmNjU1MzU7cmV0dXJuIHAqYisoKGU+Pj4xNiY2NTUzNSkqYitwKihsPj4+MTYmNjU1MzUpPDwxNj4+PjApfDB9OyRqc2NvbXAubWF0aC5zaWduPWZ1bmN0aW9uKGUpe2U9TnVtYmVyKGUpO3JldHVybiAwPT09ZXx8aXNOYU4oZSk/ZTowPGU/MTotMX07XHJcbiRqc2NvbXAubWF0aC5sb2cxMD1mdW5jdGlvbihlKXtyZXR1cm4gTWF0aC5sb2coZSkvTWF0aC5MTjEwfTskanNjb21wLm1hdGgubG9nMj1mdW5jdGlvbihlKXtyZXR1cm4gTWF0aC5sb2coZSkvTWF0aC5MTjJ9OyRqc2NvbXAubWF0aC5sb2cxcD1mdW5jdGlvbihlKXtlPU51bWJlcihlKTtpZiguMjU+ZSYmLS4yNTxlKXtmb3IodmFyIGw9ZSxwPTEsYj1lLGE9MCxjPTE7YSE9YjspbCo9ZSxjKj0tMSxiPShhPWIpK2MqbC8rK3A7cmV0dXJuIGJ9cmV0dXJuIE1hdGgubG9nKDErZSl9OyRqc2NvbXAubWF0aC5leHBtMT1mdW5jdGlvbihlKXtlPU51bWJlcihlKTtpZiguMjU+ZSYmLS4yNTxlKXtmb3IodmFyIGw9ZSxwPTEsYj1lLGE9MDthIT1iOylsKj1lLysrcCxiPShhPWIpK2w7cmV0dXJuIGJ9cmV0dXJuIE1hdGguZXhwKGUpLTF9OyRqc2NvbXAubWF0aC5jb3NoPWZ1bmN0aW9uKGUpe2U9TnVtYmVyKGUpO3JldHVybihNYXRoLmV4cChlKStNYXRoLmV4cCgtZSkpLzJ9O1xyXG4kanNjb21wLm1hdGguc2luaD1mdW5jdGlvbihlKXtlPU51bWJlcihlKTtyZXR1cm4gMD09PWU/ZTooTWF0aC5leHAoZSktTWF0aC5leHAoLWUpKS8yfTskanNjb21wLm1hdGgudGFuaD1mdW5jdGlvbihlKXtlPU51bWJlcihlKTtpZigwPT09ZSlyZXR1cm4gZTt2YXIgbD1NYXRoLmV4cCgyKi1NYXRoLmFicyhlKSksbD0oMS1sKS8oMStsKTtyZXR1cm4gMD5lPy1sOmx9OyRqc2NvbXAubWF0aC5hY29zaD1mdW5jdGlvbihlKXtlPU51bWJlcihlKTtyZXR1cm4gTWF0aC5sb2coZStNYXRoLnNxcnQoZSplLTEpKX07JGpzY29tcC5tYXRoLmFzaW5oPWZ1bmN0aW9uKGUpe2U9TnVtYmVyKGUpO2lmKDA9PT1lKXJldHVybiBlO3ZhciBsPU1hdGgubG9nKE1hdGguYWJzKGUpK01hdGguc3FydChlKmUrMSkpO3JldHVybiAwPmU/LWw6bH07XHJcbiRqc2NvbXAubWF0aC5hdGFuaD1mdW5jdGlvbihlKXtlPU51bWJlcihlKTtyZXR1cm4oJGpzY29tcC5tYXRoLmxvZzFwKGUpLSRqc2NvbXAubWF0aC5sb2cxcCgtZSkpLzJ9O1xyXG4kanNjb21wLm1hdGguaHlwb3Q9ZnVuY3Rpb24oZSxsLHApe2Zvcih2YXIgYj1bXSxhPTI7YTxhcmd1bWVudHMubGVuZ3RoOysrYSliW2EtMl09YXJndW1lbnRzW2FdO2U9TnVtYmVyKGUpO2w9TnVtYmVyKGwpO2Zvcih2YXIgYz1NYXRoLm1heChNYXRoLmFicyhlKSxNYXRoLmFicyhsKSksUT0kanNjb21wLm1ha2VJdGVyYXRvcihiKSxhPVEubmV4dCgpOyFhLmRvbmU7YT1RLm5leHQoKSljPU1hdGgubWF4KGMsTWF0aC5hYnMoYS52YWx1ZSkpO2lmKDFFMTAwPGN8fDFFLTEwMD5jKXtlLz1jO2wvPWM7UT1lKmUrbCpsO2I9JGpzY29tcC5tYWtlSXRlcmF0b3IoYik7Zm9yKGE9Yi5uZXh0KCk7IWEuZG9uZTthPWIubmV4dCgpKWE9YS52YWx1ZSxhPU51bWJlcihhKS9jLFErPWEqYTtyZXR1cm4gTWF0aC5zcXJ0KFEpKmN9Yz1lKmUrbCpsO2I9JGpzY29tcC5tYWtlSXRlcmF0b3IoYik7Zm9yKGE9Yi5uZXh0KCk7IWEuZG9uZTthPWIubmV4dCgpKWE9YS52YWx1ZSxhPU51bWJlcihhKSxjKz1cclxuYSphO3JldHVybiBNYXRoLnNxcnQoYyl9OyRqc2NvbXAubWF0aC50cnVuYz1mdW5jdGlvbihlKXtlPU51bWJlcihlKTtpZihpc05hTihlKXx8SW5maW5pdHk9PT1lfHwtSW5maW5pdHk9PT1lfHwwPT09ZSlyZXR1cm4gZTt2YXIgbD1NYXRoLmZsb29yKE1hdGguYWJzKGUpKTtyZXR1cm4gMD5lPy1sOmx9OyRqc2NvbXAubWF0aC5jYnJ0PWZ1bmN0aW9uKGUpe2lmKDA9PT1lKXJldHVybiBlO2U9TnVtYmVyKGUpO3ZhciBsPU1hdGgucG93KE1hdGguYWJzKGUpLDEvMyk7cmV0dXJuIDA+ZT8tbDpsfTskanNjb21wLm51bWJlcj0kanNjb21wLm51bWJlcnx8e307JGpzY29tcC5udW1iZXIuaXNGaW5pdGU9ZnVuY3Rpb24oZSl7cmV0dXJuXCJudW1iZXJcIiE9PXR5cGVvZiBlPyExOiFpc05hTihlKSYmSW5maW5pdHkhPT1lJiYtSW5maW5pdHkhPT1lfTtcclxuJGpzY29tcC5udW1iZXIuaXNJbnRlZ2VyPWZ1bmN0aW9uKGUpe3JldHVybiAkanNjb21wLm51bWJlci5pc0Zpbml0ZShlKT9lPT09TWF0aC5mbG9vcihlKTohMX07JGpzY29tcC5udW1iZXIuaXNOYU49ZnVuY3Rpb24oZSl7cmV0dXJuXCJudW1iZXJcIj09PXR5cGVvZiBlJiZpc05hTihlKX07JGpzY29tcC5udW1iZXIuaXNTYWZlSW50ZWdlcj1mdW5jdGlvbihlKXtyZXR1cm4gJGpzY29tcC5udW1iZXIuaXNJbnRlZ2VyKGUpJiZNYXRoLmFicyhlKTw9JGpzY29tcC5udW1iZXIuTUFYX1NBRkVfSU5URUdFUn07JGpzY29tcC5udW1iZXIuRVBTSUxPTj1NYXRoLnBvdygyLC01Mik7JGpzY29tcC5udW1iZXIuTUFYX1NBRkVfSU5URUdFUj05MDA3MTk5MjU0NzQwOTkxOyRqc2NvbXAubnVtYmVyLk1JTl9TQUZFX0lOVEVHRVI9LTkwMDcxOTkyNTQ3NDA5OTE7JGpzY29tcC5vYmplY3Q9JGpzY29tcC5vYmplY3R8fHt9O1xyXG4kanNjb21wLm9iamVjdC5hc3NpZ249ZnVuY3Rpb24oZSxsKXtmb3IodmFyIHA9W10sYj0xO2I8YXJndW1lbnRzLmxlbmd0aDsrK2IpcFtiLTFdPWFyZ3VtZW50c1tiXTtwPSRqc2NvbXAubWFrZUl0ZXJhdG9yKHApO2ZvcihiPXAubmV4dCgpOyFiLmRvbmU7Yj1wLm5leHQoKSlpZihiPWIudmFsdWUpZm9yKHZhciBhIGluIGIpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsYSkmJihlW2FdPWJbYV0pO3JldHVybiBlfTskanNjb21wLm9iamVjdC5pcz1mdW5jdGlvbihlLGwpe3JldHVybiBlPT09bD8wIT09ZXx8MS9lPT09MS9sOmUhPT1lJiZsIT09bH07JGpzY29tcC5TZXQ9ZnVuY3Rpb24oZSl7ZT12b2lkIDA9PT1lP1tdOmU7dGhpcy5tYXBfPW5ldyAkanNjb21wLk1hcDtpZihlKXtlPSRqc2NvbXAubWFrZUl0ZXJhdG9yKGUpO2Zvcih2YXIgbD1lLm5leHQoKTshbC5kb25lO2w9ZS5uZXh0KCkpdGhpcy5hZGQobC52YWx1ZSl9dGhpcy5zaXplPXRoaXMubWFwXy5zaXplfTtcclxuJGpzY29tcC5TZXQuY2hlY2tCcm93c2VyQ29uZm9ybWFuY2VfPWZ1bmN0aW9uKCl7dmFyIGU9JGpzY29tcC5nbG9iYWwuU2V0O2lmKCFlfHwhZS5wcm90b3R5cGUuZW50cmllc3x8IU9iamVjdC5zZWFsKXJldHVybiExO3ZhciBsPU9iamVjdC5zZWFsKHt4OjR9KSxlPW5ldyBlKCRqc2NvbXAubWFrZUl0ZXJhdG9yKFtsXSkpO2lmKGUuaGFzKGwpfHwxIT1lLnNpemV8fGUuYWRkKGwpIT1lfHwxIT1lLnNpemV8fGUuYWRkKHt4OjR9KSE9ZXx8MiE9ZS5zaXplKXJldHVybiExO3ZhciBlPWUuZW50cmllcygpLHA9ZS5uZXh0KCk7aWYocC5kb25lfHxwLnZhbHVlWzBdIT1sfHxwLnZhbHVlWzFdIT1sKXJldHVybiExO3A9ZS5uZXh0KCk7cmV0dXJuIHAuZG9uZXx8cC52YWx1ZVswXT09bHx8NCE9cC52YWx1ZVswXS54fHxwLnZhbHVlWzFdIT1wLnZhbHVlWzBdPyExOmUubmV4dCgpLmRvbmV9O1xyXG4kanNjb21wLlNldC5wcm90b3R5cGUuYWRkPWZ1bmN0aW9uKGUpe3RoaXMubWFwXy5zZXQoZSxlKTt0aGlzLnNpemU9dGhpcy5tYXBfLnNpemU7cmV0dXJuIHRoaXN9OyRqc2NvbXAuU2V0LnByb3RvdHlwZVtcImRlbGV0ZVwiXT1mdW5jdGlvbihlKXtlPXRoaXMubWFwX1tcImRlbGV0ZVwiXShlKTt0aGlzLnNpemU9dGhpcy5tYXBfLnNpemU7cmV0dXJuIGV9OyRqc2NvbXAuU2V0LnByb3RvdHlwZS5jbGVhcj1mdW5jdGlvbigpe3RoaXMubWFwXy5jbGVhcigpO3RoaXMuc2l6ZT0wfTskanNjb21wLlNldC5wcm90b3R5cGUuaGFzPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLm1hcF8uaGFzKGUpfTskanNjb21wLlNldC5wcm90b3R5cGUuZW50cmllcz1mdW5jdGlvbigpe3JldHVybiB0aGlzLm1hcF8uZW50cmllcygpfTskanNjb21wLlNldC5wcm90b3R5cGUudmFsdWVzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWFwXy52YWx1ZXMoKX07XHJcbiRqc2NvbXAuU2V0LnByb3RvdHlwZS5mb3JFYWNoPWZ1bmN0aW9uKGUsbCl7dmFyIHA9dGhpczt0aGlzLm1hcF8uZm9yRWFjaChmdW5jdGlvbihiKXtyZXR1cm4gZS5jYWxsKGwsYixiLHApfSl9OyRqc2NvbXAuU2V0LkFTU1VNRV9OT19OQVRJVkU9ITE7JGpzY29tcC5TZXQkaW5zdGFsbD1mdW5jdGlvbigpeyEkanNjb21wLlNldC5BU1NVTUVfTk9fTkFUSVZFJiYkanNjb21wLlNldC5jaGVja0Jyb3dzZXJDb25mb3JtYW5jZV8oKT8kanNjb21wLlNldD0kanNjb21wLmdsb2JhbC5TZXQ6KCRqc2NvbXAuTWFwJGluc3RhbGwoKSwkanNjb21wLmluaXRTeW1ib2woKSwkanNjb21wLmluaXRTeW1ib2xJdGVyYXRvcigpLCRqc2NvbXAuU2V0LnByb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdPSRqc2NvbXAuU2V0LnByb3RvdHlwZS52YWx1ZXMpOyRqc2NvbXAuU2V0JGluc3RhbGw9ZnVuY3Rpb24oKXt9fTskanNjb21wLnN0cmluZz0kanNjb21wLnN0cmluZ3x8e307XHJcbiRqc2NvbXAuc3RyaW5nLm5vUmVnRXhwXz1mdW5jdGlvbihlLGwpe2lmKGUgaW5zdGFuY2VvZiBSZWdFeHApdGhyb3cgbmV3IFR5cGVFcnJvcihcIkZpcnN0IGFyZ3VtZW50IHRvIFN0cmluZy5wcm90b3R5cGUuXCIrbCtcIiBtdXN0IG5vdCBiZSBhIHJlZ3VsYXIgZXhwcmVzc2lvblwiKTt9O1xyXG4kanNjb21wLnN0cmluZy5mcm9tQ29kZVBvaW50PWZ1bmN0aW9uKGUpe2Zvcih2YXIgbD1bXSxwPTA7cDxhcmd1bWVudHMubGVuZ3RoOysrcClsW3AtMF09YXJndW1lbnRzW3BdO2Zvcih2YXIgcD1cIlwiLGw9JGpzY29tcC5tYWtlSXRlcmF0b3IobCksYj1sLm5leHQoKTshYi5kb25lO2I9bC5uZXh0KCkpe2I9Yi52YWx1ZTtiPStiO2lmKDA+Ynx8MTExNDExMTxifHxiIT09TWF0aC5mbG9vcihiKSl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcImludmFsaWRfY29kZV9wb2ludCBcIitiKTs2NTUzNT49Yj9wKz1TdHJpbmcuZnJvbUNoYXJDb2RlKGIpOihiLT02NTUzNixwKz1TdHJpbmcuZnJvbUNoYXJDb2RlKGI+Pj4xMCYxMDIzfDU1Mjk2KSxwKz1TdHJpbmcuZnJvbUNoYXJDb2RlKGImMTAyM3w1NjMyMCkpfXJldHVybiBwfTtcclxuJGpzY29tcC5zdHJpbmcucmVwZWF0PWZ1bmN0aW9uKGUpe3ZhciBsPXRoaXMudG9TdHJpbmcoKTtpZigwPmV8fDEzNDIxNzcyNzk8ZSl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkludmFsaWQgY291bnQgdmFsdWVcIik7ZXw9MDtmb3IodmFyIHA9XCJcIjtlOylpZihlJjEmJihwKz1sKSxlPj4+PTEpbCs9bDtyZXR1cm4gcH07JGpzY29tcC5zdHJpbmcucmVwZWF0JGluc3RhbGw9ZnVuY3Rpb24oKXtTdHJpbmcucHJvdG90eXBlLnJlcGVhdHx8KFN0cmluZy5wcm90b3R5cGUucmVwZWF0PSRqc2NvbXAuc3RyaW5nLnJlcGVhdCl9O1xyXG4kanNjb21wLnN0cmluZy5jb2RlUG9pbnRBdD1mdW5jdGlvbihlKXt2YXIgbD10aGlzLnRvU3RyaW5nKCkscD1sLmxlbmd0aDtlPU51bWJlcihlKXx8MDtpZigwPD1lJiZlPHApe2V8PTA7dmFyIGI9bC5jaGFyQ29kZUF0KGUpO2lmKDU1Mjk2PmJ8fDU2MzE5PGJ8fGUrMT09PXApcmV0dXJuIGI7ZT1sLmNoYXJDb2RlQXQoZSsxKTtyZXR1cm4gNTYzMjA+ZXx8NTczNDM8ZT9iOjEwMjQqKGItNTUyOTYpK2UrOTIxNn19OyRqc2NvbXAuc3RyaW5nLmNvZGVQb2ludEF0JGluc3RhbGw9ZnVuY3Rpb24oKXtTdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0fHwoU3RyaW5nLnByb3RvdHlwZS5jb2RlUG9pbnRBdD0kanNjb21wLnN0cmluZy5jb2RlUG9pbnRBdCl9O1xyXG4kanNjb21wLnN0cmluZy5pbmNsdWRlcz1mdW5jdGlvbihlLGwpe2w9dm9pZCAwPT09bD8wOmw7JGpzY29tcC5zdHJpbmcubm9SZWdFeHBfKGUsXCJpbmNsdWRlc1wiKTtyZXR1cm4tMSE9PXRoaXMudG9TdHJpbmcoKS5pbmRleE9mKGUsbCl9OyRqc2NvbXAuc3RyaW5nLmluY2x1ZGVzJGluc3RhbGw9ZnVuY3Rpb24oKXtTdHJpbmcucHJvdG90eXBlLmluY2x1ZGVzfHwoU3RyaW5nLnByb3RvdHlwZS5pbmNsdWRlcz0kanNjb21wLnN0cmluZy5pbmNsdWRlcyl9O1xyXG4kanNjb21wLnN0cmluZy5zdGFydHNXaXRoPWZ1bmN0aW9uKGUsbCl7bD12b2lkIDA9PT1sPzA6bDskanNjb21wLnN0cmluZy5ub1JlZ0V4cF8oZSxcInN0YXJ0c1dpdGhcIik7dmFyIHA9dGhpcy50b1N0cmluZygpO2UrPVwiXCI7Zm9yKHZhciBiPXAubGVuZ3RoLGE9ZS5sZW5ndGgsYz1NYXRoLm1heCgwLE1hdGgubWluKGx8MCxwLmxlbmd0aCkpLFE9MDtRPGEmJmM8YjspaWYocFtjKytdIT1lW1ErK10pcmV0dXJuITE7cmV0dXJuIFE+PWF9OyRqc2NvbXAuc3RyaW5nLnN0YXJ0c1dpdGgkaW5zdGFsbD1mdW5jdGlvbigpe1N0cmluZy5wcm90b3R5cGUuc3RhcnRzV2l0aHx8KFN0cmluZy5wcm90b3R5cGUuc3RhcnRzV2l0aD0kanNjb21wLnN0cmluZy5zdGFydHNXaXRoKX07XHJcbiRqc2NvbXAuc3RyaW5nLmVuZHNXaXRoPWZ1bmN0aW9uKGUsbCl7JGpzY29tcC5zdHJpbmcubm9SZWdFeHBfKGUsXCJlbmRzV2l0aFwiKTt2YXIgcD10aGlzLnRvU3RyaW5nKCk7ZSs9XCJcIjt2b2lkIDA9PT1sJiYobD1wLmxlbmd0aCk7Zm9yKHZhciBiPU1hdGgubWF4KDAsTWF0aC5taW4obHwwLHAubGVuZ3RoKSksYT1lLmxlbmd0aDswPGEmJjA8YjspaWYocFstLWJdIT1lWy0tYV0pcmV0dXJuITE7cmV0dXJuIDA+PWF9OyRqc2NvbXAuc3RyaW5nLmVuZHNXaXRoJGluc3RhbGw9ZnVuY3Rpb24oKXtTdHJpbmcucHJvdG90eXBlLmVuZHNXaXRofHwoU3RyaW5nLnByb3RvdHlwZS5lbmRzV2l0aD0kanNjb21wLnN0cmluZy5lbmRzV2l0aCl9O1xyXG4oZnVuY3Rpb24oZSxsKXtcIm9iamVjdFwiPT09dHlwZW9mIGV4cG9ydHMmJlwib2JqZWN0XCI9PT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPWwoKTpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShbXSxsKTpcIm9iamVjdFwiPT09dHlwZW9mIGV4cG9ydHM/ZXhwb3J0cy5DaXRyaXhXZWJSVEM9bCgpOmUuQ2l0cml4V2ViUlRDPWwoKX0pKHNlbGYsZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGIpe3ZhciBhPXBbYl07aWYodm9pZCAwIT09YSlyZXR1cm4gYS5leHBvcnRzO2E9cFtiXT17ZXhwb3J0czp7fX07bFtiXS5jYWxsKGEuZXhwb3J0cyxhLGEuZXhwb3J0cyxlKTtyZXR1cm4gYS5leHBvcnRzfXZhciBsPXs5NDU6ZnVuY3Rpb24oYixhLGMpe3ZhciBlPXRoaXMmJnRoaXMuX19leHRlbmRzfHxmdW5jdGlvbigpe3ZhciBhPWZ1bmN0aW9uKGssdil7YT1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fHtfX3Byb3RvX186W119aW5zdGFuY2VvZlxyXG5BcnJheSYmZnVuY3Rpb24oYSxnKXthLl9fcHJvdG9fXz1nfXx8ZnVuY3Rpb24oYSxnKXtmb3IodmFyIGsgaW4gZylnLmhhc093blByb3BlcnR5KGspJiYoYVtrXT1nW2tdKX07cmV0dXJuIGEoayx2KX07cmV0dXJuIGZ1bmN0aW9uKGssdil7ZnVuY3Rpb24gYigpe3RoaXMuY29uc3RydWN0b3I9a31hKGssdik7ay5wcm90b3R5cGU9bnVsbD09PXY/T2JqZWN0LmNyZWF0ZSh2KTooYi5wcm90b3R5cGU9di5wcm90b3R5cGUsbmV3IGIpfX0oKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTthLkF1ZGlvRWxlbWVudD12b2lkIDA7dmFyIHU9Yyg2NTgpLGg9Yyg1NTApLGQ9Yyg4NTEpLHc9Yyg5NDYpLHE7KGZ1bmN0aW9uKGEpe2EuSW5pdD1cIkluaXRcIjthLlBsYXlTdGFydGVkPVwiUGxheVN0YXJ0ZWRcIjthLlBhdXNlQ2FsbGVkPVwiUGF1c2VDYWxsZWRcIn0pKHF8fChxPXt9KSk7Yj1mdW5jdGlvbihhKXtmdW5jdGlvbiBrKCl7dmFyIGs9YS5jYWxsKHRoaXMsXHJcbm51bGwsaC5jbGFzc19pZF90LkF1ZGlvRWxlbWVudCwwLHUuUHJveHlNb2RlLkxvY2FsKXx8dGhpcztrLnNpbmtJZF89XCJcIjtrLnNyY09iamVjdF89bnVsbDtrLmxvb3BfPSExO2subm90aVN0YXRlPXEuSW5pdDtyZXR1cm4ga31lKGssYSk7ay5wcm90b3R5cGUuc2V0U2lua0lkPWZ1bmN0aW9uKGEpe3ZhciBrPXRoaXM7ZC5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLnNldFNpbmtJZDogc2V0IHNpbmtJZCB0byBcIithKTtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24oZyxiKXtrLndhaXRVbnRpbENvbm5lY3RlZChcIkF1ZGlvRWxlbWVudC5zaW5rSWRcIikudGhlbihmdW5jdGlvbigpe3ZhciBiPWsucmVtb3RlSW52b2tlKCEwLGgubWV0aG9kX2lkX0F1ZGlvRWxlbWVudF90LnNpbmtJZCxhKTt3LmdldFJlZGlyZWN0b3IoKS5nZXRGZWF0dXJlVmFsdWUoaC5GRUFUVVJFX21zX3RlYW1zX3BzdG4pfHwoay5zaW5rSWRfPWEsZygpKTtyZXR1cm4gYn0pLnRoZW4oZnVuY3Rpb24oKXtkLmxvZ2dlci5sb2coay51c2VyX2ZyaWVuZGx5X2lkKCkrXHJcblwiLnNldFNpbmtJZDogc3VjY2VzcyEgcmVzb2x2aW5nLi4uXCIpO2suc2lua0lkXz1hO2coKX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oYSl7YT1rLmxvZ1JlbW90ZUludm9rZUVycm9yKGEsXCIuc2lua0lkIHNldHRlcjogZmFpbGVkIHRvIGNvbm5lY3QhXCIpO2IoYSl9KX0pfTtPYmplY3QuZGVmaW5lUHJvcGVydHkoay5wcm90b3R5cGUsXCJzaW5rSWRcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2lua0lkX30sc2V0OmZ1bmN0aW9uKGEpe3RoaXMuc2V0U2lua0lkKGEpfSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShrLnByb3RvdHlwZSxcInNyY09iamVjdFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zcmNPYmplY3RffSxzZXQ6ZnVuY3Rpb24oYSl7dmFyIGs9dGhpcztkLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuc3JjT2JqZWN0OiBzZXQgc3JjT2JqZWN0IHRvIFwiK0pTT04uc3RyaW5naWZ5KGEpKTthIT09XHJcbnRoaXMuc3JjT2JqZWN0XyYmKHRoaXMuc3JjT2JqZWN0Xz1hLHRoaXMud2FpdFVudGlsQ29ubmVjdGVkKFwiQXVkaW9FbGVtZW50LnNyY09iamVjdFwiKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGEuc3luY0JhcnJpZXIoKX0pLnRoZW4oZnVuY3Rpb24oYSl7ZC5sb2dnZXIubG9nKGsudXNlcl9mcmllbmRseV9pZCgpK1wiLnNyY09iamVjdDogc2V0IHNyY09iamVjdCB0byBzIFwiK0pTT04uc3RyaW5naWZ5KGEpKTtyZXR1cm4gay5yZW1vdGVJbnZva2UoITAsaC5tZXRob2RfaWRfQXVkaW9FbGVtZW50X3Quc3JjT2JqZWN0LG51bGwhPT1hJiZ2b2lkIDAhPT1hP2EuaWQ6XCJudWxsXCIpfSkudGhlbihmdW5jdGlvbigpe2QubG9nZ2VyLmxvZyhrLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5zcmNPYmplY3Qgc2V0dGVyOiByZW1vdGUgc3VjY2VzcyFcIil9KVtcImNhdGNoXCJdKGZ1bmN0aW9uKGEpe2subG9nUmVtb3RlSW52b2tlRXJyb3IoYSxcIi5zcmNPYmplY3Qgc2V0dGVyOiBmYWlsZWQgdG8gY29ubmVjdCFcIil9KSl9LFxyXG5lbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShrLnByb3RvdHlwZSxcInNyY1wiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zcmNffSxzZXQ6ZnVuY3Rpb24oYSl7dmFyIGs9dGhpcztkLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuc3JjOiBzZXQgc3JjIHRvIFwiK2EpO3RoaXMuc3JjXz1hO3RoaXMud2FpdFVudGlsQ29ubmVjdGVkKFwiQXVkaW9FbGVtZW50LnNyY1wiKS50aGVuKGZ1bmN0aW9uKCl7ay5yZW1vdGVJbnZva2UoITAsaC5tZXRob2RfaWRfQXVkaW9FbGVtZW50X3Quc3JjLGEpfSlbXCJjYXRjaFwiXShmdW5jdGlvbihhKXtrLmxvZ1JlbW90ZUludm9rZUVycm9yKGEsXCIuc3JjIHNldHRlcjogZmFpbGVkIHRvIGNvbm5lY3QhXCIpfSl9LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSk7ay5wcm90b3R5cGUucGxheT1mdW5jdGlvbigpe3ZhciBhPXRoaXM7ZC5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1xyXG5cIi5wbGF5KCkgY2FsbGVkLlwiKTt0aGlzLnRvZ2dsZUF1ZGlvKCEwKTtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24oayxnKXthLndhaXRVbnRpbENvbm5lY3RlZChcIkF1ZGlvRWxlbWVudC5wbGF5XCIpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gYS5yZW1vdGVJbnZva2UoITEsaC5tZXRob2RfaWRfQXVkaW9FbGVtZW50X3QucGxheSl9KS50aGVuKGZ1bmN0aW9uKCl7aygpfSlbXCJjYXRjaFwiXShmdW5jdGlvbihrKXthLmxvZ1JlbW90ZUludm9rZUVycm9yKGssXCIucGxheTogZmFpbGVkIHRvIGNvbm5lY3QhXCIpO2coayl9KX0pfTtrLnByb3RvdHlwZS5wbGF5RXg9ZnVuY3Rpb24oYSxrLGcpe3ZhciBiPXRoaXM7ZC5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLnBsYXlFeCgpIHNyYzpcIithK1wiIHNpbmtJZDpcIitrK1wiIGxvb3A6XCIrZyk7dGhpcy5ub3RpU3RhdGU9cS5QbGF5U3RhcnRlZDt0aGlzLndhaXRVbnRpbENvbm5lY3RlZChcIkF1ZGlvRWxlbWVudC5wbGF5RXhcIikudGhlbihmdW5jdGlvbigpe3ZhciBhPVxyXG5bXTtrJiZhLnB1c2goYi5zZXRTaW5rSWQoaykpO3ZvaWQgMCE9PWcmJm51bGwhPT1nJiYoYi5sb29wXz1nLGEucHVzaChiLnJlbW90ZUludm9rZSghMCxoLm1ldGhvZF9pZF9BdWRpb0VsZW1lbnRfdC5sb29wLGcpKSk7cmV0dXJuIFByb21pc2UuYWxsKGEpfSkudGhlbihmdW5jdGlvbigpe2Iuc3JjXz1hO3JldHVybiBiLnJlbW90ZUludm9rZSghMCxoLm1ldGhvZF9pZF9BdWRpb0VsZW1lbnRfdC5zcmMsYSl9KS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGIucGxheSgpfSkudGhlbihmdW5jdGlvbigpe2lmKGIubm90aVN0YXRlPT1xLlBhdXNlQ2FsbGVkKXJldHVybiBkLmxvZ2dlci5sb2coYi51c2VyX2ZyaWVuZGx5X2lkKCkrXCIucGxheUV4KCkgcnVuIGRlZmVycmVkIHBhdXNlXCIpLGIuZG9QYXVzZUFuZERpc3Bvc2UoKX0pLnRoZW4oZnVuY3Rpb24oKXtiLm5vdGlTdGF0ZT1xLkluaXQ7ZC5sb2dnZXIubG9nKGIudXNlcl9mcmllbmRseV9pZCgpK1wiLnBsYXlFeCgpIGRvbmVcIil9KVtcImNhdGNoXCJdKGZ1bmN0aW9uKGEpe2Iubm90aVN0YXRlPVxyXG5xLkluaXQ7Yi5sb2dSZW1vdGVJbnZva2VFcnJvcihhLFwiLnBsYXlFeCgpIGZhaWxlZCFcIil9KX07ay5wcm90b3R5cGUucGF1c2U9ZnVuY3Rpb24oKXt2YXIgYT10aGlzO2QubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5wYXVzZSgpIGNhbGxlZC5cIik7dGhpcy50b2dnbGVBdWRpbyghMSk7cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKGssZyl7YS53YWl0VW50aWxDb25uZWN0ZWQoXCJBdWRpb0VsZW1lbnQucGF1c2VcIikudGhlbihmdW5jdGlvbigpe3JldHVybiBhLnJlbW90ZUludm9rZSghMSxoLm1ldGhvZF9pZF9BdWRpb0VsZW1lbnRfdC5wYXVzZSl9KS50aGVuKGZ1bmN0aW9uKCl7aygpfSlbXCJjYXRjaFwiXShmdW5jdGlvbihrKXthLmxvZ1JlbW90ZUludm9rZUVycm9yKGssXCIucGF1c2U6IGZhaWxlZCFcIik7ZygpfSl9KX07ay5wcm90b3R5cGUuZG9QYXVzZUFuZERpc3Bvc2U9ZnVuY3Rpb24oKXt2YXIgYT10aGlzO2QubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcclxuXCIuZG9QYXVzZUFuZERpc3Bvc2UoKSBjYWxsZWQuXCIpO3RoaXMudG9nZ2xlQXVkaW8oITEpO3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihrLGcpe2Eud2FpdFVudGlsQ29ubmVjdGVkKFwiQXVkaW9FbGVtZW50LmRvUGF1c2VBbmREaXNwb3NlXCIpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gYS5yZW1vdGVJbnZva2UoITEsaC5tZXRob2RfaWRfQXVkaW9FbGVtZW50X3QucGF1c2UsW10pfSkudGhlbihmdW5jdGlvbigpe2QubG9nZ2VyLmxvZyhhLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5kb1BhdXNlQW5kRGlzcG9zZSgpIHJlc29sdmluZy4uLlwiKTtrKCk7YS5kaXNwb3NlKCl9KVtcImNhdGNoXCJdKGZ1bmN0aW9uKGcpe2EubG9nUmVtb3RlSW52b2tlRXJyb3IoZyxcIi5kb1BhdXNlQW5kRGlzcG9zZTogZmFpbGVkIHRvIGNvbm5lY3QhXCIpfSl9KX07ay5wcm90b3R5cGUucGF1c2VBbmREaXNwb3NlPWZ1bmN0aW9uKCl7dGhpcy5ub3RpU3RhdGU9PXEuUGxheVN0YXJ0ZWQ/KGQubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcclxuXCIucGF1c2VBbmREaXNwb3NlKCkgZGVmZXJyZWRcIiksdGhpcy5ub3RpU3RhdGU9cS5QYXVzZUNhbGxlZCk6dGhpcy5kb1BhdXNlQW5kRGlzcG9zZSgpfTtrLnByb3RvdHlwZS50b2dnbGVBdWRpbz1mdW5jdGlvbihhKXt0aGlzLnNyY09iamVjdF8mJihkLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIudG9nZ2xlQXVkaW8oKSB0b2dnbGUgYXVkaW8gdHJhY2tzOlwiK2EpLHRoaXMuc3JjT2JqZWN0Xy50b2dnbGVBdWRpbyhhKSl9O09iamVjdC5kZWZpbmVQcm9wZXJ0eShrLnByb3RvdHlwZSxcImxvb3BcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubG9vcF99LHNldDpmdW5jdGlvbihhKXt2YXIgaz10aGlzO2QubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5sb29wOiBzZXQgbG9vcCB0byBcIithKTt0aGlzLmxvb3BfPWE7dGhpcy53YWl0VW50aWxDb25uZWN0ZWQoXCJBdWRpb0VsZW1lbnQubG9vcFwiKS50aGVuKGZ1bmN0aW9uKCl7ay5yZW1vdGVJbnZva2UoITAsXHJcbmgubWV0aG9kX2lkX0F1ZGlvRWxlbWVudF90Lmxvb3AsYSl9KVtcImNhdGNoXCJdKGZ1bmN0aW9uKGEpe2subG9nUmVtb3RlSW52b2tlRXJyb3IoYSxcIi5sb29wIHNldHRlcjogZmFpbGVkIHRvIGNvbm5lY3QhXCIpfSl9LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSk7ay5wcm90b3R5cGUuZGlzcG9zZT1mdW5jdGlvbigpe2QubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5kaXNwb3NlKClcIik7dGhpcy5zcmNfPXRoaXMuc2lua0lkXz1cIlwiO3RoaXMuc3JjT2JqZWN0Xz1udWxsO3RoaXMubG9vcF89ITE7dGhpcy5yZWxlYXNlKCl9O3JldHVybiBrfSh1LlByb3h5T2JqZWN0KTthLkF1ZGlvRWxlbWVudD1ifSwyMzk6ZnVuY3Rpb24oYixhLGMpe2EuRT12b2lkIDA7dmFyIGU9Yyg5NDUpLHU9Yyg4NTEpLGg9ZnVuY3Rpb24oKXtmdW5jdGlvbiBhKCl7dGhpcy5zaW5rSWQ9dm9pZCAwO3RoaXMuc3JjPVwiXCI7dGhpcy5sb29wPXZvaWQgMDt0aGlzLmVsZW1lbnQ9bnVsbH1cclxuYS5wcm90b3R5cGUuZ2V0U3JjPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc3JjfTthLnByb3RvdHlwZS5zZXRTaW5rSWQ9ZnVuY3Rpb24oYSl7dGhpcy5zaW5rSWQ9YX07YS5wcm90b3R5cGUuZ2V0TG9vcD1mdW5jdGlvbigpe3JldHVybiEwPT09dGhpcy5sb29wfTthLnByb3RvdHlwZS5zZXRMb29wPWZ1bmN0aW9uKGEpe3RoaXMubG9vcD1hfTthLnByb3RvdHlwZS5wbGF5PWZ1bmN0aW9uKGEpe3RoaXMuZWxlbWVudD1uZXcgZS5BdWRpb0VsZW1lbnQ7dGhpcy5zcmM9YTt0aGlzLmVsZW1lbnQucGxheUV4KHRoaXMuc3JjLHRoaXMuc2lua0lkLHRoaXMubG9vcCl9O2EucHJvdG90eXBlLnBhdXNlPWZ1bmN0aW9uKCl7dGhpcy5lbGVtZW50JiYodGhpcy5lbGVtZW50LnBhdXNlQW5kRGlzcG9zZSgpLHRoaXMuZWxlbWVudD1udWxsKX07YS5wcm90b3R5cGUucmVsZWFzZT1mdW5jdGlvbigpe3RoaXMuZWxlbWVudCYmKHRoaXMuZWxlbWVudC5kaXNwb3NlKCksdGhpcy5lbGVtZW50PW51bGwpfTtcclxucmV0dXJuIGF9KCk7Yj1mdW5jdGlvbigpe2Z1bmN0aW9uIGEoKXt0aGlzLmF1ZGlvSWRNYXA9bnVsbDt0aGlzLmF1ZGlvSWRNYXA9bmV3IE1hcH1hLnByb3RvdHlwZS5nZXROb3RpZmljYXRpb25JbmZvPWZ1bmN0aW9uKGEpe2lmKHRoaXMuYXVkaW9JZE1hcC5oYXMoYSkpcmV0dXJuIHRoaXMuYXVkaW9JZE1hcC5nZXQoYSk7dmFyIGI9bmV3IGg7dGhpcy5hdWRpb0lkTWFwLnNldChhLGIpO3JldHVybiBifTthLnByb3RvdHlwZS5wbGF5Tm90aWZ5QXVkaW89ZnVuY3Rpb24oYSxiKXtiJiYodS5sb2dnZXIubG9nKFwiQXVkaW9Ob3RpZmljYXRpb24ucGxheU5vdGlmeUF1ZGlvLCBSZW1vdGUgdG8gVGhpbiBDbGllbnQgYXVkaW9JZDpcIithK1wiIHNyYzpcIitiKSx0aGlzLmdldE5vdGlmaWNhdGlvbkluZm8oYSkucGxheShiKSl9O2EucHJvdG90eXBlLnBhdXNlTm90aWZ5QXVkaW89ZnVuY3Rpb24oYSxiKXtpZih0aGlzLmF1ZGlvSWRNYXAuaGFzKGEpKXt2YXIgZD10aGlzLmF1ZGlvSWRNYXAuZ2V0KGEpO1xyXG5iJiZiIT1kLmdldFNyYygpJiZ1LmxvZ2dlci5sb2coXCJBdWRpb05vdGlmaWNhdGlvbi5wYXVzZU5vdGlmeUF1ZGlvIHdhcm5pbmc6IGZvciBhdWRpb0lkOlwiK2ErXCIsIGRpZmZlcmVudCBwYXJhbSBzcmM6XCIrYitcIiBmcm9tIG9yZyBzcmM6XCIrZC5nZXRTcmMoKSk7ZC5wYXVzZSgpfWVsc2UgdS5sb2dnZXIubG9nKFwiQXVkaW9Ob3RpZmljYXRpb24ucGF1c2VOb3RpZnlBdWRpbyBubyBhdWRpb0lkOlwiK2ErXCIgc3JjOlwiK2IpfTthLnByb3RvdHlwZS5zZXRTaW5rSWQ9ZnVuY3Rpb24oYSxiKXtpZihudWxsIT1iJiZiLnN0YXJ0c1dpdGgoXCJzcGVha2VyOlwiKSl7dS5sb2dnZXIubG9nKFwiQXVkaW9Ob3RpZmljYXRpb24uc2V0U2lua0lkIGJlZm9yZSBwYXJzaW5nIGF1ZGlvSWQ6XCIrYStcIiBzaW5rSWQ6XCIrYik7dmFyIGQ9Yi5zbGljZSg4KTt1LmxvZ2dlci5sb2coXCJBdWRpb05vdGlmaWNhdGlvbi5zZXRTaW5rSWQgYWZ0ZXIgcGFyc2luZyBhdWRpb0lkOlwiK2ErXCIgc3BlYWtlcnNpbmtJZDpcIitkKTtcclxuYj1kfXRoaXMuZ2V0Tm90aWZpY2F0aW9uSW5mbyhhKS5zZXRTaW5rSWQoYil9O2EucHJvdG90eXBlLmdldExvb3A9ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuZ2V0Tm90aWZpY2F0aW9uSW5mbyhhKS5nZXRMb29wKCl9O2EucHJvdG90eXBlLnNldExvb3A9ZnVuY3Rpb24oYSxiKXt0aGlzLmdldE5vdGlmaWNhdGlvbkluZm8oYSkuc2V0TG9vcChiKX07YS5wcm90b3R5cGUucmVsZWFzZT1mdW5jdGlvbigpe3RoaXMuYXVkaW9JZE1hcC5mb3JFYWNoKGZ1bmN0aW9uKGEsYixkKXthLnJlbGVhc2UoKX0pO3RoaXMuYXVkaW9JZE1hcC5jbGVhcigpfTtyZXR1cm4gYX0oKTthLkU9Yn0sNjEzOmZ1bmN0aW9uKGIsYSxjKXt2YXIgZT10aGlzJiZ0aGlzLl9fZXh0ZW5kc3x8ZnVuY3Rpb24oKXt2YXIgYT1mdW5jdGlvbihiLGQpe2E9T2JqZWN0LnNldFByb3RvdHlwZU9mfHx7X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXkmJmZ1bmN0aW9uKGEsYil7YS5fX3Byb3RvX189Yn18fGZ1bmN0aW9uKGEsXHJcbmIpe2Zvcih2YXIgZCBpbiBiKWIuaGFzT3duUHJvcGVydHkoZCkmJihhW2RdPWJbZF0pfTtyZXR1cm4gYShiLGQpfTtyZXR1cm4gZnVuY3Rpb24oYixkKXtmdW5jdGlvbiBrKCl7dGhpcy5jb25zdHJ1Y3Rvcj1ifWEoYixkKTtiLnByb3RvdHlwZT1udWxsPT09ZD9PYmplY3QuY3JlYXRlKGQpOihrLnByb3RvdHlwZT1kLnByb3RvdHlwZSxuZXcgayl9fSgpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO2EuRTkxMVNlcnZpY2U9dm9pZCAwO3ZhciB1PWMoNTUwKSxoPWMoNjU4KSxkPWMoODUxKTtiPWZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGIoKXt2YXIgZD1hLmNhbGwodGhpcyxudWxsLHUuY2xhc3NfaWRfdC5FOTExU2VydmljZSwwLGguUHJveHlNb2RlLkxvY2FsKXx8dGhpcztkLnByZUU5MTFJbmZvXz1udWxsO3JldHVybiBkfWUoYixhKTtiLnByb3RvdHlwZS5pc1NhbWVJbmZvPWZ1bmN0aW9uKGEpe2lmKG51bGw9PXRoaXMucHJlRTkxMUluZm9fJiZcclxubnVsbCE9YXx8bnVsbCE9dGhpcy5wcmVFOTExSW5mb18mJm51bGw9PWF8fHRoaXMucHJlRTkxMUluZm9fLmU5MTEubGVuZ3RoIT1hLmU5MTEubGVuZ3RofHx0aGlzLnByZUU5MTFJbmZvXy5ic3NpZCE9YS5ic3NpZHx8dGhpcy5wcmVFOTExSW5mb18uaXB2NCE9YS5pcHY0fHx0aGlzLnByZUU5MTFJbmZvXy5zdWJuZXRMZW5ndGhJcHY0IT1hLnN1Ym5ldExlbmd0aElwdjR8fHRoaXMucHJlRTkxMUluZm9fLmlwdjYhPWEuaXB2Nnx8dGhpcy5wcmVFOTExSW5mb18uc3VibmV0TGVuZ3RoSXB2NiE9YS5zdWJuZXRMZW5ndGhJcHY2fHx0aGlzLnByZUU5MTFJbmZvXy5tYWMhPWEubWFjfHwxRS00PD1NYXRoLmFicyh0aGlzLnByZUU5MTFJbmZvXy5sYXRpdHVkZS1hLmxhdGl0dWRlKXx8MUUtNDw9TWF0aC5hYnModGhpcy5wcmVFOTExSW5mb18ubG9uZ2l0dWRlLWEubG9uZ2l0dWRlKSlyZXR1cm4hMTtmb3IodmFyIGs9MDtrPGEuZTkxMS5sZW5ndGg7aysrKWlmKHRoaXMucHJlRTkxMUluZm9fLmU5MTFba10uY2hhc3Npc0lkIT1cclxuYS5lOTExW2tdLmNoYXNzaXNJZHx8dGhpcy5wcmVFOTExSW5mb18uZTkxMVtrXS5wb3J0SWQhPWEuZTkxMVtrXS5wb3J0SWQpcmV0dXJuITE7cmV0dXJuITB9O09iamVjdC5kZWZpbmVQcm9wZXJ0eShiLnByb3RvdHlwZSxcIm9udXBkYXRlXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLm9udXBkYXRlX30sc2V0OmZ1bmN0aW9uKGEpe3ZhciBrPXRoaXM7dGhpcy5vbnVwZGF0ZV89YTt0aGlzLndhaXRVbnRpbENvbm5lY3RlZCh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5vbnVwZGF0ZVwiKS50aGVuKGZ1bmN0aW9uKCl7dmFyIGE9ay5yZWdpc3RlckNhbGxiYWNrcyghMSxrLmlzTnVsbENhbGxiYWNrKGsub251cGRhdGVfKSx1Lm1ldGhvZF9pZF9FOTExU2VydmljZV90Lm9udXBkYXRlKTthLnRoZW4oZnVuY3Rpb24oYSl7YT1hLnBhcmFtczt2YXIgZz1hWzBdO2Euc2xpY2UoMSk7bnVsbCE9PWsucHJlRTkxMUluZm9fJiZrLmlzU2FtZUluZm8oZyl8fChkLmxvZ2dlci5sb2coay51c2VyX2ZyaWVuZGx5X2lkKCkrXHJcblwiLm9udXBkYXRlXCIsSlNPTi5zdHJpbmdpZnkoZykpLGsub251cGRhdGVfJiZrLm9udXBkYXRlXyhnKSxrLnByZUU5MTFJbmZvXz1nKX0pO3JldHVybiBrLnJlbW90ZUludm9rZSghMCx1Lm1ldGhvZF9pZF9FOTExU2VydmljZV90Lm9udXBkYXRlLGEuc3VjY2Vzcyl9KVtcImNhdGNoXCJdKGZ1bmN0aW9uKCl7cmV0dXJuIGQubG9nZ2VyLmxvZyhrLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5vbnVwZGF0ZSwgY291bGQgbm90IHNldCBsaXN0ZW5lclwiKX0pfSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pO2IucHJvdG90eXBlLmdldEU5MTFJbmZvPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcztyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24oayxiKXthLndhaXRVbnRpbENvbm5lY3RlZChhLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5nZXRFOTExSW5mb1wiKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGEucmVtb3RlSW52b2tlKCExLHUubWV0aG9kX2lkX0U5MTFTZXJ2aWNlX3QuZ2V0RTkxMUluZm8pfSkudGhlbihmdW5jdGlvbihiKXtkLmxvZ2dlci5sb2coYS51c2VyX2ZyaWVuZGx5X2lkKCkrXHJcblwiLmdldEU5MTFJbmZvXCIsSlNPTi5zdHJpbmdpZnkoYS5wYXJhbTAoYikpKTtrKGEucGFyYW0wKGIpKX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oKXtkLmxvZ2dlci5sb2coYS51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuZ2V0RTkxMUluZm8gcHJvbWlzZSByZWplY3RlZFwiKTtiKCl9KX0pfTtiLnByb3RvdHlwZS51cGRhdGVFOTExSW5mbz1mdW5jdGlvbigpe3ZhciBhPXRoaXM7dGhpcy5nZXRFOTExSW5mbygpLnRoZW4oZnVuY3Rpb24oYil7cmV0dXJuIGEub251cGRhdGUmJmEub251cGRhdGUoYil9KVtcImNhdGNoXCJdKGZ1bmN0aW9uKCl7cmV0dXJuIGQubG9nZ2VyLmxvZyhcIkZhaWwgdG8gZ2V0IGU5MTEgaW5mb3JtYXRpb24hXCIpfSl9O3JldHVybiBifShoLlByb3h5T2JqZWN0KTthLkU5MTFTZXJ2aWNlPWJ9LDk6ZnVuY3Rpb24oYixhLGMpe3ZhciBlPXRoaXMmJnRoaXMuX19leHRlbmRzfHxmdW5jdGlvbigpe3ZhciBhPWZ1bmN0aW9uKGIsayl7YT1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fHtfX3Byb3RvX186W119aW5zdGFuY2VvZlxyXG5BcnJheSYmZnVuY3Rpb24oYSxiKXthLl9fcHJvdG9fXz1ifXx8ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGcgaW4gYiliLmhhc093blByb3BlcnR5KGcpJiYoYVtnXT1iW2ddKX07cmV0dXJuIGEoYixrKX07cmV0dXJuIGZ1bmN0aW9uKGIsayl7ZnVuY3Rpb24gZCgpe3RoaXMuY29uc3RydWN0b3I9Yn1hKGIsayk7Yi5wcm90b3R5cGU9bnVsbD09PWs/T2JqZWN0LmNyZWF0ZShrKTooZC5wcm90b3R5cGU9ay5wcm90b3R5cGUsbmV3IGQpfX0oKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTthLkVuZ2luZUNvbnRyb2w9YS5WZXJzaW9uVHlwZT12b2lkIDA7dmFyIHU9Yyg1NTApLGg9Yyg5NDYpLGQ9Yyg2NTgpLHc9Yyg4NTEpOyhmdW5jdGlvbihhKXthW2EuV2VicnBjPTBdPVwiV2VicnBjXCI7YVthLldlYnJ0Y0NvZGVjcz0xXT1cIldlYnJ0Y0NvZGVjc1wiO2FbYS5SZWNlaXZlcj0yXT1cIlJlY2VpdmVyXCI7YVthLlZkYT0zXT1cIlZkYVwiO2FbYS5FbmRwb2ludD1cclxuNF09XCJFbmRwb2ludFwiO2FbYS5UeXBlU2NyaXB0PTVdPVwiVHlwZVNjcmlwdFwiO2FbYS5IZHhSdGNFbmdpbmU9Nl09XCJIZHhSdGNFbmdpbmVcIjthW2EuTWF4PTddPVwiTWF4XCJ9KShhLlZlcnNpb25UeXBlfHwoYS5WZXJzaW9uVHlwZT17fSkpO2I9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYihrKXt2YXIgYz1hLmNhbGwodGhpcyxudWxsLHUuY2xhc3NfaWRfdC5FbmdpbmVDb250cm9sLDAsZC5Qcm94eU1vZGUuTG9jYWwpfHx0aGlzO2MuY2xpZW50SW5mb189XCJcIjtjLmNsaWVudEluZm9fPWs7cmV0dXJuIGN9ZShiLGEpO2IucHJvdG90eXBlLmJpbmQ9ZnVuY3Rpb24oKXt3LmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuYmluZCgpIGNhbGxlZC5cIik7dGhpcy5yZWNvbnN0cnVjdG9yKG51bGwsdS5jbGFzc19pZF90LkVuZ2luZUNvbnRyb2wsMCl9O2IucHJvdG90eXBlLnN5bmNCYXJyaWVyPWZ1bmN0aW9uKCl7dmFyIGE9dGhpczt3LmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXHJcblwiLnN5bmNCYXJyaWVyKCkgY2FsbGVkLlwiKTtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24oYixkKXthLnN5bmNCYXJyaWVyRGVlcChiLGQpJiZhLndhaXRVbnRpbENvbm5lY3RlZChcIkVuZ2luZUNvbnRyb2wuc3luY0JhcnJpZXJcIikudGhlbihmdW5jdGlvbigpe3JldHVybiBQcm9taXNlLmFsbChbYS5yZW1vdGVJbnZva2UoITEsdS5tZXRob2RfaWRfRW5naW5lQ29udHJvbF90LnZlcnNpb24se21ham9yOjAsbWlub3I6MCxyZXZpc2lvbjowLGJ1aWxkOjB9KSxhLnJlbW90ZUludm9rZSghMSx1Lm1ldGhvZF9pZF9FbmdpbmVDb250cm9sX3QuZmVhdHVyZV9mbGFncyxbXSldKX0pLnRoZW4oZnVuY3Rpb24oYil7dy5sb2dnZXIubG9nKGEudXNlcl9mcmllbmRseV9pZCgpK1wicmVjZWl2ZWQgd2VicnBjIHZlcnNpb24gYW5kIHN1cHBvcnRlZCBmZWF0dXJlIGxpc3QuXCIpO2I9Yi5tYXAoZnVuY3Rpb24oYil7cmV0dXJuIGEucGFyYW0wKGIpfSk7YS52ZXJzaW9uXz1iWzBdO2EuZmVhdHVyZXNfPVxyXG5iWzFdO2guZ2V0UmVkaXJlY3RvcigpLnNldEZlYXR1cmVzKGEuZmVhdHVyZXNfKTthLnJlbW90ZUludm9rZSghMSx1Lm1ldGhvZF9pZF9FbmdpbmVDb250cm9sX3Quc2V0X2NsaWVudF9pbmZvLChhLmNsaWVudEluZm9ffHxcIlVua25vd25cIikrXCI7IHZkaVNoaW0vXCIrdS5IRFhNU19WRVJTSU9OLGguZ2V0UmVkaXJlY3RvcigpLnNlc3Npb25DbGllbnRJZClbXCJjYXRjaFwiXShmdW5jdGlvbigpe3JldHVybiB3LmxvZ2dlci5sb2coYS51c2VyX2ZyaWVuZGx5X2lkKCkrXCIgY291bGQgbm90IHNldCBjbGllbnQgaW5mb1wiKX0pO2I9W107Zm9yKHZhciBkPTAsdD1hLmZlYXR1cmVzXztkPHQubGVuZ3RoO2QrKyl7dmFyIG09dFtkXTtcIm1zX3RlYW1zX2Rlc2t0b3Bfc2hhcmluZ1wiPT09bS5uYW1lJiZtLnZhbHVlP2IucHVzaChhLnJlbW90ZUludm9rZSghMSx1Lm1ldGhvZF9pZF9FbmdpbmVDb250cm9sX3QudmVyc2lvbl9pbmZvLFtdKSk6XCJtc190ZWFtc19vc2luZm9cIj09PW0ubmFtZSYmbS52YWx1ZT9cclxuYi5wdXNoKGEucmVtb3RlSW52b2tlKCExLHUubWV0aG9kX2lkX0VuZ2luZUNvbnRyb2xfdC5vc2luZm8se2ZhbWlseTpcIlwiLHZlcnNpb246XCJcIixhcmNoaXRlY3R1cmU6XCJcIixkaXN0cm86XCJcIixlZGl0aW9uOlwiXCJ9KSk6XCJtc190ZWFtc19lbmRwb2ludF9pZFwiPT09bS5uYW1lJiZtLnZhbHVlP2IucHVzaChhLnJlbW90ZUludm9rZSghMSx1Lm1ldGhvZF9pZF9FbmdpbmVDb250cm9sX3QuZW5kcG9pbnRfaWQse21hY2hpbmVfaWQ6XCJcIix1c2VyX2lkOlwiXCJ9KSk6XCJtc190ZWFtc19oYXJkd2FyZV9pbmZvXCI9PT1tLm5hbWUmJm0udmFsdWUmJmIucHVzaChhLnJlbW90ZUludm9rZSghMSx1Lm1ldGhvZF9pZF9FbmdpbmVDb250cm9sX3QuaGFyZHdhcmVfaW5mbykpfWlmKDA8Yi5sZW5ndGgpcmV0dXJuIFByb21pc2UuYWxsKGIpfSkudGhlbihmdW5jdGlvbihiKXtpZih2b2lkIDA9PT1iKXcubG9nZ2VyLmxvZyhhLnVzZXJfZnJpZW5kbHlfaWQoKStcInJlbGVhc2UtMTkwNSBjbGllbnQuXCIpO2Vsc2V7dy5sb2dnZXIubG9nKGEudXNlcl9mcmllbmRseV9pZCgpK1xyXG5cInJlbGVhc2UtMTkwNiBvciBsYXRlciBjbGllbnQ6IHJlY2VpdmVkIGRldGFpbGVkIGNsaWVudCB2ZXJzaW9uIGxpc3QuXCIpO2Zvcih2YXIgZD0wO2Q8Yi5sZW5ndGg7ZCsrKXt2YXIgdD1iW2RdO3QuaGRyLnByb2MuaWlkPT11LmNsYXNzX2lkX3QuRW5naW5lQ29udHJvbCYmdC5oZHIucHJvYy5tZXRob2RpZD09dS5tZXRob2RfaWRfRW5naW5lQ29udHJvbF90LnZlcnNpb25faW5mbz9hLnZlcnNpb25zXz1hLnBhcmFtMCh0KTp0Lmhkci5wcm9jLmlpZD09dS5jbGFzc19pZF90LkVuZ2luZUNvbnRyb2wmJnQuaGRyLnByb2MubWV0aG9kaWQ9PXUubWV0aG9kX2lkX0VuZ2luZUNvbnRyb2xfdC5vc2luZm8/YS5vc2luZm9fPWEucGFyYW0wKHQpOnQuaGRyLnByb2MuaWlkPT11LmNsYXNzX2lkX3QuRW5naW5lQ29udHJvbCYmdC5oZHIucHJvYy5tZXRob2RpZD09dS5tZXRob2RfaWRfRW5naW5lQ29udHJvbF90LmVuZHBvaW50X2lkP2EuZW5kcG9pbnRpZF89YS5wYXJhbTAodCk6dC5oZHIucHJvYy5paWQ9PVxyXG51LmNsYXNzX2lkX3QuRW5naW5lQ29udHJvbCYmdC5oZHIucHJvYy5tZXRob2RpZD09dS5tZXRob2RfaWRfRW5naW5lQ29udHJvbF90LmhhcmR3YXJlX2luZm8mJihhLmhhcmR3YXJlaW5mb189YS5wYXJhbTAodCkpfX1hLnN5bmNCYXJyaWVyUmVzb2x2ZShhKX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oYil7Yj1hLmxvZ1JlbW90ZUludm9rZUVycm9yKGIsXCJmYWlsdXJlIHRvIHJldHJpZXZlIHZlcnNpb24vZmVhdHVyZSByZWxhdGVkIGNsaWVudCBpbmZvLlwiKTthLnN5bmNCYXJyaWVyUmVqZWN0KGIpfSl9KX07cmV0dXJuIGJ9KGQuUHJveHlPYmplY3QpO2EuRW5naW5lQ29udHJvbD1ifSwzNjg6ZnVuY3Rpb24oYixhLGMpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO2EuRnJhbWVzPWEuRnJhbWVUcmFja2VyPXZvaWQgMDt2YXIgZT1jKDg1MSksdT1jKDk0NiksaD1jKDY3OSksZD1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihhLGIpe3RoaXMucmVzb2x2ZT1cclxuYTt0aGlzLnJlamVjdD1ifX0oKSx3PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gYSgpe3RoaXMubmFtZT1cIm92ZXJsYXlcIjt0aGlzLnJlcXNfPVtdO3UuZ2V0UmVkaXJlY3RvcigpLmFkZFByb3RvY29sSGFuZGxlcih0aGlzKX1hLnByb3RvdHlwZS5pbml0PWZ1bmN0aW9uKGEpe307YS5wcm90b3R5cGUucmVzZXQ9ZnVuY3Rpb24oKXt0aGlzLnJlcXNfLmZvckVhY2goZnVuY3Rpb24oYSxiKXthLnJlamVjdCgpfSk7dGhpcy5yZXFzXz1bXX07YS5wcm90b3R5cGUub25fbWVzc2FnZT1mdW5jdGlvbihhKXt2YXIgYj10aGlzO2UubG9nZ2VyLmxvZyhcIkhEWE1TOiBPdmVybGF5IDw8PCBcIitKU09OLnN0cmluZ2lmeShhKSk7aWYoXCJjYXBhYmlsaXRpZXNcIj09YS5jb21tYW5kKW5ldyBQcm9taXNlKGZ1bmN0aW9uKGEsayl7Yi5yZXFzXy5wdXNoKG5ldyBkKGEsaykpO3UuZ2V0UmVkaXJlY3RvcigpLldTU2VuZE9iamVjdCh7djpcIm92ZXJsYXlcIixjb21tYW5kOlwiY29uZmlndXJlXCIsY2FwczpbXX0pfSk7ZWxzZXt2YXIgYz1cclxudGhpcy5yZXFzXy5zaGlmdCgpO3ZvaWQgMCE9Yz8xPT1hLnN0YXR1cyYmKFwidHJhY2tfd2luZG93XCI9PWEuY29tbWFuZD9jLnJlc29sdmUoYS53aW5kb3dJZCk6XCJ1bnRyYWNrX3dpbmRvd1wiPT1hLmNvbW1hbmQ/Yy5yZXNvbHZlKGEud2luZG93SGFuZGxlKTpcImNvbmZpZ3VyZVwiPT1hLmNvbW1hbmQ/Yy5yZXNvbHZlKHt9KTpjLnJlamVjdCh7fSkpOmUubG9nZ2VyLmxvZyhcInNwdXJpb3VzIHJlc3BvbnNlIGZvciBtZXNzYWdlOiBcIithLmNvbW1hbmQpfX07YS5wcm90b3R5cGUucmVnaXN0ZXJXaW5kb3dXaXRoU2VydmljZT1mdW5jdGlvbihhKXt2YXIgYj10aGlzO3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihjLGcpe3ZhciBCPXUuZ2V0UmVkaXJlY3RvcigpO2lmKHZvaWQgMD09YSl7ZS5sb2dnZXIubG9nKFwiRnJhbWVUcmFja2VyUHJvdG9jb2wucmVnaXN0ZXJXaW5kb3dXaXRoU2VydmljZTogbGVnYWN5IGNhc2VcIik7dmFyIHQ9d2luZG93LmdldFdpbmRvd0hhbmRsZUFzSGV4LmJpbmQod2luZG93KTtcclxuaWYodm9pZCAwPT09dHx8bnVsbD09PXQpZS5sb2dnZXIubG9nKFwiRnJhbWVUcmFja2VyUHJvdG9jb2wucmVnaXN0ZXJXaW5kb3dXaXRoU2VydmljZTogZ2V0V2luZG93SGFuZGxlIG1ldGhvZCBpcyB1bmRlZmluZWQgb3IgbnVsbFwiKSxnKHt9KTtQcm9taXNlLmFsbChbdCgpLEIuc3RhcnRSZWRpcmVjdGlvbighMSxcInJlZ2lzdGVyV2luZG93V2l0aFNlcnZpY2VcIildKS50aGVuKGZ1bmN0aW9uKGEpe2UubG9nZ2VyLmxvZyhcIkZyYW1lVHJhY2tlci5yZWdpc3RlcldpbmRvd1dpdGhTZXJ2aWNlOiBzZXQgd2luZG93IGhhbmRsZTogXCIrYVswXSk7Qi5XU1NlbmRPYmplY3Qoe3Y6XCJvdmVybGF5XCIsY29tbWFuZDpcIndpbmRvd1wiLHdpbmRvd0hhbmRsZTphWzBdfSk7Yyh2b2lkIDApfSl9ZWxzZSBlLmxvZ2dlci5sb2coXCJGcmFtZVRyYWNrZXJQcm90b2NvbC5yZWdpc3RlcldpbmRvd1dpdGhTZXJ2aWNlOiBuZXcgTVcgY2FzZVwiKSxCLnN0YXJ0UmVkaXJlY3Rpb24oITEsXCJyZWdpc3RlcldpbmRvd1dpdGhTZXJ2aWNlXCIpLnRoZW4oZnVuY3Rpb24oKXtiLnJlcXNfLnB1c2gobmV3IGQoYyxcclxuZykpO0IuV1NTZW5kT2JqZWN0KHt2Olwib3ZlcmxheVwiLGNvbW1hbmQ6XCJ0cmFja193aW5kb3dcIix3aW5kb3dIYW5kbGU6YX0pfSl9KX07YS5wcm90b3R5cGUudW5yZWdpc3RlcldpbmRvd1dpdGhTZXJ2aWNlPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXM7ZS5sb2dnZXIubG9nKFwiRnJhbWVUcmFja2VyUHJvdG9jb2wudW5yZWdpc3RlcldpbmRvd1dpdGhTZXJ2aWNlKGhhbmRsZTogXCIrYStcIilcIik7cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKGMsZyl7dm9pZCAwPT1hP2coe30pOihiLnJlcXNfLnB1c2gobmV3IGQoYyxnKSksdS5nZXRSZWRpcmVjdG9yKCkuV1NTZW5kT2JqZWN0KHt2Olwib3ZlcmxheVwiLGNvbW1hbmQ6XCJ1bnRyYWNrX3dpbmRvd1wiLHdpbmRvd0hhbmRsZTphfSkpfSl9O3JldHVybiBhfSgpLHE9ZnVuY3Rpb24oKXtmdW5jdGlvbiBhKGIpe3ZhciBkPXRoaXM7dGhpcy5ydW5uaW5nXz0hMTt0aGlzLmVsZW1lbnRzXz1bXTt0aGlzLmNsaXBSZWN0cz1uZXcgU2V0O3RoaXMudmlkZW9zXz1cclxuW107dGhpcy5jb25uZWN0ZWRfPSExO3RoaXMueUNsaWVudEFyZWFPZmZzZXRfPXRoaXMueENsaWVudEFyZWFPZmZzZXRfPTA7dGhpcy53aGVlbEV2ZW50SGFuZGxlcj1mdW5jdGlvbihhKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7ZC51cGRhdGVBbGwoKX0sMTApfTt0aGlzLnNjcm9sbEV2ZW50SGFuZGxlcj1mdW5jdGlvbihhKXtkLnVwZGF0ZUFsbCgpfTt0aGlzLmtleXVwRXZlbnRIYW5kbGVyPWZ1bmN0aW9uKGEpe1wiVGFiXCIhPWEuY29kZSYmXCJBcnJvd1VwXCIhPWEuY29kZSYmXCJBcnJvd0Rvd25cIiE9YS5jb2RlJiZcIkFycm93TGVmdFwiIT1hLmNvZGUmJlwiQXJyb3dSaWdodFwiIT1hLmNvZGUmJlwiUGFnZVVwXCIhPWEuY29kZSYmXCJQYWdlRG93blwiIT1hLmNvZGUmJlwiSG9tZVwiIT1hLmNvZGUmJlwiRW5kXCIhPWEuY29kZXx8ZC51cGRhdGVBbGwoKX07dGhpcy5yZXNpemVFdmVudEhhbmRsZXI9ZnVuY3Rpb24oYSl7ZS5sb2dnZXIubG9nKFwib25XaW5kb3dSZXNpemUuLi4gdXBkYXRlIHZpZGVvIGVsZW1lbnRzIHBvc2l0aW9uXCIpO1xyXG5kLnVwZGF0ZUFsbCgpfTtlLmxvZ2dlci5sb2coXCJGcmFtZVRyYWNrZXIuY29uc3RydWN0b3I6IChoYW5kbGU6IFwiK2IrXCIpXCIpO3RoaXMuaGFuZGxlXz1iO3RoaXMuY29ubmVjdFRvU2VydmljZSgpO3RoaXMub2JzZXJ2ZXJfPW5ldyBNdXRhdGlvbk9ic2VydmVyKGZ1bmN0aW9uKGEpe2QudXBkYXRlQWxsKCl9KX1hLnByb3RvdHlwZS5jb25uZWN0VG9TZXJ2aWNlPWZ1bmN0aW9uKCl7dmFyIGI9dGhpczthLlByb3RvY29sLnJlZ2lzdGVyV2luZG93V2l0aFNlcnZpY2UodGhpcy5oYW5kbGVfKS50aGVuKGZ1bmN0aW9uKGEpe2UubG9nZ2VyLmxvZyhcIkZyYW1lVHJhY2tlcjogY29ubmVjdGVkIHRvIHNlcnZpY2UuICh3aW5kb3dJZD1cIithK1wiKVwiKTtiLmNvbm5lY3RlZF89ITA7Yi53aW5kb3dJZF89YTtiLnZpZGVvc18uZm9yRWFjaChmdW5jdGlvbihhKXthLnNpbmtJZD1KU09OLnN0cmluZ2lmeShiLndpbmRvd0lkXyl9KTtiLnZpZGVvc189W119KX07T2JqZWN0LmRlZmluZVByb3BlcnR5KGEucHJvdG90eXBlLFxyXG5cImhhbmRsZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5oYW5kbGVffSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pO2EucHJvdG90eXBlLmdldFdpbmRvd0Zyb21FbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVybiBhLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXd9O2EucHJvdG90eXBlLnJlY3RhbmdsZXNJbnRlcnNlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYS54PGIueCtiLndpZHRoJiZhLngrYS53aWR0aD5iLngmJmEueTxiLnkrYi5oZWlnaHQmJmEueSthLmhlaWdodD5iLnk/ITA6ITF9O2EucHJvdG90eXBlLmludGVyc2VjdGluZ1JlY3Q9ZnVuY3Rpb24oYSxiKXt2YXIgZD1NYXRoLm1heChhLmxlZnQsYi5sZWZ0KSxnPU1hdGgubWF4KGEudG9wLGIudG9wKTtyZXR1cm4gbmV3IERPTVJlY3QoZCxnLE1hdGgubWluKGEucmlnaHQsYi5yaWdodCktZCxNYXRoLm1pbihhLmJvdHRvbSxiLmJvdHRvbSktZyl9O2EucHJvdG90eXBlLnBlZGlncmVlQ291bnQ9ZnVuY3Rpb24oYSxcclxuYil7Zm9yKHZhciBkPTAsZz1hLnBhcmVudEVsZW1lbnQ7bnVsbCE9ZyYmZyE9YjspZCsrLGc9Zy5wYXJlbnRFbGVtZW50O3JldHVybntpc0FuY2VzdG9yOm51bGwhPWcscGVkaWdyZWU6ZH19O2EucHJvdG90eXBlLnNlbGVjdFRvcG1vc3Q9ZnVuY3Rpb24oYSxiKXt2YXIgZD10aGlzLmdldEJvdW5kaW5nQ2xpZW50UmVjdChhKSxnPXRoaXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGIpLGQ9dGhpcy5pbnRlcnNlY3RpbmdSZWN0KGQsZyksZz1hLm93bmVyRG9jdW1lbnQuZWxlbWVudEZyb21Qb2ludChkLmxlZnQrZC53aWR0aC8yLGQudG9wK2QuaGVpZ2h0LzIpO2lmKGc9PWEpcmV0dXJuIGE7aWYoZz09YilyZXR1cm4gYjtkPXRoaXMucGVkaWdyZWVDb3VudChhLGcpO2c9dGhpcy5wZWRpZ3JlZUNvdW50KGIsZyk7aWYoZC5pc0FuY2VzdG9yJiZnLmlzQW5jZXN0b3Ipe2lmKGQucGVkaWdyZWU8Zy5wZWRpZ3JlZSlyZXR1cm4gYTtpZihnLnBlZGlncmVlPGQucGVkaWdyZWUpcmV0dXJuIGJ9ZWxzZXtpZihkLmlzQW5jZXN0b3IpcmV0dXJuIGE7XHJcbmlmKGcuaXNBbmNlc3RvcilyZXR1cm4gYn19O2EucHJvdG90eXBlLmNoZWNrT3ZlcmxhcHBpbmdWaWRlb3M9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcyxkPXRoaXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGEudGFyZ2V0KTthLm92ZXJsYXBzLmZvckVhY2goZnVuY3Rpb24oYil7YS50YXJnZXQucmVtb3RlVmlkZW9FbGVtZW50LnJlbW92ZUNsaXBSZWN0KGIucmVjdCl9KTthLm92ZXJsYXBzPVtdO3RoaXMuZWxlbWVudHNfLmZvckVhY2goZnVuY3Rpb24oZyl7aWYoZyE9YSl7dmFyIGM9Zy5vdmVybGFwcy5tYXAoZnVuY3Rpb24oYSl7cmV0dXJuIGEuZWxlbWVudH0pLmluZGV4T2YoYS50YXJnZXQpOy0xIT1jJiYoYz1nLm92ZXJsYXBzLnNwbGljZShjLDEpWzBdLGcudGFyZ2V0LnJlbW90ZVZpZGVvRWxlbWVudC5yZW1vdmVDbGlwUmVjdChjLnJlY3QpKTtjPWIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGcudGFyZ2V0KTtpZihiLnJlY3RhbmdsZXNJbnRlcnNlY3QoZCxjKSl7dmFyIHQ9Yi5zZWxlY3RUb3Btb3N0KGEudGFyZ2V0LFxyXG5nLnRhcmdldCk7dD09YS50YXJnZXQ/KGcub3ZlcmxhcHMucHVzaCh7ZWxlbWVudDphLnRhcmdldCxyZWN0OmR9KSxnLnRhcmdldC5yZW1vdGVWaWRlb0VsZW1lbnQuYWRkQ2xpcFJlY3QoZCkpOnQ9PWcudGFyZ2V0JiYoYS5vdmVybGFwcy5wdXNoKHtlbGVtZW50OmcudGFyZ2V0LHJlY3Q6Y30pLGEudGFyZ2V0LnJlbW90ZVZpZGVvRWxlbWVudC5hZGRDbGlwUmVjdChjKSl9fX0pfTthLnByb3RvdHlwZS51cGRhdGVBbGw9ZnVuY3Rpb24oKXt2YXIgYT10aGlzO3RoaXMuZWxlbWVudHNfLmZvckVhY2goZnVuY3Rpb24oYil7dmFyIGQ9YS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoYi50YXJnZXQpO2lmKHZvaWQgMCE9PWQpe3ZhciBnPWIuY2xpZW50UmVjdDtpZih2b2lkIDA9PT1nfHxnLnghPT1kLnh8fGcueSE9PWQueXx8Zy53aWR0aCE9PWQud2lkdGh8fGcuaGVpZ2h0IT09ZC5oZWlnaHQpYi5jbGllbnRSZWN0PWQsYi5jYWxsYmFjayhkKSxhLmNoZWNrT3ZlcmxhcHBpbmdWaWRlb3MoYil9fSl9O1xyXG5hLnByb3RvdHlwZS50cmFjaz1mdW5jdGlvbihhLGIpe3ZhciBkPXRoaXMsZz10aGlzLmdldEJvdW5kaW5nQ2xpZW50UmVjdChhKTtlLmxvZ2dlci5sb2coXCJUcmFjayAoaGFuZGxlOiBcIit0aGlzLmhhbmRsZV8rXCIpIGVsZW1lbnQgZnJhbWVcIixhLEpTT04uc3RyaW5naWZ5KGcpKTtjb25zb2xlLmxvZyhhKTt0aGlzLmVsZW1lbnRzXy5wdXNoKHt0YXJnZXQ6YSxjbGllbnRSZWN0OnZvaWQgMCxjYWxsYmFjazpiLG92ZXJsYXBzOltdfSk7dHJ5e2UubG9nZ2VyLmxvZyhcIltIZHhXZWJSVEMuanNdIEluaXRpYWxpemluZyBvY2NsdXNpb24gZm9yIG5ldyB2aWRlb0VsZW1lbnRcIiksdGhpcy5jbGlwUmVjdHMuZm9yRWFjaChmdW5jdGlvbihiKXtkLmFwcGx5T2NjbHVzaW9uKGEsSlNPTi5wYXJzZShiKSl9KX1jYXRjaChjKXtlLmxvZ2dlci5sb2coXCJbSGR4V2ViUlRDLmpzXSBhZGRPY2NsdXNpb25Jbml0IGZhaWxlZCEgXCIrYyl9dGhpcy5ydW5uaW5nX3x8KGUubG9nZ2VyLmxvZyhcIlN0YXJ0IEZyYW1lVHJhY2tlciBvYnNlcnZlci4uLlwiKSxcclxudGhpcy5vYnNlcnZlcl8ub2JzZXJ2ZShhLm93bmVyRG9jdW1lbnQuYm9keSx7YXR0cmlidXRlczohMCxjaGlsZExpc3Q6ITAsc3VidHJlZTohMH0pLGc9dGhpcy5nZXRXaW5kb3dGcm9tRWxlbWVudChhKSxnLmFkZEV2ZW50TGlzdGVuZXIoXCJ3aGVlbFwiLHRoaXMud2hlZWxFdmVudEhhbmRsZXIpLGcuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLHRoaXMuc2Nyb2xsRXZlbnRIYW5kbGVyKSxnLmFkZEV2ZW50TGlzdGVuZXIoXCJrZXl1cFwiLHRoaXMua2V5dXBFdmVudEhhbmRsZXIpLGcuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLHRoaXMucmVzaXplRXZlbnRIYW5kbGVyKSx0aGlzLnJ1bm5pbmdfPSEwKTt0aGlzLnVwZGF0ZUFsbCgpfTthLnByb3RvdHlwZS51bnRyYWNrPWZ1bmN0aW9uKGEpe2UubG9nZ2VyLmxvZyhcIlVudHJhY2sgKGhhbmRsZTogXCIrdGhpcy5oYW5kbGVfK1wiKSBlbGVtZW50IGZyYW1lXCIsYSk7dmFyIGI9LTE7dGhpcy5lbGVtZW50c18uZm9yRWFjaChmdW5jdGlvbihnLFxyXG5kKXtnLnRhcmdldD09PWEmJihiPWQpfSk7aWYoMDw9YiYmKHRoaXMuZWxlbWVudHNfLnNwbGljZShiLDEpLDA9PT10aGlzLmVsZW1lbnRzXy5sZW5ndGgpKXtlLmxvZ2dlci5sb2coXCJTdG9wIEZyYW1lVHJhY2tlciBvYnNlcnZlci4uLlwiKTt0aGlzLm9ic2VydmVyXy5kaXNjb25uZWN0KCk7dmFyIGQ9dGhpcy5nZXRXaW5kb3dGcm9tRWxlbWVudChhKTtkLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ3aGVlbFwiLHRoaXMud2hlZWxFdmVudEhhbmRsZXIpO2QucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLHRoaXMuc2Nyb2xsRXZlbnRIYW5kbGVyKTtkLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXl1cFwiLHRoaXMua2V5dXBFdmVudEhhbmRsZXIpO2QucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLHRoaXMucmVzaXplRXZlbnRIYW5kbGVyKTt0aGlzLnJ1bm5pbmdfPSExfX07YS5wcm90b3R5cGUuYXBwbHlPY2NsdXNpb249ZnVuY3Rpb24oYSxiKXt2YXIgZD10aGlzLmdldEJvdW5kaW5nQ2xpZW50UmVjdChhKTtcclxudGhpcy5yZWN0YW5nbGVzSW50ZXJzZWN0KGIsZCkmJnZvaWQgMCE9PWEucmVtb3RlVmlkZW9FbGVtZW50JiZhLnJlbW90ZVZpZGVvRWxlbWVudC5hZGRDbGlwUmVjdChiKX07YS5wcm90b3R5cGUuYWRkT2NjbHVzaW9uPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXM7ZS5sb2dnZXIubG9nKFwiW0hkeFdlYlJUQy5qc10gQWRkaW5nIG9jY2x1c2lvbiBcIitKU09OLnN0cmluZ2lmeShhKSk7ZS5sb2dnZXIubG9nKFwiW0hkeFdlYlJUQy5qc10gVHJhY2tpbmcgJ1wiK3RoaXMuZWxlbWVudHNfLmxlbmd0aCtcIicgZWxlbWVudHMuXCIpO3RoaXMuY2xpcFJlY3RzLmFkZChKU09OLnN0cmluZ2lmeShhKSk7dGhpcy5lbGVtZW50c18uZm9yRWFjaChmdW5jdGlvbihkKXtiLmFwcGx5T2NjbHVzaW9uKGQudGFyZ2V0LGEpfSl9O2EucHJvdG90eXBlLnJlbW92ZU9jY2x1c2lvbj1mdW5jdGlvbihhKXtlLmxvZ2dlci5sb2coXCJbSGR4V2ViUlRDLmpzXSBSZW1vdmluZyBvY2NsdXNpb24gXCIrSlNPTi5zdHJpbmdpZnkoYSkpO1xyXG5lLmxvZ2dlci5sb2coXCJbSGR4V2ViUlRDLmpzXSBUcmFja2luZyAnXCIrdGhpcy5lbGVtZW50c18ubGVuZ3RoK1wiJyBlbGVtZW50cy5cIik7dGhpcy5jbGlwUmVjdHNbXCJkZWxldGVcIl0oSlNPTi5zdHJpbmdpZnkoYSkpO3RoaXMuZWxlbWVudHNfLmZvckVhY2goZnVuY3Rpb24oYil7dm9pZCAwIT09Yi50YXJnZXQucmVtb3RlVmlkZW9FbGVtZW50JiZiLnRhcmdldC5yZW1vdGVWaWRlb0VsZW1lbnQucmVtb3ZlQ2xpcFJlY3QoYSl9KX07YS5wcm90b3R5cGUuc2V0Q2xpZW50QXJlYU9mZnNldD1mdW5jdGlvbihhLGIpe3RoaXMueENsaWVudEFyZWFPZmZzZXRfPWE7dGhpcy55Q2xpZW50QXJlYU9mZnNldF89Yn07YS5wcm90b3R5cGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0PWZ1bmN0aW9uKGEpe2E9YS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTthLngrPXRoaXMueENsaWVudEFyZWFPZmZzZXRfO2EueSs9dGhpcy55Q2xpZW50QXJlYU9mZnNldF87cmV0dXJuIGF9O2EucHJvdG90eXBlLm5ld1ZpZGVvRWxlbWVudD1cclxuZnVuY3Rpb24oYil7dmFyIGQ9dGhpcztlLmxvZ2dlci5sb2coXCJGcmFtZVRyYWNrZXIubmV3VmlkZW9FbGVtZW50OiAoaWQ6IFwiK2IuaWQrXCIpXCIpO2lmKHZvaWQgMCE9PWIucmVtb3RlVmlkZW9FbGVtZW50KWUubG9nZ2VyLmxvZyhcIlZpZGVvIGVsZW1lbnQgaXMgYWxyZWFkeSBjb25maWd1cmVkISEhXCIpO2Vsc2V7Yi5pZHx8KGIuaWQ9XCJjdHgtdmlkLVwiK2EudmlkZW9FbGVtZW50SURzKyspO3ZhciBjPW5ldyBoLlZpZGVvRWxlbWVudChiLmlkLHRoaXMuZ2V0V2luZG93RnJvbUVsZW1lbnQoYikpO3RoaXMuY29ubmVjdGVkXz8oZS5sb2dnZXIubG9nKFwiRnJhbWVUcmFja2VyLm5ld1ZpZGVvRWxlbWVudDogaW5pdGlhbGl6aW5nIHZpZGVvIGVsZW1lbnQgd2l0aCBzaW5rIGlkIFwiK3RoaXMud2luZG93SWRfKSxjLnNpbmtJZD1KU09OLnN0cmluZ2lmeSh0aGlzLndpbmRvd0lkXykpOihlLmxvZ2dlci5sb2coXCJGcmFtZVRyYWNrZXIubmV3VmlkZW9FbGVtZW50OiB2aWRlbyBlbGVtZW50IGF3YWl0aW5nIHN0YWJsZSB3aW5kb3cgc3RhdGVcIiksXHJcbnRoaXMudmlkZW9zXy5wdXNoKGMpKTtjLm9ubG9hZGVkbWV0YWRhdGE9ZnVuY3Rpb24oKXtiLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KFwibG9hZGVkbWV0YWRhdGFcIikpfTtjLm9udGltZXVwZGF0ZT1mdW5jdGlvbigpe2IuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoXCJ0aW1ldXBkYXRlXCIpKX07Yy5vbmNvbm5lY3Rpb25zdGF0ZWNoYW5nZT1mdW5jdGlvbigpe1wiY29ubmVjdGVkXCI9PWMuY29ubmVjdGlvblN0YXRlP2QudHJhY2soYixmdW5jdGlvbihhKXtjLnNldEZyYW1lKGEpfSk6ZC51bnRyYWNrKGIpfTtkZWxldGUgYi5yZW1vdGVWaWRlb0VsZW1lbnQ7T2JqZWN0LmRlZmluZVByb3BlcnR5KGIsXCJyZW1vdGVWaWRlb0VsZW1lbnRcIix7d3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwLHZhbHVlOm51bGx9KTtiLnJlbW90ZVZpZGVvRWxlbWVudD1jO2RlbGV0ZSBiLnNyY09iamVjdDtPYmplY3QuZGVmaW5lUHJvcGVydHkoYixcInNyY09iamVjdFwiLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGMuc3JjT2JqZWN0fSxcclxuc2V0OmZ1bmN0aW9uKGEpe2UubG9nZ2VyLmxvZyhcIlZESSBTaGltIHNldCB2aWRlbyBlbGVtZW50IHNyY09iamVjdCBcIithKTtjLnNyY09iamVjdD1hfX0pO2RlbGV0ZSBiLnZpZGVvV2lkdGg7T2JqZWN0LmRlZmluZVByb3BlcnR5KGIsXCJ2aWRlb1dpZHRoXCIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gYy52aWRlb1dpZHRofX0pO2RlbGV0ZSBiLnZpZGVvSGVpZ2h0O09iamVjdC5kZWZpbmVQcm9wZXJ0eShiLFwidmlkZW9IZWlnaHRcIix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBjLnZpZGVvSGVpZ2h0fX0pfX07YS5wcm90b3R5cGUuZGlzcG9zZVZpZGVvRWxlbWVudD1mdW5jdGlvbihhKXtlLmxvZ2dlci5sb2coXCJGcmFtZVRyYWNrZXIuZGlzcG9zZVZpZGVvRWxlbWVudDogKGlkOiBcIithLmlkK1wiKVwiKTt2YXIgYj1hLnJlbW90ZVZpZGVvRWxlbWVudDtpZih2b2lkIDAhPWIpe3ZhciBkPXRoaXMudmlkZW9zXy5maW5kSW5kZXgoZnVuY3Rpb24oYSl7cmV0dXJuIGEuSWQ9PVxyXG5iLklkfSk7LTE8ZCYmdGhpcy52aWRlb3NfLnNwbGljZShkLDEpO2IuZGlzcG9zZSgpO2EucmVtb3RlVmlkZW9FbGVtZW50PXZvaWQgMH19O2EudmlkZW9FbGVtZW50SURzPTA7YS5Qcm90b2NvbD1uZXcgdztyZXR1cm4gYX0oKTthLkZyYW1lVHJhY2tlcj1xO2I9ZnVuY3Rpb24oKXtmdW5jdGlvbiBhKGIpe3RoaXMuZnJhbWVzXz1bXTtiJiZ0aGlzLmZyYW1lc18ucHVzaChuZXcgcSh2b2lkIDApKX1hLnByb3RvdHlwZS5uZXdGcmFtZT1mdW5jdGlvbihhKXtlLmxvZ2dlci5sb2coXCJGcmFtZXMubmV3RnJhbWU6IChoYW5kbGU6IFwiK2ErXCIpXCIpO3ZhciBiPXRoaXMuZmluZEZyYW1lKGEpO3ZvaWQgMD09YiYmKGI9bmV3IHEoYSksdGhpcy5mcmFtZXNfLnB1c2goYikpO3JldHVybiBifTthLnByb3RvdHlwZS5kaXNwb3NlRnJhbWU9ZnVuY3Rpb24oYSl7ZS5sb2dnZXIubG9nKFwiRnJhbWVzLmRpc3Bvc2VGcmFtZTogKGhhbmRsZTogXCIrYStcIilcIik7dmFyIGI9dGhpcy5mcmFtZXNfLmZpbmRJbmRleChmdW5jdGlvbihiKXtyZXR1cm4gYi5oYW5kbGU9PVxyXG5hfSk7LTE8YiYmKHEuUHJvdG9jb2wudW5yZWdpc3RlcldpbmRvd1dpdGhTZXJ2aWNlKGEpLnRoZW4oZnVuY3Rpb24oYSl7ZS5sb2dnZXIubG9nKFwiVW50cmFjayB3aW5kb3cgKGhhbmRsZTogXCIrYStcIikgc3VjY2Vzc2Z1bFwiKX0pLHRoaXMuZnJhbWVzXy5zcGxpY2UoYiwxKSl9O2EucHJvdG90eXBlLmZpbmRGcmFtZT1mdW5jdGlvbihhKXtlLmxvZ2dlci5sb2coXCJGcmFtZXMuZmluZEZyYW1lOiAoaGFuZGxlOiBcIithK1wiKVwiKTtyZXR1cm4gdm9pZCAwIT1hP3RoaXMuZnJhbWVzXy5maW5kKGZ1bmN0aW9uKGIpe3JldHVybiBiLmhhbmRsZT09YX0pOnRoaXMuZnJhbWVzX1swXX07YS5wcm90b3R5cGUucmVjb25uZWN0PWZ1bmN0aW9uKCl7ZS5sb2dnZXIubG9nKFwiRnJhbWVzLnJlY29ubmVjdCgpXCIpO3RoaXMuZnJhbWVzXy5mb3JFYWNoKGZ1bmN0aW9uKGEpe2EuY29ubmVjdFRvU2VydmljZSgpfSl9O3JldHVybiBhfSgpO2EuRnJhbWVzPWJ9LDI0NzpmdW5jdGlvbihiLGEpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLFxyXG5cIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTthLmdldEdDPWEuR0M9dm9pZCAwO3ZhciBjPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gYShiKXt0aGlzLnBhcmVudF89dGhpcy5vYmplY3RfPW51bGw7dGhpcy5jaGlsZHJlbl89W107dGhpcy5vYmplY3RfPWJ9YS5wcm90b3R5cGUuYWRkQ2hpbGQ9ZnVuY3Rpb24oYSl7YS5wYXJlbnRfIT10aGlzJiYoYS5wYXJlbnRfPXRoaXMsdGhpcy5jaGlsZHJlbl8ucHVzaChhKSl9O2EucHJvdG90eXBlLnJlbW92ZUNoaWxkPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuY2hpbGRyZW5fLmluZGV4T2YoYSk7dGhpcy5jaGlsZHJlbl8uc3BsaWNlKGIsMSk7YS5wYXJlbnRfPW51bGx9O3JldHVybiBhfSgpLGU9ZnVuY3Rpb24oKXtmdW5jdGlvbiBhKCl7dGhpcy5yb290Xz1uZXcgYyhudWxsKX1hLnByb3RvdHlwZS50cmFja09iamVjdD1mdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPW51bGwpO2lmKG51bGw9PT10aGlzLmZpbmROb2RlKGEsdGhpcy5yb290Xykpe3ZhciBlPVxyXG50aGlzLmZpbmROb2RlKGIsdGhpcy5yb290XyksaD1uZXcgYyhhKTtlP2UuYWRkQ2hpbGQoaCk6dGhpcy5yb290Xy5hZGRDaGlsZChoKX19O2EucHJvdG90eXBlLnJlbGVhc2VPYmplY3Q9ZnVuY3Rpb24oYSl7YT10aGlzLmZpbmROb2RlKGEsdGhpcy5yb290Xyk7aWYobnVsbD09PWF8fGE9PT10aGlzLnJvb3RfKXJldHVybiExO3RoaXMuZGVzdHJveU5vZGVPYmplY3RSZWN1cnNlKGEpO2EucGFyZW50Xy5yZW1vdmVDaGlsZChhKTtyZXR1cm4hMH07YS5wcm90b3R5cGUuZGVzdHJveU5vZGVPYmplY3RSZWN1cnNlPWZ1bmN0aW9uKGEpe2Zvcih2YXIgYj0wLGM9YS5jaGlsZHJlbl87YjxjLmxlbmd0aDtiKyspdGhpcy5kZXN0cm95Tm9kZU9iamVjdFJlY3Vyc2UoY1tiXSk7YS5vYmplY3RfLmRlc3Ryb3koKX07YS5wcm90b3R5cGUuc2V0UGFyZW50PWZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcy5maW5kTm9kZShhLHRoaXMucm9vdF8pO2lmKG51bGw9PT1jKXJldHVybiExO3ZhciBlPXRoaXMuZmluZE5vZGUoYixcclxudGhpcy5yb290Xyk7aWYobnVsbD09PWUpcmV0dXJuITE7aWYoYy5wYXJlbnRfPT09ZSlyZXR1cm4hMDtjLnBhcmVudF8ucmVtb3ZlQ2hpbGQoYyk7ZS5hZGRDaGlsZChjKTtyZXR1cm4hMH07YS5wcm90b3R5cGUucmVzZXQ9ZnVuY3Rpb24oKXt0aGlzLnJvb3RfLmNoaWxkcmVuXz1bXX07YS5wcm90b3R5cGUuZmluZE5vZGU9ZnVuY3Rpb24oYSxiKXtpZihiLm9iamVjdF89PT1hKXJldHVybiBiO2Zvcih2YXIgYz1udWxsLGU9MCxrPWIuY2hpbGRyZW5fO2U8ay5sZW5ndGgmJihjPXRoaXMuZmluZE5vZGUoYSxrW2VdKSxudWxsPT09Yyk7ZSsrKTtyZXR1cm4gY307cmV0dXJuIGF9KCk7YS5HQz1lO3ZhciB1PW5ldyBlO2EuZ2V0R0M9ZnVuY3Rpb24oKXtyZXR1cm4gdX19LDk0NjpmdW5jdGlvbihiLGEsYyl7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7YS5nZXRSZWRpcmVjdG9yPWEuSGR4TWVkaWFTdHJlYW09YS5SZWRpcmVjdGlvblN0YXR1cz1cclxuYS5XZWJycGNTdGF0dXNDb2RlPXZvaWQgMDt2YXIgZT1jKDY1OCksdT1jKDg1MSksaD1jKDU1MCksZD1jKDU0NSksdz1jKDM5NCkscT1jKDY5MSksbj1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihhLGIsZCxtLGMsayx4LHIpe3ZvaWQgMD09PXImJihyPXZvaWQgMCk7dGhpcy5yZXNvbHZlPWE7dGhpcy5yZWplY3Q9Yjt0aGlzLmlpZD1kO3RoaXMub2lkPW07dGhpcy5jYmlkPWM7dGhpcy5vbmVTaG90PWs7dGhpcy5taWQ9eDt0aGlzLmNvbXBsZXRpb25fY2I9cn19KCksazsoZnVuY3Rpb24oYSl7YVthLnJwY19zdGF0dXNfc3VjY2Vzcz0wXT1cInJwY19zdGF0dXNfc3VjY2Vzc1wiO2FbYS5ycGNfc3RhdHVzX3Vuc3BlY2lmaWVkX2Vycm9yPTFdPVwicnBjX3N0YXR1c191bnNwZWNpZmllZF9lcnJvclwiO2FbYS5ycGNfc3RhdHVzX3VuZXhwZWN0ZWQ9Ml09XCJycGNfc3RhdHVzX3VuZXhwZWN0ZWRcIjthW2EucnBjX3N0YXR1c19pbmRleF9vdXRfb2ZfYm91bmRzPTNdPVwicnBjX3N0YXR1c19pbmRleF9vdXRfb2ZfYm91bmRzXCI7XHJcbmFbYS5ycGNfc3RhdHVzX21pc3NpbmdfcGFyYW1ldGVyPTRdPVwicnBjX3N0YXR1c19taXNzaW5nX3BhcmFtZXRlclwiO2FbYS5ycGNfc3RhdHVzX21pc3NpbmdfcmV0dXJuX3ZhbHVlPTVdPVwicnBjX3N0YXR1c19taXNzaW5nX3JldHVybl92YWx1ZVwiO2FbYS5ycGNfc3RhdHVzX2ludmFsaWRfb2JqZWN0PTZdPVwicnBjX3N0YXR1c19pbnZhbGlkX29iamVjdFwiO2FbYS5ycGNfc3RhdHVzX3VzZXJfZXhjZXB0aW9uPTddPVwicnBjX3N0YXR1c191c2VyX2V4Y2VwdGlvblwiO2FbYS5ycGNfc3RhdHVzX3N5c3RlbV9lcnJvcj04XT1cInJwY19zdGF0dXNfc3lzdGVtX2Vycm9yXCJ9KShrPWEuV2VicnBjU3RhdHVzQ29kZXx8KGEuV2VicnBjU3RhdHVzQ29kZT17fSkpO3ZhciB2OyhmdW5jdGlvbihhKXthW2EuTm90UmVkaXJlY3RlZD0wXT1cIk5vdFJlZGlyZWN0ZWRcIjthW2EuQ29ubmVjdGluZz0xXT1cIkNvbm5lY3RpbmdcIjthW2EuQmluZGluZz0yXT1cIkJpbmRpbmdcIjthW2EuUmVkaXJlY3RlZD0zXT1cIlJlZGlyZWN0ZWRcIn0pKHY9XHJcbmEuUmVkaXJlY3Rpb25TdGF0dXN8fChhLlJlZGlyZWN0aW9uU3RhdHVzPXt9KSk7Yj1mdW5jdGlvbigpe2Z1bmN0aW9uIGEoKXt0aGlzLnNlc3Npb25JZF89XCJcIjt0aGlzLmhhbmRsZXJzXz1bXTt0aGlzLnBpbmdhY3RpdmU9ITE7dGhpcy5zdGF0dXM9di5Ob3RSZWRpcmVjdGVkO3RoaXMucmVxcz1bXTt0aGlzLmNicz1bXTt0aGlzLmRlZmVycmVkQWN0aW9ucz1bXTt0aGlzLnRlbGVtZXRyeV89bmV3IHcuVGVsZW1ldHJ5O3RoaXMuc2NyZWVuc2hhcmVfPW5ldyBxLlNjcmVlblNoYXJlVXRpbDt0aGlzLnN0YXRlQ2hhbmdlTm90aWZjYXRpb25zPVtdO3RoaXMudmRhZmVhdHVyZXNfPVtdfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShhLnByb3RvdHlwZSxcInRlbGVtZXRyeVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50ZWxlbWV0cnlffSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLnByb3RvdHlwZSxcInNjcmVlbnNoYXJlXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnNjcmVlbnNoYXJlX30sXHJcbmVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSk7YS5wcm90b3R5cGUuc2V0UmVtb3RlU2Vzc2lvbkluZm9DYj1mdW5jdGlvbihhKXt0aGlzLnJlbW90ZVNlc3Npb25JbmZvQ2I9YX07YS5wcm90b3R5cGUuc2V0RmVhdHVyZXM9ZnVuY3Rpb24oYSl7dGhpcy5mZWF0dXJlcz1hO3RoaXMuc2NyZWVuc2hhcmUub25Jbml0Q29tcGxldGUoKTt0aGlzLmhhbmRsZXJzXy5mb3JFYWNoKGZ1bmN0aW9uKGIsZCl7Yi5pbml0KGEpfSl9O2EucHJvdG90eXBlLmdldEZlYXR1cmVWYWx1ZT1mdW5jdGlvbihhKXtpZih0aGlzLmZlYXR1cmVzKXt2YXIgYj10aGlzLmZlYXR1cmVzLmZpbmQoZnVuY3Rpb24oYil7cmV0dXJuIGIubmFtZT09PWF9KTtyZXR1cm4gdm9pZCAwIT09Yj9iLnZhbHVlOiExfXJldHVybiExfTthLnByb3RvdHlwZS5nZXRWREFGZWF0dXJlVmFsdWU9ZnVuY3Rpb24oYSl7cmV0dXJuIHZvaWQgMCE9PXRoaXMudmRhZmVhdHVyZXNfLmZpbmQoZnVuY3Rpb24oYil7cmV0dXJuIGI9PT1cclxuYX0pPyEwOiExfTthLnByb3RvdHlwZS5vblJlZGlyZWN0aW9uQ29tcGxldGU9ZnVuY3Rpb24oKXtmb3IoO3RoaXMuZGVmZXJyZWRBY3Rpb25zJiYwPHRoaXMuZGVmZXJyZWRBY3Rpb25zLmxlbmd0aDspdGhpcy5kZWZlcnJlZEFjdGlvbnMuc2hpZnQoKS5wb3N0KHRoaXMuc3RhdHVzPT12LlJlZGlyZWN0ZWQpfTthLnByb3RvdHlwZS5jb25uZWN0VG9TZXJ2aWNlPWZ1bmN0aW9uKCl7dS5sb2dnZXIubG9nKFwiUmVkaXJlY3Rpb24gc3RhdHVzOiBDb25uZWN0aW5nLi4uXCIpO3RoaXMuc3RhdHVzPXYuQ29ubmVjdGluZztyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24oYSxiKXt2YXIgZD1uZXcgV2ViU29ja2V0KFwid3NzOi8vMTI3LjAuMC4xOjkwMDJcIik7ZC5vbm9wZW49ZnVuY3Rpb24oKXthKGQpfTtkLm9uZXJyb3I9ZnVuY3Rpb24oYSl7dS5sb2dnZXIubG9nKFwid2Vic29ja2V0IGNvbm5lY3Rpb24gZXJyb3I6IFwiK2EudHlwZSk7YihhKX19KX07YS5wcm90b3R5cGUud2FpdFVudGlsUmVkaXJlY3RlZD1cclxuZnVuY3Rpb24oYSl7dmFyIGI9dGhpcztyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24oZCxjKXtiLnN0YXR1cz09di5SZWRpcmVjdGVkP2QoKTowPj1hP2MoKTpzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dS5sb2dnZXIubG9nKFwid2FpdFVudGlsUmVkaXJlY3RlZCgpIHRpbWVvdXQuIGNvdW50PVwiK2EpO2Iuc3RhdHVzIT12LlJlZGlyZWN0ZWQ/Yi53YWl0VW50aWxSZWRpcmVjdGVkKC0tYSkudGhlbihmdW5jdGlvbigpe2QoKX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oKXtjKCl9KTpkKCl9LDJFMyl9KX07YS5wcm90b3R5cGUuaGFuZGxlUmVtb3RlU2Vzc2lvbkluZm89ZnVuY3Rpb24oKXt2YXIgYT10aGlzO3UubG9nZ2VyLmxvZyhcImhhbmRsZVJlbW90ZVNlc3Npb25JbmZvIGNhbGxlZC5cIik7dmFyIGI9dGhpcztiLnJlbW90ZVNlc3Npb25JbmZvQ2I/Yi5yZW1vdGVTZXNzaW9uSW5mb0NiKCkudGhlbihmdW5jdGlvbihkKXt1LmxvZ2dlci5sb2coXCJyZW1vdGVTZXNzaW9uSW5mbyBzdWNjZXNzISBpbmZvOlwiK1xyXG5KU09OLnN0cmluZ2lmeShkKSk7dS5sb2dnZXIubG9nKFwiUmVkaXJlY3Rpb24gc3RhdHVzOiBSZWRpcmVjdGVkXCIpO2Iuc3RhdHVzPXYuUmVkaXJlY3RlZDtiLnBpbmdDb25uZWN0aW9uRW5kKCk7KGQ9d2luZG93Lm9uVmRpQ2xpZW50Q29ubmVjdGVkKSYmZCgpO2EudGVsZW1ldHJ5LlNlbmRUZWxlbWV0cnlJbml0KCk7Yi5vblJlZGlyZWN0aW9uQ29tcGxldGUoKX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oKXt1LmxvZ2dlci5sb2coXCJyZW1vdGVTZXNzaW9uSW5mbyBmYWlsdXJlIVwiKTtiLnN1c3BlbmRSZWRpcmVjdGlvbighMCk7Yi5vblJlZGlyZWN0aW9uQ29tcGxldGUoKX0pOih1LmxvZ2dlci5sb2coXCJyZW1vdGVTZXNzaW9uSW5mb0NiIGlzIGludmFsaWQhXCIpLGIuc3VzcGVuZFJlZGlyZWN0aW9uKCEwKSxiLm9uUmVkaXJlY3Rpb25Db21wbGV0ZSgpKX07YS5wcm90b3R5cGUuc3RhcnRSZWRpcmVjdGlvbj1mdW5jdGlvbihhLGIpe3ZhciBkPXRoaXMsYz13aW5kb3cub25WZGlDbGllbnREaXNjb25uZWN0ZWQ7XHJcbnJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihnLGspe2Quc3RhdHVzIT12LlJlZGlyZWN0ZWQ/KHUubG9nZ2VyLmxvZyhcIkF0dGVtcHRpbmcgdG8gc3RhcnQgcmVkaXJlY3Rpb246IFwiK2IpLCExPT09YT9kLmRlZmVycmVkQWN0aW9ucy5wdXNoKG5ldyBlLmRlZmVycmVkX2FjdGlvbihnLGssYikpOmQuY29ubmVjdFRvU2VydmljZSgpLnRoZW4oZnVuY3Rpb24oYSl7dS5sb2dnZXIubG9nKFwiUmVkaXJlY3Rpb24gc3RhdHVzOiBCaW5kaW5nLi4uXCIpO2Quc3RhdHVzPXYuQmluZGluZztkLndlYnNvY2tldD1hO2Qud2Vic29ja2V0Lm9ubWVzc2FnZT1mdW5jdGlvbihhKXtkLm9uV1NNZXNzYWdlKGEpfTtkLndlYnNvY2tldC5vbmNsb3NlPWZ1bmN0aW9uKGEpe2Qub25XU0Nsb3NlKGEpfTtnKCk7ZC5oYW5kbGVSZW1vdGVTZXNzaW9uSW5mbygpfSlbXCJjYXRjaFwiXShmdW5jdGlvbihhKXt1LmxvZ2dlci5sb2coXCJVbmFibGUgdG8gY29ubmVjdCB0byB3ZWJzb2NrZXQgc2VydmljZSEgXCIrYSk7XHJcbmsoKTtkLnN1c3BlbmRSZWRpcmVjdGlvbighMCk7ZC5vblJlZGlyZWN0aW9uQ29tcGxldGUoKTtjJiZjKCEwKX0pKToodS5sb2dnZXIubG9nKFwiUmVkaXJlY3Rpb24gYWxyZWFkeSBzdGFydGVkLlwiKSxnKCkpfSl9O2EucHJvdG90eXBlLnRlcm1pbmF0ZU9wdGltaXphdGlvbj1mdW5jdGlvbigpe3RoaXMud2Vic29ja2V0LmNsb3NlKDFFMyxcIm5vcm1hbCBkaXNjb25uZWN0aW5nIVwiKX07YS5wcm90b3R5cGUuc3VzcGVuZFJlZGlyZWN0aW9uPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXM7dS5sb2dnZXIubG9nKFwiU3VzcGVuZGluZyByZWRpcmVjdGlvbi5cIik7dGhpcy5oYW5kbGVyc18uZm9yRWFjaChmdW5jdGlvbihhLGIpe2EucmVzZXQoKX0pO3ZhciBkPXdpbmRvdy5vblZkaUNsaWVudERpc2Nvbm5lY3RlZDt0cnl7ZCYmZCghMSl9Y2F0Y2goYyl7dS5sb2dnZXIubG9nKFwic3VzcGVuZFJlZGlyZWN0aW9uKCk6IGV4Y2VwdGlvbiBkdXJpbmcgdmRpQ2xpZW50RGlzY29ubmVjdDogXCIrYy5tZXNzYWdlKX11LmxvZ2dlci5sb2coXCJSZWRpcmVjdGlvbiBzdGF0dXM6IE5vdFJlZGlyZWN0ZWRcIik7XHJcbnZhciBnPXRoaXMuc3RhdHVzO3RoaXMuc3RhdHVzPXYuTm90UmVkaXJlY3RlZDt2YXIgaz0hMSxkPXdpbmRvdy5nZXRDaXRyaXhNU1RlYW1zUmVkaXIseD13aW5kb3cuZ2V0Q2l0cml4V2VicnRjUmVkaXIscjtkP3I9ZDp4JiYocj14KTtyJiZyKCkudGhlbihmdW5jdGlvbihkKXt1LmxvZ2dlci5sb2coXCJzdWNlc3NzIG9uIGRpc2Nvbm5lY3RcIitkKTtcIjFcIj09ZCYmKGs9ITAsdS5sb2dnZXIubG9nKFwiUmVnIGtleSBleGlzdHMgd2hpbGUgZGlzY29ubmVjdGluZ1wiKSk7YSYmZz09PXYuUmVkaXJlY3RlZCYmMT09ayYmKHUubG9nZ2VyLmxvZyhcIkNhbGxpbmcgcGluZyBub3Qgbm9ybWFsIGRpc2Nvbm5lY3RcIiksYi5waW5nQ29ubmVjdGlvbkJlZ2luKCExKSl9KVtcImNhdGNoXCJdKGZ1bmN0aW9uKCl7dS5sb2dnZXIubG9nKFwiRmFpbHVyZSB0byBSZWFkIE1TIFRlYW1zIHJlZGlyIFJlZyBLZXksIG5vdCByZXRyeWluZy4uLlwiKX0pO3RoaXMuZGlzcGF0Y2hTdGF0ZUNoYW5nZU5vdGlmaWNhdGlvbnMoKX07XHJcbmEucHJvdG90eXBlLm9uV1NPcGVuPWZ1bmN0aW9uKCl7fTthLnByb3RvdHlwZS5vbldTQ2xvc2U9ZnVuY3Rpb24oYSl7dS5sb2dnZXIubG9nKFwiZGlzY29ubmVjdGVkIGZyb20gd2Vic29ja2V0IHNlcnZpY2UuIFwiK0pTT04uc3RyaW5naWZ5KGEpKTt0cnl7YSYmMUUzPT1hLmNvZGU/dGhpcy5zdXNwZW5kUmVkaXJlY3Rpb24oITEpOnRoaXMuc3VzcGVuZFJlZGlyZWN0aW9uKCEwKX1jYXRjaChiKXt1LmxvZ2dlci5sb2coXCJzdXNwZW5kUmVkaXJlY3Rpb24oKTogZXhjZXB0aW9uIGNsb3NpbmcgV2ViU29ja2V0OiBcIitiLm1lc3NhZ2UpfX07YS5wcm90b3R5cGUub25XU0Vycm9yPWZ1bmN0aW9uKCl7dHJ5e3RoaXMuc3VzcGVuZFJlZGlyZWN0aW9uKCEwKX1jYXRjaChhKXt1LmxvZ2dlci5sb2coXCJzdXNwZW5kUmVkaXJlY3Rpb24oKTogZXhjZXB0aW9uIG9uIFdlYlNvY2tldCBlcnJvcjogXCIrYS5tZXNzYWdlKX19O2EucHJvdG90eXBlLldTU2VuZE9iamVjdFdyYXBwZXI9ZnVuY3Rpb24oYSxcclxuYixkLGMpe3ZhciBnPSEwO2IhPWguY2xhc3NfaWRfdC5FbmdpbmVDb250cm9sfHxkIT1oLm1ldGhvZF9pZF9FbmdpbmVDb250cm9sX3QuY3RvciYmZCE9aC5tZXRob2RfaWRfRW5naW5lQ29udHJvbF90LnZlcnNpb24mJmQhPWgubWV0aG9kX2lkX0VuZ2luZUNvbnRyb2xfdC5mZWF0dXJlX2ZsYWdzfHwoZz0hMSk7dmFyIGs9ITA7aWYoZyYmKGs9ITEsdm9pZCAwIT10aGlzLmZlYXR1cmVzKSlmb3IodmFyIGc9MCxyPXRoaXMuZmVhdHVyZXM7ZzxyLmxlbmd0aDtnKyspe3ZhciBBPXJbZ107aWYoITA9PT1BLnZhbHVlJiZBLm5hbWU9PWEpe2s9ITA7YnJlYWt9fXJldHVybiAxPT1rP3RoaXMuV1NTZW5kT2JqZWN0KGMpOlByb21pc2UucmVqZWN0KFwiQ2Fubm90IGludm9rZSBtZXRob2QgdGhhdCBpcyBub3Qgc3VwcG9ydGVkIGJ5IHdlYnJwYzogaWlkKFwiK2IrXCIpIG1pZChcIitkK1wiKVwiKX07YS5wcm90b3R5cGUuV1NTZW5kT2JqZWN0PWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXM7cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKGQsXHJcbmMpe2lmKFwid2VicnRjXCI9PWEudil7dmFyIGc9YS5oZHIucHJvYy5paWQsaz1hLmhkci5wcm9jLm1ldGhvZGlkLHI9YS5vYmpyZWYub2lkO2EuaGRyLmRlc3Ryb3l8fChnPW5ldyBuKGQsYyxnLHIsMCwhMCxrKSxiLnJlcXMucHVzaChnKSk7Zz1KU09OLnN0cmluZ2lmeShhKTt1LmxvZ2dlci50cmFjZShcIldTU2VuZE9iamVjdDogPj4+IFwiK2guV2VicnBjQ2xhc3NMaWJJbmZvVXRpbC5jb21wb3NlQ2xhc3NJbmZvRGF0YShhKStcIiBcIitnKTt0cnl7Yi53ZWJzb2NrZXQucmVhZHlTdGF0ZT09V2ViU29ja2V0Lk9QRU4/Yi53ZWJzb2NrZXQuc2VuZChnKToodS5sb2dnZXIubG9nKFwiV1NTZW5kT2JqZWN0KCk6IHdhcmluaWc6IHdlYiBzb2NrZXQgaXMgbm90IG9wZW4sIGRyb3BwaW5nIHRoZSBtZXNzYWdlIVwiKSxkKHt9KSl9Y2F0Y2goQSl7dS5sb2dnZXIubG9nKFwiV1NTZW5kT2JqZWN0KCk6IGV4Y2VwdGlvbjogXCIrQS5tZXNzYWdlKSxjKEEubWVzc2FnZSl9fWVsc2UgaWYoXCJvdmVybGF5XCI9PVxyXG5hLnYpe2c9SlNPTi5zdHJpbmdpZnkoYSk7dS5sb2dnZXIubG9nKFwiSERYTVM6IFNlbmRPdmVybGF5RGF0YTogPj4+IFwiK2crXCInXCIpO3RyeXtiLndlYnNvY2tldC5yZWFkeVN0YXRlPT1XZWJTb2NrZXQuT1BFTj9iLndlYnNvY2tldC5zZW5kKGcpOih1LmxvZ2dlci5sb2coXCJXU1NlbmRPYmplY3QoKTogd2FyaW5pZzogd2ViIHNvY2tldCBpcyBub3Qgb3BlbiwgZHJvcHBpbmcgdGhlIG1lc3NhZ2UhXCIpLGQoe30pKX1jYXRjaChBKXt1LmxvZ2dlci5sb2coXCJXU1NlbmRPYmplY3QoKTogZXhjZXB0aW9uOiBcIitBLm1lc3NhZ2UpLGMoQS5tZXNzYWdlKX19ZWxzZSBpZihcInRlbGVtZXRyeVwiPT1hLnYpe2c9SlNPTi5zdHJpbmdpZnkoYSk7dS5sb2dnZXIubG9nKFwiSERYTVM6IFNlbmRUZWxlbWV0cnlEYXRhOiA+Pj4gXCIrZytcIidcIik7dHJ5e2Iud2Vic29ja2V0LnJlYWR5U3RhdGU9PVdlYlNvY2tldC5PUEVOP2Iud2Vic29ja2V0LnNlbmQoZyk6KHUubG9nZ2VyLmxvZyhcIldTU2VuZE9iamVjdCgpOiB3YXJpbmlnOiB3ZWIgc29ja2V0IGlzIG5vdCBvcGVuLCBkcm9wcGluZyB0aGUgbWVzc2FnZSFcIiksXHJcbmQoe30pKX1jYXRjaChBKXt1LmxvZ2dlci5sb2coXCJXU1NlbmRPYmplY3QoKTogZXhjZXB0aW9uOiBcIitBLm1lc3NhZ2UpLGMoQS5tZXNzYWdlKX19ZWxzZSBpZihcImFwcHNoYXJpbmdcIj09YS52KXtnPUpTT04uc3RyaW5naWZ5KGEpO3UubG9nZ2VyLmxvZyhcIkhEWE1TOiBTZW5kU2NyZWVuU2hhcmluZ0RhdGE6ID4+PiBcIitnK1wiJ1wiKTt0cnl7Yi53ZWJzb2NrZXQucmVhZHlTdGF0ZT09V2ViU29ja2V0Lk9QRU4/Yi53ZWJzb2NrZXQuc2VuZChnKToodS5sb2dnZXIubG9nKFwiV1NTZW5kT2JqZWN0KCk6IHdhcmluaWc6IHdlYiBzb2NrZXQgaXMgbm90IG9wZW4sIGRyb3BwaW5nIHRoZSBtZXNzYWdlIVwiKSxkKHt9KSl9Y2F0Y2goQSl7dS5sb2dnZXIubG9nKFwiV1NTZW5kT2JqZWN0KCk6IGV4Y2VwdGlvbjogXCIrQS5tZXNzYWdlKSxjKEEubWVzc2FnZSl9fWVsc2UgdS5sb2dnZXIubG9nKFwiSERYTVM6IFdTU2VuZE9iamVjdDogVW5rbm93biBwcm90b2NvbDogJ1wiK0pTT04uc3RyaW5naWZ5KGEpK1xyXG5cIidcIil9KX07YS5wcm90b3R5cGUud2VicnBjU3RhdHVzQ29kZVRvTmFtZT1mdW5jdGlvbihhKXtzd2l0Y2goYSl7Y2FzZSBrLnJwY19zdGF0dXNfc3VjY2VzczphPVwicnBjX3N0YXR1c19zdWNjZXNzXCI7YnJlYWs7Y2FzZSBrLnJwY19zdGF0dXNfdW5zcGVjaWZpZWRfZXJyb3I6YT1cInJwY19zdGF0dXNfdW5zcGVjaWZpZWRfZXJyb3JcIjticmVhaztjYXNlIGsucnBjX3N0YXR1c191bmV4cGVjdGVkOmE9XCJycGNfc3RhdHVzX3VuZXhwZWN0ZWRcIjticmVhaztjYXNlIGsucnBjX3N0YXR1c19pbmRleF9vdXRfb2ZfYm91bmRzOmE9XCJycGNfc3RhdHVzX2luZGV4X291dF9vZl9ib3VuZHNcIjticmVhaztjYXNlIGsucnBjX3N0YXR1c19taXNzaW5nX3BhcmFtZXRlcjphPVwicnBjX3N0YXR1c19taXNzaW5nX3BhcmFtZXRlclwiO2JyZWFrO2Nhc2Ugay5ycGNfc3RhdHVzX21pc3NpbmdfcmV0dXJuX3ZhbHVlOmE9XCJycGNfc3RhdHVzX21pc3NpbmdfcmV0dXJuX3ZhbHVlXCI7YnJlYWs7Y2FzZSBrLnJwY19zdGF0dXNfaW52YWxpZF9vYmplY3Q6YT1cclxuXCJycGNfc3RhdHVzX2ludmFsaWRfb2JqZWN0XCI7YnJlYWs7Y2FzZSBrLnJwY19zdGF0dXNfdXNlcl9leGNlcHRpb246YT1cInJwY19zdGF0dXNfdXNlcl9leGNlcHRpb25cIjticmVhaztjYXNlIGsucnBjX3N0YXR1c19zeXN0ZW1fZXJyb3I6YT1cInJwY19zdGF0dXNfc3lzdGVtX2Vycm9yXCI7YnJlYWs7ZGVmYXVsdDphPVwidW5rbm93blwifXJldHVybiBhfTthLnByb3RvdHlwZS5wYXJjZVdlYnJwY0Vycm9yPWZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YSYmKGE9YiYmMDxiLmxlbmd0aD9iWzBdLmNhdGVnb3J5fHxiWzBdLmNvZGV8fGJbMF0ubWVzc2FnZT9rLnJwY19zdGF0dXNfc3lzdGVtX2Vycm9yOmsucnBjX3N0YXR1c191c2VyX2V4Y2VwdGlvbjprLnJwY19zdGF0dXNfdW5zcGVjaWZpZWRfZXJyb3IpO3ZhciBkO3N3aXRjaChhKXtjYXNlIGsucnBjX3N0YXR1c191bnNwZWNpZmllZF9lcnJvcjpjYXNlIGsucnBjX3N0YXR1c191bmV4cGVjdGVkOmNhc2Ugay5ycGNfc3RhdHVzX2luZGV4X291dF9vZl9ib3VuZHM6Y2FzZSBrLnJwY19zdGF0dXNfbWlzc2luZ19wYXJhbWV0ZXI6Y2FzZSBrLnJwY19zdGF0dXNfbWlzc2luZ19yZXR1cm5fdmFsdWU6Y2FzZSBrLnJwY19zdGF0dXNfaW52YWxpZF9vYmplY3Q6ZD1cclxubmV3IERPTUV4Y2VwdGlvbih0aGlzLndlYnJwY1N0YXR1c0NvZGVUb05hbWUoYSksdGhpcy53ZWJycGNTdGF0dXNDb2RlVG9OYW1lKGEpKTticmVhaztjYXNlIGsucnBjX3N0YXR1c191c2VyX2V4Y2VwdGlvbjpkPWImJjA8Yi5sZW5ndGg/bmV3IERPTUV4Y2VwdGlvbihiWzBdLHRoaXMud2VicnBjU3RhdHVzQ29kZVRvTmFtZShhKSk6bmV3IERPTUV4Y2VwdGlvbih0aGlzLndlYnJwY1N0YXR1c0NvZGVUb05hbWUoYSksdGhpcy53ZWJycGNTdGF0dXNDb2RlVG9OYW1lKGEpKTticmVhaztjYXNlIGsucnBjX3N0YXR1c19zeXN0ZW1fZXJyb3I6aWYoYiYmMDxiLmxlbmd0aCl7ZD1PYmplY3QuY3JlYXRlKERPTUV4Y2VwdGlvbik7dmFyIGc9e3ZhbHVlOm51bGwsd3JpdGFibGU6ITAsZW51bWVyYWJsZTohMSxDb25maWd1cmFibGU6ITB9O2cudmFsdWU9YlswXS5jYXRlZ29yeTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZCxcIm5hbWVcIixnKTtnLnZhbHVlPWJbMF0uY29kZTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZCxcclxuXCJjb2RlXCIsZyk7Zy52YWx1ZT1iWzBdLm1lc3NhZ2U7T2JqZWN0LmRlZmluZVByb3BlcnR5KGQsXCJtZXNzYWdlXCIsZyl9ZWxzZSBkPW5ldyBET01FeGNlcHRpb24odGhpcy53ZWJycGNTdGF0dXNDb2RlVG9OYW1lKGEpLHRoaXMud2VicnBjU3RhdHVzQ29kZVRvTmFtZShhKSl9cmV0dXJuIGR9O2EucHJvdG90eXBlLm9uV1NNZXNzYWdlPWZ1bmN0aW9uKGEpe2E9YS5kYXRhO3ZhciBiO3RyeXtiPUpTT04ucGFyc2UoYSl9Y2F0Y2goZyl7dS5sb2dnZXIubG9nKFwiaW52YWxpZCBKU09OISEhXCIpO3UubG9nZ2VyLmxvZyhnKTt1LmxvZ2dlci5sb2coYSk7cmV0dXJufWlmKFwid2VicnRjXCI9PWIudil7dS5sb2dnZXIudHJhY2UoXCJvbldTTWVzc2FnZTogPDw8IFwiK2guV2VicnBjQ2xhc3NMaWJJbmZvVXRpbC5jb21wb3NlQ2xhc3NJbmZvRGF0YShiKStcIiBcIithKTt2YXIgYz1iLmhkci5wcm9jLmlpZCxrPWIuaGRyLnByb2MubWV0aG9kaWQsZT1iLm9ianJlZi5vaWQseD1iLnN0YXR1cztpZihiLmhkci5tc2dfdHlwZT09XHJcbmQuV3NKc29uVXRpbC5nZXRNc2dUeXBlKGQud3NfbXNnX3R5cGVfdC5yZXBseSkpYT10aGlzLnJlcXMuZmluZEluZGV4KGZ1bmN0aW9uKGEpe3JldHVybiBhLmlpZD09YyYmYS5vaWQ9PWUmJmEubWlkPT1rfSksMDw9YT8wPT14P3RoaXMucmVxcy5zcGxpY2UoYSwxKS5zaGlmdCgpLnJlc29sdmUoYik6KHg9dGhpcy5wYXJjZVdlYnJwY0Vycm9yKHgsYi5wYXJhbXMpLHRoaXMucmVxcy5zcGxpY2UoYSwxKS5zaGlmdCgpLnJlamVjdCh4KSk6KHUubG9nZ2VyLmxvZyhcIkhEWE1TIGRpZG50IGZpbmQgdGhpcyBvbmUuIChyZXFzKVwiKSx1LmxvZ2dlci5sb2codGhpcy5yZXFzKSk7ZWxzZSBpZihiLmhkci5tc2dfdHlwZT09ZC5Xc0pzb25VdGlsLmdldE1zZ1R5cGUoZC53c19tc2dfdHlwZV90LmV2ZW50X3JlcSkpe3ZhciByPWIuZnVuYy5pZDthPXRoaXMuY2JzLmZpbmRJbmRleChmdW5jdGlvbihhKXtyZXR1cm4gYS5paWQ9PWMmJmEub2lkPT1lJiZhLmNiaWQ9PXI+PjE2fSk7MDw9YT8oMD09XHJcbihyJjY1NTM1KT90aGlzLmNic1thXS5yZXNvbHZlKGIpOih4PXRoaXMucGFyY2VXZWJycGNFcnJvcih4LGIucGFyYW1zKSx0aGlzLmNic1thXS5yZWplY3QoeCkpLDE9PXRoaXMuY2JzW2FdLm9uZVNob3QmJih0aGlzLmNic1thXS5jb21wbGV0aW9uX2NiP3RoaXMuY2JzW2FdLmNvbXBsZXRpb25fY2IodGhpcy5jYnNbYV0uY2JpZCx0aGlzLmNic1thXS5taWQpOnUubG9nZ2VyLmxvZyhcIkhEWE1TIGRpZG50IGZpbmQgY29tcGxldGlvbl9jYiBmb3Igb25lU2hvdCBjYWxsYmFjaywgc29tZXRoaW5nIHdlbnQgd3JvbmchISEhIGNiaWQ9XCIrdGhpcy5jYnNbYV0uY2JpZCtcIiAoaWlkLCBtaWQpPShcIit0aGlzLmNic1thXS5paWQsXCIsXCIrdGhpcy5jYnNbYV0ubWlkK1wiKVwiKSkpOih1LmxvZ2dlci5sb2coXCJIRFhNUyBkaWRudCBmaW5kIHRoaXMgb25lLiAoY2JzKVwiKSx1LmxvZ2dlci5sb2coSlNPTi5zdHJpbmdpZnkodGhpcy5jYnMpKSl9ZWxzZSB1LmxvZ2dlci5sb2coXCJIRFhNUyBSZWNlaXZlZCBib2d1cyBtZXNzYWdlOiBcIitcclxuYStcIidcIil9ZWxzZSBpZihcInRlbGVtZXRyeVwiPT1iLnYpMD09Yi5zdGF0dXMmJih4PWIuaGRyLmNvbW1hbmQsMj09KHgmMjE0NzQ4MzY0NykmJihhPWIuaGRyLmlkLHRoaXMudGVsZW1ldHJ5Lm9uSW5pdGlhbGl6ZWQoYSksdS5sb2dnZXIubG9nKFwiVGVsZW1ldHJ5IGluaXQgcmVzcG9uc2UgcmVjZWl2ZWRcIikpKTtlbHNlIGlmKFwiZmVhdHVyZXNcIj09Yi52KXthPWIuZmVhdHVyZXM7aWYoXCJmZWF0dXJlLXN1cHBvcnRcIj09Yi5jb21tYW5kKWZvcih1LmxvZ2dlci5sb2coXCJmZWF0dXJlcyBjYXBhYmlsaXRpZXMgcmVjZWl2ZWQsIGZlYXR1cmVzOlwiK2EpLHRoaXMudmRhZmVhdHVyZXNfPWEseD0wO3g8YS5sZW5ndGg7eCsrKWlmKGFbeF09PT1oLkZFQVRVUkVfdmRhX2FwcF9zaGFyaW5nKXRoaXMuc2NyZWVuc2hhcmUub25Jbml0aWFsaXplZCghMCk7dGhpcy5jbGllbnRWaWV3cG9ydE1vZGVfPWIuY2xpZW50X3ZpZXdwb3J0X21vZGU7dS5sb2dnZXIubG9nKFwiZmVhdHVyZXMgY2xpZW50X3ZpZXdwb3J0X21vZGUgdmFsdWU6IFwiK1xyXG50aGlzLmNsaWVudFZpZXdwb3J0TW9kZV8pO3RoaXMuc2Vzc2lvbklkXz1iLmNsaWVudF9zZXNzaW9uX2lkfWVsc2UgaWYoXCJhcHBzaGFyaW5nXCI9PWIudilhPWIuc3RhdHVzLDA9PWE/KHg9Yi5oZHIuY29tbWFuZCxhPWIuaGRyLmlkLCh4JjIxNDc0ODM2NDcpPT1xLnNzaGFyZV9jbWQuR2V0U291cmNlcz8odS5sb2dnZXIubG9nKFwiYXBwc2hhcmluZyBHZXRTb3VyY2VzIHJlc3BvbnNlIHJlY2VpdmVkXCIpLHg9Yi5kYXRhLHRoaXMuc2NyZWVuc2hhcmUub25HZXRTb3VyY2VzKGEseCkpOih4JjIxNDc0ODM2NDcpPT1xLnNzaGFyZV9jbWQuU2V0QWN0aXZlPyh1LmxvZ2dlci5sb2coXCJhcHBzaGFyaW5nIFNldEFjdGl2ZSByZXNwb25zZSByZWNlaXZlZFwiKSx4PWIuZGF0YSx0aGlzLnNjcmVlbnNoYXJlLm9uU2V0QWN0aXZlKGEseCkpOih4JjIxNDc0ODM2NDcpPT1xLnNzaGFyZV9jbWQuVG9wb2xvZ3lDaGFuZ2VkPyh1LmxvZ2dlci5sb2coXCJhcHBzaGFyaW5nIFdpbmRvdyB0b3BvbG9neSBjaGFuZ2VkIGNtZCByZWNlaXZlZFwiKSxcclxudGhpcy5zY3JlZW5zaGFyZS5vblRvcGxvZ3lDaGFuZ2VkKCkpOih1LmxvZ2dlci5sb2coXCJpbnZhbGlkIGNvbW1hbmQgcmVwbHk6XCIreCksdGhpcy5zY3JlZW5zaGFyZS5vbkVycm9yKGEpKSk6KHUubG9nZ2VyLmxvZyhcImludmFsaWQgc3RhdHVzIHJlcGx5OlwiK2EpLGE9Yi5oZHIuaWQsdGhpcy5zY3JlZW5zaGFyZS5vbkVycm9yKGEpKTtlbHNlIGlmKHg9dGhpcy5oYW5kbGVyc18uZmluZChmdW5jdGlvbihhKXtyZXR1cm4gYS5uYW1lPT1iLnZ9KSx2b2lkIDAhPXgpeC5vbl9tZXNzYWdlKGIpO2Vsc2UgdS5sb2dnZXIubG9nKFwiSERYTVM6IG9uV1NNZXNzYWdlOiBVbmtub3duIHByb3RvY29sOiBcIithK1wiJ1wiKX07YS5wcm90b3R5cGUuY2xlYXJSZXFzPWZ1bmN0aW9uKCl7dS5sb2dnZXIubG9nKFwiY2xlYXJSZXFzKClcIik7dGhpcy5yZXFzLmZvckVhY2goZnVuY3Rpb24oYSxiKXthLnJlamVjdCgpfSk7dGhpcy5yZXFzPVtdfTthLnByb3RvdHlwZS5yZWdpc3RlckhhbmRsZXI9ZnVuY3Rpb24oYSxcclxuYixkLGcpe2E9bmV3IG4oZy5yZXNvbHZlLmJpbmQoZyksZy5yZWplY3QuYmluZChnKSxhLGIsZy5pZCxnLm9uZVNob3QsZCxnLmNvbXBsZXRpb25fY2IpO3RoaXMuY2JzLnB1c2goYSl9O2EucHJvdG90eXBlLnVucmVnaXN0ZXJIYW5kbGVyPWZ1bmN0aW9uKGEsYixkKXt2YXIgZz10aGlzLmNicy5maW5kSW5kZXgoZnVuY3Rpb24oZyl7cmV0dXJuIGcuaWlkPT1hJiZnLm9pZD09YiYmZy5jYmlkPT1kfSk7MDw9Zz90aGlzLmNicy5zcGxpY2UoZywxKToodS5sb2dnZXIubG9nKFwiSERYTVMgRGlkbnQgZmluZCB0aGlzIGNhbGxiYWNrIGluIHRoZSBsaXN0IVwiKSx1LmxvZ2dlci5sb2coSlNPTi5zdHJpbmdpZnkodGhpcy5jYnMpKSl9O2EucHJvdG90eXBlLmlzUmVkaXJlY3RlZD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnN0YXR1cz09PXYuUmVkaXJlY3RlZHx8dGhpcy5zdGF0dXM9PT12LkJpbmRpbmd8fHRoaXMuc3RhdHVzPT09di5Db25uZWN0aW5nfTthLnByb3RvdHlwZS5pc0Nvbm5lY3RlZD1cclxuZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zdGF0dXM9PXYuUmVkaXJlY3RlZH07YS5wcm90b3R5cGUuaXNQaW5nQWN0aXZlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucGluZ2FjdGl2ZX07YS5wcm90b3R5cGUucGluZ0Nvbm5lY3Rpb25CZWdpbj1mdW5jdGlvbihhKXt1LmxvZ2dlci5sb2coXCJTdGFydGVkIHRpbWVyXCIpO3RoaXMucGluZ2FjdGl2ZT0hMDt2YXIgYj13aW5kb3cub25WZGlDbGllbnREaXNjb25uZWN0ZWRUaW1lcjsxPT1hPyh1LmxvZ2dlci5sb2coXCJjaGVja2luZyBpZiB3ZSBhcmUgY29ubmVjdGVkLi4uXCIpLGIoKSk6dGhpcy5jb25udGltZXI9c2V0VGltZW91dChmdW5jdGlvbigpe3UubG9nZ2VyLmxvZyhcImNoZWNraW5nIGlmIHdlIGFyZSBjb25uZWN0ZWQuLi5cIik7YiYmYigpfSwxNUUzKX07YS5wcm90b3R5cGUucGluZ0Nvbm5lY3Rpb25FbmQ9ZnVuY3Rpb24oKXt0aGlzLnBpbmdhY3RpdmU9ITE7Y2xlYXJUaW1lb3V0KHRoaXMuY29ubnRpbWVyKX07YS5wcm90b3R5cGUuU2VuZFRlbGVtZXRyeURhdGFfU3BlYWtlcj1cclxuZnVuY3Rpb24oYSl7dGhpcy50ZWxlbWV0cnkuU2VuZFRlbGVtZXRyeURhdGEody50ZWxfY21kLkRhdGEsdy50ZWxfa2V5X1NwZWFrZXJEZXZpY2VVc2VkLGEsMCl9O2EucHJvdG90eXBlLnJlZ2lzdGVyU3RhdGVDaGFuZ2VOb3RpZmljYXRpb249ZnVuY3Rpb24oYSl7dGhpcy5zdGF0ZUNoYW5nZU5vdGlmY2F0aW9ucy5wdXNoKGEpfTthLnByb3RvdHlwZS51bnJlZ2lzdGVyU3RhdGVDaGFuZ2VOb3RpZmljYXRpb249ZnVuY3Rpb24oYSl7dGhpcy5zdGF0ZUNoYW5nZU5vdGlmY2F0aW9ucz10aGlzLnN0YXRlQ2hhbmdlTm90aWZjYXRpb25zLmZpbHRlcihmdW5jdGlvbihiKXtyZXR1cm4gYiE9YX0pfTthLnByb3RvdHlwZS5kaXNwYXRjaFN0YXRlQ2hhbmdlTm90aWZpY2F0aW9ucz1mdW5jdGlvbigpe3RoaXMuc3RhdGVDaGFuZ2VOb3RpZmNhdGlvbnMuZm9yRWFjaChmdW5jdGlvbihhKXthKCl9KX07YS5wcm90b3R5cGUudmRhYnVmZmVyTm9MaW1pdD1mdW5jdGlvbigpe2Zvcih2YXIgYT0hMSxcclxuYj0wLGQ9dGhpcy52ZGFmZWF0dXJlc187YjxkLmxlbmd0aDtiKyspaWYoZFtiXT09PWguRkVBVFVSRV92ZGFfc2VydmljZV9ub19idWZmZXJfbGltaXQpe2E9ITA7YnJlYWt9cmV0dXJuIGF9O09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLnByb3RvdHlwZSxcImNsaWVudFZpZXdwb3J0TW9kZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jbGllbnRWaWV3cG9ydE1vZGVffHxcInVua25vd25cIn0sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYS5wcm90b3R5cGUsXCJzZXNzaW9uQ2xpZW50SWRcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2Vzc2lvbklkX3x8XCJcIn0sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KTthLnByb3RvdHlwZS5hZGRQcm90b2NvbEhhbmRsZXI9ZnVuY3Rpb24oYSl7dm9pZCAwPT10aGlzLmhhbmRsZXJzXy5maW5kKGZ1bmN0aW9uKGIpe3JldHVybiBiLm5hbWU9PWEubmFtZX0pJiZ0aGlzLmhhbmRsZXJzXy5wdXNoKGEpfTtcclxucmV0dXJuIGF9KCk7YS5IZHhNZWRpYVN0cmVhbT1iO3ZhciB6PW5ldyBiO2EuZ2V0UmVkaXJlY3Rvcj1mdW5jdGlvbigpe3JldHVybiB6fX0sOTg1OmZ1bmN0aW9uKGIsYSxjKXt2YXIgZT10aGlzJiZ0aGlzLl9fZXh0ZW5kc3x8ZnVuY3Rpb24oKXt2YXIgYT1mdW5jdGlvbihiLGQpe2E9T2JqZWN0LnNldFByb3RvdHlwZU9mfHx7X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXkmJmZ1bmN0aW9uKGEsYil7YS5fX3Byb3RvX189Yn18fGZ1bmN0aW9uKGEsYil7Zm9yKHZhciBkIGluIGIpYi5oYXNPd25Qcm9wZXJ0eShkKSYmKGFbZF09YltkXSl9O3JldHVybiBhKGIsZCl9O3JldHVybiBmdW5jdGlvbihiLGQpe2Z1bmN0aW9uIGMoKXt0aGlzLmNvbnN0cnVjdG9yPWJ9YShiLGQpO2IucHJvdG90eXBlPW51bGw9PT1kP09iamVjdC5jcmVhdGUoZCk6KGMucHJvdG90eXBlPWQucHJvdG90eXBlLG5ldyBjKX19KCksdT10aGlzJiZ0aGlzLl9fc3ByZWFkQXJyYXlzfHxmdW5jdGlvbigpe2Zvcih2YXIgYT1cclxuMCxiPTAsZD1hcmd1bWVudHMubGVuZ3RoO2I8ZDtiKyspYSs9YXJndW1lbnRzW2JdLmxlbmd0aDtmb3IodmFyIGE9QXJyYXkoYSksYz0wLGI9MDtiPGQ7YisrKWZvcih2YXIgZT1hcmd1bWVudHNbYl0sZz0wLGg9ZS5sZW5ndGg7ZzxoO2crKyxjKyspYVtjXT1lW2ddO3JldHVybiBhfTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTthLkljZUNhbmRpZGF0ZVBhaXI9YS5JY2VDYW5kaWRhdGU9dm9pZCAwO3ZhciBoPWMoNjU4KSxkPWMoNTUwKSx3PWMoODUxKTtiPWZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGIoYyxlLHope2Zvcih2YXIgZz1bXSxoPTM7aDxhcmd1bWVudHMubGVuZ3RoO2grKylnW2gtM109YXJndW1lbnRzW2hdO3JldHVybiBhLmFwcGx5KHRoaXMsdShbYyxkLmNsYXNzX2lkX3QuUlRDSWNlQ2FuZGlkYXRlLGUseixudWxsLFtdXSxnKSl8fHRoaXN9ZShiLGEpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShiLnByb3RvdHlwZSxcImNhbmRpZGF0ZVwiLFxyXG57Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY2FuZGlkYXRlX30sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYi5wcm90b3R5cGUsXCJzZHBNaWRcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2RwTWlkX30sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYi5wcm90b3R5cGUsXCJzZHBNTGluZUluZGV4XCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnNkcE1MaW5lSW5kZXhffSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pO2IucHJvdG90eXBlLnN5bmNCYXJyaWVyPWZ1bmN0aW9uKCl7dmFyIGE9dGhpczt3LmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuc3luY0JhcnJpZXIoKSBjYWxsZWQuXCIpO3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihiLGMpe2Euc3luY0JhcnJpZXJEZWVwKGIsYykmJmEud2FpdFVudGlsQ29ubmVjdGVkKFwiSWNlQ2FuZGlkYXRlLnN5bmNCYXJyaWVyXCIpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gUHJvbWlzZS5hbGwoW2EucmVtb3RlSW52b2tlKCExLFxyXG5kLm1ldGhvZF9pZF9SVENJY2VDYW5kaWRhdGVfdC5jYW5kaWRhdGUsXCJcIiksYS5yZW1vdGVJbnZva2UoITEsZC5tZXRob2RfaWRfUlRDSWNlQ2FuZGlkYXRlX3Quc2RwTWlkLFwiXCIpLGEucmVtb3RlSW52b2tlKCExLGQubWV0aG9kX2lkX1JUQ0ljZUNhbmRpZGF0ZV90LnNkcE1MaW5lSW5kZXgsMCldKX0pLnRoZW4oZnVuY3Rpb24oYil7Yj1iLm1hcChmdW5jdGlvbihiKXtyZXR1cm4gYS5wYXJhbTAoYil9KTthLmNhbmRpZGF0ZV89YlswXTthLnNkcE1pZF89YlsxXTthLnNkcE1MaW5lSW5kZXhfPWJbMl07YS5zeW5jQmFycmllclJlc29sdmUoYSl9KVtcImNhdGNoXCJdKGZ1bmN0aW9uKGIpe2I9YS5sb2dSZW1vdGVJbnZva2VFcnJvcihiLFwiLnN5bmNCYXJyaWVyIGZhaWxlZCFcIik7YS5zeW5jQmFycmllclJlamVjdChiKX0pfSl9O3JldHVybiBifShoLlByb3h5T2JqZWN0KTthLkljZUNhbmRpZGF0ZT1iO2I9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYihjLGUpe3JldHVybiBhLmNhbGwodGhpcyxcclxuYyxkLmNsYXNzX2lkX3QuUlRDSWNlQ2FuZGlkYXRlUGFpcixlLGguUHJveHlNb2RlLlJlbW90ZSl8fHRoaXN9ZShiLGEpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShiLnByb3RvdHlwZSxcImxvY2FsXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmxvY2FsX30sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYi5wcm90b3R5cGUsXCJyZW1vdGVcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmVtb3RlX30sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KTtiLnByb3RvdHlwZS5zeW5jQmFycmllcj1mdW5jdGlvbigpe3ZhciBhPXRoaXM7dy5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLnN5bmNCYXJyaWVyKCkgY2FsbGVkLlwiKTtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24oYixjKXthLnN5bmNCYXJyaWVyRGVlcChiLGMpJiZhLndhaXRVbnRpbENvbm5lY3RlZChcIkljZUNhbmRpZGF0ZVBhaXIuc3luY0JhcnJpZXJcIikudGhlbihmdW5jdGlvbigpe3JldHVybiBQcm9taXNlLmFsbChbYS5yZW1vdGVJbnZva2UoITEsXHJcbmQubWV0aG9kX2lkX1JUQ0ljZUNhbmRpZGF0ZVBhaXJfdC5sb2NhbCx7fSksYS5yZW1vdGVJbnZva2UoITEsZC5tZXRob2RfaWRfUlRDSWNlQ2FuZGlkYXRlUGFpcl90LnJlbW90ZSx7fSldKX0pLnRoZW4oZnVuY3Rpb24oYil7Yj1iLm1hcChmdW5jdGlvbihiKXtyZXR1cm4gYS5wYXJhbTAoYil9KTthLmxvY2FsXz1iWzBdO2EucmVtb3RlXz1iWzFdO2Euc3luY0JhcnJpZXJSZXNvbHZlKGEpfSlbXCJjYXRjaFwiXShmdW5jdGlvbihiKXtiPWEubG9nUmVtb3RlSW52b2tlRXJyb3IoYixcIi5zeW5jQmFycmllciBmYWlsZWQhXCIpO2Euc3luY0JhcnJpZXJSZWplY3QoYil9KX0pfTtyZXR1cm4gYn0oaC5Qcm94eU9iamVjdCk7YS5JY2VDYW5kaWRhdGVQYWlyPWJ9LDg1MTpmdW5jdGlvbihiLGEsYyl7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7YS5sb2dnZXI9YS5Mb2dnZXI9dm9pZCAwO3ZhciBlPWMoNTUwKTtiPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gYShiKXt0aGlzLnRyYWNpbmc9XHJcbiExO3RoaXMubXNsb2dnZXJfPXZvaWQgMDt0aGlzLmVuYWJsZV90aW1lc3RhbXBfPSExO3RoaXMudGFnPWI7dGhpcy5lbmFibGVkPSEwO2UuQlVJTERfVFlQRV9TREsmJih0aGlzLmVuYWJsZV90aW1lc3RhbXBfPSEwKX1hLnByb3RvdHlwZS5zZXRNU0xvZ2dlcj1mdW5jdGlvbihhLGIpe3RoaXMubXNsb2dnZXJfPWE7dm9pZCAwIT1iJiYodGhpcy5lbmFibGVfdGltZXN0YW1wXz1iKX07YS5wcm90b3R5cGUubG9nPWZ1bmN0aW9uKCl7Zm9yKHZhciBhPVtdLGI9MDtiPGFyZ3VtZW50cy5sZW5ndGg7YisrKWFbYl09YXJndW1lbnRzW2JdO3RoaXMuZW5hYmxlZCYmKGE9dGhpcy50YWcrXCIgXCIrYSx0aGlzLmVuYWJsZV90aW1lc3RhbXBfJiYoYj1uZXcgRGF0ZSxhPVwiW1wiK2IuZ2V0VGltZSgpK1wiXSBcIitiLnRvSVNPU3RyaW5nKCkrXCIgXCIrYSksdm9pZCAwIT10aGlzLm1zbG9nZ2VyXz90aGlzLm1zbG9nZ2VyXy5pbmZvKGEpOmNvbnNvbGUubG9nKGEpKX07YS5wcm90b3R5cGUubG9neD1mdW5jdGlvbihhKXtmb3IodmFyIGI9XHJcbltdLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWJbYy0xXT1hcmd1bWVudHNbY107YXx8dGhpcy5sb2coYil9O2EucHJvdG90eXBlLnRyYWNlPWZ1bmN0aW9uKCl7Zm9yKHZhciBhPVtdLGI9MDtiPGFyZ3VtZW50cy5sZW5ndGg7YisrKWFbYl09YXJndW1lbnRzW2JdO3RoaXMudHJhY2luZyYmdGhpcy5sb2cuYXBwbHkodGhpcyxhKX07cmV0dXJuIGF9KCk7YS5Mb2dnZXI9YjthLmxvZ2dlcj1uZXcgYihcIltIZHhXZWJSVEMuanNdXCIpO2EubG9nZ2VyLmVuYWJsZWQ9ITB9LDM2MDpmdW5jdGlvbihiLGEsYyl7dmFyIGU9dGhpcyYmdGhpcy5fX2V4dGVuZHN8fGZ1bmN0aW9uKCl7dmFyIGE9ZnVuY3Rpb24oYixkKXthPU9iamVjdC5zZXRQcm90b3R5cGVPZnx8e19fcHJvdG9fXzpbXX1pbnN0YW5jZW9mIEFycmF5JiZmdW5jdGlvbihhLGIpe2EuX19wcm90b19fPWJ9fHxmdW5jdGlvbihhLGIpe2Zvcih2YXIgZCBpbiBiKWIuaGFzT3duUHJvcGVydHkoZCkmJihhW2RdPWJbZF0pfTtyZXR1cm4gYShiLFxyXG5kKX07cmV0dXJuIGZ1bmN0aW9uKGIsZCl7ZnVuY3Rpb24gZigpe3RoaXMuY29uc3RydWN0b3I9Yn1hKGIsZCk7Yi5wcm90b3R5cGU9bnVsbD09PWQ/T2JqZWN0LmNyZWF0ZShkKTooZi5wcm90b3R5cGU9ZC5wcm90b3R5cGUsbmV3IGYpfX0oKSx1PXRoaXMmJnRoaXMuX19hd2FpdGVyfHxmdW5jdGlvbihhLGIsZCxmKXtmdW5jdGlvbiBjKGEpe3JldHVybiBhIGluc3RhbmNlb2YgZD9hOm5ldyBkKGZ1bmN0aW9uKGYpe2YoYSl9KX1yZXR1cm4gbmV3IChkfHwoZD1Qcm9taXNlKSkoZnVuY3Rpb24oZCxLKXtmdW5jdGlvbiBnKGEpe3RyeXttKGYubmV4dChhKSl9Y2F0Y2goYil7SyhiKX19ZnVuY3Rpb24gcihhKXt0cnl7bShmW1widGhyb3dcIl0oYSkpfWNhdGNoKGIpe0soYil9fWZ1bmN0aW9uIG0oYSl7YS5kb25lP2QoYS52YWx1ZSk6YyhhLnZhbHVlKS50aGVuKGcscil9bSgoZj1mLmFwcGx5KGEsYnx8W10pKS5uZXh0KCkpfSl9LGg9dGhpcyYmdGhpcy5fX2dlbmVyYXRvcnx8ZnVuY3Rpb24oYSxcclxuYil7ZnVuY3Rpb24gZChhKXtyZXR1cm4gZnVuY3Rpb24oYil7cmV0dXJuIGYoW2EsYl0pfX1mdW5jdGlvbiBmKGYpe2lmKGcpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7Zm9yKDtjOyl0cnl7aWYoZz0xLHImJihtPWZbMF0mMj9yW1wicmV0dXJuXCJdOmZbMF0/cltcInRocm93XCJdfHwoKG09cltcInJldHVyblwiXSkmJm0uY2FsbChyKSwwKTpyLm5leHQpJiYhKG09bS5jYWxsKHIsZlsxXSkpLmRvbmUpcmV0dXJuIG07aWYocj0wLG0pZj1bZlswXSYyLG0udmFsdWVdO3N3aXRjaChmWzBdKXtjYXNlIDA6Y2FzZSAxOm09ZjticmVhaztjYXNlIDQ6cmV0dXJuIGMubGFiZWwrKyx7dmFsdWU6ZlsxXSxkb25lOiExfTtjYXNlIDU6Yy5sYWJlbCsrO3I9ZlsxXTtmPVswXTtjb250aW51ZTtjYXNlIDc6Zj1jLm9wcy5wb3AoKTtjLnRyeXMucG9wKCk7Y29udGludWU7ZGVmYXVsdDppZighKG09Yy50cnlzLG09MDxtLmxlbmd0aCYmbVttLmxlbmd0aC1cclxuMV0pJiYoNj09PWZbMF18fDI9PT1mWzBdKSl7Yz0wO2NvbnRpbnVlfWlmKDM9PT1mWzBdJiYoIW18fGZbMV0+bVswXSYmZlsxXTxtWzNdKSljLmxhYmVsPWZbMV07ZWxzZSBpZig2PT09ZlswXSYmYy5sYWJlbDxtWzFdKWMubGFiZWw9bVsxXSxtPWY7ZWxzZSBpZihtJiZjLmxhYmVsPG1bMl0pYy5sYWJlbD1tWzJdLGMub3BzLnB1c2goZik7ZWxzZXttWzJdJiZjLm9wcy5wb3AoKTtjLnRyeXMucG9wKCk7Y29udGludWV9fWY9Yi5jYWxsKGEsYyl9Y2F0Y2goZCl7Zj1bNixkXSxyPTB9ZmluYWxseXtnPW09MH1pZihmWzBdJjUpdGhyb3cgZlsxXTtyZXR1cm57dmFsdWU6ZlswXT9mWzFdOnZvaWQgMCxkb25lOiEwfX12YXIgYz17bGFiZWw6MCxzZW50OmZ1bmN0aW9uKCl7aWYobVswXSYxKXRocm93IG1bMV07cmV0dXJuIG1bMV19LHRyeXM6W10sb3BzOltdfSxnLHIsbSxlOyRqc2NvbXAuaW5pdFN5bWJvbCgpOyRqc2NvbXAuaW5pdFN5bWJvbCgpOyRqc2NvbXAuaW5pdFN5bWJvbEl0ZXJhdG9yKCk7XHJcbnJldHVybiBlPXtuZXh0OmQoMCksXCJ0aHJvd1wiOmQoMSksXCJyZXR1cm5cIjpkKDIpfSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiYoZVtTeW1ib2wuaXRlcmF0b3JdPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9KSxlfSxkPXRoaXMmJnRoaXMuX19zcHJlYWRBcnJheXN8fGZ1bmN0aW9uKCl7Zm9yKHZhciBhPTAsYj0wLGQ9YXJndW1lbnRzLmxlbmd0aDtiPGQ7YisrKWErPWFyZ3VtZW50c1tiXS5sZW5ndGg7Zm9yKHZhciBhPUFycmF5KGEpLGY9MCxiPTA7YjxkO2IrKylmb3IodmFyIGM9YXJndW1lbnRzW2JdLGc9MCxyPWMubGVuZ3RoO2c8cjtnKyssZisrKWFbZl09Y1tnXTtyZXR1cm4gYX07T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7YS5QZWVyQ29ubmVjdGlvbj1hLlNlc3Npb25EZXNjcmlwdGlvbj1hLlNlc3Npb25EZXNjcmlwdGlvbkluaXQ9YS5SdGNDb25maWd1cmF0aW9uPWEuUnRjSWNlU2VydmVyPWEuSWNlQ2FuZGlkYXRlRXZlbnQ9XHJcbnZvaWQgMDt2YXIgdz1jKDk0NikscT1jKDE0NCksbj1jKDU4OSksaz1jKDY1OCksdj1jKDk4NSksej1jKDM3NyksZz1jKDY1MCksQj1jKDI0KSx0PWMoNTUwKSxtPWMoODUxKSxEPWMoNTE3KSx5PWMoMzk0KSx4PWZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGIoZCxmLGMpe2Q9YS5jYWxsKHRoaXMsZCx0LmNsYXNzX2lkX3QuUlRDSWNlQ2FuZGlkYXRlRXZlbnQsZixrLlByb3h5TW9kZS5SZW1vdGUpfHx0aGlzO2QudGFyZ2V0PWM7ZC50eXBlPVwiaWNlY2FuZGlkYXRlXCI7cmV0dXJuIGR9ZShiLGEpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShiLnByb3RvdHlwZSxcImNhbmRpZGF0ZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jYW5kaWRhdGVffSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pO2IucHJvdG90eXBlLnN5bmNCYXJyaWVyPWZ1bmN0aW9uKCl7dmFyIGE9dGhpczttLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuc3luY0JhcnJpZXIoKSBjYWxsZWQuXCIpO1xyXG5yZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24oZixiKXthLnN5bmNCYXJyaWVyRGVlcChmLGIpJiZhLndhaXRVbnRpbENvbm5lY3RlZChhLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5zeW5jQmFycmllclwiKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGEucmVtb3RlSW52b2tlKCExLHQubWV0aG9kX2lkX1JUQ0ljZUNhbmRpZGF0ZUV2ZW50X3QuY2FuZGlkYXRlLHtvaWQ6MH0pfSkudGhlbihmdW5jdGlvbihmKXtmPWEucGFyYW0wKGYpO3JldHVybiExPT09Zi5pc19udWxsPyhuZXcgdi5JY2VDYW5kaWRhdGUoYSxmLm9pZCxrLlByb3h5TW9kZS5SZW1vdGUpKS5zeW5jQmFycmllcigpOlByb21pc2UucmVzb2x2ZShudWxsKX0pLnRoZW4oZnVuY3Rpb24oZil7bS5sb2dnZXIubG9nKGEudXNlcl9mcmllbmRseV9pZCgpK1wiLm9uaWNlY2FuZGlkYXRlOiBpY2VjYW5kaWRhdGUgYXZhaWxhYmxlIVwiKTthLmNhbmRpZGF0ZV89ZjthLnN5bmNCYXJyaWVyUmVzb2x2ZShhKX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oZil7Zj1cclxuYS5sb2dSZW1vdGVJbnZva2VFcnJvcihmLFwiLm9uaWNlY2FuZGlkYXRlKCkgZmFpbGVkIVwiKTthLnN5bmNCYXJyaWVyUmVqZWN0KGYpfSl9KX07cmV0dXJuIGJ9KGsuUHJveHlPYmplY3QpO2EuSWNlQ2FuZGlkYXRlRXZlbnQ9eDt2YXIgcj1mdW5jdGlvbigpe2Z1bmN0aW9uIGEoYixkKXt0aGlzLnN0YXRlXz1cIm5ld1wiO3RoaXMuY2FuZGlkYXRlc189W107dGhpcy5nYXRoZXJpbmdzdGF0ZXVwZGF0ZWNiXz12b2lkIDA7dGhpcy5wY189Yjt0aGlzLmdhdGhlcmluZ3N0YXRldXBkYXRlY2JfPWR9YS5wcm90b3R5cGUucHVzaFN0YXRlPWZ1bmN0aW9uKGEpe20ubG9nZ2VyLmxvZyh0aGlzLnBjXy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIub25pY2VnYXRoZXJpbmdzdGF0ZWNoYW5nZTogbmV3IHN0YXRlIGlzIFwiK2EpO3RoaXMuc3RhdGVfPWE7XCJnYXRoZXJpbmdcIj09dGhpcy5zdGF0ZV8/KHRoaXMuY2FuZGlkYXRlc189W10sdGhpcy5wb3N0VXBkYXRlKCkpOnRoaXMucHJvY2Vzc1JlbWFpbmluZygpfTtcclxuYS5wcm90b3R5cGUuYWRkSWNlQ2FuZGlkYXRlPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXM7dGhpcy5jYW5kaWRhdGVzXy5wdXNoKGEpO3ZhciBmPVtdO2YucHVzaChhLnN5bmNCYXJyaWVyKCkpO2YucHVzaCh0aGlzLnBjXy51cGRhdGVTZHBEZXNjcmlwdGlvbighMCkpO1Byb21pc2UuYWxsKGYpLnRoZW4oZnVuY3Rpb24oYSl7bS5sb2dnZXIubG9nKGIucGNfLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5vbmljZWNhbmRpZGF0ZTogaWNlY2FuZGlkYXRlIGF2YWlsYWJsZSFcIik7Yi5wb3N0SWNlQ2FuZGlkYXRlKGFbMF0pfSl9O2EucHJvdG90eXBlLnBvc3RJY2VDYW5kaWRhdGU9ZnVuY3Rpb24oYSl7bS5sb2dnZXIubG9nKHRoaXMucGNfLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5vbmljZWNhbmRpZGF0ZTogcG9zdGluZyBpY2UgY2FuZGlkYXRlIG5vdyFcIik7aWYobnVsbCE9dGhpcy5wY18ub25pY2VjYW5kaWRhdGUpdGhpcy5wY18ub25pY2VjYW5kaWRhdGUoYSk7ZWxzZSBtLmxvZ2dlci5sb2codGhpcy5wY18udXNlcl9mcmllbmRseV9pZCgpK1xyXG5cIm9uaWNlY2FuZGlkYXRlIGlzIE5VTEwhISFcIik7dGhpcy5jYW5kaWRhdGVzXy5zaGlmdCgpO3RoaXMucHJvY2Vzc1JlbWFpbmluZygpfTthLnByb3RvdHlwZS5wb3N0VXBkYXRlPWZ1bmN0aW9uKCl7bS5sb2dnZXIubG9nKHRoaXMucGNfLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5vbmljZWdhdGhlcmluZ3N0YXRlY2hhbmdlOiBwb3N0aW5nIGV2ZW50IG5vdyFcIik7dmFyIGE9bmV3IHAoXCJvbmljZWdhdGhlcmluZ3N0YXRlY2hhbmdlXCIsdGhpcy5wY18pO3RoaXMuZ2F0aGVyaW5nc3RhdGV1cGRhdGVjYl8mJnRoaXMuZ2F0aGVyaW5nc3RhdGV1cGRhdGVjYl8odGhpcy5zdGF0ZV8pO3RoaXMucGNfLm9uaWNlZ2F0aGVyaW5nc3RhdGVjaGFuZ2UoYSl9O2EucHJvdG90eXBlLnByb2Nlc3NSZW1haW5pbmc9ZnVuY3Rpb24oKXswPT10aGlzLmNhbmRpZGF0ZXNfLmxlbmd0aCYmXCJjb21wbGV0ZVwiPT10aGlzLnN0YXRlXz8odGhpcy5wY18ub25pY2VjYW5kaWRhdGUoe2NhbmRpZGF0ZTpudWxsLHRhcmdldDp0aGlzfSksXHJcbnRoaXMucG9zdFVwZGF0ZSgpKTptLmxvZ2dlci5sb2codGhpcy5wY18udXNlcl9mcmllbmRseV9pZCgpK1wiLm9uaWNlY2FuZGlkYXRlOiBjYW5kaWRhdGVzIHJlbWFpbmluZz1bXCIrdGhpcy5jYW5kaWRhdGVzXy5tYXAoZnVuY3Rpb24oYSl7cmV0dXJuIGEub2JqZWN0X2lkKCl9KStcIl0sIHN0YXRlPVwiK3RoaXMuc3RhdGVfKX07cmV0dXJuIGF9KCksQT1mdW5jdGlvbigpe2Z1bmN0aW9uIGEoKXt9YS50b1J0Y0ljZVNlcnZlcj1mdW5jdGlvbihhLGIpe3ZhciBmPXt1cmxzOltdLGNyZWRlbnRpYWw6XCJcIix1c2VybmFtZTpcIlwifTthJiYoYS51cmxzP0FycmF5LmlzQXJyYXkoYS51cmxzKT9mLnVybHM9YS51cmxzOmYudXJscy5wdXNoKGEudXJscyk6bS5sb2dnZXIubG9nKFwiUnRjSWNlU2VydmVyLnRvUnRjSWNlU2VydmVyKCkudXJscyBwcm9wZXJ0eSBpcyBtaXNzaW5nISB0aGlzIGlzIHJlcXVpcmVkIHByb3BlcnR5IVwiKSxhLmNyZWRlbnRpYWwmJihhLmNyZWRlbnRpYWwuaGFzT3duUHJvcGVydHkoXCJhY2Nlc3NUb2tlblwiKT9cclxuZi5jcmVkZW50aWFsPWEuY3JlZGVudGlhbC5hY2Nlc3NUb2tlbjpmLmNyZWRlbnRpYWw9YS5jcmVkZW50aWFsKSxhLnVzZXJuYW1lJiYoZi51c2VybmFtZT1hLnVzZXJuYW1lKSk7aWYoMT09Yilmb3IodmFyIGQgaW4gYSlcInVybHNcIiE9ZCYmXCJjcmVkZW50aWFsXCIhPWQmJlwidXNlcm5hbWVcIiE9ZCYmbS5sb2dnZXIubG9nKFwiUnRjSWNlU2VydmVyLnRvUnRjSWNlU2VydmVyKCkgd2FybmluZzogdW5zdXBwb3J0ZWQgcHJvcGVydHk6XCIrZCk7cmV0dXJuIGZ9O3JldHVybiBhfSgpO2EuUnRjSWNlU2VydmVyPUE7dmFyIE09ZnVuY3Rpb24oKXtmdW5jdGlvbiBhKCl7fWEudG9SdGNDb25maWd1cmF0aW9uPWZ1bmN0aW9uKGEsYil7MT09YiYmbS5sb2dnZXIubG9nKFwiUnRjQ29uZmlndXJhdGlvbi50b1J0Y0NvbmZpZ3VyYXRpb24oKSBpbiBSVENDb25maWd1cmF0aW9uIGNvbmZpZzpcIitKU09OLnN0cmluZ2lmeShhKSk7dmFyIGY9e307aWYoYSl7aWYoYS5pY2VTZXJ2ZXJzKXtmLmljZVNlcnZlcnM9XHJcbltdO2Zvcih2YXIgZD0wLGM9YS5pY2VTZXJ2ZXJzO2Q8Yy5sZW5ndGg7ZCsrKWYuaWNlU2VydmVycy5wdXNoKEEudG9SdGNJY2VTZXJ2ZXIoY1tkXSxiKSl9YS5pY2VUcmFuc3BvcnRQb2xpY3kmJihmLmljZVRyYW5zcG9ydFBvbGljeT1hLmljZVRyYW5zcG9ydFBvbGljeSk7YS5idW5kbGVQb2xpY3kmJihmLmJ1bmRsZVBvbGljeT1hLmJ1bmRsZVBvbGljeSk7YS5ydGNwTXV4UG9saWN5JiYoZi5ydGNwTXV4UG9saWN5PWEucnRjcE11eFBvbGljeSk7YS5pY2VUcmFuc3BvcnRzJiYoZi5pY2VUcmFuc3BvcnRzPWEuaWNlVHJhbnNwb3J0cyk7YS5zZHBTZW1hbnRpY3MmJihmLnNkcFNlbWFudGljcz1hLnNkcFNlbWFudGljcyk7YS5lbmFibGVEdGxzU3J0cCYmKGYuZW5hYmxlRHRsc1NydHA9YS5lbmFibGVEdGxzU3J0cCk7YS5lbmFibGVEc2NwJiYoZi5lbmFibGVEc2NwPWEuZW5hYmxlRHNjcCl9aWYoMT09Yil7Zm9yKHZhciBnIGluIGEpXCJpY2VTZXJ2ZXJzXCIhPWcmJlwiaWNlVHJhbnNwb3J0UG9saWN5XCIhPVxyXG5nJiZcImJ1bmRsZVBvbGljeVwiIT1nJiZcInJ0Y3BNdXhQb2xpY3lcIiE9ZyYmXCJpY2VUcmFuc3BvcnRzXCIhPWcmJlwic2RwU2VtYW50aWNzXCIhPWcmJlwiZW5hYmxlRHRsc1NydHBcIiE9ZyYmXCJlbmFibGVEc2NwXCIhPWcmJm0ubG9nZ2VyLmxvZyhcIlJ0Y0NvbmZpZ3VyYXRpb24udG9SdGNDb25maWd1cmF0aW9uKCkgd2FybmluZzogdW5zdXBwb3J0ZWQgcHJvcGVydHk6XCIrZyk7bS5sb2dnZXIubG9nKFwiUnRjQ29uZmlndXJhdGlvbi50b1J0Y0NvbmZpZ3VyYXRpb24oKSBjb252ZXJ0ZWQgUnRjQ29uZmlndXJhdGlvbiBjb25maWc6XCIrSlNPTi5zdHJpbmdpZnkoZikpfXJldHVybiBmfTtyZXR1cm4gYX0oKTthLlJ0Y0NvbmZpZ3VyYXRpb249TTt2YXIgRj1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihhLGIpe3RoaXMuc2RwPWI7dGhpcy50eXBlPWF9fSgpO2EuU2Vzc2lvbkRlc2NyaXB0aW9uSW5pdD1GO3ZhciBsPWZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGIoYyxmLGcpe2Zvcih2YXIgcj1bXSxtPTM7bTxcclxuYXJndW1lbnRzLmxlbmd0aDttKyspclttLTNdPWFyZ3VtZW50c1ttXTtyZXR1cm4gYS5hcHBseSh0aGlzLGQoW2MsdC5jbGFzc19pZF90LlJUQ1Nlc3Npb25EZXNjcmlwdGlvbixmLGcsbnVsbCxbXV0scikpfHx0aGlzfWUoYixhKTtiLnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oKXtyZXR1cm57dHlwZTp0aGlzLnR5cGVfLHNkcDp0aGlzLnNkcF99fTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYi5wcm90b3R5cGUsXCJzZHBcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2RwX30sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYi5wcm90b3R5cGUsXCJ0eXBlXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnR5cGVffSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pO2IucHJvdG90eXBlLnN5bmNCYXJyaWVyPWZ1bmN0aW9uKCl7dmFyIGE9dGhpczttLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuc3luY0JhcnJpZXIoKSBjYWxsZWQuXCIpO1xyXG5yZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24oZixiKXthLnN5bmNCYXJyaWVyRGVlcChmLGIpJiZhLndhaXRVbnRpbENvbm5lY3RlZChhLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5zeW5jQmFycmllclwiKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIFByb21pc2UuYWxsKFthLnJlbW90ZUludm9rZSghMSx0Lm1ldGhvZF9pZF9SVENTZXNzaW9uRGVzY3JpcHRpb25fdC50eXBlLDApLGEucmVtb3RlSW52b2tlKCExLHQubWV0aG9kX2lkX1JUQ1Nlc3Npb25EZXNjcmlwdGlvbl90LnNkcCxcIlwiKV0pfSkudGhlbihmdW5jdGlvbihmKXthLnR5cGVfPWEuY29udmVydFR5cGUoYS5wYXJhbTAoZlswXSkpO2Euc2RwXz1hLnBhcmFtMChmWzFdKTthLnN5bmNCYXJyaWVyUmVzb2x2ZShhKX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oZil7Zj1hLmxvZ1JlbW90ZUludm9rZUVycm9yKGYsXCIuc3luY0JhcnJpZXIoKSBmYWlsZWQhXCIpO2Euc3luY0JhcnJpZXJSZWplY3QoZil9KX0pfTtiLnByb3RvdHlwZS5jb252ZXJ0VHlwZT1cclxuZnVuY3Rpb24oYSl7cmV0dXJuIDA9PWE/XCJvZmZlclwiOjE9PWE/XCJwcmFuc3dlclwiOjI9PWE/XCJhbnN3ZXJcIjpcInJvbGxiYWNrXCJ9O2IuY29udmVydEMySD1mdW5jdGlvbihhKXtyZXR1cm5cIm9mZmVyXCI9PWE/MDpcInByYW5zd2VyXCI9PWE/MTpcImFuc3dlclwiPT1hPzI6M307cmV0dXJuIGJ9KGsuUHJveHlPYmplY3QpO2EuU2Vzc2lvbkRlc2NyaXB0aW9uPWw7dmFyIHA9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oYSxiKXt0aGlzLnR5cGU9YTt0aGlzLnRhcmdldD1ifX0oKSxMPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKCl7fX0oKSxQPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gYShiLGQpe3RoaXMubG9jYWw9Yjt0aGlzLnJlbW90ZT1kfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShhLnByb3RvdHlwZSxcImFjdGl2ZVwiLHtnZXQ6ZnVuY3Rpb24oKXt2YXIgYT0hMTtpZigxPT10aGlzLmxvY2FsfHwxPT10aGlzLnJlbW90ZSlhPSEwO3JldHVybiBhfSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pO1xyXG5yZXR1cm4gYX0oKTtiPWZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGIoZCl7dmFyIGY9YS5jYWxsKHRoaXMsbnVsbCx0LmNsYXNzX2lkX3QuUlRDUGVlckNvbm5lY3Rpb24sMCxrLlByb3h5TW9kZS5Mb2NhbCxudWxsLFtdLGIuZW5zdXJlX2NvbmZpZ19kZWZpbmVkKGQsITEpLHt9KXx8dGhpcztmLnRpbWVlcnN0YXJ0ZWRfPSExO2YuZmlyc3R0aW1lcmVtb3Rlb2ZmZXJfPSExO2YuZmlyc3RzdGFibGVfPSExO2YuZmlyc3R0aW1lbG9jYWxvZmZlcl89ITE7Zi5hdWRpb2NhbGxfPW5ldyBQKCExLCExKTtmLnZpZGVvY2FsbF89bmV3IFAoITEsITEpO2Yuc2NyZWVuc2hhcmluZ2NhbGxfPW5ldyBQKCExLCExKTtmLmNvbmZlcmVuY2VjYWxsXz0hMTtmLmluY29taW5nY2FsbF89ITE7Zi5vdXRnb2luZ2NhbGxfPSExO2YudXNpbmdhc3luY29ubHlfPSExO2YucnRjY29uZmlnXz1iLmVuc3VyZV9jb25maWdfZGVmaW5lZChkLCEwKTttLmxvZ2dlci5sb2coZi51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuY29uc3RydWN0b3Igc2RwU2VtYW50aWNzPVwiK1xyXG5mLnJ0Y2NvbmZpZ18uc2RwU2VtYW50aWNzKTtpZighdC5CVUlMRF9UWVBFX1NESyYmZi5pc1VuaWZpZWQoKSYmIXcuZ2V0UmVkaXJlY3RvcigpLmdldEZlYXR1cmVWYWx1ZSh0LkZFQVRVUkVfbXNfdGVhbXNfd2VicnRjXzFkb3QwKSl0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKFwiQ1dBIGNsaWVudCBkb2VzIG5vdCBzdXBwb3J0IHVuaWZpZWQgc2RwU2VtYW50aWNcIixcImNyZWF0ZVBlZXJDb25uZWN0aW9uXCIpO2YucGVuZGluZ3RyYW5zY2VpdmVyXz0wO2YucGVuZGluZ3RyYWNrXz0wO2YuZGVmZXJyZWRPZmZlckFuc3dlcnM9W107Zi5sb2NhbFN0cmVhbXM9W107Zi5yZW1vdGVTdHJlYW1zPVtdO2Yub25hZGRzdHJlYW1fPW51bGw7Zi5zaWduYWxpbmdTdGF0ZV89XCJzdGFibGVcIjtmLmljZUNvbm5lY3Rpb25TdGF0ZV89XCJuZXdcIjtmLmljZUdhdGhlcmluZ1N0YXRlXz1cIm5ld1wiO2YuaWNlUV89bmV3IHIoZixmdW5jdGlvbihhKXtmLm9uaWNlZ2F0aGVyaW5nc3RhdGV1cGRhdGUoYSl9KTtmLnJlY2VpdmVyc189XHJcbltdO2Yuc2VuZGVyc189W107Zi50cmFuc2NlaXZlcnNfPVtdO2YucmVnaXN0ZXJTdGF0ZUNoYW5nZU5vdGlmaWNhdGlvbihmLm9uU3RhdGVDaGFuZ2UpO2YubG9jYWxkYXRhY2hhbm5lbF89bnVsbDtmLnJlbW90ZWRhdGFjaGFubmVsXz1udWxsO3JldHVybiBmfWUoYixhKTtiLmVuc3VyZV9jb25maWdfZGVmaW5lZD1mdW5jdGlvbihhLGYpe3JldHVybiBNLnRvUnRjQ29uZmlndXJhdGlvbihhLGYpfTtiLnByb3RvdHlwZS5kdW1wU2RwPWZ1bmN0aW9uKGEpe20ubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5kdW1wU2RwXCIpO2EmJihtLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIgIC0tIHR5cGU6IFwiK2EudHlwZSksbS5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiICAtLSBzZHA6IFwiK2Euc2RwKSl9O09iamVjdC5kZWZpbmVQcm9wZXJ0eShiLnByb3RvdHlwZSxcImxvY2FsRGVzY3JpcHRpb25cIix7Z2V0OmZ1bmN0aW9uKCl7bS5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1xyXG5cIi5nZXRfbG9jYWxEZXNjcmlwdGlvbigpIGNhbGxlZC5cIik7cmV0dXJuIHRoaXMubG9jYWxEZXNjcmlwdGlvbl99LHNldDpmdW5jdGlvbihhKXttLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuc2V0X2xvY2FsRGVzY3JpcHRpb24oKSBjYWxsZWQuXCIpO3RoaXMubG9jYWxEZXNjcmlwdGlvbl89YX0sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYi5wcm90b3R5cGUsXCJyZW1vdGVEZXNjcmlwdGlvblwiLHtnZXQ6ZnVuY3Rpb24oKXttLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuZ2V0X3JlbW90ZURlc2NyaXB0aW9uKCkgY2FsbGVkLlwiKTtyZXR1cm4gdGhpcy5yZW1vdGVEZXNjcmlwdGlvbl99LHNldDpmdW5jdGlvbihhKXttLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuZ2V0X3JlbW90ZURlc2NyaXB0aW9uKCkgY2FsbGVkLlwiKTt0aGlzLnJlbW90ZURlc2NyaXB0aW9uXz1hfSxcclxuZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KTtiLnByb3RvdHlwZS5pc1VuaWZpZWQ9ZnVuY3Rpb24oKXtyZXR1cm5cInVuaWZpZWRcIj09dGhpcy5ydGNjb25maWdfLnNkcFNlbWFudGljc3x8XCJ1bmlmaWVkLXBsYW5cIj09dGhpcy5ydGNjb25maWdfLnNkcFNlbWFudGljc307Yi5wcm90b3R5cGUub25TdGF0ZUNoYW5nZT1mdW5jdGlvbigpe3ZhciBhPW5ldyBwKFwiaWNlY29ubmVjdGlvbnN0YXRlY2hhbmdlXCIsdGhpcyk7aWYodGhpcy5vbmljZWNvbm5lY3Rpb25zdGF0ZWNoYW5nZV8pdGhpcy5vbmljZWNvbm5lY3Rpb25zdGF0ZWNoYW5nZV8oYSl9O2IucHJvdG90eXBlLmFkZEljZUNhbmRpZGF0ZT1mdW5jdGlvbihhKXt2YXIgZj10aGlzO20ubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5hZGRJY2VDYW5kaWRhdGUoKSBjYWxsZWQuXCIpO3RoaXMud2FpdFVudGlsQ29ubmVjdGVkKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLmFkZEljZUNhbmRpZGF0ZVwiKS50aGVuKGZ1bmN0aW9uKCl7dmFyIGI9XHJcbntjYW5kaWRhdGU6YS5jYW5kaWRhdGUsc2RwTWlkOmEuc2RwTWlkLHNkcE1MaW5lSW5kZXg6YS5zZHBNTGluZUluZGV4fTtpZih2b2lkIDA9PWIuY2FuZGlkYXRlfHxudWxsPT1iLmNhbmRpZGF0ZSliLmNhbmRpZGF0ZT1cIlwiO3ZvaWQgMD09Yi5zZHBNaWQmJihiLnNkcE1pZD1udWxsKTt2b2lkIDA9PWIuc2RwTUxpbmVJbmRleCYmKGIuc2RwTUxpbmVJbmRleD1udWxsKTtyZXR1cm4obmV3IHYuSWNlQ2FuZGlkYXRlKGYsMCxrLlByb3h5TW9kZS5Mb2NhbCxiKSkuc3luY0JhcnJpZXIoKX0pLnRoZW4oZnVuY3Rpb24oYSl7cmV0dXJuIGYucmVtb3RlSW52b2tlRXgoITEsdC5tZXRob2RfaWRfUlRDUGVlckNvbm5lY3Rpb25fdC5hZGRJY2VDYW5kaWRhdGUsW2FdLHt9KX0pLnRoZW4oZnVuY3Rpb24oKXttLmxvZ2dlci5sb2coZi51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuYWRkSWNlQ2FuZGlkYXRlKCkgc3VjY2Vzcy5cIik7cmV0dXJuIGYudXBkYXRlU2RwRGVzY3JpcHRpb24oITEpfSkudGhlbihmdW5jdGlvbigpe20ubG9nZ2VyLmxvZyhmLnVzZXJfZnJpZW5kbHlfaWQoKStcclxuXCIuYWRkSWNlQ2FuZGlkYXRlKCkgLSBzeW5jIHJlbW90ZSBzZHAgc3VjY2Vzcy5cIil9KVtcImNhdGNoXCJdKGZ1bmN0aW9uKGEpe2YubG9nUmVtb3RlSW52b2tlRXJyb3IoYSxcIi5hZGRJY2VDYW5kaWRhdGUoKSBmYWlsZWQhXCIpfSl9O09iamVjdC5kZWZpbmVQcm9wZXJ0eShiLnByb3RvdHlwZSxcIm9uaWNlY2FuZGlkYXRlXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLm9uaWNlY2FuZGlkYXRlX30sc2V0OmZ1bmN0aW9uKGEpe3ZhciBmPXRoaXM7bS5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLnNldF9vbmljZWNhbmRpZGF0ZSgpIGNhbGxlZC5cIik7dGhpcy5vbmljZWNhbmRpZGF0ZV89YTt0aGlzLndhaXRVbnRpbENvbm5lY3RlZCh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5vbmljZWNhbmRpZGF0ZVwiKS50aGVuKGZ1bmN0aW9uKCl7dmFyIGI9Zi5yZWdpc3RlckNhbGxiYWNrcyghMSxmLmlzTnVsbENhbGxiYWNrKGEpLHQubWV0aG9kX2lkX1JUQ1BlZXJDb25uZWN0aW9uX3Qub25pY2VjYW5kaWRhdGUpO1xyXG5iLnRoZW4oZnVuY3Rpb24oYSl7bS5sb2dnZXIubG9nKGYudXNlcl9mcmllbmRseV9pZCgpK1wiLm9uaWNlY2FuZGlkYXRlIGNhbGxiYWNrIHJlY2VpdmVkISEhXCIpO2E9bmV3IHgoZixmLnBhcmFtMChhKS5vaWQsZik7bnVsbCE9Zi5pY2VRXyYmZi5pY2VRXy5hZGRJY2VDYW5kaWRhdGUoYSl9KTtyZXR1cm4gZi5yZW1vdGVJbnZva2UoITAsdC5tZXRob2RfaWRfUlRDUGVlckNvbm5lY3Rpb25fdC5vbmljZWNhbmRpZGF0ZSxiLnN1Y2Nlc3MpfSlbXCJjYXRjaFwiXShmdW5jdGlvbihhKXtmLmxvZ1JlbW90ZUludm9rZUVycm9yKGEsXCIuc2V0X29uaWNlY2FuZGlkYXRlKCkgZmFpbGVkIVwiKX0pfSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pO2IucHJvdG90eXBlLmNvbnZlcnRJY2VDb25uZWN0aW9uU3RhdGU9ZnVuY3Rpb24oYSl7cmV0dXJuIDA9PWE/XCJuZXdcIjoxPT1hP1wiY2hlY2tpbmdcIjoyPT1hP1wiY29ubmVjdGVkXCI6Mz09YT9cImNvbXBsZXRlZFwiOjQ9PWE/XCJmYWlsZWRcIjo1PT1hP1xyXG5cImRpc2Nvbm5lY3RlZFwiOlwiY2xvc2VkXCJ9O2IucHJvdG90eXBlLmNvbnZlcnRDb25uZWN0aW9uU3RhdGU9ZnVuY3Rpb24oYSl7aWYoMCE9YSl7aWYoMT09YSlyZXR1cm5cImNvbm5lY3RpbmdcIjtpZigyPT1hKXJldHVyblwiY29ubmVjdGVkXCI7aWYoMz09YSlyZXR1cm5cImRpc2Nvbm5lY3RlZFwiO2lmKDQ9PWEpcmV0dXJuXCJmYWlsZWRcIjtpZig1PT1hKXJldHVyblwiY2xvc2VkXCJ9cmV0dXJuXCJuZXdcIn07T2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFwib25jb25uZWN0aW9uc3RhdGVjaGFuZ2VcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMub25jb25uZWN0aW9uc3RhdGVjaGFuZ2VffSxzZXQ6ZnVuY3Rpb24oYSl7dmFyIGY9dGhpczttLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuc2V0X29uY29ubmVjdGlvbnN0YXRlY2hhbmdlKCkgY2FsbGVkLlwiKTt0aGlzLm9uY29ubmVjdGlvbnN0YXRlY2hhbmdlXz1hO3RoaXMud2FpdFVudGlsQ29ubmVjdGVkKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1xyXG5cIi5vbmNvbm5lY3Rpb25zdGF0ZWNoYW5nZVwiKS50aGVuKGZ1bmN0aW9uKCl7dmFyIGI9Zi5yZWdpc3RlckNhbGxiYWNrcyghMSxmLmlzTnVsbENhbGxiYWNrKGEpLHQubWV0aG9kX2lkX1JUQ1BlZXJDb25uZWN0aW9uX3Qub25jb25uZWN0aW9uc3RhdGVjaGFuZ2UpO2IudGhlbihmdW5jdGlvbihhKXttLmxvZ2dlci5sb2coZi51c2VyX2ZyaWVuZGx5X2lkKCkrXCIub25jb25uZWN0aW9uc3RhdGVjaGFuZ2UoKTogc3VjY2VzcyBjYWxsYmFjayByZWNlaXZlZCEhIVwiKTtmLmNvbm5lY3Rpb25TdGF0ZV89Zi5jb252ZXJ0Q29ubmVjdGlvblN0YXRlKGYucGFyYW0wKGEpKTttLmxvZ2dlci5sb2coZi51c2VyX2ZyaWVuZGx5X2lkKCkrXCIgY29ubmVjdGlvblN0YXRlPTpcIitmLmNvbm5lY3Rpb25TdGF0ZV8pO2E9bmV3IHAoXCJjb25uZWN0aW9uc3RhdGVjaGFuZ2VcIixmKTtpZihmLm9uY29ubmVjdGlvbnN0YXRlY2hhbmdlXylmLm9uY29ubmVjdGlvbnN0YXRlY2hhbmdlXyhhKX0pO3JldHVybiBmLnJlbW90ZUludm9rZSghMCxcclxudC5tZXRob2RfaWRfUlRDUGVlckNvbm5lY3Rpb25fdC5vbmNvbm5lY3Rpb25zdGF0ZWNoYW5nZSxiLnN1Y2Nlc3MpfSlbXCJjYXRjaFwiXShmdW5jdGlvbihhKXtmLmxvZ1JlbW90ZUludm9rZUVycm9yKGEsXCIuc2V0X29uY29ubmVjdGlvbnN0YXRlY2hhbmdlKCkgZmFpbGVkIVwiKX0pfSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pO2IucHJvdG90eXBlLmdldF9jb25uZWN0aW9uU3RhdGU9ZnVuY3Rpb24oKXttLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuZ2V0X2Nvbm5lY3Rpb25TdGF0ZSgpIGNhbGxlZCwgdmFsdWUgPSBcIit0aGlzLmNvbm5lY3Rpb25TdGF0ZV8pO3JldHVybiB0aGlzLmlzUmVkaXJlY3RlZCgpP3RoaXMuY29ubmVjdGlvblN0YXRlXzpcImZhaWxlZFwifTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYi5wcm90b3R5cGUsXCJvbmljZWNvbm5lY3Rpb25zdGF0ZWNoYW5nZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5vbmljZWNvbm5lY3Rpb25zdGF0ZWNoYW5nZV99LFxyXG5zZXQ6ZnVuY3Rpb24oYSl7dmFyIGY9dGhpczttLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuc2V0X29uaWNlY29ubmVjdGlvbnN0YXRlY2hhbmdlKCkgY2FsbGVkLlwiKTt0aGlzLm9uaWNlY29ubmVjdGlvbnN0YXRlY2hhbmdlXz1hO3RoaXMud2FpdFVudGlsQ29ubmVjdGVkKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLm9uaWNlY29ubmVjdGlvbnN0YXRlY2hhbmdlXCIpLnRoZW4oZnVuY3Rpb24oKXt2YXIgYj1mLnJlZ2lzdGVyQ2FsbGJhY2tzKCExLGYuaXNOdWxsQ2FsbGJhY2soYSksdC5tZXRob2RfaWRfUlRDUGVlckNvbm5lY3Rpb25fdC5vbmljZWNvbm5lY3Rpb25zdGF0ZWNoYW5nZSk7Yi50aGVuKGZ1bmN0aW9uKGEpe20ubG9nZ2VyLmxvZyhmLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5vbmljZWNvbm5lY3Rpb25zdGF0ZWNoYW5nZSgpOiBzdWNjZXNzIGNhbGxiYWNrIHJlY2VpdmVkISEhXCIpO2YuaWNlQ29ubmVjdGlvblN0YXRlXz1mLmNvbnZlcnRJY2VDb25uZWN0aW9uU3RhdGUoZi5wYXJhbTAoYSkpO1xyXG5hPW5ldyBwKFwiaWNlY29ubmVjdGlvbnN0YXRlY2hhbmdlXCIsZik7aWYoZi5vbmljZWNvbm5lY3Rpb25zdGF0ZWNoYW5nZV8pZi5vbmljZWNvbm5lY3Rpb25zdGF0ZWNoYW5nZV8oYSl9KTtyZXR1cm4gZi5yZW1vdGVJbnZva2UoITAsdC5tZXRob2RfaWRfUlRDUGVlckNvbm5lY3Rpb25fdC5vbmljZWNvbm5lY3Rpb25zdGF0ZWNoYW5nZSxiLnN1Y2Nlc3MpfSlbXCJjYXRjaFwiXShmdW5jdGlvbihhKXtmLmxvZ1JlbW90ZUludm9rZUVycm9yKGEsXCIuc2V0X29uaWNlY29ubmVjdGlvbnN0YXRlY2hhbmdlKCkgZmFpbGVkIVwiKX0pfSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShiLnByb3RvdHlwZSxcImljZUNvbm5lY3Rpb25TdGF0ZVwiLHtnZXQ6ZnVuY3Rpb24oKXttLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuZ2V0X2ljZUNvbm5lY3Rpb25TdGF0ZSgpIGNhbGxlZCwgdmFsdWUgPSBcIit0aGlzLmljZUNvbm5lY3Rpb25TdGF0ZV8pO1xyXG5yZXR1cm4gdGhpcy5pc1JlZGlyZWN0ZWQoKT90aGlzLmljZUNvbm5lY3Rpb25TdGF0ZV86XCJmYWlsZWRcIn0sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KTtiLnByb3RvdHlwZS5jb252ZXJ0SWNlR2F0aGVyaW5nU3RhdGU9ZnVuY3Rpb24oYSl7cmV0dXJuIDA9PWE/XCJuZXdcIjoxPT1hP1wiZ2F0aGVyaW5nXCI6XCJjb21wbGV0ZVwifTtiLnByb3RvdHlwZS5vbmljZWdhdGhlcmluZ3N0YXRldXBkYXRlPWZ1bmN0aW9uKGEpe20ubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5vbmljZWdhdGhlcmluZ3N0YXRldXBkYXRlKCkgY3VycmVudDpcIit0aGlzLmljZUdhdGhlcmluZ1N0YXRlXytcIiB1cGRhdGluZyB0bzpcIithKTt0aGlzLmljZUdhdGhlcmluZ1N0YXRlXz1hO20ubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5vbmljZWdhdGhlcmluZ3N0YXRldXBkYXRlKCkgYWZ0ZXIgdXBkYXRlOiBpY2VHYXRoZXJpbmdTdGF0ZV86XCIrdGhpcy5pY2VHYXRoZXJpbmdTdGF0ZV8pfTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFwib25pY2VnYXRoZXJpbmdzdGF0ZWNoYW5nZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5vbmljZWdhdGhlcmluZ3N0YXRlY2hhbmdlX30sc2V0OmZ1bmN0aW9uKGEpe3ZhciBmPXRoaXM7bS5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLnNldF9vbmljZWdhdGhlcmluZ3N0YXRlY2hhbmdlKCkgY2FsbGVkLlwiKTt0aGlzLm9uaWNlZ2F0aGVyaW5nc3RhdGVjaGFuZ2VfPWE7dGhpcy53YWl0VW50aWxDb25uZWN0ZWQodGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIub25pY2VnYXRoZXJpbmdzdGF0ZWNoYW5nZVwiKS50aGVuKGZ1bmN0aW9uKCl7dmFyIGI9Zi5yZWdpc3RlckNhbGxiYWNrcyghMSxmLmlzTnVsbENhbGxiYWNrKGEpLHQubWV0aG9kX2lkX1JUQ1BlZXJDb25uZWN0aW9uX3Qub25pY2VnYXRoZXJpbmdzdGF0ZWNoYW5nZSk7Yi50aGVuKGZ1bmN0aW9uKGEpe20ubG9nZ2VyLmxvZyhmLnVzZXJfZnJpZW5kbHlfaWQoKStcclxuXCIub25pY2VnYXRoZXJpbmdzdGF0ZWNoYW5nZSgpOiBjYWxsYmFjayByZWNlaXZlZCEhIVwiKTthPWYuY29udmVydEljZUdhdGhlcmluZ1N0YXRlKGYucGFyYW0wKGEpKTtudWxsIT1mLmljZVFfJiZmLmljZVFfLnB1c2hTdGF0ZShhKX0pO3JldHVybiBmLnJlbW90ZUludm9rZSghMCx0Lm1ldGhvZF9pZF9SVENQZWVyQ29ubmVjdGlvbl90Lm9uaWNlZ2F0aGVyaW5nc3RhdGVjaGFuZ2UsYi5zdWNjZXNzKX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oYSl7Zi5sb2dSZW1vdGVJbnZva2VFcnJvcihhLFwiLnNldF9vbmljZWdhdGhlcmluZ3N0YXRlY2hhbmdlKCkgZmFpbGVkIVwiKX0pfSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShiLnByb3RvdHlwZSxcImljZUdhdGhlcmluZ1N0YXRlXCIse2dldDpmdW5jdGlvbigpe20ubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5nZXRfaWNlR2F0aGVyaW5nU3RhdGUoKSBjYWxsZWQsIHZhbHVlID0gXCIrXHJcbnRoaXMuaWNlR2F0aGVyaW5nU3RhdGVfKTtyZXR1cm4gdGhpcy5pY2VHYXRoZXJpbmdTdGF0ZV99LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSk7Yi5wcm90b3R5cGUuY29udmVydFNpZ25hbFN0YXRlPWZ1bmN0aW9uKGEpe3JldHVybiAwPT1hP1wic3RhYmxlXCI6MT09YT9cImhhdmUtbG9jYWwtb2ZmZXJcIjoyPT1hP1wiaGF2ZS1sb2NhbC1wcmFuc3dlclwiOjM9PWE/XCJoYXZlLXJlbW90ZS1vZmZlclwiOjQ9PWE/XCJoYXZlLXJlbW90ZS1wcmFuc3dlclwiOlwiY2xvc2VkXCJ9O2IucHJvdG90eXBlLlRlbGVtdHJ5UmVhZGluZ3NfPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcztcImhhdmUtbG9jYWwtb2ZmZXJcIj09dGhpcy5zaWduYWxpbmdTdGF0ZV8mJjA9PXRoaXMuZmlyc3R0aW1lbG9jYWxvZmZlcl8mJjA9PXRoaXMuZmlyc3R0aW1lcmVtb3Rlb2ZmZXJfJiYodGhpcy5vdXRnb2luZ2NhbGxzdGFydF89KG5ldyBEYXRlKS5nZXRUaW1lKCksMD09dGhpcy5vdXRnb2luZ2NhbGxfJiYodGhpcy5TZW5kVGVsZW1ldHJ5RGF0YSh5LnRlbF9rZXlfUGVyZkNhbGxTdGF0ZSxcclxueS50ZWxfQ2FsbFN0YXRlLmFjdGl2ZSwxKSx0aGlzLlNlbmRUZWxlbWV0cnlEYXRhKHkudGVsX2tleV9QZXJmQ2FsbERpcmVjdGlvbix5LnRlbF9DYWxsRGlyZWN0aW9uLm91dGdvaW5nLDEpLHRoaXMub3V0Z29pbmdjYWxsXz0hMCksdGhpcy5maXJzdHRpbWVsb2NhbG9mZmVyXz0hMCk7XCJoYXZlLXJlbW90ZS1vZmZlclwiPT10aGlzLnNpZ25hbGluZ1N0YXRlXyYmMD09dGhpcy5maXJzdHRpbWVyZW1vdGVvZmZlcl8mJjA9PXRoaXMuZmlyc3R0aW1lbG9jYWxvZmZlcl8mJih0aGlzLmluY29taW5nY2FsbHN0YXJ0Xz0obmV3IERhdGUpLmdldFRpbWUoKSwwPT10aGlzLmluY29taW5nY2FsbF8mJih0aGlzLlNlbmRUZWxlbWV0cnlEYXRhKHkudGVsX2tleV9QZXJmQ2FsbFN0YXRlLHkudGVsX0NhbGxTdGF0ZS5hY3RpdmUsMSksdGhpcy5TZW5kVGVsZW1ldHJ5RGF0YSh5LnRlbF9rZXlfUGVyZkNhbGxEaXJlY3Rpb24seS50ZWxfQ2FsbERpcmVjdGlvbi5pbmNvbWluZywxKSx0aGlzLmluY29taW5nY2FsbF89XHJcbiEwKSx0aGlzLmZpcnN0dGltZXJlbW90ZW9mZmVyXz0hMCk7XCJzdGFibGVcIj09dGhpcy5zaWduYWxpbmdTdGF0ZV8mJjA9PXRoaXMuZmlyc3RzdGFibGVfJiYodGhpcy5jYWxsc3RhcnRUaW1lXz0obmV3IERhdGUpLmdldFRpbWUoKSx0aGlzLmZpcnN0c3RhYmxlXz10aGlzLnRpbWVlcnN0YXJ0ZWRfPSEwKTtpZihcInN0YWJsZVwiPT10aGlzLnNpZ25hbGluZ1N0YXRlXyl7Zm9yKHZhciBmPTAsYj10aGlzLmxvY2FsU3RyZWFtcztmPGIubGVuZ3RoO2YrKyl7dmFyIGQ9YltmXTsxPD1kLmdldEF1ZGlvVHJhY2tzKCkubGVuZ3RoJiYwPT10aGlzLmF1ZGlvY2FsbF8ubG9jYWwmJih0aGlzLlNlbmRUZWxlbWV0cnlEYXRhKHkudGVsX2tleV9QZXJmQ2FsbFR5cGUseS50ZWxfQ2FsbFR5cGUuYXVkaW8sMSksdGhpcy5hdWRpb2NhbGxfLmxvY2FsPSEwKTtkPWQuZ2V0VmlkZW9UcmFja3MoKTtpZigxPD1kLmxlbmd0aClmb3IodmFyIGM9MCxnPWQ7YzxnLmxlbmd0aDtjKyspZD1nW2NdLDE9PWQuZ2V0U2V0dGluZ3MoKS5kZXZpY2VJZC5pbmNsdWRlcyhcImRpc3BsYXlcIik/XHJcbjA9PXRoaXMuc2NyZWVuc2hhcmluZ2NhbGxfLmxvY2FsJiYodGhpcy5TZW5kVGVsZW1ldHJ5RGF0YSh5LnRlbF9rZXlfUGVyZkNhbGxUeXBlLHkudGVsX0NhbGxUeXBlLmRzaGFyZSwxKSx0aGlzLnNjcmVlbnNoYXJpbmdjYWxsXy5sb2NhbD0hMCk6MD09dGhpcy52aWRlb2NhbGxfLmxvY2FsJiYodGhpcy5TZW5kVGVsZW1ldHJ5RGF0YSh5LnRlbF9rZXlfUGVyZkNhbGxUeXBlLHkudGVsX0NhbGxUeXBlLnZpZGVvLDEpLHRoaXMudmlkZW9jYWxsXy5sb2NhbD0hMCl9Zj0wO2ZvcihiPXRoaXMucmVtb3RlU3RyZWFtcztmPGIubGVuZ3RoO2YrKylpZihkPWJbZl0sMTw9ZC5nZXRBdWRpb1RyYWNrcygpLmxlbmd0aCYmMD09dGhpcy5hdWRpb2NhbGxfLnJlbW90ZSYmKHRoaXMuU2VuZFRlbGVtZXRyeURhdGEoeS50ZWxfa2V5X1BlcmZDYWxsVHlwZSx5LnRlbF9DYWxsVHlwZS5hdWRpbywxKSx0aGlzLmF1ZGlvY2FsbF8ucmVtb3RlPSEwKSxjPWQuZ2V0VmlkZW9UcmFja3MoKSwxPD1jLmxlbmd0aClmb3IoZD1cclxuMDtkPGMubGVuZ3RoO2QrKykxPT1jW2RdLmlkLmluY2x1ZGVzKFwiYXBwbGljYXRpb25zaGFyaW5nVmlkZW9cIik/MD09dGhpcy5zY3JlZW5zaGFyaW5nY2FsbF8ucmVtb3RlJiYodGhpcy5TZW5kVGVsZW1ldHJ5RGF0YSh5LnRlbF9rZXlfUGVyZkNhbGxUeXBlLHkudGVsX0NhbGxUeXBlLmRzaGFyZSwxKSx0aGlzLnNjcmVlbnNoYXJpbmdjYWxsXy5yZW1vdGU9ITApOjA9PXRoaXMudmlkZW9jYWxsXy5yZW1vdGUmJih0aGlzLlNlbmRUZWxlbWV0cnlEYXRhKHkudGVsX2tleV9QZXJmQ2FsbFR5cGUseS50ZWxfQ2FsbFR5cGUudmlkZW8sMSksdGhpcy52aWRlb2NhbGxfLnJlbW90ZT0hMCk7dGhpcy5nZXRSZWNlaXZlcnNBc3luYygpLnRoZW4oZnVuY3Rpb24oZil7MjxmLmxlbmd0aCYmMD09YS5jb25mZXJlbmNlY2FsbF8mJihhLlNlbmRUZWxlbWV0cnlEYXRhKHkudGVsX2tleV9QZXJmQ2FsbFR5cGUseS50ZWxfQ2FsbFR5cGUubXVsdGksMSksYS5jb25mZXJlbmNlY2FsbF89ITApfSl9fTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFwib25zaWduYWxpbmdzdGF0ZWNoYW5nZVwiLHtzZXQ6ZnVuY3Rpb24oYSl7dmFyIGY9dGhpczttLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuc2V0X29uc2lnbmFsaW5nc3RhdGVjaGFuZ2UoKSBjYWxsZWQuXCIpO3RoaXMub25zaWduYWxpbmdzdGF0ZWNoYW5nZV89YTt0aGlzLndhaXRVbnRpbENvbm5lY3RlZCh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5vbnNpZ25hbGluZ3N0YXRlY2hhbmdlZFwiKS50aGVuKGZ1bmN0aW9uKCl7dmFyIGI9Zi5yZWdpc3RlckNhbGxiYWNrcyghMSxmLmlzTnVsbENhbGxiYWNrKGEpLHQubWV0aG9kX2lkX1JUQ1BlZXJDb25uZWN0aW9uX3Qub25zaWduYWxpbmdzdGF0ZWNoYW5nZSk7Yi50aGVuKGZ1bmN0aW9uKGEpe20ubG9nZ2VyLmxvZyhmLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5vbnNpZ25hbGluZ3N0YXRlY2hhbmdlKCk6IGNhbGxiYWNrIHJlY2VpdmVkISEhXCIpO2Yuc2lnbmFsaW5nU3RhdGVfPVxyXG5mLmNvbnZlcnRTaWduYWxTdGF0ZShmLnBhcmFtMChhKSk7YT1uZXcgcChcIm9uc2lnbmFsaW5nc3RhdGVjaGFuZ2VcIixmKTtpZihmLm9uc2lnbmFsaW5nc3RhdGVjaGFuZ2VfKWYub25zaWduYWxpbmdzdGF0ZWNoYW5nZV8oYSk7Zi5UZWxlbXRyeVJlYWRpbmdzXygpfSk7cmV0dXJuIGYucmVtb3RlSW52b2tlKCEwLHQubWV0aG9kX2lkX1JUQ1BlZXJDb25uZWN0aW9uX3Qub25zaWduYWxpbmdzdGF0ZWNoYW5nZSxiLnN1Y2Nlc3MpfSlbXCJjYXRjaFwiXShmdW5jdGlvbihhKXtmLmxvZ1JlbW90ZUludm9rZUVycm9yKGEsXCIuc2V0X29uc2lnbmFsaW5nc3RhdGVjaGFuZ2UoKSBmYWlsZWQhXCIpfSl9LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFwib25zaWduYWxpbmdzdGF0ZWNoYW5nZWRcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMub25zaWduYWxpbmdzdGF0ZWNoYW5nZV99LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSk7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShiLnByb3RvdHlwZSxcIm9udHJhY2tcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMub250cmFja199LHNldDpmdW5jdGlvbihhKXt2YXIgZj10aGlzO20ubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5zZXRfb250cmFjaygpIGNhbGxlZC5cIik7dGhpcy5vbnRyYWNrXz1hO3RoaXMud2FpdFVudGlsQ29ubmVjdGVkKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLm9udHJhY2tcIikudGhlbihmdW5jdGlvbigpe3ZhciBiPWYucmVnaXN0ZXJDYWxsYmFja3MoITEsZi5pc051bGxDYWxsYmFjayhhKSx0Lm1ldGhvZF9pZF9SVENQZWVyQ29ubmVjdGlvbl90Lm9udHJhY2spO2IudGhlbihmdW5jdGlvbihhKXtyZXR1cm4gdShmLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24oKXt2YXIgZixiLGQsYyxyLEssQyxlLHgsQSx0LHY9dGhpcztyZXR1cm4gaCh0aGlzLGZ1bmN0aW9uKGgpe20ubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcclxuXCIub250cmFjaygpOiBjYWxsYmFjayByZWNlaXZlZCEhIVwiKTtmPW5ldyBMO2I9W107ZD10aGlzLnBhcmFtMChhKTt2b2lkIDAhPWQudHJhY2smJiExPT09ZC50cmFjay5pc19udWxsJiYobS5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiIGFkZGluZyBhIFJlbW90ZU1lZGlhVHJhY2sgd2l0aCBvaWQ6XCIrZC50cmFjay5vaWQpLGM9bmV3IHEuUmVtb3RlTWVkaWFUcmFjayh0aGlzLGQudHJhY2sub2lkKSxiLnB1c2goYy5zeW5jQmFycmllcigpKSk7Zi50cmFjaz1jO3ZvaWQgMCE9ZC5yZWNlaXZlciYmITE9PT1kLnJlY2VpdmVyLmlzX251bGwmJihyPXRoaXMucmVjZWl2ZXJzXy5maW5kKGZ1bmN0aW9uKGEpe3JldHVybiBhLm9iamVjdF9pZCgpPT09ZC5yZWNlaXZlci5vaWR9KSx2b2lkIDA9PT1yJiYobS5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiIGFkZGluZyBhIFJ0cFJlY2VpdmVyIHdpdGggb2lkOlwiK2QucmVjZWl2ZXIub2lkKSxyPW5ldyBuLlJ0cFJlY2VpdmVyKHRoaXMsXHJcbmQucmVjZWl2ZXIub2lkLGsuUHJveHlNb2RlLlJlbW90ZSx0aGlzLmlzVW5pZmllZCgpLGMpKSxiLnB1c2goci5zeW5jQmFycmllcigpKSk7Zi5yZWNlaXZlcj1yO2cuUmVtb3RlU2Vzc2lvbi5pc0ZlYXR1cmVXZWJydGMxZG90MFN1cHBvcnRlZCgpJiZ2b2lkIDAhPWQudHJhbnNjZWl2ZXImJiExPT09ZC50cmFuc2NlaXZlci5pc19udWxsJiYoSz10aGlzLnRyYW5zY2VpdmVyc18uZmluZChmdW5jdGlvbihhKXtyZXR1cm4gYS5vYmplY3RfaWQoKT09PWQudHJhbnNjZWl2ZXIub2lkfSksdm9pZCAwPT09SyYmKG0ubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIiBhZGRpbmcgYSBSdHBUcmFuc2NlaXZlciB3aXRoIG9pZDpcIitkLnRyYW5zY2VpdmVyLm9pZCksSz1uZXcgei5SdHBUcmFuc2NlaXZlcih0aGlzLGQudHJhbnNjZWl2ZXIub2lkLGsuUHJveHlNb2RlLlJlbW90ZSx0aGlzLmlzVW5pZmllZCgpLHouUnRjUnRwVHJhbnNjZWl2ZXJEaXJlY3Rpb24uaW5hY3RpdmUsXHJcbnIpLHRoaXMudHJhbnNjZWl2ZXJzXy5wdXNoKEspKSxiLnB1c2goSy5zeW5jQmFycmllcigpKSk7Zi50cmFuc2NlaXZlcj1LO2Yuc3RyZWFtcz1bXTtpZih2b2lkIDAhPWQuc3RyZWFtcylmb3IoQz1mdW5jdGlvbihhKXt2YXIgZD1lLnJlbW90ZVN0cmVhbXMuZmluZChmdW5jdGlvbihmKXtyZXR1cm4hMT09PWEuaXNfbnVsbCYmZi5vYmplY3RfaWQoKT09PWEub2lkfSk7dm9pZCAwPT09ZCYmKG0ubG9nZ2VyLmxvZyhlLnVzZXJfZnJpZW5kbHlfaWQoKStcIiBhZGRpbmcgYSBSZW1vdGVTdHJlYW0gd2l0aCBvaWQ6XCIrYS5vaWQpLGQ9bmV3IHEuUmVtb3RlU3RyZWFtKGUsYS5vaWQsay5Qcm94eU1vZGUuUmVtb3RlKSxlLnJlbW90ZVN0cmVhbXMucHVzaChkKSk7Yi5wdXNoKGQuc3luY0JhcnJpZXIoKSk7Zi5zdHJlYW1zLnB1c2goZCl9LGU9dGhpcyx4PTAsQT1kLnN0cmVhbXM7eDxBLmxlbmd0aDt4KyspdD1BW3hdLEModCk7bS5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1xyXG5cIi5vbnRyYWNrKCk6IC5wcm9wLnN5bmNCYXJyaWVyIHN0YXJ0XCIpO1Byb21pc2UuYWxsKGIpLnRoZW4oZnVuY3Rpb24oKXttLmxvZ2dlci5sb2codi51c2VyX2ZyaWVuZGx5X2lkKCkrXCIub250cmFjaygpOiBub3RpZmllZCEhISB3aXRoIGV2dDogXCIrZik7Zm9yKHZhciBhPTAsYj1mLnN0cmVhbXM7YTxiLmxlbmd0aDthKyspYlthXS50b2dnbGVBdWRpbyghMSk7aWYodi5vbnRyYWNrXyl2Lm9udHJhY2tfKGYpfSlbXCJjYXRjaFwiXShmdW5jdGlvbihhKXt2LmxvZ1JlbW90ZUludm9rZUVycm9yKGEsXCIub250cmFjaygpOiAucHJvcC5zeW5jQmFycmllciBmYWlsZWQuXCIpfSk7cmV0dXJuWzJdfSl9KX0pO3JldHVybiBmLnJlbW90ZUludm9rZSghMCx0Lm1ldGhvZF9pZF9SVENQZWVyQ29ubmVjdGlvbl90Lm9udHJhY2ssYi5zdWNjZXNzKX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oYSl7Zi5sb2dSZW1vdGVJbnZva2VFcnJvcihhLFwiLnNldF9vbnRyYWNrKCk6IGZhaWxlZC5cIil9KX0sZW51bWVyYWJsZTohMSxcclxuY29uZmlndXJhYmxlOiEwfSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFwic2lnbmFsaW5nU3RhdGVcIix7Z2V0OmZ1bmN0aW9uKCl7bS5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLmdldF9zaWduYWxpbmdTdGF0ZSgpIGNhbGxlZCwgdmFsdWUgPSBcIit0aGlzLnNpZ25hbGluZ1N0YXRlXyk7cmV0dXJuIHRoaXMuc2lnbmFsaW5nU3RhdGVffSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShiLnByb3RvdHlwZSxcIm9ubmVnb3RpYXRpb25uZWVkZWRcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMub25uZWdvdGlhdGlvbm5lZWRlZF99LHNldDpmdW5jdGlvbihhKXt2YXIgZj10aGlzO20ubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5zZXRfb25uZWdvdGlhdGlvbm5lZWRlZCgpIGNhbGxlZC5cIik7dGhpcy5vbm5lZ290aWF0aW9ubmVlZGVkXz1hO3RoaXMud2FpdFVudGlsQ29ubmVjdGVkKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1xyXG5cIi5vbm5lZ290aWF0aW9ubmVlZGVkXCIpLnRoZW4oZnVuY3Rpb24oKXt2YXIgYj1mLnJlZ2lzdGVyQ2FsbGJhY2tzKCExLGYuaXNOdWxsQ2FsbGJhY2soYSksdC5tZXRob2RfaWRfUlRDUGVlckNvbm5lY3Rpb25fdC5vbm5lZ290aWF0aW9ubmVlZGVkKTtiLnRoZW4oZnVuY3Rpb24oKXttLmxvZ2dlci5sb2coZi51c2VyX2ZyaWVuZGx5X2lkKCkrXCIub25uZWdvdGlhdGlvbm5lZWRlZCgpOiBjYWxsYmFjayByZWNlaXZlZCEhIVwiKTt2YXIgYT1uZXcgcChcIm5lZ290aWF0aW9ubmVlZGVkXCIsZik7aWYoZi5vbm5lZ290aWF0aW9ubmVlZGVkXylmLm9ubmVnb3RpYXRpb25uZWVkZWRfKGEpfSk7cmV0dXJuIGYucmVtb3RlSW52b2tlKCEwLHQubWV0aG9kX2lkX1JUQ1BlZXJDb25uZWN0aW9uX3Qub25uZWdvdGlhdGlvbm5lZWRlZCxiLnN1Y2Nlc3MpfSlbXCJjYXRjaFwiXShmdW5jdGlvbihhKXtmLmxvZ1JlbW90ZUludm9rZUVycm9yKGEsXCIuc2V0X29ubmVnb3RpYXRpb25uZWVkZWQoKTogZmFpbGVkLlwiKX0pfSxcclxuZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KTtiLnByb3RvdHlwZS5kdW1wQ29uc3RyYWludHM9ZnVuY3Rpb24oYSl7bS5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiY29uc3RyYWludHM6IFwiK2EpO3ZvaWQgMCE9PWEmJjAhPT1PYmplY3Qua2V5cyhhKS5sZW5ndGh8fG0ubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcImNvbnN0cmFpbnRzIGVpdGhlciB1bmRlZmluZWQgb3IgZW1wdHkhXCIpO2EmJihtLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIgIC0tIHZpZGVvOiBcIithLm9mZmVyVG9SZWNlaXZlVmlkZW8pLG0ubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIiAgLS0gYXVkaW86IFwiK2Eub2ZmZXJUb1JlY2VpdmVBdWRpbyksbS5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiICAtLSBpY2VSZXN0YXJ0OiBcIithLmljZVJlc3RhcnQpLG0ubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcclxuXCIgIC0tIHZvaWNlQWN0aXZpdHlEZXRlY3Rpb246IFwiK2Eudm9pY2VBY3Rpdml0eURldGVjdGlvbikpfTtiLnByb3RvdHlwZS5maXhfY29uc3RyYWludHM9ZnVuY3Rpb24oYSl7dGhpcy5kdW1wQ29uc3RyYWludHMoYSk7dmFyIGY9e307dGhpcy5pc1VuaWZpZWQoKXx8KGY9e2F1ZGlvOiEwLHZpZGVvOiEwfSk7aWYoYSl7aWYodm9pZCAwIT09YS52aWRlb3x8dm9pZCAwIT09YS5vZmZlclRvUmVjZWl2ZVZpZGVvKWYudmlkZW89YS5vZmZlclRvUmVjZWl2ZVZpZGVvO2lmKHZvaWQgMCE9PWEuYXVkaW98fHZvaWQgMCE9PWEub2ZmZXJUb1JlY2VpdmVBdWRpbylmLmF1ZGlvPWEub2ZmZXJUb1JlY2VpdmVBdWRpbzt2b2lkIDAhPT1hLmljZVJlc3RhcnQmJihmLmljZVJlc3RhcnQ9YS5pY2VSZXN0YXJ0KTt2b2lkIDAhPT1hLnZvaWNlQWN0aXZpdHlEZXRlY3Rpb24mJihmLnZvaWNlQWN0aXZpdHlEZXRlY3Rpb249YS52b2ljZUFjdGl2aXR5RGV0ZWN0aW9uKX1yZXR1cm4gZn07Yi5wcm90b3R5cGUuY3JlYXRlT2ZmZXI9XHJcbmZ1bmN0aW9uKGEsZixiKXttLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuY3JlYXRlT2ZmZXIoKSBjYWxsZWQuXCIsSlNPTi5zdHJpbmdpZnkoYSkpO3JldHVybiB0aGlzLmlzVW5pZmllZCgpP3ZvaWQgMD09YT90aGlzLmNyZWF0ZU9mZmVyX3YyKCk6YT90aGlzLmNyZWF0ZU9mZmVyX3YyKGEpOnRoaXMuY3JlYXRlT2ZmZXJfdjEoYSxmLGIpOnRoaXMuY3JlYXRlT2ZmZXJfdjEoYSxmLGIpfTtiLnByb3RvdHlwZS5jcmVhdGVPZmZlcl92Mj1mdW5jdGlvbihhKXt2YXIgZj10aGlzO20ubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5jcmVhdGVPZmZlcl92MigpIGNhbGxlZC5cIixKU09OLnN0cmluZ2lmeShhKSk7cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKGIsZCl7Zi5jcmVhdGVPZmZlcl92MShmdW5jdGlvbihhKXttLmxvZ2dlci5sb2coZi51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuY3JlYXRlT2ZmZXJfdjIoKTogZ290IHNkcCEhIVwiLEpTT04uc3RyaW5naWZ5KGEpKTtcclxuYT1uZXcgRihhLnR5cGUsYS5zZHApO2IoYSl9LGZ1bmN0aW9uKGEpe3ZvaWQgMCE9YSYmKGE9Zi5sb2dSZW1vdGVJbnZva2VFcnJvcihhLFwiLmNyZWF0ZU9mZmVyX3YyKCkgZmFpbGVkLlwiKSxkKGEpKX0sYSl9KX07Yi5wcm90b3R5cGUuY3JlYXRlT2ZmZXJfdjE9ZnVuY3Rpb24oYSxmLGIpe3ZhciBkPXRoaXM7bS5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLmNyZWF0ZU9mZmVyX3YxKCkuXCIsSlNPTi5zdHJpbmdpZnkoYikpO3ZhciBjPVt0aGlzLndhaXRVbnRpbENvbm5lY3RlZCh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5jcmVhdGVPZmZlcl92MVwiKSx0aGlzLndhaXRUcmFuc2NlaXZlckFuZFRyYWNrUmVhZHkodGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuY3JlYXRlT2ZmZXJfdjFcIildO1Byb21pc2UuYWxsKGMpLnRoZW4oZnVuY3Rpb24oKXt2YXIgYT1kLnJlZ2lzdGVyQ2FsbGJhY2tzKCEwLCExLHQubWV0aG9kX2lkX1JUQ1BlZXJDb25uZWN0aW9uX3QuY3JlYXRlT2ZmZXIpO1xyXG5kLnJlbW90ZUludm9rZSghMSx0Lm1ldGhvZF9pZF9SVENQZWVyQ29ubmVjdGlvbl90LmNyZWF0ZU9mZmVyLGEuc3VjY2VzcyxhLmZhaWwsZC5maXhfY29uc3RyYWludHMoYikpO3JldHVybiBhLnByb20oKX0pLnRoZW4oZnVuY3Rpb24oYSl7bS5sb2dnZXIubG9nKGQudXNlcl9mcmllbmRseV9pZCgpK1wiLmNyZWF0ZU9mZmVyX3YxKCk6IHN1Y2Nlc3MgY2FsbGJhY2sgcmVjZWl2ZWQhISFcIik7cmV0dXJuKG5ldyBsKGQsZC5wYXJhbTAoYSkub2lkLGsuUHJveHlNb2RlLlJlbW90ZSkpLnN5bmNCYXJyaWVyKCl9KS50aGVuKGZ1bmN0aW9uKGYpe2EmJmEoZil9KVtcImNhdGNoXCJdKGZ1bmN0aW9uKGEpe3ZvaWQgMCE9YSYmKGE9ZC5sb2dSZW1vdGVJbnZva2VFcnJvcihhLFwiLmNyZWF0ZU9mZmVyX3YxKCkgZmFpbGVkLlwiKSxmJiZmKGEpKX0pfTtiLnByb3RvdHlwZS5jcmVhdGVBbnN3ZXI9ZnVuY3Rpb24oYSxmLGIpe20ubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5jcmVhdGVBbnN3ZXIoKSBjYWxsZWQuXCIsXHJcbkpTT04uc3RyaW5naWZ5KGEpKTtyZXR1cm4gdGhpcy5pc1VuaWZpZWQoKT92b2lkIDA9PWE/dGhpcy5jcmVhdGVBbnN3ZXJfdjIoKTphP3RoaXMuY3JlYXRlQW5zd2VyX3YyKGEpOnRoaXMuY3JlYXRlQW5zd2VyX3YxKGEsZixiKTp0aGlzLmNyZWF0ZUFuc3dlcl92MShhLGYsYil9O2IucHJvdG90eXBlLmNyZWF0ZUFuc3dlcl92Mj1mdW5jdGlvbihhKXt2YXIgZj10aGlzO20ubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5jcmVhdGVBbnN3ZXJfdjIoKSBjYWxsZWQuXCIsSlNPTi5zdHJpbmdpZnkoYSkpO3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihiLGQpe2YuY3JlYXRlQW5zd2VyX3YxKGZ1bmN0aW9uKGEpe20ubG9nZ2VyLmxvZyhmLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5jcmVhdGVBbnN3ZXJfdjIoKTogZ290IHNkcCEhIVwiLEpTT04uc3RyaW5naWZ5KGEpKTthPW5ldyBGKGEudHlwZSxhLnNkcCk7YihhKX0sZnVuY3Rpb24oYSl7dm9pZCAwIT1hJiYoYT1mLmxvZ1JlbW90ZUludm9rZUVycm9yKGEsXHJcblwiLmNyZWF0ZUFuc3dlcl92MigpIGZhaWxlZC5cIiksZChhKSl9LGEpfSl9O2IucHJvdG90eXBlLmNyZWF0ZUFuc3dlcl92MT1mdW5jdGlvbihhLGYsYil7dmFyIGQ9dGhpczttLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuY3JlYXRlQW5zd2VyX3YxKCkgY2FsbGVkLlwiLEpTT04uc3RyaW5naWZ5KGIpKTt2YXIgYz1bdGhpcy53YWl0VW50aWxDb25uZWN0ZWQodGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuY3JlYXRlQW5zd2VyX3YxXCIpLHRoaXMud2FpdFRyYW5zY2VpdmVyQW5kVHJhY2tSZWFkeSh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5jcmVhdGVBbnN3ZXJfdjFcIildO1Byb21pc2UuYWxsKGMpLnRoZW4oZnVuY3Rpb24oKXt2YXIgYT1kLnJlZ2lzdGVyQ2FsbGJhY2tzKCEwLCExLHQubWV0aG9kX2lkX1JUQ1BlZXJDb25uZWN0aW9uX3QuY3JlYXRlQW5zd2VyKTtkLnJlbW90ZUludm9rZSghMSx0Lm1ldGhvZF9pZF9SVENQZWVyQ29ubmVjdGlvbl90LmNyZWF0ZUFuc3dlcixcclxuYS5zdWNjZXNzLGEuZmFpbCxkLmZpeF9jb25zdHJhaW50cyhiKSx7fSk7cmV0dXJuIGEucHJvbSgpfSkudGhlbihmdW5jdGlvbihhKXttLmxvZ2dlci5sb2coZC51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuY3JlYXRlQW5zd2VyX3YxKCk6IHN1Y2Nlc3MgY2FsbGJhY2sgcmVjZWl2ZWQhISFcIik7cmV0dXJuKG5ldyBsKGQsZC5wYXJhbTAoYSkub2lkLGsuUHJveHlNb2RlLlJlbW90ZSkpLnN5bmNCYXJyaWVyKCl9KS50aGVuKGZ1bmN0aW9uKGYpe2EmJmEoZil9KVtcImNhdGNoXCJdKGZ1bmN0aW9uKGEpe2E9ZC5sb2dSZW1vdGVJbnZva2VFcnJvcihhLFwiLmNyZWF0ZUFuc3dlcl92MSgpIGZhaWxlZC5cIik7ZiYmZihhLm1lc3NhZ2UpfSl9O2IucHJvdG90eXBlLnVwZGF0ZVNkcERlc2NyaXB0aW9uPWZ1bmN0aW9uKGEpe20ubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi51cGRhdGVTZHBEZXNjcmlwdGlvbigpIGNhbGxlZC5cIik7dmFyIGY9dGhpcztyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24oYixcclxuZCl7dmFyIGM9W107MT09YT9jLnB1c2goZi5yZW1vdGVJbnZva2UoITEsdC5tZXRob2RfaWRfUlRDUGVlckNvbm5lY3Rpb25fdC5sb2NhbERlc2NyaXB0aW9uLHtvaWQ6MH0pKTpjLnB1c2goZi5yZW1vdGVJbnZva2UoITEsdC5tZXRob2RfaWRfUlRDUGVlckNvbm5lY3Rpb25fdC5yZW1vdGVEZXNjcmlwdGlvbix7b2lkOjB9KSk7UHJvbWlzZS5hbGwoYykudGhlbihmdW5jdGlvbihhKXttLmxvZ2dlci5sb2coZi51c2VyX2ZyaWVuZGx5X2lkKCkrXCIudXBkYXRlU2RwRGVzY3JpcHRpb24oKSByZXNvbHZlZC5cIik7cmV0dXJuKG5ldyBsKGYsZi5wYXJhbTAoYVswXSkub2lkLGsuUHJveHlNb2RlLlJlbW90ZSkpLnN5bmNCYXJyaWVyKCl9KS50aGVuKGZ1bmN0aW9uKGQpezE9PWE/Zi5sb2NhbERlc2NyaXB0aW9uXz1kOmYucmVtb3RlRGVzY3JpcHRpb25fPWQ7bS5sb2dnZXIubG9nKGYudXNlcl9mcmllbmRseV9pZCgpK1wiLnVwZGF0ZVNkcERlc2NyaXB0aW9uKCkgdXBkYXRlZCBzZHBcIik7YigpfSlbXCJjYXRjaFwiXShmdW5jdGlvbihhKXtmLmxvZ1JlbW90ZUludm9rZUVycm9yKGEsXHJcblwic2RwLnN5bmNCYXJyaWVyKCkgZmFpbGVkIVwiKTtkKCl9KX0pfTtiLnByb3RvdHlwZS5zZHBUb1N0cmluZz1mdW5jdGlvbihhKXt2YXIgZj1cIlwiLGI9MDtmb3IoYT1hP2Euc3BsaXQoL1xccj9cXG4vKTpbXTtiPGEubGVuZ3RoO2IrKyl7dmFyIGQ9YVtiXTstMSE9ZC5pbmRleE9mKFwibT1cIiwwKT9mKz1kK1wiXFxcXHJcXFxcblwiOi0xIT1kLmluZGV4T2YoXCJvPS1cIiwwKT9mKz1kK1wiXFxcXHJcXFxcblwiOi0xIT1kLmluZGV4T2YoXCJhPXNzcmNcIiwwKSYmKGYrPWQrXCJcXFxcclxcXFxuXCIpfXJldHVybiBmfTtiLnByb3RvdHlwZS5zZXRMb2NhbERlc2NyaXB0aW9uPWZ1bmN0aW9uKGEsZixiKXttLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuc2V0TG9jYWxEZXNjcmlwdGlvbigpIGNhbGxlZC5cIix0aGlzLnNkcFRvU3RyaW5nKGEuc2RwKSk7aWYoYSBpbnN0YW5jZW9mIEYpcmV0dXJuIHRoaXMuc2V0TG9jYWxEZXNjcmlwdGlvbl92MihhKTtpZihhIGluc3RhbmNlb2YgUlRDU2Vzc2lvbkRlc2NyaXB0aW9uJiZcclxuZilyZXR1cm4gdGhpcy5zZXRMb2NhbERlc2NyaXB0aW9uX3YxKGEsZixiKTtmPXZvaWQgMDthP2Y9bmV3IEYoYS50eXBlLGEuc2RwKToobS5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLnNldExvY2FsRGVzY3JpcHRpb24oKSBlbXB0eSBwYXJhbTEsIHNldHRpbmcgc2RwIHR5cGUgdG8gcm9sbGJhY2tcIiksYT12b2lkIDAsYT1cImhhdmUtcmVtb3RlLW9mZmVyXCI9PXRoaXMuc2lnbmFsaW5nU3RhdGVfP1wiYW5zd2VyXCI6XCJoYXZlLWxvY2FsLXByYW5zd2VyXCI9PXRoaXMuc2lnbmFsaW5nU3RhdGVffHxcImhhdmUtcmVtb3RlLXByYW5zd2VyXCI9PXRoaXMuc2lnbmFsaW5nU3RhdGVfP1wicHJhbnN3ZXJcIjpcIm9mZmVyXCIsZj1uZXcgRihhLFwiXCIpKTtyZXR1cm4gdGhpcy5zZXRMb2NhbERlc2NyaXB0aW9uX3YyKGYpfTtiLnByb3RvdHlwZS5zZXRMb2NhbERlc2NyaXB0aW9uX3YyPWZ1bmN0aW9uKGEpe3ZhciBmPXRoaXM7bS5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1xyXG5cIi5zZXRMb2NhbERlc2NyaXB0aW9uX3YyKCkgY2FsbGVkLlwiKTtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24oYixkKXtmLndhaXRVbnRpbENvbm5lY3RlZChmLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5zZXRMb2NhbERlc2NyaXB0aW9uX3YyXCIpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4obmV3IGwoZiwwLGsuUHJveHlNb2RlLkxvY2FsLHt0eXBlOmwuY29udmVydEMySChhLnR5cGUpLHNkcDphLnNkcH0pKS5zeW5jQmFycmllcigpfSkudGhlbihmdW5jdGlvbihjKXt2YXIgZz1mLnJlZ2lzdGVyQ2FsbGJhY2tzKCEwLCExLHQubWV0aG9kX2lkX1JUQ1BlZXJDb25uZWN0aW9uX3Quc2V0TG9jYWxEZXNjcmlwdGlvbl92Mikscj17dHlwZTpsLmNvbnZlcnRDMkgoYS50eXBlKSxzZHA6YS5zZHB9O2YucmVtb3RlSW52b2tlKCExLHQubWV0aG9kX2lkX1JUQ1BlZXJDb25uZWN0aW9uX3Quc2V0TG9jYWxEZXNjcmlwdGlvbl92MixyLGcuc3VjY2VzcyxnLmZhaWwpO2cucHJvbSgpLnRoZW4oZnVuY3Rpb24oKXttLmxvZ2dlci5sb2coZi51c2VyX2ZyaWVuZGx5X2lkKCkrXHJcblwiLnNldExvY2FsRGVzY3JpcHRpb25fdjIoKTogc3VjY2VzcyBjYWxsYmFjayByZWNlaXZlZCEhIVwiKTtmLmxvY2FsRGVzY3JpcHRpb25fPWM7bS5sb2dnZXIubG9nKGYudXNlcl9mcmllbmRseV9pZCgpK1wiLnNldExvY2FsRGVzY3JpcHRpb25fdjIoKTogdXBkYXRlZCBsb2NhbERlc2NyaXB0aW9uX1wiKTtQcm9taXNlLmFsbChbXSkudGhlbihmdW5jdGlvbigpe20ubG9nZ2VyLmxvZyhmLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5zZXRMb2NhbERlc2NyaXB0aW9uX3YyKCkgc3VjY2Vzcy5cIik7YigpfSlbXCJjYXRjaFwiXShmdW5jdGlvbihhKXthPWYubG9nUmVtb3RlSW52b2tlRXJyb3IoYSxcIi5wcm9wLnNldExvY2FsRGVzY3JpcHRpb25fdjIoKSBmYWlsZWQhXCIpO2QoYSl9KX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oYSl7YT1mLmxvZ1JlbW90ZUludm9rZUVycm9yKGEsXCJzZXRMb2NhbERlc2NyaXB0aW9uX3YyKCkgZXJyb3IgY2FsbGJhY2sgcmVjZWl2ZWQhXCIpO2QoYSl9KX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oYSl7YT1cclxuZi5sb2dSZW1vdGVJbnZva2VFcnJvcihhLFwiLnNldExvY2FsRGVzY3JpcHRpb25fdjIoKSBmYWlsZWQuXCIpO2QoYSl9KX0pfTtiLnByb3RvdHlwZS5zZXRMb2NhbERlc2NyaXB0aW9uX3YxPWZ1bmN0aW9uKGEsZixiKXt2YXIgZD10aGlzO20ubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5zZXRMb2NhbERlc2NyaXB0aW9uX3YxKCkgY2FsbGVkLlwiKTt0aGlzLndhaXRVbnRpbENvbm5lY3RlZCh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5zZXRMb2NhbERlc2NyaXB0aW9uX3YxXCIpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4obmV3IGwoZCwwLGsuUHJveHlNb2RlLkxvY2FsLHt0eXBlOmwuY29udmVydEMySChhLnR5cGUpLHNkcDphLnNkcH0pKS5zeW5jQmFycmllcigpfSkudGhlbihmdW5jdGlvbihhKXt2YXIgYz1kLnJlZ2lzdGVyQ2FsbGJhY2tzKCEwLCExLHQubWV0aG9kX2lkX1JUQ1BlZXJDb25uZWN0aW9uX3Quc2V0TG9jYWxEZXNjcmlwdGlvbik7ZC5yZW1vdGVJbnZva2VFeCghMSxcclxudC5tZXRob2RfaWRfUlRDUGVlckNvbm5lY3Rpb25fdC5zZXRMb2NhbERlc2NyaXB0aW9uLFthXSxjLnN1Y2Nlc3MsYy5mYWlsKTtjLnByb20oKS50aGVuKGZ1bmN0aW9uKCl7bS5sb2dnZXIubG9nKGQudXNlcl9mcmllbmRseV9pZCgpK1wiLnNldExvY2FsRGVzY3JpcHRpb25fdjEoKTogc3VjY2VzcyBjYWxsYmFjayByZWNlaXZlZCEhIVwiKTtkLmxvY2FsRGVzY3JpcHRpb25fPWE7bS5sb2dnZXIubG9nKGQudXNlcl9mcmllbmRseV9pZCgpK1wiLnNldExvY2FsRGVzY3JpcHRpb25fdjEoKTogdXBkYXRlZCBsb2NhbERlc2NyaXB0aW9uX1wiKTtQcm9taXNlLmFsbChbXSkudGhlbihmdW5jdGlvbigpe20ubG9nZ2VyLmxvZyhkLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5zZXRMb2NhbERlc2NyaXB0aW9uX3YxKCkgc3VjY2Vzcy5cIik7ZiYmZigpfSlbXCJjYXRjaFwiXShmdW5jdGlvbihhKXthPWQubG9nUmVtb3RlSW52b2tlRXJyb3IoYSxcIi5wcm9wLnNldExvY2FsRGVzY3JpcHRpb25fdjEoKSBmYWlsZWQuXCIpO1xyXG5iJiZiKGEubWVzc2FnZSl9KX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oYSl7YT1kLmxvZ1JlbW90ZUludm9rZUVycm9yKGEsXCIuc2V0TG9jYWxEZXNjcmlwdGlvbl92MSgpIGVycm9yIGNhbGxiYWNrIHJlY2VpdmVkLlwiKTtiJiZiKGEubWVzc2FnZSl9KX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oYSl7YT1kLmxvZ1JlbW90ZUludm9rZUVycm9yKGEsXCIuc2V0TG9jYWxEZXNjcmlwdGlvbl92MSgpIGZhaWxlZC5cIik7YiYmYihhLm1lc3NhZ2UpfSl9O2IucHJvdG90eXBlLnNldFJlbW90ZURlc2NyaXB0aW9uPWZ1bmN0aW9uKGEsZixiKXttLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuc2V0UmVtb3RlRGVzY3JpcHRpb24oKSBjYWxsZWQuXCIsdGhpcy5zZHBUb1N0cmluZyhhLnNkcCkpO2lmKGEgaW5zdGFuY2VvZiBGKXJldHVybiB0aGlzLnNldFJlbW90ZURlc2NyaXB0aW9uX3YyKGEpO2lmKGEgaW5zdGFuY2VvZiBSVENTZXNzaW9uRGVzY3JpcHRpb24mJmYpcmV0dXJuIHRoaXMuc2V0UmVtb3RlRGVzY3JpcHRpb25fdjEoYSxcclxuZixiKTtmPXZvaWQgMDthP2Y9bmV3IEYoYS50eXBlLGEuc2RwKToobS5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLnNldFJlbW90ZURlc2NyaXB0aW9uKCkgZW1wdHkgcGFyYW0xLCBzZXR0aW5nIHNkcCB0eXBlIHRvIHJvbGxiYWNrXCIpLGE9dm9pZCAwLGE9XCJoYXZlLXJlbW90ZS1vZmZlclwiPT10aGlzLnNpZ25hbGluZ1N0YXRlXz9cImFuc3dlclwiOlwiaGF2ZS1sb2NhbC1wcmFuc3dlclwiPT10aGlzLnNpZ25hbGluZ1N0YXRlX3x8XCJoYXZlLXJlbW90ZS1wcmFuc3dlclwiPT10aGlzLnNpZ25hbGluZ1N0YXRlXz9cInByYW5zd2VyXCI6XCJvZmZlclwiLGY9bmV3IEYoYSxcIlwiKSk7cmV0dXJuIHRoaXMuc2V0UmVtb3RlRGVzY3JpcHRpb25fdjIoZil9O2IucHJvdG90eXBlLnNldFJlbW90ZURlc2NyaXB0aW9uX3YyPWZ1bmN0aW9uKGEpe3ZhciBmPXRoaXM7bS5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLnNldFJlbW90ZURlc2NyaXB0aW9uX3YyKCkgY2FsbGVkLlwiKTtcclxucmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKGIsZCl7Zi53YWl0VW50aWxDb25uZWN0ZWQoZi51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuc2V0UmVtb3RlRGVzY3JpcHRpb25fdjJcIikudGhlbihmdW5jdGlvbigpe3ZhciBjPW5ldyBsKGYsMCxrLlByb3h5TW9kZS5Mb2NhbCx7dHlwZTpsLmNvbnZlcnRDMkgoYS50eXBlKSxzZHA6YS5zZHB9KSxnPVtdO2cucHVzaChjLnN5bmNCYXJyaWVyKCkpO3ZhciBjPWYucmVnaXN0ZXJDYWxsYmFja3MoITAsITEsdC5tZXRob2RfaWRfUlRDUGVlckNvbm5lY3Rpb25fdC5zZXRSZW1vdGVEZXNjcmlwdGlvbl92Mikscj17dHlwZTpsLmNvbnZlcnRDMkgoYS50eXBlKSxzZHA6YS5zZHB9O2YucmVtb3RlSW52b2tlKCExLHQubWV0aG9kX2lkX1JUQ1BlZXJDb25uZWN0aW9uX3Quc2V0UmVtb3RlRGVzY3JpcHRpb25fdjIscixjLnN1Y2Nlc3MsYy5mYWlsKTtnLnB1c2goYy5wcm9tKCkpO1Byb21pc2UuYWxsKGcpLnRoZW4oZnVuY3Rpb24oYSl7bS5sb2dnZXIubG9nKGYudXNlcl9mcmllbmRseV9pZCgpK1xyXG5cIi5zZXRSZW1vdGVEZXNjcmlwdGlvbl92MigpOiByZW1vdGUgc3VjY2Vzcy5cIik7Zi5yZW1vdGVEZXNjcmlwdGlvbl89YVswXTtnPVtdO2YudXNpbmdhc3luY29ubHlffHwoZi5pc1VuaWZpZWQoKT9nLnB1c2goZi5nZXRUcmFuc2NlaXZlcnNBc3luYygpKTpnLnB1c2goZi5nZXRTZW5kZXJzQXN5bmMoKSkpO1Byb21pc2UuYWxsKGcpLnRoZW4oZnVuY3Rpb24oYSl7bS5sb2dnZXIubG9nKGYudXNlcl9mcmllbmRseV9pZCgpK1wiLnNldFJlbW90ZURlc2NyaXB0aW9uX3YyKCk6IGZpbmFsIHN1Y2Nlc3MuXCIpO2IoKX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oYSl7YT1mLmxvZ1JlbW90ZUludm9rZUVycm9yKGEsXCIucHJvcC5zZXRSZW1vdGVEZXNjcmlwdGlvbl92MigpIGZpbmFsIGZhaWxlZC5cIik7ZChhKX0pfSlbXCJjYXRjaFwiXShmdW5jdGlvbihhKXthPWYubG9nUmVtb3RlSW52b2tlRXJyb3IoYSxcIi5wcm9wLnNldFJlbW90ZURlc2NyaXB0aW9uX3YyKCkgcmVtb3RlIGZhaWxlZC5cIik7ZChhKX0pfSlbXCJjYXRjaFwiXShmdW5jdGlvbihhKXthPVxyXG5mLmxvZ1JlbW90ZUludm9rZUVycm9yKGEsXCIuc2V0UmVtb3RlRGVzY3JpcHRpb25fdjIoKSBmYWlsZWQuXCIpO2QoYSl9KX0pfTtiLnByb3RvdHlwZS5zZXRSZW1vdGVEZXNjcmlwdGlvbl92MT1mdW5jdGlvbihhLGYsYil7dmFyIGQ9dGhpczttLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuc2V0UmVtb3RlRGVzY3JpcHRpb25fdjEoKSBjYWxsZWQuXCIpO3RoaXMud2FpdFVudGlsQ29ubmVjdGVkKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLnNldFJlbW90ZURlc2NyaXB0aW9uX3YxXCIpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4obmV3IGwoZCwwLGsuUHJveHlNb2RlLkxvY2FsLHt0eXBlOmwuY29udmVydEMySChhLnR5cGUpLHNkcDphLnNkcH0pKS5zeW5jQmFycmllcigpfSkudGhlbihmdW5jdGlvbihhKXt2YXIgYz1kLnJlZ2lzdGVyQ2FsbGJhY2tzKCEwLCExLHQubWV0aG9kX2lkX1JUQ1BlZXJDb25uZWN0aW9uX3Quc2V0UmVtb3RlRGVzY3JpcHRpb24pO2QucmVtb3RlSW52b2tlRXgoITEsXHJcbnQubWV0aG9kX2lkX1JUQ1BlZXJDb25uZWN0aW9uX3Quc2V0UmVtb3RlRGVzY3JpcHRpb24sW2FdLGMuc3VjY2VzcyxjLmZhaWwpO2MucHJvbSgpLnRoZW4oZnVuY3Rpb24oKXttLmxvZ2dlci5sb2coZC51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuc2V0UmVtb3RlRGVzY3JpcHRpb25fdjEoKTogc3VjY2VzcyBjYWxsYmFjayByZWNlaXZlZCEhIVwiKTtkLnJlbW90ZURlc2NyaXB0aW9uXz1hO20ubG9nZ2VyLmxvZyhkLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5zZXRSZW1vdGVEZXNjcmlwdGlvbl92MSgpOiB1cGRhdGVkIHJlbW90ZURlc2NyaXB0aW9uX1wiKTt2YXIgYz1bXTtkLnVzaW5nYXN5bmNvbmx5X3x8KGQuaXNVbmlmaWVkKCk/Yy5wdXNoKGQuZ2V0VHJhbnNjZWl2ZXJzQXN5bmMoKSk6Yy5wdXNoKGQuZ2V0U2VuZGVyc0FzeW5jKCkpKTtQcm9taXNlLmFsbChjKS50aGVuKGZ1bmN0aW9uKCl7bS5sb2dnZXIubG9nKGQudXNlcl9mcmllbmRseV9pZCgpK1wiLnNldFJlbW90ZURlc2NyaXB0aW9uX3YxKCk6IHN1Y2Nlc3MuXCIpO1xyXG5mJiZmKCl9KVtcImNhdGNoXCJdKGZ1bmN0aW9uKGEpe2E9ZC5sb2dSZW1vdGVJbnZva2VFcnJvcihhLFwiLnByb3Auc2V0UmVtb3RlRGVzY3JpcHRpb25fdjEoKSBmYWlsZWQuXCIpO2ImJmIoYS5tZXNzYWdlKX0pfSl9KVtcImNhdGNoXCJdKGZ1bmN0aW9uKGEpe2E9ZC5sb2dSZW1vdGVJbnZva2VFcnJvcihhLFwiLnNldFJlbW90ZURlc2NyaXB0aW9uX3YxKCkgZmFpbGVkLlwiKTtiJiZiKGEubWVzc2FnZSl9KX07Yi5wcm90b3R5cGUuZ2V0TG9jYWxTdHJlYW1zPWZ1bmN0aW9uKCl7bS5sb2dnZXIubG9nKFwiUGVlckNvbm5lY3Rpb24uZ2V0TG9jYWxTdHJlYW1zKCkgY2FsbGVkLiBbb2lkPVwiK3RoaXMub2JqZWN0X2lkKCkrXCJdXCIpO2Zvcih2YXIgYT0wLGY9dGhpcy5sb2NhbFN0cmVhbXM7YTxmLmxlbmd0aDthKyspbS5sb2dnZXIubG9nKEpTT04uc3RyaW5naWZ5KGZbYV0pKTtyZXR1cm4gdGhpcy5sb2NhbFN0cmVhbXN9O2IucHJvdG90eXBlLmdldFJlbW90ZVN0cmVhbXM9ZnVuY3Rpb24oKXttLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXHJcblwiLmdldFJlbW90ZVN0cmVhbXMoKSBjYWxsZWQuXCIpO2Zvcih2YXIgYT0wLGY9dGhpcy5yZW1vdGVTdHJlYW1zO2E8Zi5sZW5ndGg7YSsrKW0ubG9nZ2VyLmxvZyhKU09OLnN0cmluZ2lmeShmW2FdKSk7cmV0dXJuIHRoaXMucmVtb3RlU3RyZWFtc307Yi5wcm90b3R5cGUuYWRkVHJhY2s9ZnVuY3Rpb24oYSxmKXtyZXR1cm4gdGhpcy5hZGRUcmFja0ludGVybmFsKGEsZiwhMSl9O2IucHJvdG90eXBlLmFkZFRyYWNrQXN5bmM9ZnVuY3Rpb24oYSxmKXtyZXR1cm4gdGhpcy5hZGRUcmFja0ludGVybmFsKGEsZiwhMCl9O2IucHJvdG90eXBlLmFkZFRyYWNrSW50ZXJuYWw9ZnVuY3Rpb24oYSxmLGIpe3ZhciBkPXRoaXM7bS5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLmFkZFRyYWNrSW50ZXJuYWwoKSBjYWxsZWQuIHRyYWNrLmlkID0gXCIrYS5pZCtcIiwgc3RyZWFtcyA9IFwiK0pTT04uc3RyaW5naWZ5KGYpK1wiLCBpc0FzeW5jID0gXCIrYik7dGhpcy5pbmNyZW1lbnRQZW5kaW5nVHJhY2tDb3VudCgpO1xyXG52YXIgYz1bXTtpZihmKWlmKGYgaW5zdGFuY2VvZiBxLlJlbW90ZVN0cmVhbSljLnB1c2goZi5pZCksdGhpcy5sb2NhbFN0cmVhbXMucHVzaChmKTtlbHNlIGZvcih2YXIgZz0wO2c8Zi5sZW5ndGg7ZysrKWMucHVzaChmW2ddLmlkKSx0aGlzLmxvY2FsU3RyZWFtcy5wdXNoKGZbZ10pO2Vsc2UgbS5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLmFkZFRyYWNrSW50ZXJuYWwoKSBlbXB0eSBzdHJlYW1zIHBhc3NlZCBpbiwgY29udGludWUgd2l0aCBlbXB0eSBhcnJheVwiKTt2YXIgcj1uZXcgbi5SdHBTZW5kZXIodGhpcywwLGsuUHJveHlNb2RlLlBzZXVkbyx0aGlzLmlzVW5pZmllZCgpKTt0aGlzLnNlbmRlcnNfLnB1c2gocik7Zj1uZXcgUHJvbWlzZShmdW5jdGlvbihmLGIpe2Qud2FpdFVudGlsQ29ubmVjdGVkKGQudXNlcl9mcmllbmRseV9pZCgpK1wiLmFkZFRyYWNrSW50ZXJuYWxcIikudGhlbihmdW5jdGlvbigpe3JldHVybiBkLnJlbW90ZUludm9rZUV4KCExLHQubWV0aG9kX2lkX1JUQ1BlZXJDb25uZWN0aW9uX3QuYWRkVHJhY2ssXHJcblthXSxjKX0pLnRoZW4oZnVuY3Rpb24oYSl7bS5sb2dnZXIubG9nKGQudXNlcl9mcmllbmRseV9pZCgpK1wiLmFkZFRyYWNrSW50ZXJuYWwoKSBzdWNjZXNzIHdpdGggb2lkOiBcIitkLnBhcmFtMChhKS5vaWQpO3IuYmluZChkLGQucGFyYW0wKGEpLm9pZCk7ci5zeW5jQmFycmllcigpLnRoZW4oZnVuY3Rpb24oKXttLmxvZ2dlci5sb2coZC51c2VyX2ZyaWVuZGx5X2lkKCkrXCJzZW5kZXIuc3luY0JhcnJpZXIoKTogc3VjY2Vzc1wiKTshZC51c2luZ2FzeW5jb25seV8mJmQuaXNVbmlmaWVkKCk/ZC5nZXRUcmFuc2NlaXZlcnNBc3luYygpLnRoZW4oZnVuY3Rpb24oKXtkLmRlY3JlbWVudFBlbmRpbmdUcmFja0NvdW50KCk7ZihyKX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oYSl7ZC5sb2dSZW1vdGVJbnZva2VFcnJvcihhLFwiLmFkZFRyYWNrSW50ZXJuYWwoKSBnZXRUcmFuc2NlaXZlcnNBc3luYygpIGZhaWxlZCFcIik7ZC5kZWNyZW1lbnRQZW5kaW5nVHJhY2tDb3VudCgpO2IoKX0pOihkLmRlY3JlbWVudFBlbmRpbmdUcmFja0NvdW50KCksXHJcbmYocikpfSlbXCJjYXRjaFwiXShmdW5jdGlvbihhKXtkLmxvZ1JlbW90ZUludm9rZUVycm9yKGEsXCJzZW5kZXIuc3luY0JhcnJpZXIoKSBmYWlsZWQhXCIpO2QuZGVjcmVtZW50UGVuZGluZ1RyYWNrQ291bnQoKTtiKCl9KX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oYSl7ZC5sb2dSZW1vdGVJbnZva2VFcnJvcihhLFwiYWRkVHJhY2soKSBmYWlsZWQhXCIpO2QuZGVjcmVtZW50UGVuZGluZ1RyYWNrQ291bnQoKTtiKCl9KX0pO2lmKGIpcmV0dXJuIGY7bS5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLmFkZFRyYWNrKCkgcmV0dXJuaW5nOiBcIityKTtyZXR1cm4gcn07Yi5wcm90b3R5cGUucmVtb3ZlVHJhY2s9ZnVuY3Rpb24oYSl7bS5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLnJlbW92ZVRyYWNrKCkgY2FsbGVkLlwiKTt0aGlzLnJlbW92ZVRyYWNrQXN5bmMoYSl9O2IucHJvdG90eXBlLnJlbW92ZVRyYWNrQXN5bmM9ZnVuY3Rpb24oYSl7dmFyIGY9dGhpczttLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXHJcblwiLnJlbW92ZVRyYWNrQXN5bmMoKSBjYWxsZWQuXCIpO3RoaXMuaW5jcmVtZW50UGVuZGluZ1RyYWNrQ291bnQoKTtmb3IodmFyIGI9MDtiPHRoaXMuc2VuZGVyc18ubGVuZ3RoO2IrKyl0aGlzLnNlbmRlcnNfW2JdPT1hJiZ0aGlzLnNlbmRlcnNfLnNwbGljZShiLDEpO3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihiLGQpe2Yud2FpdFVudGlsQ29ubmVjdGVkKGYudXNlcl9mcmllbmRseV9pZCgpK1wiLnJlbW92ZVRyYWNrQXN5bmNcIikudGhlbihmdW5jdGlvbigpe3JldHVybiBmLnJlbW90ZUludm9rZUV4KCExLHQubWV0aG9kX2lkX1JUQ1BlZXJDb25uZWN0aW9uX3QucmVtb3ZlVHJhY2ssW2FdKX0pLnRoZW4oZnVuY3Rpb24oKXttLmxvZ2dlci5sb2coZi51c2VyX2ZyaWVuZGx5X2lkKCkrXCIucmVtb3ZlVHJhY2tBc3luYygpIHN1Y2Nlc3MuXCIpOyFmLnVzaW5nYXN5bmNvbmx5XyYmZi5pc1VuaWZpZWQoKT9mLmdldFRyYW5zY2VpdmVyc0FzeW5jKCkudGhlbihmdW5jdGlvbigpe2YuZGVjcmVtZW50UGVuZGluZ1RyYWNrQ291bnQoKTtcclxuYigpfSlbXCJjYXRjaFwiXShmdW5jdGlvbihhKXtmLmxvZ1JlbW90ZUludm9rZUVycm9yKGEsXCJyZW1vdmVUcmFja0FzeW5jKCkgZ2V0VHJhbnNjZWl2ZXJzQXN5bmMoKSBmYWlsZWQhXCIpO2YuZGVjcmVtZW50UGVuZGluZ1RyYWNrQ291bnQoKTtkKGEpfSk6KGYuZGVjcmVtZW50UGVuZGluZ1RyYWNrQ291bnQoKSxiKCkpfSlbXCJjYXRjaFwiXShmdW5jdGlvbihhKXtmLmxvZ1JlbW90ZUludm9rZUVycm9yKGEsXCJyZW1vdmVUcmFja0FzeW5jKCkgZmFpbGVkIVwiKTtmLmRlY3JlbWVudFBlbmRpbmdUcmFja0NvdW50KCk7ZChhKX0pfSl9O2IucHJvdG90eXBlLmFkZFN0cmVhbT1mdW5jdGlvbihhKXt2YXIgYj10aGlzO20ubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5hZGRTdHJlYW0oKSBjYWxsZWQ6IFwiK0pTT04uc3RyaW5naWZ5KGEpKTt0aGlzLmxvY2FsU3RyZWFtcy5wdXNoKGEpO3RoaXMud2FpdFVudGlsQ29ubmVjdGVkKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLmFkZFN0cmVhbVwiKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGIucmVtb3RlSW52b2tlRXgoITEsXHJcbnQubWV0aG9kX2lkX1JUQ1BlZXJDb25uZWN0aW9uX3QuYWRkU3RyZWFtLFthXSx7fSl9KS50aGVuKGZ1bmN0aW9uKCl7bS5sb2dnZXIubG9nKGIudXNlcl9mcmllbmRseV9pZCgpK1wiLmFkZFN0cmVhbSgpIHN1Y2Nlc3MuXCIpfSlbXCJjYXRjaFwiXShmdW5jdGlvbihhKXtiLmxvZ1JlbW90ZUludm9rZUVycm9yKGEsXCJhZGRTdHJlYW0oKSBmYWlsZWQuXCIpfSl9O2IucHJvdG90eXBlLnJlbW92ZVN0cmVhbT1mdW5jdGlvbihhKXt2YXIgYj10aGlzO20ubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5yZW1vdmVTdHJlYW0oKSBjYWxsZWQ6IFwiK0pTT04uc3RyaW5naWZ5KGEpKTtmb3IodmFyIGQ9MDtkPHRoaXMubG9jYWxTdHJlYW1zLmxlbmd0aDtkKyspdGhpcy5sb2NhbFN0cmVhbXNbZF09PWEmJnRoaXMubG9jYWxTdHJlYW1zLnNwbGljZShkLDEpO3RoaXMud2FpdFVudGlsQ29ubmVjdGVkKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLnJlbW92ZVN0cmVhbVwiKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGIucmVtb3RlSW52b2tlRXgoITEsXHJcbnQubWV0aG9kX2lkX1JUQ1BlZXJDb25uZWN0aW9uX3QucmVtb3ZlU3RyZWFtLFthXSl9KS50aGVuKGZ1bmN0aW9uKCl7bS5sb2dnZXIubG9nKGIudXNlcl9mcmllbmRseV9pZCgpK1wiLnJlbW92ZVN0cmVhbSgpIHN1Y2Nlc3MuXCIpfSlbXCJjYXRjaFwiXShmdW5jdGlvbihhKXtiLmxvZ1JlbW90ZUludm9rZUVycm9yKGEsXCJyZW1vdmVTdHJlYW0oKSBmYWlsZWQuXCIpfSl9O09iamVjdC5kZWZpbmVQcm9wZXJ0eShiLnByb3RvdHlwZSxcIm9uYWRkc3RyZWFtXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLm9uYWRkc3RyZWFtX30sc2V0OmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXM7bS5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLnNldF9vbmFkZHN0cmVhbSgpIGNhbGxlZC5cIik7dGhpcy5vbmFkZHN0cmVhbV89YTt0aGlzLndhaXRVbnRpbENvbm5lY3RlZCh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5vbmFkZHN0cmVhbVwiKS50aGVuKGZ1bmN0aW9uKCl7dmFyIGQ9Yi5yZWdpc3RlckNhbGxiYWNrcyghMSxcclxuYi5pc051bGxDYWxsYmFjayhhKSx0Lm1ldGhvZF9pZF9SVENQZWVyQ29ubmVjdGlvbl90Lm9uYWRkc3RyZWFtKTtkLnRoZW4oZnVuY3Rpb24oYSl7KG5ldyBxLlJlbW90ZVN0cmVhbUV2ZW50KGIsYi5wYXJhbTAoYSkub2lkKSkuc3luY0JhcnJpZXIoKS50aGVuKGZ1bmN0aW9uKGEpe20ubG9nZ2VyLmxvZyhiLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5vbmFkZHN0cmVhbSBjYWxsYmFjayByZWNlaXZlZCFcIik7dm9pZCAwPT09Yi5yZW1vdGVTdHJlYW1zLmZpbmQoZnVuY3Rpb24oYil7cmV0dXJuIHZvaWQgMCE9YS5zdHJlYW0mJmIub2JqZWN0X2lkKCk9PT1hLnN0cmVhbS5vYmplY3RfaWQoKX0pJiZiLnJlbW90ZVN0cmVhbXMucHVzaChhLnN0cmVhbSk7Yi5vbmFkZHN0cmVhbV8mJihtLmxvZ2dlci5sb2coYi51c2VyX2ZyaWVuZGx5X2lkKCkrXCIub25hZGRzdHJlYW0gbm90aWZpZWQhISEgXCIrYS5zdHJlYW0uaWQpLGIub25hZGRzdHJlYW1fKGEpKX0pfSk7cmV0dXJuIGIucmVtb3RlSW52b2tlKCEwLFxyXG50Lm1ldGhvZF9pZF9SVENQZWVyQ29ubmVjdGlvbl90Lm9uYWRkc3RyZWFtLGQuc3VjY2Vzcyl9KVtcImNhdGNoXCJdKGZ1bmN0aW9uKGEpe2IubG9nUmVtb3RlSW52b2tlRXJyb3IoYSxcInNldF9vbmFkZHN0cmVhbSgpIGZhaWxlZCFcIil9KX0sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYi5wcm90b3R5cGUsXCJvbnJlbW92ZXN0cmVhbVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5vbnJlbW92ZXN0cmVhbV99LHNldDpmdW5jdGlvbihhKXt2YXIgYj10aGlzO20ubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5zZXRfb25yZW1vdmVzdHJlYW0oKSBjYWxsZWQuXCIpO3RoaXMub25yZW1vdmVzdHJlYW1fPWE7dGhpcy53YWl0VW50aWxDb25uZWN0ZWQodGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIub25yZW1vdmVzdHJlYW1cIikudGhlbihmdW5jdGlvbigpe3ZhciBkPWIucmVnaXN0ZXJDYWxsYmFja3MoITEsYi5pc051bGxDYWxsYmFjayhhKSxcclxudC5tZXRob2RfaWRfUlRDUGVlckNvbm5lY3Rpb25fdC5vbnJlbW92ZXN0cmVhbSk7ZC50aGVuKGZ1bmN0aW9uKGEpeyhuZXcgcS5SZW1vdGVTdHJlYW1FdmVudChiLGIucGFyYW0wKGEpLm9pZCkpLnN5bmNCYXJyaWVyKCkudGhlbihmdW5jdGlvbihhKXttLmxvZ2dlci5sb2coYi51c2VyX2ZyaWVuZGx5X2lkKCkrXCIub25yZW1vdmVzdHJlYW0gY2FsbGJhY2sgcmVjZWl2ZWQhIFwiK2Euc3RyZWFtLmlkKTt2YXIgZD1iLnJlbW90ZVN0cmVhbXMuZmluZEluZGV4KGZ1bmN0aW9uKGIpe3JldHVybiBiLmlkPT1hLnN0cmVhbS5pZH0pOzA8PWQmJmIucmVtb3RlU3RyZWFtcy5zcGxpY2UoZCwxKTtpZihiLm9ucmVtb3Zlc3RyZWFtXyliLm9ucmVtb3Zlc3RyZWFtXyhhKX0pfSk7cmV0dXJuIGIucmVtb3RlSW52b2tlKCEwLHQubWV0aG9kX2lkX1JUQ1BlZXJDb25uZWN0aW9uX3Qub25yZW1vdmVzdHJlYW0sZC5zdWNjZXNzKX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oYSl7Yi5sb2dSZW1vdGVJbnZva2VFcnJvcihhLFxyXG5cInNldF9vbnJlbW92ZXN0cmVhbSgpIGZhaWxlZCFcIil9KX0sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KTtiLnByb3RvdHlwZS5nZXRTdGF0cz1mdW5jdGlvbihhKXt2YXIgYj10aGlzO3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihkLGMpe2IuaXNSZWRpcmVjdGVkKCk/Yi53YWl0VW50aWxDb25uZWN0ZWQoYi51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuZ2V0U3RhdHNcIikudGhlbihmdW5jdGlvbigpe3ZhciBjPWIucmVnaXN0ZXJDYWxsYmFja3MoITAsITEsdC5tZXRob2RfaWRfUlRDUGVlckNvbm5lY3Rpb25fdC5nZXRTdGF0cyk7Yy50aGVuKGZ1bmN0aW9uKGIpe3ZvaWQgMD09PWIucGFyYW1zfHwwPT09Yi5wYXJhbXMubGVuZ3RofHwwPT09Yi5wYXJhbXNbMF0ubGVuZ3RoP2QoKTphPyhhKEQuU3RhdHNSZXBvcnQuZnJvbUpTT04oSlNPTi5wYXJzZShiLnBhcmFtc1swXSkpKSxkKCkpOmQoRC5TdGF0c1JlcG9ydC50b1JUQ1N0YXRzUmVwb3J0KEpTT04ucGFyc2UoYi5wYXJhbXNbMF0pKSl9KTtcclxucmV0dXJuIGE/Yi5yZW1vdGVJbnZva2UoITEsdC5tZXRob2RfaWRfUlRDUGVlckNvbm5lY3Rpb25fdC5nZXRTdGF0cyxjLnN1Y2Nlc3MpOmIucmVtb3RlSW52b2tlKCExLHQubWV0aG9kX2lkX1JUQ1BlZXJDb25uZWN0aW9uX3QuZ2V0U3RhdHNfdjIsYy5zdWNjZXNzKX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oYSl7YiYmKGE9Yi5sb2dSZW1vdGVJbnZva2VFcnJvcihhLFwiLmdldFN0YXRzKCkgZmFpbGVkIVwiKSxjKGEpKX0pOihhKHt9KSxkKCkpfSl9O2IucHJvdG90eXBlLlNlbmRUZWxlbWV0cnlEYXRhPWZ1bmN0aW9uKGEsYixkKXt3LmdldFJlZGlyZWN0b3IoKS50ZWxlbWV0cnkuU2VuZFRlbGVtZXRyeURhdGEoeS50ZWxfY21kLkRhdGEsYSxiLGQpfTtiLnByb3RvdHlwZS5NaWxsaXNlY29uZHN0b0Rpc3BsYXlmb3JtYXRfPWZ1bmN0aW9uKGEpe3ZhciBiLGQ7ZD1NYXRoLmZsb29yKGEvMUUzKTtiPU1hdGguZmxvb3IoZC82MCk7YT1NYXRoLmZsb29yKGIvNjApO20ubG9nZ2VyLmxvZyhNYXRoLmZsb29yKGEvXHJcbjI0KStcIjpcIithJTI0K1wiOlwiK2IlNjArXCI6XCIrZCU2MCl9O2IucHJvdG90eXBlLkNhbGN1bGF0ZUNhbGxEdXJhdGlvbmFuZFR5cGVfPWZ1bmN0aW9uKCl7aWYoMT09dGhpcy50aW1lZXJzdGFydGVkXyl7dGhpcy50aW1lZXJzdGFydGVkXz0hMTt0aGlzLmNhbGxlbmRUaW1lXz0obmV3IERhdGUpLmdldFRpbWUoKTt2YXIgYT10aGlzLmNhbGxlbmRUaW1lXy10aGlzLmNhbGxzdGFydFRpbWVfO3RoaXMuTWlsbGlzZWNvbmRzdG9EaXNwbGF5Zm9ybWF0XyhhKTthPU1hdGgucm91bmQoYS8xRTMpO20ubG9nZ2VyLmxvZyhcIkNhbGwgRHVyYXRpb24gXCIrYSk7MT09dGhpcy5jb25mZXJlbmNlY2FsbF8/dGhpcy5TZW5kVGVsZW1ldHJ5RGF0YSh5LnRlbF9rZXlfQ29uZmVyZW5jZUNhbGxEdXJhdGlvbixhLDEpOigxPT10aGlzLmF1ZGlvY2FsbF8uYWN0aXZlJiZ0aGlzLlNlbmRUZWxlbWV0cnlEYXRhKHkudGVsX2tleV9BdWRpb0NhbGxEdXJhdGlvbixhLDEpLDE9PXRoaXMudmlkZW9jYWxsXy5hY3RpdmUmJlxyXG50aGlzLlNlbmRUZWxlbWV0cnlEYXRhKHkudGVsX2tleV9WaWRlb0NhbGxEdXJhdGlvbixhLDEpLDE9PXRoaXMuc2NyZWVuc2hhcmluZ2NhbGxfLmFjdGl2ZSYmdGhpcy5TZW5kVGVsZW1ldHJ5RGF0YSh5LnRlbF9rZXlfU2NyZWVuc2hhcmluZ0NhbGxEdXJhdGlvbixhLDEpKTt2YXIgYjsxPT10aGlzLmZpcnN0dGltZWxvY2Fsb2ZmZXJfJiYoYj10aGlzLmNhbGxzdGFydFRpbWVfLXRoaXMub3V0Z29pbmdjYWxsc3RhcnRfKTsxPT10aGlzLmZpcnN0dGltZXJlbW90ZW9mZmVyXyYmKGI9dGhpcy5jYWxsc3RhcnRUaW1lXy10aGlzLmluY29taW5nY2FsbHN0YXJ0Xyk7dGhpcy5NaWxsaXNlY29uZHN0b0Rpc3BsYXlmb3JtYXRfKGIpO2I9TWF0aC5yb3VuZChiLzFFMyk7bS5sb2dnZXIubG9nKFwiQ2FsbCBFc3RhYmxpc2ggVGltZSBcIitiKTsxPT10aGlzLmluY29taW5nY2FsbF8/dGhpcy5TZW5kVGVsZW1ldHJ5RGF0YSh5LnRlbF9rZXlfQ2FsbEVzdEluY29taW5nLGIsMSk6MT09dGhpcy5vdXRnb2luZ2NhbGxfJiZcclxudGhpcy5TZW5kVGVsZW1ldHJ5RGF0YSh5LnRlbF9rZXlfQ2FsbEVzdE91dGdvaW5nLGIsMSk7dGhpcy5TZW5kVGVsZW1ldHJ5RGF0YSh5LnRlbF9rZXlfUGVyZkNhbGxTdGF0ZSx5LnRlbF9DYWxsU3RhdGUuaWRsZSwxKX19O2IucHJvdG90eXBlLmNsb3NlPWZ1bmN0aW9uKCl7dmFyIGE9dGhpczttLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuY2xvc2UoKSBjYWxsZWQuXCIpO3RoaXMuQ2FsY3VsYXRlQ2FsbER1cmF0aW9uYW5kVHlwZV8oKTt0aGlzLnVucmVnaXN0ZXJTdGF0ZUNoYW5nZU5vdGlmaWNhdGlvbih0aGlzLm9uU3RhdGVDaGFuZ2UpO3RoaXMub25uZWdvdGlhdGlvbm5lZWRlZD10aGlzLm9uc2lnbmFsaW5nc3RhdGVjaGFuZ2U9dGhpcy5vbmljZWdhdGhlcmluZ3N0YXRlY2hhbmdlPXRoaXMub25pY2Vjb25uZWN0aW9uc3RhdGVjaGFuZ2U9dGhpcy5vbmljZWNhbmRpZGF0ZT10aGlzLm9uYWRkc3RyZWFtPW51bGw7dGhpcy53YWl0VW50aWxDb25uZWN0ZWQodGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXHJcblwiLmNsb3NlXCIpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gYS5yZW1vdGVJbnZva2UoITEsdC5tZXRob2RfaWRfUlRDUGVlckNvbm5lY3Rpb25fdC5jbG9zZSl9KS50aGVuKGZ1bmN0aW9uKCl7YS5pY2VRXz1udWxsO2EucmVsZWFzZSgpO20ubG9nZ2VyLmxvZyhhLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5jbG9zZSgpIHN1Y2Nlc3MuXCIpfSlbXCJjYXRjaFwiXShmdW5jdGlvbihiKXthLmxvZ1JlbW90ZUludm9rZUVycm9yKGIsXCIuY2xvc2UoKSBmYWlsZWQuXCIpO2EuaWNlUV89bnVsbDthLnJlbGVhc2UoKX0pfTtiLnByb3RvdHlwZS5jcmVhdGVEVE1GU2VuZGVyPWZ1bmN0aW9uKGEpe20ubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5jcmVhdGVEVE1GU2VuZGVyKCkgY2FsbGVkLlwiKTt2YXIgYixkPXRoaXMuc2VuZGVyc187aWYodm9pZCAwPT09ZHx8MD09PWQubGVuZ3RoKWQ9dGhpcy5nZXRTZW5kZXJzKCk7dm9pZCAwIT1kJiYoZD1kLmZpbmQoZnVuY3Rpb24oYil7cmV0dXJuIGIudHJhY2suaWQ9PT1cclxuYS5pZH0pLHZvaWQgMCE9ZCYmKG0ubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIiByZXR1cm5pbmcgUnRwU2VuZGVyIHdpdGggb2lkOlwiK2Qub2JqZWN0X2lkKCkpLGI9ZC5kdG1mKSk7cmV0dXJuIGJ9O09iamVjdC5kZWZpbmVQcm9wZXJ0eShiLnByb3RvdHlwZSxcInVzaW5nQXN5bmNPbmx5XCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnVzaW5nYXN5bmNvbmx5X30sc2V0OmZ1bmN0aW9uKGEpe20ubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi51c2luZ0FzeW5jT25seSgpIGNhbGxlZCB3aXRoIGFzeW5jOlwiK2EpO3ZvaWQgMCE9YSYmbnVsbCE9YSYmKHRoaXMudXNpbmdhc3luY29ubHlfPWEpfSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pO2IucHJvdG90eXBlLmdldFNlbmRlcnNBc3luYz1mdW5jdGlvbigpe20ubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5nZXRTZW5kZXJzQXN5bmMoKSBjYWxsZWQuXCIpO3JldHVybiB0aGlzLmdldFNlbmRlcnNBc3luY0ludGVybmFsKCl9O1xyXG5iLnByb3RvdHlwZS5nZXRTZW5kZXJzPWZ1bmN0aW9uKCl7bS5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLmdldFNlbmRlcnMoKSBjYWxsZWQuIFwiKTtpZih0aGlzLnVzaW5nYXN5bmNvbmx5Xyl0aHJvdyBtLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuZ2V0U2VuZGVycygpOiB0aHJvd2luZyBleGNlcHRpb246IG5vdCBhbGxvd2VkIHdoZW4gdXNpbmdBc3luY09ubHkgaXMgdHJ1ZSEhIVwiKSxuZXcgRE9NRXhjZXB0aW9uKFwiLmdldFNlbmRlcnMoKSBub3QgYWxsb3dlZCB3aGVuIHVzaW5nQXN5bmNPbmx5IGlzIHRydWUhISFcIik7dGhpcy5nZXRTZW5kZXJzQXN5bmNJbnRlcm5hbCgpO20ubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5nZXRTZW5kZXJzKCkgcmV0dXJuaW5nOlwiK3RoaXMuc2VuZGVyc18ubGVuZ3RoK1wiIGl0ZW1zXCIpO3JldHVybiB0aGlzLnNlbmRlcnNffTtiLnByb3RvdHlwZS5nZXRTZW5kZXJzQXN5bmNJbnRlcm5hbD1cclxuZnVuY3Rpb24oKXt2YXIgYT10aGlzO20ubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5nZXRTZW5kZXJzQXN5bmNJbnRlcm5hbCgpIGNhbGxlZC4gXCIrdGhpcy5zZW5kZXJzXyk7cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKGIsZCl7YS53YWl0VW50aWxDb25uZWN0ZWQoYS51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuZ2V0U2VuZGVyc0FzeW5jSW50ZXJuYWxcIikudGhlbihmdW5jdGlvbigpe20ubG9nZ2VyLmxvZyhhLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5nZXRTZW5kZXJzQXN5bmNJbnRlcm5hbCBpbnZva2luZyByZW1vdGVcIik7cmV0dXJuIGEucmVtb3RlSW52b2tlKCExLHQubWV0aG9kX2lkX1JUQ1BlZXJDb25uZWN0aW9uX3QuZ2V0U2VuZGVycyl9KS50aGVuKGZ1bmN0aW9uKGQpe20ubG9nZ2VyLmxvZyhhLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5nZXRTZW5kZXJzQXN5bmNJbnRlcm5hbCByZW1vdGUgc3VjY2Vzc1wiKTt2YXIgYz1bXSxnPVtdO2QucGFyYW1zWzBdLmZvckVhY2goZnVuY3Rpb24oYil7dmFyIGY9XHJcbmEuc2VuZGVyc18uZmluZChmdW5jdGlvbihhKXtyZXR1cm4gYS5vYmplY3RfaWQoKT09PWIub2lkfSk7dm9pZCAwPT09ZiYmKG0ubG9nZ2VyLmxvZyhhLnVzZXJfZnJpZW5kbHlfaWQoKStcIiBhZGRpbmcgYSBSdHBTZW5kZXIgd2l0aCBvaWQ6XCIrYi5vaWQpLGY9bmV3IG4uUnRwU2VuZGVyKGEsYi5vaWQsay5Qcm94eU1vZGUuUmVtb3RlLGEuaXNVbmlmaWVkKCkpKTtnLnB1c2goZi5zeW5jQmFycmllcigpKTtjLnB1c2goZil9KTtQcm9taXNlLmFsbChnKS50aGVuKGZ1bmN0aW9uKCl7YS5zZW5kZXJzXz1jO20ubG9nZ2VyLmxvZyhhLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5nZXRTZW5kZXJzQXN5bmNJbnRlcm5hbDogcmV0dXJuaW5nIHNlbmRlcnMgd2l0aCBpZHMgW1wiK2Euc2VuZGVyc18ubWFwKGZ1bmN0aW9uKGEpe3JldHVybiBhLm9iamVjdF9pZCgpfSkrXCJdXCIpO2IoYS5zZW5kZXJzXyl9KVtcImNhdGNoXCJdKGZ1bmN0aW9uKGQpe2EubG9nUmVtb3RlSW52b2tlRXJyb3IoZCxcIi5wcm9wLmdldFNlbmRlcnNBc3luY0ludGVybmFsKCkgZmFpbGVkLlwiKTtcclxuYS5zZW5kZXJzXz1bXTtiKGEuc2VuZGVyc18pfSl9KVtcImNhdGNoXCJdKGZ1bmN0aW9uKGQpe2EubG9nUmVtb3RlSW52b2tlRXJyb3IoZCxcIi5nZXRTZW5kZXJzQXN5bmNJbnRlcm5hbCgpIGZhaWxlZC5cIik7YS5zZW5kZXJzXz1bXTtiKGEuc2VuZGVyc18pfSl9KX07Yi5wcm90b3R5cGUuZ2V0UmVjZWl2ZXJzQXN5bmM9ZnVuY3Rpb24oKXttLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuZ2V0UmVjZWl2ZXJzQXN5bmMoKSBjYWxsZWQuXCIpO3JldHVybiB0aGlzLmdldFJlY2VpdmVyc0FzeW5jSW50ZXJuYWwoKX07Yi5wcm90b3R5cGUuZ2V0UmVjZWl2ZXJzPWZ1bmN0aW9uKCl7bS5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLmdldFJlY2VpdmVycygpIGNhbGxlZC4gXCIpO2lmKHRoaXMudXNpbmdhc3luY29ubHlfKXRocm93IG0ubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5nZXRSZWNlaXZlcnMoKTogdGhyb3dpbmcgZXhjZXB0aW9uOiBub3QgYWxsb3dlZCB3aGVuIHVzaW5nQXN5bmNPbmx5IGlzIHRydWUhISFcIiksXHJcbm5ldyBET01FeGNlcHRpb24oXCIuZ2V0UmVjZWl2ZXJzKCkgbm90IGFsbG93ZWQgd2hlbiB1c2luZ0FzeW5jT25seSBpcyB0cnVlISEhXCIpO3RoaXMuZ2V0UmVjZWl2ZXJzQXN5bmNJbnRlcm5hbCgpO20ubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5nZXRSZWNlaXZlcnMoKSByZXR1cm5pbmc6XCIrdGhpcy5yZWNlaXZlcnNfLmxlbmd0aCtcIiBpdGVtc1wiKTtyZXR1cm4gdGhpcy5yZWNlaXZlcnNffTtiLnByb3RvdHlwZS5nZXRSZWNlaXZlcnNBc3luY0ludGVybmFsPWZ1bmN0aW9uKCl7dmFyIGE9dGhpczttLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuZ2V0UmVjZWl2ZXJzQXN5bmNJbnRlcm5hbCgpIGNhbGxlZC4gXCIrdGhpcy5yZWNlaXZlcnNfKTtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24oYixkKXthLndhaXRVbnRpbENvbm5lY3RlZChhLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5nZXRSZWNlaXZlcnNBc3luY0ludGVybmFsXCIpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gYS5yZW1vdGVJbnZva2UoITEsXHJcbnQubWV0aG9kX2lkX1JUQ1BlZXJDb25uZWN0aW9uX3QuZ2V0UmVjZWl2ZXJzKX0pLnRoZW4oZnVuY3Rpb24oZCl7bS5sb2dnZXIubG9nKGEudXNlcl9mcmllbmRseV9pZCgpK1wiLmdldFJlY2VpdmVyc0FzeW5jSW50ZXJuYWw6IHJlbW90ZSBzdWNjZXNzLlwiKTt2YXIgYz1bXSxnPVtdO2QucGFyYW1zWzBdLmZvckVhY2goZnVuY3Rpb24oYil7dmFyIGY9YS5yZWNlaXZlcnNfLmZpbmQoZnVuY3Rpb24oYSl7cmV0dXJuIGEub2JqZWN0X2lkKCk9PT1iLm9pZH0pO3ZvaWQgMD09PWYmJihtLmxvZ2dlci5sb2coYS51c2VyX2ZyaWVuZGx5X2lkKCkrXCIgYWRkaW5nIGEgUnRwUmVjZWl2ZXIgd2l0aCBvaWQ6XCIrYi5vaWQpLGY9bmV3IG4uUnRwUmVjZWl2ZXIoYSxiLm9pZCxrLlByb3h5TW9kZS5SZW1vdGUsYS5pc1VuaWZpZWQoKSkpO2cucHVzaChmLnN5bmNCYXJyaWVyKCkpO2MucHVzaChmKX0pO1Byb21pc2UuYWxsKGcpLnRoZW4oZnVuY3Rpb24oKXthLnJlY2VpdmVyc189YzttLmxvZ2dlci5sb2coYS51c2VyX2ZyaWVuZGx5X2lkKCkrXHJcblwiLmdldFJlY2VpdmVyc0FzeW5jSW50ZXJuYWw6IHJldHVybmluZyByZWNlaXZlciB3aXRoIGlkcyBbXCIrYS5yZWNlaXZlcnNfLm1hcChmdW5jdGlvbihhKXtyZXR1cm4gYS5vYmplY3RfaWQoKX0pK1wiXVwiKTtiKGEucmVjZWl2ZXJzXyl9KVtcImNhdGNoXCJdKGZ1bmN0aW9uKGQpe2EubG9nUmVtb3RlSW52b2tlRXJyb3IoZCxcIi5wcm9wLmdldFJlY2VpdmVyc0FzeW5jSW50ZXJuYWwoKSBmYWlsZWQhXCIpO2EucmVjZWl2ZXJzXz1bXTtiKGEucmVjZWl2ZXJzXyl9KX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oZCl7YS5sb2dSZW1vdGVJbnZva2VFcnJvcihkLFwiLmdldFJlY2VpdmVyc0FzeW5jSW50ZXJuYWwoKSBmYWlsZWQhXCIpO2EucmVjZWl2ZXJzXz1bXTtiKGEucmVjZWl2ZXJzXyl9KX0pfTtiLnByb3RvdHlwZS5hZGRUcmFuc2NlaXZlcj1mdW5jdGlvbihhLGIpe20ubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5hZGRUcmFuc2NlaXZlcigpIGNhbGxlZDogXCIrSlNPTi5zdHJpbmdpZnkoYSkrXHJcblwiIGluaXQ9XCIrSlNPTi5zdHJpbmdpZnkoYikpO3JldHVybiB0aGlzLmFkZFRyYW5zY2VpdmVySW50ZXJuYWwoYSxiLCExKX07Yi5wcm90b3R5cGUuYWRkVHJhbnNjZWl2ZXJBc3luYz1mdW5jdGlvbihhLGIpe20ubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5hZGRUcmFuc2NlaXZlckFzeW5jKCkgY2FsbGVkOiBcIitKU09OLnN0cmluZ2lmeShhKStcIiBpbml0PVwiK0pTT04uc3RyaW5naWZ5KGIpKTtyZXR1cm4gdGhpcy5hZGRUcmFuc2NlaXZlckludGVybmFsKGEsYiwhMCl9O2IucHJvdG90eXBlLmFkZFRyYW5zY2VpdmVySW50ZXJuYWw9ZnVuY3Rpb24oYSxiLGQpe3ZhciBjPXRoaXM7bS5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLmFkZFRyYW5zY2VpdmVySW50ZXJuYWwoKSBjYWxsZWQ6IFwiK0pTT04uc3RyaW5naWZ5KGEpK1wiIGluaXQ9XCIrSlNPTi5zdHJpbmdpZnkoYikpO3RoaXMuaW5jcmVtZW50UGVuZGluZ1RyYW5zY2VpdmVyQ291bnQoKTtcclxudmFyIHI9ei5SdGNSdHBUcmFuc2NlaXZlckRpcmVjdGlvbi5zZW5kcmVjdixlPXZvaWQgMDtiJiYoZT16LlJ0Y1J0cFRyYW5zY2VpdmVySW5pdC50b1J0Y1J0cFRyYW5zY2VpdmVySW5pdChiKSxlLmRpcmVjdGlvbiYmKHI9ZS5kaXJlY3Rpb24pKTt2YXIgQz1iO2cuUmVtb3RlU2Vzc2lvbi5pc0ZlYXR1cmVDYWxsQ29uc3RyYWludHNTdXBwb3J0ZWQoKSYmKEM9ZSk7dmFyIHg9bmV3IHouUnRwVHJhbnNjZWl2ZXIodGhpcywwLGsuUHJveHlNb2RlLlBzZXVkbyx0aGlzLmlzVW5pZmllZCgpLHIpO3RoaXMudHJhbnNjZWl2ZXJzXy5wdXNoKHgpO2I9bmV3IFByb21pc2UoZnVuY3Rpb24oYixmKXtjLndhaXRVbnRpbENvbm5lY3RlZChjLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5hZGRUcmFuc2NlaXZlckludGVybmFsXCIpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGE/Yy5yZW1vdGVJbnZva2UoITEsdC5tZXRob2RfaWRfUlRDUGVlckNvbm5lY3Rpb25fdC5hZGRUcmFuc2NlaXZlcldpdGhLaW5kLFxyXG5hLEMpOmMucmVtb3RlSW52b2tlRXgoITEsdC5tZXRob2RfaWRfUlRDUGVlckNvbm5lY3Rpb25fdC5hZGRUcmFuc2NlaXZlcldpdGhUcmFjayxbYV0sQyl9KS50aGVuKGZ1bmN0aW9uKGEpe20ubG9nZ2VyLmxvZyhjLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5hZGRUcmFuc2NlaXZlckludGVybmFsKCkgc3VjY2VzcyB3aXRoIG9pZDogXCIrYy5wYXJhbTAoYSkub2lkKTt4LmJpbmQoYyxjLnBhcmFtMChhKS5vaWQpO3guc3luY0JhcnJpZXIoKS50aGVuKGZ1bmN0aW9uKCl7bS5sb2dnZXIubG9nKGMudXNlcl9mcmllbmRseV9pZCgpK1wiLmFkZFRyYW5zY2VpdmVySW50ZXJuYWwoKTogc3VjY2Vzc1wiKTtjLmRlY3JlbWVudFBlbmRpbmdUcmFuc2NlaXZlckNvdW50KCk7Yih4KX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oYSl7Yy5sb2dSZW1vdGVJbnZva2VFcnJvcihhLFwiLnByb3AuYWRkVHJhbnNjZWl2ZXJJbnRlcm5hbCgpIGZhaWxlZCFcIik7Yy5kZWNyZW1lbnRQZW5kaW5nVHJhbnNjZWl2ZXJDb3VudCgpO1xyXG5mKCl9KX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oYSl7Yy5sb2dSZW1vdGVJbnZva2VFcnJvcihhLFwiYWRkVHJhbnNjZWl2ZXJJbnRlcm5hbCgpIGZhaWxlZCFcIik7Yy5kZWNyZW1lbnRQZW5kaW5nVHJhbnNjZWl2ZXJDb3VudCgpO2YoKX0pfSk7bS5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLmFkZFRyYW5zY2VpdmVySW50ZXJuYWwoKSByZXR1cm5pbmc6XCIpO3JldHVybiBkP2I6eH07Yi5wcm90b3R5cGUuaW5jcmVtZW50UGVuZGluZ1RyYW5zY2VpdmVyQ291bnQ9ZnVuY3Rpb24oKXsrK3RoaXMucGVuZGluZ3RyYW5zY2VpdmVyX307Yi5wcm90b3R5cGUuZGVjcmVtZW50UGVuZGluZ1RyYW5zY2VpdmVyQ291bnQ9ZnVuY3Rpb24oKXswPHRoaXMucGVuZGluZ3RyYW5zY2VpdmVyXyYmLS10aGlzLnBlbmRpbmd0cmFuc2NlaXZlcl99O2IucHJvdG90eXBlLmluY3JlbWVudFBlbmRpbmdUcmFja0NvdW50PWZ1bmN0aW9uKCl7Kyt0aGlzLnBlbmRpbmd0cmFja199O2IucHJvdG90eXBlLmRlY3JlbWVudFBlbmRpbmdUcmFja0NvdW50PVxyXG5mdW5jdGlvbigpezA8dGhpcy5wZW5kaW5ndHJhY2tfJiYtLXRoaXMucGVuZGluZ3RyYWNrX307Yi5wcm90b3R5cGUud2FpdFRyYW5zY2VpdmVyQW5kVHJhY2tSZWFkeT1mdW5jdGlvbihhKXt2YXIgYj10aGlzO3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihkLGMpe20ubG9nZ2VyLnRyYWNlKGIudXNlcl9mcmllbmRseV9pZCgpK1wiLndhaXRUcmFuc2NlaXZlckFuZFRyYWNrUmVhZHkoKTogcGVuZGluZ3RyYW5zY2VpdmVyXz1cIitiLnBlbmRpbmd0cmFuc2NlaXZlcl8rXCIsIHBlbmRpbmd0cmFja189XCIrYi5wZW5kaW5ndHJhY2tfKTtpZigwPT1iLnBlbmRpbmd0cmFuc2NlaXZlcl8mJjA9PWIucGVuZGluZ3RyYWNrXyl7Zm9yKDtiLmRlZmVycmVkT2ZmZXJBbnN3ZXJzJiYwPGIuZGVmZXJyZWRPZmZlckFuc3dlcnMubGVuZ3RoOyliLmRlZmVycmVkT2ZmZXJBbnN3ZXJzLnNoaWZ0KCkucG9zdCghMCk7ZCgpfWVsc2UgYi5kZWZlcnJlZE9mZmVyQW5zd2Vycy5wdXNoKG5ldyBrLmRlZmVycmVkX2FjdGlvbihkLFxyXG5jLGEpKSxiLmNoZWNrVHJhbnNjZWl2ZXJBbmRUcmFjayg2MDAsMjUpfSl9O2IucHJvdG90eXBlLmNoZWNrVHJhbnNjZWl2ZXJBbmRUcmFjaz1mdW5jdGlvbihhLGIpe3ZhciBkPXRoaXM7aWYoMD49YSlmb3IobS5sb2dnZXIubG9nKFwiLmNoZWNrVHJhbnNjZWl2ZXJBbmRUcmFjaygpIHRpbWVvdXQgd2FpdGluZyBmb3IgdHJhbnNjZWl2ZXIgcmVhZHkhXCIpO3RoaXMuZGVmZXJyZWRPZmZlckFuc3dlcnMmJjA8dGhpcy5kZWZlcnJlZE9mZmVyQW5zd2Vycy5sZW5ndGg7KXRoaXMuZGVmZXJyZWRPZmZlckFuc3dlcnMuc2hpZnQoKS5wb3N0KCExKTtlbHNlIHNldFRpbWVvdXQoZnVuY3Rpb24oYSl7aWYoMD09ZC5wZW5kaW5ndHJhbnNjZWl2ZXJfJiYwPT1kLnBlbmRpbmd0cmFja18pZm9yKDtkLmRlZmVycmVkT2ZmZXJBbnN3ZXJzJiYwPGQuZGVmZXJyZWRPZmZlckFuc3dlcnMubGVuZ3RoOylkLmRlZmVycmVkT2ZmZXJBbnN3ZXJzLnNoaWZ0KCkucG9zdCghMCk7ZWxzZSBtLmxvZ2dlci5sb2coJy5jaGVja1RyYW5zY2VpdmVyQW5kVHJhY2soKTogY291bnQ9IFwiJytcclxuYSksZC5jaGVja1RyYW5zY2VpdmVyQW5kVHJhY2soLS1hLGIpfSxiLGEpfTtiLnByb3RvdHlwZS5nZXRUcmFuc2NlaXZlcnM9ZnVuY3Rpb24oKXttLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuZ2V0VHJhbnNjZWl2ZXJzKCkgY2FsbGVkLiBcIik7aWYodGhpcy51c2luZ2FzeW5jb25seV8pdGhyb3cgbS5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLmdldFRyYW5zY2VpdmVycygpOiB0aHJvd2luZyBleGNlcHRpb246IG5vdCBhbGxvd2VkIHdoZW4gdXNpbmdBc3luY09ubHkgaXMgdHJ1ZSEhIVwiKSxuZXcgRE9NRXhjZXB0aW9uKFwiLmdldFRyYW5zY2VpdmVycygpIG5vdCBhbGxvd2VkIHdoZW4gdXNpbmdBc3luY09ubHkgaXMgdHJ1ZSEhIVwiKTt0aGlzLmdldFRyYW5zY2VpdmVyc0FzeW5jKCk7bS5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLmdldFRyYW5zY2VpdmVycygpIHJldHVybmluZzpcIit0aGlzLnRyYW5zY2VpdmVyc18ubGVuZ3RoK1xyXG5cIiBpdGVtc1wiKTtyZXR1cm4gdGhpcy50cmFuc2NlaXZlcnNffTtiLnByb3RvdHlwZS5nZXRUcmFuc2NlaXZlcnNBc3luYz1mdW5jdGlvbigpe3ZhciBhPXRoaXM7bS5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLmdldFRyYW5zY2VpdmVyc0FzeW5jKCkgY2FsbGVkLiBcIik7cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKGIsZCl7aWYoIWEuaXNVbmlmaWVkKCkpcmV0dXJuIG0ubG9nZ2VyLmxvZyhhLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5nZXRUcmFuc2NlaXZlcnNBc3luYygpIGNhbGxlZCBpbiBub24tVW5pZmllZC4gXCIpLFByb21pc2UucmVzb2x2ZShhLnRyYW5zY2VpdmVyc18pO2Eud2FpdFVudGlsQ29ubmVjdGVkKGEudXNlcl9mcmllbmRseV9pZCgpK1wiLmdldFRyYW5zY2VpdmVyc0FzeW5jXCIpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gYS5yZW1vdGVJbnZva2UoITEsdC5tZXRob2RfaWRfUlRDUGVlckNvbm5lY3Rpb25fdC5nZXRUcmFuc2NlaXZlcnMpfSkudGhlbihmdW5jdGlvbihkKXttLmxvZ2dlci5sb2coYS51c2VyX2ZyaWVuZGx5X2lkKCkrXHJcblwiLmdldFRyYW5zY2VpdmVyc0FzeW5jKCkgcmVtb3RlIHN1Y2Nlc3MuXCIpO3ZhciBjPVtdLGc9W107ZC5wYXJhbXNbMF0uZm9yRWFjaChmdW5jdGlvbihiKXt2YXIgZj1hLnRyYW5zY2VpdmVyc18uZmluZChmdW5jdGlvbihhKXtyZXR1cm4gYS5vYmplY3RfaWQoKT09PWIub2lkfSk7dm9pZCAwPT09ZiYmKG0ubG9nZ2VyLmxvZyhhLnVzZXJfZnJpZW5kbHlfaWQoKStcIiBhZGRpbmcgYSBSdHBUcmFuc2NlaXZlciB3aXRoIG9pZDpcIitiLm9pZCksZj1uZXcgei5SdHBUcmFuc2NlaXZlcihhLGIub2lkLGsuUHJveHlNb2RlLlJlbW90ZSxhLmlzVW5pZmllZCgpKSk7Zy5wdXNoKGYuc3luY0JhcnJpZXIoKSk7Yy5wdXNoKGYpfSk7UHJvbWlzZS5hbGwoZykudGhlbihmdW5jdGlvbigpe2EudHJhbnNjZWl2ZXJzXz1jO20ubG9nZ2VyLmxvZyhhLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5wcm9wLmdldFRyYW5zY2VpdmVyc0FzeW5jOiByZXR1cm5pbmcgdHJhbnNjZWl2ZXIgd2l0aCBpZHMgW1wiK2EudHJhbnNjZWl2ZXJzXy5tYXAoZnVuY3Rpb24oYSl7cmV0dXJuIGEub2JqZWN0X2lkKCl9KStcclxuXCJdXCIpO2IoYS50cmFuc2NlaXZlcnNfKX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oZCl7YS5sb2dSZW1vdGVJbnZva2VFcnJvcihkLFwiLnByb3AuZ2V0VHJhbnNjZWl2ZXJzQXN5bmMoKSBmYWlsZWQhXCIpO2EudHJhbnNjZWl2ZXJzXz1bXTtiKGEudHJhbnNjZWl2ZXJzXyl9KX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oZCl7YS5sb2dSZW1vdGVJbnZva2VFcnJvcihkLFwiLmdldFRyYW5zY2VpdmVyc0FzeW5jKCkgZmFpbGVkIVwiKTthLnRyYW5zY2VpdmVyc189W107YihhLnRyYW5zY2VpdmVyc18pfSl9KX07T2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFwic2N0cFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zY3RwX30sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYi5wcm90b3R5cGUsXCJvbmRhdGFjaGFubmVsXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLm9uZGF0YWNoYW5uZWxffSxzZXQ6ZnVuY3Rpb24oYSl7dmFyIGI9XHJcbnRoaXM7bS5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLnNldF9vbmRhdGFjaGFubmVsKCkgY2FsbGVkLlwiKTt0aGlzLm9uZGF0YWNoYW5uZWxfPWE7dGhpcy53YWl0VW50aWxDb25uZWN0ZWQodGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIub25kYXRhY2hhbm5lbFwiKS50aGVuKGZ1bmN0aW9uKCl7dmFyIGQ9Yi5yZWdpc3RlckNhbGxiYWNrcyghMSxiLmlzTnVsbENhbGxiYWNrKGEpLHQubWV0aG9kX2lkX1JUQ1BlZXJDb25uZWN0aW9uX3Qub25kYXRhY2hhbm5lbCk7ZC50aGVuKGZ1bmN0aW9uKGEpe20ubG9nZ2VyLmxvZyhiLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5vbmRhdGFjaGFubmVsIGNhbGxiYWNrIHJlY2VpdmVkISEhXCIpO2lmKG51bGw9PT1iLnJlbW90ZWRhdGFjaGFubmVsX3x8Yi5yZW1vdGVkYXRhY2hhbm5lbF8ub2JqZWN0X2lkKCkhPWIucGFyYW0wKGEpLm9pZCliLnJlbW90ZWRhdGFjaGFubmVsXz1uZXcgQi5SdGNEYXRhQ2hhbm5lbChiLGIucGFyYW0wKGEpLm9pZCxcclxuay5Qcm94eU1vZGUuUmVtb3RlKSxiLnJlbW90ZWRhdGFjaGFubmVsXy5zeW5jQmFycmllcigpLnRoZW4oZnVuY3Rpb24oKXttLmxvZ2dlci5sb2coYi51c2VyX2ZyaWVuZGx5X2lkKCkrXCJyZW1vdGVkYXRhY2hhbm5lbF8uc3luY0JhcnJpZXIoKTogc3VjY2Vzc1wiKTt2YXIgYT1uZXcgRXZlbnQoXCJvbmRhdGFjaGFubmVsXCIpO2EuY2hhbm5lbD1iLnJlbW90ZWRhdGFjaGFubmVsXztpZihiLmxvY2FsZGF0YWNoYW5uZWxfJiYhYi5sb2NhbGRhdGFjaGFubmVsXy5pc2Rlc3Ryb3llZCgpKWIubG9jYWxkYXRhY2hhbm5lbF8uc3luY0JhcnJpZXIoKS50aGVuKGZ1bmN0aW9uKCl7bS5sb2dnZXIubG9nKGIudXNlcl9mcmllbmRseV9pZCgpK1wib25kYXRhY2hhbm5lbCgpOiBub3RpZnlpbmcuLi5cIik7aWYoYi5vbmRhdGFjaGFubmVsXyliLm9uZGF0YWNoYW5uZWxfKGEpfSlbXCJjYXRjaFwiXShmdW5jdGlvbigpe20ubG9nZ2VyLmxvZyhiLnVzZXJfZnJpZW5kbHlfaWQoKStcImxvY2FsZGF0YWNoYW5uZWxfLnN5bmNCYXJyaWVyKCk6IGZhaWxlZCFcIil9KTtcclxuZWxzZSBpZihtLmxvZ2dlci5sb2coYi51c2VyX2ZyaWVuZGx5X2lkKCkrXCJvbmRhdGFjaGFubmVsKCk6IG5vdGlmeWluZy4uLlwiKSxiLm9uZGF0YWNoYW5uZWxfKWIub25kYXRhY2hhbm5lbF8oYSl9KVtcImNhdGNoXCJdKGZ1bmN0aW9uKCl7bS5sb2dnZXIubG9nKGIudXNlcl9mcmllbmRseV9pZCgpK1wicmVtb3RlZGF0YWNoYW5uZWxfLnN5bmNCYXJyaWVyKCk6IGZhaWxlZCFcIil9KX0pO3JldHVybiBiLnJlbW90ZUludm9rZSghMCx0Lm1ldGhvZF9pZF9SVENQZWVyQ29ubmVjdGlvbl90Lm9uZGF0YWNoYW5uZWwsZC5zdWNjZXNzKX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oKXttLmxvZ2dlci5sb2coYi51c2VyX2ZyaWVuZGx5X2lkKCkrXCIub25kYXRhY2hhbm5lbCgpIGZhaWxlZC5cIil9KX0sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KTtiLnByb3RvdHlwZS5maXhEYXRhQ2hhbm5lbENvbmZpZz1mdW5jdGlvbihhKXttLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuZml4RGF0YUNoYW5uZWxDb25maWcoKSBjYWxsZWQ6IFwiK1xyXG5hKTt2b2lkIDA9PWEmJihhPXt9KTt2b2lkIDA9PWEubmVnb3RpYXRlZCYmdm9pZCAwPT1hLmlkJiYoYS5uZWdvdGlhdGVkPSExLGEuaWQ9LTEpO3JldHVybiBhfTtiLnByb3RvdHlwZS5jcmVhdGVEYXRhQ2hhbm5lbD1mdW5jdGlvbihhLGIpe3ZhciBkPXRoaXM7bS5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLmNyZWF0ZURhdGFDaGFubmVsKCkgY2FsbGVkLiBsYWJlbDpcIithKTt0aGlzLmxvY2FsZGF0YWNoYW5uZWxfPW5ldyBCLlJ0Y0RhdGFDaGFubmVsKHRoaXMsMCxrLlByb3h5TW9kZS5Qc2V1ZG8pO3RoaXMud2FpdFVudGlsQ29ubmVjdGVkKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLmNyZWF0ZURhdGFDaGFubmVsXCIpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gZC5yZW1vdGVJbnZva2UoITEsdC5tZXRob2RfaWRfUlRDUGVlckNvbm5lY3Rpb25fdC5jcmVhdGVEYXRhQ2hhbm5lbCxhLGQuZml4RGF0YUNoYW5uZWxDb25maWcoYikpfSkudGhlbihmdW5jdGlvbihhKXttLmxvZ2dlci5sb2coZC51c2VyX2ZyaWVuZGx5X2lkKCkrXHJcblwiLmNyZWF0ZURhdGFDaGFubmVsKCkgc3VjY2VzcyB3aXRoIG9pZDogXCIrZC5wYXJhbTAoYSkub2lkKTtkLmxvY2FsZGF0YWNoYW5uZWxfLmJpbmQoZCxkLnBhcmFtMChhKS5vaWQpO2QubG9jYWxkYXRhY2hhbm5lbF8uc3luY0JhcnJpZXIoKS50aGVuKGZ1bmN0aW9uKCl7bS5sb2dnZXIubG9nKGQudXNlcl9mcmllbmRseV9pZCgpK1wiY2hhbm5lbC5zeW5jQmFycmllcigpOiBzdWNjZXNzXCIpfSlbXCJjYXRjaFwiXShmdW5jdGlvbigpe20ubG9nZ2VyLmxvZyhkLnVzZXJfZnJpZW5kbHlfaWQoKStcImNoYW5uZWwuc3luY0JhcnJpZXIoKTogZmFpbGVkIVwiKX0pfSlbXCJjYXRjaFwiXShmdW5jdGlvbihhKXthPWQucGFyYW0wKGEpO20ubG9nZ2VyLmxvZyhkLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5jcmVhdGVEYXRhQ2hhbm5lbCgpIGZhaWxlZCB3aXRoIGVycm9yOiBcIithKX0pO20ubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5jcmVhdGVEYXRhQ2hhbm5lbCgpIHJldHVybmluZzogXCIrXHJcbnRoaXMubG9jYWxkYXRhY2hhbm5lbF8pO3JldHVybiB0aGlzLmxvY2FsZGF0YWNoYW5uZWxffTtyZXR1cm4gYn0oay5Qcm94eU9iamVjdCk7YS5QZWVyQ29ubmVjdGlvbj1ifSw2NTg6ZnVuY3Rpb24oYixhLGMpe3ZhciBlPXRoaXMmJnRoaXMuX19zcHJlYWRBcnJheXN8fGZ1bmN0aW9uKCl7Zm9yKHZhciBhPTAsYj0wLGQ9YXJndW1lbnRzLmxlbmd0aDtiPGQ7YisrKWErPWFyZ3VtZW50c1tiXS5sZW5ndGg7Zm9yKHZhciBhPUFycmF5KGEpLGM9MCxiPTA7YjxkO2IrKylmb3IodmFyIGc9YXJndW1lbnRzW2JdLHI9MCxlPWcubGVuZ3RoO3I8ZTtyKyssYysrKWFbY109Z1tyXTtyZXR1cm4gYX07T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7YS5Qcm94eU9iamVjdD1hLlByb3h5TW9kZT1hLlByb3h5UmVhZHlTdGF0ZT1hLm51bWJlcl9hbGxvY2F0b3I9YS5jYWxsYmFjaz1hLnJwY19jYWxsYmFjaz1hLmRlZmVycmVkX2FjdGlvbj12b2lkIDA7dmFyIHU9XHJcbmMoOTQ2KSxoPWMoODUxKSxkPWMoNTQ1KSx3PWMoMjQ3KSxxPWMoNTUwKSxuPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gYShiLGQsYyl7dGhpcy5yZXNvbHZlPWI7dGhpcy5yZWplY3Q9ZDt0aGlzLm5hbWVfPWN9T2JqZWN0LmRlZmluZVByb3BlcnR5KGEucHJvdG90eXBlLFwibmFtZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5uYW1lX30sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KTthLnByb3RvdHlwZS5wb3N0PWZ1bmN0aW9uKGEpezE9PWE/KGgubG9nZ2VyLmxvZygnZGVmZXJyZWRfYWN0aW9uLnBvc3QoKTogcmVzb2x2aW5nIFwiJyt0aGlzLm5hbWVfKydcIicpLHRoaXMucmVzb2x2ZSgpKTooaC5sb2dnZXIubG9nKCdkZWZlcnJlZF9hY3Rpb24ucG9zdCgpOiByZWplY3RpbmcgXCInK3RoaXMubmFtZV8rJ1wiJyksdGhpcy5yZWplY3QoKSl9O2EucHJvdG90eXBlLnBvc3RXaXRoUmVzdWx0PWZ1bmN0aW9uKGEsYil7MT09YT8oaC5sb2dnZXIubG9nKCdkZWZlcnJlZF9hY3Rpb24ucG9zdCgpOiByZXNvbHZpbmcgXCInK1xyXG50aGlzLm5hbWVfKydcIicpLHRoaXMucmVzb2x2ZShiKSk6KGgubG9nZ2VyLmxvZygnZGVmZXJyZWRfYWN0aW9uLnBvc3QoKTogcmVqZWN0aW5nIFwiJyt0aGlzLm5hbWVfKydcIicpLHRoaXMucmVqZWN0KCkpfTthLnByb3RvdHlwZS5wb3N0UmVzb2x2ZT1mdW5jdGlvbihhKXt0aGlzLnJlc29sdmUoYSl9O2EucHJvdG90eXBlLnBvc3RSZWplY3Q9ZnVuY3Rpb24oYSl7dm9pZCAwPT1hP3RoaXMucmVqZWN0KCk6dGhpcy5yZWplY3QoYSl9O3JldHVybiBhfSgpO2EuZGVmZXJyZWRfYWN0aW9uPW47dmFyIGs9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oYSxiKXt0aGlzLmlkPWE7dGhpcy5pc19udWxsPWJ9fSgpO2EucnBjX2NhbGxiYWNrPWs7dmFyIHY9ZnVuY3Rpb24oKXtmdW5jdGlvbiBhKGIsZCxjKXt0aGlzLnN1Y2Nlc3M9bmV3IGsoYjw8MTYsZCk7dGhpcy5mYWlsPW5ldyBrKGI8PDE2fDEsZCk7dGhpcy5pZD1iO3RoaXMub25lU2hvdD1jfWEucHJvdG90eXBlLnJlc29sdmU9ZnVuY3Rpb24oYSl7aC5sb2dnZXIudHJhY2UoXCJjYWxsYmFjay5yZXNvbHZlKCkgY2FsbGVkLiBbaWQ9XCIrXHJcbnRoaXMuaWQrXCJdXCIpO251bGwhPXRoaXMuaGFuZGxlciYmdGhpcy5oYW5kbGVyKGEpfTthLnByb3RvdHlwZS5yZWplY3Q9ZnVuY3Rpb24oYSl7bnVsbCE9dGhpcy5lcnJfaGFuZGxlciYmdGhpcy5lcnJfaGFuZGxlcihhKX07YS5wcm90b3R5cGUudGhlbj1mdW5jdGlvbihhKXt0aGlzLmhhbmRsZXI9YX07YS5wcm90b3R5cGUucHJvbT1mdW5jdGlvbigpe3ZhciBhPXRoaXM7cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKGIsZCl7YS5oYW5kbGVyPWI7YS5lcnJfaGFuZGxlcj1kfSl9O3JldHVybiBhfSgpO2EuY2FsbGJhY2s9djt2YXIgej1mdW5jdGlvbigpe2Z1bmN0aW9uIGEoYixkLGMpe3RoaXMubWluXz1iPGEuQk9VTkRfTE9XfHxiPmEuQk9VTkRfSElHSD9hLkRFRl9NSU46Yjt0aGlzLm1heF89ZDxhLkJPVU5EX0xPV3x8ZD5hLkJPVU5EX0hJR0g/YS5ERUZfTUFYOmQ7dGhpcy5pbnRlcnZhbF89YzxhLkJPVU5EX0xPV3x8Yz5hLkJPVU5EX0hJR0g/YS5ERUZfSU5URVJWQUw6Yzt0aGlzLm51bWJlcnNfPVxyXG5uZXcgTWFwO3RoaXMubnVtYmVyc18uc2V0KHRoaXMubWluXyx0aGlzLm1heF8pfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShhLnByb3RvdHlwZSxcIm1heFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tYXhffSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLnByb3RvdHlwZSxcIm1pblwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5taW5ffSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLnByb3RvdHlwZSxcImludGVydmFsXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmludGVydmFsX30sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYS5wcm90b3R5cGUsXCJudW1iZXJzXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLm51bWJlcnNffSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pO2EucHJvdG90eXBlLmFsbG9jYXRlPVxyXG5mdW5jdGlvbigpe3ZhciBhPS0xO2lmKDA8dGhpcy5udW1iZXJzXy5zaXplKXt2YXIgYj1BcnJheS5mcm9tKHRoaXMubnVtYmVyc18ua2V5cygpKS5zb3J0KGZ1bmN0aW9uKGEsYil7cmV0dXJuIGEtYn0pWzBdLGQ9dGhpcy5udW1iZXJzXy5nZXQoYiksYT10aGlzLm1pbl8rKGItdGhpcy5taW5fKSp0aGlzLmludGVydmFsXzt0aGlzLm51bWJlcnNfW1wiZGVsZXRlXCJdKGIpO2IrPTE7YjxkJiZ0aGlzLm51bWJlcnNfLnNldChiLGQpfXJldHVybiBhfTthLnByb3RvdHlwZS5kZWFsbG9jYXRlPWZ1bmN0aW9uKGEpe3ZhciBiPUFycmF5LmZyb20odGhpcy5udW1iZXJzXy5rZXlzKCkpLnNvcnQoZnVuY3Rpb24oYSxiKXtyZXR1cm4gYS1ifSk7YT0oYS10aGlzLm1pbl8pL3RoaXMuaW50ZXJ2YWxfO2Zvcih2YXIgZD0hMSxjPTA7YzxiLmxlbmd0aCYmKGJbY109PWErMT8odGhpcy5udW1iZXJzXy5zZXQoYSx0aGlzLm51bWJlcnNfLmdldChiW2NdKSksdGhpcy5udW1iZXJzX1tcImRlbGV0ZVwiXShiW2NdKSxcclxuZD0hMCk6dGhpcy5udW1iZXJzXy5nZXQoYltjXSk9PWEmJih0aGlzLm51bWJlcnNfLnNldChiW2NdLGErMSksYysxPGIubGVuZ3RoJiZiW2MrMV09PWErMSYmKHRoaXMubnVtYmVyc18uc2V0KGJbY10sdGhpcy5udW1iZXJzXy5nZXQoYltjKzFdKSksdGhpcy5udW1iZXJzX1tcImRlbGV0ZVwiXShiW2MrMV0pKSxkPSEwKSwhZCk7YysrKTtkfHx0aGlzLm51bWJlcnNfLnNldChhLGErMSl9O2EuQk9VTkRfTE9XPTA7YS5CT1VORF9ISUdIPTQyOTQ5NjcyOTU7YS5ERUZfTUlOPTA7YS5ERUZfTUFYPTEwMjQ7YS5ERUZfSU5URVJWQUw9MTtyZXR1cm4gYX0oKTthLm51bWJlcl9hbGxvY2F0b3I9ejt2YXIgZzsoZnVuY3Rpb24oYSl7YVthLk5vdENvbmZpZ3VyZWQ9MF09XCJOb3RDb25maWd1cmVkXCI7YVthLkNvbmZpZ3VyZWQ9MV09XCJDb25maWd1cmVkXCI7YVthLkVycm9yPTJdPVwiRXJyb3JcIjthW2EuRGVzdHJveWVkPTNdPVwiRGVzdHJveWVkXCJ9KShnPWEuUHJveHlSZWFkeVN0YXRlfHwoYS5Qcm94eVJlYWR5U3RhdGU9XHJcbnt9KSk7dmFyIEI7KGZ1bmN0aW9uKGEpe2FbYS5Mb2NhbD0wXT1cIkxvY2FsXCI7YVthLlJlbW90ZT0xXT1cIlJlbW90ZVwiO2FbYS5Qc2V1ZG89Ml09XCJQc2V1ZG9cIn0pKEI9YS5Qcm94eU1vZGV8fChhLlByb3h5TW9kZT17fSkpO2I9ZnVuY3Rpb24oKXtmdW5jdGlvbiBhKGIsYyxrLHgscixBKXt2YXIgej10aGlzO3ZvaWQgMD09PXImJihyPW51bGwpO3ZvaWQgMD09PUEmJihBPVtdKTtmb3IodmFyIHY9W10sbj02O248YXJndW1lbnRzLmxlbmd0aDtuKyspdltuLTZdPWFyZ3VtZW50c1tuXTt0aGlzLmhkeG1zPXUuZ2V0UmVkaXJlY3RvcigpO3RoaXMuaWlkPWM7dGhpcy5vaWQ9azt0aGlzLm1vZGU9eDt0aGlzLnByb3h5c3RhdGU9Zy5Ob3RDb25maWd1cmVkO3RoaXMuZGVmZXJyZWRBY3Rpb25zPVtdO3RoaXMucGVuZGluZ1N5bmNCYXJyaWVycz1bXTt0aGlzLmNicz1uZXcgTWFwO2lmKHg9PT1CLkxvY2FsKXtuPSExO3RoaXMuaWlkPT09cS5jbGFzc19pZF90LkVuZ2luZUNvbnRyb2wmJihuPVxyXG4hMCk7dmFyIGw9dGhpczt0aGlzLmhkeG1zLnN0YXJ0UmVkaXJlY3Rpb24obix0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKSkudGhlbihmdW5jdGlvbigpe3oub2lkPWEubmV4dElkKys7aC5sb2dnZXIubG9nKHoudXNlcl9mcmllbmRseV9pZCgpK1wiIGFzc2lnbmVkIGxvY2FsIG9pZDpcIit6Lm9pZCk7cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKGEsYil7bC53YWl0VW50aWxDb25uZWN0ZWRFeChsLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5jdG9yKClcIixBKS50aGVuKGZ1bmN0aW9uKCl7aC5sb2dnZXIubG9nKGwudXNlcl9mcmllbmRseV9pZCgpK1wiLmN0b3IoKSBhbGwgcGFyYW1ldGVyIHJwYyBvYmplY3RzIGFyZSByZWFkeS5cIik7dmFyIGE9bC5vaWRzRnJvbVByb3h5T2piZWN0cyhBKS5jb25jYXQodiksYj1xLldlYnJwY0NsYXNzTGliSW5mb1V0aWwuZ2V0TWV0aG9kRmVhdHVyZUJ5aWQoYywwKTtyZXR1cm4gbC5oZHhtcy5XU1NlbmRPYmplY3RXcmFwcGVyKGIsYywwLGQuV3NKc29uVXRpbC5jcmVhdGVNZXNzYWdlQnlpZC5hcHBseShkLldzSnNvblV0aWwsXHJcbmUoWyExLCExLGQud3NfbXNnX3R5cGVfdC5yZXEsYywwLGwub2lkXSxhKSkpfSkudGhlbihmdW5jdGlvbihiKXtoLmxvZ2dlci5sb2cobC51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuY3RvcigpIHN1Y2Nlc3MuXCIpO2EoYil9KVtcImNhdGNoXCJdKGZ1bmN0aW9uKCl7aC5sb2dnZXIubG9nKGwudXNlcl9mcmllbmRseV9pZCgpK1wiLmN0b3IoKSBmYWlsZWQuXCIpO2IoKX0pfSl9KS50aGVuKGZ1bmN0aW9uKGEpe2gubG9nZ2VyLnRyYWNlKFwiUHJveHlPYmplY3Q6IHNldHRpbmcgc3RhdGUgdG8gY29uZmlndXJlZC4gKGlpZDogXCIrei5paWQrXCIgb2lkOiBcIit6Lm9pZCtcIilcIik7dmFyIGQ9ei5vaWQ7bC5wcm94eXN0YXRlPWcuQ29uZmlndXJlZDtsLm9pZD16LnBhcmFtMChhKTtoLmxvZ2dlci5sb2coei51c2VyX2ZyaWVuZGx5X2lkKCkrXCIgYXNzaWduZWQgcmVtb3RlIG9pZCBmb3IgbG9jYWwgb2lkOlwiK2QpO2wub25Db25uZWN0ZWQoKTtyJiZyKCk7dy5nZXRHQygpLnRyYWNrT2JqZWN0KHosYil9KVtcImNhdGNoXCJdKGZ1bmN0aW9uKCl7bC5wcm94eXN0YXRlPVxyXG5nLkVycm9yO2wub25Db25uZWN0ZWQoKX0pfWVsc2UgeD09PUIuUmVtb3RlJiYodGhpcy5wcm94eXN0YXRlPWcuQ29uZmlndXJlZCx3LmdldEdDKCkudHJhY2tPYmplY3QodGhpcyxiKSl9YS5wcm90b3R5cGUuc3luY0JhcnJpZXJEZWVwPWZ1bmN0aW9uKGEsYil7dmFyIGQ9ITA7MDx0aGlzLnBlbmRpbmdTeW5jQmFycmllcnMubGVuZ3RoJiYoZD0hMSk7dGhpcy5wZW5kaW5nU3luY0JhcnJpZXJzLnB1c2gobmV3IG4oYSxiLHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLnN5bmNCYXJyaWVyXCIpKTtoLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuc3luY0JhcnJpZXJEZWVwKCkgcXVlaW5nIHJlcXVlc3QgZm9yOlwiK3RoaXMub2lkK1wiLCBydjpcIitkK1wiLCBpdGVtczpcIit0aGlzLnBlbmRpbmdTeW5jQmFycmllcnMubGVuZ3RoKTtyZXR1cm4gZH07YS5wcm90b3R5cGUuc3luY0JhcnJpZXJSZXNvbHZlPWZ1bmN0aW9uKGEpe2ZvcihoLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXHJcblwiLnN5bmNCYXJyaWVyUmVzb2x2ZSgpIGl0ZW1zOlwiK3RoaXMucGVuZGluZ1N5bmNCYXJyaWVycy5sZW5ndGgpO3RoaXMucGVuZGluZ1N5bmNCYXJyaWVycyYmMDx0aGlzLnBlbmRpbmdTeW5jQmFycmllcnMubGVuZ3RoOyloLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuc3luY0JhcnJpZXJSZXNvbHZlKCkgaXRlbXM6XCIrdGhpcy5wZW5kaW5nU3luY0JhcnJpZXJzLmxlbmd0aCtcIiByZXNvbHZpbmcgcmVxdWVzdCBmb3I6XCIrdGhpcy5vaWQpLHRoaXMucGVuZGluZ1N5bmNCYXJyaWVycy5zaGlmdCgpLnBvc3RSZXNvbHZlKGEpfTthLnByb3RvdHlwZS5zeW5jQmFycmllclJlamVjdD1mdW5jdGlvbihhKXtmb3IoaC5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLnN5bmNCYXJyaWVyUmVqZWN0KCkgaXRlbXM6XCIrdGhpcy5wZW5kaW5nU3luY0JhcnJpZXJzLmxlbmd0aCk7dGhpcy5wZW5kaW5nU3luY0JhcnJpZXJzJiYwPHRoaXMucGVuZGluZ1N5bmNCYXJyaWVycy5sZW5ndGg7KWgubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcclxuXCIuc3luY0JhcnJpZXJSZWplY3QoKSByZWplY3RpbmcgcmVxdWVzdCBmb3I6XCIrdGhpcy5vaWQpLHRoaXMucGVuZGluZ1N5bmNCYXJyaWVycy5zaGlmdCgpLnBvc3RSZWplY3QoYSl9O09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLnByb3RvdHlwZSxcInByb3h5cmVhZHlzdGF0ZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wcm94eXN0YXRlfSxzZXQ6ZnVuY3Rpb24oYSl7dGhpcy5wcm94eXN0YXRlPWF9LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSk7YS5wcm90b3R5cGUuYmluZD1mdW5jdGlvbihhLGIpe2gubG9nZ2VyLnRyYWNlKFwiUHJveHlPYmplY3Q6IGJpbmRpbmcgb2JqZWN0LiAoaWlkOiBcIit0aGlzLmlpZCtcIiBvaWQ6IFwiK2IrXCIgbW9kZTogXCIrdGhpcy5tb2RlK1wiKVwiKTtpZih0aGlzLm1vZGU9PT1CLlBzZXVkbyl7dGhpcy5wcm94eXN0YXRlPWcuQ29uZmlndXJlZDt2YXIgZD10aGlzLm9pZDt0aGlzLm9pZD1iO2gubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcclxuXCIgYXNzaWduZWQgcmVtb3RlIG9pZCBmb3IgbG9jYWwgb2lkOlwiK2QpO3RoaXMub25Db25uZWN0ZWQoKTt3LmdldEdDKCkudHJhY2tPYmplY3QodGhpcyxhKTt0aGlzLm1vZGU9Qi5SZW1vdGV9ZWxzZSB0aGlzLm1vZGU9PT1CLlJlbW90ZT9oLmxvZ2dlci5sb2coXCJQcm94eU9iamVjdDogYmluZGluZyBhbHJlYWR5IGNvbXBsZXRlLlwiKTpoLmxvZ2dlci5sb2coXCJQcm94eU9iamVjdDogYmluZGluZyBmYWlsdXJlLiBpbmNvcnJlY3QgbW9kZSFcIil9O2EucHJvdG90eXBlLnJlY29uc3RydWN0b3I9ZnVuY3Rpb24oYSxiLGMpe2Zvcih2YXIgeD10aGlzLHI9W10sQT0zO0E8YXJndW1lbnRzLmxlbmd0aDtBKyspcltBLTNdPWFyZ3VtZW50c1tBXTt0aGlzLnByb3h5c3RhdGU9Zy5Ob3RDb25maWd1cmVkO3RoaXMuZGVmZXJyZWRBY3Rpb25zPVtdO0E9cS5XZWJycGNDbGFzc0xpYkluZm9VdGlsLmdldE1ldGhvZEZlYXR1cmVCeWlkKGIsMCk7dGhpcy5oZHhtcy5XU1NlbmRPYmplY3RXcmFwcGVyKEEsXHJcbmIsMCxkLldzSnNvblV0aWwuY3JlYXRlTWVzc2FnZUJ5aWQuYXBwbHkoZC5Xc0pzb25VdGlsLGUoWyExLCExLGQud3NfbXNnX3R5cGVfdC5yZXEsYiwwLHRoaXMub2lkXSxyKSkpLnRoZW4oZnVuY3Rpb24oYil7aC5sb2dnZXIudHJhY2UoXCJQcm94eU9iamVjdDogc2V0dGluZyBzdGF0ZSB0byBjb25maWd1cmVkLiAoaWlkOiBcIit4LmlpZCtcIiBvaWQ6IFwiK3gub2lkK1wiKVwiKTt2YXIgZD14Lm9pZDt4LnByb3h5c3RhdGU9Zy5Db25maWd1cmVkO3gub2lkPXgucGFyYW0wKGIpO2gubG9nZ2VyLmxvZyh4LnVzZXJfZnJpZW5kbHlfaWQoKStcIiBhc3NpZ25lZCByZW1vdGUgb2lkIGZvciBsb2NhbCBvaWQ6XCIrZCk7eC5vbkNvbm5lY3RlZCgpO3cuZ2V0R0MoKS50cmFja09iamVjdCh4LGEpfSlbXCJjYXRjaFwiXShmdW5jdGlvbigpe3gucHJveHlzdGF0ZT1nLkVycm9yO3gub25Db25uZWN0ZWQoKX0pfTthLnByb3RvdHlwZS5zZXRQYXJlbnQ9ZnVuY3Rpb24oYSl7dy5nZXRHQygpLnNldFBhcmVudCh0aGlzLFxyXG5hKX07YS5wcm90b3R5cGUucmVsZWFzZT1mdW5jdGlvbigpe2gubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5yZWxlYXNlKCkgY2FsbGVkLlwiKTt3LmdldEdDKCkucmVsZWFzZU9iamVjdCh0aGlzKX07YS5wcm90b3R5cGUuZGVzdHJveT1mdW5jdGlvbigpe2gubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5kZXN0cm95KCkgY2FsbGVkLlwiKTt0aGlzLnByb3h5c3RhdGU9Zy5EZXN0cm95ZWQ7dmFyIGE9cS5XZWJycGNDbGFzc0xpYkluZm9VdGlsLmdldE1ldGhvZEZlYXR1cmVCeWlkKHRoaXMuaWlkLDApO3RoaXMuaGR4bXMuV1NTZW5kT2JqZWN0V3JhcHBlcihhLHRoaXMuaWlkLDAsZC5Xc0pzb25VdGlsLmNyZWF0ZU1lc3NhZ2VCeWlkKCExLCEwLGQud3NfbXNnX3R5cGVfdC5yZXEsdGhpcy5paWQsMCx0aGlzLm9pZCkpO3RoaXMuY2xlYXJDYWxsYmFja3MoKX07YS5wcm90b3R5cGUuaXNkZXN0cm95ZWQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wcm94eXN0YXRlPT1cclxuZy5EZXN0cm95ZWR9O2EucHJvdG90eXBlLm9uQ29ubmVjdGVkPWZ1bmN0aW9uKCl7Zm9yKDt0aGlzLmRlZmVycmVkQWN0aW9ucyYmMDx0aGlzLmRlZmVycmVkQWN0aW9ucy5sZW5ndGg7KXRoaXMuZGVmZXJyZWRBY3Rpb25zLnNoaWZ0KCkucG9zdCh0aGlzLnByb3h5c3RhdGU9PWcuQ29uZmlndXJlZCl9O2EucHJvdG90eXBlLmlzUHNldWRvPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubW9kZT09Qi5Qc2V1ZG99O2EucHJvdG90eXBlLmNoZWNrU3RhdGU9ZnVuY3Rpb24oYSxiLGQpe3ZhciBjPXRoaXM7MD49YT8oaC5sb2dnZXIubG9nKFwiUHJveHlPYmplY3QuY2hlY2tTdGF0ZSgpIHRpbWVvdXQgd2FpdGluZyBmb3IgY29ubmVjdGlvbiByZXNwb25zZSEgZmFpbGVkLiAoaWlkOiBcIitjLmlpZCtcIiBvaWQ6IFwiK2Mub2lkK1wibmFtZTogXCIrZCtcIilcIiksYy5vbkNvbm5lY3RlZCgpKTpzZXRUaW1lb3V0KGZ1bmN0aW9uKGEsZCl7aWYoYy5wcm94eXN0YXRlPT1nLkNvbmZpZ3VyZWQpYy5vbkNvbm5lY3RlZCgpO1xyXG5lbHNlIGlmKGMucHJveHlzdGF0ZT09Zy5FcnJvciljLm9uQ29ubmVjdGVkKCk7ZWxzZSBpZihjLnByb3h5c3RhdGU9PWcuRGVzdHJveWVkKWMub25Db25uZWN0ZWQoKTtlbHNlIGMuY2hlY2tTdGF0ZSgtLWEsYixkKX0sYixhLGQpfTthLnByb3RvdHlwZS53YWl0VW50aWxDb25uZWN0ZWQ9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcztyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24oZCxjKXtiPyhoLmxvZ2dlci50cmFjZShcIlByb3h5T2JqZWN0LndhaXRVbnRpbENvbm5lY3RlZCgpOiByZWFkeVN0YXRlPVwiK2IucHJveHlzdGF0ZStcIi4gKGlpZDogXCIrYi5paWQrXCIgb2lkOiBcIitiLm9pZCtcIilcIiksYi5wcm94eXN0YXRlPT1nLkRlc3Ryb3llZD8oYi5vbkNvbm5lY3RlZCgpLGgubG9nZ2VyLnRyYWNlKFwicmVqZWN0aW5nIGFscmVhZHkgZGVzdHJveWVkIE9iamVjdDpcIitiLnVzZXJfZnJpZW5kbHlfaWQoKSksYyhcIk9iamVjdCBhbHJlYWR5IGRlc3Ryb3llZCA6XCIrYi51c2VyX2ZyaWVuZGx5X2lkKCkpKTpcclxuYi5wcm94eXN0YXRlPT1nLkNvbmZpZ3VyZWQ/KGIub25Db25uZWN0ZWQoKSxkKCkpOmIucHJveHlzdGF0ZT09Zy5FcnJvcj8oaC5sb2dnZXIudHJhY2UoXCJQcm94eU9iamVjdC53YWl0VW50aWxDb25uZWN0ZWQoKTogcmVhZHlTdGF0ZT1cIitiLnByb3h5c3RhdGUrXCIuIChpaWQ6IFwiK2IuaWlkK1wiIG9pZDogXCIrYi5vaWQrXCIpXCIpLGIub25Db25uZWN0ZWQoKSxjKCkpOihoLmxvZ2dlci5sb2coJ1Byb3h5T2JqZWN0LndhaXRVbnRpbENvbm5lY3RlZCgpOiBkZWZlcnJpbmcgYWN0aW9uIFwiJythKydcIi4gKGlpZDogJytiLmlpZCtcIiBvaWQ6IFwiK2Iub2lkK1wiKVwiKSxiLmRlZmVycmVkQWN0aW9ucy5wdXNoKG5ldyBuKGQsYyxhKSksYi5jaGVja1N0YXRlKDYwMCwyNSxhKSkpOmMoXCJJbnZhbGlkIE9iamVjdFwiKX0pfTthLnByb3RvdHlwZS5yZW1vdGVJbnZva2U9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9W10saz0yO2s8YXJndW1lbnRzLmxlbmd0aDtrKyspY1trLTJdPWFyZ3VtZW50c1trXTtpZih0aGlzLnByb3h5c3RhdGU9PVxyXG5nLkRlc3Ryb3llZClyZXR1cm4gaC5sb2dnZXIudHJhY2UoXCJyZWplY3RpbmcgYWxyZWFkeSBkZXN0cm95ZWQgT2JqZWN0OlwiK3RoaXMudXNlcl9mcmllbmRseV9pZCgpKSxQcm9taXNlLnJlamVjdChcIkNhbm5vdCBpbnZva2UgZGVzdHJveWVkIG9iamVjdCA6XCIrdGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkpO2lmKHRoaXMucHJveHlzdGF0ZT09Zy5FcnJvcilyZXR1cm4gaC5sb2dnZXIudHJhY2UoXCJyZWplY3RpbmcgYWxyZWFkeSBlcnJvciBzdGF0ZSBPYmplY3Q6XCIrdGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkpLFByb21pc2UucmVqZWN0KFwiQ2Fubm90IGludm9rZSBvYmplY3QgaW4gRXJyb3Igc3RhdGU6XCIrdGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkpO2s9cS5XZWJycGNDbGFzc0xpYkluZm9VdGlsLmdldE1ldGhvZEZlYXR1cmVCeWlkKHRoaXMuaWlkLGIpO3JldHVybiB0aGlzLmhkeG1zLldTU2VuZE9iamVjdFdyYXBwZXIoayx0aGlzLmlpZCxiLGQuV3NKc29uVXRpbC5jcmVhdGVNZXNzYWdlQnlpZC5hcHBseShkLldzSnNvblV0aWwsXHJcbmUoW2EsITEsZC53c19tc2dfdHlwZV90LnJlcSx0aGlzLmlpZCxiLHRoaXMub2lkXSxjKSkpfTthLnByb3RvdHlwZS53YWl0VW50aWxDb25uZWN0ZWRFeD1mdW5jdGlvbihhLGIpe3ZhciBkPXRoaXM7cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKGMsZyl7aWYoZCl7Zm9yKHZhciBlPVtdLGs9MDtrPGIubGVuZ3RoO2srKyl7dmFyIHo9YltrXTtpZih6IGluc3RhbmNlb2YgQXJyYXkpZm9yKHZhciB2PTA7djx6Lmxlbmd0aDt2Kyspe3ZhciB0PXpbdl07ZS5wdXNoKHQud2FpdFVudGlsQ29ubmVjdGVkKGErXCIuXCIrdC51c2VyX2ZyaWVuZGx5X2lkKCkpKX1lbHNlIGUucHVzaCh6LndhaXRVbnRpbENvbm5lY3RlZChhK1wiLlwiK3oudXNlcl9mcmllbmRseV9pZCgpKSl9UHJvbWlzZS5hbGwoZSkudGhlbihmdW5jdGlvbigpe2gubG9nZ2VyLmxvZyhkLnVzZXJfZnJpZW5kbHlfaWQoKStcIi53YWl0VW50aWxDb25uZWN0ZWRFeCgpIHN1Y2Nlc3MuXCIpO2MoKX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oYSl7ZC5sb2dSZW1vdGVJbnZva2VFcnJvcihhLFxyXG5cIi53YWl0VW50aWxDb25uZWN0ZWRFeCgpOiBmYWlsZWQuXCIpO2coKX0pfWVsc2UgZyhcIkludmFsaWQgT2JqZWN0XCIpfSl9O2EucHJvdG90eXBlLm9pZHNGcm9tUHJveHlPamJlY3RzPWZ1bmN0aW9uKGEpe2Zvcih2YXIgYj1bXSxkPTA7ZDxhLmxlbmd0aDtkKyspe3ZhciBjPWFbZF07aWYoYyBpbnN0YW5jZW9mIEFycmF5KXtmb3IodmFyIGc9W10sZT0wO2U8Yy5sZW5ndGg7ZSsrKWcucHVzaCh7b2lkOmNbZV0ub2JqZWN0X2lkKCl9KTtiLnB1c2goZyl9ZWxzZSBiLnB1c2goe29pZDpjLm9iamVjdF9pZCgpfSl9cmV0dXJuIGJ9O2EucHJvdG90eXBlLnJlbW90ZUludm9rZUV4PWZ1bmN0aW9uKGEsYixjKXtmb3IodmFyIGs9W10scj0zO3I8YXJndW1lbnRzLmxlbmd0aDtyKyspa1tyLTNdPWFyZ3VtZW50c1tyXTtpZih0aGlzLnByb3h5c3RhdGU9PWcuRGVzdHJveWVkKXJldHVybiBoLmxvZ2dlci50cmFjZShcInJlamVjdGluZyBhbHJlYWR5IGRlc3Ryb3llZCBPYmplY3Q6XCIrdGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkpLFxyXG5Qcm9taXNlLnJlamVjdChcIkNhbm5vdCBpbnZva2UgZGVzdHJveWVkIG9iamVjdCA6XCIrdGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkpO2lmKHRoaXMucHJveHlzdGF0ZT09Zy5FcnJvcilyZXR1cm4gaC5sb2dnZXIudHJhY2UoXCJyZWplY3RpbmcgYWxyZWFkeSBlcnJvciBzdGF0ZSBPYmplY3Q6XCIrdGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkpLFByb21pc2UucmVqZWN0KFwiQ2Fubm90IGludm9rZSBvYmplY3QgaW4gRXJyb3Igc3RhdGU6XCIrdGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkpO3ZhciBBPXRoaXM7cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKGcscil7QS53YWl0VW50aWxDb25uZWN0ZWRFeChBLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5yZW1vdGVJbnZva2VFeFwiLGMpLnRoZW4oZnVuY3Rpb24oKXtoLmxvZ2dlci5sb2coQS51c2VyX2ZyaWVuZGx5X2lkKCkrXCIucmVtb3RlSW52b2tlRXgoKSBhbGwgcGFyYW1ldGVyIHJwYyBvYmplY3RzIGFyZSByZWFkeS5cIik7dmFyIGc9QS5vaWRzRnJvbVByb3h5T2piZWN0cyhjKS5jb25jYXQoayksXHJcbnI9cS5XZWJycGNDbGFzc0xpYkluZm9VdGlsLmdldE1ldGhvZEZlYXR1cmVCeWlkKEEuaWlkLGIpO3JldHVybiBBLmhkeG1zLldTU2VuZE9iamVjdFdyYXBwZXIocixBLmlpZCxiLGQuV3NKc29uVXRpbC5jcmVhdGVNZXNzYWdlQnlpZC5hcHBseShkLldzSnNvblV0aWwsZShbYSwhMSxkLndzX21zZ190eXBlX3QucmVxLEEuaWlkLGIsQS5vaWRdLGcpKSl9KS50aGVuKGZ1bmN0aW9uKGEpe2gubG9nZ2VyLmxvZyhBLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5yZW1vdGVJbnZva2VFeCgpIHN1Y2Nlc3MuXCIpO2coYSl9KVtcImNhdGNoXCJdKGZ1bmN0aW9uKCl7aC5sb2dnZXIubG9nKEEudXNlcl9mcmllbmRseV9pZCgpK1wiLnJlbW90ZUludm9rZUV4KCkgZmFpbGVkLlwiKTtyKCl9KX0pfTthLnByb3RvdHlwZS5sb2dSZW1vdGVJbnZva2VFcnJvcj1mdW5jdGlvbihhLGIpe3ZhciBkPVwiXCIsYz1hO2M/ZD1iK1wiIHdpdGggZXJyb3I6IFwiK0pTT04uc3RyaW5naWZ5KGMubWVzc2FnZSk6KGQ9dGhpcy5wYXJhbTAoYSksXHJcbmM9MCE9PU9iamVjdC5rZXlzKGQpLmxlbmd0aD9uZXcgRE9NRXhjZXB0aW9uKGIrXCIgd2l0aCBlcnJvcjogXCIrSlNPTi5zdHJpbmdpZnkoZCksdGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkpOm5ldyBET01FeGNlcHRpb24oYix0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKSksZD1jLm1lc3NhZ2UpO2gubG9nZ2VyLmxvZ3godGhpcy5pc2Rlc3Ryb3llZCgpLHRoaXMudXNlcl9mcmllbmRseV9pZCgpK2QpO3JldHVybiBjfTthLnByb3RvdHlwZS5hbGxvY2F0ZV9jYmlkPWZ1bmN0aW9uKCl7cmV0dXJuIGEuY2JpZF9hbGxvY2F0b3JfLmFsbG9jYXRlKCl9O2EucHJvdG90eXBlLmRlYWxsb2NhdGVfY2JpZD1mdW5jdGlvbihiKXthLmNiaWRfYWxsb2NhdG9yXy5kZWFsbG9jYXRlKGIpfTthLnByb3RvdHlwZS5yZWdpc3RlckNhbGxiYWNrcz1mdW5jdGlvbihhLGIsZCl7dmFyIGM9dGhpcyxnPXRoaXMuYWxsb2NhdGVfY2JpZCgpO2E9bmV3IHYoZyxiLGEpOzA+ZyYmaC5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1xyXG5cIi5yZWdpc3RlckNhbGxiYWNrcygpLiAhISEhIHJhbiBvdXQgb2YgY2JpZCAhISEhXCIpO2J8fCh0aGlzLmNicy5zZXQoZyxkKSxhLmNvbXBsZXRpb25fY2I9ZnVuY3Rpb24oYSxiKXtjLnVucmVnaXN0ZXJDYWxsYmFja3MoYSl9LHRoaXMuaGR4bXMucmVnaXN0ZXJIYW5kbGVyKHRoaXMuaWlkLHRoaXMub2lkLGQsYSkpO3JldHVybiBhfTthLnByb3RvdHlwZS51bnJlZ2lzdGVyQ2FsbGJhY2tzPWZ1bmN0aW9uKGEpe3RoaXMuY2JzLmhhcyhhKT8odGhpcy5oZHhtcy51bnJlZ2lzdGVySGFuZGxlcih0aGlzLmlpZCx0aGlzLm9pZCxhKSx0aGlzLmRlYWxsb2NhdGVfY2JpZChhKSx0aGlzLmNic1tcImRlbGV0ZVwiXShhKSk6aC5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLnVucmVnaXN0ZXJDYWxsYmFja3MoKS4gbWlkPVwiK3RoaXMuY2JzLmdldChhKStcIiBjYmlkPVwiK2ErXCIgQ2FudCBmaW5kIGNhbGxiYWNrIGhhbmRsZXIgcmVnaXN0cmF0aW9uISEhIVwiKX07YS5wcm90b3R5cGUuY2xlYXJDYWxsYmFja3M9XHJcbmZ1bmN0aW9uKCl7aC5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLmNsZWFyQ2FsbGJhY2tzKCkuXCIpO2Zvcih2YXIgYT0wLGI9QXJyYXkuZnJvbSh0aGlzLmNicy5rZXlzKCkpO2E8Yi5sZW5ndGg7YSsrKXt2YXIgZD1iW2FdO3RoaXMuaGR4bXMudW5yZWdpc3RlckhhbmRsZXIodGhpcy5paWQsdGhpcy5vaWQsZCk7dGhpcy5kZWFsbG9jYXRlX2NiaWQoZCl9dGhpcy5jYnMuY2xlYXIoKX07YS5wcm90b3R5cGUub2JqZWN0X2lkPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMub2lkfTthLnByb3RvdHlwZS5wYXJhbTA9ZnVuY3Rpb24oYSl7dmFyIGI9e307YSYmYS5wYXJhbXMmJihiPWEucGFyYW1zWzBdKTtyZXR1cm4gYn07YS5wcm90b3R5cGUuaXNOdWxsQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7cmV0dXJuIHZvaWQgMD09YXx8bnVsbD09YX07YS5wcm90b3R5cGUudXNlcl9mcmllbmRseV9pZD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuY29uc3RydWN0b3IubmFtZTswPD10aGlzLmlpZCYmXHJcbihhPXEuY2xhc3NfaWRfdFt0aGlzLmlpZF0pO3JldHVybiBhK1wiW1wiK3RoaXMub2lkK1wiXVwifTthLnByb3RvdHlwZS5pc1JlZGlyZWN0ZWQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5oZHhtcy5pc1JlZGlyZWN0ZWQoKX07YS5wcm90b3R5cGUuaXNWYWxpZD1mdW5jdGlvbigpe3JldHVybiEodGhpcy5wcm94eXN0YXRlPT09Zy5FcnJvcnx8dGhpcy5wcm94eXN0YXRlPT09Zy5EZXN0cm95ZWQpfTthLnByb3RvdHlwZS5yZWdpc3RlclN0YXRlQ2hhbmdlTm90aWZpY2F0aW9uPWZ1bmN0aW9uKGEpe3RoaXMuaGR4bXMucmVnaXN0ZXJTdGF0ZUNoYW5nZU5vdGlmaWNhdGlvbihhKX07YS5wcm90b3R5cGUudW5yZWdpc3RlclN0YXRlQ2hhbmdlTm90aWZpY2F0aW9uPWZ1bmN0aW9uKGEpe3RoaXMuaGR4bXMudW5yZWdpc3RlclN0YXRlQ2hhbmdlTm90aWZpY2F0aW9uKGEpfTthLm5leHRJZD0wO2EuQ0JJRF9NQVg9NjU1MzY7YS5jYmlkX2FsbG9jYXRvcl89bmV3IHooMCxhLkNCSURfTUFYLDEpO3JldHVybiBhfSgpO1xyXG5hLlByb3h5T2JqZWN0PWJ9LDE0NDpmdW5jdGlvbihiLGEsYyl7dmFyIGU9dGhpcyYmdGhpcy5fX2V4dGVuZHN8fGZ1bmN0aW9uKCl7dmFyIGE9ZnVuY3Rpb24oYixkKXthPU9iamVjdC5zZXRQcm90b3R5cGVPZnx8e19fcHJvdG9fXzpbXX1pbnN0YW5jZW9mIEFycmF5JiZmdW5jdGlvbihhLGIpe2EuX19wcm90b19fPWJ9fHxmdW5jdGlvbihhLGIpe2Zvcih2YXIgZiBpbiBiKWIuaGFzT3duUHJvcGVydHkoZikmJihhW2ZdPWJbZl0pfTtyZXR1cm4gYShiLGQpfTtyZXR1cm4gZnVuY3Rpb24oYixkKXtmdW5jdGlvbiBjKCl7dGhpcy5jb25zdHJ1Y3Rvcj1ifWEoYixkKTtiLnByb3RvdHlwZT1udWxsPT09ZD9PYmplY3QuY3JlYXRlKGQpOihjLnByb3RvdHlwZT1kLnByb3RvdHlwZSxuZXcgYyl9fSgpLHU9dGhpcyYmdGhpcy5fX2F3YWl0ZXJ8fGZ1bmN0aW9uKGEsYixkLGMpe2Z1bmN0aW9uIGcoYSl7cmV0dXJuIGEgaW5zdGFuY2VvZiBkP2E6bmV3IGQoZnVuY3Rpb24oYil7YihhKX0pfXJldHVybiBuZXcgKGR8fFxyXG4oZD1Qcm9taXNlKSkoZnVuY3Rpb24oZixkKXtmdW5jdGlvbiByKGEpe3RyeXtDKGMubmV4dChhKSl9Y2F0Y2goYil7ZChiKX19ZnVuY3Rpb24gZShhKXt0cnl7QyhjW1widGhyb3dcIl0oYSkpfWNhdGNoKGIpe2QoYil9fWZ1bmN0aW9uIEMoYSl7YS5kb25lP2YoYS52YWx1ZSk6ZyhhLnZhbHVlKS50aGVuKHIsZSl9QygoYz1jLmFwcGx5KGEsYnx8W10pKS5uZXh0KCkpfSl9LGg9dGhpcyYmdGhpcy5fX2dlbmVyYXRvcnx8ZnVuY3Rpb24oYSxiKXtmdW5jdGlvbiBkKGEpe3JldHVybiBmdW5jdGlvbihiKXtyZXR1cm4gYyhbYSxiXSl9fWZ1bmN0aW9uIGMoZCl7aWYoZil0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtmb3IoO2c7KXRyeXtpZihmPTEsciYmKGU9ZFswXSYyP3JbXCJyZXR1cm5cIl06ZFswXT9yW1widGhyb3dcIl18fCgoZT1yW1wicmV0dXJuXCJdKSYmZS5jYWxsKHIpLDApOnIubmV4dCkmJiEoZT1lLmNhbGwocixkWzFdKSkuZG9uZSlyZXR1cm4gZTtcclxuaWYocj0wLGUpZD1bZFswXSYyLGUudmFsdWVdO3N3aXRjaChkWzBdKXtjYXNlIDA6Y2FzZSAxOmU9ZDticmVhaztjYXNlIDQ6cmV0dXJuIGcubGFiZWwrKyx7dmFsdWU6ZFsxXSxkb25lOiExfTtjYXNlIDU6Zy5sYWJlbCsrO3I9ZFsxXTtkPVswXTtjb250aW51ZTtjYXNlIDc6ZD1nLm9wcy5wb3AoKTtnLnRyeXMucG9wKCk7Y29udGludWU7ZGVmYXVsdDppZighKGU9Zy50cnlzLGU9MDxlLmxlbmd0aCYmZVtlLmxlbmd0aC0xXSkmJig2PT09ZFswXXx8Mj09PWRbMF0pKXtnPTA7Y29udGludWV9aWYoMz09PWRbMF0mJighZXx8ZFsxXT5lWzBdJiZkWzFdPGVbM10pKWcubGFiZWw9ZFsxXTtlbHNlIGlmKDY9PT1kWzBdJiZnLmxhYmVsPGVbMV0pZy5sYWJlbD1lWzFdLGU9ZDtlbHNlIGlmKGUmJmcubGFiZWw8ZVsyXSlnLmxhYmVsPWVbMl0sZy5vcHMucHVzaChkKTtlbHNle2VbMl0mJmcub3BzLnBvcCgpO2cudHJ5cy5wb3AoKTtjb250aW51ZX19ZD1iLmNhbGwoYSxnKX1jYXRjaChDKXtkPVxyXG5bNixDXSxyPTB9ZmluYWxseXtmPWU9MH1pZihkWzBdJjUpdGhyb3cgZFsxXTtyZXR1cm57dmFsdWU6ZFswXT9kWzFdOnZvaWQgMCxkb25lOiEwfX12YXIgZz17bGFiZWw6MCxzZW50OmZ1bmN0aW9uKCl7aWYoZVswXSYxKXRocm93IGVbMV07cmV0dXJuIGVbMV19LHRyeXM6W10sb3BzOltdfSxmLHIsZSxrOyRqc2NvbXAuaW5pdFN5bWJvbCgpOyRqc2NvbXAuaW5pdFN5bWJvbCgpOyRqc2NvbXAuaW5pdFN5bWJvbEl0ZXJhdG9yKCk7cmV0dXJuIGs9e25leHQ6ZCgwKSxcInRocm93XCI6ZCgxKSxcInJldHVyblwiOmQoMil9LFwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJihrW1N5bWJvbC5pdGVyYXRvcl09ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30pLGt9O09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO2EuTmF2aWdhdG9yVXNlck1lZGlhPWEuUmVtb3RlTWVkaWFTdHJlYW1Db25zdHJhaW50cz1hLlJlbW90ZU1lZGlhVHJhY2tDb25zdHJhaW50cz1hLlJlbW90ZU1lZGlhVHJhY2tDb25zdHJhaW50U2V0PVxyXG5hLlJlbW90ZURldmljZXM9YS5SZW1vdGVEZXZpY2VJbmZvPWEuRGV2aWNlSW5mbz1hLlJlbW90ZVN0cmVhbUV2ZW50PWEuUmVtb3RlU3RyZWFtPWEuUmVtb3RlTWVkaWFUcmFjaz1hLmVudW1lcmF0ZWREZXZpY2VzPXZvaWQgMDt2YXIgZD1jKDU1MCksdz1jKDY1OCkscT1jKDg1MSksbj1jKDk0Niksaz1jKDM5NCksdj1jKDI1OSksej1jKDY1MCksZz1jKDk3MyksbDthLmVudW1lcmF0ZWREZXZpY2VzPWw7dmFyIHQ9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oYSxiKXt0aGlzLnR5cGU9YTt0aGlzLnRhcmdldD1ifX0oKSxtPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gYSgpe3RoaXMuaXNfbG9jYWxfY2xvbmU9ITE7dGhpcy5jbG9uZV9pZD10aGlzLmNsb25lX2NvdW50PTB9YS5wcm90b3R5cGUuY2xvbmU9ZnVuY3Rpb24oKXt0aGlzLmNsb25lX2NvdW50Kys7dmFyIGI9bmV3IGE7Yi5pc19sb2NhbF9jbG9uZT0hMDtiLmNsb25lX2lkPXRoaXMuY2xvbmVfY291bnQ7cmV0dXJuIGJ9O2EucHJvdG90eXBlLnN5bmNocm9uaXplPVxyXG5mdW5jdGlvbihhKXtyZXR1cm4gdSh0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24oKXtyZXR1cm4gaCh0aGlzLGZ1bmN0aW9uKGIpe3JldHVybiB0aGlzLmlzX2xvY2FsX2Nsb25lP1syLGEuYXN5bmNDbG9uZSgpXTpbMixQcm9taXNlLnJlc29sdmUoYSldfSl9KX07cmV0dXJuIGF9KCkscD1mdW5jdGlvbihhKXtmdW5jdGlvbiBiKGMsZyxyKXt2b2lkIDA9PT1yJiYocj13LlByb3h5TW9kZS5SZW1vdGUpO2M9YS5jYWxsKHRoaXMsYyxkLmNsYXNzX2lkX3QuTWVkaWFTdHJlYW1UcmFjayxnLHIpfHx0aGlzO2MucmVmQ291bnRfPTA7Yy5yZWZDb3VudF8rKztjLmNsb25lX3N0YXRlPW5ldyBtO3JldHVybiBjfWUoYixhKTtiLnByb3RvdHlwZS5kdW1wSW5mbz1mdW5jdGlvbigpe3EubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5kdW1wSW5mbygpIFtpZD1cIit0aGlzLmlkK1wiXSBraW5kPVwiK3RoaXMua2luZCtcIiBsYWJlbD1cIit0aGlzLmxhYmVsK1wiIHJlZmNvdW50PVwiK1xyXG50aGlzLnJlZmNvdW50K1wiIGVuYWJsZWQ9XCIrdGhpcy5lbmFibGVkK1wiIHJlYWR5U3RhdGU9XCIrdGhpcy5yZWFkeVN0YXRlKX07T2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFwicmVmY291bnRcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmVmQ291bnRffSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pO2IucHJvdG90eXBlLmFkZFJlZj1mdW5jdGlvbigpe3RoaXMucmVmQ291bnRfKys7cS5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLmFkZFJlZigpIGNhbGxlZC4gW2lkPVwiK3RoaXMuaWQrXCJdIHJlZmNvdW50PVwiK3RoaXMucmVmQ291bnRfKX07T2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFwib25lbmRlZFwiLHtnZXQ6ZnVuY3Rpb24oKXtxLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuZ2V0X29uZW5kZWQoKSBjYWxsZWQuIFtpZD1cIit0aGlzLmlkK1wiXVwiKTtyZXR1cm4gdGhpcy5vbmVuZGVkX30sc2V0OmZ1bmN0aW9uKGEpe3ZhciBiPVxyXG50aGlzO3EubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5zZXRfb25lbmRlZCgpIGNhbGxlZC4gW2lkPVwiK3RoaXMuaWQrXCJdXCIpO3RoaXMub25lbmRlZF89YTt0aGlzLndhaXRVbnRpbENvbm5lY3RlZChcIk1lZGlhU3RyZWFtVHJhY2sub25lbmRlZFwiKS50aGVuKGZ1bmN0aW9uKCl7dmFyIGM9Yi5yZWdpc3RlckNhbGxiYWNrcyghMSxiLmlzTnVsbENhbGxiYWNrKGEpLGQubWV0aG9kX2lkX01lZGlhU3RyZWFtVHJhY2tfdC5vbmVuZGVkKTtjLnRoZW4oZnVuY3Rpb24oYSl7cS5sb2dnZXIubG9nKGIudXNlcl9mcmllbmRseV9pZCgpK1wib25lbmRlZCBldmVudCByZWNlaXZlZCEhIVwiKTthPW5ldyB0KFwiZW5kZWRcIixiKTtiLnJlYWR5U3RhdGVfPVwiZW5kZWRcIjtiLm9uZW5kZWRfKGEpfSk7cmV0dXJuIGIucmVtb3RlSW52b2tlKCEwLGQubWV0aG9kX2lkX01lZGlhU3RyZWFtVHJhY2tfdC5vbmVuZGVkLGMuc3VjY2Vzcyl9KVtcImNhdGNoXCJdKGZ1bmN0aW9uKGEpe2IubG9nUmVtb3RlSW52b2tlRXJyb3IoYSxcclxuXCIub25lbmRlZCBmYWlsZWQhXCIpfSl9LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFwib25tdXRlXCIse2dldDpmdW5jdGlvbigpe3EubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5nZXRfb25tdXRlKCkgY2FsbGVkLiBbaWQ9XCIrdGhpcy5pZCtcIl1cIik7cmV0dXJuIHRoaXMub25tdXRlX30sc2V0OmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXM7cS5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLnNldF9vbm11dGUoKSBjYWxsZWQuIFtpZD1cIit0aGlzLmlkK1wiXVwiKTt0aGlzLm9ubXV0ZV89YTt0aGlzLndhaXRVbnRpbENvbm5lY3RlZChcIk1lZGlhU3RyZWFtVHJhY2sub25tdXRlXCIpLnRoZW4oZnVuY3Rpb24oKXt2YXIgYz1iLnJlZ2lzdGVyQ2FsbGJhY2tzKCExLGIuaXNOdWxsQ2FsbGJhY2soYSksZC5tZXRob2RfaWRfTWVkaWFTdHJlYW1UcmFja190Lm9ubXV0ZSk7Yy50aGVuKGZ1bmN0aW9uKGEpe3EubG9nZ2VyLmxvZyhiLnVzZXJfZnJpZW5kbHlfaWQoKStcclxuXCJvbm11dGUgZXZlbnQgcmVjZWl2ZWQhISFcIik7YT1uZXcgdChcIm11dGVcIixiKTtiLm11dGVkPSEwO2Iub25tdXRlXyhhKX0pO3JldHVybiBiLnJlbW90ZUludm9rZSghMCxkLm1ldGhvZF9pZF9NZWRpYVN0cmVhbVRyYWNrX3Qub25tdXRlLGMuc3VjY2Vzcyl9KVtcImNhdGNoXCJdKGZ1bmN0aW9uKGEpe2IubG9nUmVtb3RlSW52b2tlRXJyb3IoYSxcIi5vbm11dGUgZmFpbGVkIVwiKX0pfSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShiLnByb3RvdHlwZSxcIm9udW5tdXRlXCIse2dldDpmdW5jdGlvbigpe3EubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5nZXRfb251bm11dGUoKSBjYWxsZWQuIFtpZD1cIit0aGlzLmlkK1wiXVwiKTtyZXR1cm4gdGhpcy5vbnVubXV0ZV99LHNldDpmdW5jdGlvbihhKXt2YXIgYj10aGlzO3EubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5zZXRfb251bm11dGUoKSBjYWxsZWQuIFtpZD1cIitcclxudGhpcy5pZCtcIl1cIik7dGhpcy5vbnVubXV0ZV89YTt0aGlzLndhaXRVbnRpbENvbm5lY3RlZChcIk1lZGlhU3RyZWFtVHJhY2sub251bm11dGVcIikudGhlbihmdW5jdGlvbigpe3ZhciBjPWIucmVnaXN0ZXJDYWxsYmFja3MoITEsYi5pc051bGxDYWxsYmFjayhhKSxkLm1ldGhvZF9pZF9NZWRpYVN0cmVhbVRyYWNrX3Qub251bm11dGUpO2MudGhlbihmdW5jdGlvbihhKXtxLmxvZ2dlci5sb2coXCJvbnVubXV0ZSBldmVudCByZWNlaXZlZCEhIVwiKTthPW5ldyB0KFwidW5tdXRlXCIsYik7Yi5tdXRlZD0hMTtiLm9udW5tdXRlXyhhKX0pO3JldHVybiBiLnJlbW90ZUludm9rZSghMCxkLm1ldGhvZF9pZF9NZWRpYVN0cmVhbVRyYWNrX3Qub251bm11dGUsYy5zdWNjZXNzKX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oYSl7Yi5sb2dSZW1vdGVJbnZva2VFcnJvcihhLFwiLm9udW5tdXRlIGZhaWxlZCFcIil9KX0sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYi5wcm90b3R5cGUsXHJcblwib25zdG9wXCIse3NldDpmdW5jdGlvbihhKXt0aGlzLm9uc3RvcF89YX0sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYi5wcm90b3R5cGUsXCJlbmFibGVkXCIse2dldDpmdW5jdGlvbigpe3EubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5nZXRfZW5hYmxlZCgpIGNhbGxlZC4gW2lkPVwiK3RoaXMuaWQrXCIsIHZhbHVlPVwiK3RoaXMuZW5hYmxlZF8rXCJdXCIpO3JldHVybiB0aGlzLmVuYWJsZWRffSxzZXQ6ZnVuY3Rpb24oYSl7cS5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLnNldF9lbmFibGVkKCkgY2FsbGVkLiBbaWQ9XCIrdGhpcy5pZCtcIiwgdmFsdWU9XCIrYStcIl1cIik7dGhpcy5lbmFibGVkXz1hO3RoaXMucmVtb3RlSW52b2tlKCEwLGQubWV0aG9kX2lkX01lZGlhU3RyZWFtVHJhY2tfdC5lbmFibGVkLGEpfSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShiLnByb3RvdHlwZSxcclxuXCJyZWFkeVN0YXRlXCIse2dldDpmdW5jdGlvbigpe3EubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5nZXRfcmVhZHlTdGF0ZSgpIGNhbGxlZC4gW2lkPVwiK3RoaXMuaWQrXCJdXCIpO3JldHVybiB0aGlzLnJlYWR5U3RhdGVffSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pO2IucHJvdG90eXBlLmFzeW5jQ2xvbmU9ZnVuY3Rpb24oKXtyZXR1cm4gdSh0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24oKXt2YXIgYSxjLGc7cmV0dXJuIGgodGhpcyxmdW5jdGlvbihmKXtzd2l0Y2goZi5sYWJlbCl7Y2FzZSAwOnJldHVybls0LHRoaXMud2FpdFVudGlsQ29ubmVjdGVkKFwiUmVtb3RlTWVkaWFUcmFjay5hc3luY0Nsb25lXCIpXTtjYXNlIDE6cmV0dXJuIGYuc2VudCgpLFs0LHRoaXMucmVtb3RlSW52b2tlKCExLGQubWV0aG9kX2lkX01lZGlhU3RyZWFtVHJhY2tfdC5jbG9uZSldO2Nhc2UgMjpyZXR1cm4gYT1mLnNlbnQoKSxjPXRoaXMucGFyYW0wKGEpLGc9bmV3IGIodGhpcyxcclxuYy5vaWQpLFsyLGcuc3luY0JhcnJpZXIoKV19fSl9KX07Yi5wcm90b3R5cGUuZGVlcENsb25lPWZ1bmN0aW9uKGEpe3ZhciBjPXRoaXM7cS5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLmRlZXBDbG9uZSgpIGNhbGxlZC4gW2lkPVwiK3RoaXMuaWQrXCJdXCIpO2lmKHouUmVtb3RlU2Vzc2lvbi5pc0ZlYXR1cmVUcmFja0Nsb25lV2l0aElkU3VwcG9ydGVkKCkpe3ZhciBnPW5ldyBiKG51bGwsMCx3LlByb3h5TW9kZS5Qc2V1ZG8pLGY9bmV3IG07Zy5pZD1hP2E6dGhpcy5pZCtcIi5cIitmLmNsb25lX2lkLnRvU3RyaW5nKCk7Zy5sYWJlbD10aGlzLmxhYmVsO2cua2luZD10aGlzLmtpbmQ7Zy5lbmFibGVkXz10aGlzLmVuYWJsZWRfO2cubXV0ZWQ9dGhpcy5tdXRlZDtnLnJlYWR5U3RhdGVfPXRoaXMucmVhZHlTdGF0ZV87Zy50cmFja1NldHRpbmdzXz10aGlzLnRyYWNrU2V0dGluZ3NfO2cuY2xvbmVfc3RhdGU9ZjtnLmNvbnN0cmFpbnRzXz10aGlzLmNvbnN0cmFpbnRzXztnLmNhcGFiaWxpdGllc189XHJcbnRoaXMuY2FwYWJpbGl0aWVzXztnLm9uZW5kZWQ9dGhpcy5vbmVuZGVkO2cub25tdXRlPXRoaXMub25tdXRlO2cub251bm11dGU9dGhpcy5vbnVubXV0ZTtnLm9uc3RvcD10aGlzLm9uc3RvcDt0aGlzLndhaXRVbnRpbENvbm5lY3RlZChcIlJlbW90ZU1lZGlhVHJhY2suZGVlcENsb25lXCIpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gYy5yZW1vdGVJbnZva2UoITEsZC5tZXRob2RfaWRfTWVkaWFTdHJlYW1UcmFja190LmNsb25lLGcuaWQpfSkudGhlbihmdW5jdGlvbihhKXtxLmxvZ2dlci5sb2coYy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuZGVlcENsb25lKCkgc3VjY2VzcyB3aXRoIG9pZDogXCIrYy5wYXJhbTAoYSkub2lkKTtnLmJpbmQobnVsbCxjLnBhcmFtMChhKS5vaWQpO2cuc3luY0JhcnJpZXIoKS50aGVuKGZ1bmN0aW9uKCl7cS5sb2dnZXIubG9nKGMudXNlcl9mcmllbmRseV9pZCgpK1widHJhY2suc3luY0JhcnJpZXIoKTogc3VjY2Vzc1wiKX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oYSl7Yy5sb2dSZW1vdGVJbnZva2VFcnJvcihhLFxyXG5cInRyYWNrLnN5bmNCYXJyaWVyKCkgZmFpbGVkIVwiKX0pfSlbXCJjYXRjaFwiXShmdW5jdGlvbihhKXtjLmxvZ1JlbW90ZUludm9rZUVycm9yKGEsXCIuZGVlcENsb25lKCkgZmFpbGVkIVwiKX0pO3JldHVybiBnfXEubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5kZWVwQ2xvbmUoKSBpcyBub3Qgc3VwcG9ydGVkIVwiKX07Yi5wcm90b3R5cGUubG9jYWxDbG9uZT1mdW5jdGlvbigpe3EubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5sb2NhbENsb25lKCkgY2FsbGVkLiBbaWQ9XCIrdGhpcy5pZCtcIl1cIik7dmFyIGE9dGhpcy5jbG9uZV9zdGF0ZS5jbG9uZSgpLGQ9bmV3IGIodGhpcyx0aGlzLm9iamVjdF9pZCgpKTtkLmlkPXRoaXMuaWQrXCIuXCIrYS5jbG9uZV9pZC50b1N0cmluZygpO2QubGFiZWw9dGhpcy5sYWJlbDtkLmtpbmQ9dGhpcy5raW5kO2QuZW5hYmxlZF89dGhpcy5lbmFibGVkXztkLm11dGVkPXRoaXMubXV0ZWQ7ZC5yZWFkeVN0YXRlXz10aGlzLnJlYWR5U3RhdGVfO1xyXG5kLnRyYWNrU2V0dGluZ3NfPXRoaXMudHJhY2tTZXR0aW5nc187ZC5jbG9uZV9zdGF0ZT1hO2QuY29uc3RyYWludHNfPXRoaXMuY29uc3RyYWludHNfO2QuY2FwYWJpbGl0aWVzXz10aGlzLmNhcGFiaWxpdGllc187cmV0dXJuIGR9O2IucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uKCl7cS5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLmNsb25lKCkgY2FsbGVkLiBbaWQ9XCIrdGhpcy5pZCtcIl1cIik7cmV0dXJuIHouUmVtb3RlU2Vzc2lvbi5pc0ZlYXR1cmVUcmFja0Nsb25lV2l0aElkU3VwcG9ydGVkKCk/dGhpcy5kZWVwQ2xvbmUoKTp0aGlzLmxvY2FsQ2xvbmUoKX07Yi5wcm90b3R5cGUuc3RvcD1mdW5jdGlvbigpe3ZhciBhPXRoaXM7cS5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLnN0b3AoKSBjYWxsZWQuIFtpZD1cIit0aGlzLmlkK1wiXSByZWZjb3VudD1cIit0aGlzLnJlZkNvdW50Xyk7dGhpcy5yZWFkeVN0YXRlXz1cImVuZGVkXCI7aWYoMDx0aGlzLnJlZkNvdW50XyYmXHJcbih0aGlzLnJlZkNvdW50Xy0tLDA9PT10aGlzLnJlZkNvdW50XyYmKHEubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5zdG9wKCkgY2FsbGVkLiBbaWQ9XCIrdGhpcy5pZCtcIl0gcmVtb3RlIGludm9raW5nLi4uXCIpLHRoaXMucmVtb3RlSW52b2tlKCExLGQubWV0aG9kX2lkX01lZGlhU3RyZWFtVHJhY2tfdC5zdG9wKVtcImNhdGNoXCJdKGZ1bmN0aW9uKGIpe2EubG9nUmVtb3RlSW52b2tlRXJyb3IoYixcIi5zdG9wIGZhaWxlZCFcIil9KSxcInZpZGVvXCI9PXRoaXMua2luZCYmXCJyZW1vdGVhcHAtdHJhY2tcIj09dGhpcy5sYWJlbCYmZy5TY3JlZW5TaGFyaW5nLnNjcmVlblNoYXJpbmdJbnN0YW5jZSgpLnN0b3BBcHBzaGFyZSgpLG51bGwhPT10aGlzLm9uc3RvcF8mJnZvaWQgMCE9dGhpcy5vbnN0b3BfKSkpdGhpcy5vbnN0b3BfKCl9O2IucHJvdG90eXBlLmdldENhcGFiaWxpdGllcz1mdW5jdGlvbigpe3JldHVybiB0aGlzLmNhcGFiaWxpdGllc199O2IucHJvdG90eXBlLmdldENvbnN0cmFpbnRzPVxyXG5mdW5jdGlvbigpe3JldHVybiB0aGlzLmNvbnN0cmFpbnRzX307Yi5wcm90b3R5cGUuZ2V0U2V0dGluZ3M9ZnVuY3Rpb24oKXtyZXR1cm5cImF1ZGlvXCI9PXRoaXMua2luZD9mdW5jdGlvbihhKXtyZXR1cm57ZGV2aWNlSWQ6YS5kZXZpY2VJZCxlY2hvQ2FuY2VsbGF0aW9uOmEuZWNob0NhbmNlbGxhdGlvbn19KHRoaXMudHJhY2tTZXR0aW5nc18pOmZ1bmN0aW9uKGEpe3JldHVybnthc3BlY3RSYXRpbzphLmFzcGVjdFJhdGlvLGRldmljZUlkOmEuZGV2aWNlSWQsZnJhbWVSYXRlOmEuZnJhbWVSYXRlLGhlaWdodDphLmhlaWdodCx3aWR0aDphLndpZHRofX0odGhpcy50cmFja1NldHRpbmdzXyl9O2IucHJvdG90eXBlLmdldENoYW5uZWxDb3VudD1mdW5jdGlvbigpe3JldHVybiAyfTtiLnByb3RvdHlwZS5hcHBseUNvbnN0cmFpbnRzPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXM7cS5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLmFwcGx5Q29uc3RyYWludHMoKSBjYWxsZWQuXCIpO1xyXG5yZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24oYyxmKXtiLndhaXRVbnRpbENvbm5lY3RlZChcIk1lZGlhU3RyZWFtVHJhY2suYXBwbHlDb25zdHJhaW50c1wiKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIFByb21pc2UuYWxsKFtiLnJlbW90ZUludm9rZSghMSxkLm1ldGhvZF9pZF9NZWRpYVN0cmVhbVRyYWNrX3QuYXBwbHlDb25zdHJhaW50cyxhKSxiLnN5bmNCYXJyaWVyKCldKX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oYSl7Yi5sb2dSZW1vdGVJbnZva2VFcnJvcihhLFwiYXBwbHlDb25zdHJhaW50cyBmYWlsZWQhXCIpO2Yoe25hbWU6XCJPdmVyY29uc3RyYWluZWRFcnJvclwiLG1lc3NhZ2U6XCJGYWlsZWQgdG8gYXBwbHkgY29uc3RyYWludHMuXCJ9KX0pLnRoZW4oZnVuY3Rpb24oKXtiLmNvbnN0cmFpbnRzXz1hO3JldHVybiBiLnJlbW90ZUludm9rZSghMSxkLm1ldGhvZF9pZF9NZWRpYVN0cmVhbVRyYWNrX3QuZ2V0Q29uc3RyYWludHMpfSkudGhlbihmdW5jdGlvbihhKXtiLmNvbnN0cmFpbnRzXz1cclxuYi5wYXJhbTAoYSl9KVtcImNhdGNoXCJdKGZ1bmN0aW9uKGEpe2IubG9nUmVtb3RlSW52b2tlRXJyb3IoYSxcIi5zeW5jQmFycmllcigpIHJlbW90ZSBjbGllbnQgZG9lcyBub3Qgc3VwcG9ydCBnZXRDb25zdHJhaW50cyBtZXRob2QuIElnbm9yZSBpdFwiKX0pLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gYygpfSl9KX07Yi5jb252ZXJ0UmVhZHlTdGF0ZT1mdW5jdGlvbihhKXtyZXR1cm4gMD09YT9cImxpdmVcIjpcImVuZGVkXCJ9O2IucHJvdG90eXBlLnN5bmNCYXJyaWVyPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcztxLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuc3luY0JhcnJpZXIoKSBjYWxsZWQuXCIpO3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihjLGcpe2Euc3luY0JhcnJpZXJEZWVwKGMsZykmJmEud2FpdFVudGlsQ29ubmVjdGVkKFwiTWVkaWFTdHJlYW1UcmFjay5zeW5jQmFycmllclwiKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIFByb21pc2UuYWxsKFthLnJlbW90ZUludm9rZSghMSxcclxuZC5tZXRob2RfaWRfTWVkaWFTdHJlYW1UcmFja190LmtpbmQsXCJcIiksYS5yZW1vdGVJbnZva2UoITEsZC5tZXRob2RfaWRfTWVkaWFTdHJlYW1UcmFja190LmlkLFwiXCIpLGEucmVtb3RlSW52b2tlKCExLGQubWV0aG9kX2lkX01lZGlhU3RyZWFtVHJhY2tfdC5sYWJlbCxcIlwiKSxhLnJlbW90ZUludm9rZSghMSxkLm1ldGhvZF9pZF9NZWRpYVN0cmVhbVRyYWNrX3QuZW5hYmxlZCwhMSksYS5yZW1vdGVJbnZva2UoITEsZC5tZXRob2RfaWRfTWVkaWFTdHJlYW1UcmFja190Lm11dGVkLCExKSxhLnJlbW90ZUludm9rZSghMSxkLm1ldGhvZF9pZF9NZWRpYVN0cmVhbVRyYWNrX3QucmVhZHlTdGF0ZSwwKSxhLnJlbW90ZUludm9rZSghMSxkLm1ldGhvZF9pZF9NZWRpYVN0cmVhbVRyYWNrX3QuZ2V0U2V0dGluZ3MpLGEucmVtb3RlSW52b2tlKCExLGQubWV0aG9kX2lkX01lZGlhU3RyZWFtVHJhY2tfdC5nZXRDYXBhYmlsaXRpZXMpXSl9KS50aGVuKGZ1bmN0aW9uKGYpe3ZhciBkPTA7Zj1mLm1hcChmdW5jdGlvbihiKXtyZXR1cm4gYS5wYXJhbTAoYil9KTtcclxuYS5raW5kPWZbMF07YS5pZD1mWzFdO2EubGFiZWw9ZlsyXTthLmVuYWJsZWRfPWZbM107YS5tdXRlZD1mWzRdO2Q9Zls1XTthLnRyYWNrU2V0dGluZ3NfPWZbNl07YS5jYXBhYmlsaXRpZXNfPWZbN107YS5yZWFkeVN0YXRlXz1iLmNvbnZlcnRSZWFkeVN0YXRlKGQpO2Euc3luY0JhcnJpZXJSZXNvbHZlKGEpfSlbXCJjYXRjaFwiXShmdW5jdGlvbihiKXtiPWEubG9nUmVtb3RlSW52b2tlRXJyb3IoYixcIi5zeW5jQmFycmllcigpIGZhaWxlZCFcIik7YS5zeW5jQmFycmllclJlamVjdChiKX0pfSl9O2IucHJvdG90eXBlLmRpc3Bvc2U9ZnVuY3Rpb24oKXtxLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuZGlzcG9zZSgpIGNhbGxlZC4gW2lkPVwiK3RoaXMuaWQrXCJdXCIpO3RoaXMuc3RvcCgpOzA9PT10aGlzLnJlZkNvdW50XyYmdGhpcy5yZWxlYXNlKCl9O3JldHVybiBifSh3LlByb3h5T2JqZWN0KTthLlJlbW90ZU1lZGlhVHJhY2s9cDt2YXIgeT1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbigpe319KCksXHJcbng9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYihjLGcscixmLGUpe3ZvaWQgMD09PXImJihyPXcuUHJveHlNb2RlLkxvY2FsKTt2b2lkIDA9PT1mJiYoZj1bXSk7dmFyIGs9dGhpcztxLmxvZ2dlci5sb2coXCJSZW1vdGVTdHJlYW0uY3RvcigpIHN0cmVhbWlkPVwiK2UrXCIgbnVtIHRyYWNrcz1cIitmLmxlbmd0aCk7cj09dy5Qcm94eU1vZGUuUmVtb3RlfHxlfHwoZT1iLnV1aWR2NCgpKTtrPWUmJnouUmVtb3RlU2Vzc2lvbi5pc0ZlYXR1cmVUcmFja0Nsb25lV2l0aElkU3VwcG9ydGVkKCk/YS5jYWxsKHRoaXMsYyxkLmNsYXNzX2lkX3QuTWVkaWFTdHJlYW0sZyxyLG51bGwsW2ZdLGUpfHx0aGlzOmEuY2FsbCh0aGlzLGMsZC5jbGFzc19pZF90Lk1lZGlhU3RyZWFtLGcscixudWxsLFtmXSl8fHRoaXM7ay5pZD1lO2sudHJhY2tzXz1mO2suY2xvbmVfc3RhdGU9bmV3IG07ay5hY3RpdmVfPSEwO2sudHJhY2tzXy5mb3JFYWNoKGZ1bmN0aW9uKGEpe2Euc2V0UGFyZW50KGspfSk7cmV0dXJuIGt9ZShiLFxyXG5hKTtiLnV1aWR2ND1mdW5jdGlvbigpe3JldHVyblwiMTAwMDAwMDAtMTAwMC00MDAwLTgwMDAtMTAwMDAwMDAwMDAwXCIucmVwbGFjZSgvWzAxOF0vZyxmdW5jdGlvbihhKXtyZXR1cm4oYV5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKG5ldyBVaW50OEFycmF5KDEpKVswXSYxNT4+YS80KS50b1N0cmluZygxNil9KX07Yi5wcm90b3R5cGUuZHVtcEluZm89ZnVuY3Rpb24oKXtxLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuZHVtcEluZm8oKSBbaWQ9XCIrdGhpcy5pZCtcIl0gYWN0aXZlPVwiK3RoaXMuYWN0aXZlXytcIiBudW0gdHJhY2tzPVwiK3RoaXMudHJhY2tzXy5sZW5ndGgpO2Zvcih2YXIgYT0wLGI9dGhpcy50cmFja3NfO2E8Yi5sZW5ndGg7YSsrKXt2YXIgZD1iW2FdO2QmJmQuZHVtcEluZm8oKX19O2IucHJvdG90eXBlLnRvZ2dsZUF1ZGlvPWZ1bmN0aW9uKGEpe3EubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi50b2dnbGVBdWRpbygpIGNhbGxlZDogXCIrXHJcbmEpO2Zvcih2YXIgYj0wLGQ9dGhpcy5nZXRBdWRpb1RyYWNrcygpO2I8ZC5sZW5ndGg7YisrKWRbYl0uZW5hYmxlZD1hfTtiLnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oKXt2YXIgYT1uZXcgeTthLmlkPXRoaXMuaWQ7YS5hY3RpdmU9dGhpcy5hY3RpdmVfO2Eub2lkPXRoaXMub2JqZWN0X2lkKCk7cmV0dXJuXCJSZW1vdGVTdHJlYW06XCIrSlNPTi5zdHJpbmdpZnkoYSl9O09iamVjdC5kZWZpbmVQcm9wZXJ0eShiLnByb3RvdHlwZSxcImFjdGl2ZVwiLHtnZXQ6ZnVuY3Rpb24oKXt2YXIgYT10aGlzO3EubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5nZXQgYWN0aXZlKCkgY2FsbGVkLiBbaWQ9XCIrdGhpcy5pZCtcIl0gYWN0aXZlPVwiK3RoaXMuYWN0aXZlXyk7bi5nZXRSZWRpcmVjdG9yKCkuZ2V0RmVhdHVyZVZhbHVlKGQuRkVBVFVSRV9tc190ZWFtc19zdHJlYW1fYWN0aXZlX3N0YXR1cyk/dGhpcy53YWl0VW50aWxDb25uZWN0ZWQoXCJNZWRpYVN0cmVhbS5hY3RpdmVcIikudGhlbihmdW5jdGlvbigpe3EubG9nZ2VyLmxvZyhhLnVzZXJfZnJpZW5kbHlfaWQoKStcclxuXCIuZ2V0IGFjdGl2ZSgpIHJlbW90ZSBpbnZva2luZ1wiKTtyZXR1cm4gYS5yZW1vdGVJbnZva2UoITEsZC5tZXRob2RfaWRfTWVkaWFTdHJlYW1fdC5hY3RpdmUsITEpfSkudGhlbihmdW5jdGlvbihiKXthLmFjdGl2ZV89YS5wYXJhbTAoYik7cS5sb2dnZXIubG9nKGEudXNlcl9mcmllbmRseV9pZCgpK1wiLmdldCBhY3RpdmUoKSBzdWNjZXNzLCBhY3RpdmU9XCIrYS5hY3RpdmVfKX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oYil7YS5hY3RpdmVfPSEwO2EubG9nUmVtb3RlSW52b2tlRXJyb3IoYixcIi5nZXQgYWN0aXZlKCkgZmFpbGVkISBhY3RpdmU9XCIrYS5hY3RpdmVfKX0pOnRoaXMuYWN0aXZlXz0hMDtyZXR1cm4gdGhpcy5hY3RpdmVffSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pO2IucHJvdG90eXBlLmdldEF1ZGlvVHJhY2tzPWZ1bmN0aW9uKCl7cS5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLmdldEF1ZGlvVHJhY2tzKCkgY2FsbGVkLiBbaWQ9XCIrdGhpcy5pZCtcclxuXCJdXCIpO2Zvcih2YXIgYT1bXSxiPTAsZD10aGlzLnRyYWNrc187YjxkLmxlbmd0aDtiKyspe3ZhciBmPWRbYl07XCJhdWRpb1wiPT1mLmtpbmQmJmEucHVzaChmKX1yZXR1cm4gYX07Yi5wcm90b3R5cGUuZ2V0VmlkZW9UcmFja3M9ZnVuY3Rpb24oKXtxLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuZ2V0VmlkZW9UcmFja3MoKSBjYWxsZWQuIFtpZD1cIit0aGlzLmlkK1wiXVwiKTtmb3IodmFyIGE9W10sYj0wLGQ9dGhpcy50cmFja3NfO2I8ZC5sZW5ndGg7YisrKXt2YXIgZj1kW2JdO1widmlkZW9cIj09Zi5raW5kJiZhLnB1c2goZil9cmV0dXJuIGF9O2IucHJvdG90eXBlLmdldFRyYWNrcz1mdW5jdGlvbigpe3EubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5nZXRUcmFja3MoKSBjYWxsZWQuIFtpZD1cIit0aGlzLmlkK1wiXVwiKTtyZXR1cm4gdGhpcy50cmFja3NffTtiLnByb3RvdHlwZS5nZXRUcmFja0J5SWQ9ZnVuY3Rpb24oYSl7cS5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1xyXG5cIi5nZXRUcmFja0J5SWQoKSBjYWxsZWQuIFtpZD1cIit0aGlzLmlkK1wiXVwiKTtmb3IodmFyIGI9MCxkPXRoaXMudHJhY2tzXztiPGQubGVuZ3RoO2IrKyl7dmFyIGY9ZFtiXTtpZihmLmlkPT1hKXJldHVybiBmfX07Yi5wcm90b3R5cGUuYWRkVHJhY2s9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcztxLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuYWRkVHJhY2soKSBjYWxsZWQuIFtpZD1cIit0aGlzLmlkK1wiXVwiKTt0aGlzLnRyYWNrc18ucHVzaChhKTthJiZhLmR1bXBJbmZvKCk7dmFyIGM9dGhpczt0aGlzLndhaXRVbnRpbENvbm5lY3RlZChcIk1lZGlhU3RyZWFtLmFkZFRyYWNrXCIpLnRoZW4oZnVuY3Rpb24oKXtxLmxvZ2dlci5sb2coYy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuYWRkVHJhY2sgcmVtb3RlIGludm9raW5nXCIpO3JldHVybiBjLnJlbW90ZUludm9rZUV4KCExLGQubWV0aG9kX2lkX01lZGlhU3RyZWFtX3QuYWRkVHJhY2ssW2FdKX0pLnRoZW4oZnVuY3Rpb24oKXtxLmxvZ2dlci5sb2coYy51c2VyX2ZyaWVuZGx5X2lkKCkrXHJcblwiLmFkZFRyYWNrIHN1Y2Nlc3NcIil9KVtcImNhdGNoXCJdKGZ1bmN0aW9uKGEpe2IubG9nUmVtb3RlSW52b2tlRXJyb3IoYSxcIi5hZGRUcmFjayBmYWlsZWQhXCIpfSl9O2IucHJvdG90eXBlLnJlbW92ZVRyYWNrPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXM7cS5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLnJlbW92ZVRyYWNrKCkgY2FsbGVkLiBbaWQ9XCIrdGhpcy5pZCtcIl1cIik7dmFyIGM9dGhpcy50cmFja3NfLmluZGV4T2YoYSk7dGhpcy50cmFja3NfLnNwbGljZShjLDEpO3ZhciBmPXRoaXM7dGhpcy53YWl0VW50aWxDb25uZWN0ZWQoXCJNZWRpYVN0cmVhbS5yZW1vdmVUcmFja1wiKS50aGVuKGZ1bmN0aW9uKCl7cS5sb2dnZXIubG9nKGYudXNlcl9mcmllbmRseV9pZCgpK1wiLnJlbW92ZVRyYWNrIHJlbW90ZSBpbnZva2luZ1wiKTtyZXR1cm4gZi5yZW1vdGVJbnZva2VFeCghMSxkLm1ldGhvZF9pZF9NZWRpYVN0cmVhbV90LnJlbW92ZVRyYWNrLFthXSl9KS50aGVuKGZ1bmN0aW9uKCl7cS5sb2dnZXIubG9nKGYudXNlcl9mcmllbmRseV9pZCgpK1xyXG5cIi5yZW1vdmVUcmFjayBzdWNjZXNzXCIpfSlbXCJjYXRjaFwiXShmdW5jdGlvbihhKXtiLmxvZ1JlbW90ZUludm9rZUVycm9yKGEsXCIucmVtb3ZlVHJhY2sgZmFpbGVkIVwiKX0pfTtiLnByb3RvdHlwZS5hc3luY0Nsb25lPWZ1bmN0aW9uKCl7cmV0dXJuIHUodGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKCl7dmFyIGEsYyxnO3JldHVybiBoKHRoaXMsZnVuY3Rpb24oZil7c3dpdGNoKGYubGFiZWwpe2Nhc2UgMDpyZXR1cm4gcS5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLmFzeW5jQ2xvbmUoKSBjYWxsZWQuIFtpZD1cIit0aGlzLmlkK1wiXVwiKSxbNCx0aGlzLndhaXRVbnRpbENvbm5lY3RlZChcImFzeW5jQ2xvbmVcIildO2Nhc2UgMTpyZXR1cm4gZi5zZW50KCksWzQsdGhpcy5yZW1vdGVJbnZva2UoITEsZC5tZXRob2RfaWRfTWVkaWFTdHJlYW1fdC5jbG9uZSldO2Nhc2UgMjpyZXR1cm4gYT1mLnNlbnQoKSxxLmxvZ2dlci5sb2coYSksYz10aGlzLnBhcmFtMChhKSxnPW5ldyBiKHRoaXMsXHJcbmMub2lkLHcuUHJveHlNb2RlLlJlbW90ZSksWzIsZy5zeW5jQmFycmllcigpXX19KX0pfTtiLnByb3RvdHlwZS5kZWVwQ2xvbmU9ZnVuY3Rpb24oYSl7dmFyIGQ9dGhpcztxLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuZGVlcENsb25lKCkgY2FsbGVkLiBbaWQ9XCIrdGhpcy5pZCtcIl1cIik7aWYoei5SZW1vdGVTZXNzaW9uLmlzRmVhdHVyZVRyYWNrQ2xvbmVXaXRoSWRTdXBwb3J0ZWQoKSl7dmFyIGM9W107dGhpcy50cmFja3NfLmZvckVhY2goZnVuY3Rpb24oYSl7Yy5wdXNoKGEuZGVlcENsb25lKCkpfSk7dmFyIGY9bmV3IG07YT1hP2E6dGhpcy5pZCtcIi5cIitmLmNsb25lX2lkLnRvU3RyaW5nKCk7dmFyIGc9bmV3IGIobnVsbCwwLHcuUHJveHlNb2RlLkxvY2FsLGMsYSk7Zy5pZD1hO2cuYWN0aXZlXz10aGlzLmFjdGl2ZV87Zy5jbG9uZV9zdGF0ZT1mO2cudHJhY2tzXz1jO2cud2FpdFVudGlsQ29ubmVjdGVkKFwiUmVtb3RlU3RyZWFtLmRlZXBDbG9uZVwiKS50aGVuKGZ1bmN0aW9uKCl7Zy5zeW5jQmFycmllcigpLnRoZW4oZnVuY3Rpb24oKXtxLmxvZ2dlci5sb2coZC51c2VyX2ZyaWVuZGx5X2lkKCkrXHJcblwic3RyZWFtLnN5bmNCYXJyaWVyKCk6IHN1Y2Nlc3NcIil9KVtcImNhdGNoXCJdKGZ1bmN0aW9uKGEpe2QubG9nUmVtb3RlSW52b2tlRXJyb3IoYSxcInN0cmVhbS5zeW5jQmFycmllcigpIGZhaWxlZCFcIil9KX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oYSl7ZC5sb2dSZW1vdGVJbnZva2VFcnJvcihhLFwiLmRlZXBDbG9uZSgpIGZhaWxlZCFcIil9KTtyZXR1cm4gZ31xLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuZGVlcENsb25lKCkgaXMgbm90IHN1cHBvcnRlZCFcIil9O2IucHJvdG90eXBlLmxvY2FsQ2xvbmU9ZnVuY3Rpb24oKXtxLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIubG9jYWxDbG9uZSgpIGNhbGxlZC4gW2lkPVwiK3RoaXMuaWQrXCJdXCIpO3ZhciBhPXRoaXMuY2xvbmVfc3RhdGUuY2xvbmUoKSxkPW5ldyBiKHRoaXMsdGhpcy5vYmplY3RfaWQoKSx3LlByb3h5TW9kZS5SZW1vdGUpO2QuaWQ9dGhpcy5pZCtcIi5cIithLmNsb25lX2lkLnRvU3RyaW5nKCk7XHJcbmQuYWN0aXZlXz10aGlzLmFjdGl2ZV87dGhpcy50cmFja3NfLmZvckVhY2goZnVuY3Rpb24oYSl7YS5hZGRSZWYoKX0pO2QudHJhY2tzXz10aGlzLnRyYWNrc187ZC5jbG9uZV9zdGF0ZT1hO3JldHVybiBkfTtiLnByb3RvdHlwZS5jbG9uZT1mdW5jdGlvbigpe3EubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5jbG9uZSgpIGNhbGxlZC4gW2lkPVwiK3RoaXMuaWQrXCJdXCIpO3JldHVybiB6LlJlbW90ZVNlc3Npb24uaXNGZWF0dXJlVHJhY2tDbG9uZVdpdGhJZFN1cHBvcnRlZCgpP3RoaXMuZGVlcENsb25lKCk6dGhpcy5sb2NhbENsb25lKCl9O2IucHJvdG90eXBlLnN5bmNCYXJyaWVyPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcztxLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuc3luY0JhcnJpZXIoKSBjYWxsZWQuIFtpZD1cIit0aGlzLmlkK1wiXVwiKTtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24oYixjKXthLnN5bmNCYXJyaWVyRGVlcChiLGMpJiZhLndhaXRVbnRpbENvbm5lY3RlZChcIk1lZGlhU3RyZWFtLnN5bmNCYXJyaWVyXCIpLnRoZW4oZnVuY3Rpb24oKXt2YXIgYj1cclxuW107Yi5wdXNoKGEucmVtb3RlSW52b2tlKCExLGQubWV0aG9kX2lkX01lZGlhU3RyZWFtX3QuaWQsXCJcIikpO24uZ2V0UmVkaXJlY3RvcigpLmdldEZlYXR1cmVWYWx1ZShkLkZFQVRVUkVfbXNfdGVhbXNfc3RyZWFtX2FjdGl2ZV9zdGF0dXMpJiZiLnB1c2goYS5yZW1vdGVJbnZva2UoITEsZC5tZXRob2RfaWRfTWVkaWFTdHJlYW1fdC5hY3RpdmUsITApKTtiLnB1c2goYS5yZW1vdGVJbnZva2UoITEsZC5tZXRob2RfaWRfTWVkaWFTdHJlYW1fdC5nZXRUcmFja3MpKTtyZXR1cm4gUHJvbWlzZS5hbGwoYil9KS50aGVuKGZ1bmN0aW9uKGIpe3EubG9nZ2VyLmxvZyhhLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5zeW5jQmFycmllcigpIHJlbW90ZSBzdWNjZXNzXCIpO3ZhciBjO24uZ2V0UmVkaXJlY3RvcigpLmdldEZlYXR1cmVWYWx1ZShkLkZFQVRVUkVfbXNfdGVhbXNfc3RyZWFtX2FjdGl2ZV9zdGF0dXMpPyhiPWIubWFwKGZ1bmN0aW9uKGIpe3JldHVybiBhLnBhcmFtMChiKX0pLGEuaWQ9YlswXSxcclxuYS5hY3RpdmVfPWJbMV0sYz1iWzJdKTooYj1iLm1hcChmdW5jdGlvbihiKXtyZXR1cm4gYS5wYXJhbTAoYil9KSxhLmlkPWJbMF0sYz1iWzFdLGEuYWN0aXZlXz0hMCk7dmFyIGc9W107Yj1mdW5jdGlvbihiKXt2YXIgZj1hLnRyYWNrc18uZmluZChmdW5jdGlvbihhKXtyZXR1cm4gYS5vYmplY3RfaWQoKT09PWIub2lkfSk7dm9pZCAwPT09ZiYmKHEubG9nZ2VyLmxvZyhhLnVzZXJfZnJpZW5kbHlfaWQoKStcIiBhZGRpbmcgYSBSZW1vdGVNZWRpYVRyYWNrIHdpdGggb2lkOlwiK2Iub2lkKSxmPW5ldyBwKGEsYi5vaWQpKTtnLnB1c2goZi5zeW5jQmFycmllcigpKX07Zm9yKHZhciByPTA7cjxjLmxlbmd0aDtyKyspYihjW3JdKTtyZXR1cm4gUHJvbWlzZS5hbGwoZyl9KS50aGVuKGZ1bmN0aW9uKGIpe2EudHJhY2tzXz1bXTtiLmZvckVhY2goZnVuY3Rpb24oYil7ZC5CVUlMRF9UWVBFX1NES3x8KGIub25zdG9wPWZ1bmN0aW9uKCl7dmFyIGI9ITA7YS50cmFja3NfLmZvckVhY2goZnVuY3Rpb24oYSl7XCJlbmRlZFwiIT1cclxuYS5yZWFkeVN0YXRlJiYoYj0hMSl9KTtiJiZhLnJlbGVhc2UoKX0pO2EudHJhY2tzXy5wdXNoKGIpfSk7YS5zeW5jQmFycmllclJlc29sdmUoYSl9KVtcImNhdGNoXCJdKGZ1bmN0aW9uKGIpe2EubG9nUmVtb3RlSW52b2tlRXJyb3IoYixcIi5zeW5jQmFycmllciBmYWlsZWQhXCIpO2Euc3luY0JhcnJpZXJSZWplY3QoKX0pfSl9O2IucHJvdG90eXBlLmRpc3Bvc2U9ZnVuY3Rpb24oKXtxLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuZGlzcG9zZSgpIGNhbGxlZC4gW2lkPVwiK3RoaXMuaWQrXCJdXCIpO3RoaXMudHJhY2tzXy5mb3JFYWNoKGZ1bmN0aW9uKGEpe2EuZGlzcG9zZSgpfSk7dGhpcy5yZWxlYXNlKCl9O3JldHVybiBifSh3LlByb3h5T2JqZWN0KTthLlJlbW90ZVN0cmVhbT14O2I9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYihjLGcpe3JldHVybiBhLmNhbGwodGhpcyxjLGQuY2xhc3NfaWRfdC5NZWRpYVN0cmVhbUV2ZW50LGcsdy5Qcm94eU1vZGUuUmVtb3RlKXx8dGhpc31cclxuZShiLGEpO2IucHJvdG90eXBlLnN5bmNCYXJyaWVyPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcztxLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuc3luY0JhcnJpZXIoKSBjYWxsZWQuXCIpO3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihiLGMpe2Euc3luY0JhcnJpZXJEZWVwKGIsYykmJmEud2FpdFVudGlsQ29ubmVjdGVkKFwiTWVkaWFTdHJlYW1FdmVudC5zeW5jQmFycmllclwiKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGEucmVtb3RlSW52b2tlKCExLGQubWV0aG9kX2lkX01lZGlhU3RyZWFtRXZlbnRfdC5zdHJlYW0se29pZDowfSl9KS50aGVuKGZ1bmN0aW9uKGIpe3JldHVybihuZXcgeChhLGIucGFyYW1zWzBdLm9pZCx3LlByb3h5TW9kZS5SZW1vdGUpKS5zeW5jQmFycmllcigpfSkudGhlbihmdW5jdGlvbihiKXthLnN0cmVhbT1iO2Euc3luY0JhcnJpZXJSZXNvbHZlKGEpfSlbXCJjYXRjaFwiXShmdW5jdGlvbihiKXtiPWEubG9nUmVtb3RlSW52b2tlRXJyb3IoYixcclxuXCIuc3luY0JhcnJpZXIoKSBmYWlsZWQhXCIpO2Euc3luY0JhcnJpZXJSZWplY3QoYil9KX0pfTtyZXR1cm4gYn0ody5Qcm94eU9iamVjdCk7YS5SZW1vdGVTdHJlYW1FdmVudD1iO3ZhciByPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGEsYixkLGMpe3RoaXMuZGV2aWNlSWQ9YTt0aGlzLmdyb3VwSWQ9Yjt0aGlzLmtpbmQ9ZDt0aGlzLmxhYmVsPWN9fSgpO2EuRGV2aWNlSW5mbz1yO3ZhciBBPWZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGIoYyl7cmV0dXJuIGEuY2FsbCh0aGlzLG51bGwsZC5jbGFzc19pZF90Lk1lZGlhRGV2aWNlSW5mbyxjLHcuUHJveHlNb2RlLlJlbW90ZSl8fHRoaXN9ZShiLGEpO2IuY29udmVydEtpbmQ9ZnVuY3Rpb24oYSl7cmV0dXJuIDA9PWE/XCJhdWRpb2lucHV0XCI6MT09YT9cImF1ZGlvb3V0cHV0XCI6XCJ2aWRlb2lucHV0XCJ9O2IucHJvdG90eXBlLnN5bmNCYXJyaWVyPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcztxLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXHJcblwiLnN5bmNCYXJyaWVyKCkgY2FsbGVkLlwiKTtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24oYyxnKXthLnN5bmNCYXJyaWVyRGVlcChjLGcpJiZhLndhaXRVbnRpbENvbm5lY3RlZChcIlJlbW90ZURldmljZUluZm8uc3luY0JhcnJpZXJcIikudGhlbihmdW5jdGlvbigpe3JldHVybiBQcm9taXNlLmFsbChbYS5yZW1vdGVJbnZva2UoITEsZC5tZXRob2RfaWRfTWVkaWFEZXZpY2VJbmZvX3QuZGV2aWNlSWQsXCJcIiksYS5yZW1vdGVJbnZva2UoITEsZC5tZXRob2RfaWRfTWVkaWFEZXZpY2VJbmZvX3Qua2luZCwwKSxhLnJlbW90ZUludm9rZSghMSxkLm1ldGhvZF9pZF9NZWRpYURldmljZUluZm9fdC5sYWJlbCxcIlwiKSxhLnJlbW90ZUludm9rZSghMSxkLm1ldGhvZF9pZF9NZWRpYURldmljZUluZm9fdC5ncm91cElkLFwiXCIpXSl9KS50aGVuKGZ1bmN0aW9uKGYpe2Eua2luZD1iLmNvbnZlcnRLaW5kKGEucGFyYW0wKGYuc3BsaWNlKDEsMSlbMF0pKTtmPWYubWFwKGZ1bmN0aW9uKGIpe3JldHVybiBhLnBhcmFtMChiKX0pO1xyXG5hLmRldmljZUlkPWZbMF07YS5sYWJlbD1mWzFdO2EuZ3JvdXBJZD1mWzJdO2Euc3luY0JhcnJpZXJSZXNvbHZlKGEpfSlbXCJjYXRjaFwiXShmdW5jdGlvbihiKXtiPWEubG9nUmVtb3RlSW52b2tlRXJyb3IoYixcIi5zeW5jQmFycmllcigpIGZhaWxlZCFcIik7YS5zeW5jQmFycmllclJlamVjdChiKX0pfSl9O3JldHVybiBifSh3LlByb3h5T2JqZWN0KTthLlJlbW90ZURldmljZUluZm89QTtiPWZ1bmN0aW9uKGIpe2Z1bmN0aW9uIGMoKXt2YXIgYT1iLmNhbGwodGhpcyxudWxsLGQuY2xhc3NfaWRfdC5NZWRpYURldmljZXMsMCx3LlByb3h5TW9kZS5Mb2NhbCxmdW5jdGlvbigpe2Euc2V0RGV2aWNlQ2hhbmdlQ2FsbGJhY2soKX0pfHx0aGlzO2EuZGV2aWNlc189W107YS5lbnVtZXJhdGVNYXJrZXI9XCJlbnVtZXJhdGVEZXZpY2VzUHJpdmF0ZVwiO2EuZW51bWVyYXRlUmVtb3RlTWFya2VyPVwiZW51bWVyYXRlZERldmljZXNQcml2YXRlLVJlbW90ZVwiO2Euc2hhcmVTeXN0ZW1BdWRpb189ITE7YS5wZW5kaW5nRW51bWVyYXRlRGV2aWNlXz1cclxuW107YS5wYW5lbGlkXz0tMTtyZXR1cm4gYX1lKGMsYik7T2JqZWN0LmRlZmluZVByb3BlcnR5KGMucHJvdG90eXBlLFwicGFuZWxpZFwiLHtzZXQ6ZnVuY3Rpb24oYSl7dGhpcy5wYW5lbGlkXz1hfSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pO2MucHJvdG90eXBlLmNsZWFyUGFuZWxJZD1mdW5jdGlvbigpe3RoaXMucGFuZWxpZF89LTF9O2MucHJvdG90eXBlLmVudW1lcmF0ZURldmljZXM9ZnVuY3Rpb24oKXt2YXIgYT10aGlzO3JldHVybiAwPHRoaXMuZGV2aWNlc18ubGVuZ3RoJiYwPT10aGlzLnBlbmRpbmdFbnVtZXJhdGVEZXZpY2VfLmxlbmd0aD9uZXcgUHJvbWlzZShmdW5jdGlvbihiLGQpe3EubG9nZ2VyLmxvZyhhLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5lbnVtZXJhdGVEZXZpY2VzOiByZXR1cm5pbmcgY2FjaGVkIGRldmljZXNcIik7YihhLmRldmljZXNfKX0pOnRoaXMuZW51bWVyYXRlRGV2aWNlc1ByaXZhdGUoITEpfTtjLnByb3RvdHlwZS5lbnVtZXJhdGVEZXZpY2VzUHJpdmF0ZT1cclxuZnVuY3Rpb24oYSl7cmV0dXJuIG4uZ2V0UmVkaXJlY3RvcigpLmdldEZlYXR1cmVWYWx1ZShkLkZFQVRVUkVfbXNfdGVhbXNfZW51bWVyYXRlX2RldmljZXNfdjIpP3RoaXMuZW51bWVyYXRlRGV2aWNlc1ByaXZhdGVWMihhKTp0aGlzLmVudW1lcmF0ZURldmljZXNQcml2YXRlVjEoYSl9O2MucHJvdG90eXBlLnBvc3RFbnVtZXJhdGVEZXZpY2VzUmVzdWx0PWZ1bmN0aW9uKCl7Zm9yKHZhciBhPSEwLGI9MCxkPTAsZj10aGlzLnBlbmRpbmdFbnVtZXJhdGVEZXZpY2VfO2Q8Zi5sZW5ndGg7ZCsrKXt2YXIgYz1mW2RdO2lmKDA9PWEmJmMubmFtZT09dGhpcy5lbnVtZXJhdGVSZW1vdGVNYXJrZXIpYnJlYWs7Yy5wb3N0V2l0aFJlc3VsdCghMCx0aGlzLmRldmljZXNfKTtiKys7YT0hMX0wPGImJnRoaXMucGVuZGluZ0VudW1lcmF0ZURldmljZV8uc3BsaWNlKDAsYil9O2MucHJvdG90eXBlLmVudW1lcmF0ZURldmljZXNQcml2YXRlVjI9ZnVuY3Rpb24oYil7dmFyIGM9dGhpcztxLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXHJcblwiLmVudW1lcmF0ZURldmljZXNQcml2YXRlVjIoKSBjYWxsZWQuIHJlZnJlc2g6XCIrYitcIiBwZW5kaW5nOlwiK3RoaXMucGVuZGluZ0VudW1lcmF0ZURldmljZV8ubGVuZ3RoKTtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24oZyxmKXsxPT1ifHwwPT1jLnBlbmRpbmdFbnVtZXJhdGVEZXZpY2VfLmxlbmd0aD8oYy5wZW5kaW5nRW51bWVyYXRlRGV2aWNlXy5wdXNoKG5ldyB3LmRlZmVycmVkX2FjdGlvbihnLGYsYy5lbnVtZXJhdGVSZW1vdGVNYXJrZXIpKSxjLndhaXRVbnRpbENvbm5lY3RlZChcIlJlbW90ZURldmljZXMuZW51bWVyYXRlRGV2aWNlc1ByaXZhdGVWMlwiKS50aGVuKGZ1bmN0aW9uKCl7cS5sb2dnZXIubG9nKGMudXNlcl9mcmllbmRseV9pZCgpK1wiLmVudW1lcmF0ZURldmljZXNQcml2YXRlVjIoKSByZW1vdGUgaW52b2tpbmcuLi5cIik7cmV0dXJuIGMucmVtb3RlSW52b2tlKCExLGQubWV0aG9kX2lkX01lZGlhRGV2aWNlc190LmVudW1lcmF0ZURldmljZXNWMil9KS50aGVuKGZ1bmN0aW9uKGIpe3ZhciBmPVxyXG5bXTtiLnBhcmFtc1swXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe2E9bmV3IHIoYS5kZXZpY2VJZCxhLmdyb3VwSWQsQS5jb252ZXJ0S2luZChhLmtpbmQpLGEubGFiZWwpO2YucHVzaChhKX0pO2MuZGV2aWNlc189ZjthLmVudW1lcmF0ZWREZXZpY2VzPWw9ZjtxLmxvZ2dlci5sb2coYy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuZW51bWVyYXRlRGV2aWNlc1ByaXZhdGVWMjogcmVzb2x2aW5nIGVudW1lcmF0ZWQgZGV2aWNlczogXCIrSlNPTi5zdHJpbmdpZnkoYy5kZXZpY2VzXykpO2MucG9zdEVudW1lcmF0ZURldmljZXNSZXN1bHQoKX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oYil7Yy5kZXZpY2VzXz1bXTthLmVudW1lcmF0ZWREZXZpY2VzPWw9W107Yy5sb2dSZW1vdGVJbnZva2VFcnJvcihiLFwiLmVudW1lcmF0ZURldmljZXNQcml2YXRlVjIoKSBmYWlsZWQsIHJlc29sdmluZyB3aXRoIGVtcHR5IGxpc3QuXCIpO2MucG9zdEVudW1lcmF0ZURldmljZXNSZXN1bHQoKX0pKTooYy5wZW5kaW5nRW51bWVyYXRlRGV2aWNlXy5wdXNoKG5ldyB3LmRlZmVycmVkX2FjdGlvbihnLFxyXG5mLGMuZW51bWVyYXRlTWFya2VyKSkscS5sb2dnZXIubG9nKGMudXNlcl9mcmllbmRseV9pZCgpK1wiLmVudW1lcmF0ZURldmljZXNQcml2YXRlVjIoKSBub3QgcmVtb3RpbmcgdGhpcyBjYWxsLi4uXCIpKX0pfTtjLnByb3RvdHlwZS5lbnVtZXJhdGVEZXZpY2VzUHJpdmF0ZVYxPWZ1bmN0aW9uKGIpe3ZhciBjPXRoaXM7cS5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLmVudW1lcmF0ZURldmljZXNQcml2YXRlVjEoKSBjYWxsZWQuIHJlZnJlc2g6XCIrYitcIiBwZW5kaW5nOlwiK3RoaXMucGVuZGluZ0VudW1lcmF0ZURldmljZV8ubGVuZ3RoKTtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24oZyxmKXsxPT1ifHwwPT1jLnBlbmRpbmdFbnVtZXJhdGVEZXZpY2VfLmxlbmd0aD8oYy5wZW5kaW5nRW51bWVyYXRlRGV2aWNlXy5wdXNoKG5ldyB3LmRlZmVycmVkX2FjdGlvbihnLGYsYy5lbnVtZXJhdGVSZW1vdGVNYXJrZXIpKSxjLndhaXRVbnRpbENvbm5lY3RlZChcIlJlbW90ZURldmljZXMuZW51bWVyYXRlRGV2aWNlc1ByaXZhdGVWMVwiKS50aGVuKGZ1bmN0aW9uKCl7cS5sb2dnZXIubG9nKGMudXNlcl9mcmllbmRseV9pZCgpK1xyXG5cIi5lbnVtZXJhdGVEZXZpY2VzUHJpdmF0ZVYxKCkgcmVtb3RlIGludm9raW5nLi4uXCIpO3JldHVybiBjLnJlbW90ZUludm9rZSghMSxkLm1ldGhvZF9pZF9NZWRpYURldmljZXNfdC5lbnVtZXJhdGVEZXZpY2VzKX0pLnRoZW4oZnVuY3Rpb24oYSl7dmFyIGI9W107YS5wYXJhbXNbMF0uZm9yRWFjaChmdW5jdGlvbihhKXthPW5ldyBBKGEub2lkKTtiLnB1c2goYS5zeW5jQmFycmllcigpKX0pO3JldHVybiBQcm9taXNlLmFsbChiKX0pLnRoZW4oZnVuY3Rpb24oYil7dmFyIGY9W107Yi5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPW5ldyByKGEuZGV2aWNlSWQsYS5ncm91cElkLGEua2luZCxhLmxhYmVsKTtmLnB1c2goYik7YS5yZWxlYXNlKCl9KTtjLmRldmljZXNfPWY7YS5lbnVtZXJhdGVkRGV2aWNlcz1sPWY7cS5sb2dnZXIubG9nKGMudXNlcl9mcmllbmRseV9pZCgpK1wiLmVudW1lcmF0ZURldmljZXNQcml2YXRlVjE6IHJlc29sdmluZyBlbnVtZXJhdGVkIGRldmljZXM6IFwiK0pTT04uc3RyaW5naWZ5KGMuZGV2aWNlc18pKTtcclxuYy5wb3N0RW51bWVyYXRlRGV2aWNlc1Jlc3VsdCgpfSlbXCJjYXRjaFwiXShmdW5jdGlvbihiKXthLmVudW1lcmF0ZWREZXZpY2VzPWw9W107Yy5kZXZpY2VzXz1bXTtjLmxvZ1JlbW90ZUludm9rZUVycm9yKGIsXCIuZW51bWVyYXRlRGV2aWNlc1ByaXZhdGVWMSgpIGZhaWxlZCwgcmVzb2x2aW5nIHdpdGggZW1wdHkgbGlzdC5cIik7Yy5wb3N0RW51bWVyYXRlRGV2aWNlc1Jlc3VsdCgpfSkpOihjLnBlbmRpbmdFbnVtZXJhdGVEZXZpY2VfLnB1c2gobmV3IHcuZGVmZXJyZWRfYWN0aW9uKGcsZixjLmVudW1lcmF0ZU1hcmtlcikpLHEubG9nZ2VyLmxvZyhjLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5lbnVtZXJhdGVEZXZpY2VzUHJpdmF0ZVYxKCkgbm90IHJlbW90aW5nIHRoaXMgY2FsbC4uLlwiKSl9KX07Yy5wcm90b3R5cGUuZ2V0RGlzcGxheU1lZGlhPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXM7cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKGMsZil7Yi53YWl0VW50aWxDb25uZWN0ZWQoXCJSZW1vdGVEZXZpY2VzLmdldERpc3BsYXlNZWRpYVwiKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGcuU2NyZWVuU2hhcmluZy5zY3JlZW5TaGFyaW5nSW5zdGFuY2UoKS5zZXRBY3RpdmVTb3VyY2UoYi5wYW5lbGlkXyxcclxuei5SZW1vdGVTZXNzaW9uLmlzRmVhdHVyQXBwc2hhcmVTdXBwb3J0ZWQoKSl9KS50aGVuKGZ1bmN0aW9uKGYpe3ZvaWQgMCE9PWEudmlkZW8mJm51bGwhPT1hLnZpZGVvJiZ2b2lkIDAhPT1mJiYoYS52aWRlby5kZXZpY2VJZD1mKTtuLmdldFJlZGlyZWN0b3IoKS5nZXRGZWF0dXJlVmFsdWUoZC5GRUFUVVJFX21zX3RlYW1zX3NoYXJlX3N5c3RlbV9hdWRpbykmJih2b2lkIDAhPT1hLmF1ZGlvJiZcImJvb2xlYW5cIiE9PXR5cGVvZiBhLmF1ZGlvP3EubG9nZ2VyLmxvZyhcIk5vbi1ib29sZWFuIGF1ZGlvIGNvbnN0cmFpbnRzXCIpOmEuYXVkaW89YS5hdWRpb3x8Yi5zaGFyZVN5c3RlbUF1ZGlvXyk7Zj1iLnByZXBhcmVEaXNwbGF5Q29uc3RyYWludHMoYSk7Zj1KLnRvUmVtb3RlTWVkaWFTdHJlYW1Db25zdHJhaW50cyhmLCEwKTtyZXR1cm4gYi5yZW1vdGVJbnZva2UoITEsZC5tZXRob2RfaWRfTWVkaWFEZXZpY2VzX3QuZ2V0RGlzcGxheU1lZGlhLGYpfSkudGhlbihmdW5jdGlvbihhKXtyZXR1cm4obmV3IHgobnVsbCxcclxuYS5wYXJhbXNbMF0ub2lkLHcuUHJveHlNb2RlLlJlbW90ZSkpLnN5bmNCYXJyaWVyKCl9KS50aGVuKGZ1bmN0aW9uKGEpe2MoYSl9KVtcImNhdGNoXCJdKGZ1bmN0aW9uKGEpe2cuU2NyZWVuU2hhcmluZy5zY3JlZW5TaGFyaW5nSW5zdGFuY2UoKS5pc0FwcHNoYXJlQWN0aXZlKCkmJmcuU2NyZWVuU2hhcmluZy5zY3JlZW5TaGFyaW5nSW5zdGFuY2UoKS5zdG9wQXBwc2hhcmUoKTthPWIubG9nUmVtb3RlSW52b2tlRXJyb3IoYSxcIi5nZXREaXNwbGF5TWVkaWEoKSBmYWlsZWQhXCIpO2YoYSl9KX0pfTtjLnByb3RvdHlwZS5zZXREZXZpY2VDaGFuZ2VDYWxsYmFjaz1mdW5jdGlvbigpe3ZhciBhPXRoaXM7cS5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLnNldF9EZXZpY2VDaGFuZ2VDYWxsYmFjaygpIGNhbGxlZC5cIik7dGhpcy53YWl0VW50aWxDb25uZWN0ZWQoXCJNZWRpYURldmljZXMub25kZXZpY2VjaGFuZ2VcIikudGhlbihmdW5jdGlvbigpe3ZhciBiPWEucmVnaXN0ZXJDYWxsYmFja3MoITEsXHJcbiExLGQubWV0aG9kX2lkX01lZGlhRGV2aWNlc190Lm9uZGV2aWNlY2hhbmdlKTtiLnRoZW4oZnVuY3Rpb24oKXtxLmxvZ2dlci5sb2coYS51c2VyX2ZyaWVuZGx5X2lkKCkrXCIub25kZXZpY2VjaGFuZ2UoKTogY2FsbGJhY2sgcmVjZWl2ZWQhISFcIik7YS5lbnVtZXJhdGVEZXZpY2VzUHJpdmF0ZSghMCkudGhlbihmdW5jdGlvbigpe25hdmlnYXRvci5tZWRpYURldmljZXMuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoXCJkZXZpY2VjaGFuZ2VcIikpfSlbXCJjYXRjaFwiXShmdW5jdGlvbigpe25hdmlnYXRvci5tZWRpYURldmljZXMuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoXCJkZXZpY2VjaGFuZ2VcIikpfSl9KTtyZXR1cm4gYS5yZW1vdGVJbnZva2UoITAsZC5tZXRob2RfaWRfTWVkaWFEZXZpY2VzX3Qub25kZXZpY2VjaGFuZ2UsYi5zdWNjZXNzKX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oYil7YS5sb2dSZW1vdGVJbnZva2VFcnJvcihiLFwiLnNldF9vbmRldmljZWNoYW5nZSgpIGZhaWxlZCFcIil9KX07XHJcbmMucHJvdG90eXBlLnByZXBhcmVEaXNwbGF5Q29uc3RyYWludHM9ZnVuY3Rpb24oYSl7aWYobi5nZXRSZWRpcmVjdG9yKCkuZ2V0RmVhdHVyZVZhbHVlKGQuRkVBVFVSRV9tc190ZWFtc19jb21tb25fbWVkaWFfY29uc3RyYWludHMpKXJldHVybiBhO3ZhciBiPXtmcmFtZVJhdGU6MTUsd2lkdGg6e21heDoxOTIwfSxoZWlnaHQ6e21heDoxMDgwfX07aWYodm9pZCAwIT09YS52aWRlbyYmbnVsbCE9PWEudmlkZW8pe3ZhciBjPWEudmlkZW87dm9pZCAwIT09Yy5mcmFtZVJhdGUmJnZvaWQgMCE9PWMud2lkdGgmJnZvaWQgMCE9PWMuaGVpZ2h0JiYoYi5mcmFtZVJhdGU9Yy5mcmFtZVJhdGUsYi53aWR0aC5tYXg9Yy53aWR0aC5tYXh8fGMud2lkdGgsYi5oZWlnaHQubWF4PWMuaGVpZ2h0Lm1heHx8Yy5oZWlnaHQpfXJldHVybiBhLmF1ZGlvP3t2aWRlbzpiLGF1ZGlvOmEuYXVkaW99Ont2aWRlbzpifX07cmV0dXJuIGN9KHcuUHJveHlPYmplY3QpO2EuUmVtb3RlRGV2aWNlcz1iO3ZhciBNPVxyXG5mdW5jdGlvbigpe2Z1bmN0aW9uIGEoKXt9YS50b1JlbW90ZU1lZGlhVHJhY2tDb25zdHJhaW50U2V0PWZ1bmN0aW9uKGEpe3ZhciBiPXZvaWQgMDt2LlV0aWwuaGFzVmFsdWUoYSkmJihiPXt9LHYuVXRpbC5oYXNWYWx1ZShhLndpZHRoKSYmKGIud2lkdGg9YS53aWR0aCksdi5VdGlsLmhhc1ZhbHVlKGEuaGVpZ2h0KSYmKGIuaGVpZ2h0PWEuaGVpZ2h0KSx2LlV0aWwuaGFzVmFsdWUoYS5hc3BlY3RSYXRpbykmJihiLmFzcGVjdFJhdGlvPWEuYXNwZWN0UmF0aW8pLHYuVXRpbC5oYXNWYWx1ZShhLmZyYW1lUmF0ZSkmJihiLmZyYW1lUmF0ZT1hLmZyYW1lUmF0ZSksdi5VdGlsLmhhc1ZhbHVlKGEuZmFjaW5nTW9kZSkmJihiLmZhY2luZ01vZGU9YS5mYWNpbmdNb2RlKSx2LlV0aWwuaGFzVmFsdWUoYS5zYW1wbGVSYXRlKSYmKGIuc2FtcGxlUmF0ZT1hLnNhbXBsZVJhdGUpLHYuVXRpbC5oYXNWYWx1ZShhLnNhbXBsZVNpemUpJiYoYi5zYW1wbGVTaXplPWEuc2FtcGxlU2l6ZSksdi5VdGlsLmhhc1ZhbHVlKGEudm9sdW1lKSYmXHJcbihiLnZvbHVtZT1hLnZvbHVtZSksdi5VdGlsLmhhc1ZhbHVlKGEuZWNob0NhbmNlbGxhdGlvbikmJihiLmVjaG9DYW5jZWxsYXRpb249YS5lY2hvQ2FuY2VsbGF0aW9uKSx2LlV0aWwuaGFzVmFsdWUoYS5hdXRvR2FpbkNvbnRyb2wpJiYoYi5hdXRvR2FpbkNvbnRyb2w9YS5hdXRvR2FpbkNvbnRyb2wpLHYuVXRpbC5oYXNWYWx1ZShhLm5vaXNlU3VwcHJlc3Npb24pJiYoYi5ub2lzZVN1cHByZXNzaW9uPWEubm9pc2VTdXBwcmVzc2lvbiksdi5VdGlsLmhhc1ZhbHVlKGEubGF0ZW5jeSkmJihiLmxhdGVuY3k9YS5sYXRlbmN5KSx2LlV0aWwuaGFzVmFsdWUoYS5jaGFubmVsQ291bnQpJiYoYi5jaGFubmVsQ291bnQ9YS5jaGFubmVsQ291bnQpLHYuVXRpbC5oYXNWYWx1ZShhLmRldmljZUlkKSYmKGIuZGV2aWNlSWQ9YS5kZXZpY2VJZCksdi5VdGlsLmhhc1ZhbHVlKGEuZ3JvdXBJZCkmJihiLmdyb3VwSWQ9YS5ncm91cElkKSx2LlV0aWwuaGFzVmFsdWUoYS5tYXhGcmFtZVJhdGUpJiYoYi5tYXhGcmFtZVJhdGU9XHJcbmEubWF4RnJhbWVSYXRlKSx2LlV0aWwuaGFzVmFsdWUoYS5tYXhIZWlnaHQpJiYoYi5tYXhIZWlnaHQ9YS5tYXhIZWlnaHQpLHYuVXRpbC5oYXNWYWx1ZShhLm1heFdpZHRoKSYmKGIubWF4V2lkdGg9YS5tYXhXaWR0aCksdi5VdGlsLmhhc1ZhbHVlKGEubWluSGVpZ2h0KSYmKGIubWluSGVpZ2h0PWEubWluSGVpZ2h0KSx2LlV0aWwuaGFzVmFsdWUoYS5taW5XaWR0aCkmJihiLm1pbldpZHRoPWEubWluV2lkdGgpLHYuVXRpbC5oYXNWYWx1ZShhLnNvdXJjZUlkKSYmKGIuc291cmNlSWQ9YS5zb3VyY2VJZCkpO3JldHVybiBifTtyZXR1cm4gYX0oKTthLlJlbW90ZU1lZGlhVHJhY2tDb25zdHJhaW50U2V0PU07dmFyIEY9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYigpe3JldHVybiBudWxsIT09YSYmYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl8fHRoaXN9ZShiLGEpO2IuZGVmTWFuZGF0b3J5PWZ1bmN0aW9uKGEpe3ZhciBiPWE7di5VdGlsLmhhc1ZhbHVlKGEpPyh2LlV0aWwuaGFzVmFsdWUoYS5tYXhGcmFtZVJhdGUpfHxcclxuKGIubWF4RnJhbWVSYXRlPTMwKSx2LlV0aWwuaGFzVmFsdWUoYS5taW5XaWR0aCl8fChiLm1pbldpZHRoPTM2MCksdi5VdGlsLmhhc1ZhbHVlKGEubWF4V2lkdGgpfHwoYi5tYXhXaWR0aD0xOTIwKSx2LlV0aWwuaGFzVmFsdWUoYS5taW5IZWlnaHQpfHwoYi5taW5IZWlnaHQ9MTgwKSx2LlV0aWwuaGFzVmFsdWUoYS5tYXhIZWlnaHQpfHwoYi5tYXhIZWlnaHQ9MTA4MCkpOmI9e21heEZyYW1lUmF0ZTozMCxtaW5XaWR0aDozNjAsbWF4V2lkdGg6MTkyMCxtaW5IZWlnaHQ6MTgwLG1heEhlaWdodDoxMDgwfTtyZXR1cm4gYn07Yi50b1JlbW90ZU1lZGlhVHJhY2tDb25zdHJhaW50cz1mdW5jdGlvbihhKXt2YXIgYj12b2lkIDA7di5VdGlsLmhhc1ZhbHVlKGEpJiYoYj1NLnRvUmVtb3RlTWVkaWFUcmFja0NvbnN0cmFpbnRTZXQoYSksYi5hZHZhbmNlZD1bXSx2LlV0aWwuaGFzVmFsdWUoYS5hZHZhbmNlZCkmJmEuYWR2YW5jZWQuZm9yRWFjaChmdW5jdGlvbihhKXthPU0udG9SZW1vdGVNZWRpYVRyYWNrQ29uc3RyYWludFNldChhKTtcclxuYi5hZHZhbmNlZC5wdXNoKGEpfSksdi5VdGlsLmhhc1ZhbHVlKGEubWFuZGF0b3J5KSYmKGIubWFuZGF0b3J5PVwiYm9vbGVhblwiIT10eXBlb2YgYS5tYW5kYXRvcnk/TS50b1JlbW90ZU1lZGlhVHJhY2tDb25zdHJhaW50U2V0KGEubWFuZGF0b3J5KTphLm1hbmRhdG9yeSkpO3JldHVybiBifTtyZXR1cm4gYn0oTSk7YS5SZW1vdGVNZWRpYVRyYWNrQ29uc3RyYWludHM9Rjt2YXIgSj1mdW5jdGlvbigpe2Z1bmN0aW9uIGEoKXt9YS5nZXREZWZhdWx0QXVkaW9EZXZpY2VJZD1mdW5jdGlvbigpe2lmKHZvaWQgMCE9PWwpe3ZhciBhPWwuZmluZChmdW5jdGlvbihhKXtyZXR1cm5cImF1ZGlvaW5wdXRcIj09PWEua2luZCYmXCJkZWZhdWx0XCI9PT1hLmRldmljZUlkfSk7aWYodm9pZCAwIT09YSlyZXR1cm4gYS5kZXZpY2VJZH1yZXR1cm5cIlwifTthLmdldERlZmF1bHRWaWRlb0RldmljZUlkPWZ1bmN0aW9uKCl7aWYodm9pZCAwIT09bCl7dmFyIGE9bC5maW5kKGZ1bmN0aW9uKGEpe3JldHVyblwidmlkZW9pbnB1dFwiPT09XHJcbmEua2luZH0pO2lmKHZvaWQgMCE9PWEpcmV0dXJuIGEuZGV2aWNlSWR9cmV0dXJuXCJcIn07YS50b1JlbW90ZU1lZGlhU3RyZWFtQ29uc3RyYWludHM9ZnVuY3Rpb24oYixjKXt2b2lkIDA9PT1jJiYoYz0hMSk7cS5sb2dnZXIubG9nKFwiUmVtb3RlTWVkaWFTdHJlYW1Db25zdHJhaW50cy50b1JlbW90ZU1lZGlhU3RyZWFtQ29uc3RyYWludHMoKSBpbiBjb25zdHJhaW50czpcIitKU09OLnN0cmluZ2lmeShiKSk7dmFyIGc9e307di5VdGlsLmhhc1ZhbHVlKGIpJiYodi5VdGlsLmhhc1ZhbHVlKGIuYXVkaW8pJiYoXCJib29sZWFuXCIhPXR5cGVvZiBiLmF1ZGlvPyhnLmF1ZGlvPUYudG9SZW1vdGVNZWRpYVRyYWNrQ29uc3RyYWludHMoYi5hdWRpbyksMCE9T2JqZWN0LmtleXMoZy5hdWRpbykubGVuZ3RoJiZ2LlV0aWwuaGFzVmFsdWUoZy5hdWRpbyl8fChnLmF1ZGlvPXtkdW1teToxfSksZC5CVUlMRF9UWVBFX1NESyYmMD09YyYmYS5pc0NvbnN0cmFpbnRzQXVkaW9EZXZpY2VJZEVtcHR5KGIpJiZcclxuKGcuYXVkaW8uZGV2aWNlSWQ9YS5nZXREZWZhdWx0QXVkaW9EZXZpY2VJZCgpLHEubG9nZ2VyLmxvZyhcIlJlbW90ZU1lZGlhU3RyZWFtQ29uc3RyYWludHMudG9SZW1vdGVNZWRpYVN0cmVhbUNvbnN0cmFpbnRzKCkgc2V0IGRlZmF1bHQgYXVkaW8gZGV2aWNlSWQ6J1wiK2cuYXVkaW8uZGV2aWNlSWQrXCInXCIpKSk6Zy5hdWRpbz1iLmF1ZGlvKSx2LlV0aWwuaGFzVmFsdWUoYi5wZWVySWRlbnRpdHkpJiYoZy5wZWVySWRlbnRpdHk9Yi5wZWVySWRlbnRpdHkpLHYuVXRpbC5oYXNWYWx1ZShiLnZpZGVvKSYmKFwiYm9vbGVhblwiIT10eXBlb2YgYi52aWRlbz8oZy52aWRlbz1GLnRvUmVtb3RlTWVkaWFUcmFja0NvbnN0cmFpbnRzKGIudmlkZW8pLDA9PWMmJlwiYm9vbGVhblwiIT10eXBlb2YgZy52aWRlby5tYW5kYXRvcnkmJihnLnZpZGVvLm1hbmRhdG9yeT1GLmRlZk1hbmRhdG9yeShnLnZpZGVvLm1hbmRhdG9yeSksZC5CVUlMRF9UWVBFX1NESyYmYS5pc0NvbnN0cmFpbnRzVmlkZW9Tb3VyY2VJZEVtcHR5KGIpJiZcclxuKGcudmlkZW8ubWFuZGF0b3J5LnNvdXJjZUlkPWEuZ2V0RGVmYXVsdFZpZGVvRGV2aWNlSWQoKSxxLmxvZ2dlci5sb2coXCJSZW1vdGVNZWRpYVN0cmVhbUNvbnN0cmFpbnRzLnRvUmVtb3RlTWVkaWFTdHJlYW1Db25zdHJhaW50cygpIHNldCBkZWZhdWx0IHZpZGVvIHNvdXJjZUlkOidcIitnLnZpZGVvLm1hbmRhdG9yeS5zb3VyY2VJZCtcIidcIikpKSk6KGcudmlkZW89Yi52aWRlbywxPT1iLnZpZGVvJiYwPT1jJiZkLkJVSUxEX1RZUEVfU0RLJiZhLmlzQ29uc3RyYWludHNWaWRlb1NvdXJjZUlkRW1wdHkoYikmJihnLnZpZGVvPXt9LGcudmlkZW8ubWFuZGF0b3J5PUYuZGVmTWFuZGF0b3J5KHZvaWQgMCksZy52aWRlby5tYW5kYXRvcnkuc291cmNlSWQ9YS5nZXREZWZhdWx0VmlkZW9EZXZpY2VJZCgpLHEubG9nZ2VyLmxvZyhcIlJlbW90ZU1lZGlhU3RyZWFtQ29uc3RyYWludHMudG9SZW1vdGVNZWRpYVN0cmVhbUNvbnN0cmFpbnRzKCkgc2V0IGRlZmF1bHQgdmlkZW8gc291cmNlSWQ6J1wiK1xyXG5nLnZpZGVvLm1hbmRhdG9yeS5zb3VyY2VJZCtcIidcIikpKSkpO3EubG9nZ2VyLmxvZyhcIlJlbW90ZU1lZGlhU3RyZWFtQ29uc3RyYWludHMudG9SZW1vdGVNZWRpYVN0cmVhbUNvbnN0cmFpbnRzKCkgb3V0IGNvbnN0cmFpbnRzOlwiK0pTT04uc3RyaW5naWZ5KGcpKTtyZXR1cm4gZ307YS5pc0NvbnN0cmFpbnRzQXVkaW9EZXZpY2VJZEVtcHR5PWZ1bmN0aW9uKGEpe3ZhciBiPSExO3YuVXRpbC5oYXNWYWx1ZShhKSYmdi5VdGlsLmhhc1ZhbHVlKGEuYXVkaW8pJiYoXCJib29sZWFuXCI9PXR5cGVvZiBhLmF1ZGlvPzE9PWEuYXVkaW8mJihiPSEwKTooYT1hLmF1ZGlvLCFhfHwhMSE9PXYuVXRpbC5oYXNWYWx1ZShhLmRldmljZUlkKSYmXCJcIiE9PWEuZGV2aWNlSWR8fChiPSEwKSkpO3JldHVybiBifTthLmlzQ29uc3RyYWludHNWaWRlb1NvdXJjZUlkRW1wdHk9ZnVuY3Rpb24oYSl7dmFyIGI9ITE7aWYodi5VdGlsLmhhc1ZhbHVlKGEpJiZ2LlV0aWwuaGFzVmFsdWUoYS52aWRlbykpaWYoXCJib29sZWFuXCI9PVxyXG50eXBlb2YgYS52aWRlbykxPT1hLnZpZGVvJiYoYj0hMCk7ZWxzZSBpZihhPWEudmlkZW8pKGE9YS5tYW5kYXRvcnkpJiYhMSE9PXYuVXRpbC5oYXNWYWx1ZShhLnNvdXJjZUlkKSYmXCJcIiE9PWEuc291cmNlSWR8fChiPSEwKTtyZXR1cm4gYn07cmV0dXJuIGF9KCk7YS5SZW1vdGVNZWRpYVN0cmVhbUNvbnN0cmFpbnRzPUo7dmFyIEc9ZnVuY3Rpb24oKXtmdW5jdGlvbiBhKCl7dGhpcy52aWRlbz10aGlzLmF1ZGlvPWEuRW1wdHlDYXBhYmlsaXRpZXN9YS5FbXB0eUNhcGFiaWxpdGllcz17Y29kZWNzOltdLGhlYWRlckV4dGVuc2lvbnM6W119O3JldHVybiBhfSgpO2I9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYigpe3JldHVybiBhLmNhbGwodGhpcyxudWxsLGQuY2xhc3NfaWRfdC5OYXZpZ2F0b3JVc2VyTWVkaWEsMCx3LlByb3h5TW9kZS5Mb2NhbCl8fHRoaXN9ZShiLGEpO2IuZ2V0Q2FwYWJpbGl0aWVzPWZ1bmN0aW9uKGEpe3EubG9nZ2VyLmxvZyhcIk5hdmlnYXRvclVzZXJNZWRpYS5nZXRDYXBhYmlsaXRpZXMgZm9yIHR5cGU9XCIrXHJcbmErXCIgY2FwYWJpbGl0aWVzPVwiK0pTT04uc3RyaW5naWZ5KGIuY2FwYWJpbGl0aWVzW2FdKSk7cmV0dXJuIGIuY2FwYWJpbGl0aWVzW2FdfTtiLnJlc2V0Q2FwYWJpbGl0aWVzPWZ1bmN0aW9uKCl7Yi5jYXBhYmlsaXRpZXM9bmV3IEd9O2IucHJvdG90eXBlLmdldENhcGFiaWxpdGllcz1mdW5jdGlvbigpe3ZhciBhPXRoaXM7cS5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLmdldENhcGFiaWxpdGllcy4uLlwiKTtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24oYyxnKXthLndhaXRVbnRpbENvbm5lY3RlZChcIk5hdmlnYXRvclVzZXJNZWRpYS5nZXRDYXBhYmlsaXRpZXNcIikudGhlbihmdW5jdGlvbigpe3JldHVybiBQcm9taXNlLmFsbChbYS5yZW1vdGVJbnZva2UoITEsZC5tZXRob2RfaWRfTmF2aWdhdG9yVXNlck1lZGlhX3QuZ2V0Q2FwYWJpbGl0aWVzLFwiYXVkaW9cIiksYS5yZW1vdGVJbnZva2UoITEsZC5tZXRob2RfaWRfTmF2aWdhdG9yVXNlck1lZGlhX3QuZ2V0Q2FwYWJpbGl0aWVzLFxyXG5cInZpZGVvXCIpXSl9KS50aGVuKGZ1bmN0aW9uKGYpe2IuY2FwYWJpbGl0aWVzLmF1ZGlvPWEucGFyYW0wKGZbMF0pO2IuY2FwYWJpbGl0aWVzLnZpZGVvPWEucGFyYW0wKGZbMV0pO3EubG9nZ2VyLmxvZyhhLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5nZXRDYXBhYmlsaXRpZXMgY2FwYWJpbGl0aWVzPVwiK0pTT04uc3RyaW5naWZ5KGIuY2FwYWJpbGl0aWVzKSk7YyhiLmNhcGFiaWxpdGllcyl9KVtcImNhdGNoXCJdKGZ1bmN0aW9uKGIpe2coYS5sb2dSZW1vdGVJbnZva2VFcnJvcihiLFwiLmdldENhcGFiaWxpdGllcyBmYWlsZWQhXCIpKX0pfSl9O2IucHJvdG90eXBlLnNldENvZGVjQ2FwYWJpbGl0aWVzPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXM7cS5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLnNldENvZGVjQ2FwYWJpbGl0aWVzIDogc2V0IGNvZGVjQ2FwYWJpbGl0aWVzIHRvIFwiK0pTT04uc3RyaW5naWZ5KGEpKTtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24oYyxmKXtiLndhaXRVbnRpbENvbm5lY3RlZChcIk5hdmlnYXRvclVzZXJNZWRpYS5zZXRDb2RlY0NhcGFiaWxpdGllc1wiKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGIucmVtb3RlSW52b2tlKCExLFxyXG5kLm1ldGhvZF9pZF9OYXZpZ2F0b3JVc2VyTWVkaWFfdC5zZXRDb2RlY0NhcGFiaWxpdGllcyxhKX0pLnRoZW4oZnVuY3Rpb24oKXtxLmxvZ2dlci5sb2coYi51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuc2V0Q29kZWNDYXBhYmlsaXRpZXMoKSBzdWNjZXNzLlwiKTtjKCEwKTtiLmdldENhcGFiaWxpdGllcygpfSlbXCJjYXRjaFwiXShmdW5jdGlvbihhKXthPWIubG9nUmVtb3RlSW52b2tlRXJyb3IoYSxcIi5zZXRDb2RlY0NhcGFiaWxpdGllcygpIGZhaWxlZCFcIik7ZihhKX0pfSl9O2IucHJvdG90eXBlLndlYmtpdEdldFVzZXJNZWRpYT1mdW5jdGlvbihhLGIsZCl7cmV0dXJuIHRoaXMuZ2V0VXNlck1lZGlhKGEsYixkKX07Yi5wcm90b3R5cGUuTG9nVGVsZW1ldHJ5RGV2aWNlXz1mdW5jdGlvbihhKXt0cnl7aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBhLmF1ZGlvKXt2YXIgYj1hLmF1ZGlvLmRldmljZUlkLGQ7bC5mb3JFYWNoKGZ1bmN0aW9uKGEpe2I9PWEuZGV2aWNlSWQmJihkPWEubGFiZWwpfSk7XHJcbnEubG9nZ2VyLmxvZyhkKTt0aGlzLlNlbmRUZWxlbWV0cnlEYXRhKGsudGVsX2tleV9BdWRpb0RldmljZVVzZWQsZCwwKX1pZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIGEudmlkZW8pe3ZhciBmPWEudmlkZW8ubWFuZGF0b3J5LGM7ZiYmbC5mb3JFYWNoKGZ1bmN0aW9uKGEpe2Yuc291cmNlSWQ9PWEuZGV2aWNlSWQmJihjPWEubGFiZWwpfSk7cS5sb2dnZXIubG9nKGMpO3RoaXMuU2VuZFRlbGVtZXRyeURhdGEoay50ZWxfa2V5X1ZpZGVvRGV2aWNlVXNlZCxjLDApfX1jYXRjaChnKXtxLmxvZ2dlci5sb2coZyl9fTtiLnByb3RvdHlwZS5nZXRVc2VyTWVkaWE9ZnVuY3Rpb24oYSxiLGQpe3EubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5nZXRVc2VyTWVkaWEoKSBjYWxsZWQ6IFwiK0pTT04uc3RyaW5naWZ5KGEpKTtyZXR1cm4gYiYmZD90aGlzLmdldFVzZXJNZWRpYV92MShhLGIsZCk6dGhpcy5nZXRVc2VyTWVkaWFfdjIoYSl9O2IucHJvdG90eXBlLmdldFVzZXJNZWRpYV92Mj1cclxuZnVuY3Rpb24oYSl7dmFyIGI9dGhpcztxLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuZ2V0VXNlck1lZGlhX3YyKCkgY2FsbGVkOiBcIitKU09OLnN0cmluZ2lmeShhKSk7cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKGQsZil7Yi5nZXRVc2VyTWVkaWFQcml2YXRlKGEsZnVuY3Rpb24oYSl7cS5sb2dnZXIubG9nKGIudXNlcl9mcmllbmRseV9pZCgpK1wiZ2V0VXNlck1lZGlhX3YyOiByZXNvbHZpbmcgc3RyZWFtXCIpO2QoYSl9LGZ1bmN0aW9uKGEpe3EubG9nZ2VyLmxvZyhiLnVzZXJfZnJpZW5kbHlfaWQoKStcImdldFVzZXJNZWRpYV92MjogcmVqZWN0aW5nIHN0cmVhbVwiKTtmKGEpfSl9KX07Yi5wcm90b3R5cGUuZ2V0VXNlck1lZGlhX3YxPWZ1bmN0aW9uKGEsYixkKXtxLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuZ2V0VXNlck1lZGlhX3YxKCkgY2FsbGVkOiBcIitKU09OLnN0cmluZ2lmeShhKSk7cmV0dXJuIHRoaXMuZ2V0VXNlck1lZGlhUHJpdmF0ZShhLFxyXG5iLGQpfTtiLnByb3RvdHlwZS5nZXRVc2VyTWVkaWFQcml2YXRlPWZ1bmN0aW9uKGEsYixjKXt2YXIgZj10aGlzO3RoaXMud2FpdFVudGlsQ29ubmVjdGVkKFwiTmF2aWdhdG9yVXNlck1lZGlhLmdldFVzZXJNZWRpYVByaXZhdGVcIikudGhlbihmdW5jdGlvbigpe3ZhciBiPWYucmVnaXN0ZXJDYWxsYmFja3MoITAsITEsZC5tZXRob2RfaWRfTmF2aWdhdG9yVXNlck1lZGlhX3QuZ2V0VXNlck1lZGlhKSxjPUoudG9SZW1vdGVNZWRpYVN0cmVhbUNvbnN0cmFpbnRzKGEpO2YucmVtb3RlSW52b2tlKCExLGQubWV0aG9kX2lkX05hdmlnYXRvclVzZXJNZWRpYV90LmdldFVzZXJNZWRpYSxjLGIuc3VjY2VzcyxiLmZhaWwpO3JldHVybiBiLnByb20oKX0pLnRoZW4oZnVuY3Rpb24oYSl7cS5sb2dnZXIubG9nKGYudXNlcl9mcmllbmRseV9pZCgpK1wiLmdldFVzZXJNZWRpYVByaXZhdGU6IHJlY2VpdmVkIHN1Y2Nlc3MgY2FsbGJhY2shXCIpO3JldHVybihuZXcgeChudWxsLGYucGFyYW0wKGEpLm9pZCxcclxudy5Qcm94eU1vZGUuUmVtb3RlKSkuc3luY0JhcnJpZXIoKX0pLnRoZW4oZnVuY3Rpb24oZCl7cS5sb2dnZXIubG9nKGYudXNlcl9mcmllbmRseV9pZCgpK1wiLmdldFVzZXJNZWRpYVByaXZhdGU6IE1lZGlhU3RyZWFtIHJlYWR5IHRvIGRlbGl2ZXJcIixKU09OLnN0cmluZ2lmeShkKSk7MD09ZC5nZXRUcmFja3MoKS5sZW5ndGg/KHEubG9nZ2VyLmxvZyhmLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5nZXRVc2VyTWVkaWFQcml2YXRlOiByZXBvcnRpbmcgbm8gdHJhY2tzIGFzIGVycm9yLlwiKSxjKHtjb25zdHJhaW50TmFtZTpcIlwiLG5hbWU6XCJPdmVyY29uc3RyYWluZWRFcnJvclwiLG1lc3NhZ2U6XCJcIn0pKTooZi5Mb2dUZWxlbWV0cnlEZXZpY2VfKGEpLGIoZCkpfSlbXCJjYXRjaFwiXShmdW5jdGlvbihhKXtmLmxvZ1JlbW90ZUludm9rZUVycm9yKGEsXCIuZ2V0VXNlck1lZGlhUHJpdmF0ZSgpIGZhaWxlZCFcIik7bi5nZXRSZWRpcmVjdG9yKCkuZ2V0RmVhdHVyZVZhbHVlKGQuRkVBVFVSRV9tc190ZWFtc18xOTEyKT9cclxuZi5wYXJhbTAmJmE/YyhmLnBhcmFtMChhKSk6Yyh7Y29uc3RyYWludE5hbWU6XCJcIixuYW1lOlwiT3ZlcmNvbnN0cmFpbmVkRXJyb3JcIixtZXNzYWdlOlwiXCJ9KTpjKHtjb25zdHJhaW50TmFtZTpcIlwiLG5hbWU6XCJPdmVyY29uc3RyYWluZWRFcnJvclwiLG1lc3NhZ2U6XCJcIn0pfSl9O2IucHJvdG90eXBlLlNlbmRUZWxlbWV0cnlEYXRhPWZ1bmN0aW9uKGEsYixkKXtuLmdldFJlZGlyZWN0b3IoKS50ZWxlbWV0cnkuU2VuZFRlbGVtZXRyeURhdGEoay50ZWxfY21kLkRhdGEsYSxiLGQpfTtiLmNhcGFiaWxpdGllcz1uZXcgRztyZXR1cm4gYn0ody5Qcm94eU9iamVjdCk7YS5OYXZpZ2F0b3JVc2VyTWVkaWE9Yn0sNjUwOmZ1bmN0aW9uKGIsYSxjKXtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTthLlJlbW90ZVNlc3Npb249YS5TZXNzaW9uSW5mbz1hLlJlbW90ZVR5cGU9dm9pZCAwO3ZhciBlPWMoOTQ2KSxsPWMoNTUwKSxoPWMoOSksZD1jKDg1MSksdz1jKDU1MCksXHJcbnE9YygzOTQpLG47KGZ1bmN0aW9uKGEpe2FbYS5Vbmtub3duPTBdPVwiVW5rbm93blwiO2FbYS5XaW5kb3dzPTFdPVwiV2luZG93c1wiO2FbYS5MaW51eD0yXT1cIkxpbnV4XCJ9KShuPWEuUmVtb3RlVHlwZXx8KGEuUmVtb3RlVHlwZT17fSkpO3ZhciBrPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKCl7fX0oKTthLlNlc3Npb25JbmZvPWs7Yj1mdW5jdGlvbigpe2Z1bmN0aW9uIGEoYixkKXt2YXIgYz10aGlzO3RoaXMuaXNyZW1vdGVfPSExO3RoaXMuaXNyZW1vdGVfPSEwO3RoaXMudHlwZV89bi5XaW5kb3dzO3RoaXMuYWRkcmVzc189XCIwLjAuMC4wXCI7dGhpcy5zZXNzaW9uaW5mb189bnVsbDtlLmdldFJlZGlyZWN0b3IoKS5zZXRSZW1vdGVTZXNzaW9uSW5mb0NiKGZ1bmN0aW9uKCl7cmV0dXJuIGMucmVtb3RlU2Vzc2lvbkluZm8oKX0pO3RoaXMuZW5naW5lY29udHJvbF89bmV3IGguRW5naW5lQ29udHJvbChiK1wiOjpcIitkKX1hLnByb3RvdHlwZS5yZWxlYXNlPWZ1bmN0aW9uKCl7ZS5nZXRSZWRpcmVjdG9yKCkuc2V0UmVtb3RlU2Vzc2lvbkluZm9DYihudWxsKX07XHJcbmEucHJvdG90eXBlLnVzZXJfZnJpZW5kbHlfaWQ9ZnVuY3Rpb24oKXtyZXR1cm5cIltSZW1vdGVTZXNzaW9uXVwifTthLnByb3RvdHlwZS5nZXRGZWF0dXJlRmxhZ3M9ZnVuY3Rpb24oKXt2YXIgYT17fTtudWxsIT09dGhpcy5lbmdpbmVjb250cm9sXyYmbnVsbCE9PXRoaXMuZW5naW5lY29udHJvbF8uZmVhdHVyZXNfJiZ2b2lkIDAhPT10aGlzLmVuZ2luZWNvbnRyb2xfLmZlYXR1cmVzXyYmdGhpcy5lbmdpbmVjb250cm9sXy5mZWF0dXJlc18uZm9yRWFjaChmdW5jdGlvbihiKXthW2IubmFtZV09Yi52YWx1ZX0pO3JldHVybiBhfTthLnByb3RvdHlwZS5pc0ZlYXR1cmVTdXBwb3J0ZWQ9ZnVuY3Rpb24oYSl7aWYoXCJ2aWRlb1wiPT09YSlyZXR1cm4hMDtpZihcImdpdmVjb250cm9sXCI9PT1hJiZ0aGlzLnNlc3Npb25pbmZvXy5jbGllbnRQbGF0Zm9ybS5pbmNsdWRlcyhcIkxpbnV4XCIpfHwhKGEgaW4gdy5mZWF0dXJlTmFtZU1hcCkpcmV0dXJuITE7Zm9yKHZhciBiPXcuZmVhdHVyZU5hbWVNYXBbYV0sXHJcbmQ9dGhpcy5nZXRGZWF0dXJlRmxhZ3MoKSxjPTA7YzxiLmxlbmd0aDtjKyspaWYoIShiW2NdaW4gZCl8fCEwIT09ZFtiW2NdXSlyZXR1cm4hMTtyZXR1cm4gYSBpbiB3LnZkYUZlYXR1cmVOYW1lTWFwP3cudmRhRmVhdHVyZU5hbWVNYXBbYV0ubWFwKGZ1bmN0aW9uKGEpe3JldHVybiBlLmdldFJlZGlyZWN0b3IoKS5nZXRWREFGZWF0dXJlVmFsdWUoYSl9KS5yZWR1Y2UoZnVuY3Rpb24oYSxiKXtyZXR1cm4gYSYmYn0sITApOiEwfTthLmlzRmVhdHVyZVBzdG5TdXBwb3J0ZWQ9ZnVuY3Rpb24oKXtyZXR1cm4gYS5wc3RuX307YS5pc0ZlYXR1cmVEdG1mU3VwcG9ydGVkPWZ1bmN0aW9uKCl7cmV0dXJuIGEuZHRtZnN3aXRjaF99O2EuaXNGZWF0dXJBcHBzaGFyZVN1cHBvcnRlZD1mdW5jdGlvbigpe3JldHVybiBhLmFwcHNoYXJlX307YS5pc0ZlYXR1cmVXZWJydGMxZG90MFN1cHBvcnRlZD1mdW5jdGlvbigpe3JldHVybiBhLndlYnJ0YzFkb3QwX307YS5pc0ZlYXR1cmVEYXRhQ2hhbm5lbFN1cHBvcnRlZD1cclxuZnVuY3Rpb24oKXtyZXR1cm4gYS5kYXRhY2hhbm5lbF99O2EuaXNGZWF0dXJlVmROb0J1ZmZlckxpbWl0U3VwcG9ydGVkPWZ1bmN0aW9uKCl7cmV0dXJuIGEudmRub2J1ZmxpbWl0X307YS5pc0ZlYXR1cmVDYWxsQ29uc3RyYWludHNTdXBwb3J0ZWQ9ZnVuY3Rpb24oKXtyZXR1cm4gYS5jYWxsY29uc3RyYWludHNffTthLmlzRmVhdHVyZVRyYWNrQ2xvbmVXaXRoSWRTdXBwb3J0ZWQ9ZnVuY3Rpb24oKXtyZXR1cm4gYS50cmFja2Nsb25ld2l0aGlkX307YS5pc0ZlYXR1cmVTZW5kZXJTdGF0c0ZpeFN1cHBvcnRlZD1mdW5jdGlvbigpe3JldHVybiBhLnNlbmRlcnN0YXRzZml4X307YS5wcm90b3R5cGUuZ2V0U2Vzc2lvbkluZm89ZnVuY3Rpb24oKXtkLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuZ2V0U2Vzc2lvbkluZm8oKSBjYWxsZWQuXCIpO3JldHVybiBudWxsIT10aGlzLnNlc3Npb25pbmZvXz9Qcm9taXNlLnJlc29sdmUodGhpcy5zZXNzaW9uaW5mb18pOlByb21pc2UucmVqZWN0KCl9O1xyXG5hLnByb3RvdHlwZS5yZW1vdGVTZXNzaW9uSW5mbz1mdW5jdGlvbigpe3ZhciBiPXRoaXMsYz10aGlzO2QubG9nZ2VyLmxvZyhjLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5yZW1vdGVTZXNzaW9uSW5mbygpIGNhbGxlZC5cIik7cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKG4sdCl7Yy5lbmdpbmVjb250cm9sXy5zeW5jQmFycmllcigpLnRoZW4oZnVuY3Rpb24oZSl7ZC5sb2dnZXIubG9nKGMudXNlcl9mcmllbmRseV9pZCgpK1wiZW5naW5lY29udHJvbCBpbmZvIHJlY2VpdmVkIVwiKTtjLnNlc3Npb25pbmZvXz1uZXcgaztjLnNlc3Npb25pbmZvXy50eXBlX3NjcmlwdD1sLkhEWE1TX1ZFUlNJT047Yy5zZXNzaW9uaW5mb18ud2VicnBjPWUudmVyc2lvbl8ubWFqb3IudG9TdHJpbmcoKStcIi5cIitlLnZlcnNpb25fLm1pbm9yLnRvU3RyaW5nKCkrXCIuXCIrZS52ZXJzaW9uXy5yZXZpc2lvbi50b1N0cmluZygpK1wiLlwiK2UudmVyc2lvbl8uYnVpbGQudG9TdHJpbmcoKTtpZih2b2lkIDAhPWUudmVyc2lvbnNfJiZcclxubnVsbCE9ZS52ZXJzaW9uc18pe2MuU2VuZFRlbGVtZXRyeURhdGEocS50ZWxfa2V5X1ZlclR5cGVTY3JpcHQsbC5IRFhNU19WRVJTSU9OLDApO2Zvcih2YXIgdD0wLHk9MCx4PWUudmVyc2lvbnNfO3k8eC5sZW5ndGg7eSsrKXt2YXIgcj14W3ldLHI9ci5tYWpvci50b1N0cmluZygpK1wiLlwiK3IubWlub3IudG9TdHJpbmcoKStcIi5cIityLnJldmlzaW9uLnRvU3RyaW5nKCkrXCIuXCIrci5idWlsZC50b1N0cmluZygpO3N3aXRjaCh0KXtjYXNlIGguVmVyc2lvblR5cGUuV2VicnBjOmMuc2Vzc2lvbmluZm9fLndlYnJwYz1yO2MuU2VuZFRlbGVtZXRyeURhdGEocS50ZWxfa2V5X1ZlcldlYnJwYyxyLDApO2JyZWFrO2Nhc2UgaC5WZXJzaW9uVHlwZS5XZWJydGNDb2RlY3M6Yy5zZXNzaW9uaW5mb18ud2VicnRjX2NvZGVjcz1yO2MuU2VuZFRlbGVtZXRyeURhdGEocS50ZWxfa2V5X1ZlcldlYnJ0Y0NvZGVjcyxyLDApO2JyZWFrO2Nhc2UgaC5WZXJzaW9uVHlwZS5SZWNlaXZlcjpjLnNlc3Npb25pbmZvXy5yZWNlaXZlcj1cclxucjtjLlNlbmRUZWxlbWV0cnlEYXRhKHEudGVsX2tleV9WZXJSZWNlaXZlcixyLDApO2JyZWFrO2Nhc2UgaC5WZXJzaW9uVHlwZS5WZGE6Yy5zZXNzaW9uaW5mb18udmRhPXI7Yy5TZW5kVGVsZW1ldHJ5RGF0YShxLnRlbF9rZXlfVmVyVmRhLHIsMCk7YnJlYWs7Y2FzZSBoLlZlcnNpb25UeXBlLkVuZHBvaW50OmMuc2Vzc2lvbmluZm9fLmVuZHBvaW50PXI7Yy5TZW5kVGVsZW1ldHJ5RGF0YShxLnRlbF9rZXlfVmVyRW5kcG9pbnQsciwwKTticmVhaztjYXNlIGguVmVyc2lvblR5cGUuSGR4UnRjRW5naW5lOmMuc2Vzc2lvbmluZm9fLmhkeHJ0Y2VuZ2luZT1yO2MuU2VuZFRlbGVtZXRyeURhdGEocS50ZWxfa2V5X1ZlckhkeFJ0Y0VuZ2luZSxyLDApO2JyZWFrO2RlZmF1bHQ6ZC5sb2dnZXIubG9nKGMudXNlcl9mcmllbmRseV9pZCgpK1wiVW5rbm93biB2ZXJzaW9uIHR5cGUhXCIpfXQrK319dm9pZCAwIT1lLm9zaW5mb18mJm51bGwhPWUub3NpbmZvXyYmKGMuc2Vzc2lvbmluZm9fLm9zaW5mbz1cclxuZS5vc2luZm9fLGUub3NpbmZvXy5mYW1pbHkuaW5jbHVkZXMoXCJEYXJ3aW5cIikmJltcIk1hYyBPUyBYXCIsXCJtYWNPU1wiLFwiT1MgWFwiXS5zb21lKGZ1bmN0aW9uKGEpe3JldHVybiBlLm9zaW5mb18uZWRpdGlvbi5zdGFydHNXaXRoKGEpfSk/Yy5zZXNzaW9uaW5mb18uY2xpZW50UGxhdGZvcm09XCJNYWNcIjpjLnNlc3Npb25pbmZvXy5jbGllbnRQbGF0Zm9ybT1lLm9zaW5mb18uZmFtaWx5LGMuU2VuZFRlbGVtZXRyeURhdGEocS50ZWxfa2V5X09TRmFtaWx5LGUub3NpbmZvXy5mYW1pbHksMCksYy5TZW5kVGVsZW1ldHJ5RGF0YShxLnRlbF9rZXlfT1NWZXJzaW9uLGUub3NpbmZvXy52ZXJzaW9uLDApLGMuU2VuZFRlbGVtZXRyeURhdGEocS50ZWxfa2V5X09TQXJjaGl0ZWN0dXJlLGUub3NpbmZvXy5hcmNoaXRlY3R1cmUsMCksYy5TZW5kVGVsZW1ldHJ5RGF0YShxLnRlbF9rZXlfT1NEaXN0cm8sZS5vc2luZm9fLmRpc3RybywwKSxjLlNlbmRUZWxlbWV0cnlEYXRhKHEudGVsX2tleV9PU0VkaXRpb24sXHJcbmUub3NpbmZvXy5lZGl0aW9uLDApKTt2b2lkIDAhPWUuZW5kcG9pbnRpZF8mJm51bGwhPWUuZW5kcG9pbnRpZF8mJihjLnNlc3Npb25pbmZvXy5lbmRwb2ludElkPWUuZW5kcG9pbnRpZF8ubWFjaGluZV9pZCk7dm9pZCAwIT1lLmhhcmR3YXJlaW5mb18mJm51bGwhPWUuaGFyZHdhcmVpbmZvXyYmKGMuc2Vzc2lvbmluZm9fLmhhcmR3YXJlX2luZm89ZS5oYXJkd2FyZWluZm9fLGMuU2VuZFRlbGVtZXRyeURhdGEocS50ZWxfa2V5X0NQVU1vZGVsLGUuaGFyZHdhcmVpbmZvXy5jcHVfaW5mby5jcHVtb2RlbCwwKSxjLlNlbmRUZWxlbWV0cnlEYXRhKHEudGVsX2tleV9DUFVQcm9jZXNzb3JzLGUuaGFyZHdhcmVpbmZvXy5jcHVfaW5mby5udW1iZXJvZnByb2Nlc3NvcnMsMCksYy5TZW5kVGVsZW1ldHJ5RGF0YShxLnRlbF9rZXlfQ1BVR3B1aW5mbyxKU09OLnN0cmluZ2lmeShlLmhhcmR3YXJlaW5mb18uZ3B1X2luZm8uZ3B1cyksMCksYy5TZW5kVGVsZW1ldHJ5RGF0YShxLnRlbF9rZXlfQ1BVVG90YWxtZW1vcnksXHJcbmUuaGFyZHdhcmVpbmZvXy5tZW1vcnlfaW5mby50b3RhbG1lbW9yeSwwKSk7YS5wc3RuXz1iLmlzRmVhdHVyZVN1cHBvcnRlZChsLkZlYXR1cmVzLkZFQVRVUkVfcHVibGljX3BzdG4pO2EuZHRtZnN3aXRjaF89Yi5pc0ZlYXR1cmVTdXBwb3J0ZWQobC5GZWF0dXJlcy5GRUFUVVJFX3B1YmxpY19kdG1mKTthLmFwcHNoYXJlXz1iLmlzRmVhdHVyZVN1cHBvcnRlZChsLkZlYXR1cmVzLkZFQVRVUkVfcHVibGljX2FwcF9zaGFyaW5nKTthLndlYnJ0YzFkb3QwXz1iLmlzRmVhdHVyZVN1cHBvcnRlZChsLkZlYXR1cmVzLkZFQVRVUkVfcHVibGljX3dlYnJ0YzFkb3QwKTthLmRhdGFjaGFubmVsXz1iLmlzRmVhdHVyZVN1cHBvcnRlZChsLkZlYXR1cmVzLkZFQVRVUkVfcHVibGljX2RhdGFfY2hhbm5lbCk7YS52ZG5vYnVmbGltaXRfPWIuaXNGZWF0dXJlU3VwcG9ydGVkKGwuRmVhdHVyZXMuRkVBVFVSRV9wdWJsaWNfdmRub2J1ZmxpbWl0KTthLmNhbGxjb25zdHJhaW50c189Yi5pc0ZlYXR1cmVTdXBwb3J0ZWQobC5GZWF0dXJlcy5GRUFUVVJFX3B1YmxpY19zdHJlYW1fcmVzb2x1dGlvbik7XHJcbmEudHJhY2tjbG9uZXdpdGhpZF89Yi5pc0ZlYXR1cmVTdXBwb3J0ZWQobC5GZWF0dXJlcy5GRUFUVVJFX3B1YmxpY190cmFja19jbG9uZV93aXRoX2lkKTthLnNlbmRlcnN0YXRzZml4Xz1iLmlzRmVhdHVyZVN1cHBvcnRlZChsLkZlYXR1cmVzLkZFQVRVUkVfcHVibGljX3NlbmRlcl9zdGF0c19maXgpO24oYy5zZXNzaW9uaW5mb18pO2MuZW5naW5lY29udHJvbF8ucmVsZWFzZSgpfSlbXCJjYXRjaFwiXShmdW5jdGlvbigpe2UuZ2V0UmVkaXJlY3RvcigpLmlzUGluZ0FjdGl2ZSgpP2MucmV0cnlTZXNzaW9uSW5mbygpOih0KCksYy5lbmdpbmVjb250cm9sXy5yZWxlYXNlKCksYy5lbmdpbmVjb250cm9sXz1udWxsKX0pfSl9O2EucHJvdG90eXBlLnJldHJ5U2Vzc2lvbkluZm89ZnVuY3Rpb24oKXt2YXIgYT10aGlzO3NldFRpbWVvdXQoZnVuY3Rpb24oKXtkLmxvZ2dlci5sb2coXCJjaGVja2luZyBpZiB3ZSBhcmUgY29ubmVjdGVkLi4uXCIpO2EuZW5naW5lY29udHJvbF8uYmluZCgpO2UuZ2V0UmVkaXJlY3RvcigpLmhhbmRsZVJlbW90ZVNlc3Npb25JbmZvKCl9LFxyXG4xNUUzKX07YS5wcm90b3R5cGUuU2VuZFRlbGVtZXRyeURhdGE9ZnVuY3Rpb24oYSxiLGQpe2UuZ2V0UmVkaXJlY3RvcigpLnRlbGVtZXRyeS5TZW5kVGVsZW1ldHJ5RGF0YShxLnRlbF9jbWQuRGF0YSxhLGIsZCl9O2EucHN0bl89ITE7YS5kdG1mc3dpdGNoXz0hMTthLmFwcHNoYXJlXz0hMTthLndlYnJ0YzFkb3QwXz0hMTthLmRhdGFjaGFubmVsXz0hMTthLnZkbm9idWZsaW1pdF89ITE7YS5jYWxsY29uc3RyYWludHNfPSExO2EudHJhY2tjbG9uZXdpdGhpZF89ITE7YS5zZW5kZXJzdGF0c2ZpeF89ITE7cmV0dXJuIGF9KCk7YS5SZW1vdGVTZXNzaW9uPWJ9LDI0OmZ1bmN0aW9uKGIsYSxjKXt2YXIgZT10aGlzJiZ0aGlzLl9fZXh0ZW5kc3x8ZnVuY3Rpb24oKXt2YXIgYT1mdW5jdGlvbihiLGQpe2E9T2JqZWN0LnNldFByb3RvdHlwZU9mfHx7X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXkmJmZ1bmN0aW9uKGEsYil7YS5fX3Byb3RvX189Yn18fGZ1bmN0aW9uKGEsYil7Zm9yKHZhciBkIGluIGIpYi5oYXNPd25Qcm9wZXJ0eShkKSYmXHJcbihhW2RdPWJbZF0pfTtyZXR1cm4gYShiLGQpfTtyZXR1cm4gZnVuY3Rpb24oYixkKXtmdW5jdGlvbiBjKCl7dGhpcy5jb25zdHJ1Y3Rvcj1ifWEoYixkKTtiLnByb3RvdHlwZT1udWxsPT09ZD9PYmplY3QuY3JlYXRlKGQpOihjLnByb3RvdHlwZT1kLnByb3RvdHlwZSxuZXcgYyl9fSgpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO2EuUnRjRGF0YUNoYW5uZWw9YS5SVENTY3RwVHJhbnNwb3J0PXZvaWQgMDt2YXIgbD1jKDY1OCksaD1jKDU1MCksZD1jKDg1MSksdz1jKDU4OSkscTsoZnVuY3Rpb24oYSl7YVthW1wibmV3XCJdPTBdPVwibmV3XCI7YVthLmNvbm5lY3Rpbmc9MV09XCJjb25uZWN0aW5nXCI7YVthLmNvbm5lY3RlZD0yXT1cImNvbm5lY3RlZFwiO2FbYS5jbG9zZWQ9M109XCJjbG9zZWRcIjthW2EubWF4PTRdPVwibWF4XCJ9KShxfHwocT17fSkpO2I9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYihjLGcpe3ZhciBlPWEuY2FsbCh0aGlzLGMsaC5jbGFzc19pZF90LlJUQ1NjdHBUcmFuc3BvcnQsXHJcbmcsbC5Qcm94eU1vZGUuUmVtb3RlKXx8dGhpcztkLmxvZ2dlci5sb2coZS51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuY29uc3RydWN0b3JcIik7cmV0dXJuIGV9ZShiLGEpO2IucHJvdG90eXBlLnN5bmNCYXJyaWVyPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcztkLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuc3luY0JhcnJpZXIoKSBjYWxsZWQuXCIpO3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihiLGMpe2Euc3luY0JhcnJpZXJEZWVwKGIsYykmJmEud2FpdFVudGlsQ29ubmVjdGVkKFwiUlRDU2N0cFRyYW5zcG9ydC5zeW5jQmFycmllclwiKS50aGVuKGZ1bmN0aW9uKCl7ZC5sb2dnZXIubG9nKGEudXNlcl9mcmllbmRseV9pZCgpK1wiLnN5bmNCYXJyaWVyQmFzZSBzdWNjZXNzLlwiKTtyZXR1cm4gUHJvbWlzZS5hbGwoW2EucmVtb3RlSW52b2tlKCExLGgubWV0aG9kX2lkX1JUQ1NjdHBUcmFuc3BvcnRfdC50cmFuc3BvcnQse29pZDowfSksYS5yZW1vdGVJbnZva2UoITEsaC5tZXRob2RfaWRfUlRDU2N0cFRyYW5zcG9ydF90LnN0YXRlLFxyXG4wKSxhLnJlbW90ZUludm9rZSghMSxoLm1ldGhvZF9pZF9SVENTY3RwVHJhbnNwb3J0X3QubWF4TWVzc2FnZVNpemUsMCksYS5yZW1vdGVJbnZva2UoITEsaC5tZXRob2RfaWRfUlRDU2N0cFRyYW5zcG9ydF90Lm1heENoYW5uZWxzLDApXSl9KS50aGVuKGZ1bmN0aW9uKGIpe3ZhciBjO2M9Yi5tYXAoZnVuY3Rpb24oYil7cmV0dXJuIGEucGFyYW0wKGIpfSk7Yj1jWzBdO2Euc2N0cHN0YXRlXz1jWzFdO2EubWF4TWVzc2FnZVNpemVfPWNbMl07YS5tYXhDaGFubmVsc189Y1szXTtjPWEudHJhbnNwb3J0Xzt2b2lkIDA9PWJ8fCExIT09Yi5pc19udWxsfHxudWxsIT09YS50cmFuc3BvcnRfJiZhLnRyYW5zcG9ydF8ub2JqZWN0X2lkKCk9PWIub2lkfHwoYz1uZXcgdy5EdGxzVHJhbnNwb3J0KGEsYi5vaWQpKTtjLnN5bmNCYXJyaWVyKCkudGhlbihmdW5jdGlvbihiKXtkLmxvZ2dlci5sb2coYS51c2VyX2ZyaWVuZGx5X2lkKCkrXCJ0cmFuc3BvcnQuc3luY0JhcnJpZXIoKTogc3VjY2Vzc1wiKTtcclxuYS50cmFuc3BvcnRfPWI7YS5zeW5jQmFycmllclJlc29sdmUoYSl9KVtcImNhdGNoXCJdKGZ1bmN0aW9uKCl7ZC5sb2dnZXIubG9nKGEudXNlcl9mcmllbmRseV9pZCgpK1widHJhbnNwb3J0LnN5bmNCYXJyaWVyKCk6IGZhaWxlZCFcIik7YS50cmFuc3BvcnRfPW51bGw7YS5zeW5jQmFycmllclJlc29sdmUoYSl9KX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oYil7Yj1hLmxvZ1JlbW90ZUludm9rZUVycm9yKGIsXCIuc3luY0JhcnJpZXIoKSBmYWlsZWQhXCIpO2Euc3luY0JhcnJpZXJSZWplY3QoYil9KX0pfTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYi5wcm90b3R5cGUsXCJ0cmFuc3BvcnRcIix7Z2V0OmZ1bmN0aW9uKCl7ZC5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLmdldF90cmFuc3BvcnQoKSBjYWxsZWQ6IFwiK3RoaXMudHJhbnNwb3J0Xyk7cmV0dXJuIHRoaXMudHJhbnNwb3J0X30sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYi5wcm90b3R5cGUsXHJcblwic3RhdGVcIix7Z2V0OmZ1bmN0aW9uKCl7ZC5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLmdldF9zdGF0ZSgpIGNhbGxlZDogXCIrdGhpcy5zY3Rwc3RhdGVfKTtyZXR1cm4gdGhpcy5zY3Rwc3RhdGVffSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShiLnByb3RvdHlwZSxcIm1heE1lc3NhZ2VTaXplXCIse2dldDpmdW5jdGlvbigpe2QubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5nZXRfbWF4TWVzc2FnZVNpemUoKSBjYWxsZWQ6IFwiK3RoaXMubWF4TWVzc2FnZVNpemVfKTtyZXR1cm4gdGhpcy5tYXhNZXNzYWdlU2l6ZV99LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFwibWF4Q2hhbm5lbHNcIix7Z2V0OmZ1bmN0aW9uKCl7ZC5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLmdldF9tYXhDaGFubmVscygpIGNhbGxlZDogXCIrXHJcbnRoaXMubWF4Q2hhbm5lbHNfKTtyZXR1cm4gdGhpcy5tYXhDaGFubmVsc199LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFwib25zdGF0ZWNoYW5nZVwiLHtnZXQ6ZnVuY3Rpb24oKXtkLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuZ2V0X29uc3RhdGVjaGFuZ2UoKSBjYWxsZWQ6IFwiK3RoaXMub25zdGF0ZWNoYW5nZV8pO3JldHVybiB0aGlzLm9uc3RhdGVjaGFuZ2VffSxzZXQ6ZnVuY3Rpb24oYSl7dmFyIGM9dGhpcztkLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuc2V0X29uc3RhdGVjaGFuZ2UoKSBjYWxsZWQuXCIpO3RoaXMub25zdGF0ZWNoYW5nZV89YTt0aGlzLndhaXRVbnRpbENvbm5lY3RlZCh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5vbnN0YXRlY2hhbmdlXCIpLnRoZW4oZnVuY3Rpb24oKXt2YXIgZT1jLnJlZ2lzdGVyQ2FsbGJhY2tzKCExLGMuaXNOdWxsQ2FsbGJhY2soYSksXHJcbmgubWV0aG9kX2lkX1JUQ1NjdHBUcmFuc3BvcnRfdC5vbnN0YXRlY2hhbmdlKTtlLnRoZW4oZnVuY3Rpb24oYSl7ZC5sb2dnZXIubG9nKGMudXNlcl9mcmllbmRseV9pZCgpK1wiLm9uc3RhdGVjaGFuZ2UgY2FsbGJhY2sgcmVjZWl2ZWQhISFcIik7Yy5zY3Rwc3RhdGVfPWIuY29udmVydFN0YXRlKGMucGFyYW0wKGEpKTtkLmxvZ2dlci5sb2coYy51c2VyX2ZyaWVuZGx5X2lkKCkrXCJzY3Rwc3RhdGVfOiBcIitjLnNjdHBzdGF0ZV8pO2E9bmV3IEV2ZW50KFwib25zdGF0ZWNoYW5nZVwiKTtjLm9uc3RhdGVjaGFuZ2VfKGEpfSk7cmV0dXJuIGMucmVtb3RlSW52b2tlKCEwLGgubWV0aG9kX2lkX1JUQ1NjdHBUcmFuc3BvcnRfdC5vbnN0YXRlY2hhbmdlLGUuc3VjY2Vzcyl9KVtcImNhdGNoXCJdKGZ1bmN0aW9uKCl7ZC5sb2dnZXIubG9nKGMudXNlcl9mcmllbmRseV9pZCgpK1wiLm9uc3RhdGVjaGFuZ2UoKSBmYWlsZWQuXCIpfSl9LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSk7Yi5jb252ZXJ0U3RhdGU9XHJcbmZ1bmN0aW9uKGEpe3JldHVybiBhPT1xW1wibmV3XCJdP1wiY2xvc2VkXCI6YT09cS5jb25uZWN0aW5nP1wiY29ubmVjdGluZ1wiOmE9PXEuY29ubmVjdGVkP1wiY29ubmVjdGVkXCI6XCJjbG9zZWRcIn07cmV0dXJuIGJ9KGwuUHJveHlPYmplY3QpO2EuUlRDU2N0cFRyYW5zcG9ydD1iO3ZhciBuOyhmdW5jdGlvbihhKXthW2EuY29ubmVjdGluZz0wXT1cImNvbm5lY3RpbmdcIjthW2Eub3Blbj0xXT1cIm9wZW5cIjthW2EuY2xvc2luZz0yXT1cImNsb3NpbmdcIjthW2EuY2xvc2VkPTNdPVwiY2xvc2VkXCJ9KShufHwobj17fSkpO2I9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYihjLGcsZSl7Yz1hLmNhbGwodGhpcyxjLGguY2xhc3NfaWRfdC5SVENEYXRhQ2hhbm5lbCxnLGUpfHx0aGlzO2MuYmluYXJ5VHlwZV89XCJibG9iXCI7ZC5sb2dnZXIubG9nKGMudXNlcl9mcmllbmRseV9pZCgpK1wiLmNvbnN0cnVjdG9yXCIpO3JldHVybiBjfWUoYixhKTtiLnByb3RvdHlwZS5zeW5jQmFycmllcj1mdW5jdGlvbigpe3ZhciBhPXRoaXM7XHJcbmQubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5zeW5jQmFycmllcigpIGNhbGxlZC5cIik7cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKGIsYyl7YS5zeW5jQmFycmllckRlZXAoYixjKSYmYS53YWl0VW50aWxDb25uZWN0ZWQoXCJSdGNEYXRhQ2hhbm5lbC5zeW5jQmFycmllclwiKS50aGVuKGZ1bmN0aW9uKCl7ZC5sb2dnZXIubG9nKGEudXNlcl9mcmllbmRseV9pZCgpK1wiLnN5bmNCYXJyaWVyIHJlbW90ZSBpbnZva2luZy5cIik7cmV0dXJuIFByb21pc2UuYWxsKFthLnJlbW90ZUludm9rZSghMSxoLm1ldGhvZF9pZF9SVENEYXRhQ2hhbm5lbF90LmxhYmVsLFwiXCIpLGEucmVtb3RlSW52b2tlKCExLGgubWV0aG9kX2lkX1JUQ0RhdGFDaGFubmVsX3Qub3JkZXJlZCwhMCksYS5yZW1vdGVJbnZva2UoITEsaC5tZXRob2RfaWRfUlRDRGF0YUNoYW5uZWxfdC5tYXhQYWNrZXRMaWZlVGltZSwwKSxhLnJlbW90ZUludm9rZSghMSxoLm1ldGhvZF9pZF9SVENEYXRhQ2hhbm5lbF90Lm1heFJldHJhbnNtaXRzLFxyXG4wKSxhLnJlbW90ZUludm9rZSghMSxoLm1ldGhvZF9pZF9SVENEYXRhQ2hhbm5lbF90LnByb3RvY29sLFwiXCIpLGEucmVtb3RlSW52b2tlKCExLGgubWV0aG9kX2lkX1JUQ0RhdGFDaGFubmVsX3QubmVnb3RpYXRlZCwhMSksYS5yZW1vdGVJbnZva2UoITEsaC5tZXRob2RfaWRfUlRDRGF0YUNoYW5uZWxfdC5pZCwwKSxhLnJlbW90ZUludm9rZSghMSxoLm1ldGhvZF9pZF9SVENEYXRhQ2hhbm5lbF90LnJlYWR5U3RhdGUsMCksYS5yZW1vdGVJbnZva2UoITEsaC5tZXRob2RfaWRfUlRDRGF0YUNoYW5uZWxfdC5idWZmZXJlZEFtb3VudCwwKSxhLnJlbW90ZUludm9rZSghMSxoLm1ldGhvZF9pZF9SVENEYXRhQ2hhbm5lbF90LmJ1ZmZlcmVkQW1vdW50TG93VGhyZXNob2xkLDApXSl9KS50aGVuKGZ1bmN0aW9uKGIpe2QubG9nZ2VyLmxvZyhhLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5zeW5jQmFycmllciBzdWNjZXNzLlwiKTt2YXIgYztiPWIubWFwKGZ1bmN0aW9uKGIpe3JldHVybiBhLnBhcmFtMChiKX0pO1xyXG5hLmxhYmVsXz1iWzBdO2Eub3JkZXJlZF89YlsxXTthLm1heFBhY2tldExpZmVUaW1lXz1iWzJdO2EubWF4UmV0cmFuc21pdHNfPWJbM107YS5wcm90b2NvbF89Yls0XTthLm5lZ290aWF0ZWRfPWJbNV07YS5pZF89Yls2XTtjPWJbN107YS5idWZmZXJlZEFtb3VudF89Yls4XTthLmJ1ZmZlcmVkQW1vdW50TG93VGhyZXNob2xkXz1iWzldO2EucmVhZHlTdGF0ZV89YS50b1JUQ0RhdGFDaGFubmVsU3RhdGUoYyk7YS5zeW5jQmFycmllclJlc29sdmUoYSl9KVtcImNhdGNoXCJdKGZ1bmN0aW9uKGIpe2I9YS5sb2dSZW1vdGVJbnZva2VFcnJvcihiLFwiLnN5bmNCYXJyaWVyKCkgZmFpbGVkIVwiKTthLnN5bmNCYXJyaWVyUmVqZWN0KGIpfSl9KX07T2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFwibGFiZWxcIix7Z2V0OmZ1bmN0aW9uKCl7ZC5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLmdldF9sYWJlbCgpIGNhbGxlZDogXCIrdGhpcy5sYWJlbF8pO3JldHVybiB0aGlzLmxhYmVsX30sXHJcbmVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFwib3JkZXJlZFwiLHtnZXQ6ZnVuY3Rpb24oKXtkLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuZ2V0X29yZGVyZWQoKSBjYWxsZWQ6IFwiK3RoaXMub3JkZXJlZF8pO3JldHVybiB0aGlzLm9yZGVyZWRffSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShiLnByb3RvdHlwZSxcIm1heFBhY2tldExpZmVUaW1lXCIse2dldDpmdW5jdGlvbigpe2QubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5nZXRfbWF4UGFja2V0TGlmZVRpbWUoKSBjYWxsZWQ6IFwiK3RoaXMubWF4UGFja2V0TGlmZVRpbWVfKTtyZXR1cm4gdGhpcy5tYXhQYWNrZXRMaWZlVGltZV99LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFwibWF4UmV0cmFuc21pdHNcIixcclxue2dldDpmdW5jdGlvbigpe2QubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5nZXRfbWF4UmV0cmFuc21pdHMoKSBjYWxsZWQ6IFwiK3RoaXMubWF4UmV0cmFuc21pdHNfKTtyZXR1cm4gdGhpcy5tYXhSZXRyYW5zbWl0c199LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFwicHJvdG9jb2xcIix7Z2V0OmZ1bmN0aW9uKCl7ZC5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLmdldF9wcm90b2NvbCgpIGNhbGxlZDogXCIrdGhpcy5wcm90b2NvbF8pO3JldHVybiB0aGlzLnByb3RvY29sX30sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYi5wcm90b3R5cGUsXCJuZWdvdGlhdGVkXCIse2dldDpmdW5jdGlvbigpe2QubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5nZXRfbmVnb3RpYXRlZCgpIGNhbGxlZDogXCIrdGhpcy5uZWdvdGlhdGVkXyk7XHJcbnJldHVybiB0aGlzLm5lZ290aWF0ZWRffSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShiLnByb3RvdHlwZSxcImlkXCIse2dldDpmdW5jdGlvbigpe2QubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5nZXRfaWQoKSBjYWxsZWQ6IFwiK3RoaXMuaWRfKTtyZXR1cm4gdGhpcy5pZF99LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFwicmVhZHlTdGF0ZVwiLHtnZXQ6ZnVuY3Rpb24oKXtkLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuZ2V0X3JlYWR5U3RhdGUoKSBjYWxsZWQ6IFwiK3RoaXMucmVhZHlTdGF0ZV8pO3JldHVybiB0aGlzLnJlYWR5U3RhdGVffSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShiLnByb3RvdHlwZSxcImJ1ZmZlcmVkQW1vdW50XCIse2dldDpmdW5jdGlvbigpe2QubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcclxuXCIuZ2V0X2J1ZmZlcmVkQW1vdW50KCkgY2FsbGVkOiBcIit0aGlzLmJ1ZmZlcmVkQW1vdW50Xyk7cmV0dXJuIHRoaXMuYnVmZmVyZWRBbW91bnRffSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShiLnByb3RvdHlwZSxcImJ1ZmZlcmVkQW1vdW50TG93VGhyZXNob2xkXCIse2dldDpmdW5jdGlvbigpe2QubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5nZXRfYnVmZmVyZWRBbW91bnRMb3dUaHJlc2hvbGQoKSBjYWxsZWQ6IFwiK3RoaXMuYnVmZmVyZWRBbW91bnRMb3dUaHJlc2hvbGRfKTtyZXR1cm4gdGhpcy5idWZmZXJlZEFtb3VudExvd1RocmVzaG9sZF99LHNldDpmdW5jdGlvbihhKXtkLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuZ2V0X2J1ZmZlcmVkQW1vdW50TG93VGhyZXNob2xkKCkgY2FsbGVkOiBcIithKTt0aGlzLmJ1ZmZlcmVkQW1vdW50TG93VGhyZXNob2xkXz1hfSxlbnVtZXJhYmxlOiExLFxyXG5jb25maWd1cmFibGU6ITB9KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYi5wcm90b3R5cGUsXCJiaW5hcnlUeXBlXCIse2dldDpmdW5jdGlvbigpe2QubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5nZXRfYmluYXJ5VHlwZSgpIGNhbGxlZDogXCIrdGhpcy5iaW5hcnlUeXBlXyk7cmV0dXJuIHRoaXMuYmluYXJ5VHlwZV99LHNldDpmdW5jdGlvbihhKXtkLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuc2V0X2JpbmFyeVR5cGUoKSBjYWxsZWQ6IFwiK2EpO3RoaXMuYmluYXJ5VHlwZV89XCJibG9iXCI9PWF8fFwiYXJyYXlidWZmZXJcIj09YT9hOlwiYmxvYlwifSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShiLnByb3RvdHlwZSxcIm9ub3BlblwiLHtnZXQ6ZnVuY3Rpb24oKXtkLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuZ2V0X29ub3BlbigpIGNhbGxlZC5cIik7cmV0dXJuIHRoaXMub25vcGVuX30sXHJcbnNldDpmdW5jdGlvbihhKXt2YXIgYj10aGlzO2QubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5zZXRfb25vcGVuKCkgY2FsbGVkLlwiKTt0aGlzLm9ub3Blbl89YTt0aGlzLndhaXRVbnRpbENvbm5lY3RlZCh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5vbm9wZW5cIikudGhlbihmdW5jdGlvbigpe3ZhciBjPWIucmVnaXN0ZXJDYWxsYmFja3MoITEsYi5pc051bGxDYWxsYmFjayhhKSxoLm1ldGhvZF9pZF9SVENEYXRhQ2hhbm5lbF90Lm9ub3Blbik7Yy50aGVuKGZ1bmN0aW9uKGEpe2QubG9nZ2VyLmxvZyhiLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5vbm9wZW4gY2FsbGJhY2sgcmVjZWl2ZWQhISFcIik7Yi5zeW5jQmFycmllcigpLnRoZW4oZnVuY3Rpb24oKXtkLmxvZ2dlci5sb2coYi51c2VyX2ZyaWVuZGx5X2lkKCkrXCIub25vcGVuIG5vdGlmeWluZy4uLlwiKTt2YXIgYT1uZXcgRXZlbnQoXCJvcGVuXCIse30pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLFwidGFyZ2V0XCIse3dyaXRhYmxlOiExLFxyXG52YWx1ZTpifSk7Yi5vbm9wZW5fKGEpfSlbXCJjYXRjaFwiXShmdW5jdGlvbigpe2QubG9nZ2VyLmxvZyhiLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5zeW5jQmFycmllcigpOiBmYWlsZWQhXCIpfSl9KTtyZXR1cm4gYi5yZW1vdGVJbnZva2UoITAsaC5tZXRob2RfaWRfUlRDRGF0YUNoYW5uZWxfdC5vbm9wZW4sYy5zdWNjZXNzKX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oKXtkLmxvZ2dlci5sb2coYi51c2VyX2ZyaWVuZGx5X2lkKCkrXCIub25vcGVuKCkgZmFpbGVkLlwiKX0pfSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShiLnByb3RvdHlwZSxcIm9uYnVmZmVyZWRhbW91bnRsb3dcIix7Z2V0OmZ1bmN0aW9uKCl7ZC5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLmdldF9vbmJ1ZmZlcmVkYW1vdW50bG93KCkgY2FsbGVkLlwiKTtyZXR1cm4gdGhpcy5vbmJ1ZmZlcmVkYW1vdW50bG93X30sc2V0OmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXM7XHJcbmQubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5zZXRfb25idWZmZXJlZGFtb3VudGxvdygpIGNhbGxlZC5cIik7dGhpcy5vbmJ1ZmZlcmVkYW1vdW50bG93Xz1hO3RoaXMud2FpdFVudGlsQ29ubmVjdGVkKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLm9uYnVmZmVyZWRhbW91bnRsb3dcIikudGhlbihmdW5jdGlvbigpe3ZhciBjPWIucmVnaXN0ZXJDYWxsYmFja3MoITEsYi5pc051bGxDYWxsYmFjayhhKSxoLm1ldGhvZF9pZF9SVENEYXRhQ2hhbm5lbF90Lm9uYnVmZmVyZWRhbW91bnRsb3cpO2MudGhlbihmdW5jdGlvbihhKXtkLmxvZ2dlci5sb2coYi51c2VyX2ZyaWVuZGx5X2lkKCkrXCIub25idWZmZXJlZGFtb3VudGxvdyBjYWxsYmFjayByZWNlaXZlZCEhIVwiKTthPW5ldyBFdmVudChcIm9uYnVmZmVyZWRhbW91bnRsb3dcIik7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsXCJ0YXJnZXRcIix7d3JpdGFibGU6ITEsdmFsdWU6Yn0pO2Iub25idWZmZXJlZGFtb3VudGxvd18oYSl9KTtcclxucmV0dXJuIGIucmVtb3RlSW52b2tlKCEwLGgubWV0aG9kX2lkX1JUQ0RhdGFDaGFubmVsX3Qub25idWZmZXJlZGFtb3VudGxvdyxjLnN1Y2Nlc3MpfSlbXCJjYXRjaFwiXShmdW5jdGlvbigpe2QubG9nZ2VyLmxvZyhiLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5vbmJ1ZmZlcmVkYW1vdW50bG93cygpIGZhaWxlZC5cIil9KX0sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYi5wcm90b3R5cGUsXCJvbmVycm9yXCIse2dldDpmdW5jdGlvbigpe2QubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5nZXRfb25lcnJvcigpIGNhbGxlZC5cIik7cmV0dXJuIHRoaXMub25lcnJvcl99LHNldDpmdW5jdGlvbihhKXt2YXIgYj10aGlzO2QubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5zZXRfb25lcnJvcigpIGNhbGxlZC5cIik7dGhpcy5vbmVycm9yXz1hO3RoaXMud2FpdFVudGlsQ29ubmVjdGVkKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1xyXG5cIi5vbmVycm9yXCIpLnRoZW4oZnVuY3Rpb24oKXt2YXIgYz1iLnJlZ2lzdGVyQ2FsbGJhY2tzKCExLGIuaXNOdWxsQ2FsbGJhY2soYSksaC5tZXRob2RfaWRfUlRDRGF0YUNoYW5uZWxfdC5vbmVycm9yKTtjLnRoZW4oZnVuY3Rpb24oYSl7ZC5sb2dnZXIubG9nKGIudXNlcl9mcmllbmRseV9pZCgpK1wiLm9uZXJyb3IgY2FsbGJhY2sgcmVjZWl2ZWQhXCIpO2E9Yi5wYXJhbTAoYSk7ZC5sb2dnZXIubG9nKGIudXNlcl9mcmllbmRseV9pZCgpK1wiZXJyb3I6IFwiK2EpO2E9bmV3IEV2ZW50KFwib25lcnJvclwiKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxcInRhcmdldFwiLHt3cml0YWJsZTohMSx2YWx1ZTpifSk7Yi5vbmVycm9yXyhhKX0pO3JldHVybiBiLnJlbW90ZUludm9rZSghMCxoLm1ldGhvZF9pZF9SVENEYXRhQ2hhbm5lbF90Lm9uZXJyb3IsYy5zdWNjZXNzKX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oKXtkLmxvZ2dlci5sb2coYi51c2VyX2ZyaWVuZGx5X2lkKCkrXCIub25lcnJvcigpIGZhaWxlZC5cIil9KX0sXHJcbmVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFwib25jbG9zaW5nXCIse2dldDpmdW5jdGlvbigpe2QubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5nZXRfb25jbG9zaW5nKCkgY2FsbGVkLlwiKTtyZXR1cm4gdGhpcy5vbmNsb3NpbmdffSxzZXQ6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcztkLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuc2V0X29uY2xvc2luZygpIGNhbGxlZC5cIik7dGhpcy5vbmNsb3NpbmdfPWE7dGhpcy53YWl0VW50aWxDb25uZWN0ZWQodGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIub25jbG9zaW5nXCIpLnRoZW4oZnVuY3Rpb24oKXt2YXIgYz1iLnJlZ2lzdGVyQ2FsbGJhY2tzKCExLGIuaXNOdWxsQ2FsbGJhY2soYSksaC5tZXRob2RfaWRfUlRDRGF0YUNoYW5uZWxfdC5vbmNsb3NpbmcpO2MudGhlbihmdW5jdGlvbihhKXtkLmxvZ2dlci5sb2coYi51c2VyX2ZyaWVuZGx5X2lkKCkrXHJcblwiLm9uY2xvc2luZyBjYWxsYmFjayByZWNlaXZlZCEhIVwiKTthPW5ldyBFdmVudChcIm9uY2xvc2luZ1wiKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxcInRhcmdldFwiLHt3cml0YWJsZTohMSx2YWx1ZTpifSk7Yi5vbmNsb3NpbmdfKGEpfSk7cmV0dXJuIGIucmVtb3RlSW52b2tlKCEwLGgubWV0aG9kX2lkX1JUQ0RhdGFDaGFubmVsX3Qub25jbG9zaW5nLGMuc3VjY2Vzcyl9KVtcImNhdGNoXCJdKGZ1bmN0aW9uKCl7ZC5sb2dnZXIubG9nKGIudXNlcl9mcmllbmRseV9pZCgpK1wiLm9uY2xvc2luZygpIGZhaWxlZC5cIil9KX0sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYi5wcm90b3R5cGUsXCJvbmNsb3NlXCIse2dldDpmdW5jdGlvbigpe2QubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5nZXRfb25jbG9zZSgpIGNhbGxlZC5cIik7cmV0dXJuIHRoaXMub25jbG9zZV99LHNldDpmdW5jdGlvbihhKXt2YXIgYj10aGlzO2QubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcclxuXCIuc2V0X29uY2xvc2UoKSBjYWxsZWQuXCIpO3RoaXMub25jbG9zZV89YTt0aGlzLndhaXRVbnRpbENvbm5lY3RlZCh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5vbmNsb3NlXCIpLnRoZW4oZnVuY3Rpb24oKXt2YXIgYz1iLnJlZ2lzdGVyQ2FsbGJhY2tzKCExLGIuaXNOdWxsQ2FsbGJhY2soYSksaC5tZXRob2RfaWRfUlRDRGF0YUNoYW5uZWxfdC5vbmNsb3NlKTtjLnRoZW4oZnVuY3Rpb24oYSl7ZC5sb2dnZXIubG9nKGIudXNlcl9mcmllbmRseV9pZCgpK1wiLm9uY2xvc2UgY2FsbGJhY2sgcmVjZWl2ZWQhISFcIik7YT1uZXcgRXZlbnQoXCJvbmNsb3NlXCIpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLFwidGFyZ2V0XCIse3dyaXRhYmxlOiExLHZhbHVlOmJ9KTtiLm9uY2xvc2VfKGEpfSk7cmV0dXJuIGIucmVtb3RlSW52b2tlKCEwLGgubWV0aG9kX2lkX1JUQ0RhdGFDaGFubmVsX3Qub25jbG9zZSxjLnN1Y2Nlc3MpfSlbXCJjYXRjaFwiXShmdW5jdGlvbigpe2QubG9nZ2VyLmxvZyhiLnVzZXJfZnJpZW5kbHlfaWQoKStcclxuXCIub25jbG9zZSgpIGZhaWxlZC5cIil9KX0sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYi5wcm90b3R5cGUsXCJvbm1lc3NhZ2VcIix7Z2V0OmZ1bmN0aW9uKCl7ZC5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLmdldF9vbm1lc3NhZ2UoKSBjYWxsZWQuXCIpO3JldHVybiB0aGlzLm9ubWVzc2FnZV99LHNldDpmdW5jdGlvbihhKXt2YXIgYj10aGlzO2QubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5zZXRfb25tZXNzYWdlKCkgY2FsbGVkLlwiKTt0aGlzLm9ubWVzc2FnZV89YTt0aGlzLndhaXRVbnRpbENvbm5lY3RlZCh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5vbm1lc3NhZ2VcIikudGhlbihmdW5jdGlvbigpe3ZhciBjPWIucmVnaXN0ZXJDYWxsYmFja3MoITEsYi5pc051bGxDYWxsYmFjayhhKSxoLm1ldGhvZF9pZF9SVENEYXRhQ2hhbm5lbF90Lm9ubWVzc2FnZSk7Yy50aGVuKGZ1bmN0aW9uKGEpe2QubG9nZ2VyLmxvZyhiLnVzZXJfZnJpZW5kbHlfaWQoKStcclxuXCIub25tZXNzYWdlIGNhbGxiYWNrIHJlY2VpdmVkISEhXCIpO3ZhciBjPWIucGFyYW0wKGEpO2E9bmV3IEV2ZW50KFwib25tZXNzYWdlXCIpO2MuYmluYXJ5P2EuZGF0YT1jLmRhdGFfYWI6KGM9YXRvYihjLmRhdGFfc3opLGEuZGF0YT1jKTtiLm9ubWVzc2FnZV8oYSl9KTtyZXR1cm4gYi5yZW1vdGVJbnZva2UoITAsaC5tZXRob2RfaWRfUlRDRGF0YUNoYW5uZWxfdC5vbm1lc3NhZ2UsYy5zdWNjZXNzKX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oKXtkLmxvZ2dlci5sb2coYi51c2VyX2ZyaWVuZGx5X2lkKCkrXCIub25tZXNzYWdlKCkgZmFpbGVkLlwiKX0pfSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pO2IucHJvdG90eXBlLmNsb3NlPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcztkLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuY2xvc2UoKSBjYWxsZWQuXCIpO3RoaXMud2FpdFVudGlsQ29ubmVjdGVkKFwiUlRDRGF0YUNoYW5uZWwuY2xvc2VcIikudGhlbihmdW5jdGlvbigpe3JldHVybiBhLnJlbW90ZUludm9rZSghMSxcclxuaC5tZXRob2RfaWRfUlRDRGF0YUNoYW5uZWxfdC5jbG9zZSl9KS50aGVuKGZ1bmN0aW9uKCl7ZC5sb2dnZXIubG9nKGEudXNlcl9mcmllbmRseV9pZCgpK1wiLmNsb3NlOiBzdWNjZXNzLlwiKX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oKXtkLmxvZ2dlci5sb2coYS51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuY2xvc2U6IGZhaWxlZC5cIil9KX07Yi5wcm90b3R5cGUudG9CeXRlQXJyYXk9ZnVuY3Rpb24oYSl7dmFyIGI9W107YT1uZXcgVWludDhBcnJheShhIGluc3RhbmNlb2YgQXJyYXlCdWZmZXI/YTphLmJ1ZmZlcik7Zm9yKHZhciBkIGluIGEpYi5wdXNoKGFbZF0pO3JldHVybiBifTtiLnByb3RvdHlwZS5zZW5kPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXM7ZC5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLnNlbmQoKSBjYWxsZWQuXCIpO3RoaXMud2FpdFVudGlsQ29ubmVjdGVkKFwiUlRDRGF0YUNoYW5uZWwuc2VuZFwiKS50aGVuKGZ1bmN0aW9uKCl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXJldHVybiBkLmxvZ2dlci5sb2coYi51c2VyX2ZyaWVuZGx5X2lkKCkrXHJcblwiZGF0YShzdHJpbmcpOiBcIithKSxiLnJlbW90ZUludm9rZSghMSxoLm1ldGhvZF9pZF9SVENEYXRhQ2hhbm5lbF90LnNlbmRfdGV4dCxhKTtpZihhIGluc3RhbmNlb2YgQmxvYilhLmFycmF5QnVmZmVyKCkudGhlbihmdW5jdGlvbihhKXthPWIudG9CeXRlQXJyYXkoYSk7cmV0dXJuIGIucmVtb3RlSW52b2tlKCExLGgubWV0aG9kX2lkX1JUQ0RhdGFDaGFubmVsX3Quc2VuZF9iaW5hcnksYSl9KVtcImNhdGNoXCJdKGZ1bmN0aW9uKCl7ZC5sb2dnZXIubG9nKGIudXNlcl9mcmllbmRseV9pZCgpK1wiLmFycmF5QnVmZmVyKCk6IGZhaWxlZC5cIil9KTtlbHNle3ZhciBjPWIudG9CeXRlQXJyYXkoYSk7cmV0dXJuIGIucmVtb3RlSW52b2tlKCExLGgubWV0aG9kX2lkX1JUQ0RhdGFDaGFubmVsX3Quc2VuZF9iaW5hcnksYyl9fSkudGhlbihmdW5jdGlvbigpe2QubG9nZ2VyLmxvZyhiLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5zZW5kOiBzdWNjZXNzLlwiKX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oKXtkLmxvZ2dlci5sb2coYi51c2VyX2ZyaWVuZGx5X2lkKCkrXHJcblwiLnNlbmQ6IGZhaWxlZC5cIil9KX07Yi5wcm90b3R5cGUudG9SVENEYXRhQ2hhbm5lbFN0YXRlPWZ1bmN0aW9uKGEpe3ZhciBiPVwiY2xvc2VkXCI7YT09bi5jb25uZWN0aW5nP2I9XCJjb25uZWN0aW5nXCI6YT09bi5vcGVuP2I9XCJvcGVuXCI6YT09bi5jbG9zaW5nP2I9XCJjbG9zaW5nXCI6YT09bi5jbG9zZWQmJihiPVwiY2xvc2VkXCIpO3JldHVybiBifTtyZXR1cm4gYn0obC5Qcm94eU9iamVjdCk7YS5SdGNEYXRhQ2hhbm5lbD1ifSw0ODQ6ZnVuY3Rpb24oYixhLGMpe3ZhciBlPXRoaXMmJnRoaXMuX19leHRlbmRzfHxmdW5jdGlvbigpe3ZhciBhPWZ1bmN0aW9uKGIsZCl7YT1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fHtfX3Byb3RvX186W119aW5zdGFuY2VvZiBBcnJheSYmZnVuY3Rpb24oYSxiKXthLl9fcHJvdG9fXz1ifXx8ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGQgaW4gYiliLmhhc093blByb3BlcnR5KGQpJiYoYVtkXT1iW2RdKX07cmV0dXJuIGEoYixkKX07cmV0dXJuIGZ1bmN0aW9uKGIsZCl7ZnVuY3Rpb24gYygpe3RoaXMuY29uc3RydWN0b3I9XHJcbmJ9YShiLGQpO2IucHJvdG90eXBlPW51bGw9PT1kP09iamVjdC5jcmVhdGUoZCk6KGMucHJvdG90eXBlPWQucHJvdG90eXBlLG5ldyBjKX19KCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7YS5SdGNSdHBSZWNlaXZlUGFyYW1ldGVycz1hLlJ0Y1J0cFNlbmRQYXJhbWV0ZXJzPWEuUnRjUnRwRW5jb2RpbmdQYXJhbWV0ZXJzPWEuUnRjUnRwUGFyYW1ldGVycz1hLlJ0Y1J0Y3BQYXJhbWV0ZXJzPWEuUnRjUnRwSGVhZGVyRXh0ZW5zaW9uUGFyYW1ldGVycz1hLlJ0Y1J0cENvZGVjUGFyYW1ldGVycz12b2lkIDA7dmFyIGw9Yyg4NTEpLGg9ZnVuY3Rpb24oKXtmdW5jdGlvbiBhKCl7fWEuZGVmUnRjUnRwQ29kZWNQYXJhbWV0ZXJzPWZ1bmN0aW9uKCl7cmV0dXJue21pbWVUeXBlOlwiXCIscGF5bG9hZFR5cGU6MCxzZHBGbXRwTGluZTpcIlwifX07YS5kZWZSVENSdHBDb2RlY1BhcmFtZXRlcnM9ZnVuY3Rpb24oKXtyZXR1cm57Y2xvY2tSYXRlOjAsbWltZVR5cGU6XCJcIixcclxucGF5bG9hZFR5cGU6MH19O2EudG9SdGNSdHBDb2RlY1BhcmFtZXRlcnM9ZnVuY3Rpb24oYil7dmFyIGQ9YS5kZWZSdGNSdHBDb2RlY1BhcmFtZXRlcnMoKTtiJiYoYi5jaGFubmVscyYmKGQuY2hhbm5lbHM9Yi5jaGFubmVscyksYi5jbG9ja1JhdGUmJihkLmNsb2NrUmF0ZT1iLmNsb2NrUmF0ZSksYi5taW1lVHlwZSYmKGQubWltZVR5cGU9Yi5taW1lVHlwZSksYi5wYXlsb2FkVHlwZSYmKGQucGF5bG9hZFR5cGU9Yi5wYXlsb2FkVHlwZSksYi5zZHBGbXRwTGluZSYmKGQuc2RwRm10cExpbmU9Yi5zZHBGbXRwTGluZSkpO3JldHVybiBkfTthLnRvUlRDUnRwQ29kZWNQYXJhbWV0ZXJzPWZ1bmN0aW9uKGIpe3ZhciBkPWEuZGVmUlRDUnRwQ29kZWNQYXJhbWV0ZXJzKCk7YiYmKGIuY2hhbm5lbHMmJihkLmNoYW5uZWxzPWIuY2hhbm5lbHMpLGIuY2xvY2tSYXRlJiYoZC5jbG9ja1JhdGU9Yi5jbG9ja1JhdGUpLGIubWltZVR5cGUmJihkLm1pbWVUeXBlPWIubWltZVR5cGUpLGIucGF5bG9hZFR5cGUmJlxyXG4oZC5wYXlsb2FkVHlwZT1iLnBheWxvYWRUeXBlKSxiLnNkcEZtdHBMaW5lJiYoZC5zZHBGbXRwTGluZT1iLnNkcEZtdHBMaW5lKSk7cmV0dXJuIGR9O3JldHVybiBhfSgpO2EuUnRjUnRwQ29kZWNQYXJhbWV0ZXJzPWg7dmFyIGQ9ZnVuY3Rpb24oKXtmdW5jdGlvbiBhKCl7fWEuZGVmUnRjUnRwSGVhZGVyRXh0ZW5zaW9uUGFyYW1ldGVycz1mdW5jdGlvbigpe3JldHVybntlbmNyeXB0ZWQ6ITEsaWQ6MCx1cmk6XCJcIn19O2EuZGVmUlRDUnRwSGVhZGVyRXh0ZW5zaW9uUGFyYW1ldGVycz1mdW5jdGlvbigpe3JldHVybntpZDowLHVyaTpcIlwifX07YS50b1J0Y1J0cEhlYWRlckV4dGVuc2lvblBhcmFtZXRlcnM9ZnVuY3Rpb24oYil7dmFyIGQ9YS5kZWZSdGNSdHBIZWFkZXJFeHRlbnNpb25QYXJhbWV0ZXJzKCk7aWYoYil7dmFyIGM9Yi5lbmNyeXB0ZWQ7dm9pZCAwIT1jJiZudWxsIT1jJiYoZC5lbmNyeXB0ZWQ9Yyk7Yi5pZCYmKGQuaWQ9Yi5pZCk7Yi51cmkmJihkLnVyaT1iLnVyaSl9cmV0dXJuIGR9O1xyXG5hLnRvUlRDUnRwSGVhZGVyRXh0ZW5zaW9uUGFyYW1ldGVycz1mdW5jdGlvbihiKXt2YXIgZD1hLmRlZlJUQ1J0cEhlYWRlckV4dGVuc2lvblBhcmFtZXRlcnMoKTtpZihiKXt2YXIgYz1iLmVuY3J5cHRlZDt2b2lkIDAhPWMmJm51bGwhPWMmJihkLmVuY3J5cHRlZD1jKTtiLmlkJiYoZC5pZD1iLmlkKTtiLnVyaSYmKGQudXJpPWIudXJpKX1yZXR1cm4gZH07cmV0dXJuIGF9KCk7YS5SdGNSdHBIZWFkZXJFeHRlbnNpb25QYXJhbWV0ZXJzPWQ7dmFyIHc9ZnVuY3Rpb24oKXtmdW5jdGlvbiBhKCl7fWEuZGVmUnRjUnRjcFBhcmFtZXRlcnM9ZnVuY3Rpb24oKXtyZXR1cm57Y25hbWU6XCJcIixyZWR1Y2VkU2l6ZTohMX19O2EuZGVmUlRDUnRjcFBhcmFtZXRlcnM9ZnVuY3Rpb24oKXtyZXR1cm57fX07YS50b1J0Y1J0Y3BQYXJhbWV0ZXJzPWZ1bmN0aW9uKGIpe3ZhciBkPWEuZGVmUnRjUnRjcFBhcmFtZXRlcnMoKTtiJiYoYi5jbmFtZSYmKGQuY25hbWU9Yi5jbmFtZSksYj1iLnJlZHVjZWRTaXplLFxyXG52b2lkIDAhPWImJm51bGwhPWImJihkLnJlZHVjZWRTaXplPWIpKTtyZXR1cm4gZH07YS50b1JUQ1J0Y3BQYXJhbWV0ZXJzPWZ1bmN0aW9uKGIpe3ZhciBkPWEuZGVmUlRDUnRjcFBhcmFtZXRlcnMoKTtiJiYoYi5jbmFtZSYmKGQuY25hbWU9Yi5jbmFtZSksYj1iLnJlZHVjZWRTaXplLHZvaWQgMCE9YiYmbnVsbCE9YiYmKGQucmVkdWNlZFNpemU9YikpO3JldHVybiBkfTtyZXR1cm4gYX0oKTthLlJ0Y1J0Y3BQYXJhbWV0ZXJzPXc7dmFyIHE9ZnVuY3Rpb24oKXtmdW5jdGlvbiBhKCl7fWEuZGVmUnRjUnRwUGFyYW1ldGVycz1mdW5jdGlvbigpe3JldHVybntjb2RlY3M6W10saGVhZGVyRXh0ZW5zaW9uczpbXSxydGNwOncuZGVmUnRjUnRjcFBhcmFtZXRlcnMoKX19O2EuZGVmUlRDUnRwUGFyYW1ldGVycz1mdW5jdGlvbigpe3JldHVybntjb2RlY3M6W10saGVhZGVyRXh0ZW5zaW9uczpbXSxydGNwOncuZGVmUlRDUnRjcFBhcmFtZXRlcnMoKX19O2EudG9SdGNSdHBQYXJhbWV0ZXJzPWZ1bmN0aW9uKGIpe3ZhciBjPVxyXG5hLmRlZlJ0Y1J0cFBhcmFtZXRlcnMoKTtpZihiKXtpZihiLmNvZGVjcylmb3IodmFyIGc9MCxlPWIuY29kZWNzO2c8ZS5sZW5ndGg7ZysrKWMuY29kZWNzLnB1c2goaC50b1J0Y1J0cENvZGVjUGFyYW1ldGVycyhlW2ddKSk7aWYoYi5oZWFkZXJFeHRlbnNpb25zKWZvcihnPTAsZT1iLmhlYWRlckV4dGVuc2lvbnM7ZzxlLmxlbmd0aDtnKyspYy5oZWFkZXJFeHRlbnNpb25zLnB1c2goZC50b1J0Y1J0cEhlYWRlckV4dGVuc2lvblBhcmFtZXRlcnMoZVtnXSkpO2IucnRjcCYmKGMucnRjcD13LnRvUnRjUnRjcFBhcmFtZXRlcnMoYi5ydGNwKSl9cmV0dXJuIGN9O2EudG9SVENSdHBQYXJhbWV0ZXJzPWZ1bmN0aW9uKGIpe3ZhciBjPWEuZGVmUlRDUnRwUGFyYW1ldGVycygpO2lmKGIpe2lmKGIuY29kZWNzKWZvcih2YXIgZT0wLG49Yi5jb2RlY3M7ZTxuLmxlbmd0aDtlKyspYy5jb2RlY3MucHVzaChoLnRvUlRDUnRwQ29kZWNQYXJhbWV0ZXJzKG5bZV0pKTtpZihiLmhlYWRlckV4dGVuc2lvbnMpZm9yKGU9XHJcbjAsbj1iLmhlYWRlckV4dGVuc2lvbnM7ZTxuLmxlbmd0aDtlKyspYy5oZWFkZXJFeHRlbnNpb25zLnB1c2goZC50b1JUQ1J0cEhlYWRlckV4dGVuc2lvblBhcmFtZXRlcnMobltlXSkpO2IucnRjcCYmKGMucnRjcD13LnRvUnRjUnRjcFBhcmFtZXRlcnMoYi5ydGNwKSl9cmV0dXJuIGN9O3JldHVybiBhfSgpO2EuUnRjUnRwUGFyYW1ldGVycz1xO3ZhciBuPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gYSgpe31hLmRlZlJ0Y1J0cEVuY29kaW5nUGFyYW1ldGVycz1mdW5jdGlvbigpe3JldHVybnthY3RpdmU6ITAscmlkOlwiXCJ9fTthLmRlZlJUQ1J0cEVuY29kaW5nUGFyYW1ldGVycz1mdW5jdGlvbigpe3JldHVybnt9fTthLnRvUnRjUnRwRW5jb2RpbmdQYXJhbWV0ZXJzPWZ1bmN0aW9uKGIpe3ZhciBkPWEuZGVmUnRjUnRwRW5jb2RpbmdQYXJhbWV0ZXJzKCk7aWYoYil7dmFyIGM9Yi5hY3RpdmU7dm9pZCAwIT1jJiZudWxsIT1jJiYoZC5hY3RpdmU9Yyk7Yi5tYXhCaXRyYXRlJiYoZC5tYXhCaXRyYXRlPVxyXG5iLm1heEJpdHJhdGUpO2IubWF4RnJhbWVyYXRlJiYoZC5tYXhGcmFtZXJhdGU9Yi5tYXhGcmFtZXJhdGUpO2Iuc2NhbGVSZXNvbHV0aW9uRG93bkJ5JiYoZC5zY2FsZVJlc29sdXRpb25Eb3duQnk9Yi5zY2FsZVJlc29sdXRpb25Eb3duQnkpO2IucmlkJiYoZC5yaWQ9Yi5yaWQpO2IubmV0d29ya1ByaW9yaXR5JiYoZC5uZXR3b3JrUHJpb3JpdHk9Yi5uZXR3b3JrUHJpb3JpdHkpfXJldHVybiBkfTthLnRvUlRDUnRwRW5jb2RpbmdQYXJhbWV0ZXJzPWZ1bmN0aW9uKGIpe3ZhciBkPWEuZGVmUlRDUnRwRW5jb2RpbmdQYXJhbWV0ZXJzKCk7aWYoYil7dmFyIGM9Yi5hY3RpdmU7dm9pZCAwIT1jJiZudWxsIT1jJiYoZC5hY3RpdmU9Yyk7Yi5tYXhCaXRyYXRlJiYoZC5tYXhCaXRyYXRlPWIubWF4Qml0cmF0ZSk7Yi5tYXhGcmFtZXJhdGUmJihkLm1heEZyYW1lcmF0ZT1iLm1heEZyYW1lcmF0ZSk7Yi5zY2FsZVJlc29sdXRpb25Eb3duQnkmJihkLnNjYWxlUmVzb2x1dGlvbkRvd25CeT1iLnNjYWxlUmVzb2x1dGlvbkRvd25CeSk7XHJcbmIucmlkJiYoZC5yaWQ9Yi5yaWQpO2IubmV0d29ya1ByaW9yaXR5JiYoZC5uZXR3b3JrUHJpb3JpdHk9Yi5uZXR3b3JrUHJpb3JpdHkpfXJldHVybiBkfTtyZXR1cm4gYX0oKTthLlJ0Y1J0cEVuY29kaW5nUGFyYW1ldGVycz1uO2I9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYigpe3JldHVybiBudWxsIT09YSYmYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl8fHRoaXN9ZShiLGEpO2IuZGVmUnRjUnRwU2VuZFBhcmFtZXRlcnM9ZnVuY3Rpb24oKXt2YXIgYT1xLmRlZlJ0Y1J0cFBhcmFtZXRlcnMoKTthLmVuY29kaW5ncz1bXTthLnRyYW5zYWN0aW9uX2lkPVwiXCI7cmV0dXJuIGF9O2IuZGVmUlRDUnRwU2VuZFBhcmFtZXRlcnM9ZnVuY3Rpb24oKXt2YXIgYT1xLmRlZlJUQ1J0cFBhcmFtZXRlcnMoKTthLmVuY29kaW5ncz1bXTthLnRyYW5zYWN0aW9uSWQ9XCJcIjtyZXR1cm4gYX07Yi50b1J0Y1J0cFNlbmRQYXJhbWV0ZXJzPWZ1bmN0aW9uKGEpe2wubG9nZ2VyLmxvZyhcIlJ0Y1J0cFNlbmRQYXJhbWV0ZXJzLnRvUnRjUnRwU2VuZFBhcmFtZXRlcnMoKSBpbiBwYXJhbTpcIitcclxuSlNPTi5zdHJpbmdpZnkoYSkpO3ZhciBkPWIuZGVmUnRjUnRwU2VuZFBhcmFtZXRlcnMoKSxjPXEudG9SdGNSdHBQYXJhbWV0ZXJzKGEpO2MuY29kZWNzLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGQuY29kZWNzLnB1c2goYSl9KTtjLmhlYWRlckV4dGVuc2lvbnMuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gZC5oZWFkZXJFeHRlbnNpb25zLnB1c2goYSl9KTtkLnJ0Y3A9Yy5ydGNwO2lmKGEpe2lmKGEuZW5jb2RpbmdzKWZvcih2YXIgYz0wLGU9YS5lbmNvZGluZ3M7YzxlLmxlbmd0aDtjKyspZC5lbmNvZGluZ3MucHVzaChuLnRvUnRjUnRwRW5jb2RpbmdQYXJhbWV0ZXJzKGVbY10pKTthLnRyYW5zYWN0aW9uSWQmJihkLnRyYW5zYWN0aW9uX2lkPWEudHJhbnNhY3Rpb25JZCl9bC5sb2dnZXIubG9nKFwiUnRjUnRwU2VuZFBhcmFtZXRlcnMudG9SdGNSdHBTZW5kUGFyYW1ldGVycygpIG91dCBwYXJhbTpcIitKU09OLnN0cmluZ2lmeShkKSk7cmV0dXJuIGR9O2IudG9SVENSdHBTZW5kUGFyYW1ldGVycz1cclxuZnVuY3Rpb24oYSl7bC5sb2dnZXIubG9nKFwiUnRjUnRwU2VuZFBhcmFtZXRlcnMudG9SVENSdHBTZW5kUGFyYW1ldGVycygpIGluIHBhcmFtOlwiK0pTT04uc3RyaW5naWZ5KGEpKTt2YXIgZD1iLmRlZlJUQ1J0cFNlbmRQYXJhbWV0ZXJzKCksYz1xLnRvUlRDUnRwUGFyYW1ldGVycyhhKTtjLmNvZGVjcy5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBkLmNvZGVjcy5wdXNoKGEpfSk7Yy5oZWFkZXJFeHRlbnNpb25zLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGQuaGVhZGVyRXh0ZW5zaW9ucy5wdXNoKGEpfSk7ZC5ydGNwPWMucnRjcDtpZihhKXtpZihhLmVuY29kaW5ncylmb3IodmFyIGM9MCxlPWEuZW5jb2RpbmdzO2M8ZS5sZW5ndGg7YysrKWQuZW5jb2RpbmdzLnB1c2gobi50b1JUQ1J0cEVuY29kaW5nUGFyYW1ldGVycyhlW2NdKSk7YS50cmFuc2FjdGlvbl9pZCYmKGQudHJhbnNhY3Rpb25JZD1hLnRyYW5zYWN0aW9uX2lkKX1sLmxvZ2dlci5sb2coXCJSdGNSdHBTZW5kUGFyYW1ldGVycy50b1JUQ1J0cFNlbmRQYXJhbWV0ZXJzKCkgb3V0IHBhcmFtOlwiK1xyXG5KU09OLnN0cmluZ2lmeShkKSk7cmV0dXJuIGR9O3JldHVybiBifShxKTthLlJ0Y1J0cFNlbmRQYXJhbWV0ZXJzPWI7Yj1mdW5jdGlvbihhKXtmdW5jdGlvbiBiKCl7cmV0dXJuIG51bGwhPT1hJiZhLmFwcGx5KHRoaXMsYXJndW1lbnRzKXx8dGhpc31lKGIsYSk7Yi5kZWZSdGNSdHBSZWNlaXZlUGFyYW1ldGVycz1mdW5jdGlvbigpe3JldHVybiBxLmRlZlJ0Y1J0cFBhcmFtZXRlcnMoKX07Yi5kZWZSVENSdHBSZWNlaXZlUGFyYW1ldGVycz1mdW5jdGlvbigpe3JldHVybiBxLmRlZlJUQ1J0cFBhcmFtZXRlcnMoKX07Yi50b1J0Y1J0cFJlY2VpdmVQYXJhbWV0ZXJzPWZ1bmN0aW9uKGEpe2wubG9nZ2VyLmxvZyhcIlJ0Y1J0cFJlY2VpdmVQYXJhbWV0ZXJzLnRvUnRjUnRwUmVjZWl2ZVBhcmFtZXRlcnMoKSBpbiBwYXJhbTpcIitKU09OLnN0cmluZ2lmeShhKSk7YT1xLnRvUnRjUnRwUGFyYW1ldGVycyhhKTtsLmxvZ2dlci5sb2coXCJSdGNSdHBSZWNlaXZlUGFyYW1ldGVycy50b1J0Y1J0cFJlY2VpdmVQYXJhbWV0ZXJzKCkgb3V0IHBhcmFtOlwiK1xyXG5KU09OLnN0cmluZ2lmeShhKSk7cmV0dXJuIGF9O2IudG9SVENSdHBSZWNlaXZlUGFyYW1ldGVycz1mdW5jdGlvbihhKXtsLmxvZ2dlci5sb2coXCJSdGNSdHBSZWNlaXZlUGFyYW1ldGVycy50b1JUQ1J0cFJlY2VpdmVQYXJhbWV0ZXJzKCkgaW4gcGFyYW06XCIrSlNPTi5zdHJpbmdpZnkoYSkpO2E9cS50b1JUQ1J0cFBhcmFtZXRlcnMoYSk7bC5sb2dnZXIubG9nKFwiUnRjUnRwUmVjZWl2ZVBhcmFtZXRlcnMudG9SVENSdHBSZWNlaXZlUGFyYW1ldGVycygpIG91dCBwYXJhbTpcIitKU09OLnN0cmluZ2lmeShhKSk7cmV0dXJuIGF9O3JldHVybiBifShxKTthLlJ0Y1J0cFJlY2VpdmVQYXJhbWV0ZXJzPWJ9LDU4OTpmdW5jdGlvbihiLGEsYyl7dmFyIGU9dGhpcyYmdGhpcy5fX2V4dGVuZHN8fGZ1bmN0aW9uKCl7dmFyIGE9ZnVuY3Rpb24oYixkKXthPU9iamVjdC5zZXRQcm90b3R5cGVPZnx8e19fcHJvdG9fXzpbXX1pbnN0YW5jZW9mIEFycmF5JiZmdW5jdGlvbihhLGIpe2EuX19wcm90b19fPVxyXG5ifXx8ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGQgaW4gYiliLmhhc093blByb3BlcnR5KGQpJiYoYVtkXT1iW2RdKX07cmV0dXJuIGEoYixkKX07cmV0dXJuIGZ1bmN0aW9uKGIsZCl7ZnVuY3Rpb24gYygpe3RoaXMuY29uc3RydWN0b3I9Yn1hKGIsZCk7Yi5wcm90b3R5cGU9bnVsbD09PWQ/T2JqZWN0LmNyZWF0ZShkKTooYy5wcm90b3R5cGU9ZC5wcm90b3R5cGUsbmV3IGMpfX0oKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTthLlJ0cFJlY2VpdmVyPWEuUnRwU2VuZGVyPWEuUnRwU2VuZGVyUmVjZWl2ZXI9YS5EdGxzVHJhbnNwb3J0PWEuSWNlVHJhbnNwb3J0PWEuRHRtZlNlbmRlcj1hLkRUTUZUb25lQ2hhbmdlRXZlbnQ9dm9pZCAwO3ZhciBsPWMoNjU4KSxoPWMoNTUwKSxkPWMoODUxKSx3PWMoMTQ0KSxxPWMoNTE3KSxuPWMoNjUwKSxrPWMoNDg0KSx2PWZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGIoYyxlKXt2YXIgZz1hLmNhbGwodGhpcyxjLFxyXG5oLmNsYXNzX2lkX3QuUlRDRFRNRlRvbmVDaGFuZ2VFdmVudCxlLGwuUHJveHlNb2RlLlJlbW90ZSl8fHRoaXM7ZC5sb2dnZXIubG9nKGcudXNlcl9mcmllbmRseV9pZCgpK1wiLmNvbnN0cnVjdG9yXCIpO3JldHVybiBnfWUoYixhKTtiLnByb3RvdHlwZS5zeW5jQmFycmllcj1mdW5jdGlvbigpe3ZhciBhPXRoaXM7ZC5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLnN5bmNCYXJyaWVyKCkgY2FsbGVkLlwiKTtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24oYixjKXthLnN5bmNCYXJyaWVyRGVlcChiLGMpJiZhLndhaXRVbnRpbENvbm5lY3RlZChhLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5zeW5jQmFycmllclwiKS50aGVuKGZ1bmN0aW9uKCl7UHJvbWlzZS5hbGwoW2EucmVtb3RlSW52b2tlKCExLGgubWV0aG9kX2lkX1JUQ0RUTUZUb25lQ2hhbmdlRXZlbnRfdC50b25lLFwiXCIpLGEucmVtb3RlSW52b2tlKCExLGgubWV0aG9kX2lkX1JUQ0RUTUZUb25lQ2hhbmdlRXZlbnRfdC50b25lX2J1ZmZlcixcclxuXCJcIildKS50aGVuKGZ1bmN0aW9uKGIpe2QubG9nZ2VyLmxvZyhhLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5zeW5jQmFycmllcigpOiBzdWNjZXNzLlwiKTtiPWIubWFwKGZ1bmN0aW9uKGIpe3JldHVybiBhLnBhcmFtMChiKX0pO2EudG9uZT1iWzBdO2EudG9uZV9idWZmZXJfPWJbMV07YS5zeW5jQmFycmllclJlc29sdmUoYSl9KVtcImNhdGNoXCJdKGZ1bmN0aW9uKGIpe2I9YS5sb2dSZW1vdGVJbnZva2VFcnJvcihiLFwiLnByb3Auc3luY0JhcnJpZXIoKSBmYWlsZWQuXCIpO2Euc3luY0JhcnJpZXJSZWplY3QoYil9KX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oYil7Yj1hLmxvZ1JlbW90ZUludm9rZUVycm9yKGIsXCIuc3luY0JhcnJpZXIoKSBmYWlsZWQuXCIpO2Euc3luY0JhcnJpZXJSZWplY3QoYil9KX0pfTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYi5wcm90b3R5cGUsXCJ0b25lX2J1ZmZlclwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50b25lX2J1ZmZlcl99LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSk7XHJcbnJldHVybiBifShsLlByb3h5T2JqZWN0KTthLkRUTUZUb25lQ2hhbmdlRXZlbnQ9djt2YXIgcD1mdW5jdGlvbihhKXtmdW5jdGlvbiBiKGMsZSl7dmFyIGc9YS5jYWxsKHRoaXMsYyxoLmNsYXNzX2lkX3QuUlRDRFRNRlNlbmRlcixlLGwuUHJveHlNb2RlLlJlbW90ZSl8fHRoaXM7ZC5sb2dnZXIubG9nKGcudXNlcl9mcmllbmRseV9pZCgpK1wiLmNvbnN0cnVjdG9yXCIpO2cuY2FuSW5zZXJ0RFRNRj0hMDtnLnRvbmVCdWZmZXJfPVwiXCI7cmV0dXJuIGd9ZShiLGEpO2IucHJvdG90eXBlLmluc2VydERUTUY9ZnVuY3Rpb24oYSxiLGMpe3ZhciBlPXRoaXM7dm9pZCAwPT09YiYmKGI9MTAwKTt2b2lkIDA9PT1jJiYoYz03MCk7ZC5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLmluc2VydERUTUYoKSBjYWxsZWQsIHRvbmVzOiBcIithKTt0aGlzLndhaXRVbnRpbENvbm5lY3RlZChcIkR0bWZTZW5kZXIuaW5zZXJ0RFRNRlwiKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGUucmVtb3RlSW52b2tlKCExLFxyXG5oLm1ldGhvZF9pZF9SVENEVE1GU2VuZGVyX3QuaW5zZXJ0RFRNRixhLGIsYyl9KS50aGVuKGZ1bmN0aW9uKCl7ZC5sb2dnZXIubG9nKGUudXNlcl9mcmllbmRseV9pZCgpK1wiLmluc2VydERUTUYoKSBzdWNjZXNzLCB0b25lczogXCIrYSl9KVtcImNhdGNoXCJdKGZ1bmN0aW9uKGEpe2UubG9nUmVtb3RlSW52b2tlRXJyb3IoYSxcIi5pbnNlcnREVE1GKCkgZmFpbGVkIVwiKX0pfTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYi5wcm90b3R5cGUsXCJvbnRvbmVjaGFuZ2VcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMub250b25lY2hhbmdlX30sc2V0OmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXM7ZC5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLnNldF9vbnRvbmVjaGFuZ2UoKSBjYWxsZWQuXCIpO3RoaXMub250b25lY2hhbmdlXz1hO3RoaXMud2FpdFVudGlsQ29ubmVjdGVkKFwiRHRtZlNlbmRlci5vbnRvbmVjaGFuZ2VcIikudGhlbihmdW5jdGlvbigpe3ZhciBjPWIucmVnaXN0ZXJDYWxsYmFja3MoITEsXHJcbmIuaXNOdWxsQ2FsbGJhY2soYSksaC5tZXRob2RfaWRfUlRDRFRNRlNlbmRlcl90Lm9udG9uZWNoYW5nZSk7Yy50aGVuKGZ1bmN0aW9uKGEpe2QubG9nZ2VyLmxvZyhiLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5vbnRvbmVjaGFuZ2UgY2FsbGJhY2sgcmVjZWl2ZWQhXCIpOyhuZXcgdihiLGIucGFyYW0wKGEpLm9pZCkpLnN5bmNCYXJyaWVyKCkudGhlbihmdW5jdGlvbihhKXtkLmxvZ2dlci5sb2coYi51c2VyX2ZyaWVuZGx5X2lkKCkrXCJ0b25lOiBcIithLnRvbmUrXCIgdG9uZV9idWZmZXI6IFwiK2EudG9uZV9idWZmZXIpO2IudG9uZUJ1ZmZlcl89YS50b25lX2J1ZmZlcjtiLm9udG9uZWNoYW5nZV8oYSl9KVtcImNhdGNoXCJdKGZ1bmN0aW9uKGEpe2IubG9nUmVtb3RlSW52b2tlRXJyb3IoYSxcIi50b25lRXZ0LnN5bmNCYXJyaWVyKCkgZmFpbGVkIVwiKX0pfSk7cmV0dXJuIGIucmVtb3RlSW52b2tlKCEwLGgubWV0aG9kX2lkX1JUQ0RUTUZTZW5kZXJfdC5vbnRvbmVjaGFuZ2UsYy5zdWNjZXNzKX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oYSl7Yi5sb2dSZW1vdGVJbnZva2VFcnJvcihhLFxyXG5cIi5zZXRfb250b25lY2hhbmdlKCkgZmFpbGVkIVwiKX0pfSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShiLnByb3RvdHlwZSxcInRvbmVCdWZmZXJcIix7Z2V0OmZ1bmN0aW9uKCl7ZC5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLnRvbmVCdWZmZXIoKSBjYWxsZWQuXCIpO3JldHVybiB0aGlzLnRvbmVCdWZmZXJffSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pO3JldHVybiBifShsLlByb3h5T2JqZWN0KTthLkR0bWZTZW5kZXI9cDt2YXIgZz1mdW5jdGlvbihhKXtmdW5jdGlvbiBiKGMsZSl7dmFyIGc9YS5jYWxsKHRoaXMsYyxoLmNsYXNzX2lkX3QuUlRDSWNlVHJhbnNwb3J0LGUsbC5Qcm94eU1vZGUuUmVtb3RlKXx8dGhpcztkLmxvZ2dlci5sb2coZy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuY29uc3RydWN0b3JcIik7Zy5zZWxlY3RlZFBhaXI9bnVsbDtnLmxvY2FsQ2FuZGlkYXRlc189W107Zy5yZW1vdGVDYW5kaWRhdGVzXz1cclxuW107cmV0dXJuIGd9ZShiLGEpO2IucHJvdG90eXBlLnN5bmNCYXJyaWVyPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcztkLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuc3luY0JhcnJpZXIoKSBjYWxsZWQuXCIpO3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihjLGUpe2Euc3luY0JhcnJpZXJEZWVwKGMsZSkmJmEud2FpdFVudGlsQ29ubmVjdGVkKFwiSWNlVHJhbnNwb3J0LnN5bmNCYXJyaWVyXCIpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gUHJvbWlzZS5hbGwoW2EucmVtb3RlSW52b2tlKCExLGgubWV0aG9kX2lkX1JUQ0ljZVRyYW5zcG9ydF90LnJvbGUsMCksYS5yZW1vdGVJbnZva2UoITEsaC5tZXRob2RfaWRfUlRDSWNlVHJhbnNwb3J0X3QuY29tcG9uZW50LDApLGEucmVtb3RlSW52b2tlKCExLGgubWV0aG9kX2lkX1JUQ0ljZVRyYW5zcG9ydF90LnN0YXRlLDApLGEucmVtb3RlSW52b2tlKCExLGgubWV0aG9kX2lkX1JUQ0ljZVRyYW5zcG9ydF90LmdhdGhlcmluZ1N0YXRlLFxyXG4wKV0pfSkudGhlbihmdW5jdGlvbihjKXtkLmxvZ2dlci5sb2coYS51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuc3luY0JhcnJpZXIgc3VjY2Vzcy5cIik7dmFyIGU9MCxnPTA7Yz1jLm1hcChmdW5jdGlvbihiKXtyZXR1cm4gYS5wYXJhbTAoYil9KTthLnJvbGVfPWNbMF07YS5jb21wb25lbnRfPWNbMV07ZT1jWzJdO2c9Y1szXTthLnN0YXRlXz1iLmNvbnZlcnRTdGF0ZShlKTthLmdhdGhlcmluZ1N0YXRlXz1iLmNvbnZlcnRHYXRoZXJpbmdTdGF0ZShnKTthLnN5bmNCYXJyaWVyUmVzb2x2ZShhKX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oYil7Yj1hLmxvZ1JlbW90ZUludm9rZUVycm9yKGIsXCIuc3luY0JhcnJpZXIoKSBmYWlsZWQhXCIpO2Euc3luY0JhcnJpZXJSZWplY3QoYil9KX0pfTtiLnByb3RvdHlwZS5zeW5jQ2FuZGlkYXRlcz1mdW5jdGlvbigpe3ZhciBhPXRoaXM7ZC5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLnN5bmNDYW5kaWRhdGVzKCkgY2FsbGVkLlwiKTtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24oYixcclxuYyl7YS53YWl0VW50aWxDb25uZWN0ZWQoXCJJY2VUcmFuc3BvcnQuc3luY0NhbmRpZGF0ZXNcIikudGhlbihmdW5jdGlvbigpe3JldHVybiBQcm9taXNlLmFsbChbYS5yZW1vdGVJbnZva2UoITEsaC5tZXRob2RfaWRfUlRDSWNlVHJhbnNwb3J0X3QubG9jYWxjYW5kaWRhdGVzLFtdKSxhLnJlbW90ZUludm9rZSghMSxoLm1ldGhvZF9pZF9SVENJY2VUcmFuc3BvcnRfdC5yZW1vdGVjYW5kaWRhdGVzLFtdKV0pfSkudGhlbihmdW5jdGlvbihjKXtkLmxvZ2dlci5sb2coYS51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuc3luY0NhbmRpZGF0ZXMgc3VjY2Vzcy5cIik7Yz1jLm1hcChmdW5jdGlvbihiKXtyZXR1cm4gYS5wYXJhbTAoYil9KTthLmxvY2FsQ2FuZGlkYXRlc189Y1swXTthLnJlbW90ZUNhbmRpZGF0ZXNfPWNbMV07YihhKX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oYil7Yj1hLmxvZ1JlbW90ZUludm9rZUVycm9yKGIsXCIuc3luY0NhbmRpZGF0ZXMoKSBmYWlsZWQhXCIpO2MoYil9KX0pfTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYi5wcm90b3R5cGUsXHJcblwicm9sZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5yb2xlX30sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYi5wcm90b3R5cGUsXCJjb21wb25lbnRcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29tcG9uZW50X30sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYi5wcm90b3R5cGUsXCJTdGF0ZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zdGF0ZV99LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFwiZ2F0aGVyaW5nU3RhdGVcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZ2F0aGVyaW5nU3RhdGVffSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShiLnByb3RvdHlwZSxcIm9uc3RhdGVjaGFuZ2VcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMub25zdGF0ZWNoYW5nZV99LFxyXG5zZXQ6ZnVuY3Rpb24oYSl7dmFyIGM9dGhpcztkLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuc2V0X29uc3RhdGVjaGFuZ2UoKSBjYWxsZWQuXCIpO3RoaXMub25zdGF0ZWNoYW5nZV89YTt0aGlzLndhaXRVbnRpbENvbm5lY3RlZChcIkljZVRyYW5zcG9ydC5vbnN0YXRlY2hhbmdlXCIpLnRoZW4oZnVuY3Rpb24oKXt2YXIgZT1jLnJlZ2lzdGVyQ2FsbGJhY2tzKCExLGMuaXNOdWxsQ2FsbGJhY2soYSksaC5tZXRob2RfaWRfUlRDSWNlVHJhbnNwb3J0X3Qub25zdGF0ZWNoYW5nZSk7ZS50aGVuKGZ1bmN0aW9uKGEpe2QubG9nZ2VyLmxvZyhjLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5vbnN0YXRlY2hhbmdlIGNhbGxiYWNrIHJlY2VpdmVkIVwiKTtjLnN5bmNDYW5kaWRhdGVzKCkudGhlbihmdW5jdGlvbihhKXtkLmxvZ2dlci5sb2coYy51c2VyX2ZyaWVuZGx5X2lkKCkrXCJyZWNlaXZlZCB1cGRhdGVkIGljZSBjYW5kaWRhdGVzIVwiKX0pO2Muc3RhdGVfPWIuY29udmVydFN0YXRlKGMucGFyYW0wKGEpKTtcclxuZC5sb2dnZXIubG9nKGMudXNlcl9mcmllbmRseV9pZCgpK1wic3RhdGU6IFwiK2Muc3RhdGVfKTtjLm9uc3RhdGVjaGFuZ2VfKCl9KTtyZXR1cm4gYy5yZW1vdGVJbnZva2UoITAsaC5tZXRob2RfaWRfUlRDSWNlVHJhbnNwb3J0X3Qub25zdGF0ZWNoYW5nZSxlLnN1Y2Nlc3MpfSlbXCJjYXRjaFwiXShmdW5jdGlvbihhKXtjLmxvZ1JlbW90ZUludm9rZUVycm9yKGEsXCIuc2V0X29uc3RhdGVjaGFuZ2UgZmFpbGVkIVwiKX0pfSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShiLnByb3RvdHlwZSxcIm9uZ2F0aGVyaW5nc3RhdGVjaGFuZ2VcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMub25nYXRoZXJpbmdzdGF0ZWNoYW5nZV99LHNldDpmdW5jdGlvbihhKXt2YXIgYz10aGlzO2QubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5zZXRfb25nYXRoZXJpbmdzdGF0ZWNoYW5nZSgpIGNhbGxlZC5cIik7dGhpcy5vbmdhdGhlcmluZ3N0YXRlY2hhbmdlXz1cclxuYTt0aGlzLndhaXRVbnRpbENvbm5lY3RlZChcIkljZVRyYW5zcG9ydC5vbmdhdGhlcmluZ3N0YXRlY2hhbmdlXCIpLnRoZW4oZnVuY3Rpb24oKXt2YXIgZT1jLnJlZ2lzdGVyQ2FsbGJhY2tzKCExLGMuaXNOdWxsQ2FsbGJhY2soYSksaC5tZXRob2RfaWRfUlRDSWNlVHJhbnNwb3J0X3Qub25nYXRoZXJpbmdzdGF0ZWNoYW5nZSk7ZS50aGVuKGZ1bmN0aW9uKGEpe2QubG9nZ2VyLmxvZyhjLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5vbmdhdGhlcmluZ3N0YXRlY2hhbmdlIGNhbGxiYWNrIHJlY2VpdmVkIVwiKTtjLnN5bmNDYW5kaWRhdGVzKCkudGhlbihmdW5jdGlvbihhKXtkLmxvZ2dlci5sb2coYy51c2VyX2ZyaWVuZGx5X2lkKCkrXCJyZWNlaXZlZCB1cGRhdGVkIGljZSBjYW5kaWRhdGVzIVwiKX0pO2MuZ2F0aGVyaW5nU3RhdGVfPWIuY29udmVydEdhdGhlcmluZ1N0YXRlKGMucGFyYW0wKGEpKTtkLmxvZ2dlci5sb2coYy51c2VyX2ZyaWVuZGx5X2lkKCkrXCJnYXRoZXJpbmdTdGF0ZTogXCIrYy5nYXRoZXJpbmdTdGF0ZV8pO1xyXG5jLm9uZ2F0aGVyaW5nc3RhdGVjaGFuZ2VfKCl9KTtyZXR1cm4gYy5yZW1vdGVJbnZva2UoITAsaC5tZXRob2RfaWRfUlRDSWNlVHJhbnNwb3J0X3Qub25nYXRoZXJpbmdzdGF0ZWNoYW5nZSxlLnN1Y2Nlc3MpfSlbXCJjYXRjaFwiXShmdW5jdGlvbihhKXtjLmxvZ1JlbW90ZUludm9rZUVycm9yKGEsXCIuc2V0X29uZ2F0aGVyaW5nc3RhdGVjaGFuZ2UgZmFpbGVkIVwiKX0pfSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShiLnByb3RvdHlwZSxcIm9uc2VsZWN0ZWRjYW5kaWRhdGVwYWlyY2hhbmdlXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLm9uc2VsZWN0ZWRjYW5kaWRhdGVwYWlyY2hhbmdlX30sc2V0OmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXM7ZC5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLnNldF9vbnNlbGVjdGVkY2FuZGlkYXRlcGFpcmNoYW5nZSgpIGNhbGxlZC5cIik7dGhpcy5vbnNlbGVjdGVkY2FuZGlkYXRlcGFpcmNoYW5nZV89XHJcbmE7dGhpcy53YWl0VW50aWxDb25uZWN0ZWQoXCJJY2VUcmFuc3BvcnQub25zZWxlY3RlZGNhbmRpZGF0ZXBhaXJjaGFuZ2VcIikudGhlbihmdW5jdGlvbigpe3ZhciBjPWIucmVnaXN0ZXJDYWxsYmFja3MoITEsYi5pc051bGxDYWxsYmFjayhhKSxoLm1ldGhvZF9pZF9SVENJY2VUcmFuc3BvcnRfdC5vbnNlbGVjdGVkY2FuZGlkYXRlcGFpcmNoYW5nZSk7Yy50aGVuKGZ1bmN0aW9uKGEpe2QubG9nZ2VyLmxvZyhiLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5vbnNlbGVjdGVkY2FuZGlkYXRlcGFpcmNoYW5nZSBjYWxsYmFjayByZWNlaXZlZCFcIik7Yi5zeW5jQ2FuZGlkYXRlcygpLnRoZW4oZnVuY3Rpb24oYSl7ZC5sb2dnZXIubG9nKGIudXNlcl9mcmllbmRseV9pZCgpK1wicmVjZWl2ZWQgdXBkYXRlZCBpY2UgY2FuZGlkYXRlcyFcIil9KTtiLnNlbGVjdGVkUGFpcj1iLnBhcmFtMChhKTtkLmxvZ2dlci5sb2coYi51c2VyX2ZyaWVuZGx5X2lkKCkrXCJzZWxlY3RlZFBhaXI6IFwiK2Iuc2VsZWN0ZWRQYWlyKTtcclxuYi5vbnNlbGVjdGVkY2FuZGlkYXRlcGFpcmNoYW5nZV8oKX0pO3JldHVybiBiLnJlbW90ZUludm9rZSghMCxoLm1ldGhvZF9pZF9SVENJY2VUcmFuc3BvcnRfdC5vbnNlbGVjdGVkY2FuZGlkYXRlcGFpcmNoYW5nZSxjLnN1Y2Nlc3MpfSlbXCJjYXRjaFwiXShmdW5jdGlvbihhKXtiLmxvZ1JlbW90ZUludm9rZUVycm9yKGEsXCIuc2V0X29uc2VsZWN0ZWRjYW5kaWRhdGVwYWlyY2hhbmdlIGZhaWxlZCFcIil9KX0sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KTtiLnByb3RvdHlwZS5nZXRMb2NhbENhbmRpZGF0ZXM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5sb2NhbENhbmRpZGF0ZXNffTtiLnByb3RvdHlwZS5nZXRSZW1vdGVDYW5kaWRhdGVzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmVtb3RlQ2FuZGlkYXRlc199O2IucHJvdG90eXBlLmdldExvY2FsUGFyYW1ldGVycz1mdW5jdGlvbigpe3JldHVybiBudWxsfTtiLnByb3RvdHlwZS5nZXRSZW1vdGVQYXJhbWV0ZXJzPWZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9O1xyXG5iLnByb3RvdHlwZS5nZXRTZWxlY3RlZENhbmRpZGF0ZVBhaXI9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zZWxlY3RlZFBhaXJ9O2IuY29udmVydFN0YXRlPWZ1bmN0aW9uKGEpe3JldHVybiAwPT1hP1wibmV3XCI6MT09YT9cImNoZWNraW5nXCI6Mj09YT9cImNvbm5lY3RlZFwiOjM9PWE/XCJjb21wbGV0ZWRcIjo0PT1hP1wiZmFpbGVkXCI6NT09YT9cImRpc2Nvbm5lY3RlZFwiOlwiY2xvc2VkXCJ9O2IuY29udmVydEdhdGhlcmluZ1N0YXRlPWZ1bmN0aW9uKGEpe3JldHVybiAwPT1hP1wibmV3XCI6MT09YT9cImdhdGhlcmluZ1wiOlwiY29tcGxldGVcIn07cmV0dXJuIGJ9KGwuUHJveHlPYmplY3QpO2EuSWNlVHJhbnNwb3J0PWc7dmFyIEI7KGZ1bmN0aW9uKGEpe2FbYVtcIm5ld1wiXT0wXT1cIm5ld1wiO2FbYS5jb25uZWN0aW5nPTFdPVwiY29ubmVjdGluZ1wiO2FbYS5jb25uZWN0ZWQ9Ml09XCJjb25uZWN0ZWRcIjthW2EuY2xvc2VkPTNdPVwiY2xvc2VkXCI7YVthLmZhaWxlZD00XT1cImZhaWxlZFwiO2FbYS5tYXg9NV09XCJtYXhcIn0pKEJ8fFxyXG4oQj17fSkpO3ZhciB0PWZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGIoYyxlKXt2YXIgZz1hLmNhbGwodGhpcyxjLGguY2xhc3NfaWRfdC5SVENEdGxzVHJhbnNwb3J0LGUsbC5Qcm94eU1vZGUuUmVtb3RlKXx8dGhpcztkLmxvZ2dlci5sb2coZy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuY29uc3RydWN0b3JcIik7Zy5zdGF0ZV89XCJuZXdcIjtnLnRyYW5zcG9ydF89bnVsbDtnLnJlbW90ZUNlcnRpZmljYXRlc189W107cmV0dXJuIGd9ZShiLGEpO2IucHJvdG90eXBlLmR1bXBJbmZvPWZ1bmN0aW9uKCl7ZC5sb2dnZXIubG9nKFwiRHRsc1RyYW5zcG9ydFtcIit0aGlzLm9iamVjdF9pZCgpK1wiXS5kdW1wSW5mbygpOlwiKTtkLmxvZ2dlci5sb2coXCIgICAgLSBzdGF0ZTpcIit0aGlzLnN0YXRlXyk7ZC5sb2dnZXIubG9nKFwiICAgIC0gdHJhbnNwb3J0OlwiK3RoaXMudHJhbnNwb3J0Xyl9O2IucHJvdG90eXBlLnN5bmNCYXJyaWVyPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcztkLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXHJcblwiLnN5bmNCYXJyaWVyKCkgY2FsbGVkLlwiKTtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24oYyxlKXthLnN5bmNCYXJyaWVyRGVlcChjLGUpJiZhLndhaXRVbnRpbENvbm5lY3RlZChcIkR0bHNUcmFuc3BvcnQuc3luY0JhcnJpZXJcIikudGhlbihmdW5jdGlvbigpe3JldHVybiBQcm9taXNlLmFsbChbYS5yZW1vdGVJbnZva2UoITEsaC5tZXRob2RfaWRfUlRDRHRsc1RyYW5zcG9ydF90LnRyYW5zcG9ydCx7fSksYS5yZW1vdGVJbnZva2UoITEsaC5tZXRob2RfaWRfUlRDRHRsc1RyYW5zcG9ydF90LnN0YXRlLDApLGEucmVtb3RlSW52b2tlKCExLGgubWV0aG9kX2lkX1JUQ0R0bHNUcmFuc3BvcnRfdC5nZXRSZW1vdGVDZXJ0aWZpY2F0ZXMpXSl9KS50aGVuKGZ1bmN0aW9uKGMpe3ZhciBlO2QubG9nZ2VyLmxvZyhhLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5zeW5jQmFycmllciByZW1vdGUgc3VjY2Vzcy5cIik7dmFyIGg7ZT1jLm1hcChmdW5jdGlvbihiKXtyZXR1cm4gYS5wYXJhbTAoYil9KTtcclxuYz1lWzBdO2g9ZVsxXTthLnJlbW90ZUNlcnRpZmljYXRlc189ZVsyXTthLnN0YXRlXz1iLmNvbnZlcnRTdGF0ZShoKTtlPVtdO2lmKHZvaWQgMCE9YyYmMD09Yy5pc19udWxsKXtoPWEudHJhbnNwb3J0XztpZihudWxsPT09YS50cmFuc3BvcnRffHxhLnRyYW5zcG9ydF8ub2JqZWN0X2lkKCkhPWMub2lkKWg9bmV3IGcoYSxjLm9pZCk7ZS5wdXNoKGguc3luY0JhcnJpZXIoKSl9ZWxzZSBlLnB1c2goUHJvbWlzZS5yZXNvbHZlKG51bGwpKTtQcm9taXNlLmFsbChlKS50aGVuKGZ1bmN0aW9uKGIpe2QubG9nZ2VyLmxvZyhhLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5zeW5jQmFycmllciBzdWNjZXNzXCIpO2EudHJhbnNwb3J0Xz1iWzBdO2Euc3luY0JhcnJpZXJSZXNvbHZlKGEpfSlbXCJjYXRjaFwiXShmdW5jdGlvbihiKXtiPWEubG9nUmVtb3RlSW52b2tlRXJyb3IoYixcIi5wcm9wLnN5bmNCYXJyaWVyIGZhaWxlZCFcIik7YS5zeW5jQmFycmllclJlamVjdChiKX0pfSlbXCJjYXRjaFwiXShmdW5jdGlvbihiKXtiPVxyXG5hLmxvZ1JlbW90ZUludm9rZUVycm9yKGIsXCIuc3luY0JhcnJpZXIgZmFpbGVkIVwiKTthLnN5bmNCYXJyaWVyUmVqZWN0KGIpfSl9KX07T2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFwidHJhbnNwb3J0XCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnRyYW5zcG9ydF99LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFwic3RhdGVcIix7Z2V0OmZ1bmN0aW9uKCl7ZC5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLmdldF9zdGF0ZSgpIGNhbGxlZDogXCIrdGhpcy5zdGF0ZV8pO3JldHVybiB0aGlzLnN0YXRlX30sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KTtiLnByb3RvdHlwZS5nZXRSZW1vdGVDZXJ0aWZpY2F0ZXM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5yZW1vdGVDZXJ0aWZpY2F0ZXNffTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYi5wcm90b3R5cGUsXCJvbnN0YXRlY2hhbmdlXCIsXHJcbntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5vbnN0YXRlY2hhbmdlX30sc2V0OmZ1bmN0aW9uKGEpe3ZhciBjPXRoaXM7ZC5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLnNldF9vbnN0YXRlY2hhbmdlKCkgY2FsbGVkLlwiKTt0aGlzLm9uc3RhdGVjaGFuZ2VfPWE7dGhpcy53YWl0VW50aWxDb25uZWN0ZWQoXCJEdGxzVHJhbnNwb3J0Lm9uc3RhdGVjaGFuZ2VcIikudGhlbihmdW5jdGlvbigpe3ZhciBlPWMucmVnaXN0ZXJDYWxsYmFja3MoITEsYy5pc051bGxDYWxsYmFjayhhKSxoLm1ldGhvZF9pZF9SVENEdGxzVHJhbnNwb3J0X3Qub25zdGF0ZWNoYW5nZSk7ZS50aGVuKGZ1bmN0aW9uKGEpe2QubG9nZ2VyLmxvZyhjLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5vbnN0YXRlY2hhbmdlIGNhbGxiYWNrIHJlY2VpdmVkIVwiKTtjLnN0YXRlXz1iLmNvbnZlcnRTdGF0ZShjLnBhcmFtMChhKSk7ZC5sb2dnZXIubG9nKGMudXNlcl9mcmllbmRseV9pZCgpK1wic3RhdGVfOiBcIitjLnN0YXRlXyk7XHJcbmMub25zdGF0ZWNoYW5nZV8oKX0pO3JldHVybiBjLnJlbW90ZUludm9rZSghMCxoLm1ldGhvZF9pZF9SVENEdGxzVHJhbnNwb3J0X3Qub25zdGF0ZWNoYW5nZSxlLnN1Y2Nlc3MpfSlbXCJjYXRjaFwiXShmdW5jdGlvbihhKXtjLmxvZ1JlbW90ZUludm9rZUVycm9yKGEsXCIuc2V0X29uc3RhdGVjaGFuZ2UgZmFpbGVkIVwiKX0pfSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShiLnByb3RvdHlwZSxcIm9uZXJyb3JcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMub25lcnJvcl99LHNldDpmdW5jdGlvbihhKXt2YXIgYj10aGlzO2QubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5zZXRfb25lcnJvcigpIGNhbGxlZC5cIik7dGhpcy5vbmVycm9yXz1hO3RoaXMud2FpdFVudGlsQ29ubmVjdGVkKFwiRHRsc1RyYW5zcG9ydC5vbmVycm9yXCIpLnRoZW4oZnVuY3Rpb24oKXt2YXIgYz1iLnJlZ2lzdGVyQ2FsbGJhY2tzKCExLGIuaXNOdWxsQ2FsbGJhY2soYSksXHJcbmgubWV0aG9kX2lkX1JUQ0R0bHNUcmFuc3BvcnRfdC5vbmVycm9yKTtjLnRoZW4oZnVuY3Rpb24oYSl7ZC5sb2dnZXIubG9nKGIudXNlcl9mcmllbmRseV9pZCgpK1wiLm9uZXJyb3IgY2FsbGJhY2sgcmVjZWl2ZWQhXCIpO2E9Yi5wYXJhbTAoYSk7ZC5sb2dnZXIubG9nKGIudXNlcl9mcmllbmRseV9pZCgpK1wiZXJyb3I6IFwiK2EpO2Iub25lcnJvcl8oYSl9KTtyZXR1cm4gYi5yZW1vdGVJbnZva2UoITAsaC5tZXRob2RfaWRfUlRDRHRsc1RyYW5zcG9ydF90Lm9uZXJyb3IsYy5zdWNjZXNzKX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oYSl7Yi5sb2dSZW1vdGVJbnZva2VFcnJvcihhLFwiLnNldF9vbmVycm9yIGZhaWxlZCFcIil9KX0sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KTtiLmNvbnZlcnRTdGF0ZT1mdW5jdGlvbihhKXtyZXR1cm4gYT09QltcIm5ld1wiXT9cIm5ld1wiOmE9PUIuY29ubmVjdGluZz9cImNvbm5lY3RpbmdcIjphPT1CLmNvbm5lY3RlZD9cImNvbm5lY3RlZFwiOmE9PUIuY2xvc2VkP1xyXG5cImNsb3NlZFwiOlwiZmFpbGVkXCJ9O3JldHVybiBifShsLlByb3h5T2JqZWN0KTthLkR0bHNUcmFuc3BvcnQ9dDtiPWZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGIoYyxlLGcsaCl7Yz1hLmNhbGwodGhpcyxjLGUsZyxoKXx8dGhpcztkLmxvZ2dlci5sb2coYy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuY29uc3RydWN0b3IgYmFzZVwiKTtjLnRyYWNrXz1udWxsO2MudHJhbnNwb3J0Xz1udWxsO3JldHVybiBjfWUoYixhKTtiLnByb3RvdHlwZS5zeW5jQmFycmllckJhc2U9ZnVuY3Rpb24oKXtkLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuc3luY0JhcnJpZXJCYXNlKCkgY2FsbGVkLlwiKTt2YXIgYT1bXSxiLGM7dGhpcyBpbnN0YW5jZW9mIG0/KGI9aC5tZXRob2RfaWRfUlRDUnRwU2VuZGVyX3QudHJhY2ssYz1oLm1ldGhvZF9pZF9SVENSdHBTZW5kZXJfdC50cmFuc3BvcnQpOnRoaXMgaW5zdGFuY2VvZiBEJiYoYj1oLm1ldGhvZF9pZF9SVENSdHBSZWNlaXZlcl90LnRyYWNrLGM9aC5tZXRob2RfaWRfUlRDUnRwUmVjZWl2ZXJfdC50cmFuc3BvcnQpO1xyXG5uLlJlbW90ZVNlc3Npb24uaXNGZWF0dXJlUHN0blN1cHBvcnRlZCgpJiZuLlJlbW90ZVNlc3Npb24uaXNGZWF0dXJlRHRtZlN1cHBvcnRlZCgpPyhhLnB1c2godGhpcy5yZW1vdGVJbnZva2UoITEsYix7b2lkOjB9KSksYS5wdXNoKHRoaXMucmVtb3RlSW52b2tlKCExLGMse29pZDowfSkpKTphLnB1c2godGhpcy5yZW1vdGVJbnZva2UoITEsYix7b2lkOjB9KSk7cmV0dXJuIGF9O2IucHJvdG90eXBlLnN5bmNCYXJyaWVyQmFzZVJlc3VsdHM9ZnVuY3Rpb24oYSl7dmFyIGIsYz10aGlzO2I9MDtkLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuc3luY0JhcnJpZXJCYXNlUmVzdWx0c1wiKTt2YXIgZTtuLlJlbW90ZVNlc3Npb24uaXNGZWF0dXJlUHN0blN1cHBvcnRlZCgpJiZuLlJlbW90ZVNlc3Npb24uaXNGZWF0dXJlRHRtZlN1cHBvcnRlZCgpPyhiPWEubWFwKGZ1bmN0aW9uKGEpe3JldHVybiBjLnBhcmFtMChhKX0pLGE9YlswXSxlPWJbMV0sYj0yKTooYT1hLm1hcChmdW5jdGlvbihhKXtyZXR1cm4gYy5wYXJhbTAoYSl9KVswXSxcclxuYj0xKTt2YXIgZz1bXTtpZih2b2lkIDAhPWEmJiExPT09YS5pc19udWxsKXt2YXIgaD10aGlzLnRyYWNrXztudWxsPT09dGhpcy50cmFja198fHRoaXMudHJhY2tfLm9iamVjdF9pZCgpIT1hLm9pZD9oPW5ldyB3LlJlbW90ZU1lZGlhVHJhY2sodGhpcyxhLm9pZCk6dGhpcy50cmFja18uYmluZCh0aGlzLGEub2lkKTtnLnB1c2goaC5zeW5jQmFycmllcigpKX1lbHNlIGcucHVzaChQcm9taXNlLnJlc29sdmUobnVsbCkpO2lmKHZvaWQgMCE9ZSYmITE9PT1lLmlzX251bGwpe2E9dGhpcy50cmFuc3BvcnRfO2lmKG51bGw9PT10aGlzLnRyYW5zcG9ydF98fHRoaXMudHJhbnNwb3J0Xy5vYmplY3RfaWQoKSE9ZS5vaWQpYT1uZXcgdCh0aGlzLGUub2lkKTtnLnB1c2goYS5zeW5jQmFycmllcigpKX1lbHNlIGcucHVzaChQcm9taXNlLnJlc29sdmUobnVsbCkpO3JldHVybltiLGddfTtiLnByb3RvdHlwZS5zeW5jQmFycmllckJhc2VSZXN1bHRzV2l0aEFsbFByb21pc2VzRnVsRmlsbGVkPWZ1bmN0aW9uKGEpe3RoaXMudHJhY2tfPVxyXG5hWzBdO3RoaXMudHJhbnNwb3J0Xz1hWzFdfTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYi5wcm90b3R5cGUsXCJ0cmFuc3BvcnRcIix7Z2V0OmZ1bmN0aW9uKCl7ZC5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLmdldCB0cmFuc3BvcnQoKSBjYWxsZWQuXCIpO3JldHVybiB0aGlzLnRyYW5zcG9ydF99LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFwicnRjcFRyYW5zcG9ydFwiLHtnZXQ6ZnVuY3Rpb24oKXtkLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuZ2V0IHJ0Y3BUcmFuc3BvcnQoKSBjYWxsZWQuXCIpO3JldHVybiB0aGlzLnRyYW5zcG9ydF99LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFwidHJhY2tcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudHJhY2tffSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pO1xyXG5iLnByb3RvdHlwZS5yZWluaXRUcmFjaz1mdW5jdGlvbihhKXt0aGlzLnRyYWNrXz1hfTtiLnByb3RvdHlwZS5nZXRTdGF0cz1mdW5jdGlvbigpe2QubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5nZXRTdGF0cygpIGNhbGxlZC5cIik7dmFyIGE9dGhpcztyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24oYixjKXthLmlzUmVkaXJlY3RlZCgpP2Eud2FpdFVudGlsQ29ubmVjdGVkKFwiUnRwUmVjZWl2ZXIuZ2V0U3RhdHNcIikudGhlbihmdW5jdGlvbigpe2lmKG4uUmVtb3RlU2Vzc2lvbi5pc0ZlYXR1cmVTZW5kZXJTdGF0c0ZpeFN1cHBvcnRlZCgpKXt2YXIgZDthIGluc3RhbmNlb2YgbT9kPWgubWV0aG9kX2lkX1JUQ1J0cFNlbmRlcl90LmdldFN0YXRzOmEgaW5zdGFuY2VvZiBEJiYoZD1oLm1ldGhvZF9pZF9SVENSdHBSZWNlaXZlcl90LmdldFN0YXRzKTt2YXIgYz1hLnJlZ2lzdGVyQ2FsbGJhY2tzKCEwLCExLGQpO2MudGhlbihmdW5jdGlvbihhKXt2b2lkIDA9PT1hLnBhcmFtc3x8XHJcbjA9PT1hLnBhcmFtcy5sZW5ndGh8fDA9PT1hLnBhcmFtc1swXS5sZW5ndGg/YigpOmIocS5TdGF0c1JlcG9ydC5mcm9tSlNPTihKU09OLnBhcnNlKGEucGFyYW1zWzBdKSkpfSk7cmV0dXJuIGEucmVtb3RlSW52b2tlKCExLGQsYy5zdWNjZXNzKX1iKCl9KVtcImNhdGNoXCJdKGZ1bmN0aW9uKGIpe2I9YS5sb2dSZW1vdGVJbnZva2VFcnJvcihiLFwiLmdldFN0YXRzKCkgZmFpbGVkIVwiKTtjKGIpfSk6KGQubG9nZ2VyLmxvZyhhLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5nZXRTdGF0cygpOiBub3QgaW4gYWN0aXZlIHJlZGlyZWN0aW9uIVwiKSxiKCkpfSl9O3JldHVybiBifShsLlByb3h5T2JqZWN0KTthLlJ0cFNlbmRlclJlY2VpdmVyPWI7dmFyIG09ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYihjLGUsZyxtKXtjPWEuY2FsbCh0aGlzLGMsaC5jbGFzc19pZF90LlJUQ1J0cFNlbmRlcixlLGcpfHx0aGlzO2QubG9nZ2VyLmxvZyhjLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5jb25zdHJ1Y3RvclwiKTtjLmR0bWZfPVxyXG5udWxsO2MucGFyYW1zXz1rLlJ0Y1J0cFNlbmRQYXJhbWV0ZXJzLmRlZlJ0Y1J0cFNlbmRQYXJhbWV0ZXJzKCk7Yy51bmlmaWVkXz1tO3JldHVybiBjfWUoYixhKTtiLnByb3RvdHlwZS5kdW1wSW5mbz1mdW5jdGlvbigpe2QubG9nZ2VyLmxvZyhcIlJ0cFNlbmRlcltcIit0aGlzLm9iamVjdF9pZCgpK1wiXS5kdW1wSW5mbygpOlwiKTt0aGlzLnRyYWNrJiZ0aGlzLnRyYWNrLmR1bXBJbmZvKCl9O2IucHJvdG90eXBlLnN5bmNCYXJyaWVyPWZ1bmN0aW9uKCl7dmFyIGI9dGhpcztkLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuc3luY0JhcnJpZXIoKSBjYWxsZWQuXCIpO3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihjLGUpe2Iuc3luY0JhcnJpZXJEZWVwKGMsZSkmJmIud2FpdFVudGlsQ29ubmVjdGVkKFwiUnRwU2VuZGVyLnN5bmNCYXJyaWVyXCIpLnRoZW4oZnVuY3Rpb24oKXt2YXIgYz1hLnByb3RvdHlwZS5zeW5jQmFycmllckJhc2UuY2FsbChiKTtuLlJlbW90ZVNlc3Npb24uaXNGZWF0dXJlUHN0blN1cHBvcnRlZCgpJiZcclxubi5SZW1vdGVTZXNzaW9uLmlzRmVhdHVyZUR0bWZTdXBwb3J0ZWQoKSYmKGMucHVzaChiLnJlbW90ZUludm9rZSghMSxoLm1ldGhvZF9pZF9SVENSdHBTZW5kZXJfdC5kdG1mLHtvaWQ6MH0pKSxjLnB1c2goYi5yZW1vdGVJbnZva2UoITEsaC5tZXRob2RfaWRfUlRDUnRwU2VuZGVyX3QuZ2V0UGFyYW1ldGVycykpKTtyZXR1cm4gUHJvbWlzZS5hbGwoYyl9KS50aGVuKGZ1bmN0aW9uKGEpe3ZhciBjLGU7Yz1iLnN5bmNCYXJyaWVyQmFzZVJlc3VsdHMoYSk7ZT1jWzBdO2M9Y1sxXTthPWEuc2xpY2UoZSkubWFwKGZ1bmN0aW9uKGEpe3JldHVybiBiLnBhcmFtMChhKX0pO2U9YVswXTtiLnBhcmFtc189YVsxXTt2b2lkIDA9PWV8fCExIT09ZS5pc19udWxsfHxudWxsIT09Yi5kdG1mXyYmYi5kdG1mXy5vYmplY3RfaWQoKT09ZS5vaWR8fChiLmR0bWZfPW5ldyBwKGIsZS5vaWQpKTtQcm9taXNlLmFsbChjKS50aGVuKGZ1bmN0aW9uKGEpe2Iuc3luY0JhcnJpZXJCYXNlUmVzdWx0c1dpdGhBbGxQcm9taXNlc0Z1bEZpbGxlZChhKTtcclxuZC5sb2dnZXIubG9nKGIudXNlcl9mcmllbmRseV9pZCgpK1wiLnN5bmNCYXJyaWVyQmFzZSBzdWNjZXNzLlwiKTtiLnN5bmNCYXJyaWVyUmVzb2x2ZShiKX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oYSl7YT1iLmxvZ1JlbW90ZUludm9rZUVycm9yKGEsXCIuc3luY0JhcnJpZXIoKSBwcm9taXNlc19iYXNlIGZhaWxlZCFcIik7Yi5zeW5jQmFycmllclJlamVjdChhKX0pfSlbXCJjYXRjaFwiXShmdW5jdGlvbihhKXthPWIubG9nUmVtb3RlSW52b2tlRXJyb3IoYSxcIi5zeW5jQmFycmllciBmYWlsZWQhXCIpO2Iuc3luY0JhcnJpZXJSZWplY3QoYSl9KX0pfTtiLmdldENhcGFiaWxpdGllcz1mdW5jdGlvbihhKXtkLmxvZ2dlci5sb2codGhpcy5jb25zdHJ1Y3Rvci5uYW1lK1wiLmdldENhcGFiaWxpdGllcygpIGNhbGxlZC5cIik7cmV0dXJuIHcuTmF2aWdhdG9yVXNlck1lZGlhLmdldENhcGFiaWxpdGllcyhhKX07T2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFwiZHRtZlwiLHtnZXQ6ZnVuY3Rpb24oKXtkLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXHJcblwiLmdldCBkdG1mKCkgY2FsbGVkLlwiKTtyZXR1cm4gdGhpcy5kdG1mX30sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KTtiLnByb3RvdHlwZS5zZXRQYXJhbWV0ZXJzPWZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLnNldFBhcmFtZXRlcnNBc3luYyhhKX07Yi5wcm90b3R5cGUuc2V0UGFyYW1ldGVyc0FzeW5jPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXM7ZC5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLnNldFBhcmFtZXRlcnNBc3luYygpIGNhbGxlZC5cIik7cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKGMsZSl7Yi53YWl0VW50aWxDb25uZWN0ZWQoXCJSdHBTZW5kZXIuc2V0UGFyYW1ldGVyc0FzeW5jXCIpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gUHJvbWlzZS5hbGwoW2IucmVtb3RlSW52b2tlKCExLGgubWV0aG9kX2lkX1JUQ1J0cFNlbmRlcl90LnNldFBhcmFtZXRlcnMsay5SdGNSdHBTZW5kUGFyYW1ldGVycy50b1J0Y1J0cFNlbmRQYXJhbWV0ZXJzKGEpKV0pfSkudGhlbihmdW5jdGlvbihlKXtkLmxvZ2dlci5sb2coYi51c2VyX2ZyaWVuZGx5X2lkKCkrXHJcblwiLnNldFBhcmFtZXRlcnNBc3luYygpOiBzdWNjZXNzLlwiKTtjKCk7Yi5wYXJhbXNfPWsuUnRjUnRwU2VuZFBhcmFtZXRlcnMudG9SdGNSdHBTZW5kUGFyYW1ldGVycyhhKX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oYSl7YT1iLmxvZ1JlbW90ZUludm9rZUVycm9yKGEsXCIuc2V0UGFyYW1ldGVyc0FzeW5jKCkgZmFpbGVkIVwiKTtlKGEpfSl9KX07Yi5wcm90b3R5cGUuZ2V0UGFyYW1ldGVycz1mdW5jdGlvbigpe2QubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5nZXRQYXJhbWV0ZXJzKCkgY2FsbGVkLlwiKTtyZXR1cm4gdGhpcy5nZXRQYXJhbWV0ZXJzSW50ZXJuYWwoITEpfTtiLnByb3RvdHlwZS5nZXRQYXJhbWV0ZXJzQXN5bmM9ZnVuY3Rpb24oKXtkLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuZ2V0UGFyYW1ldGVyc0FzeW5jKCkgY2FsbGVkLlwiKTtyZXR1cm4gdGhpcy5nZXRQYXJhbWV0ZXJzSW50ZXJuYWwoITApfTtiLnByb3RvdHlwZS5nZXRQYXJhbWV0ZXJzSW50ZXJuYWw9XHJcbmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMsYz1uZXcgUHJvbWlzZShmdW5jdGlvbihhLGMpe2Iud2FpdFVudGlsQ29ubmVjdGVkKGIudXNlcl9mcmllbmRseV9pZCgpK1wiLmdldFBhcmFtZXRlcnNJbnRlcm5hbFwiKS50aGVuKGZ1bmN0aW9uKCl7ZC5sb2dnZXIubG9nKGIudXNlcl9mcmllbmRseV9pZCgpK1wiLmdldFBhcmFtZXRlcnNJbnRlcm5hbCgpIHJlbW90ZSBpbnZva2luZ1wiKTtyZXR1cm4gYi5yZW1vdGVJbnZva2UoITEsaC5tZXRob2RfaWRfUlRDUnRwU2VuZGVyX3QuZ2V0UGFyYW1ldGVycyl9KS50aGVuKGZ1bmN0aW9uKGMpe2IucGFyYW1zXz1iLnBhcmFtMChjKTtkLmxvZ2dlci5sb2coYi51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuZ2V0UGFyYW1ldGVyc0ludGVybmFsKCkgc3VjY2VzcyByZXR1cm5pbmc6IFwiK2IucGFyYW1zXyk7YShrLlJ0Y1J0cFNlbmRQYXJhbWV0ZXJzLnRvUlRDUnRwU2VuZFBhcmFtZXRlcnMoYi5wYXJhbXNfKSl9KVtcImNhdGNoXCJdKGZ1bmN0aW9uKGEpe2E9Yi5sb2dSZW1vdGVJbnZva2VFcnJvcihhLFxyXG5cIi5nZXRQYXJhbWV0ZXJzSW50ZXJuYWwoKSBmYWlsZWQhXCIpO2MoYSl9KX0pO2lmKGEpcmV0dXJuIGM7ZC5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLmdldFBhcmFtZXRlcnNJbnRlcm5hbCgpIHJldHVybmluZzogXCIrdGhpcy5wYXJhbXNfKTtyZXR1cm4gay5SdGNSdHBTZW5kUGFyYW1ldGVycy50b1JUQ1J0cFNlbmRQYXJhbWV0ZXJzKHRoaXMucGFyYW1zXyl9O2IucHJvdG90eXBlLnJlcGxhY2VUcmFjaz1mdW5jdGlvbihhKXt2YXIgYj10aGlzO2QubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5yZXBsYWNlVHJhY2soKSBjYWxsZWQuIGN1cnJlbnQgdHJhY2s6XCIrKHRoaXMudHJhY2tfP3RoaXMudHJhY2tfLm9iamVjdF9pZCgpOlwibnVsbFwiKStcIiB3aXRoIHRyYWNrPVwiKyhhP2Eub2JqZWN0X2lkKCk6XCJudWxsXCIpKTtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24oYyxlKXtiLndhaXRVbnRpbENvbm5lY3RlZChcIlJ0cFNlbmRlci5yZXBsYWNlVHJhY2tcIikudGhlbihmdW5jdGlvbigpe3JldHVybiBhfHxcclxubi5SZW1vdGVTZXNzaW9uLmlzRmVhdHVyZVdlYnJ0YzFkb3QwU3VwcG9ydGVkKCk/YT9iLnJlbW90ZUludm9rZUV4KCExLGgubWV0aG9kX2lkX1JUQ1J0cFNlbmRlcl90LnJlcGxhY2VUcmFjayxbYV0pOmIucmVtb3RlSW52b2tlKCExLGgubWV0aG9kX2lkX1JUQ1J0cFNlbmRlcl90LnJlcGxhY2VUcmFjayx7b2lkOi0xfSk6UHJvbWlzZS5yZWplY3QobmV3IERPTUV4Y2VwdGlvbihcIkRvZXMgbm90IHN1cHBvcnQgcmVwbGFjZSB0cmFjayB3aXRoIG51bGwgaW4gbm9uLVVuaWZpZWQgU0RQIHNlbWFudGljIVwiKSl9KS50aGVuKGZ1bmN0aW9uKGUpe2QubG9nZ2VyLmxvZyhiLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5yZXBsYWNlVHJhY2soKTogc3VjY2Vzcy5cIik7YygpO2IucmVpbml0VHJhY2soYSl9KVtcImNhdGNoXCJdKGZ1bmN0aW9uKGEpe2E9Yi5sb2dSZW1vdGVJbnZva2VFcnJvcihhLFwiLnJlcGxhY2VUcmFjaygpIGZhaWxlZCFcIik7ZShhKX0pfSl9O3JldHVybiBifShiKTthLlJ0cFNlbmRlcj1cclxubTt2YXIgRD1mdW5jdGlvbihhKXtmdW5jdGlvbiBiKGMsZSxnLG0seCl7Yz1hLmNhbGwodGhpcyxjLGguY2xhc3NfaWRfdC5SVENSdHBSZWNlaXZlcixlLGcpfHx0aGlzO2QubG9nZ2VyLmxvZyhjLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5jb25zdHJ1Y3RvclwiKTtjLmNvbnRyaWJzb3VyY2VzXz1bXTtjLnN5bmNzb3VyY2VzXz1bXTtjLnBhcmFtc189ay5SdGNSdHBQYXJhbWV0ZXJzLmRlZlJ0Y1J0cFBhcmFtZXRlcnMoKTtjLnVuaWZpZWRfPW07eCYmKGMudHJhY2tfPXgpO3JldHVybiBjfWUoYixhKTtiLnByb3RvdHlwZS5kdW1wSW5mbz1mdW5jdGlvbigpe2QubG9nZ2VyLmxvZyhcIlJ0cFJlY2VpdmVyW1wiK3RoaXMub2JqZWN0X2lkKCkrXCJdLmR1bXBJbmZvKCk6XCIpO3RoaXMudHJhY2smJnRoaXMudHJhY2suZHVtcEluZm8oKTt0aGlzLnRyYW5zcG9ydCYmdGhpcy50cmFuc3BvcnQuZHVtcEluZm8oKX07Yi5wcm90b3R5cGUuc3luY0JhcnJpZXI9ZnVuY3Rpb24oKXt2YXIgYj10aGlzO2QubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcclxuXCIuc3luY0JhcnJpZXIoKSBjYWxsZWQuXCIpO3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihjLGUpe2Iuc3luY0JhcnJpZXJEZWVwKGMsZSkmJmIud2FpdFVudGlsQ29ubmVjdGVkKFwiUnRwUmVjZWl2ZXIuc3luY0JhcnJpZXJcIikudGhlbihmdW5jdGlvbigpe3ZhciBjPWEucHJvdG90eXBlLnN5bmNCYXJyaWVyQmFzZS5jYWxsKGIpO24uUmVtb3RlU2Vzc2lvbi5pc0ZlYXR1cmVQc3RuU3VwcG9ydGVkKCkmJm4uUmVtb3RlU2Vzc2lvbi5pc0ZlYXR1cmVEdG1mU3VwcG9ydGVkKCk/KGMucHVzaChiLnJlbW90ZUludm9rZSghMSxoLm1ldGhvZF9pZF9SVENSdHBSZWNlaXZlcl90LmdldENvbnRyaWJ1dGluZ1NvdXJjZXMpKSxjLnB1c2goYi5yZW1vdGVJbnZva2UoITEsaC5tZXRob2RfaWRfUlRDUnRwUmVjZWl2ZXJfdC5nZXRTeW5jaHJvbml6YXRpb25Tb3VyY2VzKSksYy5wdXNoKGIucmVtb3RlSW52b2tlKCExLGgubWV0aG9kX2lkX1JUQ1J0cFJlY2VpdmVyX3QuZ2V0UGFyYW1ldGVycykpKTpcclxuYy5wdXNoKGIucmVtb3RlSW52b2tlKCExLGgubWV0aG9kX2lkX1JUQ1J0cFJlY2VpdmVyX3QuZ2V0Q29udHJpYnV0aW5nU291cmNlcykpO3JldHVybiBQcm9taXNlLmFsbChjKX0pLnRoZW4oZnVuY3Rpb24oYSl7dmFyIGMsZTtjPWIuc3luY0JhcnJpZXJCYXNlUmVzdWx0cyhhKTtlPWNbMF07Yz1jWzFdO2E9YS5zbGljZShlKS5tYXAoZnVuY3Rpb24oYSl7cmV0dXJuIGIucGFyYW0wKGEpfSk7Yi5jb250cmlic291cmNlc189YVswXTtiLnN5bmNzb3VyY2VzXz1hWzFdO2IucGFyYW1zXz1hWzJdO1Byb21pc2UuYWxsKGMpLnRoZW4oZnVuY3Rpb24oYSl7Yi5zeW5jQmFycmllckJhc2VSZXN1bHRzV2l0aEFsbFByb21pc2VzRnVsRmlsbGVkKGEpO2QubG9nZ2VyLmxvZyhiLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5zeW5jQmFycmllciBzdWNjZXNzLlwiKTtiLnN5bmNCYXJyaWVyUmVzb2x2ZShiKX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oYSl7YT1iLmxvZ1JlbW90ZUludm9rZUVycm9yKGEsXCIuc3luY0JhcnJpZXIoKSBwcm9taXNlc19iYXNlIGZhaWxlZCFcIik7XHJcbmIuc3luY0JhcnJpZXJSZWplY3QoYSl9KX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oYSl7YT1iLmxvZ1JlbW90ZUludm9rZUVycm9yKGEsXCIuc3luY0JhcnJpZXIoKSBmYWlsZWQhXCIpO2Iuc3luY0JhcnJpZXJSZWplY3QoYSl9KX0pfTtiLmdldENhcGFiaWxpdGllcz1mdW5jdGlvbihhKXtkLmxvZ2dlci5sb2codGhpcy5jb25zdHJ1Y3Rvci5uYW1lK1wiLmdldENhcGFiaWxpdGllcygpIGNhbGxlZC5cIik7cmV0dXJuIHcuTmF2aWdhdG9yVXNlck1lZGlhLmdldENhcGFiaWxpdGllcyhhKX07Yi5wcm90b3R5cGUuZ2V0Q29udHJpYnV0aW5nU291cmNlcz1mdW5jdGlvbigpe3ZhciBhPXRoaXM7ZC5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLmdldENvbnRyaWJ1dGluZ1NvdXJjZXMoKSBjYWxsZWQuIFwiK0pTT04uc3RyaW5naWZ5KHRoaXMuY29udHJpYnNvdXJjZXNfKSk7dGhpcy53YWl0VW50aWxDb25uZWN0ZWQoXCJSdHBSZWNlaXZlci5nZXRDb250cmlidXRpbmdTb3VyY2VzXCIpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gUHJvbWlzZS5hbGwoW2EucmVtb3RlSW52b2tlKCExLFxyXG5oLm1ldGhvZF9pZF9SVENSdHBSZWNlaXZlcl90LmdldENvbnRyaWJ1dGluZ1NvdXJjZXMpXSl9KS50aGVuKGZ1bmN0aW9uKGIpe2EuY29udHJpYnNvdXJjZXNfPWIubWFwKGZ1bmN0aW9uKGIpe3JldHVybiBhLnBhcmFtMChiKX0pWzBdO2QubG9nZ2VyLmxvZyhhLnVzZXJfZnJpZW5kbHlfaWQoKSxcIi5nZXRDb250cmlidXRpbmdTb3VyY2VzKCkgc3VjY2VzczogXCIrSlNPTi5zdHJpbmdpZnkoYS5jb250cmlic291cmNlc18pKX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oYil7YS5sb2dSZW1vdGVJbnZva2VFcnJvcihiLFwiLmdldENvbnRyaWJ1dGluZ1NvdXJjZXMoKSBmYWlsZWQhXCIpO2EuY29udHJpYnNvdXJjZXNfPVtdfSk7cmV0dXJuIHRoaXMuY29udHJpYnNvdXJjZXNffTtiLnByb3RvdHlwZS5nZXRQYXJhbWV0ZXJzPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcztkLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuZ2V0UGFyYW1ldGVycygpIGNhbGxlZC5cIik7dGhpcy53YWl0VW50aWxDb25uZWN0ZWQodGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXHJcblwiLmdldFBhcmFtZXRlcnNcIikudGhlbihmdW5jdGlvbigpe2QubG9nZ2VyLmxvZyhhLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5nZXRQYXJhbWV0ZXJzKCkgcmVtb3RlIGludm9raW5nXCIpO3JldHVybiBhLnJlbW90ZUludm9rZSghMSxoLm1ldGhvZF9pZF9SVENSdHBSZWNlaXZlcl90LmdldFBhcmFtZXRlcnMpfSkudGhlbihmdW5jdGlvbihiKXtkLmxvZ2dlci5sb2coYS51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuZ2V0UGFyYW1ldGVycygpIHN1Y2Nlc3NcIik7YS5wYXJhbXNfPWEucGFyYW0wKGIpfSlbXCJjYXRjaFwiXShmdW5jdGlvbihiKXthLmxvZ1JlbW90ZUludm9rZUVycm9yKGIsXCIuZ2V0UGFyYW1ldGVycygpIGZhaWxlZCFcIil9KTtkLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuZ2V0UGFyYW1ldGVycygpIHJldHVybmluZzogXCIrdGhpcy5wYXJhbXNfKTtyZXR1cm4gay5SdGNSdHBSZWNlaXZlUGFyYW1ldGVycy50b1JUQ1J0cFJlY2VpdmVQYXJhbWV0ZXJzKHRoaXMucGFyYW1zXyl9O1xyXG5iLnByb3RvdHlwZS5nZXRTeW5jaHJvbml6YXRpb25Tb3VyY2VzPWZ1bmN0aW9uKCl7ZC5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLmdldFN5bmNocm9uaXphdGlvblNvdXJjZXMoKSBjYWxsZWQuXCIpO3JldHVybiB0aGlzLnN5bmNzb3VyY2VzX307cmV0dXJuIGJ9KGIpO2EuUnRwUmVjZWl2ZXI9RH0sMzc3OmZ1bmN0aW9uKGIsYSxjKXt2YXIgZT10aGlzJiZ0aGlzLl9fZXh0ZW5kc3x8ZnVuY3Rpb24oKXt2YXIgYT1mdW5jdGlvbihiLGMpe2E9T2JqZWN0LnNldFByb3RvdHlwZU9mfHx7X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXkmJmZ1bmN0aW9uKGEsYil7YS5fX3Byb3RvX189Yn18fGZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjIGluIGIpYi5oYXNPd25Qcm9wZXJ0eShjKSYmKGFbY109YltjXSl9O3JldHVybiBhKGIsYyl9O3JldHVybiBmdW5jdGlvbihiLGMpe2Z1bmN0aW9uIGQoKXt0aGlzLmNvbnN0cnVjdG9yPWJ9YShiLGMpO2IucHJvdG90eXBlPW51bGw9PT1cclxuYz9PYmplY3QuY3JlYXRlKGMpOihkLnByb3RvdHlwZT1jLnByb3RvdHlwZSxuZXcgZCl9fSgpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO2EuUnRwVHJhbnNjZWl2ZXI9YS5SdGNSdHBUcmFuc2NlaXZlckluaXQ9YS5SdGNSdHBUcmFuc2NlaXZlckRpcmVjdGlvbj12b2lkIDA7dmFyIGw9Yyg2NTgpLGg9Yyg1NTApLGQ9Yyg4NTEpLHc9Yyg1ODkpLHE9Yyg0ODQpLG47KGZ1bmN0aW9uKGEpe2FbYS5zZW5kcmVjdj0wXT1cInNlbmRyZWN2XCI7YVthLnNlbmRvbmx5PTFdPVwic2VuZG9ubHlcIjthW2EucmVjdm9ubHk9Ml09XCJyZWN2b25seVwiO2FbYS5pbmFjdGl2ZT0zXT1cImluYWN0aXZlXCI7YVthLnN0b3BwZWQ9NF09XCJzdG9wcGVkXCJ9KShuPWEuUnRjUnRwVHJhbnNjZWl2ZXJEaXJlY3Rpb258fChhLlJ0Y1J0cFRyYW5zY2VpdmVyRGlyZWN0aW9uPXt9KSk7dmFyIGs9ZnVuY3Rpb24oKXtmdW5jdGlvbiBhKCl7fWEudG9SdGNSdHBUcmFuc2NlaXZlckRpcmVjdGlvbj1cclxuZnVuY3Rpb24oYSl7c3dpdGNoKGEpe2Nhc2UgXCJpbmFjdGl2ZVwiOmE9bi5pbmFjdGl2ZTticmVhaztjYXNlIFwicmVjdm9ubHlcIjphPW4ucmVjdm9ubHk7YnJlYWs7Y2FzZSBcInNlbmRvbmx5XCI6YT1uLnNlbmRvbmx5O2JyZWFrO2Nhc2UgXCJzZW5kcmVjdlwiOmE9bi5zZW5kcmVjdjticmVhaztjYXNlIFwic3RvcHBlZFwiOmE9bi5zdG9wcGVkO2JyZWFrO2RlZmF1bHQ6YT1uLnNlbmRyZWN2fXJldHVybiBhfTthLnRvUlRDUnRwVHJhbnNjZWl2ZXJEaXJlY3Rpb249ZnVuY3Rpb24oYSl7c3dpdGNoKGEpe2Nhc2Ugbi5pbmFjdGl2ZTphPVwiaW5hY3RpdmVcIjticmVhaztjYXNlIG4ucmVjdm9ubHk6YT1cInJlY3Zvbmx5XCI7YnJlYWs7Y2FzZSBuLnNlbmRvbmx5OmE9XCJzZW5kb25seVwiO2JyZWFrO2Nhc2Ugbi5zZW5kcmVjdjphPVwic2VuZHJlY3ZcIjticmVhaztjYXNlIG4uc3RvcHBlZDphPVwic3RvcHBlZFwiO2JyZWFrO2RlZmF1bHQ6YT1cInNlbmRyZWN2XCJ9cmV0dXJuIGF9O2EudG9SdGNSdHBUcmFuc2NlaXZlckluaXQ9XHJcbmZ1bmN0aW9uKGIpe2QubG9nZ2VyLmxvZyhcIlJ0Y1J0cFRyYW5zY2VpdmVySW5pdC50b1J0Y1J0cFRyYW5zY2VpdmVySW5pdCgpIGluIGluaXQ6XCIrSlNPTi5zdHJpbmdpZnkoYikpO3ZhciBjPXt9O2ImJihiLmRpcmVjdGlvbiYmKGMuZGlyZWN0aW9uPWEudG9SdGNSdHBUcmFuc2NlaXZlckRpcmVjdGlvbihiLmRpcmVjdGlvbikpLGIuc2VuZEVuY29kaW5ncyYmKGMuc2VuZEVuY29kaW5ncz1bXSxiLnNlbmRFbmNvZGluZ3MuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYy5zZW5kRW5jb2RpbmdzLnB1c2gocS5SdGNSdHBFbmNvZGluZ1BhcmFtZXRlcnMudG9SdGNSdHBFbmNvZGluZ1BhcmFtZXRlcnMoYSkpfSkpLGIuc3RyZWFtcyYmKGMuc3RyZWFtcz1iLnN0cmVhbXMpKTtkLmxvZ2dlci5sb2coXCJSdGNSdHBUcmFuc2NlaXZlckluaXQudG9SdGNSdHBUcmFuc2NlaXZlckluaXQoKSBvdXQgaW5pdDpcIitKU09OLnN0cmluZ2lmeShjKSk7cmV0dXJuIGN9O3JldHVybiBhfSgpO2EuUnRjUnRwVHJhbnNjZWl2ZXJJbml0PVxyXG5rO2I9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYihjLGUsayxtLHEseSl7Yz1hLmNhbGwodGhpcyxjLGguY2xhc3NfaWRfdC5SVENSdHBUcmFuc2NlaXZlcixlLGspfHx0aGlzO2QubG9nZ2VyLmxvZyhjLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5jb25zdHJ1Y3RvclwiKTtjLnVuaWZpZWRfPW07Yy5zZW5kZXJfPW5ldyB3LlJ0cFNlbmRlcihjLDAsbC5Qcm94eU1vZGUuUHNldWRvLG0pO2MucmVjZWl2ZXJfPXk/eTpuZXcgdy5SdHBSZWNlaXZlcihjLDAsbC5Qcm94eU1vZGUuUHNldWRvLG0pO3E/KGMuZGlyZWN0aW9uXz1xLGMuY3VycmVudERpcmVjdGlvbl89cSk6KGMuZGlyZWN0aW9uXz1uLnNlbmRyZWN2LGMuY3VycmVudERpcmVjdGlvbl89bi5zZW5kcmVjdik7cmV0dXJuIGN9ZShiLGEpO2IucHJvdG90eXBlLmR1bXBJbmZvPWZ1bmN0aW9uKCl7ZC5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLmR1bXBJbmZvKCkgW2lkPVwiK3RoaXMubWlkK1wiXSBkaXJlY3Rpb249XCIray50b1JUQ1J0cFRyYW5zY2VpdmVyRGlyZWN0aW9uKHRoaXMuZGlyZWN0aW9uXykrXHJcblwiIGN1cnJlbnREaXJlY3Rpb249XCIray50b1JUQ1J0cFRyYW5zY2VpdmVyRGlyZWN0aW9uKHRoaXMuY3VycmVudERpcmVjdGlvbl8pKTt0aGlzLnNlbmRlciYmdGhpcy5zZW5kZXIuZHVtcEluZm8oKTt0aGlzLnJlY2VpdmVyJiZ0aGlzLnJlY2VpdmVyLmR1bXBJbmZvKCl9O2IucHJvdG90eXBlLnN5bmNCYXJyaWVyPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcztkLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuc3luY0JhcnJpZXIoKSBjYWxsZWQuXCIpO3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihiLGMpe2Euc3luY0JhcnJpZXJEZWVwKGIsYykmJmEud2FpdFVudGlsQ29ubmVjdGVkKFwiUnRwVHJhbnNjZWl2ZXIuc3luY0JhcnJpZXJcIikudGhlbihmdW5jdGlvbigpe3JldHVybiBQcm9taXNlLmFsbChbYS5yZW1vdGVJbnZva2UoITEsaC5tZXRob2RfaWRfUlRDUnRwVHJhbnNjZWl2ZXJfdC5taWQsXCJcIiksYS5yZW1vdGVJbnZva2UoITEsaC5tZXRob2RfaWRfUlRDUnRwVHJhbnNjZWl2ZXJfdC5kaXJlY3Rpb24sXHJcbjApLGEucmVtb3RlSW52b2tlKCExLGgubWV0aG9kX2lkX1JUQ1J0cFRyYW5zY2VpdmVyX3QuY3VycmVudERpcmVjdGlvbiwwKSxhLnJlbW90ZUludm9rZSghMSxoLm1ldGhvZF9pZF9SVENSdHBUcmFuc2NlaXZlcl90LnNlbmRlcix7b2lkOjB9KSxhLnJlbW90ZUludm9rZSghMSxoLm1ldGhvZF9pZF9SVENSdHBUcmFuc2NlaXZlcl90LnJlY2VpdmVyLHtvaWQ6MH0pXSl9KS50aGVuKGZ1bmN0aW9uKGIpe3ZhciBjO2QubG9nZ2VyLmxvZyhhLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5zeW5jQmFycmllciByZW1vdGUgc3VjY2Vzcy5cIik7Yz1iLm1hcChmdW5jdGlvbihiKXtyZXR1cm4gYS5wYXJhbTAoYil9KTthLm1pZF89Y1swXTthLmRpcmVjdGlvbl89Y1sxXTthLmN1cnJlbnREaXJlY3Rpb25fPWNbMl07Yj1jWzNdO2M9Y1s0XTt2YXIgZT1bXTt2b2lkIDAhPWImJiExPT09Yi5pc19udWxsJiYoYS5zZW5kZXJfLmJpbmQoYSxiLm9pZCksZS5wdXNoKGEuc2VuZGVyXy5zeW5jQmFycmllcigpKSk7XHJcbnZvaWQgMCE9YyYmITE9PT1jLmlzX251bGwmJihhLnJlY2VpdmVyXy5iaW5kKGEsYy5vaWQpLGUucHVzaChhLnJlY2VpdmVyXy5zeW5jQmFycmllcigpKSk7aWYoMD09ZS5sZW5ndGgpZC5sb2dnZXIubG9nKGEudXNlcl9mcmllbmRseV9pZCgpK1wiLnN5bmNCYXJyaWVyIHN1Y2Nlc3NcIiksYS5zeW5jQmFycmllclJlc29sdmUoYSk7ZWxzZSByZXR1cm4gZC5sb2dnZXIubG9nKGEudXNlcl9mcmllbmRseV9pZCgpK1wiLnByb3Auc3luY0JhcnJpZXIgc3RhcnRcIiksUHJvbWlzZS5hbGwoZSl9KS50aGVuKGZ1bmN0aW9uKCl7ZC5sb2dnZXIubG9nKGEudXNlcl9mcmllbmRseV9pZCgpK1wiLnN5bmNCYXJyaWVyIHN1Y2Nlc3NcIik7YS5zeW5jQmFycmllclJlc29sdmUoYSl9KVtcImNhdGNoXCJdKGZ1bmN0aW9uKGIpe2I9YS5sb2dSZW1vdGVJbnZva2VFcnJvcihiLFwiLnN5bmNCYXJyaWVyKCkgZmFpbGVkIVwiKTthLnN5bmNCYXJyaWVyUmVqZWN0KGIpfSl9KX07T2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFxyXG5cIm1pZFwiLHtnZXQ6ZnVuY3Rpb24oKXtkLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuZ2V0X21pZCgpIGNhbGxlZDogXCIrdGhpcy5taWRfKTtyZXR1cm4gdGhpcy5taWRffSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShiLnByb3RvdHlwZSxcInNlbmRlclwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zZW5kZXJffSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShiLnByb3RvdHlwZSxcInJlY2VpdmVyXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnJlY2VpdmVyX30sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYi5wcm90b3R5cGUsXCJkaXJlY3Rpb25cIix7Z2V0OmZ1bmN0aW9uKCl7ZC5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLmdldF9kaXJlY3Rpb24oKSBjYWxsZWQuIFwiK2sudG9SVENSdHBUcmFuc2NlaXZlckRpcmVjdGlvbih0aGlzLmRpcmVjdGlvbl8pKTtcclxucmV0dXJuIGsudG9SVENSdHBUcmFuc2NlaXZlckRpcmVjdGlvbih0aGlzLmRpcmVjdGlvbl8pfSxzZXQ6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcztkLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuc2V0X2RpcmVjdGlvbigpIGNhbGxlZC4gXCIrYSk7dGhpcy5kaXJlY3Rpb25fPWsudG9SdGNSdHBUcmFuc2NlaXZlckRpcmVjdGlvbihhKTt0aGlzLndhaXRVbnRpbENvbm5lY3RlZChcIlJ0cFRyYW5zY2VpdmVyLnNldF9kaXJlY3Rpb25cIikudGhlbihmdW5jdGlvbigpe3JldHVybiBiLnJlbW90ZUludm9rZSghMCxoLm1ldGhvZF9pZF9SVENSdHBUcmFuc2NlaXZlcl90LmRpcmVjdGlvbixrLnRvUnRjUnRwVHJhbnNjZWl2ZXJEaXJlY3Rpb24oYSkpfSkudGhlbihmdW5jdGlvbigpe2QubG9nZ2VyLmxvZyhiLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5zZXRfZGlyZWN0aW9uOiBzdWNjZXNzLlwiKX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oYSl7Yi5sb2dSZW1vdGVJbnZva2VFcnJvcihhLFxyXG5cIi5zZXRfZGlyZWN0aW9uKCkgZmFpbGVkIVwiKX0pfSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShiLnByb3RvdHlwZSxcImN1cnJlbnREaXJlY3Rpb25cIix7Z2V0OmZ1bmN0aW9uKCl7ZC5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLmdldF9jdXJyZW50RGlyZWN0aW9uKCkgY2FsbGVkLiBcIitrLnRvUlRDUnRwVHJhbnNjZWl2ZXJEaXJlY3Rpb24odGhpcy5jdXJyZW50RGlyZWN0aW9uXykpO3JldHVybiBrLnRvUlRDUnRwVHJhbnNjZWl2ZXJEaXJlY3Rpb24odGhpcy5jdXJyZW50RGlyZWN0aW9uXyl9LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSk7Yi5wcm90b3R5cGUuc3RvcD1mdW5jdGlvbigpe3ZhciBhPXRoaXM7ZC5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLnN0b3AoKSBjYWxsZWQuXCIpO3RoaXMud2FpdFVudGlsQ29ubmVjdGVkKFwiUnRwVHJhbnNjZWl2ZXIuc3RvcFwiKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGEucmVtb3RlSW52b2tlKCEwLFxyXG5oLm1ldGhvZF9pZF9SVENSdHBUcmFuc2NlaXZlcl90LnN0b3ApfSkudGhlbihmdW5jdGlvbigpe2QubG9nZ2VyLmxvZyhhLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5zdG9wOiBzdWNjZXNzLlwiKX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oYil7YS5sb2dSZW1vdGVJbnZva2VFcnJvcihiLFwiLnN0b3AoKSBmYWlsZWQhXCIpfSl9O2IucHJvdG90eXBlLnNldENvZGVjUHJlZmVyZW5jZXM9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcztkLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuc2V0Q29kZWNQcmVmZXJlbmNlcygpIGNhbGxlZC5cIik7dGhpcy53YWl0VW50aWxDb25uZWN0ZWQoXCJSdHBUcmFuc2NlaXZlci5zZXRDb2RlY1ByZWZlcmVuY2VzXCIpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gYi5yZW1vdGVJbnZva2UoITAsaC5tZXRob2RfaWRfUlRDUnRwVHJhbnNjZWl2ZXJfdC5zZXRDb2RlY1ByZWZlcmVuY2VzLGEpfSkudGhlbihmdW5jdGlvbigpe2QubG9nZ2VyLmxvZyhiLnVzZXJfZnJpZW5kbHlfaWQoKStcclxuXCIuc2V0Q29kZWNQcmVmZXJlbmNlczogc3VjY2Vzcy5cIil9KVtcImNhdGNoXCJdKGZ1bmN0aW9uKGEpe2IubG9nUmVtb3RlSW52b2tlRXJyb3IoYSxcIi5zZXRDb2RlY1ByZWZlcmVuY2VzKCkgZmFpbGVkIVwiKX0pfTtyZXR1cm4gYn0obC5Qcm94eU9iamVjdCk7YS5SdHBUcmFuc2NlaXZlcj1ifSw5NzM6ZnVuY3Rpb24oYixhLGMpe2Z1bmN0aW9uIGUoYSxiKXtyZXR1cm4gdm9pZCAwIT09YS5maW5kKGZ1bmN0aW9uKGEpe3JldHVybiBhPT09Yn0pfWZ1bmN0aW9uIGwoYSxiLGMpe2IvPWEud2lkdGg7Yy89YS5oZWlnaHQ7dmFyIGQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKSxlPWQuZ2V0Q29udGV4dChcIjJkXCIpO2Qud2lkdGg9YS53aWR0aCpiO2QuaGVpZ2h0PWEuaGVpZ2h0KmM7ZS5wdXRJbWFnZURhdGEoYSwwLDApO2lmKDEhPWJ8fDEhPWMpZS5zY2FsZShiLGMpLGUuZHJhd0ltYWdlKGQsMCwwKTtyZXR1cm4gZH1mdW5jdGlvbiBoKGEsYixjKXthPWwoYSxiLGMpO2I9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKTtcclxuYi5zcmM9YS50b0RhdGFVUkwoKTtyZXR1cm4gYn1mdW5jdGlvbiBkKGEsYixjLGQpe2M9XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjP2M6RC5XaWR0aDtkPVwidW5kZWZpbmVkXCIhPT10eXBlb2YgZD9kOkQuSGVpZ2h0O2lmKCEwPT09YilyZXR1cm4gaChhLGMsZCk7Yj1udWxsO2M9PWEud2lkdGgmJmQ9PT1hLmhlaWdodD9iPWE6KGE9bChhLGMsZCksYj1hLmdldENvbnRleHQoXCIyZFwiKS5nZXRJbWFnZURhdGEoMCwwLGEud2lkdGgsYS5oZWlnaHQpKTtyZXR1cm4gYn12YXIgdz10aGlzJiZ0aGlzLl9fZXh0ZW5kc3x8ZnVuY3Rpb24oKXt2YXIgYT1mdW5jdGlvbihiLGMpe2E9T2JqZWN0LnNldFByb3RvdHlwZU9mfHx7X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXkmJmZ1bmN0aW9uKGEsYil7YS5fX3Byb3RvX189Yn18fGZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjIGluIGIpYi5oYXNPd25Qcm9wZXJ0eShjKSYmKGFbY109YltjXSl9O3JldHVybiBhKGIsYyl9O3JldHVybiBmdW5jdGlvbihiLFxyXG5jKXtmdW5jdGlvbiBkKCl7dGhpcy5jb25zdHJ1Y3Rvcj1ifWEoYixjKTtiLnByb3RvdHlwZT1udWxsPT09Yz9PYmplY3QuY3JlYXRlKGMpOihkLnByb3RvdHlwZT1jLnByb3RvdHlwZSxuZXcgZCl9fSgpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO2EuU2NyZWVuU291cmNlPWEuU2NyZWVuU291cmNlVmRhPWEuU2NyZWVuU2hhcmluZ1ZkYT1hLlNjcmVlblNoYXJpbmdSZW1vdGU9YS5TY3JlZW5TaGFyaW5nPWEuSW1hZ2VEYXRhUmVtb3RlPXZvaWQgMDt2YXIgcT1jKDY1OCksbj1jKDU1MCksaz1jKDg1MSkscD1jKDk0Niksej1jKDY5MSksZz1jKDY1MCksQjsoZnVuY3Rpb24oYSl7YVthLkxlZ2FjeT0wXT1cIkxlZ2FjeVwiO2FbYS5Nb25pdG9yc0FuZEFwcHM9MTBdPVwiTW9uaXRvcnNBbmRBcHBzXCJ9KShCfHwoQj17fSkpO2I9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oYSxiLGMpe3RoaXMuZGF0YT1hO3RoaXMuaGVpZ2h0PWI7dGhpcy53aWR0aD1cclxuY319KCk7YS5JbWFnZURhdGFSZW1vdGU9YjtiPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gYSgpe3RoaXMubG9jYWxfPXRoaXMucmVtb3RlXz1udWxsfWEuc2NyZWVuU2hhcmluZ0luc3RhbmNlPWZ1bmN0aW9uKGIpe2EuaW5zdGFuY2V8fChhLmluc3RhbmNlPW5ldyBhLGImJihhLmluc3RhbmNlLm9uc2NyZWVudG9wb2xvZ3ljaGFuZ2VkPWIpKTtyZXR1cm4gYS5pbnN0YW5jZX07YS5kZXN0cm95SW5zdGFuY2U9ZnVuY3Rpb24oKXthLmluc3RhbmNlJiZhLmluc3RhbmNlLnJlbW90ZV8mJmEuaW5zdGFuY2UucmVtb3RlXy5yZWxlYXNlKCk7YS5pbnN0YW5jZT1udWxsfTthLnByb3RvdHlwZS51c2VyX2ZyaWVuZGx5X2lkPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29uc3RydWN0b3IubmFtZStcIltdXCJ9O09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLnByb3RvdHlwZSxcIm9uc2NyZWVudG9wb2xvZ3ljaGFuZ2VkXCIse3NldDpmdW5jdGlvbihhKXt0aGlzLnJlbW90ZV98fCh0aGlzLnJlbW90ZV89bmV3IHQpO1xyXG50aGlzLnJlbW90ZV8ub25zY3JlZW50b3BvbG9neWNoYW5nZWQ9YTt0aGlzLmxvY2FsX3x8KHRoaXMubG9jYWxfPW5ldyBtKTt0aGlzLmxvY2FsXy5vbnNjcmVlbnRvcG9sb2d5Y2hhbmdlZD1hfSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pO2EucHJvdG90eXBlLmdldFdpbmRvd3NBc3luYz1mdW5jdGlvbigpe3ZhciBhPXRoaXM7ay5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLmdldFdpbmRvd3NBc3luYygpIGNhbGxlZC5cIik7bnVsbD09dGhpcy5sb2NhbF8mJih0aGlzLmxvY2FsXz1uZXcgbSk7cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKGIsYyl7dmFyIGQ9W107YS5sb2NhbF8uZ2V0V2luZG93c0FzeW5jKCkudGhlbihmdW5jdGlvbihjKXtjJiYoZD1jKTtrLmxvZ2dlci5sb2coYS51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuZ2V0V2luZG93c0FzeW5jKCkgcmV0dXJuaW5nIHNvdXJjZXNcIik7YihkKX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oKXtrLmxvZ2dlci5sb2coXCJTY3JlZW5TaGFyaW5nLmdldFdpbmRvd3NBc3luYygpOiByZWplY3RlZFwiKTtcclxuYihkKX0pfSl9O2EucHJvdG90eXBlLmdldFNjcmVlbnNBc3luYz1mdW5jdGlvbigpe3ZhciBhPXRoaXM7ay5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLmdldFNjcmVlbnNBc3luYygpIGNhbGxlZC5cIik7bnVsbD09dGhpcy5yZW1vdGVfJiYodGhpcy5yZW1vdGVfPW5ldyB0KTtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24oYixjKXt2YXIgZD1bXTthLnJlbW90ZV8uZ2V0U2NyZWVuc0FzeW5jKCkudGhlbihmdW5jdGlvbihjKXtjJiYoZD1jKTtrLmxvZ2dlci5sb2coYS51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuZ2V0U2NyZWVuc0FzeW5jKCkgcmV0dXJuaW5nIHNvdXJjZXNcIik7YihkKX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oKXtrLmxvZ2dlci5sb2coXCJTY3JlZW5TaGFyaW5nLmdldFNjcmVlbnNBc3luYygpOiByZWplY3RlZFwiKTtiKGQpfSl9KX07YS5wcm90b3R5cGUuc2V0QWN0aXZlU291cmNlPWZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcztrLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXHJcblwiLnNldEFjdGl2ZVNvdXJjZSgpIGNhbGxlZC4gaWQ9XCIrYStcIiBhcHBzaGFyZT1cIitiKTtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24oZCxlKXtjLnJlbW90ZV8uY29udGFpbnMoYSk/Yy5yZW1vdGVfLnNldEFjdGl2ZShhKS50aGVuKGZ1bmN0aW9uKGEpe2QoYSl9KVtcImNhdGNoXCJdKGZ1bmN0aW9uKCl7ay5sb2dnZXIubG9nKFwiU2NyZWVuU2hhcmluZy5zZXRBY3RpdmVTb3VyY2UoKTogcmVqZWN0ZWRcIik7ZSgpfSk6Yj9jLmxvY2FsXy5jb250YWlucyhhKT9jLmxvY2FsXy5zZXRBY3RpdmUoITAsYSkudGhlbihmdW5jdGlvbihhKXtkKGEpfSlbXCJjYXRjaFwiXShmdW5jdGlvbigpe2subG9nZ2VyLmxvZyhcIlNjcmVlblNoYXJpbmcuc2V0QWN0aXZlU291cmNlKCk6IHJlamVjdGVkXCIpO2UoKX0pOihrLmxvZ2dlci5sb2coXCJTY3JlZW5TaGFyaW5nLnNldEFjdGl2ZVNvdXJjZSgpOiBsZWdhY3kgc2NyZWVuIHNoYXJpbmdcIiksZChcIlwiKSk6KGsubG9nZ2VyLmxvZyhcIlNjcmVlblNoYXJpbmcuc2V0QWN0aXZlU291cmNlKCk6IGxlZ2FjeSBzY3JlZW4gc2hhcmluZ1wiKSxcclxuZChcIlwiKSl9KX07YS5wcm90b3R5cGUuaXNBcHBzaGFyZUFjdGl2ZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmxvY2FsXyYmLTEhPT10aGlzLmxvY2FsXy5sYXN0QWN0aXZlfTthLnByb3RvdHlwZS5zdG9wQXBwc2hhcmU9ZnVuY3Rpb24oKXtrLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuc3RvcEFwcHNoYXJlKCkgY2FsbGVkLlwiKTt0aGlzLmxvY2FsXyYmdGhpcy5sb2NhbF8uc2V0QWN0aXZlKCExKS50aGVuKGZ1bmN0aW9uKGEpe2subG9nZ2VyLmxvZyhcIlNjcmVlblNoYXJpbmcuc3RvcEFwcHNoYXJlKCk6IHN1Y2Nlc3MsIGRldmljZWlkPVwiLGEpfSlbXCJjYXRjaFwiXShmdW5jdGlvbigpe2subG9nZ2VyLmxvZyhcIlNjcmVlblNoYXJpbmcuc3RvcEFwcHNoYXJlKCk6IGZhaWx1cmUgb3IgdGltZW91dCBkdWUgdG8gbm9ucmVzcG9uc2l2ZSBXUyBBZ2VudFwiKX0pfTthLmluc3RhbmNlPW51bGw7cmV0dXJuIGF9KCk7YS5TY3JlZW5TaGFyaW5nPWI7dmFyIHQ9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYigpe3ZhciBjPVxyXG5hLmNhbGwodGhpcyxudWxsLG4uY2xhc3NfaWRfdC5TY3JlZW5TaGFyaW5nUmVtb3RlLDAscS5Qcm94eU1vZGUuTG9jYWwpfHx0aGlzO2subG9nZ2VyLmxvZyhjLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5jb25zdHJ1Y3RvclwiKTtjLnNvdXJjZXNfPVtdO3JldHVybiBjfXcoYixhKTtiLnByb3RvdHlwZS5nZXRTb3VyY2VCeUlkPWZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLnNvdXJjZXNfLmZpbmQoZnVuY3Rpb24oYil7cmV0dXJuIGIuZ2V0SWQoKT09YX0pfTtiLnByb3RvdHlwZS5jb250YWlucz1mdW5jdGlvbihhKXtyZXR1cm4gdm9pZCAwIT09dGhpcy5nZXRTb3VyY2VCeUlkKGEpfTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYi5wcm90b3R5cGUsXCJvbnNjcmVlbnRvcG9sb2d5Y2hhbmdlZFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5vbnNjcmVlbnRvcG9sb2d5Y2hhbmdlZF99LHNldDpmdW5jdGlvbihhKXt2YXIgYj10aGlzO3RoaXMub25zY3JlZW50b3BvbG9neWNoYW5nZWRfPWE7XHJcbnRoaXMud2FpdFVudGlsQ29ubmVjdGVkKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLm9uc2NyZWVudG9wb2xvZ3ljaGFuZ2VkXCIpLnRoZW4oZnVuY3Rpb24oKXt2YXIgYT1iLnJlZ2lzdGVyQ2FsbGJhY2tzKCExLGIuaXNOdWxsQ2FsbGJhY2soYi5vbnNjcmVlbnRvcG9sb2d5Y2hhbmdlZF8pLG4ubWV0aG9kX2lkX1ZESVNoYXJpbmdSZW1vdGVfdC5vbnNjcmVlbnRvcG9sb2d5Y2hhbmdlZCk7YS50aGVuKGZ1bmN0aW9uKCl7ay5sb2dnZXIubG9nKGIudXNlcl9mcmllbmRseV9pZCgpK1wib25zY3JlZW50b3BvbG9neWNoYW5nZWQgZXZlbnQgcmVjZWl2ZWQhISFcIik7Yi5vbnNjcmVlbnRvcG9sb2d5Y2hhbmdlZF8mJmIub25zY3JlZW50b3BvbG9neWNoYW5nZWRfKCl9KTtyZXR1cm4gYi5yZW1vdGVJbnZva2UoITAsbi5tZXRob2RfaWRfVkRJU2hhcmluZ1JlbW90ZV90Lm9uc2NyZWVudG9wb2xvZ3ljaGFuZ2VkLGEuc3VjY2Vzcyl9KVtcImNhdGNoXCJdKGZ1bmN0aW9uKGEpe2IubG9nUmVtb3RlSW52b2tlRXJyb3IoYSxcclxuXCIuc2V0X29uc2NyZWVudG9wb2xvZ3ljaGFuZ2VkKCkgZmFpbGVkIVwiKX0pfSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pO2IucHJvdG90eXBlLmdldFNjcmVlbnNBc3luYz1mdW5jdGlvbigpe3ZhciBhPXRoaXM7ay5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLmdldFNjcmVlbnNBc3luYygpIGNhbGxlZC5cIik7dmFyIGI9dGhpcy5zb3VyY2VzXzt0aGlzLnNvdXJjZXNfPVtdO3ZhciBjPXAuZ2V0UmVkaXJlY3RvcigpLnZkYWJ1ZmZlck5vTGltaXQoKSYmZy5SZW1vdGVTZXNzaW9uLmlzRmVhdHVyZVZkTm9CdWZmZXJMaW1pdFN1cHBvcnRlZCgpO3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihkLGcpe2Eud2FpdFVudGlsQ29ubmVjdGVkKGEudXNlcl9mcmllbmRseV9pZCgpK1wiLmdldFNjcmVlbnNBc3luY1wiKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGEucmVtb3RlSW52b2tlKCExLG4ubWV0aG9kX2lkX1ZESVNoYXJpbmdSZW1vdGVfdC5nZXRTY3JlZW5zQXN5bmMsXHJcbmMpfSkudGhlbihmdW5jdGlvbihjKXt2YXIgaD1bXTtjLnBhcmFtc1swXS5mb3JFYWNoKGZ1bmN0aW9uKGMpe3ZhciBkPWIuZmluZChmdW5jdGlvbihhKXtyZXR1cm4gYS5vYmplY3RfaWQoKT09PWMub2lkfSk7dm9pZCAwPT09ZCYmKGsubG9nZ2VyLmxvZyhhLnVzZXJfZnJpZW5kbHlfaWQoKStcIiBjcmVhdGUgYSBTY3JlZW5Tb3VyY2Ugd2l0aCBvaWQ6XCIrYy5vaWQpLGQ9bmV3IHkoYSxjLm9pZCxxLlByb3h5TW9kZS5SZW1vdGUpKTtoLnB1c2goZC5zeW5jQmFycmllcigpKX0pO1Byb21pc2UuYWxsKGgubWFwKGZ1bmN0aW9uKGEpe3JldHVybiBhLnRoZW4oZnVuY3Rpb24oYSl7cmV0dXJue3ZhbHVlOmEsc3RhdHVzOlwiZnVsZmlsbGVkXCJ9fSxmdW5jdGlvbihhKXtyZXR1cm57dmFsdWU6YSxzdGF0dXM6XCJyZWplY3RlZFwifX0pfSkpLnRoZW4oZnVuY3Rpb24oYyl7dmFyIGc9Yy5maWx0ZXIoZnVuY3Rpb24oYSl7cmV0dXJuXCJmdWxmaWxsZWRcIj09PWEuc3RhdHVzfSkubWFwKGZ1bmN0aW9uKGEpe3JldHVybiBhLnZhbHVlfSk7XHJcbmEuc291cmNlc189ZztiLmZpbHRlcihmdW5jdGlvbihhKXtyZXR1cm4hZShnLGEpfSkuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYS5yZWxlYXNlKCl9KTtkKGcpfSlbXCJjYXRjaFwiXShmdW5jdGlvbihjKXtjPWEubG9nUmVtb3RlSW52b2tlRXJyb3IoYyxcIi5nZXRTY3JlZW5zQXN5bmMoKSBmYWlsZWQhXCIpO2IuZm9yRWFjaChmdW5jdGlvbihhKXthLnJlbGVhc2UoKX0pO2coYyl9KX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oYyl7Yz1hLmxvZ1JlbW90ZUludm9rZUVycm9yKGMsXCIuZ2V0U2NyZWVuc0FzeW5jKCkgZmFpbGVkIVwiKTtiLmZvckVhY2goZnVuY3Rpb24oYSl7YS5yZWxlYXNlKCl9KTtnKGMpfSl9KX07Yi5wcm90b3R5cGUuc2V0QWN0aXZlPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXM7ay5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLnNldEFjdGl2ZSgpIGNhbGxlZC4gdW5pcXVlaWQ9XCIrYSk7cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKGMsZCl7LTEhPWE/XHJcbmMoYi5nZXRTb3VyY2VCeUlkKGEpLmdldERldmljZUlkKCkpOmQoKX0pfTtyZXR1cm4gYn0ocS5Qcm94eU9iamVjdCk7YS5TY3JlZW5TaGFyaW5nUmVtb3RlPXQ7dmFyIG09ZnVuY3Rpb24oKXtmdW5jdGlvbiBhKCl7ay5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLmNvbnN0cnVjdG9yXCIpO3RoaXMuc291cmNlc189W107dGhpcy5sYXN0YWN0aXZlXz0tMX1hLnByb3RvdHlwZS51c2VyX2ZyaWVuZGx5X2lkPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29uc3RydWN0b3IubmFtZStcIltdXCJ9O09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLnByb3RvdHlwZSxcIm9uc2NyZWVudG9wb2xvZ3ljaGFuZ2VkXCIse3NldDpmdW5jdGlvbihhKXtwLmdldFJlZGlyZWN0b3IoKS5zY3JlZW5zaGFyZS5zZXRUb3BvbG9neUNoYW5nZUNCKGEpfSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLnByb3RvdHlwZSxcImxhc3RBY3RpdmVcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubGFzdGFjdGl2ZV99LFxyXG5lbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pO2EucHJvdG90eXBlLmdldFNvdXJjZUJ5SWQ9ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuc291cmNlc18uZmluZChmdW5jdGlvbihiKXtyZXR1cm4gYi5nZXRJZCgpPT1hfSl9O2EucHJvdG90eXBlLmNvbnRhaW5zPWZ1bmN0aW9uKGEpe3JldHVybiB2b2lkIDAhPT10aGlzLmdldFNvdXJjZUJ5SWQoYSl9O2EucHJvdG90eXBlLmdldFdpbmRvd3NBc3luYz1mdW5jdGlvbigpe3ZhciBhPXRoaXM7ay5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLmdldFdpbmRvd3NBc3luYygpIGNhbGxlZC5cIik7dmFyIGI9dGhpcy5zb3VyY2VzXzt0aGlzLnNvdXJjZXNfPVtdO3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihjLGQpe3AuZ2V0UmVkaXJlY3RvcigpLnNjcmVlbnNoYXJlLmdldFNvdXJjZXMobmV3IHouZ2V0U291cmNlc1JlcURhdGEoMikpLnRoZW4oZnVuY3Rpb24oZCl7ZD1kLm1hcChmdW5jdGlvbihjKXt2YXIgZD1cclxuYi5maW5kKGZ1bmN0aW9uKGEpe3JldHVybiBhLmVxdWl2YWxlbnQoYyl9KTtyZXR1cm4gdm9pZCAwIT09ZD8oZC5zZXREZXNjcmlwdGlvbihjLmdldERlc2NyaXB0aW9uKCkpLGMuZ2V0SWNvbigpLnRoZW4oZnVuY3Rpb24oYSl7ZC5zZXRJY29uKGEpfSlbXCJjYXRjaFwiXShmdW5jdGlvbigpe2subG9nZ2VyLmxvZyhhLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5nZXRXaW5kb3dzQXN5bmMoKSBmYWlsZWQgdG8gcmV0cmlldmUgbmV3IGljb24uXCIpfSksYy5nZXRQcmV2aWV3QXN5bmMoKS50aGVuKGZ1bmN0aW9uKGEpe2Quc2V0UHJldmlldyhhKX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oKXtrLmxvZ2dlci5sb2coYS51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuZ2V0V2luZG93c0FzeW5jKCkgZmFpbGVkIHRvIHJldHJpZXZlIG5ldyBwcmV2aWV3LlwiKX0pLGQpOmN9KTtpZigtMSE9YS5sYXN0YWN0aXZlXyl7dmFyIGU9Yi5maW5kKGZ1bmN0aW9uKGIpe3JldHVybiBiLmdldElkKCk9PWEubGFzdGFjdGl2ZV99KSxcclxuZz1kLmZpbmQoZnVuY3Rpb24oYil7cmV0dXJuIGIuZ2V0SWQoKT09YS5sYXN0YWN0aXZlX30pO3ZvaWQgMCE9PWUmJnZvaWQgMD09PWcmJmQucHVzaChlKX1hLnNvdXJjZXNfPWQ7YyhhLnNvdXJjZXNfKX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oKXtrLmxvZ2dlci5sb2coYS51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuZ2V0V2luZG93c0FzeW5jKCk6IHJlamVjdGVkXCIpO2QoKX0pfSl9O2EucHJvdG90eXBlLmFjdGl2YXRlU291cmNlPWZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcztyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24oZCxlKXt2YXIgZz1iP1wiYWN0aXZhdGVcIjpcImRlYWN0aXZhdGVcIjtrLmxvZ2dlci5sb2coYy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuYWN0aXZhdGVTb3VyY2UoKSBjYWxsZWQuIGFjdGlvbj1cIitnKTt2YXIgaD1uZXcgei5zZXRBY3RpdmVSZXFEYXRhKGEuc3JjaWQsYS5od25kLGEub3JpZ2luLGEucGlkLCEwLCEwLGIpO3AuZ2V0UmVkaXJlY3RvcigpLnNjcmVlbnNoYXJlLnNldEFjdGl2ZShoKS50aGVuKGZ1bmN0aW9uKGIpe2subG9nZ2VyLmxvZyhjLnVzZXJfZnJpZW5kbHlfaWQoKStcclxuXCI6IFwiK2crXCIgc3VjY2Vzczogc3JjaWQ9XCIrYi5zcmNpZCtcIiBkZXZpY2VpZD1cIitiLmJ1ZmZlcmlkKTthLmRldmljZWlkPWIuYnVmZmVyaWQ7ZChiLmJ1ZmZlcmlkKX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oKXtrLmxvZ2dlci5sb2coYy51c2VyX2ZyaWVuZGx5X2lkKCkrXCJmYWlsZWQgdG8gXCIrZytcIjogc3JjaWQ9XCIrYS5zcmNpZCtcIiwgbWF5YmUgV1MgQWdlbnQgaXMgdG9vIHNsb3cgdG8gcmVzcG9uZFwiKTtlKCl9KX0pfTthLnByb3RvdHlwZS5zZXRBY3RpdmU9ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzO2subG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5zZXRBY3RpdmUoKSBjYWxsZWQuIHVuaXF1ZWlkPVwiK2IpO3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihkLGUpe2F8fChiPWMubGFzdGFjdGl2ZV8pOy0xIT1iPyhhPyhiIT1jLmxhc3RhY3RpdmVfJiYtMSE9Yy5sYXN0YWN0aXZlXyYmYy5hY3RpdmF0ZVNvdXJjZShjLmdldFNvdXJjZUJ5SWQoYy5sYXN0YWN0aXZlXyksXHJcbiExKSxjLmxhc3RhY3RpdmVfPWIpOmMubGFzdGFjdGl2ZV89LTEsYy5hY3RpdmF0ZVNvdXJjZShjLmdldFNvdXJjZUJ5SWQoYiksYSkudGhlbihmdW5jdGlvbihiKXtkKGE/XCJSZW1vdGVBcHBsaWNhdGlvbi1cIitiOmIpfSlbXCJjYXRjaFwiXShmdW5jdGlvbigpe2UoKX0pKTplKCl9KX07cmV0dXJuIGF9KCk7YS5TY3JlZW5TaGFyaW5nVmRhPW07dmFyIEQ9ZnVuY3Rpb24oKXtmdW5jdGlvbiBhKCl7fWEuV2lkdGg9MTQwO2EuSGVpZ2h0PTkwO3JldHVybiBhfSgpO2I9ZnVuY3Rpb24oKXtmdW5jdGlvbiBhKGIsYyxkLGUsZyxoLGssbSxuLGwpe3RoaXMudW5pcXVlaWRfPXkubmV4dElkXysrO3RoaXMuc3JjaWRfPWI7dGhpcy5kZXZpY2VpZF89Yzt0aGlzLnR5cGVfPWQ7dGhpcy5pbWFnZWRhdGFfPWU7dGhpcy5pY29uXz1nO3RoaXMubmFtZV89aDt0aGlzLmh3bmRfPWs7dGhpcy5vcmlnaW5fPW07dGhpcy5jYXB0aW9uXz1uO3RoaXMucGlkXz1sfWEucHJvdG90eXBlLnVzZXJfZnJpZW5kbHlfaWQ9XHJcbmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29uc3RydWN0b3IubmFtZStcIltcIit0aGlzLnVuaXF1ZWlkXytcIl1cIn07T2JqZWN0LmRlZmluZVByb3BlcnR5KGEucHJvdG90eXBlLFwic3JjaWRcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc3JjaWRffSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLnByb3RvdHlwZSxcImh3bmRcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaHduZF99LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEucHJvdG90eXBlLFwib3JpZ2luXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLm9yaWdpbl99LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEucHJvdG90eXBlLFwicGlkXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnBpZF99LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSk7YS5wcm90b3R5cGUuZ2V0SWQ9XHJcbmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudW5pcXVlaWRffTthLnByb3RvdHlwZS5nZXREZXZpY2VJZD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmRldmljZWlkX307T2JqZWN0LmRlZmluZVByb3BlcnR5KGEucHJvdG90eXBlLFwiZGV2aWNlaWRcIix7c2V0OmZ1bmN0aW9uKGEpe3RoaXMuZGV2aWNlaWRfPWF9LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSk7YS5wcm90b3R5cGUuZ2V0VHlwZT1mdW5jdGlvbigpe3JldHVybiAyfTthLnByb3RvdHlwZS5nZXRQcmV2aWV3PWZ1bmN0aW9uKGEsYixjKXtrLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuZ2V0UHJldmlldygpIGNhbGxlZCwgd2lkdGg6XCIrYStcIiBoZWlnaHQ6XCIrYitcIiBhc0ltYWdlOlwiK2MpO3JldHVybiBQcm9taXNlLnJlamVjdChudWxsKX07YS5wcm90b3R5cGUuc2V0UHJldmlldz1mdW5jdGlvbihhKXt0aGlzLmltYWdlZGF0YV89YX07YS5wcm90b3R5cGUuZ2V0UHJldmlld0FzeW5jPWZ1bmN0aW9uKGEsXHJcbmIsYyl7ay5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLmdldFByZXZpZXdBc3luYygpIGNhbGxlZCwgd2lkdGg6XCIrYStcIiBoZWlnaHQ6XCIrYik7cmV0dXJuITA9PT1jPyhhPWgodGhpcy5pbWFnZWRhdGFfLEQuV2lkdGgsRC5IZWlnaHQpLFByb21pc2UucmVzb2x2ZSh7ZGF0YTphLnNyYy5yZXBsYWNlKC9eZGF0YTppbWFnZVxcLyhwbmd8anBnKTtiYXNlNjQsLyxcIlwiKX0pKTpQcm9taXNlLnJlc29sdmUodGhpcy5pbWFnZWRhdGFfKX07YS5wcm90b3R5cGUuZ2V0UHJldmlld0ltYWdlPWZ1bmN0aW9uKGEsYixjKXtrLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuZ2V0UHJldmlld0ltYWdlKCkgY2FsbGVkLCB3aWR0aDpcIitiK1wiIGhlaWdodDpcIitjKTtyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGQodGhpcy5pbWFnZWRhdGFfLGEsYixjKSl9O2EucHJvdG90eXBlLmdldERlc2NyaXB0aW9uPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubmFtZV99O2EucHJvdG90eXBlLnNldERlc2NyaXB0aW9uPVxyXG5mdW5jdGlvbihhKXt0aGlzLm5hbWVfPWF9O2EucHJvdG90eXBlLmdldEljb249ZnVuY3Rpb24oYSxiLGMpe3JldHVybiEwPT09Yz8oYT1oKHRoaXMuaWNvbl8sRC5XaWR0aCxELkhlaWdodCksUHJvbWlzZS5yZXNvbHZlKHtkYXRhOmEuc3JjLnJlcGxhY2UoL15kYXRhOmltYWdlXFwvKHBuZ3xqcGcpO2Jhc2U2NCwvLFwiXCIpfSkpOlByb21pc2UucmVzb2x2ZSh0aGlzLmljb25fKX07YS5wcm90b3R5cGUuZ2V0SWNvbkltYWdlPWZ1bmN0aW9uKGEsYixjKXtrLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuZ2V0SWNvbkltYWdlKCkgY2FsbGVkLCB3aWR0aDpcIitiK1wiIGhlaWdodDpcIitjKTtyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGQodGhpcy5pY29uXyxhLFwidW5kZWZpbmVkXCIhPT10eXBlb2YgYj9iOnRoaXMuaWNvbl8ud2lkdGgsXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjP2M6dGhpcy5pY29uXy5oZWlnaHQpKX07YS5wcm90b3R5cGUuc2V0SWNvbj1mdW5jdGlvbihhKXt0aGlzLmljb25fPVxyXG5hfTthLnByb3RvdHlwZS5nZXRCb3VuZHM9ZnVuY3Rpb24oKXtyZXR1cm57eDowLHk6MCx3aWR0aDowLGhlaWdodDowfX07YS5wcm90b3R5cGUuZXF1aXZhbGVudD1mdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5waWRfPT09YS5waWRfJiZ0aGlzLmh3bmRfPT09YS5od25kX307cmV0dXJuIGF9KCk7YS5TY3JlZW5Tb3VyY2VWZGE9Yjt2YXIgeT1mdW5jdGlvbihhKXtmdW5jdGlvbiBiKGMsZCxlKXtjPWEuY2FsbCh0aGlzLGMsbi5jbGFzc19pZF90LlNjcmVlblNvdXJjZSxkLGUpfHx0aGlzO2Muc2NyZWVuc2hhcmVfPW5ldyB6LlNjcmVlblNoYXJlVXRpbDtjLnVuaXF1ZWlkXz1iLm5leHRJZF8rKztrLmxvZ2dlci5sb2coYy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuY29uc3RydWN0b3JcIik7cmV0dXJuIGN9dyhiLGEpO2IucHJvdG90eXBlLnVzZXJfZnJpZW5kbHlfaWQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lK1wiW1wiK3RoaXMudW5pcXVlaWRfK1wiXVwifTtiLnByb3RvdHlwZS50b0pTSW1hZ2VEYXRhPVxyXG5mdW5jdGlvbihhKXt2YXIgYj1hdG9iKGEuZGF0YS50b1N0cmluZygpKSxiPXRoaXMuc2NyZWVuc2hhcmVfLnN0cjJhYihiKSxiPW5ldyBVaW50OENsYW1wZWRBcnJheShiLDAsYi5ieXRlTGVuZ3RoKTt0aGlzLmltYWdlZGF0YV89bmV3IEltYWdlRGF0YShiLGEud2lkdGgsYS5oZWlnaHQpfTtiLnByb3RvdHlwZS5zeW5jQmFycmllcj1mdW5jdGlvbigpe3ZhciBhPXRoaXM7ay5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLnN5bmNCYXJyaWVyKCkgY2FsbGVkLlwiKTtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24oYixjKXthLnN5bmNCYXJyaWVyRGVlcChiLGMpJiZhLndhaXRVbnRpbENvbm5lY3RlZChhLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5zeW5jQmFycmllclwiKS50aGVuKGZ1bmN0aW9uKCl7UHJvbWlzZS5hbGwoW2EucmVtb3RlSW52b2tlKCExLG4ubWV0aG9kX2lkX1NjcmVlblNvdXJjZV90LnNyY2lkLDApLGEucmVtb3RlSW52b2tlKCExLG4ubWV0aG9kX2lkX1NjcmVlblNvdXJjZV90LmRldmljZWlkLFxyXG5cIlwiKSxhLnJlbW90ZUludm9rZSghMSxuLm1ldGhvZF9pZF9TY3JlZW5Tb3VyY2VfdC50eXBlLDApLGEucmVtb3RlSW52b2tlKCExLG4ubWV0aG9kX2lkX1NjcmVlblNvdXJjZV90Lm5hbWUsXCJcIiksYS5yZW1vdGVJbnZva2UoITEsbi5tZXRob2RfaWRfU2NyZWVuU291cmNlX3QuaW1hZ2VkYXRhKSxhLnJlbW90ZUludm9rZSghMSxuLm1ldGhvZF9pZF9TY3JlZW5Tb3VyY2VfdC5od25kLFwiXCIpLGEucmVtb3RlSW52b2tlKCExLG4ubWV0aG9kX2lkX1NjcmVlblNvdXJjZV90Lm9yaWdpbiwwKSxhLnJlbW90ZUludm9rZSghMSxuLm1ldGhvZF9pZF9TY3JlZW5Tb3VyY2VfdC5jYXB0aW9uLFwiXCIpLGEucmVtb3RlSW52b2tlKCExLG4ubWV0aG9kX2lkX1NjcmVlblNvdXJjZV90LnBpZCwwKV0pLnRoZW4oZnVuY3Rpb24oYil7ay5sb2dnZXIubG9nKGEudXNlcl9mcmllbmRseV9pZCgpK1wiLnN5bmNCYXJyaWVyKCk6IHN1Y2Nlc3MuXCIpO3ZhciBjO2I9Yi5tYXAoZnVuY3Rpb24oYil7cmV0dXJuIGEucGFyYW0wKGIpfSk7XHJcbmEuc3JjaWRfPWJbMF07YS5kZXZpY2VpZF89YlsxXTthLnR5cGVfPWJbMl07YS5uYW1lXz1iWzNdO2M9Yls0XTthLmh3bmRfPWJbNV07YS5vcmlnaW5fPWJbNl07YS5jYXB0aW9uXz1iWzddO2EucGlkXz1iWzhdO2EudG9KU0ltYWdlRGF0YShjKTthLnJlbW90ZUludm9rZSghMSxuLm1ldGhvZF9pZF9TY3JlZW5Tb3VyY2VfdC5ib3VuZHMsMCkudGhlbihmdW5jdGlvbihiKXthLmJvdW5kc189YS5wYXJhbTAoYik7YS5zeW5jQmFycmllclJlc29sdmUoYSl9KVtcImNhdGNoXCJdKGZ1bmN0aW9uKGIpe2EuYm91bmRzXz12b2lkIDA7Yj1hLmxvZ1JlbW90ZUludm9rZUVycm9yKGIsXCIucHJvcC5zeW5jQmFycmllcigpIGdldEJvdW5kcyBmYWlsZWQuXCIpO2Euc3luY0JhcnJpZXJSZWplY3QoYil9KX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oYil7Yj1hLmxvZ1JlbW90ZUludm9rZUVycm9yKGIsXCIucHJvcC5zeW5jQmFycmllcigpIGZhaWxlZC5cIik7YS5zeW5jQmFycmllclJlamVjdChiKX0pfSlbXCJjYXRjaFwiXShmdW5jdGlvbihiKXtiPVxyXG5hLmxvZ1JlbW90ZUludm9rZUVycm9yKGIsXCIuc3luY0JhcnJpZXIoKSBmYWlsZWQuXCIpO2Euc3luY0JhcnJpZXJSZWplY3QoYil9KX0pfTtiLnByb3RvdHlwZS5nZXRJZD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnVuaXF1ZWlkX307Yi5wcm90b3R5cGUuZ2V0RGV2aWNlSWQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5kZXZpY2VpZF99O2IucHJvdG90eXBlLmdldFR5cGU9ZnVuY3Rpb24oKXtyZXR1cm4gMX07Yi5wcm90b3R5cGUuZ2V0UHJldmlldz1mdW5jdGlvbihhLGIsYyl7ay5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLmdldFByZXZpZXcoKSBjYWxsZWQsIHdpZHRoOlwiK2ErXCIgaGVpZ2h0OlwiK2IrXCIgYXNJbWFnZTpcIitjKTtyZXR1cm4gUHJvbWlzZS5yZWplY3QobnVsbCl9O2IucHJvdG90eXBlLmdldFByZXZpZXdBc3luYz1mdW5jdGlvbihhLGIsYyl7ay5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLmdldFByZXZpZXdBc3luYygpIGNhbGxlZCwgd2lkdGg6XCIrXHJcbmErXCIgaGVpZ2h0OlwiK2IpO3JldHVybiEwPT09Yz8oYT1oKHRoaXMuaW1hZ2VkYXRhXyxELldpZHRoLEQuSGVpZ2h0KSxQcm9taXNlLnJlc29sdmUoe2RhdGE6YS5zcmMucmVwbGFjZSgvXmRhdGE6aW1hZ2VcXC8ocG5nfGpwZyk7YmFzZTY0LC8sXCJcIil9KSk6UHJvbWlzZS5yZXNvbHZlKHRoaXMuaW1hZ2VkYXRhXyl9O2IucHJvdG90eXBlLmdldFByZXZpZXdJbWFnZT1mdW5jdGlvbihhLGIsYyl7ay5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLmdldFByZXZpZXdJbWFnZSgpIGNhbGxlZCwgd2lkdGg6XCIrYitcIiBoZWlnaHQ6XCIrYyk7cmV0dXJuIFByb21pc2UucmVzb2x2ZShkKHRoaXMuaW1hZ2VkYXRhXyxhLGIsYykpfTtiLnByb3RvdHlwZS5nZXREZXNjcmlwdGlvbj1mdW5jdGlvbigpe3JldHVybiB0aGlzLm5hbWVffTtiLnByb3RvdHlwZS5nZXRJY29uPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLmltYWdlZGF0YV8pfTtiLnByb3RvdHlwZS5nZXRCb3VuZHM9XHJcbmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYm91bmRzX3x8e3g6MCx5OjAsd2lkdGg6MCxoZWlnaHQ6MH19O2IubmV4dElkXz1CLk1vbml0b3JzQW5kQXBwcztyZXR1cm4gYn0ocS5Qcm94eU9iamVjdCk7YS5TY3JlZW5Tb3VyY2U9eX0sNjkxOmZ1bmN0aW9uKGIsYSxjKXtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTthLlNjcmVlblNoYXJlVXRpbD1hLkJpdG1hcD1hLkJpdG1hcEluZm9IZWFkZXI9YS5CaXRtYXBGaWxlSGVhZGVyPWEuc2V0QWN0aXZlUmVzcERhdGE9YS5zZXRBY3RpdmVSZXFEYXRhPWEuZ2V0U291cmNlc1JlcURhdGE9YS5zc2hhcmVfc3RhdGU9YS5zc2hhcmVfY21kPXZvaWQgMDt2YXIgZT1jKDk0NiksbD1jKDk3MyksaD1jKDg1MSksZDsoZnVuY3Rpb24oYSl7YVthLlVua25vd249MF09XCJVbmtub3duXCI7YVthLkNhcD0xXT1cIkNhcFwiO2FbYS5HZXRTb3VyY2VzPTJdPVwiR2V0U291cmNlc1wiO2FbYS5TZXRBY3RpdmU9M109XCJTZXRBY3RpdmVcIjtcclxuYVthLlRvcG9sb2d5Q2hhbmdlZD00XT1cIlRvcG9sb2d5Q2hhbmdlZFwifSkoZD1hLnNzaGFyZV9jbWR8fChhLnNzaGFyZV9jbWQ9e30pKTt2YXIgdzsoZnVuY3Rpb24oYSl7YVthLlVua25vd249MF09XCJVbmtub3duXCI7YVthLkluaXRpYWxpemVkPTFdPVwiSW5pdGlhbGl6ZWRcIjthW2EuRXJyb3I9Ml09XCJFcnJvclwifSkodz1hLnNzaGFyZV9zdGF0ZXx8KGEuc3NoYXJlX3N0YXRlPXt9KSk7Yj1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihhKXt0aGlzLm9yaWdpbj1hfX0oKTthLmdldFNvdXJjZXNSZXFEYXRhPWI7Yj1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihhLGIsYyxkLGUsaCxrKXt0aGlzLnNyY2lkPWE7dGhpcy5od25kPWI7dGhpcy5vcmlnaW49Yzt0aGlzLnBpZD1kO3RoaXMuYm9yZGVyPWU7dGhpcy5jdXJzb3I9aDt0aGlzLmFjdGl2YXRlPWt9fSgpO2Euc2V0QWN0aXZlUmVxRGF0YT1iO3ZhciBxPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGEsYixjKXt0aGlzLnNyY2lkPVxyXG5hO3RoaXMub3JpZ2luPWI7dGhpcy5idWZmZXJpZD1jfX0oKTthLnNldEFjdGl2ZVJlc3BEYXRhPXE7dmFyIG49ZnVuY3Rpb24oKXtmdW5jdGlvbiBhKGIsYyxkLGUsZyl7dGhpcy5pZF89Yjt0aGlzLnJlc29sdmVfPWM7dGhpcy5yZWplY3RfPWQ7dGhpcy5jbWRfPWU7dGhpcy5kYXRhXz1nO3RoaXMuc2VudF89ITE7dGhpcy50aW1lb3V0SWQ9dm9pZCAwfWEucHJvdG90eXBlLnVzZXJfZnJpZW5kbHlfaWQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lK1wiW1wiK3RoaXMuaWRfK1wiXVwifTthLnByb3RvdHlwZS5jbWRTdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jbWRfPT1kLkNhcD9cIkNhcFwiOnRoaXMuY21kXz09ZC5HZXRTb3VyY2VzP1wiR2V0U291cmNlc1wiOnRoaXMuY21kXz09ZC5TZXRBY3RpdmU/XCJTZXRBY3RpdmVcIjpcIlVua25vd25cIn07cmV0dXJuIGF9KCksaz1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbigpe319KCk7YS5CaXRtYXBGaWxlSGVhZGVyPWs7XHJcbnZhciBwPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKCl7fX0oKTthLkJpdG1hcEluZm9IZWFkZXI9cDt2YXIgej1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbigpe319KCk7YS5CaXRtYXA9ejtiPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gYSgpe3RoaXMuY21kcXVlXz1bXX1hLnByb3RvdHlwZS5yZXFpZD1mdW5jdGlvbigpe3JldHVybiBhLm5leHRJZCsrfTthLnByb3RvdHlwZS51c2VyX2ZyaWVuZGx5X2lkPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29uc3RydWN0b3IubmFtZStcIltdXCJ9O2EucHJvdG90eXBlLnN0YXRlU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIGEuc3RhdGVfPT13LkluaXRpYWxpemVkP1wiSW5pdGlhbGl6ZWRcIjphLnN0YXRlXz09dy5FcnJvcj9cIkVycm9yXCI6XCJVbmtub3duXCJ9O2EucHJvdG90eXBlLnJlc2V0PWZ1bmN0aW9uKCl7YS5zdGF0ZV89dy5Vbmtub3duO3RoaXMuY21kcXVlXz1bXX07YS5wcm90b3R5cGUuZGlzcGF0Y2hDbWRzPWZ1bmN0aW9uKCl7dmFyIGI9XHJcbnRoaXM7YS5zdGF0ZV89PXcuSW5pdGlhbGl6ZWQ/dGhpcy5jbWRxdWVfLmZvckVhY2goZnVuY3Rpb24oYSl7MD09YS5zZW50XyYmKGEuY21kXz09ZC5HZXRTb3VyY2VzPyhiLldTU2VuZEdldFNvdXJjZXMoYS5pZF8sYS5kYXRhXyksYS5zZW50Xz0hMCxhLnRpbWVvdXRJZD1zZXRUaW1lb3V0KGIuYWJvcnRDbWQuYmluZChiLGEuaWRfKSw1RTMpKTphLmNtZF89PWQuU2V0QWN0aXZlPyhiLldTU2VuZFNldEFjdGl2ZShhLmlkXyxhLmRhdGFfKSxhLnNlbnRfPSEwLGEudGltZW91dElkPXNldFRpbWVvdXQoYi5hYm9ydENtZC5iaW5kKGIsYS5pZF8pLDVFMykpOmgubG9nZ2VyLmxvZyhhLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5kaXNwYXRjaENtZHMoKTogaW52YWxpZCBjbWQ6IFwiK2EuY21kU3RyaW5nKCkpKX0pOmEuc3RhdGVfPT13LkVycm9yPyh0aGlzLmNtZHF1ZV8uZm9yRWFjaChmdW5jdGlvbihhKXtoLmxvZ2dlci5sb2coYS51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuZGlzcGF0Y2hDbWRzKCk6IHB1cmdpbmcgY21kOiBcIitcclxuYS5jbWRTdHJpbmcoKSk7YS5yZWplY3RfKCl9KSx0aGlzLmNtZHF1ZV89W10pOmgubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5kaXNwYXRjaENtZHMoKTogaW52YWxpZCBzdGF0ZTogXCIrdGhpcy5zdGF0ZVN0cmluZygpKX07YS5wcm90b3R5cGUuYWJvcnRDbWQ9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5jbWRxdWVfLmZpbmRJbmRleChmdW5jdGlvbihiKXtyZXR1cm4gYi5pZF89PT1hfSk7LTEhPT1iPyhiPXRoaXMuY21kcXVlXy5zcGxpY2UoYiwxKVswXSxoLmxvZ2dlci5sb2coYi51c2VyX2ZyaWVuZGx5X2lkKCkrTmFOK2IuY21kU3RyaW5nKCkrXCJdOiBhYm9ydGVkIGR1ZSB0byBub25yZXNwb25zaXZlIFdTIEFnZW50IVwiKSxiLmNtZF89PT1kLlNldEFjdGl2ZSYmYi5kYXRhXy5hY3RpdmF0ZSYmbC5TY3JlZW5TaGFyaW5nLnNjcmVlblNoYXJpbmdJbnN0YW5jZSgpLnN0b3BBcHBzaGFyZSgpLGIucmVqZWN0XygpKTpoLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXHJcblwiLmFib3J0Q21kKCk6IENtZCBub3QgZm91bmQhXCIpfTthLnByb3RvdHlwZS5maW5hbGl6ZUNtZD1mdW5jdGlvbihhLGIsYyl7Zm9yKHZhciBkPTA7ZDx0aGlzLmNtZHF1ZV8ubGVuZ3RoO2QrKyl7dmFyIGU9dGhpcy5jbWRxdWVfW2RdO2lmKHZvaWQgMCE9YiYmYj09ZS5pZF8mJjE9PWUuc2VudF98fHZvaWQgMD09YiYmMT09ZS5zZW50Xyl7Y2xlYXJUaW1lb3V0KGUudGltZW91dElkKTtoLmxvZ2dlci5sb2coZS51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuZmluYWxpemVDbWQoKTogcHVyZ2luZyBjbWQ6IFwiK2UuY21kU3RyaW5nKCkpO2E/dm9pZCAwIT1jP2UucmVzb2x2ZV8oYyk6ZS5yZXNvbHZlXygpOmUucmVqZWN0XygpO3RoaXMuY21kcXVlXy5zcGxpY2UoZCwxKTticmVha319fTthLnByb3RvdHlwZS5vbkluaXRpYWxpemVkPWZ1bmN0aW9uKGIpe2gubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5vbkluaXRpYWxpemVkKCk6IGluaXQ6IFwiK2IrXCIgc3RhdGU6XCIrdGhpcy5zdGF0ZVN0cmluZygpKTtcclxuYS5zdGF0ZV8hPXcuSW5pdGlhbGl6ZWQmJihhLnN0YXRlXz1iP3cuSW5pdGlhbGl6ZWQ6dy5FcnJvcik7dGhpcy5kaXNwYXRjaENtZHMoKX07YS5wcm90b3R5cGUub25Jbml0Q29tcGxldGU9ZnVuY3Rpb24oKXtoLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIub25Jbml0Q29tcGxldGUoKTogc3RhdGU6XCIrdGhpcy5zdGF0ZVN0cmluZygpKTthLnN0YXRlXz09dy5Vbmtub3duJiYoYS5zdGF0ZV89dy5FcnJvcixoLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIub25Jbml0Q29tcGxldGUoKTogaXRlbXMgaW4gcXVldWU6XCIrdGhpcy5jbWRxdWVfLmxlbmd0aCksdGhpcy5kaXNwYXRjaENtZHMoKSl9O2EucHJvdG90eXBlLm9uRXJyb3I9ZnVuY3Rpb24oYil7aC5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLm9uRXJyb3IoKTogc3RhdGU6IFwiK3RoaXMuc3RhdGVTdHJpbmcoKSk7YS5zdGF0ZV89PXcuVW5rbm93bj8oYS5zdGF0ZV89XHJcbncuRXJyb3IsdGhpcy5kaXNwYXRjaENtZHMoKSk6YS5zdGF0ZV89PXcuSW5pdGlhbGl6ZWQmJnRoaXMuZmluYWxpemVDbWQoITEsYil9O2EucHJvdG90eXBlLmFiMnN0cj1mdW5jdGlvbihhKXtyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLG5ldyBVaW50OEFycmF5KGEpKX07YS5wcm90b3R5cGUuc3RyMmFiPWZ1bmN0aW9uKGEpe2Zvcih2YXIgYj1uZXcgQXJyYXlCdWZmZXIoYS5sZW5ndGgpLGM9bmV3IFVpbnQ4QXJyYXkoYiksZD0wLGU9YS5sZW5ndGg7ZDxlO2QrKyljW2RdPWEuY2hhckNvZGVBdChkKTtyZXR1cm4gYn07YS5wcm90b3R5cGUuZ2V0Qk1QPWZ1bmN0aW9uKGEpe3ZhciBiPW5ldyBEYXRhVmlldyhhKSxjPW5ldyB6O2MuZmlsZWhlYWRlcj1uZXcgaztjLmZpbGVoZWFkZXIuYmZUeXBlPWIuZ2V0VWludDE2KDAsITApO2MuZmlsZWhlYWRlci5iZlNpemU9Yi5nZXRVaW50MzIoMiwhMCk7Yy5maWxlaGVhZGVyLmJmUmVzZXJ2ZWQxPWIuZ2V0VWludDE2KDYsXHJcbiEwKTtjLmZpbGVoZWFkZXIuYmZSZXNlcnZlZDI9Yi5nZXRVaW50MTYoOCwhMCk7Yy5maWxlaGVhZGVyLmJmT2ZmQml0cz1iLmdldFVpbnQzMigxMCwhMCk7Yy5pbmZvaGVhZGVyPW5ldyBwO2MuaW5mb2hlYWRlci5iaVNpemU9Yi5nZXRVaW50MzIoMTQsITApO2MuaW5mb2hlYWRlci5iaVdpZHRoPWIuZ2V0VWludDMyKDE4LCEwKTtjLmluZm9oZWFkZXIuYmlIZWlnaHQ9Yi5nZXRVaW50MzIoMjIsITApO2MuaW5mb2hlYWRlci5iaVBsYW5lcz1iLmdldFVpbnQxNigyNiwhMCk7Yy5pbmZvaGVhZGVyLmJpQml0Q291bnQ9Yi5nZXRVaW50MTYoMjgsITApO2MuaW5mb2hlYWRlci5iaUNvbXByZXNzaW9uPWIuZ2V0VWludDMyKDMwLCEwKTtjLmluZm9oZWFkZXIuYmlTaXplSW1hZ2U9Yi5nZXRVaW50MzIoMzQsITApO2MuaW5mb2hlYWRlci5iaVhQZWxzUGVyTWV0ZXI9Yi5nZXRVaW50MzIoMzgsITApO2MuaW5mb2hlYWRlci5iaVlQZWxzUGVyTWV0ZXI9Yi5nZXRVaW50MzIoNDIsITApO2MuaW5mb2hlYWRlci5iaUNsclVzZWQ9XHJcbmIuZ2V0VWludDMyKDQ2LCEwKTtjLmluZm9oZWFkZXIuYmlDbHJJbXBvcnRhbnQ9Yi5nZXRVaW50MzIoNTAsITApO2I9Yy5maWxlaGVhZGVyLmJmT2ZmQml0cztjLnN0cmlkZT00Kk1hdGguZmxvb3IoKGMuaW5mb2hlYWRlci5iaUJpdENvdW50KmMuaW5mb2hlYWRlci5iaVdpZHRoKzMxKS8zMik7Yy5waXhlbHM9bmV3IFVpbnQ4QXJyYXkoYSxiKTtyZXR1cm4gY307YS5wcm90b3R5cGUuY29udmVydFRvSW1hZ2VEYXRhPWZ1bmN0aW9uKGEpe3ZhciBiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIikuZ2V0Q29udGV4dChcIjJkXCIpLGM9YS5pbmZvaGVhZGVyLmJpV2lkdGgsZD1hLmluZm9oZWFkZXIuYmlIZWlnaHQsYj1iLmNyZWF0ZUltYWdlRGF0YShjLGQpLGU9Yi5kYXRhLGc9YS5waXhlbHM7YT1hLnN0cmlkZTtmb3IodmFyIGg9MDtoPGQ7KytoKWZvcih2YXIgaz0wO2s8YzsrK2spe3ZhciBsPTQqKGsrYyooZC1oKSksbj00KmsrYSpoO2VbbF09Z1tuKzJdO2VbbCsxXT1nW24rXHJcbjFdO2VbbCsyXT1nW25dO2VbbCszXT0yNTV9cmV0dXJuIGJ9O2EucHJvdG90eXBlLm9uR2V0U291cmNlcz1mdW5jdGlvbihhLGIpe3RoaXMuc291cmNlc189W107dmFyIGM9dGhpcztiLnNvdXJjZXMuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLmltYWdlLGQ9YXRvYihiLmRhdGEpLGQ9Yy5zdHIyYWIoZCksZD1uZXcgVWludDhDbGFtcGVkQXJyYXkoZCwwLGQuYnl0ZUxlbmd0aCksYj1uZXcgSW1hZ2VEYXRhKGQsYi53aWR0aCxiLmhlaWdodCksZD1hLmljb24sZT1hdG9iKGQuZGF0YSksZT1jLnN0cjJhYihlKSxlPW5ldyBVaW50OENsYW1wZWRBcnJheShlLDAsZS5ieXRlTGVuZ3RoKSxkPW5ldyBJbWFnZURhdGEoZSxkLndpZHRoLGQuaGVpZ2h0KTthPW5ldyBsLlNjcmVlblNvdXJjZVZkYShhLnNyY2lkLGEuZGV2aWNkaWQsYS50eXBlLGIsZCxhLm5hbWUsYS5od25kLGEub3JpZ2luLGEuY2FwdGlvbixhLnBpZCk7Yy5zb3VyY2VzXy5wdXNoKGEpfSk7dGhpcy5maW5hbGl6ZUNtZCghMCxcclxuYSx0aGlzLnNvdXJjZXNfKX07YS5wcm90b3R5cGUuZ2V0U291cmNlcz1mdW5jdGlvbihiKXt2YXIgYz10aGlzO3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihlLGgpe2lmKGEuc3RhdGVfIT13LkVycm9yKXt2YXIgaz1uZXcgbihjLnJlcWlkKCksZSxoLGQuR2V0U291cmNlcyxiKTtjLmNtZHF1ZV8ucHVzaChrKX1lbHNlIGgoKTthLnN0YXRlXz09dy5Jbml0aWFsaXplZCYmYy5kaXNwYXRjaENtZHMoKX0pfTthLnByb3RvdHlwZS5vblNldEFjdGl2ZT1mdW5jdGlvbihhLGIpe3ZhciBjPW5ldyBxKGIuc3JjaWQsYi5vcmlnaW4sYi5idWZmZXJpZCk7dGhpcy5maW5hbGl6ZUNtZCghMCxhLGMpfTthLnByb3RvdHlwZS5zZXRBY3RpdmU9ZnVuY3Rpb24oYil7dmFyIGM9dGhpcztyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24oZSxoKXtpZihhLnN0YXRlXyE9dy5FcnJvcil7dmFyIGs9bmV3IG4oYy5yZXFpZCgpLGUsaCxkLlNldEFjdGl2ZSxiKTtjLmNtZHF1ZV8ucHVzaChrKX1lbHNlIGgoKTtcclxuYS5zdGF0ZV89PXcuSW5pdGlhbGl6ZWQmJmMuZGlzcGF0Y2hDbWRzKCl9KX07YS5wcm90b3R5cGUuc2V0VG9wb2xvZ3lDaGFuZ2VDQj1mdW5jdGlvbihhKXt0aGlzLm9ud2luZG93dG9wb2xvZ3ljaGFuZ2VkXz1hfTthLnByb3RvdHlwZS5vblRvcGxvZ3lDaGFuZ2VkPWZ1bmN0aW9uKCl7aWYodGhpcy5vbndpbmRvd3RvcG9sb2d5Y2hhbmdlZF8pdGhpcy5vbndpbmRvd3RvcG9sb2d5Y2hhbmdlZF8oKX07YS5wcm90b3R5cGUuV1NTZW5kR2V0U291cmNlcz1mdW5jdGlvbihhLGIpe3RyeXtlLmdldFJlZGlyZWN0b3IoKS5XU1NlbmRPYmplY3Qoe3Y6XCJhcHBzaGFyaW5nXCIsaGRyOntjb21tYW5kOmQuR2V0U291cmNlcyxpZDphfSxkYXRhOntvcmlnaW46Yi5vcmlnaW59fSl9Y2F0Y2goYyl7aC5sb2dnZXIubG9nKGMpfX07YS5wcm90b3R5cGUuV1NTZW5kU2V0QWN0aXZlPWZ1bmN0aW9uKGEsYil7dHJ5e2UuZ2V0UmVkaXJlY3RvcigpLldTU2VuZE9iamVjdCh7djpcImFwcHNoYXJpbmdcIixoZHI6e2NvbW1hbmQ6ZC5TZXRBY3RpdmUsXHJcbmlkOmF9LGRhdGE6e3NyY2lkOmIuc3JjaWQsaHduZDpiLmh3bmQsb3JpZ2luOmIub3JpZ2luLHBpZDpiLnBpZCxib3JkZXI6Yi5ib3JkZXIsY3Vyc29yOmIuY3Vyc29yLGFjdGl2YXRlOmIuYWN0aXZhdGV9fSl9Y2F0Y2goYyl7aC5sb2dnZXIubG9nKGMpfX07YS5zdGF0ZV89dy5Vbmtub3duO2EubmV4dElkPTA7cmV0dXJuIGF9KCk7YS5TY3JlZW5TaGFyZVV0aWw9Yn0sNTE3OmZ1bmN0aW9uKGIsYSl7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7YS5TdGF0cz1hLlN0YXRzUmVwb3J0PXZvaWQgMDt2YXIgYz1mdW5jdGlvbigpe2Z1bmN0aW9uIGEoKXt0aGlzLml0ZW1zPVtdfWEuZnJvbUpTT049ZnVuY3Rpb24oYil7Zm9yKHZhciBjPW5ldyBhLGw9MDtsPGIubGVuZ3RoO2wrKyl7dmFyIHE9ZS5mcm9tSlNPTihiW2xdKTtjLml0ZW1zLnB1c2gocSl9cmV0dXJuIGN9O2EudG9SVENTdGF0c1JlcG9ydD1mdW5jdGlvbihhKXtyZXR1cm4gYX07YS5wcm90b3R5cGUudG9KU09OPVxyXG5mdW5jdGlvbigpe3JldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLml0ZW1zKX07YS5wcm90b3R5cGUucmVzdWx0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaXRlbXN9O3JldHVybiBhfSgpO2EuU3RhdHNSZXBvcnQ9Yzt2YXIgZT1mdW5jdGlvbigpe2Z1bmN0aW9uIGEoKXt0aGlzLm5hbWVzXz1bXTt0aGlzLnN0YXRfPW5ldyBNYXA7dGhpcy5pZD1cIlwiO3RoaXMudGltZXN0YW1wPTA7dGhpcy50eXBlPVwiXCJ9YS5mcm9tSlNPTj1mdW5jdGlvbihiKXt2YXIgYz1uZXcgYTtjLmlkPWIuaWR8fFwiXCI7Yy50aW1lc3RhbXA9Yi50aW1lc3RhbXB8fFwiXCI7Yy50eXBlPWIudHlwZXx8XCJcIjtPYmplY3Qua2V5cyhiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1wiaWRcIiE9PWEmJlwidGltZXN0YW1wXCIhPT1hJiZcInR5cGVcIiE9PWEmJihjLm5hbWVzXy5wdXNoKGEpLGMuc3RhdF8uc2V0KGEsYlthXSkpfSk7cmV0dXJuIGN9O2EucHJvdG90eXBlLnRvSlNPTj1mdW5jdGlvbigpe3JldHVybiBKU09OLnN0cmluZ2lmeSh7aWQ6dGhpcy5pZCxcclxudGltZXN0YW1wOnRoaXMudGltZXN0YW1wLHR5cGU6dGhpcy50eXBlLHN0YXQ6dGhpcy5zdGF0X30pfTthLnByb3RvdHlwZS5uYW1lcz1mdW5jdGlvbigpe3JldHVybiB0aGlzLm5hbWVzX307YS5wcm90b3R5cGUuc3RhdD1mdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5zdGF0Xy5nZXQoYSl9O3JldHVybiBhfSgpO2EuU3RhdHM9ZX0sNzA0OmZ1bmN0aW9uKGIsYSxjKXt2YXIgZT10aGlzJiZ0aGlzLl9fZXh0ZW5kc3x8ZnVuY3Rpb24oKXt2YXIgYT1mdW5jdGlvbihiLGMpe2E9T2JqZWN0LnNldFByb3RvdHlwZU9mfHx7X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXkmJmZ1bmN0aW9uKGEsYil7YS5fX3Byb3RvX189Yn18fGZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjIGluIGIpYi5oYXNPd25Qcm9wZXJ0eShjKSYmKGFbY109YltjXSl9O3JldHVybiBhKGIsYyl9O3JldHVybiBmdW5jdGlvbihiLGMpe2Z1bmN0aW9uIGQoKXt0aGlzLmNvbnN0cnVjdG9yPWJ9YShiLGMpO2IucHJvdG90eXBlPVxyXG5udWxsPT09Yz9PYmplY3QuY3JlYXRlKGMpOihkLnByb3RvdHlwZT1jLnByb3RvdHlwZSxuZXcgZCl9fSgpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO2EuU3RyZWFtUmVzb2x1dGlvbj1hLlJlbW90ZUNhbGxDb25zdHJhaW50cz12b2lkIDA7dmFyIGw9Yyg1NTApLGg9Yyg2NTgpLGQ9Yyg4NTEpO2I9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oKXt9fSgpO2EuUmVtb3RlQ2FsbENvbnN0cmFpbnRzPWI7Yj1mdW5jdGlvbihhKXtmdW5jdGlvbiBiKCl7dmFyIGM9YS5jYWxsKHRoaXMsbnVsbCxsLmNsYXNzX2lkX3QuU3RyZWFtUmVzb2x1dGlvbiwwLGguUHJveHlNb2RlLkxvY2FsKXx8dGhpcztjLmxhc3RTZW50Q29uc3RyYWludHNfPW51bGw7cmV0dXJuIGN9ZShiLGEpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShiLnByb3RvdHlwZSxcIm9udXBkYXRlXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLm9udXBkYXRlX30sc2V0OmZ1bmN0aW9uKGEpe3ZhciBjPVxyXG50aGlzO3RoaXMub251cGRhdGVfPWE7dGhpcy53YWl0VW50aWxDb25uZWN0ZWQodGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIub251cGRhdGVcIikudGhlbihmdW5jdGlvbigpe3ZhciBhPWMucmVnaXN0ZXJDYWxsYmFja3MoITEsYy5pc051bGxDYWxsYmFjayhjLm9udXBkYXRlXyksbC5tZXRob2RfaWRfU3RyZWFtUmVzb2x1dGlvbl90Lm9udXBkYXRlKTthLnRoZW4oZnVuY3Rpb24oYSl7YT1hLnBhcmFtczt2YXIgZT1hWzBdO2Euc2xpY2UoMSk7ZC5sb2dnZXIubG9nKGMudXNlcl9mcmllbmRseV9pZCgpK1wiLm9udXBkYXRlXCIsSlNPTi5zdHJpbmdpZnkoZSkpO2MubGFzdFNlbnRDb25zdHJhaW50c18mJkpTT04uc3RyaW5naWZ5KGMubGFzdFNlbnRDb25zdHJhaW50c18pPT1KU09OLnN0cmluZ2lmeShlKT9kLmxvZ2dlci5sb2coYy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIub251cGRhdGUgY29uc3RyYWludHMgdW5jaGFuZ2VkLCBpZ25vcmluZ1wiKTpjLm9udXBkYXRlXyYmKGIuaXNWYWxpZFJlbW90ZUNvbnN0cmFpbnRzKGUpP1xyXG4oYy5sYXN0U2VudENvbnN0cmFpbnRzXz1lLGMub251cGRhdGVfKGMudG9JQ2FsbENvbnN0cmFpbnRzKGMubGFzdFNlbnRDb25zdHJhaW50c18pKSk6ZC5sb2dnZXIubG9nKGMudXNlcl9mcmllbmRseV9pZCgpK1wiLm9udXBkYXRlIGludmFsaWQgUmVtb3RlQ2FsbENvbnN0cmFpbnRzXCIpKX0pO3JldHVybiBjLnJlbW90ZUludm9rZSghMCxsLm1ldGhvZF9pZF9TdHJlYW1SZXNvbHV0aW9uX3Qub251cGRhdGUsYS5zdWNjZXNzKX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oKXtyZXR1cm4gZC5sb2dnZXIubG9nKGMudXNlcl9mcmllbmRseV9pZCgpK1wiLm9udXBkYXRlLCBjb3VsZCBub3Qgc2V0IGxpc3RlbmVyXCIpfSl9LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSk7Yi5wcm90b3R5cGUudG9JQ2FsbENvbnN0cmFpbnRzPWZ1bmN0aW9uKGEpe3ZhciBiPXttYXhQYXJ0aWNpcGFudFJlc29sdXRpb25zOm51bGx9O2lmKGEubWF4X3BhcnRpY2lwYW50X3Jlc29sdXRpb25zX2R5bmFtaWMpe2IubWF4UGFydGljaXBhbnRSZXNvbHV0aW9ucz1cclxue307Zm9yKHZhciBjPTAsZT1hLm1heF9wYXJ0aWNpcGFudF9yZXNvbHV0aW9uc19keW5hbWljO2M8ZS5sZW5ndGg7YysrKXt2YXIgZz1lW2NdO2IubWF4UGFydGljaXBhbnRSZXNvbHV0aW9uc1tnLmNvdW50XT1nLnJlc29sdXRpb259fWVsc2UgYS5tYXhfcGFydGljaXBhbnRfcmVzb2x1dGlvbnNfc3RhdGljJiYoYi5tYXhQYXJ0aWNpcGFudFJlc29sdXRpb25zPWEubWF4X3BhcnRpY2lwYW50X3Jlc29sdXRpb25zX3N0YXRpYyk7Yi5tYXhJbmNvbWluZ1N0cmVhbXM9YS5tYXhfaW5jb21pbmdfc3RyZWFtcztiLm1heE91dGdvaW5nUmVzb2x1dGlvbj1hLm1heF9vdXRnb2luZ19yZXNvbHV0aW9uO2IubWF4U2ltdWxjYXN0TGF5ZXJzPWEubWF4X3NpbXVsY2FzdF9sYXllcnM7ZC5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLnRvSUNhbGxDb25zdHJhaW50czogXCIrSlNPTi5zdHJpbmdpZnkoYikpO3JldHVybiBifTtiLmlzVmFsaWRSZW1vdGVDb25zdHJhaW50cz1mdW5jdGlvbihhKXtyZXR1cm4gbnVsbCE9XHJcbmEmJihudWxsIT1hLm1heF9wYXJ0aWNpcGFudF9yZXNvbHV0aW9uc19keW5hbWljfHxudWxsIT1hLm1heF9wYXJ0aWNpcGFudF9yZXNvbHV0aW9uc19zdGF0aWMpJiZudWxsIT1hLm1heF9pbmNvbWluZ19zdHJlYW1zJiZudWxsIT1hLm1heF9vdXRnb2luZ19yZXNvbHV0aW9uJiZudWxsIT1hLm1heF9zaW11bGNhc3RfbGF5ZXJzfTtiLnByb3RvdHlwZS5nZXRDYWxsQ29uc3RyYWludHM9ZnVuY3Rpb24oKXt2YXIgYT10aGlzO3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihjLGUpe2Eud2FpdFVudGlsQ29ubmVjdGVkKGEudXNlcl9mcmllbmRseV9pZCgpK1wiLmdldENhbGxDb25zdHJhaW50c1wiKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGEucmVtb3RlSW52b2tlKCExLGwubWV0aG9kX2lkX1N0cmVhbVJlc29sdXRpb25fdC5nZXRDYWxsQ29uc3RyYWludHMpfSkudGhlbihmdW5jdGlvbihoKXtoPWEucGFyYW0wKGgpO2QubG9nZ2VyLmxvZyhhLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5nZXRDYWxsQ29uc3RyYWludHNcIixcclxuSlNPTi5zdHJpbmdpZnkoaCkpO2IuaXNWYWxpZFJlbW90ZUNvbnN0cmFpbnRzKGgpPyhhLm9udXBkYXRlXyYmKGEubGFzdFNlbnRDb25zdHJhaW50c189aCksYyhhLnRvSUNhbGxDb25zdHJhaW50cyhoKSkpOihkLmxvZ2dlci5sb2coYS51c2VyX2ZyaWVuZGx5X2lkKCkrXCIuZ2V0Q2FsbENvbnN0cmFpbnRzIGludmFsaWQgUmVtb3RlQ2FsbENvbnN0cmFpbnRzXCIpLGUoKSl9KVtcImNhdGNoXCJdKGZ1bmN0aW9uKCl7ZC5sb2dnZXIubG9nKGEudXNlcl9mcmllbmRseV9pZCgpK1wiLmdldENhbGxDb25zdHJhaW50cyBwcm9taXNlIHJlamVjdGVkXCIpO2UoKX0pfSl9O2IuZ2V0RGVmYXVsdENvbnN0cmFpbnRzPWZ1bmN0aW9uKCl7dmFyIGE9e21heFBhcnRpY2lwYW50UmVzb2x1dGlvbnM6ezE6NzIwLDI6NzIwLDM6MzYwLG1vcmU6MzYwfSxtYXhJbmNvbWluZ1N0cmVhbXM6NCxtYXhPdXRnb2luZ1Jlc29sdXRpb246NzIwLG1heFNpbXVsY2FzdExheWVyczowfTtkLmxvZ2dlci5sb2coXCJTdHJlYW1SZXNvbHV0aW9uLmdldERlZmF1bHRDb25zdHJhaW50czogXCIrXHJcbkpTT04uc3RyaW5naWZ5KGEpKTtyZXR1cm4gYX07Yi5wcm90b3R5cGUudXBkYXRlU3RyZWFtUmVzb2x1dGlvbj1mdW5jdGlvbigpe3ZhciBhPXRoaXM7dGhpcy5nZXRDYWxsQ29uc3RyYWludHMoKS50aGVuKGZ1bmN0aW9uKGIpe3JldHVybiBhLm9udXBkYXRlJiZhLm9udXBkYXRlKGIpfSlbXCJjYXRjaFwiXShmdW5jdGlvbigpe3JldHVybiBkLmxvZ2dlci5sb2coXCJGYWlsZWQgdG8gZ2V0IHN0cmVhbSByZXNvbHV0aW9uIGluZm9ybWF0aW9uIVwiKX0pfTtyZXR1cm4gYn0oaC5Qcm94eU9iamVjdCk7YS5TdHJlYW1SZXNvbHV0aW9uPWJ9LDM5NDpmdW5jdGlvbihiLGEsYyl7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7YS5UZWxlbWV0cnk9YS50ZWxfa2V5X0NQVVRvdGFsbWVtb3J5PWEudGVsX2tleV9DUFVHcHVpbmZvPWEudGVsX2tleV9DUFVNYWNoaW5laWQ9YS50ZWxfa2V5X0NQVVByb2Nlc3NvcnM9YS50ZWxfa2V5X0NQVUNvcmVzPWEudGVsX2tleV9DUFVNb2RlbD1cclxuYS50ZWxfa2V5X0NQVVNwZWVkPWEudGVsX2tleV9PU0VkaXRpb249YS50ZWxfa2V5X09TRGlzdHJvPWEudGVsX2tleV9PU0FyY2hpdGVjdHVyZT1hLnRlbF9rZXlfT1NWZXJzaW9uPWEudGVsX2tleV9PU0ZhbWlseT1hLnRlbF9rZXlfVmVySGR4UnRjRW5naW5lPWEudGVsX2tleV9WZXJUeXBlU2NyaXB0PWEudGVsX2tleV9WZXJFbmRwb2ludD1hLnRlbF9rZXlfVmVyVmRhPWEudGVsX2tleV9WZXJSZWNlaXZlcj1hLnRlbF9rZXlfVmVyV2VicnRjQ29kZWNzPWEudGVsX2tleV9WZXJXZWJycGM9YS50ZWxfa2V5X1BlcmZDYWxsVHlwZT1hLnRlbF9rZXlfUGVyZkNhbGxTdGF0ZT1hLnRlbF9rZXlfUGVyZkNhbGxEaXJlY3Rpb249YS50ZWxfa2V5X1NwZWFrZXJEZXZpY2VVc2VkPWEudGVsX2tleV9WaWRlb0RldmljZVVzZWQ9YS50ZWxfa2V5X0F1ZGlvRGV2aWNlVXNlZD1hLnRlbF9rZXlfQ2FsbEVzdE91dGdvaW5nPWEudGVsX2tleV9DYWxsRXN0SW5jb21pbmc9YS50ZWxfa2V5X1NjcmVlbnNoYXJpbmdDYWxsRHVyYXRpb249XHJcbmEudGVsX2tleV9WaWRlb0NhbGxEdXJhdGlvbj1hLnRlbF9rZXlfQXVkaW9DYWxsRHVyYXRpb249YS50ZWxfa2V5X0NvbmZlcmVuY2VDYWxsRHVyYXRpb249YS50ZWxfY21kPWEudGVsX0NhbGxUeXBlPWEudGVsX0NhbGxEaXJlY3Rpb249YS50ZWxfQ2FsbFN0YXRlPXZvaWQgMDt2YXIgZT1jKDk0NiksbD1jKDg1MSk7KGZ1bmN0aW9uKGEpe2FbYS51bmtub3duPTBdPVwidW5rbm93blwiO2FbYS5hY3RpdmU9MV09XCJhY3RpdmVcIjthW2EuaWRsZT0yXT1cImlkbGVcIn0pKGEudGVsX0NhbGxTdGF0ZXx8KGEudGVsX0NhbGxTdGF0ZT17fSkpOyhmdW5jdGlvbihhKXthW2EudW5rbm93bj0wXT1cInVua25vd25cIjthW2EuaW5jb21pbmc9MV09XCJpbmNvbWluZ1wiO2FbYS5vdXRnb2luZz0yXT1cIm91dGdvaW5nXCJ9KShhLnRlbF9DYWxsRGlyZWN0aW9ufHwoYS50ZWxfQ2FsbERpcmVjdGlvbj17fSkpOyhmdW5jdGlvbihhKXthW2EudW5rbm93bj0wXT1cInVua25vd25cIjthW2EuYXVkaW89MV09XCJhdWRpb1wiO2FbYS52aWRlbz1cclxuMl09XCJ2aWRlb1wiO2FbYS5tdWx0aT0zXT1cIm11bHRpXCI7YVthLmRzaGFyZT00XT1cImRzaGFyZVwifSkoYS50ZWxfQ2FsbFR5cGV8fChhLnRlbF9DYWxsVHlwZT17fSkpO3ZhciBoOyhmdW5jdGlvbihhKXthW2EuVW5rbm93bj0wXT1cIlVua25vd25cIjthW2EuQ2FwPTFdPVwiQ2FwXCI7YVthLkluaXQ9Ml09XCJJbml0XCI7YVthLkRhdGE9M109XCJEYXRhXCJ9KShoPWEudGVsX2NtZHx8KGEudGVsX2NtZD17fSkpO2EudGVsX2tleV9Db25mZXJlbmNlQ2FsbER1cmF0aW9uPVwiQ29uZmVyZW5jZUNhbGxEdXJhdGlvblwiO2EudGVsX2tleV9BdWRpb0NhbGxEdXJhdGlvbj1cIkF1ZGlvQ2FsbER1cmF0aW9uXCI7YS50ZWxfa2V5X1ZpZGVvQ2FsbER1cmF0aW9uPVwiVmlkZW9DYWxsRHVyYXRpb25cIjthLnRlbF9rZXlfU2NyZWVuc2hhcmluZ0NhbGxEdXJhdGlvbj1cIlNjcmVlbnNoYXJpbmdDYWxsRHVyYXRpb25cIjthLnRlbF9rZXlfQ2FsbEVzdEluY29taW5nPVwiQ2FsbEVzdEluY29taW5nXCI7YS50ZWxfa2V5X0NhbGxFc3RPdXRnb2luZz1cclxuXCJDYWxsRXN0T3V0Z29pbmdcIjthLnRlbF9rZXlfQXVkaW9EZXZpY2VVc2VkPVwiQXVkaW9EZXZpY2VVc2VkXCI7YS50ZWxfa2V5X1ZpZGVvRGV2aWNlVXNlZD1cIlZpZGVvRGV2aWNlVXNlZFwiO2EudGVsX2tleV9TcGVha2VyRGV2aWNlVXNlZD1cIlNwZWFrZXJEZXZpY2VVc2VkXCI7YS50ZWxfa2V5X1BlcmZDYWxsRGlyZWN0aW9uPVwiUGVyZkNhbGxEaXJlY3Rpb25cIjthLnRlbF9rZXlfUGVyZkNhbGxTdGF0ZT1cIlBlcmZDYWxsU3RhdGVcIjthLnRlbF9rZXlfUGVyZkNhbGxUeXBlPVwiUGVyZkNhbGxUeXBlXCI7YS50ZWxfa2V5X1ZlcldlYnJwYz1cIlZlcldlYnJwY1wiO2EudGVsX2tleV9WZXJXZWJydGNDb2RlY3M9XCJWZXJXZWJydGNDb2RlY3NcIjthLnRlbF9rZXlfVmVyUmVjZWl2ZXI9XCJWZXJSZWNlaXZlclwiO2EudGVsX2tleV9WZXJWZGE9XCJWZXJWZGFcIjthLnRlbF9rZXlfVmVyRW5kcG9pbnQ9XCJWZXJFbmRwb2ludFwiO2EudGVsX2tleV9WZXJUeXBlU2NyaXB0PVwiVmVyVHlwZVNjcmlwdFwiO2EudGVsX2tleV9WZXJIZHhSdGNFbmdpbmU9XHJcblwiVmVySGR4UnRjRW5naW5lXCI7YS50ZWxfa2V5X09TRmFtaWx5PVwiT1NGYW1pbHlcIjthLnRlbF9rZXlfT1NWZXJzaW9uPVwiT1NWZXJzaW9uXCI7YS50ZWxfa2V5X09TQXJjaGl0ZWN0dXJlPVwiT1NBcmNoaXRlY3R1cmVcIjthLnRlbF9rZXlfT1NEaXN0cm89XCJPU0Rpc3Ryb1wiO2EudGVsX2tleV9PU0VkaXRpb249XCJPU0VkaXRpb25cIjthLnRlbF9rZXlfQ1BVU3BlZWQ9XCJDUFVTcGVlZFwiO2EudGVsX2tleV9DUFVNb2RlbD1cIkNQVU1vZGVsXCI7YS50ZWxfa2V5X0NQVUNvcmVzPVwiQ1BVQ29yZXNcIjthLnRlbF9rZXlfQ1BVUHJvY2Vzc29ycz1cIkNQVVByb2Nlc3NvcnNcIjthLnRlbF9rZXlfQ1BVTWFjaGluZWlkPVwiQ1BVTWFjaGluZWlkXCI7YS50ZWxfa2V5X0NQVUdwdWluZm89XCJDUFVHcHVpbmZvXCI7YS50ZWxfa2V5X0NQVVRvdGFsbWVtb3J5PVwiQ1BVVG90YWxtZW1vcnlcIjt2YXIgZD1mdW5jdGlvbigpe2Z1bmN0aW9uIGEoYixjLGQsZSl7dGhpcy5jbWQ9Yjt0aGlzLmtleT1jO3RoaXMudmFsdWU9ZDt0aGlzLmZsYWdzPVxyXG5lfWEucHJvdG90eXBlLlNlbmRUZWxlbWV0cnlEYXRhPWZ1bmN0aW9uKGEpe2EuU2VuZFRlbGVtZXRyeURhdGEodGhpcy5jbWQsdGhpcy5rZXksdGhpcy52YWx1ZSx0aGlzLmZsYWdzKX07cmV0dXJuIGF9KCk7Yj1mdW5jdGlvbigpe2Z1bmN0aW9uIGEoKXt0aGlzLmlkPTA7dGhpcy5kZWZlcnJlZERhdGE9W119YS5wcm90b3R5cGUucmVzZXQ9ZnVuY3Rpb24oKXt0aGlzLmlkPTA7dGhpcy5kZWZlcnJlZERhdGE9W119O2EucHJvdG90eXBlLm9uSW5pdGlhbGl6ZWQ9ZnVuY3Rpb24oYSl7Zm9yKHRoaXMuaWQ9YTt0aGlzLmRlZmVycmVkRGF0YSYmMDx0aGlzLmRlZmVycmVkRGF0YS5sZW5ndGg7KXRoaXMuZGVmZXJyZWREYXRhLnNoaWZ0KCkuU2VuZFRlbGVtZXRyeURhdGEodGhpcyl9O2EucHJvdG90eXBlLlNlbmRUZWxlbWV0cnlJbml0PWZ1bmN0aW9uKCl7MDx0aGlzLmlkJiZ0aGlzLnJlc2V0KCk7dHJ5e2UuZ2V0UmVkaXJlY3RvcigpLldTU2VuZE9iamVjdCh7djpcInRlbGVtZXRyeVwiLFxyXG5oZHI6e2NvbW1hbmQ6aC5Jbml0LGlkOjB9LGluaXQ6e2RvbWFpbjpcIkhEWE1NIFRlYW1zXCIsc3ViZG9tYWluOlwiVGVhbXNcIixmZWF0dXJlOlwibXN0ZWFtc1wiLHZlcnNpb246XCIxLjEuMS4xXCJ9fSl9Y2F0Y2goYSl7bC5sb2dnZXIubG9nKGEpfX07YS5wcm90b3R5cGUuU2VuZFRlbGVtZXRyeURhdGE9ZnVuY3Rpb24oYSxiLGMsdyl7aWYoYSE9aC5EYXRhKWwubG9nZ2VyLmxvZyhcImludmFsaWQgdGVsZW1ldHJ5IGNvbW1hbmQhXCIpO2Vsc2UgaWYoMD09dGhpcy5pZCl0aGlzLmRlZmVycmVkRGF0YS5wdXNoKG5ldyBkKGEsYixjLHcpKTtlbHNlIHRyeXtlLmdldFJlZGlyZWN0b3IoKS5XU1NlbmRPYmplY3Qoe3Y6XCJ0ZWxlbWV0cnlcIixoZHI6e2NvbW1hbmQ6YSxpZDp0aGlzLmlkfSxkYXRhOntrZXk6Yix2YWx1ZTpjLGZsYWdzOnd9fSl9Y2F0Y2gocCl7bC5sb2dnZXIubG9nKHApfX07cmV0dXJuIGF9KCk7YS5UZWxlbWV0cnk9Yn0sMjU5OmZ1bmN0aW9uKGIsYSxjKXtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxcclxuXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7YS5VdGlsPXZvaWQgMDt2YXIgZT1jKDg1MSk7Yj1mdW5jdGlvbigpe2Z1bmN0aW9uIGEoKXt9YS5zdHJpbmdpZnlBcnJheT1mdW5jdGlvbihhKXtmb3IodmFyIGI9XCJbXCIsYz0wO2M8YS5sZW5ndGg7KytjKTAhPWMmJihiKz1cIixcIiksYis9dGhpcy5zdHJpbmdpZnkoYVtjXSk7cmV0dXJuIGIrXCJdXCJ9O2Euc3RyaW5naWZ5T2JqZWN0PWZ1bmN0aW9uKGEpe3ZhciBiPVwie1wiLGM9ITAsZTtmb3IoZSBpbiBhKWM/Yz0hMTpiKz1cIixcIixiPWIrJ1wiJytlKydcIjonLGI9YVtlXWluc3RhbmNlb2YgQXJyYXk/Yit0aGlzLnN0cmluZ2lmeUFycmF5KGFbZV0pOlwib2JqZWN0XCI9PXR5cGVvZiBhW2VdP2IrdGhpcy5zdHJpbmdpZnlPYmplY3QoYVtlXSk6YitKU09OLnN0cmluZ2lmeShhW2VdKTtyZXR1cm4gYitcIn1cIn07YS5zdHJpbmdpZnk9ZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09dHlwZW9mIGE/XCJbb2JqZWN0IEFycmF5XVwiPT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYSk/XHJcbnRoaXMuc3RyaW5naWZ5QXJyYXkoYSk6dGhpcy5zdHJpbmdpZnlPYmplY3QoYSk6SlNPTi5zdHJpbmdpZnkoYSl9O2EuR2V0T2JqZWN0UHJvcGVydHlEZXNjcmlwdG9yPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPXZvaWQgMDthIT1PYmplY3QucHJvdG90eXBlOyl7Yz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEsYik7aWYodm9pZCAwIT09YylicmVhazthPWEuX19wcm90b19ffXJldHVybiBjfTthLnNlbmRFdmVudD1mdW5jdGlvbihhLGIpe3RyeXt2YXIgYz1kb2N1bWVudC5jcmVhdGVFdmVudChcIkV2ZW50XCIpO2MuaW5pdEV2ZW50KGIsITAsITApO2EuZGlzcGF0Y2hFdmVudChjKX1jYXRjaChsKXtlLmxvZ2dlci5sb2coJ3NlbmRFdmVudCgpOiBleGNlcHRpb24gZGlzcGF0Y2hpbmcgXCInK2IrJ1wiIGV2ZW50OiAnK2wubWVzc2FnZSl9fTthLmhhc1ZhbHVlPWZ1bmN0aW9uKGEpe3ZhciBiPSExO251bGwhPT1hJiZ2b2lkIDAhPT1hJiYoYj0hMCk7cmV0dXJuIGJ9O3JldHVybiBhfSgpO1xyXG5hLlV0aWw9Yn0sMzA3OmZ1bmN0aW9uKGIsYSxjKXt2YXIgZT10aGlzJiZ0aGlzLl9fYXdhaXRlcnx8ZnVuY3Rpb24oYSxiLGMsZCl7ZnVuY3Rpb24gZShhKXtyZXR1cm4gYSBpbnN0YW5jZW9mIGM/YTpuZXcgYyhmdW5jdGlvbihiKXtiKGEpfSl9cmV0dXJuIG5ldyAoY3x8KGM9UHJvbWlzZSkpKGZ1bmN0aW9uKGMsZyl7ZnVuY3Rpb24gaChhKXt0cnl7bChkLm5leHQoYSkpfWNhdGNoKGIpe2coYil9fWZ1bmN0aW9uIGsoYSl7dHJ5e2woZFtcInRocm93XCJdKGEpKX1jYXRjaChiKXtnKGIpfX1mdW5jdGlvbiBsKGEpe2EuZG9uZT9jKGEudmFsdWUpOmUoYS52YWx1ZSkudGhlbihoLGspfWwoKGQ9ZC5hcHBseShhLGJ8fFtdKSkubmV4dCgpKX0pfSxsPXRoaXMmJnRoaXMuX19nZW5lcmF0b3J8fGZ1bmN0aW9uKGEsYil7ZnVuY3Rpb24gYyhhKXtyZXR1cm4gZnVuY3Rpb24oYil7cmV0dXJuIGQoW2EsYl0pfX1mdW5jdGlvbiBkKGMpe2lmKGcpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbmZvcig7ZTspdHJ5e2lmKGc9MSxoJiYoaz1jWzBdJjI/aFtcInJldHVyblwiXTpjWzBdP2hbXCJ0aHJvd1wiXXx8KChrPWhbXCJyZXR1cm5cIl0pJiZrLmNhbGwoaCksMCk6aC5uZXh0KSYmIShrPWsuY2FsbChoLGNbMV0pKS5kb25lKXJldHVybiBrO2lmKGg9MCxrKWM9W2NbMF0mMixrLnZhbHVlXTtzd2l0Y2goY1swXSl7Y2FzZSAwOmNhc2UgMTprPWM7YnJlYWs7Y2FzZSA0OnJldHVybiBlLmxhYmVsKysse3ZhbHVlOmNbMV0sZG9uZTohMX07Y2FzZSA1OmUubGFiZWwrKztoPWNbMV07Yz1bMF07Y29udGludWU7Y2FzZSA3OmM9ZS5vcHMucG9wKCk7ZS50cnlzLnBvcCgpO2NvbnRpbnVlO2RlZmF1bHQ6aWYoIShrPWUudHJ5cyxrPTA8ay5sZW5ndGgmJmtbay5sZW5ndGgtMV0pJiYoNj09PWNbMF18fDI9PT1jWzBdKSl7ZT0wO2NvbnRpbnVlfWlmKDM9PT1jWzBdJiYoIWt8fGNbMV0+a1swXSYmY1sxXTxrWzNdKSllLmxhYmVsPWNbMV07ZWxzZSBpZig2PT09Y1swXSYmZS5sYWJlbDxrWzFdKWUubGFiZWw9XHJcbmtbMV0saz1jO2Vsc2UgaWYoayYmZS5sYWJlbDxrWzJdKWUubGFiZWw9a1syXSxlLm9wcy5wdXNoKGMpO2Vsc2V7a1syXSYmZS5vcHMucG9wKCk7ZS50cnlzLnBvcCgpO2NvbnRpbnVlfX1jPWIuY2FsbChhLGUpfWNhdGNoKGwpe2M9WzYsbF0saD0wfWZpbmFsbHl7Zz1rPTB9aWYoY1swXSY1KXRocm93IGNbMV07cmV0dXJue3ZhbHVlOmNbMF0/Y1sxXTp2b2lkIDAsZG9uZTohMH19dmFyIGU9e2xhYmVsOjAsc2VudDpmdW5jdGlvbigpe2lmKGtbMF0mMSl0aHJvdyBrWzFdO3JldHVybiBrWzFdfSx0cnlzOltdLG9wczpbXX0sZyxoLGssbDskanNjb21wLmluaXRTeW1ib2woKTskanNjb21wLmluaXRTeW1ib2woKTskanNjb21wLmluaXRTeW1ib2xJdGVyYXRvcigpO3JldHVybiBsPXtuZXh0OmMoMCksXCJ0aHJvd1wiOmMoMSksXCJyZXR1cm5cIjpjKDIpfSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiYobFtTeW1ib2wuaXRlcmF0b3JdPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9KSxsfSxoPVxyXG5jKDM2MCksZD1jKDE0NCk7Yyg2NzkpO3ZhciBwPWMoOTQ1KSxxPWMoMzY4KSxuPWMoODUxKS5sb2dnZXIsaz1jKDY1MCksdj1jKDk3Myksej1jKDI0NykuZ2V0R0MsZz1jKDk0NiksQj1jKDYxMykuRTkxMVNlcnZpY2U7Yj1jKDU1MCk7dmFyIHQ9Yi5GZWF0dXJlcyxtPWIuRkVBVFVSRV92ZGFfZGVsZXRlX3ZpZXdwb3J0LEQ9Yyg3MDQpLlN0cmVhbVJlc29sdXRpb24seT1jKDIzOSkuRTsoZnVuY3Rpb24oYSxiKXthLkNpdHJpeFdlYlJUQz1iKCl9KShcInVuZGVmaW5lZFwiIT09dHlwZW9mIHNlbGY/c2VsZjp0aGlzLGZ1bmN0aW9uKCl7ZnVuY3Rpb24gYShiLGMpe24ubG9nKFwiVkRJIFNoaW0gY3JlYXRlTWVkaWFTdHJlYW1JbnRlcm5hbFwiKTtHKCk7dmFyIGY9bmV3IGQuUmVtb3RlU3RyZWFtKG51bGwsMCwwLGIpLGU9bmV3IFByb21pc2UoZnVuY3Rpb24oYSxiKXtmLnN5bmNCYXJyaWVyKCkudGhlbihmdW5jdGlvbihiKXtuLmxvZyhcInN0cmVhbS5zeW5jQmFycmllcigpOiBzdWNjZXNzLlwiKTtcclxuYShiKX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oYSl7bi5sb2coXCJzdHJlYW0uc3luY0JhcnJpZXIoKTogZmFpbGVkIHdpdGggZXJyb3I6IFwiK0pTT04uc3RyaW5naWZ5KGEpKTtmLnJlbGVhc2UoKTtiKCl9KX0pO3JldHVybiBjP2U6Zn1mdW5jdGlvbiBiKGEpe251bGw9PVkmJihZPW5ldyBxLkZyYW1lcyghTy5pc0ZlYXR1cmVTdXBwb3J0ZWQodC5GRUFUVVJFX3B1YmxpY19tdWx0aV93aW5kb3cpKSk7YShZKX1mdW5jdGlvbiBjKGEsZCl7YihmdW5jdGlvbihiKXt2YXIgYz1iLmZpbmRGcmFtZShhKTt2b2lkIDA9PWMmJihjPWIubmV3RnJhbWUoYSkpO2QoYyl9KX1mdW5jdGlvbiBNKGEsYyl7YihmdW5jdGlvbihiKXtiPWIuZmluZEZyYW1lKGEpO251bGwhPWImJmMoYil9KX1mdW5jdGlvbiBGKGEpe2cuZ2V0UmVkaXJlY3RvcigpLlNlbmRUZWxlbWV0cnlEYXRhX1NwZWFrZXIoYSl9ZnVuY3Rpb24gSihhLGIpe2lmKFMpdHJ5e1widmRpRTkxMUluZm9DaGFuZ2VkXCI9PT1hP2E9XCJ2ZGlFOTExRGF0YUNoYW5nZWRcIjpcclxuXCJ2ZGlDYWxsQ29uc3RyYWludHNDaGFuZ2VkXCI9PT1hJiYoYT1cInZkaVN0cmVhbUNvbnN0cmFpbnRzQ2hhbmdlZFwiKTt2YXIgYz1PYmplY3QuYXNzaWduKHtldmVudDphfSxiKTtuLmxvZyhcIkRpc3BhdGNoaW5nIFZNIGV2ZW50OlwiK0pTT04uc3RyaW5naWZ5KGMpKTtTKGMpfWNhdGNoKGQpe24ubG9nKFwiRXhjZXB0aW9uIG9uVk1FdmVudCgpLCBldmVudE5hbWU6XCIrYStcIiBtZXNzYWdlOlwiK2QubWVzc2FnZSl9fWZ1bmN0aW9uIEcoKXt2YXIgYT13aW5kb3cuZ2V0Q2l0cml4V2VicnRjUmVkaXI7dm9pZCAwIT09YT9hKCkudGhlbihmdW5jdGlvbihhKXtuLmxvZyhcInN1Y2Vzc3Mgb24gY29ubmVjdCwgZ2V0Q2l0cml4V2VicnRjUmVkaXIgcmVnIHZhbHVlOlwiK2EpO1wiMVwiIT09YXx8T3x8KG4ubG9nKFwic3VwcG9ydGVkIGNsaWVudFwiKSxQKFcpKX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oKXtuLmxvZyhcIkZhaWx1cmUgdG8gUmVhZCBXZWJydGMgcmVkaXIgUmVnIEtleVwiKTtmKCl9KToobi5sb2coXCJ3aW5kb3cuZ2V0Q2l0cml4V2VicnRjUmVkaXIoKSBtZXRob2QgaXMgbm90IGF2YWlsYWJsZSB5ZXRcIiksXHJcbmYoKSl9ZnVuY3Rpb24gTChhKXtuLmxvZyhcIlZESSBFdmVudDogdmRpQ2xpZW50RGlzY29ubmVjdGVkXCIpO2JhKCk7aWYoITA9PT1hJiYhMT09PWFhKXtuLmxvZyhcIlZESSBFdmVudDogdmRpQ2xpZW50RGlzY29ubmVjdGVkIHdpdGggZmFpbHVyZSByZXBvcnRlZFwiKTthYT0hMDt0cnl7Uyh7ZXZlbnQ6XCJ2ZGlDbGllbnREaXNjb25uZWN0ZWRcIixyZWFzb246XCJmYWlsdXJlXCIsbXNnOlwiV2Vic29ja2V0IENvbm5lY3Rpb24gRmFpbHVyZVwifSl9Y2F0Y2goYil7bi5sb2coXCJvblZNRXZlbnQoKTogZXhjZXB0aW9uOiBcIitiLm1lc3NhZ2UpfX1lbHNle2FhPSExO3RyeXtTKHtldmVudDpcInZkaUNsaWVudERpc2Nvbm5lY3RlZFwiLHJlYXNvbjpcImVuZHBvaW50RGlzY29ubmVjdGVkXCJ9KX1jYXRjaChiKXtuLmxvZyhcIm9uVk1FdmVudCgpOiBleGNlcHRpb246IFwiK2IubWVzc2FnZSl9fX1mdW5jdGlvbiBQKGEpe24ubG9nKFwiaW5pdFJlbW90ZVNlc3Npb24gd2l0aCB2ZW5kb3I6XCIrYSk7T3x8KE89bmV3IGsuUmVtb3RlU2Vzc2lvbihcIkNpdHJpeFdlYlJUQ1NES1wiLFxyXG5hKSl9ZnVuY3Rpb24gQygpe24ubG9nKFwiVkRJIEV2ZW50OiBvblZkaUNsaWVudERpc2Nvbm5lY3RlZFRpbWVyXCIpO1AoVyl9ZnVuY3Rpb24gUigpe3ZhciBhPXRoaXM7bi5sb2coXCJWREkgU2hpbSBvblZkaUNsaWVudENvbm5lY3RlZC4uLlwiKTtPP08uZ2V0U2Vzc2lvbkluZm8oKS50aGVuKGZ1bmN0aW9uKGMpe3JldHVybiBlKGEsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbigpe3JldHVybiBsKHRoaXMsZnVuY3Rpb24oYSl7c3dpdGNoKGEubGFiZWwpe2Nhc2UgMDpyZXR1cm4gbi5sb2coXCJWREkgU2hpbSBvblZkaUNsaWVudENvbm5lY3RlZCwgY2xpZW50IGVuZHBvaW50IGluZm86XCIrSlNPTi5zdHJpbmdpZnkoYykpLEgmJkguaXNWYWxpZCgpfHwoSD1uZXcgZC5SZW1vdGVEZXZpY2VzKSxJJiZJLmlzVmFsaWQoKXx8KEk9bmV3IGQuTmF2aWdhdG9yVXNlck1lZGlhKSxiKGZ1bmN0aW9uKGEpe2EucmVjb25uZWN0KCl9KSxKKFwidmRpQ2xpZW50Q29ubmVjdGVkXCIse3ZlcnNpb246YyxlbmRwb2ludElkOmMuZW5kcG9pbnRJZH0pLFxyXG5bNCxJLmdldENhcGFiaWxpdGllcygpLnRoZW4oZnVuY3Rpb24oYSl7bi5sb2coXCJWREkgU2hpbSBvblZkaUNsaWVudENvbm5lY3RlZCwgY2FwcyA9IFwiK2EpfSlbXCJjYXRjaFwiXShmdW5jdGlvbigpe24ubG9nKFwiVkRJIFNoaW0gb25WZGlDbGllbnRDb25uZWN0ZWQsIGNvdWxkIG5vdCBnZXQgY2FwYWJpbGl0aWVzXCIpfSldO2Nhc2UgMTpyZXR1cm4gYS5zZW50KCksVHx8KFQ9bmV3IEIsVC5vbnVwZGF0ZT1mdW5jdGlvbihhKXtKKFwidmRpRTkxMUluZm9DaGFuZ2VkXCIsYSl9LFQudXBkYXRlRTkxMUluZm8oKSksVXx8KEooXCJ2ZGlDYWxsQ29uc3RyYWludHNDaGFuZ2VkXCIsRC5nZXREZWZhdWx0Q29uc3RyYWludHMoKSksbnVsbCE9PU8mJmsuUmVtb3RlU2Vzc2lvbi5pc0ZlYXR1cmVDYWxsQ29uc3RyYWludHNTdXBwb3J0ZWQoKSYmKFU9bmV3IEQsVS5vbnVwZGF0ZT1mdW5jdGlvbihhKXtKKFwidmRpQ2FsbENvbnN0cmFpbnRzQ2hhbmdlZFwiLGEpfSxVLnVwZGF0ZVN0cmVhbVJlc29sdXRpb24oKSkpLFxyXG5uYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KFwiZGV2aWNlY2hhbmdlXCIpKSxbMl19fSl9KX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oKXtuLmxvZyhcIlZESSBTaGltIG9uVmRpQ2xpZW50Q29ubmVjdGVkLCBnZXRTZXNzaW9uSW5mbyBmYWlsdXJlISBTZXNzaW9uIGlzIG5vdCBmdWxseSBjb25uZWN0ZWQgeWV0Li4uXCIpfSk6bi5sb2coXCJWREkgU2hpbSBvblZkaUNsaWVudENvbm5lY3RlZCwgcmVtb3RlU2Vzc2lvbiBkb2VzIG5vdCBleGlzdFwiKX1mdW5jdGlvbiBLKGEpe2lmKFwiMVwiPT09YSluLmxvZyhcIlN1cHBvcnRlZCBjbGllbnRcIiksZy5nZXRSZWRpcmVjdG9yKCkucGluZ0Nvbm5lY3Rpb25CZWdpbighMCk7ZWxzZSBpZihcIjBcIj09PWEpe24ubG9nKFwiVkRJIEV2ZW50OiBVbnN1cHBvcnRlZCBjbGllbnQgcmVwb3J0ZWRcIik7dHJ5e1Moe2V2ZW50OlwidmRpQ2xpZW50RGlzY29ubmVjdGVkXCIscmVhc29uOlwiZW5kcG9pbnRVbnN1cHBvcnRlZFwiLG1zZzpcIlVuc3VwcG9ydGVkIGVuZHBvaW50IGNvbm5lY3RlZFwifSl9Y2F0Y2goYil7bi5sb2coXCJvblZNRXZlbnQoKTogZXhjZXB0aW9uOiBcIitcclxuYi5tZXNzYWdlKX19ZWxzZSBuLmxvZyhcIkNpdHJpeCBXZWJydGMgUmVkaXIgUmVnIEtleSB2YWx1ZSBpcyBpbmNvcnJlY3RcIil9ZnVuY3Rpb24gZigpeyExPT09WiYmKG4ubG9nKFwic3RhcnRpbmcgTVMgUmVnIHJldHJ5Li4uXCIpLFo9ITAsWCgxMCkpfWZ1bmN0aW9uIFgoYSl7aWYoMD49YSl7Wj0hMTtuLmxvZyhcIlZESSBFdmVudDogUmVnIEtleSBub3QgVXBkYXRlZCBhZnRlciB0aW1lciByZXBvcnRlZCwgRmFsbGJhY2tcIik7dHJ5e1Moe2V2ZW50OlwidmRpQ2xpZW50RGlzY29ubmVjdGVkXCIscmVhc29uOlwiZmFpbHVyZVwiLG1zZzpcIkNpdHJpeCBXZWJydGMgUmVkaXIgUmVnIEtleSBub3QgUHJlc2VudFwifSl9Y2F0Y2goYil7bi5sb2coXCJvblZNRXZlbnQoKTogZXhjZXB0aW9uOiBcIitiLm1lc3NhZ2UpfX1lbHNle3ZhciBjPXdpbmRvdy5nZXRDaXRyaXhXZWJydGNSZWRpcjt2b2lkIDAhPT1jP2MoKS50aGVuKGZ1bmN0aW9uKGIpe24ubG9nKFwiQ2l0cml4TVNUZWFtc1JlZGlyIHJlZyB2YWx1ZTpcIitcclxuYik7XCIwXCI9PT1ifHxcIjFcIj09PWI/KEsoYiksWj0hMSk6KG4ubG9nKFwiTVMgVGVhbXMgUmVkaXIgUmVnIGtleSBub3QgdXBkYXRlZCAtIFN0YXJ0IHRpbWVyXCIpLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtuLmxvZyhcIlRpbWVyIHdhaXRpbmcgZm9yIHJlZ2lzdHJ5IHRvIGJlIHVwZGF0ZWQgY291bnQgOlwiK2EpO1goLS1hKX0sMUUzKSl9KVtcImNhdGNoXCJdKGZ1bmN0aW9uKCl7bi5sb2coXCJGYWlsdXJlIHRvIFJlYWQgTVMgVGVhbXMgcmVkaXIgUmVnIEtleSAtIFN0YXJ0IHRpbWVyXCIpO3NldFRpbWVvdXQoZnVuY3Rpb24oKXtuLmxvZyhcIlRpbWVyIHdhaXRpbmcgZm9yIHJlZ2lzdHJ5IHRvIGJlIHVwZGF0ZWQgY291bnQgOlwiK2EpO1goLS1hKX0sMUUzKX0pOihuLmxvZyhcIndpbmRvdy5nZXRDaXRyaXhXZWJydGNSZWRpcigpIG1ldGhvZCBpcyBub3QgYXZhaWxhYmxlIHlldFwiKSxzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7bi5sb2coXCJUaW1lciB3YWl0aW5nIGZvciByZWdpc3RyeSB0byBiZSB1cGRhdGVkIGNvdW50IDpcIitcclxuYSk7WCgtLWEpfSwxRTMpKX19ZnVuY3Rpb24gYmEoKXtuLmxvZyhcIlZESSA6IGNsZWFudXBcIik7Zy5nZXRSZWRpcmVjdG9yKCkuY2xlYXJSZXFzKCk7ZC5OYXZpZ2F0b3JVc2VyTWVkaWEucmVzZXRDYXBhYmlsaXRpZXMoKTtZPUg9ST1udWxsO04mJk4ucmVsZWFzZSgpO08mJk8ucmVsZWFzZSgpO089bnVsbDt2LlNjcmVlblNoYXJpbmcuZGVzdHJveUluc3RhbmNlKCk7VCYmKFQucmVsZWFzZSgpLFQ9bnVsbCk7VSYmKFUucmVsZWFzZSgpLFU9bnVsbCk7eigpLnJlc2V0KCk7bi5sb2coXCJWREkgOiBjbGVhbnVwIGRvbmVcIil9ZnVuY3Rpb24gY2EoKXtyZXR1cm4gdi5TY3JlZW5TaGFyaW5nLnNjcmVlblNoYXJpbmdJbnN0YW5jZShmdW5jdGlvbigpe2lmKFMpdHJ5e1Moe2V2ZW50OlwidmRpU2NyZWVuVG9wb2xvZ3lDaGFuZ2VkXCJ9KX1jYXRjaChhKXtuLmxvZyhcIm9uVk1FdmVudCgndmRpU2NyZWVuVG9wb2xvZ3lDaGFuZ2VkJyk6IGV4Y2VwdGlvbjogXCIrYS5tZXNzYWdlKX19KX1mdW5jdGlvbiBFKGEpe2lmKCFWKXRocm93IG4ubG9nKFwiVkRJIFNoaW0gXCIrXHJcbmErXCI6IHRocm93aW5nIGV4Y2VwdGlvbjogbm90IGluaXRpYWxpemVkISFcIiksbmV3IERPTUV4Y2VwdGlvbihcIlVDU0RLIGlzIG5vdCBpbml0aWFsaXplZCEhIVwiKTt9dmFyIEk9bnVsbCxkYT1kLk5hdmlnYXRvclVzZXJNZWRpYS5nZXRDYXBhYmlsaXRpZXMsSD1udWxsLFk9bnVsbCxOPW51bGwsUz1udWxsLFQ9bnVsbCxVPW51bGwsYWE9ITEsTz12b2lkIDAsWj0hMSxWPSExLFc9dm9pZCAwO3JldHVybntGZWF0dXJlczp0LENpdHJpeFBlZXJDb25uZWN0aW9uOmguUGVlckNvbm5lY3Rpb24sZ2V0VXNlck1lZGlhOmZ1bmN0aW9uKGEsYixjKXtFKFwiZ2V0VXNlck1lZGlhXCIpO0coKTtuLmxvZyhcIlZESSBTaGltIGdldFVzZXJNZWRpYVwiKTtudWxsIT09SSYmSS5pc1ZhbGlkKCl8fChJPW5ldyBkLk5hdmlnYXRvclVzZXJNZWRpYSk7dmFyIGY9ZC5SZW1vdGVNZWRpYVN0cmVhbUNvbnN0cmFpbnRzLmlzQ29uc3RyYWludHNBdWRpb0RldmljZUlkRW1wdHkoYSksZT1kLlJlbW90ZU1lZGlhU3RyZWFtQ29uc3RyYWludHMuaXNDb25zdHJhaW50c1ZpZGVvU291cmNlSWRFbXB0eShhKTtcclxucmV0dXJuIGZ8fGU/bmV3IFByb21pc2UoZnVuY3Rpb24oZCxmKXtILmVudW1lcmF0ZURldmljZXMoKS50aGVuKGZ1bmN0aW9uKGQpe3JldHVybiBJLndlYmtpdEdldFVzZXJNZWRpYShhLGIsYyl9KS50aGVuKGZ1bmN0aW9uKGEpe24ubG9nKFwid2Via2l0R2V0VXNlck1lZGlhIGZvciBkZWZhdWx0IHdhcyByZXNvbHZlZFwiKTtkKGEpfSlbXCJjYXRjaFwiXShmdW5jdGlvbihhKXtuLmxvZyhcImdldFVzZXJNZWRpYSgpIGZvciBkZWZhdWx0IGZhaWxlZCB3aXRoIGVycm9yOlwiK0pTT04uc3RyaW5naWZ5KGEpKTtmKCl9KX0pOkkud2Via2l0R2V0VXNlck1lZGlhKGEsYixjKX0sZ2V0RGlzcGxheU1lZGlhOmZ1bmN0aW9uKGEpe0UoXCJnZXREaXNwbGF5TWVkaWFcIik7RygpO24ubG9nKFwiVkRJIFNoaW0gZ2V0RGlzcGxheU1lZGlhXCIpO251bGwhPT1IJiZILmlzVmFsaWQoKXx8KEg9bmV3IGQuUmVtb3RlRGV2aWNlcyk7cmV0dXJuIEguZ2V0RGlzcGxheU1lZGlhKGEpfSxlbnVtZXJhdGVEZXZpY2VzOmZ1bmN0aW9uKCl7RShcImVudW1lcmF0ZURldmljZXNcIik7XHJcbkcoKTtuLmxvZyhcIlZESSBTaGltIGVudW1lcmF0ZURldmljZXNcIik7bnVsbCE9PUgmJkguaXNWYWxpZCgpfHwoSD1uZXcgZC5SZW1vdGVEZXZpY2VzKTtyZXR1cm4gSC5lbnVtZXJhdGVEZXZpY2VzKCl9LG9uV2luZG93Q2xvc2U6ZnVuY3Rpb24oYSxjLGQpe0UoXCJvbldpbmRvd0Nsb3NlXCIpO24ubG9nKFwiVkRJIFNoaW0gb25XaW5kb3dDbG9zZTogKGhhbmRsZTogXCIrYStcIilcIik7Zy5nZXRSZWRpcmVjdG9yKCkuZ2V0VkRBRmVhdHVyZVZhbHVlKG0pJiZiKGZ1bmN0aW9uKGIpe2IuZGlzcG9zZUZyYW1lKGEpfSl9LHNldENsaWVudEFyZWFPZmZzZXQ6ZnVuY3Rpb24oYSxiLGQpe0UoXCJzZXRDbGllbnRBcmVhT2Zmc2V0XCIpO24ubG9nKFwiVkRJIHNldENsaWVudEFyZWFPZmZzZXQgd2l0aCB4T2Zmc2V0ID0gXCIrYStcIiwgeU9mZnNldCA9IFwiK2IrXCIsIHdpbmRvd0hhbmRsZSA9IFwiK2QpO0coKTtjKGQsZnVuY3Rpb24oYyl7Yy5zZXRDbGllbnRBcmVhT2Zmc2V0KGEsYil9KX0sbWFwVmlkZW9FbGVtZW50OmZ1bmN0aW9uKGEsXHJcbmIpe0UoXCJtYXBWaWRlb0VsZW1lbnRcIik7bi5sb2coXCJWREkgTmV3IFZpZGVvIEVsZW1lbnQgQ3JlYXRlZCwgQ3JlYXRpbmcgTWFwcGluZyB0byBUaGluIENsaWVudCBET01cIik7RygpO2MoYixmdW5jdGlvbihiKXtiLm5ld1ZpZGVvRWxlbWVudChhKX0pfSxtYXBBdWRpb0VsZW1lbnQ6ZnVuY3Rpb24oYSl7RShcIm1hcEF1ZGlvRWxlbWVudFwiKTtuLmxvZyhcIlZESSBOZXcgQXVkaW8gRWxlbWVudCBDcmVhdGVkLCBDcmVhdGluZyBNYXBwaW5nIHRvIFZEQVwiKTtpZih2b2lkIDAhPT1hLnJlbW90ZUF1ZGlvRWxlbWVudCluLmxvZyhcIkF1ZGlvIGVsZW1lbnQgaXMgYWxyZWFkeSBjb25maWd1cmVkIVwiKTtlbHNle0coKTtkZWxldGUgYS5yZW1vdGVBdWRpb0VsZW1lbnQ7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsXCJyZW1vdGVBdWRpb0VsZW1lbnRcIix7d3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwLHZhbHVlOm51bGx9KTthLnJlbW90ZUF1ZGlvRWxlbWVudD1uZXcgcC5BdWRpb0VsZW1lbnQ7ZGVsZXRlIGEuc2lua0lkO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoYSxcInNpbmtJZFwiLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGEucmVtb3RlQXVkaW9FbGVtZW50P2EucmVtb3RlQXVkaW9FbGVtZW50LnNpbmtJZDp2b2lkIDB9LHNldDpmdW5jdGlvbihiKXtuLmxvZyhcIlZESSBTaGltIHNldCBhdWRpbyBlbGVtZW50IFNpbmtJZCB2YWx1ZSA9IFwiK2IpO2Euc2V0U2lua0lkKGIpLnRoZW4oZnVuY3Rpb24oKXtuLmxvZyhcIlZESSBTaGltIHNldCBhdWRpbyBlbGVtZW50IFNpbmtJZCBzdWNjZXNzXCIpfSlbXCJjYXRjaFwiXShmdW5jdGlvbigpe24ubG9nKFwiVkRJIFNoaW0gc2V0IGF1ZGlvIGVsZW1lbnQgU2lua0lkIGZhaWx1cmVcIil9KX19KTt2YXIgYj1hLnJlbW90ZUF1ZGlvRWxlbWVudC5wbGF5O2EucGxheT1mdW5jdGlvbigpe24ubG9nKFwiVkRJIFNoaW0gcmVtb3RlIGF1ZGlvIHBsYXlcIik7cmV0dXJuIGIuYXBwbHkoYS5yZW1vdGVBdWRpb0VsZW1lbnQsYXJndW1lbnRzKX07dmFyIGM9YS5yZW1vdGVBdWRpb0VsZW1lbnQucGF1c2U7XHJcbmEucGF1c2U9ZnVuY3Rpb24oKXtuLmxvZyhcIlZESSBTaGltIHJlbW90ZSBhdWRpbyBwYXVzZVwiKTtyZXR1cm4gYy5hcHBseShhLnJlbW90ZUF1ZGlvRWxlbWVudCxhcmd1bWVudHMpfTthLnNldFNpbmtJZD1mdW5jdGlvbihiKXtuLmxvZyhcIlZESSBTaGltIHNldCBhdWRpbyBlbGVtZW50IFNpbmtJZCB2YWx1ZSA9IFwiK2IpO3ZhciBjPWEucmVtb3RlQXVkaW9FbGVtZW50LnNldFNpbmtJZChiKSxmO2QuZW51bWVyYXRlZERldmljZXMuZm9yRWFjaChmdW5jdGlvbihhKXtiPT09YS5kZXZpY2VJZCYmKGY9YS5sYWJlbCl9KTtGKGYpO3JldHVybiBjfTtkZWxldGUgYS5zcmNPYmplY3Q7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsXCJzcmNPYmplY3RcIix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBhLnJlbW90ZUF1ZGlvRWxlbWVudD9hLnJlbW90ZUF1ZGlvRWxlbWVudC5zcmNPYmplY3Q6dm9pZCAwfSxzZXQ6ZnVuY3Rpb24oYil7bi5sb2coXCJWREkgU2hpbSBzZXQgYXVkaW8gZWxlbWVudCBzcmNPYmplY3QgXCIrXHJcbkpTT04uc3RyaW5naWZ5KGIpKTthLnJlbW90ZUF1ZGlvRWxlbWVudC5zcmNPYmplY3Q9Yn19KX19LGRpc3Bvc2VWaWRlb0VsZW1lbnQ6ZnVuY3Rpb24oYSxiKXtFKFwiZGlzcG9zZVZpZGVvRWxlbWVudFwiKTtuLmxvZyhcIlZESSBTaGltIGRpc3Bvc2VWaWRlb0VsZW1lbnQ6IFwiKTtNKGIsZnVuY3Rpb24oYil7Yi5kaXNwb3NlVmlkZW9FbGVtZW50KGEpfSl9LGRpc3Bvc2VBdWRpb0VsZW1lbnQ6ZnVuY3Rpb24oYSxiLGMpe0UoXCJkaXNwb3NlQXVkaW9FbGVtZW50XCIpO24ubG9nKFwiVkRJIFNoaW0gZGlzcG9zZUF1ZGlvRWxlbWVudDogXCIpO2EmJihiPWEucmVtb3RlQXVkaW9FbGVtZW50KSYmKGIuZGlzcG9zZSgpLGEucmVtb3RlQXVkaW9FbGVtZW50PXZvaWQgMCl9LHNldFZNRXZlbnRDYWxsYmFjazpmdW5jdGlvbihhKXt2YXIgYj10aGlzO1M9YTtnLmdldFJlZGlyZWN0b3IoKS5pc0Nvbm5lY3RlZCgpJiZPLmdldFNlc3Npb25JbmZvKCkudGhlbihmdW5jdGlvbihhKXtyZXR1cm4gZShiLHZvaWQgMCxcclxudm9pZCAwLGZ1bmN0aW9uKCl7cmV0dXJuIGwodGhpcyxmdW5jdGlvbihiKXtuLmxvZyhcIlZESSBTaGltIG9uVmRpQ2xpZW50Q29ubmVjdGVkLCBjbGllbnQgZW5kcG9pbnQgaW5mbzpcIitKU09OLnN0cmluZ2lmeShhKSk7SihcInZkaUNsaWVudENvbm5lY3RlZFwiLHt2ZXJzaW9uOmEsZW5kcG9pbnRJZDphLmVuZHBvaW50SWR9KTtyZXR1cm5bMl19KX0pfSk7bi5sb2coXCJWREkgRXZlbnQgQ2FsbGJhY2sgU2V0XCIpfSxwbGF5Tm90aWZ5QXVkaW86ZnVuY3Rpb24oYSxiKXtFKFwicGxheU5vdGlmeUF1ZGlvXCIpO24ubG9nKFwiVkRJIFNoaW0gQXVkaW8gcGxheU5vdGlmeUF1ZGlvIGF1ZGlvSWQ6XCIrYStcIiBzcmM6XCIrYik7TiYmTi5wbGF5Tm90aWZ5QXVkaW8oYSxiKX0sc3RvcE5vdGlmeUF1ZGlvOmZ1bmN0aW9uKGEsYil7RShcInN0b3BOb3RpZnlBdWRpb1wiKTtuLmxvZyhcIlZESSBTaGltIEF1ZGlvIHBhdXNlTm90aWZ5QXVkaW8gYXVkaW9JZDpcIithK1wiIHNyYzpcIitiKTtOJiZOLnBhdXNlTm90aWZ5QXVkaW8oYSxcclxuYil9LHNldFNpbmtJZDpmdW5jdGlvbihhLGIpe0UoXCJzZXRTaW5rSWRcIik7bi5sb2coXCJWREkgU2hpbSBBdWRpbyBzZXRTaW5rSWQgYXVkaW9JZDpcIithK1wiIHNpbmtJZDpcIitiKTtOJiZOLnNldFNpbmtJZChhLGIpfSxnZXRMb29wOmZ1bmN0aW9uKGEpe0UoXCJnZXRMb29wXCIpO3ZhciBiO04mJihiPU4uZ2V0TG9vcChhKSk7bi5sb2coXCJWREkgU2hpbSBBdWRpbyBnZXRMb29wIGF1ZGlvSWQ6XCIrYStcIiBsb29wOiBcIitiKTtyZXR1cm4gYn0sc2V0TG9vcDpmdW5jdGlvbihhLGIpe0UoXCJzZXRMb29wXCIpO24ubG9nKFwiVkRJIFNoaW0gQXVkaW8gc2V0TG9vcCBhdWRpb0lkOlwiK2ErXCIgYm9vbDpcIitiKTtOJiZOLnNldExvb3AoYSxiKX0sYWRkQ2xpcFJlY3Q6ZnVuY3Rpb24oYSxiKXtFKFwiYWRkQ2xpcFJlY3RcIik7bi5sb2coXCJWREkgQWRkaW5nIE9jY2x1c2lvbiBcIitKU09OLnN0cmluZ2lmeShhKSk7YyhiLGZ1bmN0aW9uKGIpe2IuYWRkT2NjbHVzaW9uKGEpfSl9LHJlbW92ZUNsaXBSZWN0OmZ1bmN0aW9uKGEsXHJcbmIpe0UoXCJyZW1vdmVDbGlwUmVjdFwiKTtuLmxvZyhcIlZESSBSZW1vdmluZyBPY2NsdXNpb24gXCIrSlNPTi5zdHJpbmdpZnkoYSkpO2MoYixmdW5jdGlvbihiKXtiLnJlbW92ZU9jY2x1c2lvbihhKX0pfSxpbml0TG9nOmZ1bmN0aW9uKGEsYil7bi5zZXRNU0xvZ2dlcihhLGIpO24ubG9nKFwiVkRJIGluaXQgbG9nZ2VyXCIpfSxpc0ZlYXR1cmVPbjpmdW5jdGlvbihhKXtFKFwiaXNGZWF0dXJlT25cIik7cmV0dXJuIE8/Ty5pc0ZlYXR1cmVTdXBwb3J0ZWQoYSk6ITF9LG9uQ29ubmVjdGlvbkNoYW5nZTpmdW5jdGlvbihhKXtFKFwib25Db25uZWN0aW9uQ2hhbmdlXCIpO24ubG9nKFwiVkRJIDogb25Db25uZWN0aW9uQ2hhbmdlIHRvIFwiK2EpOyExPT09YT9uLmxvZyhcIkRpc2Nvbm5lY3RpbmcgZnJvbSB0aGUgVkRBXCIpOihuLmxvZyhcIkNvbm5lY3RpbmcgdG8gdGhlIFZEQVwiKSxhPXdpbmRvdy5nZXRDaXRyaXhXZWJydGNSZWRpcix2b2lkIDAhPT1hP2EoKS50aGVuKGZ1bmN0aW9uKGEpe24ubG9nKFwiU3VjZXNzcyBvbiBjb25uZWN0LCBDaXRyaXhSZWRpciByZWcgdmFsdWU6XCIrXHJcbmEpO1wiMFwiPT09YXx8XCIxXCI9PT1hP0soYSk6KG4ubG9nKFwiTVMgVGVhbXMgUmVkaXIgUmVnIGtleSBub3QgdXBkYXRlZCB5ZXRcIiksZigpKX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oKXtuLmxvZyhcIkZhaWx1cmUgdG8gUmVhZCBNUyBUZWFtcyByZWRpciBSZWcgS2V5XCIpO2YoKX0pOihuLmxvZyhcIndpbmRvdy5nZXRDaXRyaXhXZWJydGNSZWRpcigpIG1ldGhvZCBpcyBub3QgYXZhaWxhYmxlIHlldFwiKSxmKCkpKX0sZ2V0U2NyZWVuc0FzeW5jOmZ1bmN0aW9uKCl7RShcImdldFNjcmVlbnNBc3luY1wiKTtuLmxvZyhcIlZESSBTaGltIGdldFNjcmVlbnNBc3luY1wiKTtHKCk7dmFyIGE9Y2EoKTtyZXR1cm4gYS5nZXRTY3JlZW5zQXN5bmMuYXBwbHkoYSxhcmd1bWVudHMpfSxnZXRXaW5kb3dzQXN5bmM6ZnVuY3Rpb24oKXtFKFwiZ2V0V2luZG93c0FzeW5jXCIpO24ubG9nKFwiVkRJIFNoaW0gZ2V0V2luZG93c0FzeW5jXCIpO0coKTt2YXIgYT1jYSgpO3JldHVybiBhLmdldFdpbmRvd3NBc3luYy5hcHBseShhLFxyXG5hcmd1bWVudHMpfSxzZXRTY3JlZW5TaGFyZVBhbmVsSWQ6ZnVuY3Rpb24oYSl7RShcInNldFNjcmVlblNoYXJlUGFuZWxJZFwiKTtuLmxvZyhcIlZESTogc2V0U2NyZWVuU2hhcmVQYW5lbElkIHNldCB0byBcIitKU09OLnN0cmluZ2lmeShhKSk7RygpO251bGwhPT1IJiZILmlzVmFsaWQoKXx8KEg9bmV3IGQuUmVtb3RlRGV2aWNlcyk7SC5wYW5lbGlkPWF9LHNldENvZGVjQ2FwYWJpbGl0aWVzOmZ1bmN0aW9uKGEpe0UoXCJzZXRDb2RlY0NhcGFiaWxpdGllc1wiKTtHKCk7bi5sb2coXCJWREkgU2hpbSBzZXRDb2RlY0NhcGFiaWxpdGllc1wiKTtudWxsIT09SSYmSS5pc1ZhbGlkKCl8fChJPW5ldyBkLk5hdmlnYXRvclVzZXJNZWRpYSk7cmV0dXJuIEkuc2V0Q29kZWNDYXBhYmlsaXRpZXMoYSl9LGdldEU5MTFEYXRhOmZ1bmN0aW9uKCl7RShcImdldEU5MTFEYXRhXCIpO3JldHVybiBUP1QuZ2V0RTkxMUluZm8oKTpudWxsfSxjcmVhdGVNZWRpYVN0cmVhbTpmdW5jdGlvbihiKXtFKFwiY3JlYXRlTWVkaWFTdHJlYW1cIik7XHJcbm4ubG9nKFwiVkRJIFNoaW0gY3JlYXRlTWVkaWFTdHJlYW1cIik7cmV0dXJuIGEoYiwhMSl9LGNyZWF0ZU1lZGlhU3RyZWFtQXN5bmM6ZnVuY3Rpb24oYil7RShcImNyZWF0ZU1lZGlhU3RyZWFtQXN5bmNcIik7bi5sb2coXCJWREkgU2hpbSBjcmVhdGVNZWRpYVN0cmVhbUFzeW5jXCIpO3JldHVybiBhKGIsITApfSxkaXNwb3NlTWVkaWFTdHJlYW06ZnVuY3Rpb24oYSl7RShcImRpc3Bvc2VNZWRpYVN0cmVhbVwiKTtuLmxvZyhcIlZESSBTaGltIGRpc3Bvc2VNZWRpYVN0cmVhbTogXCIpO2Zvcih2YXIgYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgYz1hW2JdO2MmJmMuZGlzcG9zZSgpfX0sZ2V0Q2FwYWJpbGl0aWVzOmZ1bmN0aW9uKGEpe0UoXCJnZXRDYXBhYmlsaXRpZXNcIik7RygpO24ubG9nKFwiVkRJIFNoaW0gZ2V0Q2FwYWJpbGl0aWVzXCIpO251bGwhPT1JJiZJLmlzVmFsaWQoKXx8KEk9bmV3IGQuTmF2aWdhdG9yVXNlck1lZGlhLGRhPWQuTmF2aWdhdG9yVXNlck1lZGlhLmdldENhcGFiaWxpdGllcyk7XHJcbnJldHVybiBkYS5hcHBseShJLGFyZ3VtZW50cyl9LGluaXRVQ1NESzpmdW5jdGlvbihhKXtuLmxvZyhcIlZESSBTaGltIGluaXRVQ1NESyB2ZW5kb3I6XCIrYSk7dmFyIGI9ITA7dm9pZCAwPT1hfHxudWxsPT1hfHxcInN0cmluZ1wiIT09dHlwZW9mIGF8fDA9PWEubGVuZ3RoP2I9ITE6MD09YS5zcGxpdChcIiBcIikuam9pbihcIlwiKS5sZW5ndGgmJihiPSExKTtpZighYil0aHJvdyBuLmxvZyhcIlZESSBTaGltIGluaXRVQ1NESzogdGhyb3dpbmcgZXhjZXB0aW9uOiB2ZW5kb3IgaW5mbyBjYW5ub3QgYmUgZW1wdHkhISFcIiksbmV3IERPTUV4Y2VwdGlvbihcInZlbmRvciBpbmZvIGNhbm5vdCBiZSBlbXB0eSwgcGxlYXNlIHBhc3MgdmVuZG9yIGluZm8gc3RyaW5nISEhXCIpO1Z8fChXPWEsST1uZXcgZC5OYXZpZ2F0b3JVc2VyTWVkaWEsSD1uZXcgZC5SZW1vdGVEZXZpY2VzLE49bmV3IHksSD1uZXcgZC5SZW1vdGVEZXZpY2VzLFAoVyksd2luZG93Lm9uVmRpQ2xpZW50RGlzY29ubmVjdGVkPUwsd2luZG93Lm9uVmRpQ2xpZW50RGlzY29ubmVjdGVkVGltZXI9XHJcbkMsd2luZG93Lm9uVmRpQ2xpZW50Q29ubmVjdGVkPVIsVj0hMCl9LGRlaW5pdFVDU0RLOmZ1bmN0aW9uKCl7bi5sb2coXCJWREkgU2hpbSBkZWluaXRVQ1NES1wiKTtWJiYoZy5nZXRSZWRpcmVjdG9yKCkudGVybWluYXRlT3B0aW1pemF0aW9uKCksYmEoKSx3aW5kb3cub25WZGlDbGllbnREaXNjb25uZWN0ZWQ9dm9pZCAwLHdpbmRvdy5vblZkaUNsaWVudERpc2Nvbm5lY3RlZFRpbWVyPXZvaWQgMCxXPXdpbmRvdy5vblZkaUNsaWVudENvbm5lY3RlZD12b2lkIDAsVj0hMSl9fX0pfSw2Nzk6ZnVuY3Rpb24oYixhLGMpe3ZhciBlPXRoaXMmJnRoaXMuX19leHRlbmRzfHxmdW5jdGlvbigpe3ZhciBhPWZ1bmN0aW9uKGIsYyl7YT1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fHtfX3Byb3RvX186W119aW5zdGFuY2VvZiBBcnJheSYmZnVuY3Rpb24oYSxiKXthLl9fcHJvdG9fXz1ifXx8ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGMgaW4gYiliLmhhc093blByb3BlcnR5KGMpJiYoYVtjXT1iW2NdKX07XHJcbnJldHVybiBhKGIsYyl9O3JldHVybiBmdW5jdGlvbihiLGMpe2Z1bmN0aW9uIGQoKXt0aGlzLmNvbnN0cnVjdG9yPWJ9YShiLGMpO2IucHJvdG90eXBlPW51bGw9PT1jP09iamVjdC5jcmVhdGUoYyk6KGQucHJvdG90eXBlPWMucHJvdG90eXBlLG5ldyBkKX19KCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7YS5WaWRlb0VsZW1lbnQ9YS5WaWRlb1JlY3Q9dm9pZCAwO3ZhciBsPWMoNjU4KSxoPWMoNTUwKSxkPWMoODUxKSxwPWMoOTQ2KSxxPWMoNTUwKSxuPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGEsYil7dGhpcy54PU1hdGgucm91bmQoYS54KSpiLmRldmljZVBpeGVsUmF0aW87dGhpcy55PU1hdGgucm91bmQoYS55KSpiLmRldmljZVBpeGVsUmF0aW87dGhpcy53aWR0aD1NYXRoLnJvdW5kKGEud2lkdGgpKmIuZGV2aWNlUGl4ZWxSYXRpbzt0aGlzLmhlaWdodD1NYXRoLnJvdW5kKGEuaGVpZ2h0KSpiLmRldmljZVBpeGVsUmF0aW99fSgpO1xyXG5hLlZpZGVvUmVjdD1uO3ZhciBrOyhmdW5jdGlvbihhKXthW2EucGl4ZWxzPTBdPVwicGl4ZWxzXCI7YVthLnBlcmNlbnQ9MV09XCJwZXJjZW50XCJ9KShrfHwoaz17fSkpO3ZhciB2PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gYShiKXt0aGlzLnZhbHVlPXBhcnNlSW50KGIpO3RoaXMudW5pdHM9dGhpcy5kZXRlY3RVbml0cyhiKX1hLnByb3RvdHlwZS5kZXRlY3RVbml0cz1mdW5jdGlvbihhKXtyZXR1cm4tMT09PWEudG9Mb3dlckNhc2UoKS5pbmRleE9mKFwicHhcIik/ay5waXhlbHM6ay5wZXJjZW50fTtyZXR1cm4gYX0oKSx6OyhmdW5jdGlvbihhKXthW2EuZmlsbD0wXT1cImZpbGxcIjthW2EuY29udGFpbj0xXT1cImNvbnRhaW5cIjthW2EuY292ZXI9Ml09XCJjb3ZlclwifSkoenx8KHo9e30pKTt2YXIgZz1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihhLGIpe3RoaXMueD1hO3RoaXMueT1ifX0oKSxCPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gYShiLGMsZCl7dGhpcy5maXQ9dGhpcy5jb252ZXJ0Rml0KGIpO3RoaXMucG9zaXRpb249XHJcbm5ldyBnKGMsZCl9YS5wcm90b3R5cGUuY29udmVydEZpdD1mdW5jdGlvbihhKXtyZXR1cm5cImZpbGxcIj09YT96LmZpbGw6XCJjb250YWluXCI9PWE/ei5jb250YWluOlwiY292ZXJcIj09YT96LmNvdmVyOnouZmlsbH07cmV0dXJuIGF9KCksdDsoZnVuY3Rpb24oYSl7YVthLk5vdFJlYWR5PTBdPVwiTm90UmVhZHlcIjthW2EuUmVhZHk9MV09XCJSZWFkeVwifSkodHx8KHQ9e30pKTtiPWZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGIoYyxlKXt2YXIgZz1hLmNhbGwodGhpcyxudWxsLGguY2xhc3NfaWRfdC5WaWRlb0VsZW1lbnQsMCxsLlByb3h5TW9kZS5Mb2NhbCl8fHRoaXM7Zy5zcmNPYmplY3RfPW51bGw7Zy5zaW5rSWRfPVwiXCI7Zy52aWRlb1dpZHRoPTA7Zy52aWRlb0hlaWdodD0wO2cuaXNMb2FkZWQ9ITE7Zy5jb25uZWN0aW9uU3RhdGU9XCJkaXNjb25uZWN0ZWRcIjtnLnN0eWxlT2JzZXJ2ZXI9bnVsbDtnLnJlYWR5U3RhdGVfPXQuTm90UmVhZHk7Zy5kZWZlcnJlZFZpZGVvQWN0aW9ucz1bXTtnLnBlbmRpbmdSZWxlYXNlXz1cclxuITE7Zy5hY3RpdmVDb25uZWN0aW9uRXZlbnRfPW51bGw7Zy5jb25uZWN0aW9uRXZlbnRRdWV1ZV89W107Zy53aW5kb3dfPWU7Zy5lbGVtZW50SWQ9YztkLmxvZ2dlci5sb2coXCJWaWRlb0VsZW1lbnQuY29uc3RydWN0b3IgKGVsZW1lbnRpZDogXCIrYytcIilcIik7cmV0dXJuIGd9ZShiLGEpO2IucHJvdG90eXBlLmRpc3Bvc2U9ZnVuY3Rpb24oKXt2YXIgYT10aGlzO2QubG9nZ2VyLmxvZyhcIlZpZGVvRWxlbWVudC5kaXNwb3NlIChlbGVtZW50SWQ6IFwiK3RoaXMuZWxlbWVudElkK1wiIG9pZDogXCIrdGhpcy5vYmplY3RfaWQoKStcIilcIik7dGhpcy5wZW5kaW5nUmVsZWFzZV89ITA7dGhpcy5zcmNPYmplY3Q9dGhpcy5vbnRpbWV1cGRhdGU9dGhpcy5vbmxvYWRlZG1ldGFkYXRhPW51bGw7dGhpcy53YWl0VW50aWxSZWFkeShcIlZpZGVvRWxlbWVudC5kaXNwb3NlXCIpLnRoZW4oZnVuY3Rpb24oKXt9KVtcImNhdGNoXCJdKGZ1bmN0aW9uKCl7YS5wZW5kaW5nUmVsZWFzZV89ITE7YS5zZXRTdGF0ZShcImRpc2Nvbm5lY3RlZFwiKTtcclxuYS5vbmNvbm5lY3Rpb25zdGF0ZWNoYW5nZT1udWxsO2EucmVsZWFzZSgpfSk7dGhpcy5vblJlYWR5KCl9O2IucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEpe3RoaXMuY29ubmVjdGlvblN0YXRlPWE7aWYodGhpcy5vbmNvbm5lY3Rpb25zdGF0ZWNoYW5nZV8pdGhpcy5vbmNvbm5lY3Rpb25zdGF0ZWNoYW5nZV8oKX07T2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFwiSWRcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZWxlbWVudElkfSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShiLnByb3RvdHlwZSxcInNpbmtJZFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zaW5rSWRffSxzZXQ6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcztkLmxvZ2dlci5sb2coXCJWaWRlb0VsZW1lbnQuc2lua0lkOiAoaWQ9XCIrYStcIilcIik7dGhpcy53YWl0VW50aWxDb25uZWN0ZWQoXCJWaWRlb0VsZW1lbnQuc2lua0lkXCIpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gdm9pZCAwIT1cclxuYT9iLnJlbW90ZUludm9rZSghMCxoLm1ldGhvZF9pZF9WaWRlb0VsZW1lbnRfdC5zaW5rSWQsYSk6bmV3IFByb21pc2UoZnVuY3Rpb24oYSl7cmV0dXJuIGEodm9pZCAwKX0pfSkudGhlbihmdW5jdGlvbigpe2QubG9nZ2VyLmxvZyhcInZpZGVvRWxlbWVudDogc2V0dGluZyBzdGF0ZSB0byByZWFkeS4gKG9pZDogXCIrYi5vYmplY3RfaWQoKStcIilcIik7Yi5zaW5rSWRfPWE7Yi5yZWFkeVN0YXRlXz10LlJlYWR5O2Iub25SZWFkeSgpfSlbXCJjYXRjaFwiXShmdW5jdGlvbihhKXtiLmxvZ1JlbW90ZUludm9rZUVycm9yKGEsXCIuc2V0X3NpbmtJZCgpIGZhaWxlZCFcIil9KX0sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYi5wcm90b3R5cGUsXCJzcmNPYmplY3RcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc3JjT2JqZWN0X30sc2V0OmZ1bmN0aW9uKGEpe2QubG9nZ2VyLmxvZyh0aGlzLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5zcmNPYmplY3Q6IHNldCBzcmNPYmplY3QuLi4gdGhpcy5zcmNPYmplY3Q6XCIrXHJcbnRoaXMuc3JjT2JqZWN0K1wiIG9iajpcIithKTtpZih0aGlzLnNyY09iamVjdF8hPT1hKXt2YXIgYj1wLmdldFJlZGlyZWN0b3IoKS5nZXRGZWF0dXJlVmFsdWUocS5GRUFUVVJFX21zX3RlYW1zXzE5MTEpO251bGwhPT10aGlzLnNyY09iamVjdF8mJihudWxsPT09YSYmYiYmdGhpcy5kaXNjb25uZWN0KCksYnx8dGhpcy5kaXNjb25uZWN0KCksdGhpcy5pc0xvYWRlZD0hMSk7dGhpcy5zcmNPYmplY3RfPWE7bnVsbCE9PXRoaXMuc3JjT2JqZWN0XyYmdGhpcy5jb25uZWN0VG8odGhpcy5zcmNPYmplY3RfKX19LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFwib25jb25uZWN0aW9uc3RhdGVjaGFuZ2VcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMub25jb25uZWN0aW9uc3RhdGVjaGFuZ2VffSxzZXQ6ZnVuY3Rpb24oYSl7ZC5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLnNldF9vbmNvbm5lY3Rpb25zdGF0ZWNoYW5nZSgpIGNhbGxlZC5cIik7XHJcbnRoaXMub25jb25uZWN0aW9uc3RhdGVjaGFuZ2VfPWF9LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFwib25sb2FkZWRtZXRhZGF0YVwiLHtzZXQ6ZnVuY3Rpb24oYSl7ZC5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLnNldF9vbmxvYWRlZG1ldGFkYXRhKCkgY2FsbGVkLlwiKTt0aGlzLm9ubG9hZGVkbWV0YWRhdGFfPWF9LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSk7Yi5wcm90b3R5cGUuc2V0dXBPblZpZGVvRnJhbWVDaGFuZ2VkPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcyxiPXRoaXMucmVnaXN0ZXJDYWxsYmFja3MoITEsITEsaC5tZXRob2RfaWRfVmlkZW9FbGVtZW50X3Qub252aWRlb2ZyYW1lY2hhbmdlZCk7Yi50aGVuKGZ1bmN0aW9uKGIpe2QubG9nZ2VyLmxvZyhhLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5vbnZpZGVvZnJhbWVjaGFuZ2VkXCIsYi5wYXJhbXMpO2EudmlkZW9XaWR0aD1cclxuYi5wYXJhbXNbMF18fDA7YS52aWRlb0hlaWdodD1iLnBhcmFtc1sxXXx8MDthLmlzTG9hZGVkfHwoYS5pc0xvYWRlZD0hMCxhLm9ubG9hZGVkbWV0YWRhdGFfJiZhLm9ubG9hZGVkbWV0YWRhdGFfKCkpfSk7dGhpcy5yZW1vdGVJbnZva2UoITAsaC5tZXRob2RfaWRfVmlkZW9FbGVtZW50X3Qub252aWRlb2ZyYW1lY2hhbmdlZCxiLnN1Y2Nlc3MpfTtiLnByb3RvdHlwZS5wcm9jZXNzQ29ubmVjdGlvbkV2ZW50PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcztpZigwIT09dGhpcy5jb25uZWN0aW9uRXZlbnRRdWV1ZV8ubGVuZ3RoJiYhdGhpcy5hY3RpdmVDb25uZWN0aW9uRXZlbnRfKXt2YXIgYj10aGlzLmNvbm5lY3Rpb25FdmVudFF1ZXVlXy5wb3AoKTtcImNvbm5lY3RUb1wiPT1iLm9wZXJhdGlvbj90aGlzLmFjdGl2ZUNvbm5lY3Rpb25FdmVudF89dGhpcy5jb25uZWN0VG9Bc3luYyhiLnBhcmFtKTpcImRpc2Nvbm5lY3RcIj09Yi5vcGVyYXRpb24mJih0aGlzLmFjdGl2ZUNvbm5lY3Rpb25FdmVudF89XHJcbnRoaXMuZGlzY29ubmVjdEFzeW5jKCkpO3RoaXMuYWN0aXZlQ29ubmVjdGlvbkV2ZW50Xy50aGVuKGZ1bmN0aW9uKCl7YS5hY3RpdmVDb25uZWN0aW9uRXZlbnRfPXZvaWQgMDthLnByb2Nlc3NDb25uZWN0aW9uRXZlbnQoKX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oKXtkLmxvZ2dlci5sb2coYS51c2VyX2ZyaWVuZGx5X2lkKCkrXCIgOiBGYWlsZWQgdG8gaGFuZGxlIGNvbm5lY3Rpb24gZXZlbnQhIFwiKTthLmFjdGl2ZUNvbm5lY3Rpb25FdmVudF89dm9pZCAwO2EucHJvY2Vzc0Nvbm5lY3Rpb25FdmVudCgpfSl9fTtiLnByb3RvdHlwZS5jb25uZWN0VG89ZnVuY3Rpb24oYSl7dGhpcy5jb25uZWN0aW9uRXZlbnRRdWV1ZV8ucHVzaCh7b3BlcmF0aW9uOlwiY29ubmVjdFRvXCIscGFyYW06YX0pO3RoaXMucHJvY2Vzc0Nvbm5lY3Rpb25FdmVudCgpfTtiLnByb3RvdHlwZS5kaXNjb25uZWN0PWZ1bmN0aW9uKCl7dGhpcy5jb25uZWN0aW9uRXZlbnRRdWV1ZV8ucHVzaCh7b3BlcmF0aW9uOlwiZGlzY29ubmVjdFwiLFxyXG5wYXJhbTpudWxsfSk7dGhpcy5wcm9jZXNzQ29ubmVjdGlvbkV2ZW50KCl9O2IucHJvdG90eXBlLmNvbm5lY3RUb0FzeW5jPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXM7cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKGMsZSl7ZC5sb2dnZXIubG9nKGIudXNlcl9mcmllbmRseV9pZCgpK1wiLmNvbm5lY3RUbzogY29ubmVjdCBtZWRpYSBzdHJlYW0gd2l0aCBpZCA9IFwiK2EuaWQrXCIsIGNsb25lX2lkID0gXCIrYS5jbG9uZV9zdGF0ZS5jbG9uZV9pZCk7Yi5zdHJlYW1JZF89YS5pZDtiLndhaXRVbnRpbFJlYWR5KFwiVmlkZW9FbGVtZW50LmNvbm5lY3RUb1wiKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGEud2FpdFVudGlsQ29ubmVjdGVkKFwiTWVkaWFTdHJlYW0uY29ubmVjdFRvXCIpfSkudGhlbihmdW5jdGlvbigpe2Iuc2V0dXBPblZpZGVvRnJhbWVDaGFuZ2VkKCk7cmV0dXJuIGEuY2xvbmVfc3RhdGUuc3luY2hyb25pemUoYSl9KS50aGVuKGZ1bmN0aW9uKGEpe2QubG9nZ2VyLmxvZyhiLnVzZXJfZnJpZW5kbHlfaWQoKStcclxuXCIuY29ubmVjdFRvOiByZW1vdGUgaW52b2tpbmdcIik7dmFyIGM9Yi5yZWdpc3RlckNhbGxiYWNrcyghMCwhMSxoLm1ldGhvZF9pZF9WaWRlb0VsZW1lbnRfdC5jb25uZWN0VG8pO3JldHVybiBQcm9taXNlLmFsbChbYi5yZW1vdGVJbnZva2VFeCghMSxoLm1ldGhvZF9pZF9WaWRlb0VsZW1lbnRfdC5jb25uZWN0VG8sW2FdLGMuc3VjY2VzcyxjLmZhaWwpLGMucHJvbSgpXSl9KS50aGVuKGZ1bmN0aW9uKGEpe2QubG9nZ2VyLmxvZyhiLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5jb25uZWN0VG86IHJlbW90ZSBtZWRpYSBzdHJlYW0gaXMgY29ubmVjdGVkIVwiKTtiLnNldFN0YXRlKFwiY29ubmVjdGVkXCIpO2Iud2F0Y2goKTtiLnVwZGF0ZVRpbWVyPXNldEludGVydmFsKGZ1bmN0aW9uKCl7Yi5vbnRpbWV1cGRhdGUmJmIub250aW1ldXBkYXRlKCl9LDI1MCk7KGE9Yi53aW5kb3dfLmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGIuZWxlbWVudElkKSkmJmIudXBkYXRlU3R5bGUoYSk7YygpfSlbXCJjYXRjaFwiXShmdW5jdGlvbihhKXtiLmxvZ1JlbW90ZUludm9rZUVycm9yKGEsXHJcblwiLmNvbm5lY3RUbzogZmFpbGVkIHRvIGNvbm5lY3QhXCIpO2UoKX0pfSl9O2IucHJvdG90eXBlLmRpc2Nvbm5lY3RBc3luYz1mdW5jdGlvbigpe3ZhciBhPXRoaXM7cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKGIsYyl7ZC5sb2dnZXIubG9nKGEudXNlcl9mcmllbmRseV9pZCgpK1wiLmRpc2Nvbm5lY3Q6IGRpc2Nvbm5lY3Rpbmcgc3RyZWFtIDogXCIrYS5zdHJlYW1JZF8pO2EudW53YXRjaCgpO2Eud2FpdFVudGlsUmVhZHkoXCJWaWRlb0VsZW1lbnQuZGlzY29ubmVjdFwiKS50aGVuKGZ1bmN0aW9uKCl7YS51cGRhdGVUaW1lciYmY2xlYXJJbnRlcnZhbChhLnVwZGF0ZVRpbWVyKTt2YXIgYj1hLnJlZ2lzdGVyQ2FsbGJhY2tzKCExLCEwLGgubWV0aG9kX2lkX1ZpZGVvRWxlbWVudF90Lm9udmlkZW9mcmFtZWNoYW5nZWQpO2EucmVtb3RlSW52b2tlKCEwLGgubWV0aG9kX2lkX1ZpZGVvRWxlbWVudF90Lm9udmlkZW9mcmFtZWNoYW5nZWQsYi5zdWNjZXNzKTtyZXR1cm4gYS5yZW1vdGVJbnZva2UoITEsXHJcbmgubWV0aG9kX2lkX1ZpZGVvRWxlbWVudF90LmRpc2Nvbm5lY3QpfSkudGhlbihmdW5jdGlvbigpe2QubG9nZ2VyLmxvZyhhLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5kaXNjb25uZWN0OiByZW1vdGUgbWVkaWEgc3RyZWFtIGlzIGRpc2Nvbm5lY3RlZCFcIik7YS5zZXRTdGF0ZShcImRpc2Nvbm5lY3RlZFwiKTsxPT1hLnBlbmRpbmdSZWxlYXNlXyYmKGEucGVuZGluZ1JlbGVhc2VfPSExLGEub25jb25uZWN0aW9uc3RhdGVjaGFuZ2U9bnVsbCxhLnJlbGVhc2UoKSk7YigpfSlbXCJjYXRjaFwiXShmdW5jdGlvbihiKXthLmxvZ1JlbW90ZUludm9rZUVycm9yKGIsXCIuZGlzY29ubmVjdDogZmFpbGVkIHRvIGNvbm5lY3QhXCIpO2MoKX0pfSl9O2IucHJvdG90eXBlLnNldEZyYW1lPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXM7ZC5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLnNldEZyYW1lOiBzZXQgdmlkZW8gZnJhbWUgdG9cIixhLngsYS55LGEud2lkdGgsYS5oZWlnaHQpO3RoaXMud2FpdFVudGlsUmVhZHkoXCJWaWRlb0VsZW1lbnQuc2V0RnJhbWVcIikudGhlbihmdW5jdGlvbigpe3ZhciBjPVxyXG5uZXcgbihhLGIud2luZG93Xyk7cmV0dXJuIGIucmVtb3RlSW52b2tlKCExLGgubWV0aG9kX2lkX1ZpZGVvRWxlbWVudF90LnNldEZyYW1lLGMpfSkudGhlbihmdW5jdGlvbigpe2QubG9nZ2VyLmxvZyhiLnVzZXJfZnJpZW5kbHlfaWQoKStcIi5zZXRGcmFtZTogc3VjY2VzcyFcIil9KVtcImNhdGNoXCJdKGZ1bmN0aW9uKGEpe2IubG9nUmVtb3RlSW52b2tlRXJyb3IoYSxcIi5zZXRGcmFtZTogZmFpbGVkIHRvIGNvbm5lY3QhXCIpfSl9O2IucHJvdG90eXBlLmFkZENsaXBSZWN0PWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXM7ZC5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLmFkZENsaXBSZWN0OiBcIixKU09OLnN0cmluZ2lmeShhKSk7dGhpcy53YWl0VW50aWxSZWFkeShcIlZpZGVvRWxlbWVudC5hZGRDbGlwUmVjdFwiKS50aGVuKGZ1bmN0aW9uKCl7dmFyIGM9bmV3IG4oYSxiLndpbmRvd18pO3JldHVybiBiLnJlbW90ZUludm9rZSghMSxoLm1ldGhvZF9pZF9WaWRlb0VsZW1lbnRfdC5hZGRDbGlwUmVjdCxcclxuYyl9KVtcImNhdGNoXCJdKGZ1bmN0aW9uKGEpe2IubG9nUmVtb3RlSW52b2tlRXJyb3IoYSxcIi5hZGRDbGlwUmVjdCBmYWlsZWQhXCIpfSl9O2IucHJvdG90eXBlLnJlbW92ZUNsaXBSZWN0PWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXM7ZC5sb2dnZXIubG9nKHRoaXMudXNlcl9mcmllbmRseV9pZCgpK1wiLnJlbW92ZUNsaXBSZWN0OiBcIixKU09OLnN0cmluZ2lmeShhKSk7dGhpcy53YWl0VW50aWxSZWFkeShcIlZpZGVvRWxlbWVudC5yZW1vdmVDbGlwUmVjdFwiKS50aGVuKGZ1bmN0aW9uKCl7dmFyIGM9bmV3IG4oYSxiLndpbmRvd18pO3JldHVybiBiLnJlbW90ZUludm9rZSghMSxoLm1ldGhvZF9pZF9WaWRlb0VsZW1lbnRfdC5yZW1vdmVDbGlwUmVjdCxjKX0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oYSl7Yi5sb2dSZW1vdGVJbnZva2VFcnJvcihhLFwiLnJlbW92ZUNsaXBSZWN0IGZhaWxlZCFcIil9KX07Yi5wcm90b3R5cGUud2F0Y2g9ZnVuY3Rpb24oKXt2YXIgYT10aGlzO2lmKHAuZ2V0UmVkaXJlY3RvcigpLmdldEZlYXR1cmVWYWx1ZShxLkZFQVRVUkVfbXNfdGVhbXNfdmlkZW9fcGxhY2VtZW50KSl7dmFyIGI9XHJcbnRoaXMud2luZG93Xy5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmVsZW1lbnRJZCk7YiYmKHRoaXMudW53YXRjaCgpLHRoaXMuc3R5bGVPYnNlcnZlcj1uZXcgTXV0YXRpb25PYnNlcnZlcihmdW5jdGlvbihiKXtiLmZvckVhY2goZnVuY3Rpb24oYil7XCJzdHlsZVwiPT1iLmF0dHJpYnV0ZU5hbWU/YS51cGRhdGVTdHlsZShiLnRhcmdldCk6YS5lbGVtZW50SWQ9Yi50YXJnZXQuaWR9KX0pLHRoaXMuc3R5bGVPYnNlcnZlci5vYnNlcnZlKGIse2F0dHJpYnV0ZXM6ITAsYXR0cmlidXRlT2xkVmFsdWU6ITAsYXR0cmlidXRlRmlsdGVyOltcInN0eWxlXCIsXCJpZFwiXX0pKX19O2IucHJvdG90eXBlLnVud2F0Y2g9ZnVuY3Rpb24oKXt0aGlzLnN0eWxlT2JzZXJ2ZXImJih0aGlzLnN0eWxlT2JzZXJ2ZXIuZGlzY29ubmVjdCgpLHRoaXMuc3R5bGVPYnNlcnZlcj1udWxsKX07Yi5wcm90b3R5cGUudXBkYXRlU3R5bGU9ZnVuY3Rpb24oYSl7aWYoXCJjb25uZWN0ZWRcIj09dGhpcy5jb25uZWN0aW9uU3RhdGUpe3ZhciBiPVxyXG50aGlzLndpbmRvd18uZ2V0Q29tcHV0ZWRTdHlsZShhKS5nZXRQcm9wZXJ0eVZhbHVlKFwib2JqZWN0LWZpdFwiKSxjPXRoaXMud2luZG93Xy5nZXRDb21wdXRlZFN0eWxlKGEpLmdldFByb3BlcnR5VmFsdWUoXCJvYmplY3QtcG9zaXRpb25cIikuc3BsaXQoXCIgXCIpO2E9bmV3IHYoY1swXSk7Yz1uZXcgdihjWzFdKTt0aGlzLnBsYWNlbWVudD1uZXcgQihiLGEsYyl9ZWxzZSBkLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIudXBkYXRlU3R5bGU6IHZpZGVvIGVsZW1lbnQgaXMgbm90IGNvbm5lY3RlZFwiKX07T2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFwicGxhY2VtZW50XCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnBsYWNlbWVudF99LHNldDpmdW5jdGlvbihhKXt2YXIgYj10aGlzO3AuZ2V0UmVkaXJlY3RvcigpLmdldEZlYXR1cmVWYWx1ZShxLkZFQVRVUkVfbXNfdGVhbXNfdmlkZW9fcGxhY2VtZW50KT90aGlzLndhaXRVbnRpbFJlYWR5KFwiVmlkZW9FbGVtZW50LnBsYWNlbWVudFwiKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGIucmVtb3RlSW52b2tlKCEwLFxyXG5oLm1ldGhvZF9pZF9WaWRlb0VsZW1lbnRfdC5wbGFjZW1lbnQsYSl9KS50aGVuKGZ1bmN0aW9uKCl7Yi5wbGFjZW1lbnRfPWF9KVtcImNhdGNoXCJdKGZ1bmN0aW9uKGEpe2IubG9nUmVtb3RlSW52b2tlRXJyb3IoYSxcIi5wbGFjZW1lbnQgc2V0dGVyOiBmYWlsZWQgdG8gY29ubmVjdCFcIil9KTpkLmxvZ2dlci5sb2codGhpcy51c2VyX2ZyaWVuZGx5X2lkKCkrXCIucGxhY2VtZW50OiB2aWRlbyBwbGFjZW1lbnQgZmVhdHVyZSBpcyBub3Qgc3VwcG9ydGVkIG9uIGEgY2xpZW50XCIpfSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pO2IucHJvdG90eXBlLndhaXRVbnRpbFJlYWR5PWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXM7cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKGMsZSl7ZC5sb2dnZXIubG9nKFwiVmlkZW9FbGVtZW50LndhaXRVbnRpbFJlYWR5KCk6IHJlYWR5U3RhdGU9XCIrYi5yZWFkeVN0YXRlXytcIi4gKG9pZDogXCIrYi5vYmplY3RfaWQoKStcIilcIik7Yi5yZWFkeVN0YXRlXz09XHJcbnQuUmVhZHk/YygpOihkLmxvZ2dlci5sb2coJ3ZpZGVvRWxlbWVudC53YWl0VW50aWxSZWFkeSgpOiBkZWZlcnJpbmcgYWN0aW9uIFwiJythKydcIi4gKG9pZDogJytiLm9iamVjdF9pZCgpK1wiKVwiKSxiLmRlZmVycmVkVmlkZW9BY3Rpb25zLnB1c2gobmV3IGwuZGVmZXJyZWRfYWN0aW9uKGMsZSxhKSkpfSl9O2IucHJvdG90eXBlLm9uUmVhZHk9ZnVuY3Rpb24oKXtmb3IoO3RoaXMuZGVmZXJyZWRWaWRlb0FjdGlvbnMmJjA8dGhpcy5kZWZlcnJlZFZpZGVvQWN0aW9ucy5sZW5ndGg7KXRoaXMuZGVmZXJyZWRWaWRlb0FjdGlvbnMuc2hpZnQoKS5wb3N0KHRoaXMucmVhZHlTdGF0ZV89PXQuUmVhZHkpfTtyZXR1cm4gYn0obC5Qcm94eU9iamVjdCk7YS5WaWRlb0VsZW1lbnQ9Yn0sMjY5OmZ1bmN0aW9uKGIsYSl7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7YS5IYXJkd2FyZUluZm89YS5NZW1vcnlJbmZvPWEuR1BVSW5mbz1hLkdQVT1hLkNQVUluZm89XHJcbmEuV2VicnBjQ2xhc3NMaWJJbmZvPWEuV2VicnBjQ2xhc3NJbmZvPWEuV2VicnBjTWV0aG9kSW5mbz1hLkVuZHBvaW50SWQ9YS5PU0luZm89YS5XZWJycGNGZWF0dXJlSW5mbz1hLkZlYXR1cmVEYXRhPWEuVmVyc2lvbkRhdGE9YS5GRUFUVVJFX3Vuc3VwcG9ydGVkPWEuRkVBVFVSRV9tc190ZWFtc19yZWRpcmVjdGlvbj12b2lkIDA7YS5GRUFUVVJFX21zX3RlYW1zX3JlZGlyZWN0aW9uPVwibXNfdGVhbXNfcmVkaXJlY3Rpb25cIjthLkZFQVRVUkVfdW5zdXBwb3J0ZWQ9XCJ1bnN1cHBvcnRlZFwiO3ZhciBjPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGEsYixjLGQpe3RoaXMubWFqb3I9YTt0aGlzLm1pbm9yPWI7dGhpcy5yZXZpc2lvbj1jO3RoaXMuYnVpbGQ9ZH19KCk7YS5WZXJzaW9uRGF0YT1jO2M9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oKXt9fSgpO2EuRmVhdHVyZURhdGE9YztjPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGEsYil7dGhpcy5mYXR1cmU9YTt0aGlzLnZlcnNpb249XHJcbmJ9fSgpO2EuV2VicnBjRmVhdHVyZUluZm89YztjPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGEsYixjLGQsZSl7dGhpcy5mYW1pbHk9YTt0aGlzLnZlcnNpb249Yjt0aGlzLmFyY2hpdGVjdHVyZT1jO3RoaXMuZGlzdHJvPWQ7dGhpcy5lZGl0aW9uPWV9fSgpO2EuT1NJbmZvPWM7Yz1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihhLGIpe3RoaXMubWFjaGluZV9pZD1hO3RoaXMudXNlcl9pZD1ifX0oKTthLkVuZHBvaW50SWQ9YztjPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGIsYyxlLGQsbCl7dm9pZCAwPT09bCYmKGw9YS5GRUFUVVJFX21zX3RlYW1zX3JlZGlyZWN0aW9uKTt0aGlzLmlpZD1iO3RoaXMubWlkPWM7dGhpcy5uYW1lPWU7dGhpcy5pc3Byb3A9ZDt0aGlzLmZlYXR1cmU9bH19KCk7YS5XZWJycGNNZXRob2RJbmZvPWM7Yz1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihhLGIsYyl7dGhpcy5pZD1hO3RoaXMubmFtZT1iO3RoaXMubWV0aG9kcz1jfX0oKTthLldlYnJwY0NsYXNzSW5mbz1cclxuYztjPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGEsYil7dGhpcy5uYW1lPWE7dGhpcy5jbGFzc2VzPWJ9fSgpO2EuV2VicnBjQ2xhc3NMaWJJbmZvPWM7Yz1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihhLGIpe3RoaXMuY3B1bW9kZWw9YTt0aGlzLm51bWJlcm9mcHJvY2Vzc29ycz1ifX0oKTthLkNQVUluZm89YztjPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGEsYil7dGhpcy5uYW1lPWE7dGhpcy5kcml2ZXI9Yn19KCk7YS5HUFU9YztjPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGEpe3RoaXMuZ3B1cz1hfX0oKTthLkdQVUluZm89YztjPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGEpe3RoaXMudG90YWxtZW1vcnk9YX19KCk7YS5NZW1vcnlJbmZvPWM7Yz1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihhLGIsYyl7dGhpcy5jcHVfaW5mbz1hO3RoaXMuZ3B1X2luZm89Yjt0aGlzLm1lbW9yeV9pbmZvPWN9fSgpO2EuSGFyZHdhcmVJbmZvPWN9LDU1MDpmdW5jdGlvbihiLFxyXG5hLGMpe3ZhciBlPXRoaXMmJnRoaXMuX19jcmVhdGVCaW5kaW5nfHwoT2JqZWN0LmNyZWF0ZT9mdW5jdGlvbihhLGIsYyxlKXt2b2lkIDA9PT1lJiYoZT1jKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxlLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBiW2NdfX0pfTpmdW5jdGlvbihhLGIsYyxlKXt2b2lkIDA9PT1lJiYoZT1jKTthW2VdPWJbY119KTtiPXRoaXMmJnRoaXMuX19leHBvcnRTdGFyfHxmdW5jdGlvbihhLGIpe2Zvcih2YXIgYyBpbiBhKVwiZGVmYXVsdFwiPT09Y3x8Yi5oYXNPd25Qcm9wZXJ0eShjKXx8ZShiLGEsYyl9O09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO2EuV2VicnBjQ2xhc3NMaWJJbmZvVXRpbD12b2lkIDA7dmFyIGw9YygxODcpO2IoYygxODcpLGEpO2M9ZnVuY3Rpb24oKXtmdW5jdGlvbiBhKCl7fWEuZ2V0SW50ZXJmYWNlQnlpZD1mdW5jdGlvbihhKXtmb3IodmFyIGI9MCxjPWwuY2xhc3NfbGliX2luZm8uY2xhc3NlcztiPFxyXG5jLmxlbmd0aDtiKyspe3ZhciBlPWNbYl07aWYoZS5pZD09YSlyZXR1cm4gZX1yZXR1cm4gbnVsbH07YS5nZXRNZXRob2RCeWlkPWZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcy5nZXRJbnRlcmZhY2VCeWlkKGEpO2lmKG51bGwhPWMpZm9yKHZhciBlPTAsYz1jLm1ldGhvZHM7ZTxjLmxlbmd0aDtlKyspe3ZhciBrPWNbZV07aWYoay5taWQ9PWIpcmV0dXJuIGt9cmV0dXJuIG51bGx9O2EuZ2V0TWV0aG9kRmVhdHVyZUJ5aWQ9ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLmdldEludGVyZmFjZUJ5aWQoYSk7aWYobnVsbCE9Yylmb3IodmFyIGU9MCxjPWMubWV0aG9kcztlPGMubGVuZ3RoO2UrKyl7dmFyIGs9Y1tlXTtpZihrLm1pZD09YilyZXR1cm4gay5mZWF0dXJlfXJldHVybiBudWxsfTthLmNvbXBvc2VDbGFzc0luZm9EYXRhPWZ1bmN0aW9uKGEpe2E9YS5oZHI7aWYodm9pZCAwPT1hKXJldHVyblwiKioqIEludmFsaWQgcGFja2V0OiBDb3VsZG4ndCBmaW5kIGhkciBvYmplY3QgKioqXCI7dmFyIGI9XHJcbmEucHJvYztpZih2b2lkIDA9PWIpcmV0dXJuXCJcIjthPWIuaWlkO2Zvcih2YXIgYj1iLm1ldGhvZGlkLGM9MCxlPWwuY2xhc3NfbGliX2luZm8uY2xhc3NlcztjPGUubGVuZ3RoO2MrKyl7dmFyIGs9ZVtjXTtpZihrLmlkPT1hKWZvcih2YXIgaD0wLHA9ay5tZXRob2RzO2g8cC5sZW5ndGg7aCsrKXt2YXIgZz1wW2hdO2lmKGcubWlkPT1iKXJldHVybiBrLm5hbWUrXCI6OlwiK2cubmFtZX19cmV0dXJuXCJcIn07cmV0dXJuIGF9KCk7YS5XZWJycGNDbGFzc0xpYkluZm9VdGlsPWN9LDE4NzpmdW5jdGlvbihiLGEsYyl7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7YS5jbGFzc19saWJfaW5mbz1hLm1ldGhvZF9pZF9TdHJlYW1SZXNvbHV0aW9uX3Q9YS5tZXRob2RfaWRfUlRDU2N0cFRyYW5zcG9ydF90PWEubWV0aG9kX2lkX1JUQ0RhdGFDaGFubmVsX3Q9YS5tZXRob2RfaWRfRTkxMVNlcnZpY2VfdD1hLm1ldGhvZF9pZF9TY3JlZW5Tb3VyY2VfdD1hLm1ldGhvZF9pZF9WRElTaGFyaW5nUmVtb3RlX3Q9XHJcbmEubWV0aG9kX2lkX1JUQ1J0cFRyYW5zY2VpdmVyX3Q9YS5tZXRob2RfaWRfUlRDSWNlQ2FuZGlkYXRlUGFpcl90PWEubWV0aG9kX2lkX1JUQ0RUTUZUb25lQ2hhbmdlRXZlbnRfdD1hLm1ldGhvZF9pZF9SVENEVE1GU2VuZGVyX3Q9YS5tZXRob2RfaWRfUlRDSWNlVHJhbnNwb3J0X3Q9YS5tZXRob2RfaWRfUlRDRHRsc1RyYW5zcG9ydF90PWEubWV0aG9kX2lkX1JUQ1J0cFNlbmRlcl90PWEubWV0aG9kX2lkX1JUQ1J0cFJlY2VpdmVyX3Q9YS5tZXRob2RfaWRfQXVkaW9FbGVtZW50X3Q9YS5tZXRob2RfaWRfVmlkZW9FbGVtZW50X3Q9YS5tZXRob2RfaWRfTWVkaWFTdHJlYW1FdmVudF90PWEubWV0aG9kX2lkX1JUQ0ljZUNhbmRpZGF0ZUV2ZW50X3Q9YS5tZXRob2RfaWRfUlRDSWNlQ2FuZGlkYXRlX3Q9YS5tZXRob2RfaWRfTmF2aWdhdG9yVXNlck1lZGlhX3Q9YS5tZXRob2RfaWRfTWVkaWFTdHJlYW1fdD1hLm1ldGhvZF9pZF9NZWRpYVN0cmVhbVRyYWNrX3Q9YS5tZXRob2RfaWRfUlRDU2Vzc2lvbkRlc2NyaXB0aW9uX3Q9XHJcbmEubWV0aG9kX2lkX01lZGlhRGV2aWNlSW5mb190PWEubWV0aG9kX2lkX01lZGlhRGV2aWNlc190PWEubWV0aG9kX2lkX1JUQ1BlZXJDb25uZWN0aW9uX3Q9YS5tZXRob2RfaWRfRW5naW5lQ29udHJvbF90PWEuY2xhc3NfaWRfdD1hLnZkYUZlYXR1cmVOYW1lTWFwPWEuZmVhdHVyZU5hbWVNYXA9YS5GZWF0dXJlcz1hLkZFQVRVUkVfbXNfdGVhbXNfc2VuZGVyX3N0YXRzX2ZpeD1hLkZFQVRVUkVfbXNfdGVhbXNfZW51bWVyYXRlX2RldmljZXNfdjI9YS5GRUFUVVJFX21zX3RlYW1zX3RyYWNrX2Nsb25lX3dpdGhfaWQ9YS5GRUFUVVJFX21zX3RlYW1zX2F1ZGlvX25vdGlmaWNhdGlvbnNfbG9vcD1hLkZFQVRVUkVfbXNfdGVhbXNfc2hhcmVfc3lzdGVtX2F1ZGlvPWEuRkVBVFVSRV9tc190ZWFtc19zdHJlYW1fYWN0aXZlX3N0YXR1cz1hLkZFQVRVUkVfbXNfdGVhbXNfaGFyZHdhcmVfaW5mbz1hLkZFQVRVUkVfbXNfdGVhbXNfc2Vjb25kYXJ5X2F1ZGlvX25vdGlmaWNhdGlvbnM9YS5GRUFUVVJFX21zX3RlYW1zX3N0cmVhbV9yZXNvbHV0aW9uPVxyXG5hLkZFQVRVUkVfbXNfdGVhbXNfY2xpZW50X2luZm89YS5GRUFUVVJFX21zX3RlYW1zX25vX3ZkX2J1ZmZlcl9saW1pdD1hLkZFQVRVUkVfbXNfdGVhbXNfZGF0YV9jaGFubmVsPWEuRkVBVFVSRV9tc190ZWFtc193ZWJydGNfMWRvdDA9YS5GRUFUVVJFX21zX3RlYW1zX211bHRpX3dpbmRvdz1hLkZFQVRVUkVfbXNfdGVhbXNfZ3RjPWEuRkVBVFVSRV9tc190ZWFtc19lOTExPWEuRkVBVFVSRV9tc190ZWFtc19jb2RlY19jYXBhYmlsaXR5PWEuRkVBVFVSRV9tc190ZWFtc19hcHBfc2hhcmluZz1hLkZFQVRVUkVfbXNfdGVhbXNfbW9uaXRvcl9zaGFyaW5nPWEuRkVBVFVSRV9tc190ZWFtc192aWRlb19wbGFjZW1lbnQ9YS5GRUFUVVJFX21zX3RlYW1zX2R0bWY9YS5GRUFUVVJFX21zX3RlYW1zX2RldmljZV9ncm91cF9pZD1hLkZFQVRVUkVfbXNfdGVhbXNfcmVtb3RlX2F1ZGlvX25vdGlmaWNhdGlvbnM9YS5GRUFUVVJFX21zX3RlYW1zX2VuZHBvaW50X2lkPWEuRkVBVFVSRV9tc190ZWFtc19vc2luZm89XHJcbmEuRkVBVFVSRV9tc190ZWFtc19tc3RyYWNrX2NvbnN0cmFpbnRzPWEuRkVBVFVSRV9tc190ZWFtc18xOTEyPWEuRkVBVFVSRV9tc190ZWFtc19wc3RuPWEuRkVBVFVSRV9tc190ZWFtc18xOTExPWEuRkVBVFVSRV9tc190ZWFtc19jb21tb25fbWVkaWFfY29uc3RyYWludHM9YS5GRUFUVVJFX21zX3RlYW1zX3NwZWFraW5nX2luZGljYXRvcj1hLkZFQVRVUkVfbXNfdGVhbXNfZGVza3RvcF9zaGFyaW5nPWEuRkVBVFVSRV92ZGFfZGVsZXRlX3ZpZXdwb3J0PWEuRkVBVFVSRV92ZGFfbXVsdGlfd2luZG93PWEuRkVBVFVSRV92ZGFfYXBwX3NoYXJpbmc9YS5GRUFUVVJFX3ZkYV9zZXJ2aWNlX25vX2J1ZmZlcl9saW1pdD1hLkhEWE1TX1ZFUlNJT049YS5CVUlMRF9UWVBFX1NESz12b2lkIDA7Yj1jKDI2OSk7dmFyIGU9YygyNjkpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLFwiVmVyc2lvbkRhdGFcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5WZXJzaW9uRGF0YX19KTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGEsXCJGZWF0dXJlRGF0YVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlLkZlYXR1cmVEYXRhfX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLFwiT1NJbmZvXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGUuT1NJbmZvfX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLFwiRW5kcG9pbnRJZFwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlLkVuZHBvaW50SWR9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsXCJIYXJkd2FyZUluZm9cIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5IYXJkd2FyZUluZm99fSk7YS5CVUlMRF9UWVBFX1NESz0hMDthLkhEWE1TX1ZFUlNJT049XCIzLjEuMFwiO2EuRkVBVFVSRV92ZGFfc2VydmljZV9ub19idWZmZXJfbGltaXQ9XCJ3c3NlcnZpY2Vfbm9fYnVmZmVyX2xpbWl0XCI7YS5GRUFUVVJFX3ZkYV9hcHBfc2hhcmluZz1cIndlYnJ0Y19hcHBfc2hhcmluZ1wiO1xyXG5hLkZFQVRVUkVfdmRhX211bHRpX3dpbmRvdz1cIndlYnJ0Y19tdWx0aV93aW5kb3dcIjthLkZFQVRVUkVfdmRhX2RlbGV0ZV92aWV3cG9ydD1cIm92ZXJsYXlfZGVsZXRlX3ZpZXdwb3J0XCI7YS5GRUFUVVJFX21zX3RlYW1zX2Rlc2t0b3Bfc2hhcmluZz1cIm1zX3RlYW1zX2Rlc2t0b3Bfc2hhcmluZ1wiO2EuRkVBVFVSRV9tc190ZWFtc19zcGVha2luZ19pbmRpY2F0b3I9XCJtc190ZWFtc19zcGVha2luZ19pbmRpY2F0b3JcIjthLkZFQVRVUkVfbXNfdGVhbXNfY29tbW9uX21lZGlhX2NvbnN0cmFpbnRzPVwibXNfdGVhbXNfY29tbW9uX21lZGlhX2NvbnN0cmFpbnRzXCI7YS5GRUFUVVJFX21zX3RlYW1zXzE5MTE9XCJtc190ZWFtc18xOTExXCI7YS5GRUFUVVJFX21zX3RlYW1zX3BzdG49XCJtc190ZWFtc19wc3RuXCI7YS5GRUFUVVJFX21zX3RlYW1zXzE5MTI9XCJtc190ZWFtc18xOTEyXCI7YS5GRUFUVVJFX21zX3RlYW1zX21zdHJhY2tfY29uc3RyYWludHM9XCJtc190ZWFtc19tc3RyYWNrX2NvbnN0cmFpbnRzXCI7XHJcbmEuRkVBVFVSRV9tc190ZWFtc19vc2luZm89XCJtc190ZWFtc19vc2luZm9cIjthLkZFQVRVUkVfbXNfdGVhbXNfZW5kcG9pbnRfaWQ9XCJtc190ZWFtc19lbmRwb2ludF9pZFwiO2EuRkVBVFVSRV9tc190ZWFtc19yZW1vdGVfYXVkaW9fbm90aWZpY2F0aW9ucz1cIm1zX3RlYW1zX3JlbW90ZV9hdWRpb19ub3RpZmljYXRpb25zXCI7YS5GRUFUVVJFX21zX3RlYW1zX2RldmljZV9ncm91cF9pZD1cIm1zX3RlYW1zX2RldmljZV9ncm91cF9pZFwiO2EuRkVBVFVSRV9tc190ZWFtc19kdG1mPVwibXNfdGVhbXNfZHRtZlwiO2EuRkVBVFVSRV9tc190ZWFtc192aWRlb19wbGFjZW1lbnQ9XCJtc190ZWFtc192aWRlb19wbGFjZW1lbnRcIjthLkZFQVRVUkVfbXNfdGVhbXNfbW9uaXRvcl9zaGFyaW5nPVwibXNfdGVhbXNfbXVsdGlfbW9uaXRvcl9zaGFyaW5nXCI7YS5GRUFUVVJFX21zX3RlYW1zX2FwcF9zaGFyaW5nPVwibXNfdGVhbXNfYXBwX3NoYXJpbmdcIjthLkZFQVRVUkVfbXNfdGVhbXNfY29kZWNfY2FwYWJpbGl0eT1cclxuXCJtc190ZWFtc19jb2RlY19jYXBhYmlsaXR5XCI7YS5GRUFUVVJFX21zX3RlYW1zX2U5MTE9XCJtc190ZWFtc19lOTExXCI7YS5GRUFUVVJFX21zX3RlYW1zX2d0Yz1cIm1zX3RlYW1zX2d0Y1wiO2EuRkVBVFVSRV9tc190ZWFtc19tdWx0aV93aW5kb3c9XCJtc190ZWFtc19tdWx0aV93aW5kb3dzXCI7YS5GRUFUVVJFX21zX3RlYW1zX3dlYnJ0Y18xZG90MD1cIm1zX3RlYW1zX3dlYnJ0Y18xLjBcIjthLkZFQVRVUkVfbXNfdGVhbXNfZGF0YV9jaGFubmVsPVwibXNfdGVhbXNfZGF0YV9jaGFubmVsXCI7YS5GRUFUVVJFX21zX3RlYW1zX25vX3ZkX2J1ZmZlcl9saW1pdD1cIm1zX3RlYW1zX25vX3ZkX2J1ZmZlcl9saW1pdFwiO2EuRkVBVFVSRV9tc190ZWFtc19jbGllbnRfaW5mbz1cIm1zX3RlYW1zX2NsaWVudF9pbmZvXCI7YS5GRUFUVVJFX21zX3RlYW1zX3N0cmVhbV9yZXNvbHV0aW9uPVwibXNfdGVhbXNfc3RyZWFtX3Jlc29sdXRpb25cIjthLkZFQVRVUkVfbXNfdGVhbXNfc2Vjb25kYXJ5X2F1ZGlvX25vdGlmaWNhdGlvbnM9XHJcblwibXNfdGVhbXNfc2Vjb25kYXJ5X2F1ZGlvX25vdGlmaWNhdGlvbnNcIjthLkZFQVRVUkVfbXNfdGVhbXNfaGFyZHdhcmVfaW5mbz1cIm1zX3RlYW1zX2hhcmR3YXJlX2luZm9cIjthLkZFQVRVUkVfbXNfdGVhbXNfc3RyZWFtX2FjdGl2ZV9zdGF0dXM9XCJtc190ZWFtc19zdHJlYW1fYWN0aXZlX3N0YXR1c1wiO2EuRkVBVFVSRV9tc190ZWFtc19zaGFyZV9zeXN0ZW1fYXVkaW89XCJtc190ZWFtc19zaGFyZV9zeXN0ZW1fYXVkaW9cIjthLkZFQVRVUkVfbXNfdGVhbXNfYXVkaW9fbm90aWZpY2F0aW9uc19sb29wPVwibXNfdGVhbXNfYXVkaW9fbm90aWZpY2F0aW9uc19sb29wXCI7YS5GRUFUVVJFX21zX3RlYW1zX3RyYWNrX2Nsb25lX3dpdGhfaWQ9XCJtc190ZWFtc190cmFja19jbG9uZV93aXRoX2lkXCI7YS5GRUFUVVJFX21zX3RlYW1zX2VudW1lcmF0ZV9kZXZpY2VzX3YyPVwibXNfdGVhbXNfZW51bWVyYXRlX2RldmljZXNfdjJcIjthLkZFQVRVUkVfbXNfdGVhbXNfc2VuZGVyX3N0YXRzX2ZpeD1cIm1zX3RlYW1zX3NlbmRlcl9zdGF0c19maXhcIjtcclxubmV3IGIuV2VicnBjRmVhdHVyZUluZm8oYi5GRUFUVVJFX21zX3RlYW1zX3JlZGlyZWN0aW9uLG5ldyBiLlZlcnNpb25EYXRhKDEsMSwwLDApKTtuZXcgYi5XZWJycGNGZWF0dXJlSW5mbyhhLkZFQVRVUkVfbXNfdGVhbXNfZGVza3RvcF9zaGFyaW5nLG5ldyBiLlZlcnNpb25EYXRhKDEsMiwwLDApKTtuZXcgYi5XZWJycGNGZWF0dXJlSW5mbyhhLkZFQVRVUkVfbXNfdGVhbXNfc3BlYWtpbmdfaW5kaWNhdG9yLG5ldyBiLlZlcnNpb25EYXRhKDEsMiwwLDApKTtuZXcgYi5XZWJycGNGZWF0dXJlSW5mbyhhLkZFQVRVUkVfbXNfdGVhbXNfY29tbW9uX21lZGlhX2NvbnN0cmFpbnRzLG5ldyBiLlZlcnNpb25EYXRhKDEsNCwwLDApKTtuZXcgYi5XZWJycGNGZWF0dXJlSW5mbyhhLkZFQVRVUkVfbXNfdGVhbXNfMTkxMSxuZXcgYi5WZXJzaW9uRGF0YSgxLDQsMCwwKSk7bmV3IGIuV2VicnBjRmVhdHVyZUluZm8oYS5GRUFUVVJFX21zX3RlYW1zXzE5MTIsbmV3IGIuVmVyc2lvbkRhdGEoMSw1LFxyXG4wLDApKTtuZXcgYi5XZWJycGNGZWF0dXJlSW5mbyhhLkZFQVRVUkVfbXNfdGVhbXNfbXN0cmFja19jb25zdHJhaW50cyxuZXcgYi5WZXJzaW9uRGF0YSgxLDYsMCwwKSk7bmV3IGIuV2VicnBjRmVhdHVyZUluZm8oYS5GRUFUVVJFX21zX3RlYW1zX3BzdG4sbmV3IGIuVmVyc2lvbkRhdGEoMSw2LDAsMCkpO25ldyBiLldlYnJwY0ZlYXR1cmVJbmZvKGEuRkVBVFVSRV9tc190ZWFtc19vc2luZm8sbmV3IGIuVmVyc2lvbkRhdGEoMSw3LDAsMCkpO25ldyBiLldlYnJwY0ZlYXR1cmVJbmZvKGEuRkVBVFVSRV9tc190ZWFtc19lbmRwb2ludF9pZCxuZXcgYi5WZXJzaW9uRGF0YSgxLDcsMCwwKSk7bmV3IGIuV2VicnBjRmVhdHVyZUluZm8oYS5GRUFUVVJFX21zX3RlYW1zX3JlbW90ZV9hdWRpb19ub3RpZmljYXRpb25zLG5ldyBiLlZlcnNpb25EYXRhKDEsNywwLDApKTtuZXcgYi5XZWJycGNGZWF0dXJlSW5mbyhhLkZFQVRVUkVfbXNfdGVhbXNfZGV2aWNlX2dyb3VwX2lkLG5ldyBiLlZlcnNpb25EYXRhKDEsXHJcbjcsMCwwKSk7bmV3IGIuV2VicnBjRmVhdHVyZUluZm8oYS5GRUFUVVJFX21zX3RlYW1zX2NvZGVjX2NhcGFiaWxpdHksbmV3IGIuVmVyc2lvbkRhdGEoMSw3LDAsMCkpO25ldyBiLldlYnJwY0ZlYXR1cmVJbmZvKGEuRkVBVFVSRV9tc190ZWFtc19kdG1mLG5ldyBiLlZlcnNpb25EYXRhKDEsNywwLDApKTtuZXcgYi5XZWJycGNGZWF0dXJlSW5mbyhhLkZFQVRVUkVfbXNfdGVhbXNfdmlkZW9fcGxhY2VtZW50LG5ldyBiLlZlcnNpb25EYXRhKDEsNywwLDApKTtuZXcgYi5XZWJycGNGZWF0dXJlSW5mbyhhLkZFQVRVUkVfbXNfdGVhbXNfbW9uaXRvcl9zaGFyaW5nLG5ldyBiLlZlcnNpb25EYXRhKDEsNywwLDApKTtuZXcgYi5XZWJycGNGZWF0dXJlSW5mbyhhLkZFQVRVUkVfbXNfdGVhbXNfYXBwX3NoYXJpbmcsbmV3IGIuVmVyc2lvbkRhdGEoMSw4LDAsMCkpO25ldyBiLldlYnJwY0ZlYXR1cmVJbmZvKGEuRkVBVFVSRV9tc190ZWFtc193ZWJydGNfMWRvdDAsbmV3IGIuVmVyc2lvbkRhdGEoMSxcclxuOCwwLDApKTtuZXcgYi5XZWJycGNGZWF0dXJlSW5mbyhhLkZFQVRVUkVfbXNfdGVhbXNfZGF0YV9jaGFubmVsLG5ldyBiLlZlcnNpb25EYXRhKDEsOCwwLDApKTtuZXcgYi5XZWJycGNGZWF0dXJlSW5mbyhhLkZFQVRVUkVfbXNfdGVhbXNfZTkxMSxuZXcgYi5WZXJzaW9uRGF0YSgxLDEzLDAsMCkpO25ldyBiLldlYnJwY0ZlYXR1cmVJbmZvKGEuRkVBVFVSRV9tc190ZWFtc19tdWx0aV93aW5kb3csbmV3IGIuVmVyc2lvbkRhdGEoMSwxNCwwLDApKTtuZXcgYi5XZWJycGNGZWF0dXJlSW5mbyhhLkZFQVRVUkVfbXNfdGVhbXNfY2xpZW50X2luZm8sbmV3IGIuVmVyc2lvbkRhdGEoMSwxOSwwLDApKTtuZXcgYi5XZWJycGNGZWF0dXJlSW5mbyhhLkZFQVRVUkVfbXNfdGVhbXNfc3RyZWFtX3Jlc29sdXRpb24sbmV3IGIuVmVyc2lvbkRhdGEoMSwyNSwwLDApKTtuZXcgYi5XZWJycGNGZWF0dXJlSW5mbyhhLkZFQVRVUkVfbXNfdGVhbXNfc2Vjb25kYXJ5X2F1ZGlvX25vdGlmaWNhdGlvbnMsXHJcbm5ldyBiLlZlcnNpb25EYXRhKDEsMjEsMCwwKSk7bmV3IGIuV2VicnBjRmVhdHVyZUluZm8oYS5GRUFUVVJFX21zX3RlYW1zX2hhcmR3YXJlX2luZm8sbmV3IGIuVmVyc2lvbkRhdGEoMSwzNSwwLDApKTtuZXcgYi5XZWJycGNGZWF0dXJlSW5mbyhhLkZFQVRVUkVfbXNfdGVhbXNfc3RyZWFtX2FjdGl2ZV9zdGF0dXMsbmV3IGIuVmVyc2lvbkRhdGEoMSwzMiwwLDApKTtuZXcgYi5XZWJycGNGZWF0dXJlSW5mbyhhLkZFQVRVUkVfbXNfdGVhbXNfYXVkaW9fbm90aWZpY2F0aW9uc19sb29wLG5ldyBiLlZlcnNpb25EYXRhKDEsMzMsMCwwKSk7bmV3IGIuV2VicnBjRmVhdHVyZUluZm8oYS5GRUFUVVJFX21zX3RlYW1zX3RyYWNrX2Nsb25lX3dpdGhfaWQsbmV3IGIuVmVyc2lvbkRhdGEoMSwzMywwLDApKTtuZXcgYi5XZWJycGNGZWF0dXJlSW5mbyhhLkZFQVRVUkVfbXNfdGVhbXNfZW51bWVyYXRlX2RldmljZXNfdjIsbmV3IGIuVmVyc2lvbkRhdGEoMSwzNSwwLDApKTtuZXcgYi5XZWJycGNGZWF0dXJlSW5mbyhhLkZFQVRVUkVfbXNfdGVhbXNfc2VuZGVyX3N0YXRzX2ZpeCxcclxubmV3IGIuVmVyc2lvbkRhdGEoMSwzNiwwLDApKTtjPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gYSgpe31hLkZFQVRVUkVfcHVibGljX3NjcmVlbnNoYXJlPVwic2NyZWVuc2hhcmVcIjthLkZFQVRVUkVfcHVibGljX3JlZGlyZWN0aW9uPVwicmVkaXJlY3Rpb25cIjthLkZFQVRVUkVfcHVibGljX3NwZWFraW5nX2luZGljYXRvcj1cInNwZWFraW5nX2luZGljYXRvclwiO2EuRkVBVFVSRV9wdWJsaWNfcHN0bj1cInBzdG5cIjthLkZFQVRVUkVfcHVibGljX29zaW5mbz1cIm9zaW5mb1wiO2EuRkVBVFVSRV9wdWJsaWNfZW5kcG9pbnRfaWQ9XCJlbmRwb2ludGlkXCI7YS5GRUFUVVJFX3B1YmxpY19yZW1vdGVfYXVkaW9fbm90aWZpY2F0aW9ucz1cInJlbW90ZWF1ZGlvbm90aWZpY2F0aW9uc1wiO2EuRkVBVFVSRV9wdWJsaWNfZGV2aWNlX2dyb3VwX2lkPVwiY29tcG9zaXRlZGV2aWNlc1wiO2EuRkVBVFVSRV9wdWJsaWNfZHRtZj1cImR0bWZcIjthLkZFQVRVUkVfcHVibGljX21vbml0b3Jfc2hhcmluZz1cIm11bHRpbW9uaXRvcnNjcmVlbnNoYXJlXCI7XHJcbmEuRkVBVFVSRV9wdWJsaWNfYXBwX3NoYXJpbmc9XCJhcHBzaGFyZVwiO2EuRkVBVFVSRV9wdWJsaWNfY29kZWNfY2FwYWJpbGl0eT1cImNvZGVjX2NhcGFiaWxpdHlcIjthLkZFQVRVUkVfcHVibGljX2U5MTE9XCJlOTExXCI7YS5GRUFUVVJFX3B1YmxpY193ZWJydGMxZG90MD1cIndlYnJ0YzEuMFwiO2EuRkVBVFVSRV9wdWJsaWNfZGF0YV9jaGFubmVsPVwiZGF0YWNoYW5uZWxcIjthLkZFQVRVUkVfcHVibGljX3Zkbm9idWZsaW1pdD1cInZkbm9idWZsaW1pdFwiO2EuRkVBVFVSRV9wdWJsaWNfbXVsdGlfd2luZG93PVwibXVsdGl3aW5kb3dcIjthLkZFQVRVUkVfcHVibGljX3NlY29uZGFyeV9hdWRpb19ub3RpZmljYXRpb25zPVwic2Vjb25kYXJ5cmluZ2VyXCI7YS5GRUFUVVJFX3B1YmxpY19zdHJlYW1fcmVzb2x1dGlvbj1cInN0cmVhbXJlc29sdXRpb25cIjthLkZFQVRVUkVfcHVibGljX3RyYWNrX2Nsb25lX3dpdGhfaWQ9XCJ0cmFja19jbG9uZV93aXRoX2lkXCI7YS5GRUFUVVJFX3B1YmxpY19zZW5kZXJfc3RhdHNfZml4PVxyXG5cInNlbmRlcl9zdGF0c19maXhcIjthLkZFQVRVUkVfcHVibGljX2F1ZGlvX25vdGlmaWNhdGlvbl9sb29wPVwibG9vcFwiO3JldHVybiBhfSgpO2EuRmVhdHVyZXM9YzthLmZlYXR1cmVOYW1lTWFwPXt9O2EuZmVhdHVyZU5hbWVNYXBbYy5GRUFUVVJFX3B1YmxpY19zY3JlZW5zaGFyZV09W2EuRkVBVFVSRV9tc190ZWFtc19kZXNrdG9wX3NoYXJpbmddO2EuZmVhdHVyZU5hbWVNYXBbYy5GRUFUVVJFX3B1YmxpY19yZWRpcmVjdGlvbl09W2IuRkVBVFVSRV9tc190ZWFtc19yZWRpcmVjdGlvbl07YS5mZWF0dXJlTmFtZU1hcFtjLkZFQVRVUkVfcHVibGljX3NwZWFraW5nX2luZGljYXRvcl09W2EuRkVBVFVSRV9tc190ZWFtc19zcGVha2luZ19pbmRpY2F0b3JdO2EuZmVhdHVyZU5hbWVNYXBbYy5GRUFUVVJFX3B1YmxpY19wc3RuXT1bYS5GRUFUVVJFX21zX3RlYW1zX3BzdG5dO2EuZmVhdHVyZU5hbWVNYXBbYy5GRUFUVVJFX3B1YmxpY19vc2luZm9dPVthLkZFQVRVUkVfbXNfdGVhbXNfb3NpbmZvXTtcclxuYS5mZWF0dXJlTmFtZU1hcFtjLkZFQVRVUkVfcHVibGljX2VuZHBvaW50X2lkXT1bYS5GRUFUVVJFX21zX3RlYW1zX2VuZHBvaW50X2lkXTthLmZlYXR1cmVOYW1lTWFwW2MuRkVBVFVSRV9wdWJsaWNfcmVtb3RlX2F1ZGlvX25vdGlmaWNhdGlvbnNdPVthLkZFQVRVUkVfbXNfdGVhbXNfcmVtb3RlX2F1ZGlvX25vdGlmaWNhdGlvbnMsYS5GRUFUVVJFX21zX3RlYW1zX3NlY29uZGFyeV9hdWRpb19ub3RpZmljYXRpb25zXTthLmZlYXR1cmVOYW1lTWFwW2MuRkVBVFVSRV9wdWJsaWNfZGV2aWNlX2dyb3VwX2lkXT1bYS5GRUFUVVJFX21zX3RlYW1zX2RldmljZV9ncm91cF9pZF07YS5mZWF0dXJlTmFtZU1hcFtjLkZFQVRVUkVfcHVibGljX2R0bWZdPVthLkZFQVRVUkVfbXNfdGVhbXNfZHRtZl07YS5mZWF0dXJlTmFtZU1hcFtjLkZFQVRVUkVfcHVibGljX21vbml0b3Jfc2hhcmluZ109W2EuRkVBVFVSRV9tc190ZWFtc19tb25pdG9yX3NoYXJpbmddO2EuZmVhdHVyZU5hbWVNYXBbYy5GRUFUVVJFX3B1YmxpY19hcHBfc2hhcmluZ109XHJcblthLkZFQVRVUkVfbXNfdGVhbXNfYXBwX3NoYXJpbmddO2EuZmVhdHVyZU5hbWVNYXBbYy5GRUFUVVJFX3B1YmxpY19jb2RlY19jYXBhYmlsaXR5XT1bYS5GRUFUVVJFX21zX3RlYW1zX2NvZGVjX2NhcGFiaWxpdHldO2EuZmVhdHVyZU5hbWVNYXBbYy5GRUFUVVJFX3B1YmxpY19lOTExXT1bYS5GRUFUVVJFX21zX3RlYW1zX2U5MTFdO2EuZmVhdHVyZU5hbWVNYXBbYy5GRUFUVVJFX3B1YmxpY193ZWJydGMxZG90MF09W2EuRkVBVFVSRV9tc190ZWFtc193ZWJydGNfMWRvdDBdO2EuZmVhdHVyZU5hbWVNYXBbYy5GRUFUVVJFX3B1YmxpY19tdWx0aV93aW5kb3ddPVthLkZFQVRVUkVfbXNfdGVhbXNfbXVsdGlfd2luZG93XTthLmZlYXR1cmVOYW1lTWFwW2MuRkVBVFVSRV9wdWJsaWNfZGF0YV9jaGFubmVsXT1bYS5GRUFUVVJFX21zX3RlYW1zX2RhdGFfY2hhbm5lbF07YS5mZWF0dXJlTmFtZU1hcFtjLkZFQVRVUkVfcHVibGljX3Zkbm9idWZsaW1pdF09W2EuRkVBVFVSRV9tc190ZWFtc19ub192ZF9idWZmZXJfbGltaXRdO1xyXG5hLmZlYXR1cmVOYW1lTWFwW2MuRkVBVFVSRV9wdWJsaWNfc2Vjb25kYXJ5X2F1ZGlvX25vdGlmaWNhdGlvbnNdPVthLkZFQVRVUkVfbXNfdGVhbXNfcmVtb3RlX2F1ZGlvX25vdGlmaWNhdGlvbnMsYS5GRUFUVVJFX21zX3RlYW1zX3NlY29uZGFyeV9hdWRpb19ub3RpZmljYXRpb25zXTthLmZlYXR1cmVOYW1lTWFwW2MuRkVBVFVSRV9wdWJsaWNfc3RyZWFtX3Jlc29sdXRpb25dPVthLkZFQVRVUkVfbXNfdGVhbXNfc3RyZWFtX3Jlc29sdXRpb25dO2EuZmVhdHVyZU5hbWVNYXBbYy5GRUFUVVJFX3B1YmxpY190cmFja19jbG9uZV93aXRoX2lkXT1bYS5GRUFUVVJFX21zX3RlYW1zX3RyYWNrX2Nsb25lX3dpdGhfaWRdO2EuZmVhdHVyZU5hbWVNYXBbYy5GRUFUVVJFX3B1YmxpY19zZW5kZXJfc3RhdHNfZml4XT1bYS5GRUFUVVJFX21zX3RlYW1zX3NlbmRlcl9zdGF0c19maXhdO2EuZmVhdHVyZU5hbWVNYXBbYy5GRUFUVVJFX3B1YmxpY19hdWRpb19ub3RpZmljYXRpb25fbG9vcF09W2EuRkVBVFVSRV9tc190ZWFtc19hdWRpb19ub3RpZmljYXRpb25zX2xvb3BdO1xyXG5hLnZkYUZlYXR1cmVOYW1lTWFwPXt9O2EudmRhRmVhdHVyZU5hbWVNYXBbYy5GRUFUVVJFX3B1YmxpY19tdWx0aV93aW5kb3ddPVthLkZFQVRVUkVfdmRhX211bHRpX3dpbmRvd107YS52ZGFGZWF0dXJlTmFtZU1hcFtjLkZFQVRVUkVfcHVibGljX2FwcF9zaGFyaW5nXT1bYS5GRUFUVVJFX3ZkYV9hcHBfc2hhcmluZ107KGZ1bmN0aW9uKGEpe2FbYS5FbmdpbmVDb250cm9sPTBdPVwiRW5naW5lQ29udHJvbFwiO2FbYS5SVENQZWVyQ29ubmVjdGlvbj0xXT1cIlJUQ1BlZXJDb25uZWN0aW9uXCI7YVthLlJUQ1Nlc3Npb25EZXNjcmlwdGlvbj0yXT1cIlJUQ1Nlc3Npb25EZXNjcmlwdGlvblwiO2FbYS5SVENJY2VDYW5kaWRhdGU9M109XCJSVENJY2VDYW5kaWRhdGVcIjthW2EuUlRDSWNlQ2FuZGlkYXRlRXZlbnQ9NF09XCJSVENJY2VDYW5kaWRhdGVFdmVudFwiO2FbYS5NZWRpYURldmljZXM9NV09XCJNZWRpYURldmljZXNcIjthW2EuTWVkaWFEZXZpY2VJbmZvPTZdPVwiTWVkaWFEZXZpY2VJbmZvXCI7YVthLk1lZGlhU3RyZWFtVHJhY2s9XHJcbjddPVwiTWVkaWFTdHJlYW1UcmFja1wiO2FbYS5NZWRpYVN0cmVhbUV2ZW50PThdPVwiTWVkaWFTdHJlYW1FdmVudFwiO2FbYS5NZWRpYVN0cmVhbT05XT1cIk1lZGlhU3RyZWFtXCI7YVthLk5hdmlnYXRvclVzZXJNZWRpYT0xMF09XCJOYXZpZ2F0b3JVc2VyTWVkaWFcIjthW2EuVmlkZW9FbGVtZW50PTExXT1cIlZpZGVvRWxlbWVudFwiO2FbYS5BdWRpb0VsZW1lbnQ9MTJdPVwiQXVkaW9FbGVtZW50XCI7YVthLlJUQ1J0cFJlY2VpdmVyPTEzXT1cIlJUQ1J0cFJlY2VpdmVyXCI7YVthLlJUQ1J0cFNlbmRlcj0xNF09XCJSVENSdHBTZW5kZXJcIjthW2EuUlRDRHRsc1RyYW5zcG9ydD0xNV09XCJSVENEdGxzVHJhbnNwb3J0XCI7YVthLlJUQ0ljZVRyYW5zcG9ydD0xNl09XCJSVENJY2VUcmFuc3BvcnRcIjthW2EuUlRDRFRNRlNlbmRlcj0xN109XCJSVENEVE1GU2VuZGVyXCI7YVthLlJUQ0RUTUZUb25lQ2hhbmdlRXZlbnQ9MThdPVwiUlRDRFRNRlRvbmVDaGFuZ2VFdmVudFwiO2FbYS5SVENJY2VDYW5kaWRhdGVQYWlyPTE5XT1cclxuXCJSVENJY2VDYW5kaWRhdGVQYWlyXCI7YVthLlJUQ1J0cFRyYW5zY2VpdmVyPTIwXT1cIlJUQ1J0cFRyYW5zY2VpdmVyXCI7YVthLlNjcmVlblNoYXJpbmdSZW1vdGU9MjFdPVwiU2NyZWVuU2hhcmluZ1JlbW90ZVwiO2FbYS5TY3JlZW5Tb3VyY2U9MjJdPVwiU2NyZWVuU291cmNlXCI7YVthLkU5MTFTZXJ2aWNlPTIzXT1cIkU5MTFTZXJ2aWNlXCI7YVthLnJlc2VydmVkMj0yNF09XCJyZXNlcnZlZDJcIjthW2EuUlRDRGF0YUNoYW5uZWw9MjVdPVwiUlRDRGF0YUNoYW5uZWxcIjthW2EuUlRDU2N0cFRyYW5zcG9ydD0yNl09XCJSVENTY3RwVHJhbnNwb3J0XCI7YVthLlN0cmVhbVJlc29sdXRpb249MjddPVwiU3RyZWFtUmVzb2x1dGlvblwiO2FbYS5WaWRlb0VmZmVjdD0yOF09XCJWaWRlb0VmZmVjdFwiO2FbYS5yZXNlcnZlZDY9MjldPVwicmVzZXJ2ZWQ2XCI7YVthLnJlc2VydmVkNz0zMF09XCJyZXNlcnZlZDdcIjthW2EucmVzZXJ2ZWQ4PTMxXT1cInJlc2VydmVkOFwifSkoYz1hLmNsYXNzX2lkX3R8fChhLmNsYXNzX2lkX3Q9XHJcbnt9KSk7dmFyIGw7KGZ1bmN0aW9uKGEpe2FbYS5jdG9yPTBdPVwiY3RvclwiO2FbYS52ZXJzaW9uPTFdPVwidmVyc2lvblwiO2FbYS5mZWF0dXJlX2ZsYWdzPTJdPVwiZmVhdHVyZV9mbGFnc1wiO2FbYS52ZXJzaW9uX2luZm89M109XCJ2ZXJzaW9uX2luZm9cIjthW2Eub3NpbmZvPTRdPVwib3NpbmZvXCI7YVthLmVuZHBvaW50X2lkPTVdPVwiZW5kcG9pbnRfaWRcIjthW2Euc2V0X2NsaWVudF9pbmZvPTZdPVwic2V0X2NsaWVudF9pbmZvXCI7YVthLmhhcmR3YXJlX2luZm89N109XCJoYXJkd2FyZV9pbmZvXCJ9KShsPWEubWV0aG9kX2lkX0VuZ2luZUNvbnRyb2xfdHx8KGEubWV0aG9kX2lkX0VuZ2luZUNvbnRyb2xfdD17fSkpO3ZhciBoOyhmdW5jdGlvbihhKXthW2EuY3Rvcj0wXT1cImN0b3JcIjthW2EubG9jYWxEZXNjcmlwdGlvbj0xXT1cImxvY2FsRGVzY3JpcHRpb25cIjthW2EucmVtb3RlRGVzY3JpcHRpb249Ml09XCJyZW1vdGVEZXNjcmlwdGlvblwiO2FbYS5yZWFkeVN0YXRlPTNdPVwicmVhZHlTdGF0ZVwiO2FbYS5pY2VTdGF0ZT1cclxuNF09XCJpY2VTdGF0ZVwiO2FbYS5sb2NhbFN0cmVhbXM9NV09XCJsb2NhbFN0cmVhbXNcIjthW2EucmVtb3RlU3RyZWFtcz02XT1cInJlbW90ZVN0cmVhbXNcIjthW2EuY3JlYXRlT2ZmZXI9N109XCJjcmVhdGVPZmZlclwiO2FbYS5jcmVhdGVBbnN3ZXI9OF09XCJjcmVhdGVBbnN3ZXJcIjthW2Euc2V0TG9jYWxEZXNjcmlwdGlvbj05XT1cInNldExvY2FsRGVzY3JpcHRpb25cIjthW2Euc2V0UmVtb3RlRGVzY3JpcHRpb249MTBdPVwic2V0UmVtb3RlRGVzY3JpcHRpb25cIjthW2EudXBkYXRlSWNlPTExXT1cInVwZGF0ZUljZVwiO2FbYS5hZGRJY2VDYW5kaWRhdGU9MTJdPVwiYWRkSWNlQ2FuZGlkYXRlXCI7YVthLmFkZFN0cmVhbT0xM109XCJhZGRTdHJlYW1cIjthW2EucmVtb3ZlU3RyZWFtPTE0XT1cInJlbW92ZVN0cmVhbVwiO2FbYS5jbG9zZT0xNV09XCJjbG9zZVwiO2FbYS5pY2VDb25uZWN0aW9uU3RhdGU9MTZdPVwiaWNlQ29ubmVjdGlvblN0YXRlXCI7YVthLmljZUdhdGhlcmluZ1N0YXRlPTE3XT1cImljZUdhdGhlcmluZ1N0YXRlXCI7XHJcbmFbYS5zaWduYWxpbmdTdGF0ZT0xOF09XCJzaWduYWxpbmdTdGF0ZVwiO2FbYS5vbmFkZHN0cmVhbT0xOV09XCJvbmFkZHN0cmVhbVwiO2FbYS5vbmljZWNhbmRpZGF0ZT0yMF09XCJvbmljZWNhbmRpZGF0ZVwiO2FbYS5vbmljZWNvbm5lY3Rpb25zdGF0ZWNoYW5nZT0yMV09XCJvbmljZWNvbm5lY3Rpb25zdGF0ZWNoYW5nZVwiO2FbYS5vbmljZWdhdGhlcmluZ3N0YXRlY2hhbmdlPTIyXT1cIm9uaWNlZ2F0aGVyaW5nc3RhdGVjaGFuZ2VcIjthW2Eub25zaWduYWxpbmdzdGF0ZWNoYW5nZT0yM109XCJvbnNpZ25hbGluZ3N0YXRlY2hhbmdlXCI7YVthLm9ubmVnb3RpYXRpb25uZWVkZWQ9MjRdPVwib25uZWdvdGlhdGlvbm5lZWRlZFwiO2FbYS5vbnJlbW92ZXN0cmVhbT0yNV09XCJvbnJlbW92ZXN0cmVhbVwiO2FbYS5nZXRTdGF0cz0yNl09XCJnZXRTdGF0c1wiO2FbYS5nZXRSZWNlaXZlcnM9MjddPVwiZ2V0UmVjZWl2ZXJzXCI7YVthLmdldFNlbmRlcnM9MjhdPVwiZ2V0U2VuZGVyc1wiO2FbYS5hZGRUcmFjaz0yOV09XCJhZGRUcmFja1wiO1xyXG5hW2EucmVtb3ZlVHJhY2s9MzBdPVwicmVtb3ZlVHJhY2tcIjthW2Eub250cmFjaz0zMV09XCJvbnRyYWNrXCI7YVthLnNldExvY2FsRGVzY3JpcHRpb25fdjI9MzJdPVwic2V0TG9jYWxEZXNjcmlwdGlvbl92MlwiO2FbYS5zZXRSZW1vdGVEZXNjcmlwdGlvbl92Mj0zM109XCJzZXRSZW1vdGVEZXNjcmlwdGlvbl92MlwiO2FbYS5hZGRUcmFuc2NlaXZlcldpdGhUcmFjaz0zNF09XCJhZGRUcmFuc2NlaXZlcldpdGhUcmFja1wiO2FbYS5hZGRUcmFuc2NlaXZlcldpdGhLaW5kPTM1XT1cImFkZFRyYW5zY2VpdmVyV2l0aEtpbmRcIjthW2EuZ2V0VHJhbnNjZWl2ZXJzPTM2XT1cImdldFRyYW5zY2VpdmVyc1wiO2FbYS5vbmNvbm5lY3Rpb25zdGF0ZWNoYW5nZT0zN109XCJvbmNvbm5lY3Rpb25zdGF0ZWNoYW5nZVwiO2FbYS5zY3RwPTM4XT1cInNjdHBcIjthW2Eub25kYXRhY2hhbm5lbD0zOV09XCJvbmRhdGFjaGFubmVsXCI7YVthLmNyZWF0ZURhdGFDaGFubmVsPTQwXT1cImNyZWF0ZURhdGFDaGFubmVsXCI7YVthLmdldFN0YXRzX3YyPVxyXG40MV09XCJnZXRTdGF0c192MlwifSkoaD1hLm1ldGhvZF9pZF9SVENQZWVyQ29ubmVjdGlvbl90fHwoYS5tZXRob2RfaWRfUlRDUGVlckNvbm5lY3Rpb25fdD17fSkpO3ZhciBkOyhmdW5jdGlvbihhKXthW2EuY3Rvcj0wXT1cImN0b3JcIjthW2EuZW51bWVyYXRlRGV2aWNlcz0xXT1cImVudW1lcmF0ZURldmljZXNcIjthW2EuZ2V0RGlzcGxheU1lZGlhPTJdPVwiZ2V0RGlzcGxheU1lZGlhXCI7YVthLm9uZGV2aWNlY2hhbmdlPTNdPVwib25kZXZpY2VjaGFuZ2VcIjthW2EuZW51bWVyYXRlRGV2aWNlc1YyPTRdPVwiZW51bWVyYXRlRGV2aWNlc1YyXCJ9KShkPWEubWV0aG9kX2lkX01lZGlhRGV2aWNlc190fHwoYS5tZXRob2RfaWRfTWVkaWFEZXZpY2VzX3Q9e30pKTt2YXIgcDsoZnVuY3Rpb24oYSl7YVthLmN0b3I9MF09XCJjdG9yXCI7YVthLmRldmljZUlkPTFdPVwiZGV2aWNlSWRcIjthW2Eua2luZD0yXT1cImtpbmRcIjthW2EubGFiZWw9M109XCJsYWJlbFwiO2FbYS5ncm91cElkPTRdPVwiZ3JvdXBJZFwifSkocD1hLm1ldGhvZF9pZF9NZWRpYURldmljZUluZm9fdHx8XHJcbihhLm1ldGhvZF9pZF9NZWRpYURldmljZUluZm9fdD17fSkpO3ZhciBxOyhmdW5jdGlvbihhKXthW2EuY3Rvcj0wXT1cImN0b3JcIjthW2EudHlwZT0xXT1cInR5cGVcIjthW2Euc2RwPTJdPVwic2RwXCJ9KShxPWEubWV0aG9kX2lkX1JUQ1Nlc3Npb25EZXNjcmlwdGlvbl90fHwoYS5tZXRob2RfaWRfUlRDU2Vzc2lvbkRlc2NyaXB0aW9uX3Q9e30pKTt2YXIgbjsoZnVuY3Rpb24oYSl7YVthLmN0b3I9MF09XCJjdG9yXCI7YVthLmtpbmQ9MV09XCJraW5kXCI7YVthLmlkPTJdPVwiaWRcIjthW2EubGFiZWw9M109XCJsYWJlbFwiO2FbYS5lbmFibGVkPTRdPVwiZW5hYmxlZFwiO2FbYS5tdXRlZD01XT1cIm11dGVkXCI7YVthLnJlYWR5U3RhdGU9Nl09XCJyZWFkeVN0YXRlXCI7YVthLm9uZW5kZWQ9N109XCJvbmVuZGVkXCI7YVthLm9ubXV0ZT04XT1cIm9ubXV0ZVwiO2FbYS5vbnVubXV0ZT05XT1cIm9udW5tdXRlXCI7YVthLmNsb25lPTEwXT1cImNsb25lXCI7YVthLnN0b3A9MTFdPVwic3RvcFwiO2FbYS5nZXRDYXBhYmlsaXRpZXM9MTJdPVxyXG5cImdldENhcGFiaWxpdGllc1wiO2FbYS5nZXRTZXR0aW5ncz0xM109XCJnZXRTZXR0aW5nc1wiO2FbYS5hcHBseUNvbnN0cmFpbnRzPTE0XT1cImFwcGx5Q29uc3RyYWludHNcIjthW2EuZ2V0Q29uc3RyYWludHM9MTVdPVwiZ2V0Q29uc3RyYWludHNcIn0pKG49YS5tZXRob2RfaWRfTWVkaWFTdHJlYW1UcmFja190fHwoYS5tZXRob2RfaWRfTWVkaWFTdHJlYW1UcmFja190PXt9KSk7dmFyIGs7KGZ1bmN0aW9uKGEpe2FbYS5jdG9yPTBdPVwiY3RvclwiO2FbYS5pZD0xXT1cImlkXCI7YVthLmdldEF1ZGlvVHJhY2tzPTJdPVwiZ2V0QXVkaW9UcmFja3NcIjthW2EuZ2V0VmlkZW9UcmFja3M9M109XCJnZXRWaWRlb1RyYWNrc1wiO2FbYS5nZXRUcmFja3M9NF09XCJnZXRUcmFja3NcIjthW2EuZ2V0VHJhY2tCeUlkPTVdPVwiZ2V0VHJhY2tCeUlkXCI7YVthLmFkZFRyYWNrPTZdPVwiYWRkVHJhY2tcIjthW2EucmVtb3ZlVHJhY2s9N109XCJyZW1vdmVUcmFja1wiO2FbYS5jbG9uZT04XT1cImNsb25lXCI7YVthLmFjdGl2ZT05XT1cImFjdGl2ZVwifSkoaz1cclxuYS5tZXRob2RfaWRfTWVkaWFTdHJlYW1fdHx8KGEubWV0aG9kX2lkX01lZGlhU3RyZWFtX3Q9e30pKTt2YXIgdjsoZnVuY3Rpb24oYSl7YVthLmN0b3I9MF09XCJjdG9yXCI7YVthLmdldFVzZXJNZWRpYT0xXT1cImdldFVzZXJNZWRpYVwiO2FbYS5zZXRDb2RlY0NhcGFiaWxpdGllcz0yXT1cInNldENvZGVjQ2FwYWJpbGl0aWVzXCI7YVthLmdldENhcGFiaWxpdGllcz0zXT1cImdldENhcGFiaWxpdGllc1wifSkodj1hLm1ldGhvZF9pZF9OYXZpZ2F0b3JVc2VyTWVkaWFfdHx8KGEubWV0aG9kX2lkX05hdmlnYXRvclVzZXJNZWRpYV90PXt9KSk7dmFyIHo7KGZ1bmN0aW9uKGEpe2FbYS5jdG9yPTBdPVwiY3RvclwiO2FbYS5jYW5kaWRhdGU9MV09XCJjYW5kaWRhdGVcIjthW2Euc2RwTWlkPTJdPVwic2RwTWlkXCI7YVthLnNkcE1MaW5lSW5kZXg9M109XCJzZHBNTGluZUluZGV4XCJ9KSh6PWEubWV0aG9kX2lkX1JUQ0ljZUNhbmRpZGF0ZV90fHwoYS5tZXRob2RfaWRfUlRDSWNlQ2FuZGlkYXRlX3Q9e30pKTt2YXIgZztcclxuKGZ1bmN0aW9uKGEpe2FbYS5jdG9yPTBdPVwiY3RvclwiO2FbYS5jYW5kaWRhdGU9MV09XCJjYW5kaWRhdGVcIn0pKGc9YS5tZXRob2RfaWRfUlRDSWNlQ2FuZGlkYXRlRXZlbnRfdHx8KGEubWV0aG9kX2lkX1JUQ0ljZUNhbmRpZGF0ZUV2ZW50X3Q9e30pKTt2YXIgQjsoZnVuY3Rpb24oYSl7YVthLmN0b3I9MF09XCJjdG9yXCI7YVthLnN0cmVhbT0xXT1cInN0cmVhbVwifSkoQj1hLm1ldGhvZF9pZF9NZWRpYVN0cmVhbUV2ZW50X3R8fChhLm1ldGhvZF9pZF9NZWRpYVN0cmVhbUV2ZW50X3Q9e30pKTt2YXIgdDsoZnVuY3Rpb24oYSl7YVthLmN0b3I9MF09XCJjdG9yXCI7YVthLnNpbmtJZD0xXT1cInNpbmtJZFwiO2FbYS5jb25uZWN0VG89Ml09XCJjb25uZWN0VG9cIjthW2EuZGlzY29ubmVjdD0zXT1cImRpc2Nvbm5lY3RcIjthW2Euc2V0RnJhbWU9NF09XCJzZXRGcmFtZVwiO2FbYS5hZGRDbGlwUmVjdD01XT1cImFkZENsaXBSZWN0XCI7YVthLnJlbW92ZUNsaXBSZWN0PTZdPVwicmVtb3ZlQ2xpcFJlY3RcIjthW2Eub25lcnJvcj1cclxuN109XCJvbmVycm9yXCI7YVthLm9udmlkZW9mcmFtZWNoYW5nZWQ9OF09XCJvbnZpZGVvZnJhbWVjaGFuZ2VkXCI7YVthLnBsYWNlbWVudD05XT1cInBsYWNlbWVudFwifSkodD1hLm1ldGhvZF9pZF9WaWRlb0VsZW1lbnRfdHx8KGEubWV0aG9kX2lkX1ZpZGVvRWxlbWVudF90PXt9KSk7dmFyIG07KGZ1bmN0aW9uKGEpe2FbYS5jdG9yPTBdPVwiY3RvclwiO2FbYS5zaW5rSWQ9MV09XCJzaW5rSWRcIjthW2Euc3JjT2JqZWN0PTJdPVwic3JjT2JqZWN0XCI7YVthLnNyYz0zXT1cInNyY1wiO2FbYS5wbGF5PTRdPVwicGxheVwiO2FbYS5wYXVzZT01XT1cInBhdXNlXCI7YVthLmxvb3A9Nl09XCJsb29wXCJ9KShtPWEubWV0aG9kX2lkX0F1ZGlvRWxlbWVudF90fHwoYS5tZXRob2RfaWRfQXVkaW9FbGVtZW50X3Q9e30pKTt2YXIgRDsoZnVuY3Rpb24oYSl7YVthLmN0b3I9MF09XCJjdG9yXCI7YVthLnRyYWNrPTFdPVwidHJhY2tcIjthW2EuZ2V0Q29udHJpYnV0aW5nU291cmNlcz0yXT1cImdldENvbnRyaWJ1dGluZ1NvdXJjZXNcIjtcclxuYVthLmdldFN5bmNocm9uaXphdGlvblNvdXJjZXM9M109XCJnZXRTeW5jaHJvbml6YXRpb25Tb3VyY2VzXCI7YVthLnRyYW5zcG9ydD00XT1cInRyYW5zcG9ydFwiO2FbYS5ydGNwVHJhbnNwb3J0PTVdPVwicnRjcFRyYW5zcG9ydFwiO2FbYS5nZXRDYXBhYmlsaXRpZXM9Nl09XCJnZXRDYXBhYmlsaXRpZXNcIjthW2EuZ2V0UGFyYW1ldGVycz03XT1cImdldFBhcmFtZXRlcnNcIjthW2EuZ2V0U3RhdHM9OF09XCJnZXRTdGF0c1wiO2FbYS5nZXRDYXBhYmlsaXRpZXNfdjI9OV09XCJnZXRDYXBhYmlsaXRpZXNfdjJcIn0pKEQ9YS5tZXRob2RfaWRfUlRDUnRwUmVjZWl2ZXJfdHx8KGEubWV0aG9kX2lkX1JUQ1J0cFJlY2VpdmVyX3Q9e30pKTt2YXIgeTsoZnVuY3Rpb24oYSl7YVthLmN0b3I9MF09XCJjdG9yXCI7YVthLnRyYWNrPTFdPVwidHJhY2tcIjthW2EudHJhbnNwb3J0PTJdPVwidHJhbnNwb3J0XCI7YVthLnJ0Y3BUcmFuc3BvcnQ9M109XCJydGNwVHJhbnNwb3J0XCI7YVthLmR0bWY9NF09XCJkdG1mXCI7YVthLmdldENhcGFiaWxpdGllcz1cclxuNV09XCJnZXRDYXBhYmlsaXRpZXNcIjthW2EuZ2V0UGFyYW1ldGVycz02XT1cImdldFBhcmFtZXRlcnNcIjthW2Euc2V0UGFyYW1ldGVycz03XT1cInNldFBhcmFtZXRlcnNcIjthW2EucmVwbGFjZVRyYWNrPThdPVwicmVwbGFjZVRyYWNrXCI7YVthLmdldFN0YXRzPTldPVwiZ2V0U3RhdHNcIjthW2Euc2V0U3RyZWFtcz0xMF09XCJzZXRTdHJlYW1zXCI7YVthLmdldENhcGFiaWxpdGllc192Mj0xMV09XCJnZXRDYXBhYmlsaXRpZXNfdjJcIn0pKHk9YS5tZXRob2RfaWRfUlRDUnRwU2VuZGVyX3R8fChhLm1ldGhvZF9pZF9SVENSdHBTZW5kZXJfdD17fSkpO3ZhciB4OyhmdW5jdGlvbihhKXthW2EuY3Rvcj0wXT1cImN0b3JcIjthW2EudHJhbnNwb3J0PTFdPVwidHJhbnNwb3J0XCI7YVthLnN0YXRlPTJdPVwic3RhdGVcIjthW2EuZ2V0UmVtb3RlQ2VydGlmaWNhdGVzPTNdPVwiZ2V0UmVtb3RlQ2VydGlmaWNhdGVzXCI7YVthLm9uc3RhdGVjaGFuZ2U9NF09XCJvbnN0YXRlY2hhbmdlXCI7YVthLm9uZXJyb3I9NV09XCJvbmVycm9yXCJ9KSh4PVxyXG5hLm1ldGhvZF9pZF9SVENEdGxzVHJhbnNwb3J0X3R8fChhLm1ldGhvZF9pZF9SVENEdGxzVHJhbnNwb3J0X3Q9e30pKTt2YXIgcjsoZnVuY3Rpb24oYSl7YVthLmN0b3I9MF09XCJjdG9yXCI7YVthLnJvbGU9MV09XCJyb2xlXCI7YVthLmNvbXBvbmVudD0yXT1cImNvbXBvbmVudFwiO2FbYS5zdGF0ZT0zXT1cInN0YXRlXCI7YVthLmdhdGhlcmluZ1N0YXRlPTRdPVwiZ2F0aGVyaW5nU3RhdGVcIjthW2EubG9jYWxjYW5kaWRhdGVzPTVdPVwibG9jYWxjYW5kaWRhdGVzXCI7YVthLnJlbW90ZWNhbmRpZGF0ZXM9Nl09XCJyZW1vdGVjYW5kaWRhdGVzXCI7YVthLm9uc3RhdGVjaGFuZ2U9N109XCJvbnN0YXRlY2hhbmdlXCI7YVthLm9uZ2F0aGVyaW5nc3RhdGVjaGFuZ2U9OF09XCJvbmdhdGhlcmluZ3N0YXRlY2hhbmdlXCI7YVthLm9uc2VsZWN0ZWRjYW5kaWRhdGVwYWlyY2hhbmdlPTldPVwib25zZWxlY3RlZGNhbmRpZGF0ZXBhaXJjaGFuZ2VcIn0pKHI9YS5tZXRob2RfaWRfUlRDSWNlVHJhbnNwb3J0X3R8fChhLm1ldGhvZF9pZF9SVENJY2VUcmFuc3BvcnRfdD1cclxue30pKTt2YXIgQTsoZnVuY3Rpb24oYSl7YVthLmN0b3I9MF09XCJjdG9yXCI7YVthLmluc2VydERUTUY9MV09XCJpbnNlcnREVE1GXCI7YVthLm9udG9uZWNoYW5nZT0yXT1cIm9udG9uZWNoYW5nZVwiO2FbYS5jYW5JbnNlcnREVE1GPTNdPVwiY2FuSW5zZXJ0RFRNRlwiO2FbYS50b25lQnVmZmVyPTRdPVwidG9uZUJ1ZmZlclwifSkoQT1hLm1ldGhvZF9pZF9SVENEVE1GU2VuZGVyX3R8fChhLm1ldGhvZF9pZF9SVENEVE1GU2VuZGVyX3Q9e30pKTt2YXIgTTsoZnVuY3Rpb24oYSl7YVthLmN0b3I9MF09XCJjdG9yXCI7YVthLnRvbmU9MV09XCJ0b25lXCI7YVthLnRvbmVfYnVmZmVyPTJdPVwidG9uZV9idWZmZXJcIn0pKE09YS5tZXRob2RfaWRfUlRDRFRNRlRvbmVDaGFuZ2VFdmVudF90fHwoYS5tZXRob2RfaWRfUlRDRFRNRlRvbmVDaGFuZ2VFdmVudF90PXt9KSk7dmFyIEY7KGZ1bmN0aW9uKGEpe2FbYS5jdG9yPTBdPVwiY3RvclwiO2FbYS5sb2NhbD0xXT1cImxvY2FsXCI7YVthLnJlbW90ZT0yXT1cInJlbW90ZVwifSkoRj1cclxuYS5tZXRob2RfaWRfUlRDSWNlQ2FuZGlkYXRlUGFpcl90fHwoYS5tZXRob2RfaWRfUlRDSWNlQ2FuZGlkYXRlUGFpcl90PXt9KSk7dmFyIEo7KGZ1bmN0aW9uKGEpe2FbYS5jdG9yPTBdPVwiY3RvclwiO2FbYS5taWQ9MV09XCJtaWRcIjthW2Euc2VuZGVyPTJdPVwic2VuZGVyXCI7YVthLnJlY2VpdmVyPTNdPVwicmVjZWl2ZXJcIjthW2EuZGlyZWN0aW9uPTRdPVwiZGlyZWN0aW9uXCI7YVthLmN1cnJlbnREaXJlY3Rpb249NV09XCJjdXJyZW50RGlyZWN0aW9uXCI7YVthLnN0b3A9Nl09XCJzdG9wXCI7YVthLnNldENvZGVjUHJlZmVyZW5jZXM9N109XCJzZXRDb2RlY1ByZWZlcmVuY2VzXCJ9KShKPWEubWV0aG9kX2lkX1JUQ1J0cFRyYW5zY2VpdmVyX3R8fChhLm1ldGhvZF9pZF9SVENSdHBUcmFuc2NlaXZlcl90PXt9KSk7dmFyIEc7KGZ1bmN0aW9uKGEpe2FbYS5jdG9yPTBdPVwiY3RvclwiO2FbYS5nZXRTY3JlZW5zQXN5bmM9MV09XCJnZXRTY3JlZW5zQXN5bmNcIjthW2Eub25zY3JlZW50b3BvbG9neWNoYW5nZWQ9XHJcbjJdPVwib25zY3JlZW50b3BvbG9neWNoYW5nZWRcIn0pKEc9YS5tZXRob2RfaWRfVkRJU2hhcmluZ1JlbW90ZV90fHwoYS5tZXRob2RfaWRfVkRJU2hhcmluZ1JlbW90ZV90PXt9KSk7dmFyIEw7KGZ1bmN0aW9uKGEpe2FbYS5jdG9yPTBdPVwiY3RvclwiO2FbYS5zcmNpZD0xXT1cInNyY2lkXCI7YVthLmRldmljZWlkPTJdPVwiZGV2aWNlaWRcIjthW2EudHlwZT0zXT1cInR5cGVcIjthW2EubmFtZT00XT1cIm5hbWVcIjthW2EuaW1hZ2VkYXRhPTVdPVwiaW1hZ2VkYXRhXCI7YVthLmh3bmQ9Nl09XCJod25kXCI7YVthLm9yaWdpbj03XT1cIm9yaWdpblwiO2FbYS5jYXB0aW9uPThdPVwiY2FwdGlvblwiO2FbYS5waWQ9OV09XCJwaWRcIjthW2EuYm91bmRzPTEwXT1cImJvdW5kc1wifSkoTD1hLm1ldGhvZF9pZF9TY3JlZW5Tb3VyY2VfdHx8KGEubWV0aG9kX2lkX1NjcmVlblNvdXJjZV90PXt9KSk7dmFyIFA7KGZ1bmN0aW9uKGEpe2FbYS5jdG9yPTBdPVwiY3RvclwiO2FbYS5nZXRFOTExSW5mbz0xXT1cImdldEU5MTFJbmZvXCI7YVthLm9udXBkYXRlPVxyXG4yXT1cIm9udXBkYXRlXCJ9KShQPWEubWV0aG9kX2lkX0U5MTFTZXJ2aWNlX3R8fChhLm1ldGhvZF9pZF9FOTExU2VydmljZV90PXt9KSk7dmFyIEM7KGZ1bmN0aW9uKGEpe2FbYS5jdG9yPTBdPVwiY3RvclwiO2FbYS5sYWJlbD0xXT1cImxhYmVsXCI7YVthLm9yZGVyZWQ9Ml09XCJvcmRlcmVkXCI7YVthLm1heFBhY2tldExpZmVUaW1lPTNdPVwibWF4UGFja2V0TGlmZVRpbWVcIjthW2EubWF4UmV0cmFuc21pdHM9NF09XCJtYXhSZXRyYW5zbWl0c1wiO2FbYS5wcm90b2NvbD01XT1cInByb3RvY29sXCI7YVthLm5lZ290aWF0ZWQ9Nl09XCJuZWdvdGlhdGVkXCI7YVthLmlkPTddPVwiaWRcIjthW2EucmVhZHlTdGF0ZT04XT1cInJlYWR5U3RhdGVcIjthW2EuYnVmZmVyZWRBbW91bnQ9OV09XCJidWZmZXJlZEFtb3VudFwiO2FbYS5idWZmZXJlZEFtb3VudExvd1RocmVzaG9sZD0xMF09XCJidWZmZXJlZEFtb3VudExvd1RocmVzaG9sZFwiO2FbYS5vbm9wZW49MTFdPVwib25vcGVuXCI7YVthLm9uYnVmZmVyZWRhbW91bnRsb3c9MTJdPVxyXG5cIm9uYnVmZmVyZWRhbW91bnRsb3dcIjthW2Eub25lcnJvcj0xM109XCJvbmVycm9yXCI7YVthLm9uY2xvc2luZz0xNF09XCJvbmNsb3NpbmdcIjthW2Eub25jbG9zZT0xNV09XCJvbmNsb3NlXCI7YVthLm9ubWVzc2FnZT0xNl09XCJvbm1lc3NhZ2VcIjthW2EuY2xvc2U9MTddPVwiY2xvc2VcIjthW2Euc2VuZF90ZXh0PTE4XT1cInNlbmRfdGV4dFwiO2FbYS5zZW5kX2JpbmFyeT0xOV09XCJzZW5kX2JpbmFyeVwifSkoQz1hLm1ldGhvZF9pZF9SVENEYXRhQ2hhbm5lbF90fHwoYS5tZXRob2RfaWRfUlRDRGF0YUNoYW5uZWxfdD17fSkpO3ZhciBSOyhmdW5jdGlvbihhKXthW2EuY3Rvcj0wXT1cImN0b3JcIjthW2EudHJhbnNwb3J0PTFdPVwidHJhbnNwb3J0XCI7YVthLnN0YXRlPTJdPVwic3RhdGVcIjthW2EubWF4TWVzc2FnZVNpemU9M109XCJtYXhNZXNzYWdlU2l6ZVwiO2FbYS5tYXhDaGFubmVscz00XT1cIm1heENoYW5uZWxzXCI7YVthLm9uc3RhdGVjaGFuZ2U9NV09XCJvbnN0YXRlY2hhbmdlXCJ9KShSPWEubWV0aG9kX2lkX1JUQ1NjdHBUcmFuc3BvcnRfdHx8XHJcbihhLm1ldGhvZF9pZF9SVENTY3RwVHJhbnNwb3J0X3Q9e30pKTt2YXIgSzsoZnVuY3Rpb24oYSl7YVthLmN0b3I9MF09XCJjdG9yXCI7YVthLmdldENhbGxDb25zdHJhaW50cz0xXT1cImdldENhbGxDb25zdHJhaW50c1wiO2FbYS5vbnVwZGF0ZT0yXT1cIm9udXBkYXRlXCJ9KShLPWEubWV0aG9kX2lkX1N0cmVhbVJlc29sdXRpb25fdHx8KGEubWV0aG9kX2lkX1N0cmVhbVJlc29sdXRpb25fdD17fSkpO2EuY2xhc3NfbGliX2luZm89bmV3IGIuV2VicnBjQ2xhc3NMaWJJbmZvKFwid2VicnBjX2NsYXNzX2xpYnJhcnlcIixbbmV3IGIuV2VicnBjQ2xhc3NJbmZvKGMuRW5naW5lQ29udHJvbCxcIkVuZ2luZUNvbnRyb2xcIixbbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLkVuZ2luZUNvbnRyb2wsbC5jdG9yLFwiY3RvclwiLCExKSxuZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuRW5naW5lQ29udHJvbCxsLnZlcnNpb24sXCJ2ZXJzaW9uXCIsITApLG5ldyBiLldlYnJwY01ldGhvZEluZm8oYy5FbmdpbmVDb250cm9sLFxyXG5sLmZlYXR1cmVfZmxhZ3MsXCJmZWF0dXJlX2ZsYWdzXCIsITApLG5ldyBiLldlYnJwY01ldGhvZEluZm8oYy5FbmdpbmVDb250cm9sLGwudmVyc2lvbl9pbmZvLFwidmVyc2lvbl9pbmZvXCIsITAsYS5GRUFUVVJFX21zX3RlYW1zX2Rlc2t0b3Bfc2hhcmluZyksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLkVuZ2luZUNvbnRyb2wsbC5vc2luZm8sXCJvc2luZm9cIiwhMCxhLkZFQVRVUkVfbXNfdGVhbXNfb3NpbmZvKSxuZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuRW5naW5lQ29udHJvbCxsLmVuZHBvaW50X2lkLFwiZW5kcG9pbnRfaWRcIiwhMCxhLkZFQVRVUkVfbXNfdGVhbXNfZW5kcG9pbnRfaWQpLG5ldyBiLldlYnJwY01ldGhvZEluZm8oYy5FbmdpbmVDb250cm9sLGwuc2V0X2NsaWVudF9pbmZvLFwic2V0X2NsaWVudF9pbmZvXCIsITEsYS5GRUFUVVJFX21zX3RlYW1zX2NsaWVudF9pbmZvKSxuZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuRW5naW5lQ29udHJvbCxsLmhhcmR3YXJlX2luZm8sXCJoYXJkd2FyZV9pbmZvXCIsXHJcbiEwLGEuRkVBVFVSRV9tc190ZWFtc19oYXJkd2FyZV9pbmZvKV0pLG5ldyBiLldlYnJwY0NsYXNzSW5mbyhjLlJUQ1BlZXJDb25uZWN0aW9uLFwiUlRDUGVlckNvbm5lY3Rpb25cIixbbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLlJUQ1BlZXJDb25uZWN0aW9uLGguY3RvcixcImN0b3JcIiwhMSksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLlJUQ1BlZXJDb25uZWN0aW9uLGgubG9jYWxEZXNjcmlwdGlvbixcImxvY2FsRGVzY3JpcHRpb25cIiwhMCksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLlJUQ1BlZXJDb25uZWN0aW9uLGgucmVtb3RlRGVzY3JpcHRpb24sXCJyZW1vdGVEZXNjcmlwdGlvblwiLCEwKSxuZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuUlRDUGVlckNvbm5lY3Rpb24saC5yZWFkeVN0YXRlLFwicmVhZHlTdGF0ZVwiLCEwKSxuZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuUlRDUGVlckNvbm5lY3Rpb24saC5pY2VTdGF0ZSxcImljZVN0YXRlXCIsITApLG5ldyBiLldlYnJwY01ldGhvZEluZm8oYy5SVENQZWVyQ29ubmVjdGlvbixcclxuaC5sb2NhbFN0cmVhbXMsXCJsb2NhbFN0cmVhbXNcIiwhMCksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLlJUQ1BlZXJDb25uZWN0aW9uLGgucmVtb3RlU3RyZWFtcyxcInJlbW90ZVN0cmVhbXNcIiwhMCksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLlJUQ1BlZXJDb25uZWN0aW9uLGguY3JlYXRlT2ZmZXIsXCJjcmVhdGVPZmZlclwiLCExKSxuZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuUlRDUGVlckNvbm5lY3Rpb24saC5jcmVhdGVBbnN3ZXIsXCJjcmVhdGVBbnN3ZXJcIiwhMSksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLlJUQ1BlZXJDb25uZWN0aW9uLGguc2V0TG9jYWxEZXNjcmlwdGlvbixcInNldExvY2FsRGVzY3JpcHRpb25cIiwhMSksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLlJUQ1BlZXJDb25uZWN0aW9uLGguc2V0UmVtb3RlRGVzY3JpcHRpb24sXCJzZXRSZW1vdGVEZXNjcmlwdGlvblwiLCExKSxuZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuUlRDUGVlckNvbm5lY3Rpb24saC51cGRhdGVJY2UsXHJcblwidXBkYXRlSWNlXCIsITApLG5ldyBiLldlYnJwY01ldGhvZEluZm8oYy5SVENQZWVyQ29ubmVjdGlvbixoLmFkZEljZUNhbmRpZGF0ZSxcImFkZEljZUNhbmRpZGF0ZVwiLCEwKSxuZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuUlRDUGVlckNvbm5lY3Rpb24saC5hZGRTdHJlYW0sXCJhZGRTdHJlYW1cIiwhMCksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLlJUQ1BlZXJDb25uZWN0aW9uLGgucmVtb3ZlU3RyZWFtLFwicmVtb3ZlU3RyZWFtXCIsITApLG5ldyBiLldlYnJwY01ldGhvZEluZm8oYy5SVENQZWVyQ29ubmVjdGlvbixoLmNsb3NlLFwiY2xvc2VcIiwhMCksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLlJUQ1BlZXJDb25uZWN0aW9uLGguaWNlQ29ubmVjdGlvblN0YXRlLFwiaWNlQ29ubmVjdGlvblN0YXRlXCIsITApLG5ldyBiLldlYnJwY01ldGhvZEluZm8oYy5SVENQZWVyQ29ubmVjdGlvbixoLmljZUdhdGhlcmluZ1N0YXRlLFwiaWNlR2F0aGVyaW5nU3RhdGVcIiwhMCksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLlJUQ1BlZXJDb25uZWN0aW9uLFxyXG5oLnNpZ25hbGluZ1N0YXRlLFwic2lnbmFsaW5nU3RhdGVcIiwhMCksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLlJUQ1BlZXJDb25uZWN0aW9uLGgub25hZGRzdHJlYW0sXCJvbmFkZHN0cmVhbVwiLCEwKSxuZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuUlRDUGVlckNvbm5lY3Rpb24saC5vbmljZWNhbmRpZGF0ZSxcIm9uaWNlY2FuZGlkYXRlXCIsITApLG5ldyBiLldlYnJwY01ldGhvZEluZm8oYy5SVENQZWVyQ29ubmVjdGlvbixoLm9uaWNlY29ubmVjdGlvbnN0YXRlY2hhbmdlLFwib25pY2Vjb25uZWN0aW9uc3RhdGVjaGFuZ2VcIiwhMCksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLlJUQ1BlZXJDb25uZWN0aW9uLGgub25pY2VnYXRoZXJpbmdzdGF0ZWNoYW5nZSxcIm9uaWNlZ2F0aGVyaW5nc3RhdGVjaGFuZ2VcIiwhMCksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLlJUQ1BlZXJDb25uZWN0aW9uLGgub25zaWduYWxpbmdzdGF0ZWNoYW5nZSxcIm9uc2lnbmFsaW5nc3RhdGVjaGFuZ2VcIiwhMCksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLlJUQ1BlZXJDb25uZWN0aW9uLFxyXG5oLm9ubmVnb3RpYXRpb25uZWVkZWQsXCJvbm5lZ290aWF0aW9ubmVlZGVkXCIsITApLG5ldyBiLldlYnJwY01ldGhvZEluZm8oYy5SVENQZWVyQ29ubmVjdGlvbixoLm9ucmVtb3Zlc3RyZWFtLFwib25yZW1vdmVzdHJlYW1cIiwhMCksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLlJUQ1BlZXJDb25uZWN0aW9uLGguZ2V0U3RhdHMsXCJnZXRTdGF0c1wiLCExKSxuZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuUlRDUGVlckNvbm5lY3Rpb24saC5nZXRSZWNlaXZlcnMsXCJnZXRSZWNlaXZlcnNcIiwhMSxhLkZFQVRVUkVfbXNfdGVhbXNfc3BlYWtpbmdfaW5kaWNhdG9yKSxuZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuUlRDUGVlckNvbm5lY3Rpb24saC5nZXRTZW5kZXJzLFwiZ2V0U2VuZGVyc1wiLCExLGEuRkVBVFVSRV9tc190ZWFtc19wc3RuKSxuZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuUlRDUGVlckNvbm5lY3Rpb24saC5hZGRUcmFjayxcImFkZFRyYWNrXCIsITEsYS5GRUFUVVJFX21zX3RlYW1zX3BzdG4pLFxyXG5uZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuUlRDUGVlckNvbm5lY3Rpb24saC5yZW1vdmVUcmFjayxcInJlbW92ZVRyYWNrXCIsITEsYS5GRUFUVVJFX21zX3RlYW1zX3BzdG4pLG5ldyBiLldlYnJwY01ldGhvZEluZm8oYy5SVENQZWVyQ29ubmVjdGlvbixoLm9udHJhY2ssXCJvbnRyYWNrXCIsITAsYS5GRUFUVVJFX21zX3RlYW1zX3BzdG4pLG5ldyBiLldlYnJwY01ldGhvZEluZm8oYy5SVENQZWVyQ29ubmVjdGlvbixoLnNldExvY2FsRGVzY3JpcHRpb25fdjIsXCJzZXRMb2NhbERlc2NyaXB0aW9uX3YyXCIsITEsYS5GRUFUVVJFX21zX3RlYW1zX3dlYnJ0Y18xZG90MCksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLlJUQ1BlZXJDb25uZWN0aW9uLGguc2V0UmVtb3RlRGVzY3JpcHRpb25fdjIsXCJzZXRSZW1vdGVEZXNjcmlwdGlvbl92MlwiLCExLGEuRkVBVFVSRV9tc190ZWFtc193ZWJydGNfMWRvdDApLG5ldyBiLldlYnJwY01ldGhvZEluZm8oYy5SVENQZWVyQ29ubmVjdGlvbixoLmFkZFRyYW5zY2VpdmVyV2l0aFRyYWNrLFxyXG5cImFkZFRyYW5zY2VpdmVyV2l0aFRyYWNrXCIsITEsYS5GRUFUVVJFX21zX3RlYW1zX3dlYnJ0Y18xZG90MCksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLlJUQ1BlZXJDb25uZWN0aW9uLGguYWRkVHJhbnNjZWl2ZXJXaXRoS2luZCxcImFkZFRyYW5zY2VpdmVyV2l0aEtpbmRcIiwhMSxhLkZFQVRVUkVfbXNfdGVhbXNfd2VicnRjXzFkb3QwKSxuZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuUlRDUGVlckNvbm5lY3Rpb24saC5nZXRUcmFuc2NlaXZlcnMsXCJnZXRUcmFuc2NlaXZlcnNcIiwhMSxhLkZFQVRVUkVfbXNfdGVhbXNfd2VicnRjXzFkb3QwKSxuZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuUlRDUGVlckNvbm5lY3Rpb24saC5vbmNvbm5lY3Rpb25zdGF0ZWNoYW5nZSxcIm9uY29ubmVjdGlvbnN0YXRlY2hhbmdlXCIsITAsYS5GRUFUVVJFX21zX3RlYW1zX3dlYnJ0Y18xZG90MCksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLlJUQ1BlZXJDb25uZWN0aW9uLGguc2N0cCxcInNjdHBcIiwhMCxhLkZFQVRVUkVfbXNfdGVhbXNfZGF0YV9jaGFubmVsKSxcclxubmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLlJUQ1BlZXJDb25uZWN0aW9uLGgub25kYXRhY2hhbm5lbCxcIm9uZGF0YWNoYW5uZWxcIiwhMCxhLkZFQVRVUkVfbXNfdGVhbXNfZGF0YV9jaGFubmVsKSxuZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuUlRDUGVlckNvbm5lY3Rpb24saC5jcmVhdGVEYXRhQ2hhbm5lbCxcImNyZWF0ZURhdGFDaGFubmVsXCIsITEsYS5GRUFUVVJFX21zX3RlYW1zX2RhdGFfY2hhbm5lbCksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLlJUQ1BlZXJDb25uZWN0aW9uLGguZ2V0U3RhdHNfdjIsXCJnZXRTdGF0c192MlwiLCExLGEuRkVBVFVSRV9tc190ZWFtc193ZWJydGNfMWRvdDApXSksbmV3IGIuV2VicnBjQ2xhc3NJbmZvKGMuUlRDU2Vzc2lvbkRlc2NyaXB0aW9uLFwiUlRDU2Vzc2lvbkRlc2NyaXB0aW9uXCIsW25ldyBiLldlYnJwY01ldGhvZEluZm8oYy5SVENTZXNzaW9uRGVzY3JpcHRpb24scS5jdG9yLFwiY3RvclwiLCExKSxuZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuUlRDU2Vzc2lvbkRlc2NyaXB0aW9uLFxyXG5xLnR5cGUsXCJ0eXBlXCIsITApLG5ldyBiLldlYnJwY01ldGhvZEluZm8oYy5SVENTZXNzaW9uRGVzY3JpcHRpb24scS5zZHAsXCJzZHBcIiwhMCldKSxuZXcgYi5XZWJycGNDbGFzc0luZm8oYy5SVENJY2VDYW5kaWRhdGUsXCJSVENJY2VDYW5kaWRhdGVcIixbbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLlJUQ0ljZUNhbmRpZGF0ZSx6LmN0b3IsXCJjdG9yXCIsITEpLG5ldyBiLldlYnJwY01ldGhvZEluZm8oYy5SVENJY2VDYW5kaWRhdGUsei5jYW5kaWRhdGUsXCJjYW5kaWRhdGVcIiwhMCksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLlJUQ0ljZUNhbmRpZGF0ZSx6LnNkcE1pZCxcInNkcE1pZFwiLCEwKSxuZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuUlRDSWNlQ2FuZGlkYXRlLHouc2RwTUxpbmVJbmRleCxcInNkcE1MaW5lSW5kZXhcIiwhMCldKSxuZXcgYi5XZWJycGNDbGFzc0luZm8oYy5SVENJY2VDYW5kaWRhdGVFdmVudCxcIlJUQ0ljZUNhbmRpZGF0ZUV2ZW50XCIsW25ldyBiLldlYnJwY01ldGhvZEluZm8oYy5SVENJY2VDYW5kaWRhdGVFdmVudCxcclxuZy5jdG9yLFwiY3RvclwiLCExKSxuZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuUlRDSWNlQ2FuZGlkYXRlRXZlbnQsZy5jYW5kaWRhdGUsXCJjYW5kaWRhdGVcIiwhMCldKSxuZXcgYi5XZWJycGNDbGFzc0luZm8oYy5NZWRpYURldmljZXMsXCJNZWRpYURldmljZXNcIixbbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLk1lZGlhRGV2aWNlcyxkLmN0b3IsXCJjdG9yXCIsITEpLG5ldyBiLldlYnJwY01ldGhvZEluZm8oYy5NZWRpYURldmljZXMsZC5lbnVtZXJhdGVEZXZpY2VzLFwiZW51bWVyYXRlRGV2aWNlc1wiLCExKSxuZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuTWVkaWFEZXZpY2VzLGQuZ2V0RGlzcGxheU1lZGlhLFwiZ2V0RGlzcGxheU1lZGlhXCIsITEsYS5GRUFUVVJFX21zX3RlYW1zX2Rlc2t0b3Bfc2hhcmluZyksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLk1lZGlhRGV2aWNlcyxkLm9uZGV2aWNlY2hhbmdlLFwib25kZXZpY2VjaGFuZ2VcIiwhMCxhLkZFQVRVUkVfbXNfdGVhbXNfc3BlYWtpbmdfaW5kaWNhdG9yKSxcclxubmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLk1lZGlhRGV2aWNlcyxkLmVudW1lcmF0ZURldmljZXNWMixcImVudWVyYXRlRGV2aWNlc1YyXCIsITEsYS5GRUFUVVJFX21zX3RlYW1zX2VudW1lcmF0ZV9kZXZpY2VzX3YyKV0pLG5ldyBiLldlYnJwY0NsYXNzSW5mbyhjLk1lZGlhRGV2aWNlSW5mbyxcIk1lZGlhRGV2aWNlSW5mb1wiLFtuZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuTWVkaWFEZXZpY2VJbmZvLHAuY3RvcixcImN0b3JcIiwhMSksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLk1lZGlhRGV2aWNlSW5mbyxwLmRldmljZUlkLFwiZGV2aWNlSWRcIiwhMCksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLk1lZGlhRGV2aWNlSW5mbyxwLmtpbmQsXCJraW5kXCIsITApLG5ldyBiLldlYnJwY01ldGhvZEluZm8oYy5NZWRpYURldmljZUluZm8scC5sYWJlbCxcImxhYmVsXCIsITApLG5ldyBiLldlYnJwY01ldGhvZEluZm8oYy5NZWRpYURldmljZUluZm8scC5ncm91cElkLFwiZ3JvdXBJZFwiLCEwKV0pLG5ldyBiLldlYnJwY0NsYXNzSW5mbyhjLk1lZGlhU3RyZWFtVHJhY2ssXHJcblwiTWVkaWFTdHJlYW1UcmFja1wiLFtuZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuTWVkaWFTdHJlYW1UcmFjayxuLmN0b3IsXCJjdG9yXCIsITEpLG5ldyBiLldlYnJwY01ldGhvZEluZm8oYy5NZWRpYVN0cmVhbVRyYWNrLG4uY2xvbmUsXCJjbG9uZVwiLCExKSxuZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuTWVkaWFTdHJlYW1UcmFjayxuLnN0b3AsXCJzdG9wXCIsITEpLG5ldyBiLldlYnJwY01ldGhvZEluZm8oYy5NZWRpYVN0cmVhbVRyYWNrLG4uZ2V0Q2FwYWJpbGl0aWVzLFwiZ2V0Q2FwYWJpbGl0aWVzXCIsITEpLG5ldyBiLldlYnJwY01ldGhvZEluZm8oYy5NZWRpYVN0cmVhbVRyYWNrLG4uZ2V0U2V0dGluZ3MsXCJnZXRTZXR0aW5nc1wiLCExKSxuZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuTWVkaWFTdHJlYW1UcmFjayxuLmFwcGx5Q29uc3RyYWludHMsXCJhcHBseUNvbnN0cmFpbnRzXCIsITEsYS5GRUFUVVJFX21zX3RlYW1zX2Rlc2t0b3Bfc2hhcmluZyksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLk1lZGlhU3RyZWFtVHJhY2ssXHJcbm4ua2luZCxcImtpbmRcIiwhMCksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLk1lZGlhU3RyZWFtVHJhY2ssbi5pZCxcImlkXCIsITApLG5ldyBiLldlYnJwY01ldGhvZEluZm8oYy5NZWRpYVN0cmVhbVRyYWNrLG4ubGFiZWwsXCJsYWJlbFwiLCEwKSxuZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuTWVkaWFTdHJlYW1UcmFjayxuLmVuYWJsZWQsXCJlbmFibGVkXCIsITApLG5ldyBiLldlYnJwY01ldGhvZEluZm8oYy5NZWRpYVN0cmVhbVRyYWNrLG4ubXV0ZWQsXCJtdXRlZFwiLCEwKSxuZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuTWVkaWFTdHJlYW1UcmFjayxuLnJlYWR5U3RhdGUsXCJyZWFkeVN0YXRlXCIsITApLG5ldyBiLldlYnJwY01ldGhvZEluZm8oYy5NZWRpYVN0cmVhbVRyYWNrLG4ub25lbmRlZCxcIm9uZW5kZWRcIiwhMCksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLk1lZGlhU3RyZWFtVHJhY2ssbi5vbm11dGUsXCJvbm11dGVcIiwhMCksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLk1lZGlhU3RyZWFtVHJhY2ssXHJcbm4ub251bm11dGUsXCJvbnVubXV0ZVwiLCEwKSxuZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuTWVkaWFTdHJlYW1UcmFjayxuLmdldENvbnN0cmFpbnRzLFwiZ2V0Q29uc3RyYWludHNcIiwhMSxhLkZFQVRVUkVfbXNfdGVhbXNfbXN0cmFja19jb25zdHJhaW50cyldKSxuZXcgYi5XZWJycGNDbGFzc0luZm8oYy5NZWRpYVN0cmVhbSxcIk1lZGlhU3RyZWFtXCIsW25ldyBiLldlYnJwY01ldGhvZEluZm8oYy5NZWRpYVN0cmVhbSxrLmN0b3IsXCJjdG9yXCIsITEpLG5ldyBiLldlYnJwY01ldGhvZEluZm8oYy5NZWRpYVN0cmVhbSxrLmlkLFwiaWRcIiwhMCksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLk1lZGlhU3RyZWFtLGsuZ2V0QXVkaW9UcmFja3MsXCJnZXRBdWRpb1RyYWNrc1wiLCExKSxuZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuTWVkaWFTdHJlYW0say5nZXRWaWRlb1RyYWNrcyxcImdldFZpZGVvVHJhY2tzXCIsITEpLG5ldyBiLldlYnJwY01ldGhvZEluZm8oYy5NZWRpYVN0cmVhbSxrLmdldFRyYWNrcyxcclxuXCJnZXRUcmFja3NcIiwhMSksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLk1lZGlhU3RyZWFtLGsuZ2V0VHJhY2tCeUlkLFwiZ2V0VHJhY2tCeUlkXCIsITEpLG5ldyBiLldlYnJwY01ldGhvZEluZm8oYy5NZWRpYVN0cmVhbSxrLmFkZFRyYWNrLFwiYWRkVHJhY2tcIiwhMSksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLk1lZGlhU3RyZWFtLGsucmVtb3ZlVHJhY2ssXCJyZW1vdmVUcmFja1wiLCExKSxuZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuTWVkaWFTdHJlYW0say5jbG9uZSxcImNsb25lXCIsITApLG5ldyBiLldlYnJwY01ldGhvZEluZm8oYy5NZWRpYVN0cmVhbSxrLmFjdGl2ZSxcImFjdGl2ZVwiLCEwKV0pLG5ldyBiLldlYnJwY0NsYXNzSW5mbyhjLk5hdmlnYXRvclVzZXJNZWRpYSxcIk5hdmlnYXRvclVzZXJNZWRpYVwiLFtuZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuTmF2aWdhdG9yVXNlck1lZGlhLHYuY3RvcixcImN0b3JcIiwhMSksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLk5hdmlnYXRvclVzZXJNZWRpYSxcclxudi5nZXRVc2VyTWVkaWEsXCJnZXRVc2VyTWVkaWFcIiwhMSksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLk5hdmlnYXRvclVzZXJNZWRpYSx2LnNldENvZGVjQ2FwYWJpbGl0aWVzLFwic2V0Q29kZWNDYXBhYmlsaXRpZXNcIiwhMSxhLkZFQVRVUkVfbXNfdGVhbXNfY29kZWNfY2FwYWJpbGl0eSksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLk5hdmlnYXRvclVzZXJNZWRpYSx2LmdldENhcGFiaWxpdGllcyxcImdldFJ0cENhcGFiaWxpdGllc1wiLCExLGEuRkVBVFVSRV9tc190ZWFtc193ZWJydGNfMWRvdDApXSksbmV3IGIuV2VicnBjQ2xhc3NJbmZvKGMuTWVkaWFTdHJlYW1FdmVudCxcIk1lZGlhU3RyZWFtRXZlbnRcIixbbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLk1lZGlhU3RyZWFtRXZlbnQsQi5jdG9yLFwiY3RvclwiLCExKSxuZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuTWVkaWFTdHJlYW1FdmVudCxCLnN0cmVhbSxcInN0cmVhbVwiLCEwKV0pLG5ldyBiLldlYnJwY0NsYXNzSW5mbyhjLlZpZGVvRWxlbWVudCxcclxuXCJWaWRlb0VsZW1lbnRcIixbbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLlZpZGVvRWxlbWVudCx0LmN0b3IsXCJjdG9yXCIsITEpLG5ldyBiLldlYnJwY01ldGhvZEluZm8oYy5WaWRlb0VsZW1lbnQsdC5zaW5rSWQsXCJzaW5rSWRcIiwhMCksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLlZpZGVvRWxlbWVudCx0LmNvbm5lY3RUbyxcImNvbm5lY3RUb1wiLCExKSxuZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuVmlkZW9FbGVtZW50LHQuZGlzY29ubmVjdCxcImRpc2Nvbm5lY3RcIiwhMSksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLlZpZGVvRWxlbWVudCx0LnNldEZyYW1lLFwic2V0RnJhbWVcIiwhMSksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLlZpZGVvRWxlbWVudCx0LmFkZENsaXBSZWN0LFwiYWRkQ2xpcFJlY3RcIiwhMSksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLlZpZGVvRWxlbWVudCx0LnJlbW92ZUNsaXBSZWN0LFwicmVtb3ZlQ2xpcFJlY3RcIiwhMSksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLlZpZGVvRWxlbWVudCxcclxudC5vbmVycm9yLFwib25lcnJvclwiLCEwKSxuZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuVmlkZW9FbGVtZW50LHQub252aWRlb2ZyYW1lY2hhbmdlZCxcIm9udmlkZW9mcmFtZWNoYW5nZWRcIiwhMCksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLlZpZGVvRWxlbWVudCx0LnBsYWNlbWVudCxcInBsYWNlbWVudFwiLCEwLGEuRkVBVFVSRV9tc190ZWFtc192aWRlb19wbGFjZW1lbnQpXSksbmV3IGIuV2VicnBjQ2xhc3NJbmZvKGMuQXVkaW9FbGVtZW50LFwiQXVkaW9FbGVtZW50XCIsW25ldyBiLldlYnJwY01ldGhvZEluZm8oYy5BdWRpb0VsZW1lbnQsbS5jdG9yLFwiY3RvclwiLCExKSxuZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuQXVkaW9FbGVtZW50LG0uc2lua0lkLFwic2lua0lkXCIsITApLG5ldyBiLldlYnJwY01ldGhvZEluZm8oYy5BdWRpb0VsZW1lbnQsbS5zcmNPYmplY3QsXCJzcmNPYmplY3RcIiwhMCksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLkF1ZGlvRWxlbWVudCxtLnNyYyxcInNyY1wiLCEwKSxcclxubmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLkF1ZGlvRWxlbWVudCxtLnBsYXksXCJwbGF5XCIsITEpLG5ldyBiLldlYnJwY01ldGhvZEluZm8oYy5BdWRpb0VsZW1lbnQsbS5wYXVzZSxcInBhdXNlXCIsITEpLG5ldyBiLldlYnJwY01ldGhvZEluZm8oYy5BdWRpb0VsZW1lbnQsbS5sb29wLFwibG9vcFwiLCEwLGEuRkVBVFVSRV9tc190ZWFtc19hdWRpb19ub3RpZmljYXRpb25zX2xvb3ApXSksbmV3IGIuV2VicnBjQ2xhc3NJbmZvKGMuUlRDUnRwUmVjZWl2ZXIsXCJSVENSdHBSZWNlaXZlclwiLFtuZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuUlRDUnRwUmVjZWl2ZXIsRC5jdG9yLFwiY3RvclwiLCExLGEuRkVBVFVSRV9tc190ZWFtc19zcGVha2luZ19pbmRpY2F0b3IpLG5ldyBiLldlYnJwY01ldGhvZEluZm8oYy5SVENSdHBSZWNlaXZlcixELnRyYWNrLFwidHJhY2tcIiwhMCxhLkZFQVRVUkVfbXNfdGVhbXNfc3BlYWtpbmdfaW5kaWNhdG9yKSxuZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuUlRDUnRwUmVjZWl2ZXIsXHJcbkQuZ2V0Q29udHJpYnV0aW5nU291cmNlcyxcImdldENvbnRyaWJ1dGluZ1NvdXJjZXNcIiwhMSxhLkZFQVRVUkVfbXNfdGVhbXNfc3BlYWtpbmdfaW5kaWNhdG9yKSxuZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuUlRDUnRwUmVjZWl2ZXIsRC5nZXRTeW5jaHJvbml6YXRpb25Tb3VyY2VzLFwiZ2V0U3luY2hyb25pemF0aW9uU291cmNlc1wiLCExLGEuRkVBVFVSRV9tc190ZWFtc19wc3RuKSxuZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuUlRDUnRwUmVjZWl2ZXIsRC50cmFuc3BvcnQsXCJ0cmFuc3BvcnRcIiwhMCxhLkZFQVRVUkVfbXNfdGVhbXNfcHN0biksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLlJUQ1J0cFJlY2VpdmVyLEQucnRjcFRyYW5zcG9ydCxcInJ0Y3B0cmFuc3BvcnRcIiwhMCxhLkZFQVRVUkVfbXNfdGVhbXNfcHN0biksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLlJUQ1J0cFJlY2VpdmVyLEQuZ2V0Q2FwYWJpbGl0aWVzLFwiZ2V0Q2FwYWJpbGl0aWVzXCIsITEsYS5GRUFUVVJFX21zX3RlYW1zX3BzdG4pLFxyXG5uZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuUlRDUnRwUmVjZWl2ZXIsRC5nZXRQYXJhbWV0ZXJzLFwiZ2V0UGFyYW1ldGVyc1wiLCExLGEuRkVBVFVSRV9tc190ZWFtc19wc3RuKSxuZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuUlRDUnRwUmVjZWl2ZXIsRC5nZXRTdGF0cyxcImdldFN0YXRzXCIsITEsYS5GRUFUVVJFX21zX3RlYW1zX3BzdG4pLG5ldyBiLldlYnJwY01ldGhvZEluZm8oYy5SVENSdHBSZWNlaXZlcixELmdldENhcGFiaWxpdGllc192MixcImdldENhcGFiaWxpdGllc192MlwiLCExLGEuRkVBVFVSRV9tc190ZWFtc193ZWJydGNfMWRvdDApXSksbmV3IGIuV2VicnBjQ2xhc3NJbmZvKGMuUlRDUnRwU2VuZGVyLFwiUlRDUnRwU2VuZGVyXCIsW25ldyBiLldlYnJwY01ldGhvZEluZm8oYy5SVENSdHBTZW5kZXIseS5jdG9yLFwiY3RvclwiLCExLGEuRkVBVFVSRV9tc190ZWFtc19wc3RuKSxuZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuUlRDUnRwU2VuZGVyLHkudHJhY2ssXCJ0cmFja1wiLCEwLGEuRkVBVFVSRV9tc190ZWFtc19wc3RuKSxcclxubmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLlJUQ1J0cFNlbmRlcix5LnRyYW5zcG9ydCxcInRyYW5zcG9ydFwiLCEwLGEuRkVBVFVSRV9tc190ZWFtc19wc3RuKSxuZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuUlRDUnRwU2VuZGVyLHkucnRjcFRyYW5zcG9ydCxcInJ0Y3BUcmFuc3BvcnRcIiwhMCxhLkZFQVRVUkVfbXNfdGVhbXNfcHN0biksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLlJUQ1J0cFNlbmRlcix5LmR0bWYsXCJkdG1mXCIsITAsYS5GRUFUVVJFX21zX3RlYW1zX3BzdG4pLG5ldyBiLldlYnJwY01ldGhvZEluZm8oYy5SVENSdHBTZW5kZXIseS5nZXRDYXBhYmlsaXRpZXMsXCJnZXRDYXBhYmlsaXRpZXNcIiwhMSxhLkZFQVRVUkVfbXNfdGVhbXNfcHN0biksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLlJUQ1J0cFNlbmRlcix5LmdldFBhcmFtZXRlcnMsXCJnZXRQYXJhbWV0ZXJzXCIsITEsYS5GRUFUVVJFX21zX3RlYW1zX3BzdG4pLG5ldyBiLldlYnJwY01ldGhvZEluZm8oYy5SVENSdHBTZW5kZXIsXHJcbnkuc2V0UGFyYW1ldGVycyxcInNldFBhcmFtZXRlcnNcIiwhMSxhLkZFQVRVUkVfbXNfdGVhbXNfcHN0biksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLlJUQ1J0cFNlbmRlcix5LnJlcGxhY2VUcmFjayxcInJlcGxhY2VUcmFja1wiLCExLGEuRkVBVFVSRV9tc190ZWFtc19wc3RuKSxuZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuUlRDUnRwU2VuZGVyLHkuZ2V0U3RhdHMsXCJnZXRTdGF0c1wiLCExLGEuRkVBVFVSRV9tc190ZWFtc19wc3RuKSxuZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuUlRDUnRwU2VuZGVyLHkuc2V0U3RyZWFtcyxcInNldFN0cmVhbXNcIiwhMSxhLkZFQVRVUkVfbXNfdGVhbXNfcHN0biksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLlJUQ1J0cFNlbmRlcix5LmdldENhcGFiaWxpdGllc192MixcImdldENhcGFiaWxpdGllc192MlwiLCExLGEuRkVBVFVSRV9tc190ZWFtc193ZWJydGNfMWRvdDApXSksbmV3IGIuV2VicnBjQ2xhc3NJbmZvKGMuUlRDRHRsc1RyYW5zcG9ydCxcIlJUQ0R0bHNUcmFuc3BvcnRcIixcclxuW25ldyBiLldlYnJwY01ldGhvZEluZm8oYy5SVENEdGxzVHJhbnNwb3J0LHguY3RvcixcImN0b3JcIiwhMSxhLkZFQVRVUkVfbXNfdGVhbXNfcHN0biksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLlJUQ0R0bHNUcmFuc3BvcnQseC50cmFuc3BvcnQsXCJ0cmFuc3BvcnRcIiwhMCxhLkZFQVRVUkVfbXNfdGVhbXNfcHN0biksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLlJUQ0R0bHNUcmFuc3BvcnQseC5zdGF0ZSxcInN0YXRlXCIsITAsYS5GRUFUVVJFX21zX3RlYW1zX3BzdG4pLG5ldyBiLldlYnJwY01ldGhvZEluZm8oYy5SVENEdGxzVHJhbnNwb3J0LHguZ2V0UmVtb3RlQ2VydGlmaWNhdGVzLFwiZ2V0UmVtb3RlQ2VydGlmaWNhdGVzXCIsITEsYS5GRUFUVVJFX21zX3RlYW1zX3BzdG4pLG5ldyBiLldlYnJwY01ldGhvZEluZm8oYy5SVENEdGxzVHJhbnNwb3J0LHgub25zdGF0ZWNoYW5nZSxcIm9uc3RhdGVjaGFuZ2VcIiwhMCxhLkZFQVRVUkVfbXNfdGVhbXNfcHN0biksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLlJUQ0R0bHNUcmFuc3BvcnQsXHJcbngub25lcnJvcixcIm9uZXJyb3JcIiwhMCxhLkZFQVRVUkVfbXNfdGVhbXNfcHN0bildKSxuZXcgYi5XZWJycGNDbGFzc0luZm8oYy5SVENJY2VUcmFuc3BvcnQsXCJSVENJY2VUcmFuc3BvcnRcIixbbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLlJUQ0ljZVRyYW5zcG9ydCxyLmN0b3IsXCJjdG9yXCIsITEsYS5GRUFUVVJFX21zX3RlYW1zX3BzdG4pLG5ldyBiLldlYnJwY01ldGhvZEluZm8oYy5SVENJY2VUcmFuc3BvcnQsci5yb2xlLFwicm9sZVwiLCEwLGEuRkVBVFVSRV9tc190ZWFtc19wc3RuKSxuZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuUlRDSWNlVHJhbnNwb3J0LHIuY29tcG9uZW50LFwiY29tcG9uZW50XCIsITAsYS5GRUFUVVJFX21zX3RlYW1zX3BzdG4pLG5ldyBiLldlYnJwY01ldGhvZEluZm8oYy5SVENJY2VUcmFuc3BvcnQsci5zdGF0ZSxcInN0YXRlXCIsITAsYS5GRUFUVVJFX21zX3RlYW1zX3BzdG4pLG5ldyBiLldlYnJwY01ldGhvZEluZm8oYy5SVENJY2VUcmFuc3BvcnQsci5nYXRoZXJpbmdTdGF0ZSxcclxuXCJnYXRoZXJpbmdTdGF0ZVwiLCEwLGEuRkVBVFVSRV9tc190ZWFtc19wc3RuKSxuZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuUlRDSWNlVHJhbnNwb3J0LHIubG9jYWxjYW5kaWRhdGVzLFwibG9jYWxjYW5kaWRhdGVzXCIsITAsYS5GRUFUVVJFX21zX3RlYW1zX3BzdG4pLG5ldyBiLldlYnJwY01ldGhvZEluZm8oYy5SVENJY2VUcmFuc3BvcnQsci5yZW1vdGVjYW5kaWRhdGVzLFwicmVtb3RlY2FuZGlkYXRlc1wiLCEwLGEuRkVBVFVSRV9tc190ZWFtc19wc3RuKSxuZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuUlRDSWNlVHJhbnNwb3J0LHIub25zdGF0ZWNoYW5nZSxcIm9uc3RhdGVjaGFuZ2VcIiwhMCxhLkZFQVRVUkVfbXNfdGVhbXNfcHN0biksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLlJUQ0ljZVRyYW5zcG9ydCxyLm9uZ2F0aGVyaW5nc3RhdGVjaGFuZ2UsXCJvbmdhdGhlcmluZ3N0YXRlY2hhbmdlXCIsITAsYS5GRUFUVVJFX21zX3RlYW1zX3BzdG4pLG5ldyBiLldlYnJwY01ldGhvZEluZm8oYy5SVENJY2VUcmFuc3BvcnQsXHJcbnIub25zZWxlY3RlZGNhbmRpZGF0ZXBhaXJjaGFuZ2UsXCJvbnNlbGVjdGVkY2FuZGlkYXRlcGFpcmNoYW5nZVwiLCEwLGEuRkVBVFVSRV9tc190ZWFtc19wc3RuKV0pLG5ldyBiLldlYnJwY0NsYXNzSW5mbyhjLlJUQ0RUTUZTZW5kZXIsXCJSVENEVE1GU2VuZGVyXCIsW25ldyBiLldlYnJwY01ldGhvZEluZm8oYy5SVENEVE1GU2VuZGVyLEEuY3RvcixcImN0b3JcIiwhMSxhLkZFQVRVUkVfbXNfdGVhbXNfcHN0biksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLlJUQ0RUTUZTZW5kZXIsQS5pbnNlcnREVE1GLFwiaW5zZXJ0RFRNRlwiLCExLGEuRkVBVFVSRV9tc190ZWFtc19wc3RuKSxuZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuUlRDRFRNRlNlbmRlcixBLm9udG9uZWNoYW5nZSxcIm9udG9uZWNoYW5nZVwiLCEwLGEuRkVBVFVSRV9tc190ZWFtc19wc3RuKSxuZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuUlRDRFRNRlNlbmRlcixBLmNhbkluc2VydERUTUYsXCJjYW5JbnNlcnREVE1GXCIsITAsYS5GRUFUVVJFX21zX3RlYW1zX3BzdG4pLFxyXG5uZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuUlRDRFRNRlNlbmRlcixBLnRvbmVCdWZmZXIsXCJ0b25lQnVmZmVyXCIsITAsYS5GRUFUVVJFX21zX3RlYW1zX3BzdG4pXSksbmV3IGIuV2VicnBjQ2xhc3NJbmZvKGMuUlRDRFRNRlRvbmVDaGFuZ2VFdmVudCxcIlJUQ0RUTUZUb25lQ2hhbmdlRXZlbnRcIixbbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLlJUQ0RUTUZUb25lQ2hhbmdlRXZlbnQsTS5jdG9yLFwiY3RvclwiLCExLGEuRkVBVFVSRV9tc190ZWFtc19wc3RuKSxuZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuUlRDRFRNRlRvbmVDaGFuZ2VFdmVudCxNLnRvbmUsXCJ0b25lXCIsITAsYS5GRUFUVVJFX21zX3RlYW1zX3BzdG4pLG5ldyBiLldlYnJwY01ldGhvZEluZm8oYy5SVENEVE1GVG9uZUNoYW5nZUV2ZW50LE0udG9uZV9idWZmZXIsXCJ0b25lX2J1ZmZlclwiLCEwLGEuRkVBVFVSRV9tc190ZWFtc19wc3RuKV0pLG5ldyBiLldlYnJwY0NsYXNzSW5mbyhjLlJUQ0ljZUNhbmRpZGF0ZVBhaXIsXCJSVENJY2VDYW5kaWRhdGVQYWlyXCIsXHJcbltuZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuUlRDSWNlQ2FuZGlkYXRlUGFpcixGLmN0b3IsXCJjdG9yXCIsITEsYS5GRUFUVVJFX21zX3RlYW1zX3BzdG4pLG5ldyBiLldlYnJwY01ldGhvZEluZm8oYy5SVENJY2VDYW5kaWRhdGVQYWlyLEYubG9jYWwsXCJsb2NhbFwiLCEwLGEuRkVBVFVSRV9tc190ZWFtc19wc3RuKSxuZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuUlRDSWNlQ2FuZGlkYXRlUGFpcixGLnJlbW90ZSxcInJlbW90ZVwiLCEwLGEuRkVBVFVSRV9tc190ZWFtc19wc3RuKV0pLG5ldyBiLldlYnJwY0NsYXNzSW5mbyhjLlJUQ1J0cFRyYW5zY2VpdmVyLFwiUlRDUnRwVHJhbnNjZWl2ZXJcIixbbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLlJUQ1J0cFRyYW5zY2VpdmVyLEouY3RvcixcImN0b3JcIiwhMSxhLkZFQVRVUkVfbXNfdGVhbXNfd2VicnRjXzFkb3QwKSxuZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuUlRDUnRwVHJhbnNjZWl2ZXIsSi5taWQsXCJtaWRcIiwhMCxhLkZFQVRVUkVfbXNfdGVhbXNfd2VicnRjXzFkb3QwKSxcclxubmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLlJUQ1J0cFRyYW5zY2VpdmVyLEouc2VuZGVyLFwic2VuZGVyXCIsITAsYS5GRUFUVVJFX21zX3RlYW1zX3dlYnJ0Y18xZG90MCksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLlJUQ1J0cFRyYW5zY2VpdmVyLEoucmVjZWl2ZXIsXCJyZWNlaXZlclwiLCEwLGEuRkVBVFVSRV9tc190ZWFtc193ZWJydGNfMWRvdDApLG5ldyBiLldlYnJwY01ldGhvZEluZm8oYy5SVENSdHBUcmFuc2NlaXZlcixKLmRpcmVjdGlvbixcImRpcmVjdGlvblwiLCEwLGEuRkVBVFVSRV9tc190ZWFtc193ZWJydGNfMWRvdDApLG5ldyBiLldlYnJwY01ldGhvZEluZm8oYy5SVENSdHBUcmFuc2NlaXZlcixKLmN1cnJlbnREaXJlY3Rpb24sXCJjdXJyZW50RGlyZWN0aW9uXCIsITAsYS5GRUFUVVJFX21zX3RlYW1zX3dlYnJ0Y18xZG90MCksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLlJUQ1J0cFRyYW5zY2VpdmVyLEouc3RvcCxcInN0b3BcIiwhMSxhLkZFQVRVUkVfbXNfdGVhbXNfd2VicnRjXzFkb3QwKSxcclxubmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLlJUQ1J0cFRyYW5zY2VpdmVyLEouc2V0Q29kZWNQcmVmZXJlbmNlcyxcInNldENvZGVjUHJlZmVyZW5jZXNcIiwhMSxhLkZFQVRVUkVfbXNfdGVhbXNfd2VicnRjXzFkb3QwKV0pLG5ldyBiLldlYnJwY0NsYXNzSW5mbyhjLlNjcmVlblNoYXJpbmdSZW1vdGUsXCJTY3JlZW5TaGFyaW5nUmVtb3RlXCIsW25ldyBiLldlYnJwY01ldGhvZEluZm8oYy5TY3JlZW5TaGFyaW5nUmVtb3RlLEcuY3RvcixcImN0b3JcIiwhMSxhLkZFQVRVUkVfbXNfdGVhbXNfbW9uaXRvcl9zaGFyaW5nKSxuZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuU2NyZWVuU2hhcmluZ1JlbW90ZSxHLmdldFNjcmVlbnNBc3luYyxcImdldFNjcmVlbnNBc3luY1wiLCExLGEuRkVBVFVSRV9tc190ZWFtc19tb25pdG9yX3NoYXJpbmcpLG5ldyBiLldlYnJwY01ldGhvZEluZm8oYy5TY3JlZW5TaGFyaW5nUmVtb3RlLEcub25zY3JlZW50b3BvbG9neWNoYW5nZWQsXCJvbnNjcmVlbnRvcG9sb2d5Y2hhbmdlZFwiLFxyXG4hMCxhLkZFQVRVUkVfbXNfdGVhbXNfbW9uaXRvcl9zaGFyaW5nKV0pLG5ldyBiLldlYnJwY0NsYXNzSW5mbyhjLlNjcmVlblNvdXJjZSxcIlNjcmVlblNvdXJjZVwiLFtuZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuU2NyZWVuU291cmNlLEwuY3RvcixcImN0b3JcIiwhMSxhLkZFQVRVUkVfbXNfdGVhbXNfbW9uaXRvcl9zaGFyaW5nKSxuZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuU2NyZWVuU291cmNlLEwuc3JjaWQsXCJzcmNpZFwiLCEwLGEuRkVBVFVSRV9tc190ZWFtc19tb25pdG9yX3NoYXJpbmcpLG5ldyBiLldlYnJwY01ldGhvZEluZm8oYy5TY3JlZW5Tb3VyY2UsTC5kZXZpY2VpZCxcImRldmljZWlkXCIsITAsYS5GRUFUVVJFX21zX3RlYW1zX21vbml0b3Jfc2hhcmluZyksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLlNjcmVlblNvdXJjZSxMLnR5cGUsXCJ0eXBlXCIsITAsYS5GRUFUVVJFX21zX3RlYW1zX21vbml0b3Jfc2hhcmluZyksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLlNjcmVlblNvdXJjZSxcclxuTC5uYW1lLFwibmFtZVwiLCEwLGEuRkVBVFVSRV9tc190ZWFtc19tb25pdG9yX3NoYXJpbmcpLG5ldyBiLldlYnJwY01ldGhvZEluZm8oYy5TY3JlZW5Tb3VyY2UsTC5pbWFnZWRhdGEsXCJpbWFnZWRhdGFcIiwhMCxhLkZFQVRVUkVfbXNfdGVhbXNfbW9uaXRvcl9zaGFyaW5nKSxuZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuU2NyZWVuU291cmNlLEwuaHduZCxcImh3bmRcIiwhMCxhLkZFQVRVUkVfbXNfdGVhbXNfbW9uaXRvcl9zaGFyaW5nKSxuZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuU2NyZWVuU291cmNlLEwub3JpZ2luLFwib3JpZ2luXCIsITAsYS5GRUFUVVJFX21zX3RlYW1zX21vbml0b3Jfc2hhcmluZyksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLlNjcmVlblNvdXJjZSxMLmNhcHRpb24sXCJjYXB0aW9uXCIsITAsYS5GRUFUVVJFX21zX3RlYW1zX21vbml0b3Jfc2hhcmluZyksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLlNjcmVlblNvdXJjZSxMLnBpZCxcInBpZFwiLCEwLGEuRkVBVFVSRV9tc190ZWFtc19tb25pdG9yX3NoYXJpbmcpLFxyXG5uZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuU2NyZWVuU291cmNlLEwuYm91bmRzLFwiYm91bmRzXCIsITAsYS5GRUFUVVJFX21zX3RlYW1zX2d0YyldKSxuZXcgYi5XZWJycGNDbGFzc0luZm8oYy5FOTExU2VydmljZSxcIkU5MTFTZXJ2aWNlXCIsW25ldyBiLldlYnJwY01ldGhvZEluZm8oYy5FOTExU2VydmljZSxQLmN0b3IsXCJjdG9yXCIsITEsYS5GRUFUVVJFX21zX3RlYW1zX2U5MTEpLG5ldyBiLldlYnJwY01ldGhvZEluZm8oYy5FOTExU2VydmljZSxQLmdldEU5MTFJbmZvLFwiZ2V0RTkxMUluZm9cIiwhMSxhLkZFQVRVUkVfbXNfdGVhbXNfZTkxMSksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLkU5MTFTZXJ2aWNlLFAub251cGRhdGUsXCJvbnVwZGF0ZVwiLCEwLGEuRkVBVFVSRV9tc190ZWFtc19lOTExKV0pLG5ldyBiLldlYnJwY0NsYXNzSW5mbyhjLlJUQ0RhdGFDaGFubmVsLFwiUlRDRGF0YUNoYW5uZWxcIixbbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLlJUQ0RhdGFDaGFubmVsLEMuY3RvcixcclxuXCJjdG9yXCIsITEsYS5GRUFUVVJFX21zX3RlYW1zX2RhdGFfY2hhbm5lbCksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLlJUQ0RhdGFDaGFubmVsLEMubGFiZWwsXCJsYWJlbFwiLCEwLGEuRkVBVFVSRV9tc190ZWFtc19kYXRhX2NoYW5uZWwpLG5ldyBiLldlYnJwY01ldGhvZEluZm8oYy5SVENEYXRhQ2hhbm5lbCxDLm9yZGVyZWQsXCJvcmRlcmVkXCIsITAsYS5GRUFUVVJFX21zX3RlYW1zX2RhdGFfY2hhbm5lbCksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLlJUQ0RhdGFDaGFubmVsLEMubWF4UGFja2V0TGlmZVRpbWUsXCJtYXhQYWNrZXRMaWZlVGltZVwiLCEwLGEuRkVBVFVSRV9tc190ZWFtc19kYXRhX2NoYW5uZWwpLG5ldyBiLldlYnJwY01ldGhvZEluZm8oYy5SVENEYXRhQ2hhbm5lbCxDLm1heFJldHJhbnNtaXRzLFwibWF4UmV0cmFuc21pdHNcIiwhMCxhLkZFQVRVUkVfbXNfdGVhbXNfZGF0YV9jaGFubmVsKSxuZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuUlRDRGF0YUNoYW5uZWwsQy5wcm90b2NvbCxcclxuXCJwcm90b2NvbFwiLCEwLGEuRkVBVFVSRV9tc190ZWFtc19kYXRhX2NoYW5uZWwpLG5ldyBiLldlYnJwY01ldGhvZEluZm8oYy5SVENEYXRhQ2hhbm5lbCxDLm5lZ290aWF0ZWQsXCJuZWdvdGlhdGVkXCIsITAsYS5GRUFUVVJFX21zX3RlYW1zX2RhdGFfY2hhbm5lbCksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLlJUQ0RhdGFDaGFubmVsLEMuaWQsXCJpZFwiLCEwLGEuRkVBVFVSRV9tc190ZWFtc19kYXRhX2NoYW5uZWwpLG5ldyBiLldlYnJwY01ldGhvZEluZm8oYy5SVENEYXRhQ2hhbm5lbCxDLnJlYWR5U3RhdGUsXCJyZWFkeVN0YXRlXCIsITAsYS5GRUFUVVJFX21zX3RlYW1zX2RhdGFfY2hhbm5lbCksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLlJUQ0RhdGFDaGFubmVsLEMuYnVmZmVyZWRBbW91bnQsXCJidWZmZXJlZEFtb3VudFwiLCEwLGEuRkVBVFVSRV9tc190ZWFtc19kYXRhX2NoYW5uZWwpLG5ldyBiLldlYnJwY01ldGhvZEluZm8oYy5SVENEYXRhQ2hhbm5lbCxDLmJ1ZmZlcmVkQW1vdW50TG93VGhyZXNob2xkLFxyXG5cImJ1ZmZlcmVkQW1vdW50TG93VGhyZXNob2xkXCIsITAsYS5GRUFUVVJFX21zX3RlYW1zX2RhdGFfY2hhbm5lbCksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLlJUQ0RhdGFDaGFubmVsLEMub25vcGVuLFwib25vcGVuXCIsITAsYS5GRUFUVVJFX21zX3RlYW1zX2RhdGFfY2hhbm5lbCksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLlJUQ0RhdGFDaGFubmVsLEMub25idWZmZXJlZGFtb3VudGxvdyxcIm9uYnVmZmVyZWRhbW91bnRsb3dcIiwhMCxhLkZFQVRVUkVfbXNfdGVhbXNfZGF0YV9jaGFubmVsKSxuZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuUlRDRGF0YUNoYW5uZWwsQy5vbmVycm9yLFwib25lcnJvclwiLCEwLGEuRkVBVFVSRV9tc190ZWFtc19kYXRhX2NoYW5uZWwpLG5ldyBiLldlYnJwY01ldGhvZEluZm8oYy5SVENEYXRhQ2hhbm5lbCxDLm9uY2xvc2luZyxcIm9uY2xvc2luZ1wiLCEwLGEuRkVBVFVSRV9tc190ZWFtc19kYXRhX2NoYW5uZWwpLG5ldyBiLldlYnJwY01ldGhvZEluZm8oYy5SVENEYXRhQ2hhbm5lbCxcclxuQy5vbmNsb3NlLFwib25jbG9zZVwiLCEwLGEuRkVBVFVSRV9tc190ZWFtc19kYXRhX2NoYW5uZWwpLG5ldyBiLldlYnJwY01ldGhvZEluZm8oYy5SVENEYXRhQ2hhbm5lbCxDLm9ubWVzc2FnZSxcIm9ubWVzc2FnZVwiLCEwLGEuRkVBVFVSRV9tc190ZWFtc19kYXRhX2NoYW5uZWwpLG5ldyBiLldlYnJwY01ldGhvZEluZm8oYy5SVENEYXRhQ2hhbm5lbCxDLmNsb3NlLFwiY2xvc2VcIiwhMSxhLkZFQVRVUkVfbXNfdGVhbXNfZGF0YV9jaGFubmVsKSxuZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuUlRDRGF0YUNoYW5uZWwsQy5zZW5kX3RleHQsXCJzZW5kX3RleHRcIiwhMSxhLkZFQVRVUkVfbXNfdGVhbXNfZGF0YV9jaGFubmVsKSxuZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuUlRDRGF0YUNoYW5uZWwsQy5zZW5kX2JpbmFyeSxcInNlbmRfYmluYXJ5XCIsITEsYS5GRUFUVVJFX21zX3RlYW1zX2RhdGFfY2hhbm5lbCldKSxuZXcgYi5XZWJycGNDbGFzc0luZm8oYy5SVENTY3RwVHJhbnNwb3J0LFwiUlRDU2N0cFRyYW5zcG9ydFwiLFxyXG5bbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLlJUQ1NjdHBUcmFuc3BvcnQsUi5jdG9yLFwiY3RvclwiLCExLGEuRkVBVFVSRV9tc190ZWFtc19kYXRhX2NoYW5uZWwpLG5ldyBiLldlYnJwY01ldGhvZEluZm8oYy5SVENTY3RwVHJhbnNwb3J0LFIudHJhbnNwb3J0LFwidHJhbnNwb3J0XCIsITAsYS5GRUFUVVJFX21zX3RlYW1zX2RhdGFfY2hhbm5lbCksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLlJUQ1NjdHBUcmFuc3BvcnQsUi5zdGF0ZSxcInN0YXRlXCIsITAsYS5GRUFUVVJFX21zX3RlYW1zX2RhdGFfY2hhbm5lbCksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLlJUQ1NjdHBUcmFuc3BvcnQsUi5tYXhNZXNzYWdlU2l6ZSxcIm1heE1lc3NhZ2VTaXplXCIsITAsYS5GRUFUVVJFX21zX3RlYW1zX2RhdGFfY2hhbm5lbCksbmV3IGIuV2VicnBjTWV0aG9kSW5mbyhjLlJUQ1NjdHBUcmFuc3BvcnQsUi5tYXhDaGFubmVscyxcIm1heENoYW5uZWxzXCIsITAsYS5GRUFUVVJFX21zX3RlYW1zX2RhdGFfY2hhbm5lbCksXHJcbm5ldyBiLldlYnJwY01ldGhvZEluZm8oYy5SVENTY3RwVHJhbnNwb3J0LFIub25zdGF0ZWNoYW5nZSxcIm9uc3RhdGVjaGFuZ2VcIiwhMCxhLkZFQVRVUkVfbXNfdGVhbXNfZGF0YV9jaGFubmVsKV0pLG5ldyBiLldlYnJwY0NsYXNzSW5mbyhjLlN0cmVhbVJlc29sdXRpb24sXCJTdHJlYW1SZXNvbHV0aW9uXCIsW25ldyBiLldlYnJwY01ldGhvZEluZm8oYy5TdHJlYW1SZXNvbHV0aW9uLEsuY3RvcixcImN0b3JcIiwhMSxhLkZFQVRVUkVfbXNfdGVhbXNfc3RyZWFtX3Jlc29sdXRpb24pLG5ldyBiLldlYnJwY01ldGhvZEluZm8oYy5TdHJlYW1SZXNvbHV0aW9uLEsuZ2V0Q2FsbENvbnN0cmFpbnRzLFwiZ2V0Q2FsbENvbnN0cmFpbnRzXCIsITEsYS5GRUFUVVJFX21zX3RlYW1zX3N0cmVhbV9yZXNvbHV0aW9uKSxuZXcgYi5XZWJycGNNZXRob2RJbmZvKGMuU3RyZWFtUmVzb2x1dGlvbixLLm9udXBkYXRlLFwib251cGRhdGVcIiwhMCxhLkZFQVRVUkVfbXNfdGVhbXNfc3RyZWFtX3Jlc29sdXRpb24pXSldKX0sXHJcbjU0NTpmdW5jdGlvbihiLGEsYyl7dmFyIGU9dGhpcyYmdGhpcy5fX3NwcmVhZEFycmF5c3x8ZnVuY3Rpb24oKXtmb3IodmFyIGE9MCxiPTAsYz1hcmd1bWVudHMubGVuZ3RoO2I8YztiKyspYSs9YXJndW1lbnRzW2JdLmxlbmd0aDtmb3IodmFyIGE9QXJyYXkoYSksZT0wLGI9MDtiPGM7YisrKWZvcih2YXIgaz1hcmd1bWVudHNbYl0saD0wLGw9ay5sZW5ndGg7aDxsO2grKyxlKyspYVtlXT1rW2hdO3JldHVybiBhfTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTthLldzSnNvblV0aWw9YS53c19tc2dfdHlwZV90PXZvaWQgMDt2YXIgbD1jKDU1MCksaDsoZnVuY3Rpb24oYSl7YVthLnJlcT0wXT1cInJlcVwiO2FbYS5yZXBseT0xXT1cInJlcGx5XCI7YVthLmV2ZW50X3JlcT0yXT1cImV2ZW50X3JlcVwiO2FbYS5ldmVudF9yZXBseT0zXT1cImV2ZW50X3JlcGx5XCJ9KShoPWEud3NfbXNnX3R5cGVfdHx8KGEud3NfbXNnX3R5cGVfdD17fSkpO2I9ZnVuY3Rpb24oKXtmdW5jdGlvbiBhKCl7fVxyXG5hLmNyZWF0ZU1lc3NhZ2VCeWlkPWZ1bmN0aW9uKGEsYixjLGQsaCxwKXtmb3IodmFyIGc9W10sQj02O0I8YXJndW1lbnRzLmxlbmd0aDtCKyspZ1tCLTZdPWFyZ3VtZW50c1tCXTsoQj1sLldlYnJwY0NsYXNzTGliSW5mb1V0aWwuZ2V0TWV0aG9kQnlpZChkLGgpKSYmQi5pc3Byb3B8fChhPSExKTtyZXR1cm4gdGhpcy5jcmVhdGVNZXNzYWdlLmFwcGx5KHRoaXMsZShbYyxhLGIsZCxoLHBdLGcpKX07YS5jcmVhdGVNZXNzYWdlPWZ1bmN0aW9uKGEsYixjLGQsaCxsKXtmb3IodmFyIGc9W10scD02O3A8YXJndW1lbnRzLmxlbmd0aDtwKyspZ1twLTZdPWFyZ3VtZW50c1twXTtyZXR1cm57djpcIndlYnJ0Y1wiLGhkcjp7dmVyc2lvbjp0aGlzLl92ZXJzaW9uLG1zZ190eXBlOnRoaXMuZ2V0TXNnVHlwZShhKSxtb2RpZmllcjpiLGRlc3Ryb3k6Yyxwcm9jOntpaWQ6ZCxtZXRob2RpZDpofX0sb2JqcmVmOntvaWQ6bH0scGFyYW1zOmUoZyl9fTthLmdldE1zZ1R5cGU9ZnVuY3Rpb24oYSl7dmFyIGI9XHJcblwiXCI7c3dpdGNoKGEpe2RlZmF1bHQ6Yj1cInJlcVwiO2JyZWFrO2Nhc2UgaC5yZXBseTpiPVwicmVwbHlcIjticmVhaztjYXNlIGguZXZlbnRfcmVxOmI9XCJldmVudC1yZXFcIjticmVhaztjYXNlIGguZXZlbnRfcmVwbHk6Yj1cImV2ZW50LXJlcGx5XCJ9cmV0dXJuIGJ9O2EuX3ZlcnNpb249MTtyZXR1cm4gYX0oKTthLldzSnNvblV0aWw9Yn19LHA9e307cmV0dXJuIGUoMzA3KX0oKX0pO1xyXG4iLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vYXJyYXkvZnJvbVwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9nZXQtaXRlcmF0b3JcIiksIF9fZXNNb2R1bGU6IHRydWUgfTsiLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vaXMtaXRlcmFibGVcIiksIF9fZXNNb2R1bGU6IHRydWUgfTsiLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2NyZWF0ZVwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZGVmaW5lLXByb3BlcnR5XCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07IiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JcIiksIF9fZXNNb2R1bGU6IHRydWUgfTsiLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2dldC1wcm90b3R5cGUtb2ZcIiksIF9fZXNNb2R1bGU6IHRydWUgfTsiLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L3NldC1wcm90b3R5cGUtb2ZcIiksIF9fZXNNb2R1bGU6IHRydWUgfTsiLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vcHJvbWlzZVwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9zeW1ib2xcIiksIF9fZXNNb2R1bGU6IHRydWUgfTsiLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sL2l0ZXJhdG9yXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfcHJvbWlzZSA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL3Byb21pc2VcIik7XG5cbnZhciBfcHJvbWlzZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9taXNlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGdlbiA9IGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBmdW5jdGlvbiBzdGVwKGtleSwgYXJnKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpO1xuICAgICAgICAgIHZhciB2YWx1ZSA9IGluZm8udmFsdWU7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW5mby5kb25lKSB7XG4gICAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIF9wcm9taXNlMi5kZWZhdWx0LnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBzdGVwKFwibmV4dFwiLCB2YWx1ZSk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgc3RlcChcInRocm93XCIsIGVycik7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN0ZXAoXCJuZXh0XCIpO1xuICAgIH0pO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9vYmplY3QvZGVmaW5lLXByb3BlcnR5XCIpO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlZmluZVByb3BlcnR5KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gIH07XG59KCk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZlwiKTtcblxudmFyIF9nZXRQcm90b3R5cGVPZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRQcm90b3R5cGVPZik7XG5cbnZhciBfZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZShcIi4uL2NvcmUtanMvb2JqZWN0L2dldC1vd24tcHJvcGVydHktZGVzY3JpcHRvclwiKTtcblxudmFyIF9nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gZ2V0KG9iamVjdCwgcHJvcGVydHksIHJlY2VpdmVyKSB7XG4gIGlmIChvYmplY3QgPT09IG51bGwpIG9iamVjdCA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbiAgdmFyIGRlc2MgPSAoMCwgX2dldE93blByb3BlcnR5RGVzY3JpcHRvcjIuZGVmYXVsdCkob2JqZWN0LCBwcm9wZXJ0eSk7XG5cbiAgaWYgKGRlc2MgPT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBwYXJlbnQgPSAoMCwgX2dldFByb3RvdHlwZU9mMi5kZWZhdWx0KShvYmplY3QpO1xuXG4gICAgaWYgKHBhcmVudCA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGdldChwYXJlbnQsIHByb3BlcnR5LCByZWNlaXZlcik7XG4gICAgfVxuICB9IGVsc2UgaWYgKFwidmFsdWVcIiBpbiBkZXNjKSB7XG4gICAgcmV0dXJuIGRlc2MudmFsdWU7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGdldHRlciA9IGRlc2MuZ2V0O1xuXG4gICAgaWYgKGdldHRlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7XG4gIH1cbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZlwiKTtcblxudmFyIF9zZXRQcm90b3R5cGVPZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zZXRQcm90b3R5cGVPZik7XG5cbnZhciBfY3JlYXRlID0gcmVxdWlyZShcIi4uL2NvcmUtanMvb2JqZWN0L2NyZWF0ZVwiKTtcblxudmFyIF9jcmVhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlKTtcblxudmFyIF90eXBlb2YyID0gcmVxdWlyZShcIi4uL2hlbHBlcnMvdHlwZW9mXCIpO1xuXG52YXIgX3R5cGVvZjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90eXBlb2YyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArICh0eXBlb2Ygc3VwZXJDbGFzcyA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkoc3VwZXJDbGFzcykpKTtcbiAgfVxuXG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9ICgwLCBfY3JlYXRlMi5kZWZhdWx0KShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9XG4gIH0pO1xuICBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mMi5kZWZhdWx0ID8gKDAsIF9zZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfdHlwZW9mMiA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzL3R5cGVvZlwiKTtcblxudmFyIF90eXBlb2YzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHlwZW9mMik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChzZWxmLCBjYWxsKSB7XG4gIGlmICghc2VsZikge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfVxuXG4gIHJldHVybiBjYWxsICYmICgodHlwZW9mIGNhbGwgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKGNhbGwpKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9pc0l0ZXJhYmxlMiA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL2lzLWl0ZXJhYmxlXCIpO1xuXG52YXIgX2lzSXRlcmFibGUzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXNJdGVyYWJsZTIpO1xuXG52YXIgX2dldEl0ZXJhdG9yMiA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL2dldC1pdGVyYXRvclwiKTtcblxudmFyIF9nZXRJdGVyYXRvcjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRJdGVyYXRvcjIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIHNsaWNlSXRlcmF0b3IoYXJyLCBpKSB7XG4gICAgdmFyIF9hcnIgPSBbXTtcbiAgICB2YXIgX24gPSB0cnVlO1xuICAgIHZhciBfZCA9IGZhbHNlO1xuICAgIHZhciBfZSA9IHVuZGVmaW5lZDtcblxuICAgIHRyeSB7XG4gICAgICBmb3IgKHZhciBfaSA9ICgwLCBfZ2V0SXRlcmF0b3IzLmRlZmF1bHQpKGFyciksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7XG4gICAgICAgIF9hcnIucHVzaChfcy52YWx1ZSk7XG5cbiAgICAgICAgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgX2QgPSB0cnVlO1xuICAgICAgX2UgPSBlcnI7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0pIF9pW1wicmV0dXJuXCJdKCk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBpZiAoX2QpIHRocm93IF9lO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBfYXJyO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChhcnIsIGkpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7XG4gICAgICByZXR1cm4gYXJyO1xuICAgIH0gZWxzZSBpZiAoKDAsIF9pc0l0ZXJhYmxlMy5kZWZhdWx0KShPYmplY3QoYXJyKSkpIHtcbiAgICAgIHJldHVybiBzbGljZUl0ZXJhdG9yKGFyciwgaSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpO1xuICAgIH1cbiAgfTtcbn0oKTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9mcm9tID0gcmVxdWlyZShcIi4uL2NvcmUtanMvYXJyYXkvZnJvbVwiKTtcblxudmFyIF9mcm9tMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Zyb20pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGFycikgPyBhcnIgOiAoMCwgX2Zyb20yLmRlZmF1bHQpKGFycik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2l0ZXJhdG9yID0gcmVxdWlyZShcIi4uL2NvcmUtanMvc3ltYm9sL2l0ZXJhdG9yXCIpO1xuXG52YXIgX2l0ZXJhdG9yMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2l0ZXJhdG9yKTtcblxudmFyIF9zeW1ib2wgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9zeW1ib2xcIik7XG5cbnZhciBfc3ltYm9sMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N5bWJvbCk7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIF9zeW1ib2wyLmRlZmF1bHQgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgX2l0ZXJhdG9yMi5kZWZhdWx0ID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgX3N5bWJvbDIuZGVmYXVsdCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gX3N5bWJvbDIuZGVmYXVsdCAmJiBvYmogIT09IF9zeW1ib2wyLmRlZmF1bHQucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IHR5cGVvZiBfc3ltYm9sMi5kZWZhdWx0ID09PSBcImZ1bmN0aW9uXCIgJiYgX3R5cGVvZihfaXRlcmF0b3IyLmRlZmF1bHQpID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKG9iaik7XG59IDogZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gb2JqICYmIHR5cGVvZiBfc3ltYm9sMi5kZWZhdWx0ID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBfc3ltYm9sMi5kZWZhdWx0ICYmIG9iaiAhPT0gX3N5bWJvbDIuZGVmYXVsdC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iaiA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKG9iaik7XG59OyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInJlZ2VuZXJhdG9yLXJ1bnRpbWVcIik7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2LmFycmF5LmZyb20nKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLkFycmF5LmZyb207XG4iLCJyZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvcicpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9tb2R1bGVzL2NvcmUuZ2V0LWl0ZXJhdG9yJyk7XG4iLCJyZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvcicpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9tb2R1bGVzL2NvcmUuaXMtaXRlcmFibGUnKTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUnKTtcbnZhciAkT2JqZWN0ID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdDtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlKFAsIEQpIHtcbiAgcmV0dXJuICRPYmplY3QuY3JlYXRlKFAsIEQpO1xufTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydHknKTtcbnZhciAkT2JqZWN0ID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdDtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoaXQsIGtleSwgZGVzYykge1xuICByZXR1cm4gJE9iamVjdC5kZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBkZXNjKTtcbn07XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgJE9iamVjdCA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3Q7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KSB7XG4gIHJldHVybiAkT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KTtcbn07XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZicpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdC5zZXRQcm90b3R5cGVPZjtcbiIsInJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5wcm9taXNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNy5wcm9taXNlLmZpbmFsbHknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM3LnByb21pc2UudHJ5Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL21vZHVsZXMvX2NvcmUnKS5Qcm9taXNlO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYuc3ltYm9sJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LnN5bWJvbC5vYnNlcnZhYmxlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5TeW1ib2w7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL193a3MtZXh0JykuZignaXRlcmF0b3InKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSBmdW5jdGlvbiEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIENvbnN0cnVjdG9yLCBuYW1lLCBmb3JiaWRkZW5GaWVsZCkge1xuICBpZiAoIShpdCBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSB8fCAoZm9yYmlkZGVuRmllbGQgIT09IHVuZGVmaW5lZCAmJiBmb3JiaWRkZW5GaWVsZCBpbiBpdCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IobmFtZSArICc6IGluY29ycmVjdCBpbnZvY2F0aW9uIScpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhbiBvYmplY3QhJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIvLyBmYWxzZSAtPiBBcnJheSNpbmRleE9mXG4vLyB0cnVlICAtPiBBcnJheSNpbmNsdWRlc1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJU19JTkNMVURFUykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBlbCwgZnJvbUluZGV4KSB7XG4gICAgdmFyIE8gPSB0b0lPYmplY3QoJHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGZyb21JbmRleCwgbGVuZ3RoKTtcbiAgICB2YXIgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBpZiAoSVNfSU5DTFVERVMgJiYgZWwgIT0gZWwpIHdoaWxlIChsZW5ndGggPiBpbmRleCkge1xuICAgICAgdmFsdWUgPSBPW2luZGV4KytdO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgaWYgKHZhbHVlICE9IHZhbHVlKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBBcnJheSNpbmRleE9mIGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90XG4gICAgfSBlbHNlIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTykge1xuICAgICAgaWYgKE9baW5kZXhdID09PSBlbCkgcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7XG4gICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xO1xuICB9O1xufTtcbiIsIi8vIGdldHRpbmcgdGFnIGZyb20gMTkuMS4zLjYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZygpXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG4vLyBFUzMgd3JvbmcgaGVyZVxudmFyIEFSRyA9IGNvZihmdW5jdGlvbiAoKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPT0gJ0FyZ3VtZW50cyc7XG5cbi8vIGZhbGxiYWNrIGZvciBJRTExIFNjcmlwdCBBY2Nlc3MgRGVuaWVkIGVycm9yXG52YXIgdHJ5R2V0ID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gaXRba2V5XTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgTywgVCwgQjtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6IGl0ID09PSBudWxsID8gJ051bGwnXG4gICAgLy8gQEB0b1N0cmluZ1RhZyBjYXNlXG4gICAgOiB0eXBlb2YgKFQgPSB0cnlHZXQoTyA9IE9iamVjdChpdCksIFRBRykpID09ICdzdHJpbmcnID8gVFxuICAgIC8vIGJ1aWx0aW5UYWcgY2FzZVxuICAgIDogQVJHID8gY29mKE8pXG4gICAgLy8gRVMzIGFyZ3VtZW50cyBmYWxsYmFja1xuICAgIDogKEIgPSBjb2YoTykpID09ICdPYmplY3QnICYmIHR5cGVvZiBPLmNhbGxlZSA9PSAnZnVuY3Rpb24nID8gJ0FyZ3VtZW50cycgOiBCO1xufTtcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTtcbiIsInZhciBjb3JlID0gbW9kdWxlLmV4cG9ydHMgPSB7IHZlcnNpb246ICcyLjYuMTInIH07XG5pZiAodHlwZW9mIF9fZSA9PSAnbnVtYmVyJykgX19lID0gY29yZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgaW5kZXgsIHZhbHVlKSB7XG4gIGlmIChpbmRleCBpbiBvYmplY3QpICRkZWZpbmVQcm9wZXJ0eS5mKG9iamVjdCwgaW5kZXgsIGNyZWF0ZURlc2MoMCwgdmFsdWUpKTtcbiAgZWxzZSBvYmplY3RbaW5kZXhdID0gdmFsdWU7XG59O1xuIiwiLy8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIHRoYXQsIGxlbmd0aCkge1xuICBhRnVuY3Rpb24oZm4pO1xuICBpZiAodGhhdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gZm47XG4gIHN3aXRjaCAobGVuZ3RoKSB7XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24gKGEpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xuICAgIH07XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIpO1xuICAgIH07XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uICgvKiAuLi5hcmdzICovKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuIiwiLy8gNy4yLjEgUmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudClcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uICBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZG9jdW1lbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudDtcbi8vIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnIGluIG9sZCBJRVxudmFyIGlzID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07XG4iLCIvLyBJRSA4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgJ2NvbnN0cnVjdG9yLGhhc093blByb3BlcnR5LGlzUHJvdG90eXBlT2YscHJvcGVydHlJc0VudW1lcmFibGUsdG9Mb2NhbGVTdHJpbmcsdG9TdHJpbmcsdmFsdWVPZidcbikuc3BsaXQoJywnKTtcbiIsIi8vIGFsbCBlbnVtZXJhYmxlIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBzeW1ib2xzXG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHJlc3VsdCA9IGdldEtleXMoaXQpO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgaWYgKGdldFN5bWJvbHMpIHtcbiAgICB2YXIgc3ltYm9scyA9IGdldFN5bWJvbHMoaXQpO1xuICAgIHZhciBpc0VudW0gPSBwSUUuZjtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAoc3ltYm9scy5sZW5ndGggPiBpKSBpZiAoaXNFbnVtLmNhbGwoaXQsIGtleSA9IHN5bWJvbHNbaSsrXSkpIHJlc3VsdC5wdXNoKGtleSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG52YXIgJGV4cG9ydCA9IGZ1bmN0aW9uICh0eXBlLCBuYW1lLCBzb3VyY2UpIHtcbiAgdmFyIElTX0ZPUkNFRCA9IHR5cGUgJiAkZXhwb3J0LkY7XG4gIHZhciBJU19HTE9CQUwgPSB0eXBlICYgJGV4cG9ydC5HO1xuICB2YXIgSVNfU1RBVElDID0gdHlwZSAmICRleHBvcnQuUztcbiAgdmFyIElTX1BST1RPID0gdHlwZSAmICRleHBvcnQuUDtcbiAgdmFyIElTX0JJTkQgPSB0eXBlICYgJGV4cG9ydC5CO1xuICB2YXIgSVNfV1JBUCA9IHR5cGUgJiAkZXhwb3J0Llc7XG4gIHZhciBleHBvcnRzID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSk7XG4gIHZhciBleHBQcm90byA9IGV4cG9ydHNbUFJPVE9UWVBFXTtcbiAgdmFyIHRhcmdldCA9IElTX0dMT0JBTCA/IGdsb2JhbCA6IElTX1NUQVRJQyA/IGdsb2JhbFtuYW1lXSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV07XG4gIHZhciBrZXksIG93biwgb3V0O1xuICBpZiAoSVNfR0xPQkFMKSBzb3VyY2UgPSBuYW1lO1xuICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIGlmIChvd24gJiYgaGFzKGV4cG9ydHMsIGtleSkpIGNvbnRpbnVlO1xuICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXG4gICAgb3V0ID0gb3duID8gdGFyZ2V0W2tleV0gOiBzb3VyY2Vba2V5XTtcbiAgICAvLyBwcmV2ZW50IGdsb2JhbCBwb2xsdXRpb24gZm9yIG5hbWVzcGFjZXNcbiAgICBleHBvcnRzW2tleV0gPSBJU19HTE9CQUwgJiYgdHlwZW9mIHRhcmdldFtrZXldICE9ICdmdW5jdGlvbicgPyBzb3VyY2Vba2V5XVxuICAgIC8vIGJpbmQgdGltZXJzIHRvIGdsb2JhbCBmb3IgY2FsbCBmcm9tIGV4cG9ydCBjb250ZXh0XG4gICAgOiBJU19CSU5EICYmIG93biA/IGN0eChvdXQsIGdsb2JhbClcbiAgICAvLyB3cmFwIGdsb2JhbCBjb25zdHJ1Y3RvcnMgZm9yIHByZXZlbnQgY2hhbmdlIHRoZW0gaW4gbGlicmFyeVxuICAgIDogSVNfV1JBUCAmJiB0YXJnZXRba2V5XSA9PSBvdXQgPyAoZnVuY3Rpb24gKEMpIHtcbiAgICAgIHZhciBGID0gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgICAgaWYgKHRoaXMgaW5zdGFuY2VvZiBDKSB7XG4gICAgICAgICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjYXNlIDA6IHJldHVybiBuZXcgQygpO1xuICAgICAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IEMoYSk7XG4gICAgICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgQyhhLCBiKTtcbiAgICAgICAgICB9IHJldHVybiBuZXcgQyhhLCBiLCBjKTtcbiAgICAgICAgfSByZXR1cm4gQy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICAgIEZbUFJPVE9UWVBFXSA9IENbUFJPVE9UWVBFXTtcbiAgICAgIHJldHVybiBGO1xuICAgIC8vIG1ha2Ugc3RhdGljIHZlcnNpb25zIGZvciBwcm90b3R5cGUgbWV0aG9kc1xuICAgIH0pKG91dCkgOiBJU19QUk9UTyAmJiB0eXBlb2Ygb3V0ID09ICdmdW5jdGlvbicgPyBjdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDtcbiAgICAvLyBleHBvcnQgcHJvdG8gbWV0aG9kcyB0byBjb3JlLiVDT05TVFJVQ1RPUiUubWV0aG9kcy4lTkFNRSVcbiAgICBpZiAoSVNfUFJPVE8pIHtcbiAgICAgIChleHBvcnRzLnZpcnR1YWwgfHwgKGV4cG9ydHMudmlydHVhbCA9IHt9KSlba2V5XSA9IG91dDtcbiAgICAgIC8vIGV4cG9ydCBwcm90byBtZXRob2RzIHRvIGNvcmUuJUNPTlNUUlVDVE9SJS5wcm90b3R5cGUuJU5BTUUlXG4gICAgICBpZiAodHlwZSAmICRleHBvcnQuUiAmJiBleHBQcm90byAmJiAhZXhwUHJvdG9ba2V5XSkgaGlkZShleHBQcm90bywga2V5LCBvdXQpO1xuICAgIH1cbiAgfVxufTtcbi8vIHR5cGUgYml0bWFwXG4kZXhwb3J0LkYgPSAxOyAgIC8vIGZvcmNlZFxuJGV4cG9ydC5HID0gMjsgICAvLyBnbG9iYWxcbiRleHBvcnQuUyA9IDQ7ICAgLy8gc3RhdGljXG4kZXhwb3J0LlAgPSA4OyAgIC8vIHByb3RvXG4kZXhwb3J0LkIgPSAxNjsgIC8vIGJpbmRcbiRleHBvcnQuVyA9IDMyOyAgLy8gd3JhcFxuJGV4cG9ydC5VID0gNjQ7ICAvLyBzYWZlXG4kZXhwb3J0LlIgPSAxMjg7IC8vIHJlYWwgcHJvdG8gbWV0aG9kIGZvciBgbGlicmFyeWBcbm1vZHVsZS5leHBvcnRzID0gJGV4cG9ydDtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcbiIsInZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi9faXRlci1jYWxsJyk7XG52YXIgaXNBcnJheUl0ZXIgPSByZXF1aXJlKCcuL19pcy1hcnJheS1pdGVyJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgQlJFQUsgPSB7fTtcbnZhciBSRVRVUk4gPSB7fTtcbnZhciBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmFibGUsIGVudHJpZXMsIGZuLCB0aGF0LCBJVEVSQVRPUikge1xuICB2YXIgaXRlckZuID0gSVRFUkFUT1IgPyBmdW5jdGlvbiAoKSB7IHJldHVybiBpdGVyYWJsZTsgfSA6IGdldEl0ZXJGbihpdGVyYWJsZSk7XG4gIHZhciBmID0gY3R4KGZuLCB0aGF0LCBlbnRyaWVzID8gMiA6IDEpO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGVuZ3RoLCBzdGVwLCBpdGVyYXRvciwgcmVzdWx0O1xuICBpZiAodHlwZW9mIGl0ZXJGbiAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXRlcmFibGUgKyAnIGlzIG5vdCBpdGVyYWJsZSEnKTtcbiAgLy8gZmFzdCBjYXNlIGZvciBhcnJheXMgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yXG4gIGlmIChpc0FycmF5SXRlcihpdGVyRm4pKSBmb3IgKGxlbmd0aCA9IHRvTGVuZ3RoKGl0ZXJhYmxlLmxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgcmVzdWx0ID0gZW50cmllcyA/IGYoYW5PYmplY3Qoc3RlcCA9IGl0ZXJhYmxlW2luZGV4XSlbMF0sIHN0ZXBbMV0pIDogZihpdGVyYWJsZVtpbmRleF0pO1xuICAgIGlmIChyZXN1bHQgPT09IEJSRUFLIHx8IHJlc3VsdCA9PT0gUkVUVVJOKSByZXR1cm4gcmVzdWx0O1xuICB9IGVsc2UgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKGl0ZXJhYmxlKTsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOykge1xuICAgIHJlc3VsdCA9IGNhbGwoaXRlcmF0b3IsIGYsIHN0ZXAudmFsdWUsIGVudHJpZXMpO1xuICAgIGlmIChyZXN1bHQgPT09IEJSRUFLIHx8IHJlc3VsdCA9PT0gUkVUVVJOKSByZXR1cm4gcmVzdWx0O1xuICB9XG59O1xuZXhwb3J0cy5CUkVBSyA9IEJSRUFLO1xuZXhwb3J0cy5SRVRVUk4gPSBSRVRVUk47XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxudmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoXG4gID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5pZiAodHlwZW9mIF9fZyA9PSAnbnVtYmVyJykgX19nID0gZ2xvYmFsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCJ2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XG59O1xuIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGRQLmYob2JqZWN0LCBrZXksIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuIiwidmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG5tb2R1bGUuZXhwb3J0cyA9IGRvY3VtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiIsIm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnZGl2JyksICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCIvLyBmYXN0IGFwcGx5LCBodHRwOi8vanNwZXJmLmxua2l0LmNvbS9mYXN0LWFwcGx5LzVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCBhcmdzLCB0aGF0KSB7XG4gIHZhciB1biA9IHRoYXQgPT09IHVuZGVmaW5lZDtcbiAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgIGNhc2UgMDogcmV0dXJuIHVuID8gZm4oKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0KTtcbiAgICBjYXNlIDE6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0pO1xuICAgIGNhc2UgMjogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgY2FzZSAzOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICBjYXNlIDQ6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICB9IHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmdzKTtcbn07XG4iLCIvLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5nc1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKSA/IE9iamVjdCA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gY29mKGl0KSA9PSAnU3RyaW5nJyA/IGl0LnNwbGl0KCcnKSA6IE9iamVjdChpdCk7XG59O1xuIiwiLy8gY2hlY2sgb24gZGVmYXVsdCBBcnJheSBpdGVyYXRvclxudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ICE9PSB1bmRlZmluZWQgJiYgKEl0ZXJhdG9ycy5BcnJheSA9PT0gaXQgfHwgQXJyYXlQcm90b1tJVEVSQVRPUl0gPT09IGl0KTtcbn07XG4iLCIvLyA3LjIuMiBJc0FycmF5KGFyZ3VtZW50KVxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIGlzQXJyYXkoYXJnKSB7XG4gIHJldHVybiBjb2YoYXJnKSA9PSAnQXJyYXknO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7XG59O1xuIiwiLy8gY2FsbCBzb21ldGhpbmcgb24gaXRlcmF0b3Igc3RlcCB3aXRoIHNhZmUgY2xvc2luZyBvbiBlcnJvclxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYXRvciwgZm4sIHZhbHVlLCBlbnRyaWVzKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGVudHJpZXMgPyBmbihhbk9iamVjdCh2YWx1ZSlbMF0sIHZhbHVlWzFdKSA6IGZuKHZhbHVlKTtcbiAgLy8gNy40LjYgSXRlcmF0b3JDbG9zZShpdGVyYXRvciwgY29tcGxldGlvbilcbiAgfSBjYXRjaCAoZSkge1xuICAgIHZhciByZXQgPSBpdGVyYXRvclsncmV0dXJuJ107XG4gICAgaWYgKHJldCAhPT0gdW5kZWZpbmVkKSBhbk9iamVjdChyZXQuY2FsbChpdGVyYXRvcikpO1xuICAgIHRocm93IGU7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGRlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG5cbi8vIDI1LjEuMi4xLjEgJUl0ZXJhdG9yUHJvdG90eXBlJVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19oaWRlJykoSXRlcmF0b3JQcm90b3R5cGUsIHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpLCBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpIHtcbiAgQ29uc3RydWN0b3IucHJvdG90eXBlID0gY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlLCB7IG5leHQ6IGRlc2NyaXB0b3IoMSwgbmV4dCkgfSk7XG4gIHNldFRvU3RyaW5nVGFnKENvbnN0cnVjdG9yLCBOQU1FICsgJyBJdGVyYXRvcicpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciAkaXRlckNyZWF0ZSA9IHJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgQlVHR1kgPSAhKFtdLmtleXMgJiYgJ25leHQnIGluIFtdLmtleXMoKSk7IC8vIFNhZmFyaSBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGBcbnZhciBGRl9JVEVSQVRPUiA9ICdAQGl0ZXJhdG9yJztcbnZhciBLRVlTID0gJ2tleXMnO1xudmFyIFZBTFVFUyA9ICd2YWx1ZXMnO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEJhc2UsIE5BTUUsIENvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCkge1xuICAkaXRlckNyZWF0ZShDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG4gIHZhciBnZXRNZXRob2QgPSBmdW5jdGlvbiAoa2luZCkge1xuICAgIGlmICghQlVHR1kgJiYga2luZCBpbiBwcm90bykgcmV0dXJuIHByb3RvW2tpbmRdO1xuICAgIHN3aXRjaCAoa2luZCkge1xuICAgICAgY2FzZSBLRVlTOiByZXR1cm4gZnVuY3Rpb24ga2V5cygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgIH0gcmV0dXJuIGZ1bmN0aW9uIGVudHJpZXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gIH07XG4gIHZhciBUQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIHZhciBERUZfVkFMVUVTID0gREVGQVVMVCA9PSBWQUxVRVM7XG4gIHZhciBWQUxVRVNfQlVHID0gZmFsc2U7XG4gIHZhciBwcm90byA9IEJhc2UucHJvdG90eXBlO1xuICB2YXIgJG5hdGl2ZSA9IHByb3RvW0lURVJBVE9SXSB8fCBwcm90b1tGRl9JVEVSQVRPUl0gfHwgREVGQVVMVCAmJiBwcm90b1tERUZBVUxUXTtcbiAgdmFyICRkZWZhdWx0ID0gJG5hdGl2ZSB8fCBnZXRNZXRob2QoREVGQVVMVCk7XG4gIHZhciAkZW50cmllcyA9IERFRkFVTFQgPyAhREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKCdlbnRyaWVzJykgOiB1bmRlZmluZWQ7XG4gIHZhciAkYW55TmF0aXZlID0gTkFNRSA9PSAnQXJyYXknID8gcHJvdG8uZW50cmllcyB8fCAkbmF0aXZlIDogJG5hdGl2ZTtcbiAgdmFyIG1ldGhvZHMsIGtleSwgSXRlcmF0b3JQcm90b3R5cGU7XG4gIC8vIEZpeCBuYXRpdmVcbiAgaWYgKCRhbnlOYXRpdmUpIHtcbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKCRhbnlOYXRpdmUuY2FsbChuZXcgQmFzZSgpKSk7XG4gICAgaWYgKEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlICYmIEl0ZXJhdG9yUHJvdG90eXBlLm5leHQpIHtcbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yUHJvdG90eXBlLCBUQUcsIHRydWUpO1xuICAgICAgLy8gZml4IGZvciBzb21lIG9sZCBlbmdpbmVzXG4gICAgICBpZiAoIUxJQlJBUlkgJiYgdHlwZW9mIEl0ZXJhdG9yUHJvdG90eXBlW0lURVJBVE9SXSAhPSAnZnVuY3Rpb24nKSBoaWRlKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgfVxuICB9XG4gIC8vIGZpeCBBcnJheSN7dmFsdWVzLCBAQGl0ZXJhdG9yfS5uYW1lIGluIFY4IC8gRkZcbiAgaWYgKERFRl9WQUxVRVMgJiYgJG5hdGl2ZSAmJiAkbmF0aXZlLm5hbWUgIT09IFZBTFVFUykge1xuICAgIFZBTFVFU19CVUcgPSB0cnVlO1xuICAgICRkZWZhdWx0ID0gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gJG5hdGl2ZS5jYWxsKHRoaXMpOyB9O1xuICB9XG4gIC8vIERlZmluZSBpdGVyYXRvclxuICBpZiAoKCFMSUJSQVJZIHx8IEZPUkNFRCkgJiYgKEJVR0dZIHx8IFZBTFVFU19CVUcgfHwgIXByb3RvW0lURVJBVE9SXSkpIHtcbiAgICBoaWRlKHByb3RvLCBJVEVSQVRPUiwgJGRlZmF1bHQpO1xuICB9XG4gIC8vIFBsdWcgZm9yIGxpYnJhcnlcbiAgSXRlcmF0b3JzW05BTUVdID0gJGRlZmF1bHQ7XG4gIEl0ZXJhdG9yc1tUQUddID0gcmV0dXJuVGhpcztcbiAgaWYgKERFRkFVTFQpIHtcbiAgICBtZXRob2RzID0ge1xuICAgICAgdmFsdWVzOiBERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoVkFMVUVTKSxcbiAgICAgIGtleXM6IElTX1NFVCA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKEtFWVMpLFxuICAgICAgZW50cmllczogJGVudHJpZXNcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIGZvciAoa2V5IGluIG1ldGhvZHMpIHtcbiAgICAgIGlmICghKGtleSBpbiBwcm90bykpIHJlZGVmaW5lKHByb3RvLCBrZXksIG1ldGhvZHNba2V5XSk7XG4gICAgfSBlbHNlICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKEJVR0dZIHx8IFZBTFVFU19CVUcpLCBOQU1FLCBtZXRob2RzKTtcbiAgfVxuICByZXR1cm4gbWV0aG9kcztcbn07XG4iLCJ2YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBTQUZFX0NMT1NJTkcgPSBmYWxzZTtcblxudHJ5IHtcbiAgdmFyIHJpdGVyID0gWzddW0lURVJBVE9SXSgpO1xuICByaXRlclsncmV0dXJuJ10gPSBmdW5jdGlvbiAoKSB7IFNBRkVfQ0xPU0lORyA9IHRydWU7IH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby10aHJvdy1saXRlcmFsXG4gIEFycmF5LmZyb20ocml0ZXIsIGZ1bmN0aW9uICgpIHsgdGhyb3cgMjsgfSk7XG59IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYywgc2tpcENsb3NpbmcpIHtcbiAgaWYgKCFza2lwQ2xvc2luZyAmJiAhU0FGRV9DTE9TSU5HKSByZXR1cm4gZmFsc2U7XG4gIHZhciBzYWZlID0gZmFsc2U7XG4gIHRyeSB7XG4gICAgdmFyIGFyciA9IFs3XTtcbiAgICB2YXIgaXRlciA9IGFycltJVEVSQVRPUl0oKTtcbiAgICBpdGVyLm5leHQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB7IGRvbmU6IHNhZmUgPSB0cnVlIH07IH07XG4gICAgYXJyW0lURVJBVE9SXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGl0ZXI7IH07XG4gICAgZXhlYyhhcnIpO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuIHNhZmU7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZG9uZSwgdmFsdWUpIHtcbiAgcmV0dXJuIHsgdmFsdWU6IHZhbHVlLCBkb25lOiAhIWRvbmUgfTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHt9O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB0cnVlO1xuIiwidmFyIE1FVEEgPSByZXF1aXJlKCcuL191aWQnKSgnbWV0YScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgc2V0RGVzYyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaWQgPSAwO1xudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdHJ1ZTtcbn07XG52YXIgRlJFRVpFID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gaXNFeHRlbnNpYmxlKE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh7fSkpO1xufSk7XG52YXIgc2V0TWV0YSA9IGZ1bmN0aW9uIChpdCkge1xuICBzZXREZXNjKGl0LCBNRVRBLCB7IHZhbHVlOiB7XG4gICAgaTogJ08nICsgKytpZCwgLy8gb2JqZWN0IElEXG4gICAgdzoge30gICAgICAgICAgLy8gd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSB9KTtcbn07XG52YXIgZmFzdEtleSA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIC8vIHJldHVybiBwcmltaXRpdmUgd2l0aCBwcmVmaXhcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6ICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgPyAnUycgOiAnUCcpICsgaXQ7XG4gIGlmICghaGFzKGl0LCBNRVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gJ0YnO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiAnRSc7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIG9iamVjdCBJRFxuICB9IHJldHVybiBpdFtNRVRBXS5pO1xufTtcbnZhciBnZXRXZWFrID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiB0cnVlO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiBmYWxzZTtcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gaGFzaCB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IHJldHVybiBpdFtNRVRBXS53O1xufTtcbi8vIGFkZCBtZXRhZGF0YSBvbiBmcmVlemUtZmFtaWx5IG1ldGhvZHMgY2FsbGluZ1xudmFyIG9uRnJlZXplID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChGUkVFWkUgJiYgbWV0YS5ORUVEICYmIGlzRXh0ZW5zaWJsZShpdCkgJiYgIWhhcyhpdCwgTUVUQSkpIHNldE1ldGEoaXQpO1xuICByZXR1cm4gaXQ7XG59O1xudmFyIG1ldGEgPSBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgS0VZOiBNRVRBLFxuICBORUVEOiBmYWxzZSxcbiAgZmFzdEtleTogZmFzdEtleSxcbiAgZ2V0V2VhazogZ2V0V2VhayxcbiAgb25GcmVlemU6IG9uRnJlZXplXG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIG1hY3JvdGFzayA9IHJlcXVpcmUoJy4vX3Rhc2snKS5zZXQ7XG52YXIgT2JzZXJ2ZXIgPSBnbG9iYWwuTXV0YXRpb25PYnNlcnZlciB8fCBnbG9iYWwuV2ViS2l0TXV0YXRpb25PYnNlcnZlcjtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgUHJvbWlzZSA9IGdsb2JhbC5Qcm9taXNlO1xudmFyIGlzTm9kZSA9IHJlcXVpcmUoJy4vX2NvZicpKHByb2Nlc3MpID09ICdwcm9jZXNzJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBoZWFkLCBsYXN0LCBub3RpZnk7XG5cbiAgdmFyIGZsdXNoID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwYXJlbnQsIGZuO1xuICAgIGlmIChpc05vZGUgJiYgKHBhcmVudCA9IHByb2Nlc3MuZG9tYWluKSkgcGFyZW50LmV4aXQoKTtcbiAgICB3aGlsZSAoaGVhZCkge1xuICAgICAgZm4gPSBoZWFkLmZuO1xuICAgICAgaGVhZCA9IGhlYWQubmV4dDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGZuKCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChoZWFkKSBub3RpZnkoKTtcbiAgICAgICAgZWxzZSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH0gbGFzdCA9IHVuZGVmaW5lZDtcbiAgICBpZiAocGFyZW50KSBwYXJlbnQuZW50ZXIoKTtcbiAgfTtcblxuICAvLyBOb2RlLmpzXG4gIGlmIChpc05vZGUpIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGZsdXNoKTtcbiAgICB9O1xuICAvLyBicm93c2VycyB3aXRoIE11dGF0aW9uT2JzZXJ2ZXIsIGV4Y2VwdCBpT1MgU2FmYXJpIC0gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzMzOVxuICB9IGVsc2UgaWYgKE9ic2VydmVyICYmICEoZ2xvYmFsLm5hdmlnYXRvciAmJiBnbG9iYWwubmF2aWdhdG9yLnN0YW5kYWxvbmUpKSB7XG4gICAgdmFyIHRvZ2dsZSA9IHRydWU7XG4gICAgdmFyIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJyk7XG4gICAgbmV3IE9ic2VydmVyKGZsdXNoKS5vYnNlcnZlKG5vZGUsIHsgY2hhcmFjdGVyRGF0YTogdHJ1ZSB9KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBub2RlLmRhdGEgPSB0b2dnbGUgPSAhdG9nZ2xlO1xuICAgIH07XG4gIC8vIGVudmlyb25tZW50cyB3aXRoIG1heWJlIG5vbi1jb21wbGV0ZWx5IGNvcnJlY3QsIGJ1dCBleGlzdGVudCBQcm9taXNlXG4gIH0gZWxzZSBpZiAoUHJvbWlzZSAmJiBQcm9taXNlLnJlc29sdmUpIHtcbiAgICAvLyBQcm9taXNlLnJlc29sdmUgd2l0aG91dCBhbiBhcmd1bWVudCB0aHJvd3MgYW4gZXJyb3IgaW4gTEcgV2ViT1MgMlxuICAgIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKHVuZGVmaW5lZCk7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcHJvbWlzZS50aGVuKGZsdXNoKTtcbiAgICB9O1xuICAvLyBmb3Igb3RoZXIgZW52aXJvbm1lbnRzIC0gbWFjcm90YXNrIGJhc2VkIG9uOlxuICAvLyAtIHNldEltbWVkaWF0ZVxuICAvLyAtIE1lc3NhZ2VDaGFubmVsXG4gIC8vIC0gd2luZG93LnBvc3RNZXNzYWdcbiAgLy8gLSBvbnJlYWR5c3RhdGVjaGFuZ2VcbiAgLy8gLSBzZXRUaW1lb3V0XG4gIH0gZWxzZSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gc3RyYW5nZSBJRSArIHdlYnBhY2sgZGV2IHNlcnZlciBidWcgLSB1c2UgLmNhbGwoZ2xvYmFsKVxuICAgICAgbWFjcm90YXNrLmNhbGwoZ2xvYmFsLCBmbHVzaCk7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoZm4pIHtcbiAgICB2YXIgdGFzayA9IHsgZm46IGZuLCBuZXh0OiB1bmRlZmluZWQgfTtcbiAgICBpZiAobGFzdCkgbGFzdC5uZXh0ID0gdGFzaztcbiAgICBpZiAoIWhlYWQpIHtcbiAgICAgIGhlYWQgPSB0YXNrO1xuICAgICAgbm90aWZ5KCk7XG4gICAgfSBsYXN0ID0gdGFzaztcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyNS40LjEuNSBOZXdQcm9taXNlQ2FwYWJpbGl0eShDKVxudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcblxuZnVuY3Rpb24gUHJvbWlzZUNhcGFiaWxpdHkoQykge1xuICB2YXIgcmVzb2x2ZSwgcmVqZWN0O1xuICB0aGlzLnByb21pc2UgPSBuZXcgQyhmdW5jdGlvbiAoJCRyZXNvbHZlLCAkJHJlamVjdCkge1xuICAgIGlmIChyZXNvbHZlICE9PSB1bmRlZmluZWQgfHwgcmVqZWN0ICE9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcignQmFkIFByb21pc2UgY29uc3RydWN0b3InKTtcbiAgICByZXNvbHZlID0gJCRyZXNvbHZlO1xuICAgIHJlamVjdCA9ICQkcmVqZWN0O1xuICB9KTtcbiAgdGhpcy5yZXNvbHZlID0gYUZ1bmN0aW9uKHJlc29sdmUpO1xuICB0aGlzLnJlamVjdCA9IGFGdW5jdGlvbihyZWplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gKEMpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlQ2FwYWJpbGl0eShDKTtcbn07XG4iLCIvLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGRQcyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcbnZhciBFbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIGlmcmFtZSBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIGNyZWF0ZURpY3QgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG4gIHZhciBpZnJhbWUgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2lmcmFtZScpO1xuICB2YXIgaSA9IGVudW1CdWdLZXlzLmxlbmd0aDtcbiAgdmFyIGx0ID0gJzwnO1xuICB2YXIgZ3QgPSAnPic7XG4gIHZhciBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIHJlcXVpcmUoJy4vX2h0bWwnKS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6JzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zY3JpcHQtdXJsXG4gIC8vIGNyZWF0ZURpY3QgPSBpZnJhbWUuY29udGVudFdpbmRvdy5PYmplY3Q7XG4gIC8vIGh0bWwucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShsdCArICdzY3JpcHQnICsgZ3QgKyAnZG9jdW1lbnQuRj1PYmplY3QnICsgbHQgKyAnL3NjcmlwdCcgKyBndCk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIGNyZWF0ZURpY3QgPSBpZnJhbWVEb2N1bWVudC5GO1xuICB3aGlsZSAoaS0tKSBkZWxldGUgY3JlYXRlRGljdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2ldXTtcbiAgcmV0dXJuIGNyZWF0ZURpY3QoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTtcbiAgICByZXN1bHQgPSBuZXcgRW1wdHkoKTtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBjcmVhdGVEaWN0KCk7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiBkUHMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBkUCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZFAoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkIScpO1xuICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKSBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXlzID0gZ2V0S2V5cyhQcm9wZXJ0aWVzKTtcbiAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICB2YXIgaSA9IDA7XG4gIHZhciBQO1xuICB3aGlsZSAobGVuZ3RoID4gaSkgZFAuZihPLCBQID0ga2V5c1tpKytdLCBQcm9wZXJ0aWVzW1BdKTtcbiAgcmV0dXJuIE87XG59O1xuIiwidmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcbnZhciBnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGdPUEQgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICBPID0gdG9JT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZ09QRChPLCBQKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmIChoYXMoTywgUCkpIHJldHVybiBjcmVhdGVEZXNjKCFwSUUuZi5jYWxsKE8sIFApLCBPW1BdKTtcbn07XG4iLCIvLyBmYWxsYmFjayBmb3IgSUUxMSBidWdneSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB3aXRoIGlmcmFtZSBhbmQgd2luZG93XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG52YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxudmFyIHdpbmRvd05hbWVzID0gdHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNcbiAgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpIDogW107XG5cbnZhciBnZXRXaW5kb3dOYW1lcyA9IGZ1bmN0aW9uIChpdCkge1xuICB0cnkge1xuICAgIHJldHVybiBnT1BOKGl0KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB3aW5kb3dOYW1lcy5zbGljZSgpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICByZXR1cm4gd2luZG93TmFtZXMgJiYgdG9TdHJpbmcuY2FsbChpdCkgPT0gJ1tvYmplY3QgV2luZG93XScgPyBnZXRXaW5kb3dOYW1lcyhpdCkgOiBnT1BOKHRvSU9iamVjdChpdCkpO1xufTtcbiIsIi8vIDE5LjEuMi43IC8gMTUuMi4zLjQgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKS5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTtcblxuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBoaWRkZW5LZXlzKTtcbn07XG4iLCJleHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuIiwiLy8gMTkuMS4yLjkgLyAxNS4yLjMuMiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gKE8pIHtcbiAgTyA9IHRvT2JqZWN0KE8pO1xuICBpZiAoaGFzKE8sIElFX1BST1RPKSkgcmV0dXJuIE9bSUVfUFJPVE9dO1xuICBpZiAodHlwZW9mIE8uY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBPIGluc3RhbmNlb2YgTy5jb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBPLmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgfSByZXR1cm4gTyBpbnN0YW5jZW9mIE9iamVjdCA/IE9iamVjdFByb3RvIDogbnVsbDtcbn07XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGFycmF5SW5kZXhPZiA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSBpZiAoa2V5ICE9IElFX1BST1RPKSBoYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpO1xuICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSBpZiAoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKSB7XG4gICAgfmFycmF5SW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIi8vIDE5LjEuMi4xNCAvIDE1LjIuMy4xNCBPYmplY3Qua2V5cyhPKVxudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHtcbiAgcmV0dXJuICRrZXlzKE8sIGVudW1CdWdLZXlzKTtcbn07XG4iLCJleHBvcnRzLmYgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiIsIi8vIG1vc3QgT2JqZWN0IG1ldGhvZHMgYnkgRVM2IHNob3VsZCBhY2NlcHQgcHJpbWl0aXZlc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgZXhlYykge1xuICB2YXIgZm4gPSAoY29yZS5PYmplY3QgfHwge30pW0tFWV0gfHwgT2JqZWN0W0tFWV07XG4gIHZhciBleHAgPSB7fTtcbiAgZXhwW0tFWV0gPSBleGVjKGZuKTtcbiAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7IGZuKDEpOyB9KSwgJ09iamVjdCcsIGV4cCk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiB7IGU6IGZhbHNlLCB2OiBleGVjKCkgfTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB7IGU6IHRydWUsIHY6IGUgfTtcbiAgfVxufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSByZXF1aXJlKCcuL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEMsIHgpIHtcbiAgYW5PYmplY3QoQyk7XG4gIGlmIChpc09iamVjdCh4KSAmJiB4LmNvbnN0cnVjdG9yID09PSBDKSByZXR1cm4geDtcbiAgdmFyIHByb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkuZihDKTtcbiAgdmFyIHJlc29sdmUgPSBwcm9taXNlQ2FwYWJpbGl0eS5yZXNvbHZlO1xuICByZXNvbHZlKHgpO1xuICByZXR1cm4gcHJvbWlzZUNhcGFiaWxpdHkucHJvbWlzZTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuIiwidmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNyYywgc2FmZSkge1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSB7XG4gICAgaWYgKHNhZmUgJiYgdGFyZ2V0W2tleV0pIHRhcmdldFtrZXldID0gc3JjW2tleV07XG4gICAgZWxzZSBoaWRlKHRhcmdldCwga2V5LCBzcmNba2V5XSk7XG4gIH0gcmV0dXJuIHRhcmdldDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbiIsIi8vIFdvcmtzIHdpdGggX19wcm90b19fIG9ubHkuIE9sZCB2OCBjYW4ndCB3b3JrIHdpdGggbnVsbCBwcm90byBvYmplY3RzLlxuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgY2hlY2sgPSBmdW5jdGlvbiAoTywgcHJvdG8pIHtcbiAgYW5PYmplY3QoTyk7XG4gIGlmICghaXNPYmplY3QocHJvdG8pICYmIHByb3RvICE9PSBudWxsKSB0aHJvdyBUeXBlRXJyb3IocHJvdG8gKyBcIjogY2FuJ3Qgc2V0IGFzIHByb3RvdHlwZSFcIik7XG59O1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8ICgnX19wcm90b19fJyBpbiB7fSA/IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICBmdW5jdGlvbiAodGVzdCwgYnVnZ3ksIHNldCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc2V0ID0gcmVxdWlyZSgnLi9fY3R4JykoRnVuY3Rpb24uY2FsbCwgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mKE9iamVjdC5wcm90b3R5cGUsICdfX3Byb3RvX18nKS5zZXQsIDIpO1xuICAgICAgICBzZXQodGVzdCwgW10pO1xuICAgICAgICBidWdneSA9ICEodGVzdCBpbnN0YW5jZW9mIEFycmF5KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHsgYnVnZ3kgPSB0cnVlOyB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pIHtcbiAgICAgICAgY2hlY2soTywgcHJvdG8pO1xuICAgICAgICBpZiAoYnVnZ3kpIE8uX19wcm90b19fID0gcHJvdG87XG4gICAgICAgIGVsc2Ugc2V0KE8sIHByb3RvKTtcbiAgICAgICAgcmV0dXJuIE87XG4gICAgICB9O1xuICAgIH0oe30sIGZhbHNlKSA6IHVuZGVmaW5lZCksXG4gIGNoZWNrOiBjaGVja1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIFNQRUNJRVMgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgdmFyIEMgPSB0eXBlb2YgY29yZVtLRVldID09ICdmdW5jdGlvbicgPyBjb3JlW0tFWV0gOiBnbG9iYWxbS0VZXTtcbiAgaWYgKERFU0NSSVBUT1JTICYmIEMgJiYgIUNbU1BFQ0lFU10pIGRQLmYoQywgU1BFQ0lFUywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH1cbiAgfSk7XG59O1xuIiwidmFyIGRlZiA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCB0YWcsIHN0YXQpIHtcbiAgaWYgKGl0ICYmICFoYXMoaXQgPSBzdGF0ID8gaXQgOiBpdC5wcm90b3R5cGUsIFRBRykpIGRlZihpdCwgVEFHLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IHRhZyB9KTtcbn07XG4iLCJ2YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ2tleXMnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gc2hhcmVkW2tleV0gfHwgKHNoYXJlZFtrZXldID0gdWlkKGtleSkpO1xufTtcbiIsInZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nO1xudmFyIHN0b3JlID0gZ2xvYmFsW1NIQVJFRF0gfHwgKGdsb2JhbFtTSEFSRURdID0ge30pO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHt9KTtcbn0pKCd2ZXJzaW9ucycsIFtdKS5wdXNoKHtcbiAgdmVyc2lvbjogY29yZS52ZXJzaW9uLFxuICBtb2RlOiByZXF1aXJlKCcuL19saWJyYXJ5JykgPyAncHVyZScgOiAnZ2xvYmFsJyxcbiAgY29weXJpZ2h0OiAnwqkgMjAyMCBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KSdcbn0pO1xuIiwiLy8gNy4zLjIwIFNwZWNpZXNDb25zdHJ1Y3RvcihPLCBkZWZhdWx0Q29uc3RydWN0b3IpXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgU1BFQ0lFUyA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBEKSB7XG4gIHZhciBDID0gYW5PYmplY3QoTykuY29uc3RydWN0b3I7XG4gIHZhciBTO1xuICByZXR1cm4gQyA9PT0gdW5kZWZpbmVkIHx8IChTID0gYW5PYmplY3QoQylbU1BFQ0lFU10pID09IHVuZGVmaW5lZCA/IEQgOiBhRnVuY3Rpb24oUyk7XG59O1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuLy8gdHJ1ZSAgLT4gU3RyaW5nI2F0XG4vLyBmYWxzZSAtPiBTdHJpbmcjY29kZVBvaW50QXRcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFRPX1NUUklORykge1xuICByZXR1cm4gZnVuY3Rpb24gKHRoYXQsIHBvcykge1xuICAgIHZhciBzID0gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xuICAgIHZhciBpID0gdG9JbnRlZ2VyKHBvcyk7XG4gICAgdmFyIGwgPSBzLmxlbmd0aDtcbiAgICB2YXIgYSwgYjtcbiAgICBpZiAoaSA8IDAgfHwgaSA+PSBsKSByZXR1cm4gVE9fU1RSSU5HID8gJycgOiB1bmRlZmluZWQ7XG4gICAgYSA9IHMuY2hhckNvZGVBdChpKTtcbiAgICByZXR1cm4gYSA8IDB4ZDgwMCB8fCBhID4gMHhkYmZmIHx8IGkgKyAxID09PSBsIHx8IChiID0gcy5jaGFyQ29kZUF0KGkgKyAxKSkgPCAweGRjMDAgfHwgYiA+IDB4ZGZmZlxuICAgICAgPyBUT19TVFJJTkcgPyBzLmNoYXJBdChpKSA6IGFcbiAgICAgIDogVE9fU1RSSU5HID8gcy5zbGljZShpLCBpICsgMikgOiAoYSAtIDB4ZDgwMCA8PCAxMCkgKyAoYiAtIDB4ZGMwMCkgKyAweDEwMDAwO1xuICB9O1xufTtcbiIsInZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBpbnZva2UgPSByZXF1aXJlKCcuL19pbnZva2UnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi9faHRtbCcpO1xudmFyIGNlbCA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgc2V0VGFzayA9IGdsb2JhbC5zZXRJbW1lZGlhdGU7XG52YXIgY2xlYXJUYXNrID0gZ2xvYmFsLmNsZWFySW1tZWRpYXRlO1xudmFyIE1lc3NhZ2VDaGFubmVsID0gZ2xvYmFsLk1lc3NhZ2VDaGFubmVsO1xudmFyIERpc3BhdGNoID0gZ2xvYmFsLkRpc3BhdGNoO1xudmFyIGNvdW50ZXIgPSAwO1xudmFyIHF1ZXVlID0ge307XG52YXIgT05SRUFEWVNUQVRFQ0hBTkdFID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSc7XG52YXIgZGVmZXIsIGNoYW5uZWwsIHBvcnQ7XG52YXIgcnVuID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaWQgPSArdGhpcztcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICBpZiAocXVldWUuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgdmFyIGZuID0gcXVldWVbaWRdO1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gICAgZm4oKTtcbiAgfVxufTtcbnZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uIChldmVudCkge1xuICBydW4uY2FsbChldmVudC5kYXRhKTtcbn07XG4vLyBOb2RlLmpzIDAuOSsgJiBJRTEwKyBoYXMgc2V0SW1tZWRpYXRlLCBvdGhlcndpc2U6XG5pZiAoIXNldFRhc2sgfHwgIWNsZWFyVGFzaykge1xuICBzZXRUYXNrID0gZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGZuKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICB2YXIgaSA9IDE7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgIHF1ZXVlWysrY291bnRlcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICAgIGludm9rZSh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pLCBhcmdzKTtcbiAgICB9O1xuICAgIGRlZmVyKGNvdW50ZXIpO1xuICAgIHJldHVybiBjb3VudGVyO1xuICB9O1xuICBjbGVhclRhc2sgPSBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShpZCkge1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gIH07XG4gIC8vIE5vZGUuanMgMC44LVxuICBpZiAocmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soY3R4KHJ1biwgaWQsIDEpKTtcbiAgICB9O1xuICAvLyBTcGhlcmUgKEpTIGdhbWUgZW5naW5lKSBEaXNwYXRjaCBBUElcbiAgfSBlbHNlIGlmIChEaXNwYXRjaCAmJiBEaXNwYXRjaC5ub3cpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgRGlzcGF0Y2gubm93KGN0eChydW4sIGlkLCAxKSk7XG4gICAgfTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBNZXNzYWdlQ2hhbm5lbCwgaW5jbHVkZXMgV2ViV29ya2Vyc1xuICB9IGVsc2UgaWYgKE1lc3NhZ2VDaGFubmVsKSB7XG4gICAgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgIHBvcnQgPSBjaGFubmVsLnBvcnQyO1xuICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gbGlzdGVuZXI7XG4gICAgZGVmZXIgPSBjdHgocG9ydC5wb3N0TWVzc2FnZSwgcG9ydCwgMSk7XG4gIC8vIEJyb3dzZXJzIHdpdGggcG9zdE1lc3NhZ2UsIHNraXAgV2ViV29ya2Vyc1xuICAvLyBJRTggaGFzIHBvc3RNZXNzYWdlLCBidXQgaXQncyBzeW5jICYgdHlwZW9mIGl0cyBwb3N0TWVzc2FnZSBpcyAnb2JqZWN0J1xuICB9IGVsc2UgaWYgKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyICYmIHR5cGVvZiBwb3N0TWVzc2FnZSA9PSAnZnVuY3Rpb24nICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBnbG9iYWwucG9zdE1lc3NhZ2UoaWQgKyAnJywgJyonKTtcbiAgICB9O1xuICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgbGlzdGVuZXIsIGZhbHNlKTtcbiAgLy8gSUU4LVxuICB9IGVsc2UgaWYgKE9OUkVBRFlTVEFURUNIQU5HRSBpbiBjZWwoJ3NjcmlwdCcpKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoY2VsKCdzY3JpcHQnKSlbT05SRUFEWVNUQVRFQ0hBTkdFXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaHRtbC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAgICAgcnVuLmNhbGwoaWQpO1xuICAgICAgfTtcbiAgICB9O1xuICAvLyBSZXN0IG9sZCBicm93c2Vyc1xuICB9IGVsc2Uge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBzZXRUaW1lb3V0KGN0eChydW4sIGlkLCAxKSwgMCk7XG4gICAgfTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0VGFzayxcbiAgY2xlYXI6IGNsZWFyVGFza1xufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoKSB7XG4gIGluZGV4ID0gdG9JbnRlZ2VyKGluZGV4KTtcbiAgcmV0dXJuIGluZGV4IDwgMCA/IG1heChpbmRleCArIGxlbmd0aCwgMCkgOiBtaW4oaW5kZXgsIGxlbmd0aCk7XG59O1xuIiwiLy8gNy4xLjQgVG9JbnRlZ2VyXG52YXIgY2VpbCA9IE1hdGguY2VpbDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXNOYU4oaXQgPSAraXQpID8gMCA6IChpdCA+IDAgPyBmbG9vciA6IGNlaWwpKGl0KTtcbn07XG4iLCIvLyB0byBpbmRleGVkIG9iamVjdCwgdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gSU9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuIiwiLy8gNy4xLjE1IFRvTGVuZ3RoXG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID4gMCA/IG1pbih0b0ludGVnZXIoaXQpLCAweDFmZmZmZmZmZmZmZmZmKSA6IDA7IC8vIHBvdygyLCA1MykgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07XG4iLCIvLyA3LjEuMTMgVG9PYmplY3QoYXJndW1lbnQpXG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcbiIsIi8vIDcuMS4xIFRvUHJpbWl0aXZlKGlucHV0IFssIFByZWZlcnJlZFR5cGVdKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG4vLyBpbnN0ZWFkIG9mIHRoZSBFUzYgc3BlYyB2ZXJzaW9uLCB3ZSBkaWRuJ3QgaW1wbGVtZW50IEBAdG9QcmltaXRpdmUgY2FzZVxuLy8gYW5kIHRoZSBzZWNvbmQgYXJndW1lbnQgLSBmbGFnIC0gcHJlZmVycmVkIHR5cGUgaXMgYSBzdHJpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBTKSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gaXQ7XG4gIHZhciBmbiwgdmFsO1xuICBpZiAoUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKHR5cGVvZiAoZm4gPSBpdC52YWx1ZU9mKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICghUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xufTtcbiIsInZhciBpZCA9IDA7XG52YXIgcHggPSBNYXRoLnJhbmRvbSgpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiAnU3ltYm9sKCcuY29uY2F0KGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXksICcpXycsICgrK2lkICsgcHgpLnRvU3RyaW5nKDM2KSk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIG5hdmlnYXRvciA9IGdsb2JhbC5uYXZpZ2F0b3I7XG5cbm1vZHVsZS5leHBvcnRzID0gbmF2aWdhdG9yICYmIG5hdmlnYXRvci51c2VyQWdlbnQgfHwgJyc7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyIHdrc0V4dCA9IHJlcXVpcmUoJy4vX3drcy1leHQnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHZhciAkU3ltYm9sID0gY29yZS5TeW1ib2wgfHwgKGNvcmUuU3ltYm9sID0gTElCUkFSWSA/IHt9IDogZ2xvYmFsLlN5bWJvbCB8fCB7fSk7XG4gIGlmIChuYW1lLmNoYXJBdCgwKSAhPSAnXycgJiYgIShuYW1lIGluICRTeW1ib2wpKSBkZWZpbmVQcm9wZXJ0eSgkU3ltYm9sLCBuYW1lLCB7IHZhbHVlOiB3a3NFeHQuZihuYW1lKSB9KTtcbn07XG4iLCJleHBvcnRzLmYgPSByZXF1aXJlKCcuL193a3MnKTtcbiIsInZhciBzdG9yZSA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCd3a3MnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5TeW1ib2w7XG52YXIgVVNFX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT0gJ2Z1bmN0aW9uJztcblxudmFyICRleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gc3RvcmVbbmFtZV0gfHwgKHN0b3JlW25hbWVdID1cbiAgICBVU0VfU1lNQk9MICYmIFN5bWJvbFtuYW1lXSB8fCAoVVNFX1NZTUJPTCA/IFN5bWJvbCA6IHVpZCkoJ1N5bWJvbC4nICsgbmFtZSkpO1xufTtcblxuJGV4cG9ydHMuc3RvcmUgPSBzdG9yZTtcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvcmUnKS5nZXRJdGVyYXRvck1ldGhvZCA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgIT0gdW5kZWZpbmVkKSByZXR1cm4gaXRbSVRFUkFUT1JdXG4gICAgfHwgaXRbJ0BAaXRlcmF0b3InXVxuICAgIHx8IEl0ZXJhdG9yc1tjbGFzc29mKGl0KV07XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZ2V0ID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29yZScpLmdldEl0ZXJhdG9yID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBpdGVyRm4gPSBnZXQoaXQpO1xuICBpZiAodHlwZW9mIGl0ZXJGbiAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBpdGVyYWJsZSEnKTtcbiAgcmV0dXJuIGFuT2JqZWN0KGl0ZXJGbi5jYWxsKGl0KSk7XG59O1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29yZScpLmlzSXRlcmFibGUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIE8gPSBPYmplY3QoaXQpO1xuICByZXR1cm4gT1tJVEVSQVRPUl0gIT09IHVuZGVmaW5lZFxuICAgIHx8ICdAQGl0ZXJhdG9yJyBpbiBPXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICAgIHx8IEl0ZXJhdG9ycy5oYXNPd25Qcm9wZXJ0eShjbGFzc29mKE8pKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4vX2l0ZXItY2FsbCcpO1xudmFyIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKTtcbnZhciBnZXRJdGVyRm4gPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpKGZ1bmN0aW9uIChpdGVyKSB7IEFycmF5LmZyb20oaXRlcik7IH0pLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMi4xIEFycmF5LmZyb20oYXJyYXlMaWtlLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgZnJvbTogZnVuY3Rpb24gZnJvbShhcnJheUxpa2UgLyogLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZCAqLykge1xuICAgIHZhciBPID0gdG9PYmplY3QoYXJyYXlMaWtlKTtcbiAgICB2YXIgQyA9IHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXk7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBtYXBmbiA9IGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBpdGVyRm4gPSBnZXRJdGVyRm4oTyk7XG4gICAgdmFyIGxlbmd0aCwgcmVzdWx0LCBzdGVwLCBpdGVyYXRvcjtcbiAgICBpZiAobWFwcGluZykgbWFwZm4gPSBjdHgobWFwZm4sIGFMZW4gPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkLCAyKTtcbiAgICAvLyBpZiBvYmplY3QgaXNuJ3QgaXRlcmFibGUgb3IgaXQncyBhcnJheSB3aXRoIGRlZmF1bHQgaXRlcmF0b3IgLSB1c2Ugc2ltcGxlIGNhc2VcbiAgICBpZiAoaXRlckZuICE9IHVuZGVmaW5lZCAmJiAhKEMgPT0gQXJyYXkgJiYgaXNBcnJheUl0ZXIoaXRlckZuKSkpIHtcbiAgICAgIGZvciAoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChPKSwgcmVzdWx0ID0gbmV3IEMoKTsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyBpbmRleCsrKSB7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIG1hcHBpbmcgPyBjYWxsKGl0ZXJhdG9yLCBtYXBmbiwgW3N0ZXAudmFsdWUsIGluZGV4XSwgdHJ1ZSkgOiBzdGVwLnZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgICAgZm9yIChyZXN1bHQgPSBuZXcgQyhsZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBtYXBwaW5nID8gbWFwZm4oT1tpbmRleF0sIGluZGV4KSA6IE9baW5kZXhdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVzdWx0Lmxlbmd0aCA9IGluZGV4O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKTtcbnZhciBzdGVwID0gcmVxdWlyZSgnLi9faXRlci1zdGVwJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xuXG4vLyAyMi4xLjMuNCBBcnJheS5wcm90b3R5cGUuZW50cmllcygpXG4vLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmtleXMoKVxuLy8gMjIuMS4zLjI5IEFycmF5LnByb3RvdHlwZS52YWx1ZXMoKVxuLy8gMjIuMS4zLjMwIEFycmF5LnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICB0aGlzLl90ID0gdG9JT2JqZWN0KGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gIHRoaXMuX2sgPSBraW5kOyAgICAgICAgICAgICAgICAvLyBraW5kXG4vLyAyMi4xLjUuMi4xICVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIE8gPSB0aGlzLl90O1xuICB2YXIga2luZCA9IHRoaXMuX2s7XG4gIHZhciBpbmRleCA9IHRoaXMuX2krKztcbiAgaWYgKCFPIHx8IGluZGV4ID49IE8ubGVuZ3RoKSB7XG4gICAgdGhpcy5fdCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gc3RlcCgxKTtcbiAgfVxuICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiBzdGVwKDAsIGluZGV4KTtcbiAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiBzdGVwKDAsIE9baW5kZXhdKTtcbiAgcmV0dXJuIHN0ZXAoMCwgW2luZGV4LCBPW2luZGV4XV0pO1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyUgKDkuNC40LjYsIDkuNC40LjcpXG5JdGVyYXRvcnMuQXJndW1lbnRzID0gSXRlcmF0b3JzLkFycmF5O1xuXG5hZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4vLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgeyBjcmVhdGU6IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKSB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4vLyAxOS4xLjIuNCAvIDE1LjIuMy42IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSwgJ09iamVjdCcsIHsgZGVmaW5lUHJvcGVydHk6IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYgfSk7XG4iLCIvLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApXG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgICByZXR1cm4gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0b0lPYmplY3QoaXQpLCBrZXkpO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuOSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyICRnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRQcm90b3R5cGVPZicsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKGl0KSB7XG4gICAgcmV0dXJuICRnZXRQcm90b3R5cGVPZih0b09iamVjdChpdCkpO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjMuMTkgT2JqZWN0LnNldFByb3RvdHlwZU9mKE8sIHByb3RvKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgeyBzZXRQcm90b3R5cGVPZjogcmVxdWlyZSgnLi9fc2V0LXByb3RvJykuc2V0IH0pO1xuIiwiIiwiJ3VzZSBzdHJpY3QnO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgdGFzayA9IHJlcXVpcmUoJy4vX3Rhc2snKS5zZXQ7XG52YXIgbWljcm90YXNrID0gcmVxdWlyZSgnLi9fbWljcm90YXNrJykoKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSA9IHJlcXVpcmUoJy4vX25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcbnZhciBwZXJmb3JtID0gcmVxdWlyZSgnLi9fcGVyZm9ybScpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcbnZhciBwcm9taXNlUmVzb2x2ZSA9IHJlcXVpcmUoJy4vX3Byb21pc2UtcmVzb2x2ZScpO1xudmFyIFBST01JU0UgPSAnUHJvbWlzZSc7XG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgdmVyc2lvbnMgPSBwcm9jZXNzICYmIHByb2Nlc3MudmVyc2lvbnM7XG52YXIgdjggPSB2ZXJzaW9ucyAmJiB2ZXJzaW9ucy52OCB8fCAnJztcbnZhciAkUHJvbWlzZSA9IGdsb2JhbFtQUk9NSVNFXTtcbnZhciBpc05vZGUgPSBjbGFzc29mKHByb2Nlc3MpID09ICdwcm9jZXNzJztcbnZhciBlbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBJbnRlcm5hbCwgbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5LCBPd25Qcm9taXNlQ2FwYWJpbGl0eSwgV3JhcHBlcjtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmY7XG5cbnZhciBVU0VfTkFUSVZFID0gISFmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgLy8gY29ycmVjdCBzdWJjbGFzc2luZyB3aXRoIEBAc3BlY2llcyBzdXBwb3J0XG4gICAgdmFyIHByb21pc2UgPSAkUHJvbWlzZS5yZXNvbHZlKDEpO1xuICAgIHZhciBGYWtlUHJvbWlzZSA9IChwcm9taXNlLmNvbnN0cnVjdG9yID0ge30pW3JlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyldID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgICAgIGV4ZWMoZW1wdHksIGVtcHR5KTtcbiAgICB9O1xuICAgIC8vIHVuaGFuZGxlZCByZWplY3Rpb25zIHRyYWNraW5nIHN1cHBvcnQsIE5vZGVKUyBQcm9taXNlIHdpdGhvdXQgaXQgZmFpbHMgQEBzcGVjaWVzIHRlc3RcbiAgICByZXR1cm4gKGlzTm9kZSB8fCB0eXBlb2YgUHJvbWlzZVJlamVjdGlvbkV2ZW50ID09ICdmdW5jdGlvbicpXG4gICAgICAmJiBwcm9taXNlLnRoZW4oZW1wdHkpIGluc3RhbmNlb2YgRmFrZVByb21pc2VcbiAgICAgIC8vIHY4IDYuNiAoTm9kZSAxMCBhbmQgQ2hyb21lIDY2KSBoYXZlIGEgYnVnIHdpdGggcmVzb2x2aW5nIGN1c3RvbSB0aGVuYWJsZXNcbiAgICAgIC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTgzMDU2NVxuICAgICAgLy8gd2UgY2FuJ3QgZGV0ZWN0IGl0IHN5bmNocm9ub3VzbHksIHNvIGp1c3QgY2hlY2sgdmVyc2lvbnNcbiAgICAgICYmIHY4LmluZGV4T2YoJzYuNicpICE9PSAwXG4gICAgICAmJiB1c2VyQWdlbnQuaW5kZXhPZignQ2hyb21lLzY2JykgPT09IC0xO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbn0oKTtcblxuLy8gaGVscGVyc1xudmFyIGlzVGhlbmFibGUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHRoZW47XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgdHlwZW9mICh0aGVuID0gaXQudGhlbikgPT0gJ2Z1bmN0aW9uJyA/IHRoZW4gOiBmYWxzZTtcbn07XG52YXIgbm90aWZ5ID0gZnVuY3Rpb24gKHByb21pc2UsIGlzUmVqZWN0KSB7XG4gIGlmIChwcm9taXNlLl9uKSByZXR1cm47XG4gIHByb21pc2UuX24gPSB0cnVlO1xuICB2YXIgY2hhaW4gPSBwcm9taXNlLl9jO1xuICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWx1ZSA9IHByb21pc2UuX3Y7XG4gICAgdmFyIG9rID0gcHJvbWlzZS5fcyA9PSAxO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgcnVuID0gZnVuY3Rpb24gKHJlYWN0aW9uKSB7XG4gICAgICB2YXIgaGFuZGxlciA9IG9rID8gcmVhY3Rpb24ub2sgOiByZWFjdGlvbi5mYWlsO1xuICAgICAgdmFyIHJlc29sdmUgPSByZWFjdGlvbi5yZXNvbHZlO1xuICAgICAgdmFyIHJlamVjdCA9IHJlYWN0aW9uLnJlamVjdDtcbiAgICAgIHZhciBkb21haW4gPSByZWFjdGlvbi5kb21haW47XG4gICAgICB2YXIgcmVzdWx0LCB0aGVuLCBleGl0ZWQ7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICAgIGlmICghb2spIHtcbiAgICAgICAgICAgIGlmIChwcm9taXNlLl9oID09IDIpIG9uSGFuZGxlVW5oYW5kbGVkKHByb21pc2UpO1xuICAgICAgICAgICAgcHJvbWlzZS5faCA9IDE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChoYW5kbGVyID09PSB0cnVlKSByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChkb21haW4pIGRvbWFpbi5lbnRlcigpO1xuICAgICAgICAgICAgcmVzdWx0ID0gaGFuZGxlcih2YWx1ZSk7IC8vIG1heSB0aHJvd1xuICAgICAgICAgICAgaWYgKGRvbWFpbikge1xuICAgICAgICAgICAgICBkb21haW4uZXhpdCgpO1xuICAgICAgICAgICAgICBleGl0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocmVzdWx0ID09PSByZWFjdGlvbi5wcm9taXNlKSB7XG4gICAgICAgICAgICByZWplY3QoVHlwZUVycm9yKCdQcm9taXNlLWNoYWluIGN5Y2xlJykpO1xuICAgICAgICAgIH0gZWxzZSBpZiAodGhlbiA9IGlzVGhlbmFibGUocmVzdWx0KSkge1xuICAgICAgICAgICAgdGhlbi5jYWxsKHJlc3VsdCwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9IGVsc2UgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9IGVsc2UgcmVqZWN0KHZhbHVlKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKGRvbWFpbiAmJiAhZXhpdGVkKSBkb21haW4uZXhpdCgpO1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB3aGlsZSAoY2hhaW4ubGVuZ3RoID4gaSkgcnVuKGNoYWluW2krK10pOyAvLyB2YXJpYWJsZSBsZW5ndGggLSBjYW4ndCB1c2UgZm9yRWFjaFxuICAgIHByb21pc2UuX2MgPSBbXTtcbiAgICBwcm9taXNlLl9uID0gZmFsc2U7XG4gICAgaWYgKGlzUmVqZWN0ICYmICFwcm9taXNlLl9oKSBvblVuaGFuZGxlZChwcm9taXNlKTtcbiAgfSk7XG59O1xudmFyIG9uVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWx1ZSA9IHByb21pc2UuX3Y7XG4gICAgdmFyIHVuaGFuZGxlZCA9IGlzVW5oYW5kbGVkKHByb21pc2UpO1xuICAgIHZhciByZXN1bHQsIGhhbmRsZXIsIGNvbnNvbGU7XG4gICAgaWYgKHVuaGFuZGxlZCkge1xuICAgICAgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChpc05vZGUpIHtcbiAgICAgICAgICBwcm9jZXNzLmVtaXQoJ3VuaGFuZGxlZFJlamVjdGlvbicsIHZhbHVlLCBwcm9taXNlKTtcbiAgICAgICAgfSBlbHNlIGlmIChoYW5kbGVyID0gZ2xvYmFsLm9udW5oYW5kbGVkcmVqZWN0aW9uKSB7XG4gICAgICAgICAgaGFuZGxlcih7IHByb21pc2U6IHByb21pc2UsIHJlYXNvbjogdmFsdWUgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAoKGNvbnNvbGUgPSBnbG9iYWwuY29uc29sZSkgJiYgY29uc29sZS5lcnJvcikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1VuaGFuZGxlZCBwcm9taXNlIHJlamVjdGlvbicsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICAvLyBCcm93c2VycyBzaG91bGQgbm90IHRyaWdnZXIgYHJlamVjdGlvbkhhbmRsZWRgIGV2ZW50IGlmIGl0IHdhcyBoYW5kbGVkIGhlcmUsIE5vZGVKUyAtIHNob3VsZFxuICAgICAgcHJvbWlzZS5faCA9IGlzTm9kZSB8fCBpc1VuaGFuZGxlZChwcm9taXNlKSA/IDIgOiAxO1xuICAgIH0gcHJvbWlzZS5fYSA9IHVuZGVmaW5lZDtcbiAgICBpZiAodW5oYW5kbGVkICYmIHJlc3VsdC5lKSB0aHJvdyByZXN1bHQudjtcbiAgfSk7XG59O1xudmFyIGlzVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgcmV0dXJuIHByb21pc2UuX2ggIT09IDEgJiYgKHByb21pc2UuX2EgfHwgcHJvbWlzZS5fYykubGVuZ3RoID09PSAwO1xufTtcbnZhciBvbkhhbmRsZVVuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaGFuZGxlcjtcbiAgICBpZiAoaXNOb2RlKSB7XG4gICAgICBwcm9jZXNzLmVtaXQoJ3JlamVjdGlvbkhhbmRsZWQnLCBwcm9taXNlKTtcbiAgICB9IGVsc2UgaWYgKGhhbmRsZXIgPSBnbG9iYWwub25yZWplY3Rpb25oYW5kbGVkKSB7XG4gICAgICBoYW5kbGVyKHsgcHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiBwcm9taXNlLl92IH0pO1xuICAgIH1cbiAgfSk7XG59O1xudmFyICRyZWplY3QgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgdmFyIHByb21pc2UgPSB0aGlzO1xuICBpZiAocHJvbWlzZS5fZCkgcmV0dXJuO1xuICBwcm9taXNlLl9kID0gdHJ1ZTtcbiAgcHJvbWlzZSA9IHByb21pc2UuX3cgfHwgcHJvbWlzZTsgLy8gdW53cmFwXG4gIHByb21pc2UuX3YgPSB2YWx1ZTtcbiAgcHJvbWlzZS5fcyA9IDI7XG4gIGlmICghcHJvbWlzZS5fYSkgcHJvbWlzZS5fYSA9IHByb21pc2UuX2Muc2xpY2UoKTtcbiAgbm90aWZ5KHByb21pc2UsIHRydWUpO1xufTtcbnZhciAkcmVzb2x2ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICB2YXIgcHJvbWlzZSA9IHRoaXM7XG4gIHZhciB0aGVuO1xuICBpZiAocHJvbWlzZS5fZCkgcmV0dXJuO1xuICBwcm9taXNlLl9kID0gdHJ1ZTtcbiAgcHJvbWlzZSA9IHByb21pc2UuX3cgfHwgcHJvbWlzZTsgLy8gdW53cmFwXG4gIHRyeSB7XG4gICAgaWYgKHByb21pc2UgPT09IHZhbHVlKSB0aHJvdyBUeXBlRXJyb3IoXCJQcm9taXNlIGNhbid0IGJlIHJlc29sdmVkIGl0c2VsZlwiKTtcbiAgICBpZiAodGhlbiA9IGlzVGhlbmFibGUodmFsdWUpKSB7XG4gICAgICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgd3JhcHBlciA9IHsgX3c6IHByb21pc2UsIF9kOiBmYWxzZSB9OyAvLyB3cmFwXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhlbi5jYWxsKHZhbHVlLCBjdHgoJHJlc29sdmUsIHdyYXBwZXIsIDEpLCBjdHgoJHJlamVjdCwgd3JhcHBlciwgMSkpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgJHJlamVjdC5jYWxsKHdyYXBwZXIsIGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvbWlzZS5fdiA9IHZhbHVlO1xuICAgICAgcHJvbWlzZS5fcyA9IDE7XG4gICAgICBub3RpZnkocHJvbWlzZSwgZmFsc2UpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgICRyZWplY3QuY2FsbCh7IF93OiBwcm9taXNlLCBfZDogZmFsc2UgfSwgZSk7IC8vIHdyYXBcbiAgfVxufTtcblxuLy8gY29uc3RydWN0b3IgcG9seWZpbGxcbmlmICghVVNFX05BVElWRSkge1xuICAvLyAyNS40LjMuMSBQcm9taXNlKGV4ZWN1dG9yKVxuICAkUHJvbWlzZSA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsICRQcm9taXNlLCBQUk9NSVNFLCAnX2gnKTtcbiAgICBhRnVuY3Rpb24oZXhlY3V0b3IpO1xuICAgIEludGVybmFsLmNhbGwodGhpcyk7XG4gICAgdHJ5IHtcbiAgICAgIGV4ZWN1dG9yKGN0eCgkcmVzb2x2ZSwgdGhpcywgMSksIGN0eCgkcmVqZWN0LCB0aGlzLCAxKSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAkcmVqZWN0LmNhbGwodGhpcywgZXJyKTtcbiAgICB9XG4gIH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICBJbnRlcm5hbCA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICB0aGlzLl9jID0gW107ICAgICAgICAgICAgIC8vIDwtIGF3YWl0aW5nIHJlYWN0aW9uc1xuICAgIHRoaXMuX2EgPSB1bmRlZmluZWQ7ICAgICAgLy8gPC0gY2hlY2tlZCBpbiBpc1VuaGFuZGxlZCByZWFjdGlvbnNcbiAgICB0aGlzLl9zID0gMDsgICAgICAgICAgICAgIC8vIDwtIHN0YXRlXG4gICAgdGhpcy5fZCA9IGZhbHNlOyAgICAgICAgICAvLyA8LSBkb25lXG4gICAgdGhpcy5fdiA9IHVuZGVmaW5lZDsgICAgICAvLyA8LSB2YWx1ZVxuICAgIHRoaXMuX2ggPSAwOyAgICAgICAgICAgICAgLy8gPC0gcmVqZWN0aW9uIHN0YXRlLCAwIC0gZGVmYXVsdCwgMSAtIGhhbmRsZWQsIDIgLSB1bmhhbmRsZWRcbiAgICB0aGlzLl9uID0gZmFsc2U7ICAgICAgICAgIC8vIDwtIG5vdGlmeVxuICB9O1xuICBJbnRlcm5hbC5wcm90b3R5cGUgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKSgkUHJvbWlzZS5wcm90b3R5cGUsIHtcbiAgICAvLyAyNS40LjUuMyBQcm9taXNlLnByb3RvdHlwZS50aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKVxuICAgIHRoZW46IGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHtcbiAgICAgIHZhciByZWFjdGlvbiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCAkUHJvbWlzZSkpO1xuICAgICAgcmVhY3Rpb24ub2sgPSB0eXBlb2Ygb25GdWxmaWxsZWQgPT0gJ2Z1bmN0aW9uJyA/IG9uRnVsZmlsbGVkIDogdHJ1ZTtcbiAgICAgIHJlYWN0aW9uLmZhaWwgPSB0eXBlb2Ygb25SZWplY3RlZCA9PSAnZnVuY3Rpb24nICYmIG9uUmVqZWN0ZWQ7XG4gICAgICByZWFjdGlvbi5kb21haW4gPSBpc05vZGUgPyBwcm9jZXNzLmRvbWFpbiA6IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX2MucHVzaChyZWFjdGlvbik7XG4gICAgICBpZiAodGhpcy5fYSkgdGhpcy5fYS5wdXNoKHJlYWN0aW9uKTtcbiAgICAgIGlmICh0aGlzLl9zKSBub3RpZnkodGhpcywgZmFsc2UpO1xuICAgICAgcmV0dXJuIHJlYWN0aW9uLnByb21pc2U7XG4gICAgfSxcbiAgICAvLyAyNS40LjUuMSBQcm9taXNlLnByb3RvdHlwZS5jYXRjaChvblJlamVjdGVkKVxuICAgICdjYXRjaCc6IGZ1bmN0aW9uIChvblJlamVjdGVkKSB7XG4gICAgICByZXR1cm4gdGhpcy50aGVuKHVuZGVmaW5lZCwgb25SZWplY3RlZCk7XG4gICAgfVxuICB9KTtcbiAgT3duUHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHByb21pc2UgPSBuZXcgSW50ZXJuYWwoKTtcbiAgICB0aGlzLnByb21pc2UgPSBwcm9taXNlO1xuICAgIHRoaXMucmVzb2x2ZSA9IGN0eCgkcmVzb2x2ZSwgcHJvbWlzZSwgMSk7XG4gICAgdGhpcy5yZWplY3QgPSBjdHgoJHJlamVjdCwgcHJvbWlzZSwgMSk7XG4gIH07XG4gIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmYgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uIChDKSB7XG4gICAgcmV0dXJuIEMgPT09ICRQcm9taXNlIHx8IEMgPT09IFdyYXBwZXJcbiAgICAgID8gbmV3IE93blByb21pc2VDYXBhYmlsaXR5KEMpXG4gICAgICA6IG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgfTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgeyBQcm9taXNlOiAkUHJvbWlzZSB9KTtcbnJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJykoJFByb21pc2UsIFBST01JU0UpO1xucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKShQUk9NSVNFKTtcbldyYXBwZXIgPSByZXF1aXJlKCcuL19jb3JlJylbUFJPTUlTRV07XG5cbi8vIHN0YXRpY3NcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjUgUHJvbWlzZS5yZWplY3QocilcbiAgcmVqZWN0OiBmdW5jdGlvbiByZWplY3Qocikge1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkodGhpcyk7XG4gICAgdmFyICQkcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgJCRyZWplY3Qocik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChMSUJSQVJZIHx8ICFVU0VfTkFUSVZFKSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuNiBQcm9taXNlLnJlc29sdmUoeClcbiAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZSh4KSB7XG4gICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKExJQlJBUlkgJiYgdGhpcyA9PT0gV3JhcHBlciA/ICRQcm9taXNlIDogdGhpcywgeCk7XG4gIH1cbn0pO1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKFVTRV9OQVRJVkUgJiYgcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKShmdW5jdGlvbiAoaXRlcikge1xuICAkUHJvbWlzZS5hbGwoaXRlcilbJ2NhdGNoJ10oZW1wdHkpO1xufSkpLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC4xIFByb21pc2UuYWxsKGl0ZXJhYmxlKVxuICBhbGw6IGZ1bmN0aW9uIGFsbChpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZXNvbHZlID0gY2FwYWJpbGl0eS5yZXNvbHZlO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdmFsdWVzID0gW107XG4gICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgdmFyIHJlbWFpbmluZyA9IDE7XG4gICAgICBmb3JPZihpdGVyYWJsZSwgZmFsc2UsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIHZhciAkaW5kZXggPSBpbmRleCsrO1xuICAgICAgICB2YXIgYWxyZWFkeUNhbGxlZCA9IGZhbHNlO1xuICAgICAgICB2YWx1ZXMucHVzaCh1bmRlZmluZWQpO1xuICAgICAgICByZW1haW5pbmcrKztcbiAgICAgICAgQy5yZXNvbHZlKHByb21pc2UpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgaWYgKGFscmVhZHlDYWxsZWQpIHJldHVybjtcbiAgICAgICAgICBhbHJlYWR5Q2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgICB2YWx1ZXNbJGluZGV4XSA9IHZhbHVlO1xuICAgICAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZSkgcmVqZWN0KHJlc3VsdC52KTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9LFxuICAvLyAyNS40LjQuNCBQcm9taXNlLnJhY2UoaXRlcmFibGUpXG4gIHJhY2U6IGZ1bmN0aW9uIHJhY2UoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgZm9yT2YoaXRlcmFibGUsIGZhbHNlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihjYXBhYmlsaXR5LnJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmUpIHJlamVjdChyZXN1bHQudik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykodHJ1ZSk7XG5cbi8vIDIxLjEuMy4yNyBTdHJpbmcucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoU3RyaW5nLCAnU3RyaW5nJywgZnVuY3Rpb24gKGl0ZXJhdGVkKSB7XG4gIHRoaXMuX3QgPSBTdHJpbmcoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbi8vIDIxLjEuNS4yLjEgJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIE8gPSB0aGlzLl90O1xuICB2YXIgaW5kZXggPSB0aGlzLl9pO1xuICB2YXIgcG9pbnQ7XG4gIGlmIChpbmRleCA+PSBPLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICBwb2ludCA9ICRhdChPLCBpbmRleCk7XG4gIHRoaXMuX2kgKz0gcG9pbnQubGVuZ3RoO1xuICByZXR1cm4geyB2YWx1ZTogcG9pbnQsIGRvbmU6IGZhbHNlIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEVDTUFTY3JpcHQgNiBzeW1ib2xzIHNoaW1cbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBNRVRBID0gcmVxdWlyZSgnLi9fbWV0YScpLktFWTtcbnZhciAkZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbnZhciB3a3NFeHQgPSByZXF1aXJlKCcuL193a3MtZXh0Jyk7XG52YXIgd2tzRGVmaW5lID0gcmVxdWlyZSgnLi9fd2tzLWRlZmluZScpO1xudmFyIGVudW1LZXlzID0gcmVxdWlyZSgnLi9fZW51bS1rZXlzJyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBfY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGdPUE5FeHQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbi1leHQnKTtcbnZhciAkR09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgJEdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyICREUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BEID0gJEdPUEQuZjtcbnZhciBkUCA9ICREUC5mO1xudmFyIGdPUE4gPSBnT1BORXh0LmY7XG52YXIgJFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgJEpTT04gPSBnbG9iYWwuSlNPTjtcbnZhciBfc3RyaW5naWZ5ID0gJEpTT04gJiYgJEpTT04uc3RyaW5naWZ5O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIEhJRERFTiA9IHdrcygnX2hpZGRlbicpO1xudmFyIFRPX1BSSU1JVElWRSA9IHdrcygndG9QcmltaXRpdmUnKTtcbnZhciBpc0VudW0gPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbnZhciBTeW1ib2xSZWdpc3RyeSA9IHNoYXJlZCgnc3ltYm9sLXJlZ2lzdHJ5Jyk7XG52YXIgQWxsU3ltYm9scyA9IHNoYXJlZCgnc3ltYm9scycpO1xudmFyIE9QU3ltYm9scyA9IHNoYXJlZCgnb3Atc3ltYm9scycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0W1BST1RPVFlQRV07XG52YXIgVVNFX05BVElWRSA9IHR5cGVvZiAkU3ltYm9sID09ICdmdW5jdGlvbicgJiYgISEkR09QUy5mO1xudmFyIFFPYmplY3QgPSBnbG9iYWwuUU9iamVjdDtcbi8vIERvbid0IHVzZSBzZXR0ZXJzIGluIFF0IFNjcmlwdCwgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzE3M1xudmFyIHNldHRlciA9ICFRT2JqZWN0IHx8ICFRT2JqZWN0W1BST1RPVFlQRV0gfHwgIVFPYmplY3RbUFJPVE9UWVBFXS5maW5kQ2hpbGQ7XG5cbi8vIGZhbGxiYWNrIGZvciBvbGQgQW5kcm9pZCwgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTY4N1xudmFyIHNldFN5bWJvbERlc2MgPSBERVNDUklQVE9SUyAmJiAkZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gX2NyZWF0ZShkUCh7fSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkUCh0aGlzLCAnYScsIHsgdmFsdWU6IDcgfSkuYTsgfVxuICB9KSkuYSAhPSA3O1xufSkgPyBmdW5jdGlvbiAoaXQsIGtleSwgRCkge1xuICB2YXIgcHJvdG9EZXNjID0gZ09QRChPYmplY3RQcm90bywga2V5KTtcbiAgaWYgKHByb3RvRGVzYykgZGVsZXRlIE9iamVjdFByb3RvW2tleV07XG4gIGRQKGl0LCBrZXksIEQpO1xuICBpZiAocHJvdG9EZXNjICYmIGl0ICE9PSBPYmplY3RQcm90bykgZFAoT2JqZWN0UHJvdG8sIGtleSwgcHJvdG9EZXNjKTtcbn0gOiBkUDtcblxudmFyIHdyYXAgPSBmdW5jdGlvbiAodGFnKSB7XG4gIHZhciBzeW0gPSBBbGxTeW1ib2xzW3RhZ10gPSBfY3JlYXRlKCRTeW1ib2xbUFJPVE9UWVBFXSk7XG4gIHN5bS5fayA9IHRhZztcbiAgcmV0dXJuIHN5bTtcbn07XG5cbnZhciBpc1N5bWJvbCA9IFVTRV9OQVRJVkUgJiYgdHlwZW9mICRTeW1ib2wuaXRlcmF0b3IgPT0gJ3N5bWJvbCcgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJztcbn0gOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0IGluc3RhbmNlb2YgJFN5bWJvbDtcbn07XG5cbnZhciAkZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBEKSB7XG4gIGlmIChpdCA9PT0gT2JqZWN0UHJvdG8pICRkZWZpbmVQcm9wZXJ0eShPUFN5bWJvbHMsIGtleSwgRCk7XG4gIGFuT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgYW5PYmplY3QoRCk7XG4gIGlmIChoYXMoQWxsU3ltYm9scywga2V5KSkge1xuICAgIGlmICghRC5lbnVtZXJhYmxlKSB7XG4gICAgICBpZiAoIWhhcyhpdCwgSElEREVOKSkgZFAoaXQsIEhJRERFTiwgY3JlYXRlRGVzYygxLCB7fSkpO1xuICAgICAgaXRbSElEREVOXVtrZXldID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pIGl0W0hJRERFTl1ba2V5XSA9IGZhbHNlO1xuICAgICAgRCA9IF9jcmVhdGUoRCwgeyBlbnVtZXJhYmxlOiBjcmVhdGVEZXNjKDAsIGZhbHNlKSB9KTtcbiAgICB9IHJldHVybiBzZXRTeW1ib2xEZXNjKGl0LCBrZXksIEQpO1xuICB9IHJldHVybiBkUChpdCwga2V5LCBEKTtcbn07XG52YXIgJGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKGl0LCBQKSB7XG4gIGFuT2JqZWN0KGl0KTtcbiAgdmFyIGtleXMgPSBlbnVtS2V5cyhQID0gdG9JT2JqZWN0KFApKTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgbCA9IGtleXMubGVuZ3RoO1xuICB2YXIga2V5O1xuICB3aGlsZSAobCA+IGkpICRkZWZpbmVQcm9wZXJ0eShpdCwga2V5ID0ga2V5c1tpKytdLCBQW2tleV0pO1xuICByZXR1cm4gaXQ7XG59O1xudmFyICRjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaXQsIFApIHtcbiAgcmV0dXJuIFAgPT09IHVuZGVmaW5lZCA/IF9jcmVhdGUoaXQpIDogJGRlZmluZVByb3BlcnRpZXMoX2NyZWF0ZShpdCksIFApO1xufTtcbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShrZXkpIHtcbiAgdmFyIEUgPSBpc0VudW0uY2FsbCh0aGlzLCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKTtcbiAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBFIHx8ICFoYXModGhpcywga2V5KSB8fCAhaGFzKEFsbFN5bWJvbHMsIGtleSkgfHwgaGFzKHRoaXMsIEhJRERFTikgJiYgdGhpc1tISURERU5dW2tleV0gPyBFIDogdHJ1ZTtcbn07XG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KSB7XG4gIGl0ID0gdG9JT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSkgcmV0dXJuO1xuICB2YXIgRCA9IGdPUEQoaXQsIGtleSk7XG4gIGlmIChEICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICEoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkpIEQuZW51bWVyYWJsZSA9IHRydWU7XG4gIHJldHVybiBEO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgdmFyIG5hbWVzID0gZ09QTih0b0lPYmplY3QoaXQpKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIgaSA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSB7XG4gICAgaWYgKCFoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYga2V5ICE9IEhJRERFTiAmJiBrZXkgIT0gTUVUQSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSB7XG4gIHZhciBJU19PUCA9IGl0ID09PSBPYmplY3RQcm90bztcbiAgdmFyIG5hbWVzID0gZ09QTihJU19PUCA/IE9QU3ltYm9scyA6IHRvSU9iamVjdChpdCkpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHtcbiAgICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIChJU19PUCA/IGhhcyhPYmplY3RQcm90bywga2V5KSA6IHRydWUpKSByZXN1bHQucHVzaChBbGxTeW1ib2xzW2tleV0pO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuXG4vLyAxOS40LjEuMSBTeW1ib2woW2Rlc2NyaXB0aW9uXSlcbmlmICghVVNFX05BVElWRSkge1xuICAkU3ltYm9sID0gZnVuY3Rpb24gU3ltYm9sKCkge1xuICAgIGlmICh0aGlzIGluc3RhbmNlb2YgJFN5bWJvbCkgdGhyb3cgVHlwZUVycm9yKCdTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3IhJyk7XG4gICAgdmFyIHRhZyA9IHVpZChhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7XG4gICAgdmFyICRzZXQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmICh0aGlzID09PSBPYmplY3RQcm90bykgJHNldC5jYWxsKE9QU3ltYm9scywgdmFsdWUpO1xuICAgICAgaWYgKGhhcyh0aGlzLCBISURERU4pICYmIGhhcyh0aGlzW0hJRERFTl0sIHRhZykpIHRoaXNbSElEREVOXVt0YWddID0gZmFsc2U7XG4gICAgICBzZXRTeW1ib2xEZXNjKHRoaXMsIHRhZywgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xuICAgIH07XG4gICAgaWYgKERFU0NSSVBUT1JTICYmIHNldHRlcikgc2V0U3ltYm9sRGVzYyhPYmplY3RQcm90bywgdGFnLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgc2V0OiAkc2V0IH0pO1xuICAgIHJldHVybiB3cmFwKHRhZyk7XG4gIH07XG4gIHJlZGVmaW5lKCRTeW1ib2xbUFJPVE9UWVBFXSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2s7XG4gIH0pO1xuXG4gICRHT1BELmYgPSAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICAkRFAuZiA9ICRkZWZpbmVQcm9wZXJ0eTtcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mID0gZ09QTkV4dC5mID0gJGdldE93blByb3BlcnR5TmFtZXM7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1waWUnKS5mID0gJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xuICAkR09QUy5mID0gJGdldE93blByb3BlcnR5U3ltYm9scztcblxuICBpZiAoREVTQ1JJUFRPUlMgJiYgIXJlcXVpcmUoJy4vX2xpYnJhcnknKSkge1xuICAgIHJlZGVmaW5lKE9iamVjdFByb3RvLCAncHJvcGVydHlJc0VudW1lcmFibGUnLCAkcHJvcGVydHlJc0VudW1lcmFibGUsIHRydWUpO1xuICB9XG5cbiAgd2tzRXh0LmYgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiB3cmFwKHdrcyhuYW1lKSk7XG4gIH07XG59XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIHsgU3ltYm9sOiAkU3ltYm9sIH0pO1xuXG5mb3IgKHZhciBlczZTeW1ib2xzID0gKFxuICAvLyAxOS40LjIuMiwgMTkuNC4yLjMsIDE5LjQuMi40LCAxOS40LjIuNiwgMTkuNC4yLjgsIDE5LjQuMi45LCAxOS40LjIuMTAsIDE5LjQuMi4xMSwgMTkuNC4yLjEyLCAxOS40LjIuMTMsIDE5LjQuMi4xNFxuICAnaGFzSW5zdGFuY2UsaXNDb25jYXRTcHJlYWRhYmxlLGl0ZXJhdG9yLG1hdGNoLHJlcGxhY2Usc2VhcmNoLHNwZWNpZXMsc3BsaXQsdG9QcmltaXRpdmUsdG9TdHJpbmdUYWcsdW5zY29wYWJsZXMnXG4pLnNwbGl0KCcsJyksIGogPSAwOyBlczZTeW1ib2xzLmxlbmd0aCA+IGo7KXdrcyhlczZTeW1ib2xzW2orK10pO1xuXG5mb3IgKHZhciB3ZWxsS25vd25TeW1ib2xzID0gJGtleXMod2tzLnN0b3JlKSwgayA9IDA7IHdlbGxLbm93blN5bWJvbHMubGVuZ3RoID4gazspIHdrc0RlZmluZSh3ZWxsS25vd25TeW1ib2xzW2srK10pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCAnU3ltYm9sJywge1xuICAvLyAxOS40LjIuMSBTeW1ib2wuZm9yKGtleSlcbiAgJ2Zvcic6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gaGFzKFN5bWJvbFJlZ2lzdHJ5LCBrZXkgKz0gJycpXG4gICAgICA/IFN5bWJvbFJlZ2lzdHJ5W2tleV1cbiAgICAgIDogU3ltYm9sUmVnaXN0cnlba2V5XSA9ICRTeW1ib2woa2V5KTtcbiAgfSxcbiAgLy8gMTkuNC4yLjUgU3ltYm9sLmtleUZvcihzeW0pXG4gIGtleUZvcjogZnVuY3Rpb24ga2V5Rm9yKHN5bSkge1xuICAgIGlmICghaXNTeW1ib2woc3ltKSkgdGhyb3cgVHlwZUVycm9yKHN5bSArICcgaXMgbm90IGEgc3ltYm9sIScpO1xuICAgIGZvciAodmFyIGtleSBpbiBTeW1ib2xSZWdpc3RyeSkgaWYgKFN5bWJvbFJlZ2lzdHJ5W2tleV0gPT09IHN5bSkgcmV0dXJuIGtleTtcbiAgfSxcbiAgdXNlU2V0dGVyOiBmdW5jdGlvbiAoKSB7IHNldHRlciA9IHRydWU7IH0sXG4gIHVzZVNpbXBsZTogZnVuY3Rpb24gKCkgeyBzZXR0ZXIgPSBmYWxzZTsgfVxufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdPYmplY3QnLCB7XG4gIC8vIDE5LjEuMi4yIE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiAgY3JlYXRlOiAkY3JlYXRlLFxuICAvLyAxOS4xLjIuNCBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcbiAgZGVmaW5lUHJvcGVydHk6ICRkZWZpbmVQcm9wZXJ0eSxcbiAgLy8gMTkuMS4yLjMgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcbiAgZGVmaW5lUHJvcGVydGllczogJGRlZmluZVByb3BlcnRpZXMsXG4gIC8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUClcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLFxuICAvLyAxOS4xLjIuNyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxuICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiAkZ2V0T3duUHJvcGVydHlOYW1lcyxcbiAgLy8gMTkuMS4yLjggT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhPKVxuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHNcbn0pO1xuXG4vLyBDaHJvbWUgMzggYW5kIDM5IGBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzYCBmYWlscyBvbiBwcmltaXRpdmVzXG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zNDQzXG52YXIgRkFJTFNfT05fUFJJTUlUSVZFUyA9ICRmYWlscyhmdW5jdGlvbiAoKSB7ICRHT1BTLmYoMSk7IH0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIEZBSUxTX09OX1BSSU1JVElWRVMsICdPYmplY3QnLCB7XG4gIGdldE93blByb3BlcnR5U3ltYm9sczogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSB7XG4gICAgcmV0dXJuICRHT1BTLmYodG9PYmplY3QoaXQpKTtcbiAgfVxufSk7XG5cbi8vIDI0LjMuMiBKU09OLnN0cmluZ2lmeSh2YWx1ZSBbLCByZXBsYWNlciBbLCBzcGFjZV1dKVxuJEpTT04gJiYgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoIVVTRV9OQVRJVkUgfHwgJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIFMgPSAkU3ltYm9sKCk7XG4gIC8vIE1TIEVkZ2UgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIHt9XG4gIC8vIFdlYktpdCBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMgbnVsbFxuICAvLyBWOCB0aHJvd3Mgb24gYm94ZWQgc3ltYm9sc1xuICByZXR1cm4gX3N0cmluZ2lmeShbU10pICE9ICdbbnVsbF0nIHx8IF9zdHJpbmdpZnkoeyBhOiBTIH0pICE9ICd7fScgfHwgX3N0cmluZ2lmeShPYmplY3QoUykpICE9ICd7fSc7XG59KSksICdKU09OJywge1xuICBzdHJpbmdpZnk6IGZ1bmN0aW9uIHN0cmluZ2lmeShpdCkge1xuICAgIHZhciBhcmdzID0gW2l0XTtcbiAgICB2YXIgaSA9IDE7XG4gICAgdmFyIHJlcGxhY2VyLCAkcmVwbGFjZXI7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgICRyZXBsYWNlciA9IHJlcGxhY2VyID0gYXJnc1sxXTtcbiAgICBpZiAoIWlzT2JqZWN0KHJlcGxhY2VyKSAmJiBpdCA9PT0gdW5kZWZpbmVkIHx8IGlzU3ltYm9sKGl0KSkgcmV0dXJuOyAvLyBJRTggcmV0dXJucyBzdHJpbmcgb24gdW5kZWZpbmVkXG4gICAgaWYgKCFpc0FycmF5KHJlcGxhY2VyKSkgcmVwbGFjZXIgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiAkcmVwbGFjZXIgPT0gJ2Z1bmN0aW9uJykgdmFsdWUgPSAkcmVwbGFjZXIuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcbiAgICAgIGlmICghaXNTeW1ib2wodmFsdWUpKSByZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgICBhcmdzWzFdID0gcmVwbGFjZXI7XG4gICAgcmV0dXJuIF9zdHJpbmdpZnkuYXBwbHkoJEpTT04sIGFyZ3MpO1xuICB9XG59KTtcblxuLy8gMTkuNC4zLjQgU3ltYm9sLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXShoaW50KVxuJFN5bWJvbFtQUk9UT1RZUEVdW1RPX1BSSU1JVElWRV0gfHwgcmVxdWlyZSgnLi9faGlkZScpKCRTeW1ib2xbUFJPVE9UWVBFXSwgVE9fUFJJTUlUSVZFLCAkU3ltYm9sW1BST1RPVFlQRV0udmFsdWVPZik7XG4vLyAxOS40LjMuNSBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZygkU3ltYm9sLCAnU3ltYm9sJyk7XG4vLyAyMC4yLjEuOSBNYXRoW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhNYXRoLCAnTWF0aCcsIHRydWUpO1xuLy8gMjQuMy4zIEpTT05bQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKGdsb2JhbC5KU09OLCAnSlNPTicsIHRydWUpO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtcHJvbWlzZS1maW5hbGx5XG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi9fcHJvbWlzZS1yZXNvbHZlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5SLCAnUHJvbWlzZScsIHsgJ2ZpbmFsbHknOiBmdW5jdGlvbiAob25GaW5hbGx5KSB7XG4gIHZhciBDID0gc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsIGNvcmUuUHJvbWlzZSB8fCBnbG9iYWwuUHJvbWlzZSk7XG4gIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIG9uRmluYWxseSA9PSAnZnVuY3Rpb24nO1xuICByZXR1cm4gdGhpcy50aGVuKFxuICAgIGlzRnVuY3Rpb24gPyBmdW5jdGlvbiAoeCkge1xuICAgICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKEMsIG9uRmluYWxseSgpKS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHg7IH0pO1xuICAgIH0gOiBvbkZpbmFsbHksXG4gICAgaXNGdW5jdGlvbiA/IGZ1bmN0aW9uIChlKSB7XG4gICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoQywgb25GaW5hbGx5KCkpLnRoZW4oZnVuY3Rpb24gKCkgeyB0aHJvdyBlOyB9KTtcbiAgICB9IDogb25GaW5hbGx5XG4gICk7XG59IH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtcHJvbWlzZS10cnlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSByZXF1aXJlKCcuL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG52YXIgcGVyZm9ybSA9IHJlcXVpcmUoJy4vX3BlcmZvcm0nKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdQcm9taXNlJywgeyAndHJ5JzogZnVuY3Rpb24gKGNhbGxiYWNrZm4pIHtcbiAgdmFyIHByb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkuZih0aGlzKTtcbiAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oY2FsbGJhY2tmbik7XG4gIChyZXN1bHQuZSA/IHByb21pc2VDYXBhYmlsaXR5LnJlamVjdCA6IHByb21pc2VDYXBhYmlsaXR5LnJlc29sdmUpKHJlc3VsdC52KTtcbiAgcmV0dXJuIHByb21pc2VDYXBhYmlsaXR5LnByb21pc2U7XG59IH0pO1xuIiwicmVxdWlyZSgnLi9fd2tzLWRlZmluZScpKCdhc3luY0l0ZXJhdG9yJyk7XG4iLCJyZXF1aXJlKCcuL193a3MtZGVmaW5lJykoJ29ic2VydmFibGUnKTtcbiIsInJlcXVpcmUoJy4vZXM2LmFycmF5Lml0ZXJhdG9yJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciBUT19TVFJJTkdfVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG5cbnZhciBET01JdGVyYWJsZXMgPSAoJ0NTU1J1bGVMaXN0LENTU1N0eWxlRGVjbGFyYXRpb24sQ1NTVmFsdWVMaXN0LENsaWVudFJlY3RMaXN0LERPTVJlY3RMaXN0LERPTVN0cmluZ0xpc3QsJyArXG4gICdET01Ub2tlbkxpc3QsRGF0YVRyYW5zZmVySXRlbUxpc3QsRmlsZUxpc3QsSFRNTEFsbENvbGxlY3Rpb24sSFRNTENvbGxlY3Rpb24sSFRNTEZvcm1FbGVtZW50LEhUTUxTZWxlY3RFbGVtZW50LCcgK1xuICAnTWVkaWFMaXN0LE1pbWVUeXBlQXJyYXksTmFtZWROb2RlTWFwLE5vZGVMaXN0LFBhaW50UmVxdWVzdExpc3QsUGx1Z2luLFBsdWdpbkFycmF5LFNWR0xlbmd0aExpc3QsU1ZHTnVtYmVyTGlzdCwnICtcbiAgJ1NWR1BhdGhTZWdMaXN0LFNWR1BvaW50TGlzdCxTVkdTdHJpbmdMaXN0LFNWR1RyYW5zZm9ybUxpc3QsU291cmNlQnVmZmVyTGlzdCxTdHlsZVNoZWV0TGlzdCxUZXh0VHJhY2tDdWVMaXN0LCcgK1xuICAnVGV4dFRyYWNrTGlzdCxUb3VjaExpc3QnKS5zcGxpdCgnLCcpO1xuXG5mb3IgKHZhciBpID0gMDsgaSA8IERPTUl0ZXJhYmxlcy5sZW5ndGg7IGkrKykge1xuICB2YXIgTkFNRSA9IERPTUl0ZXJhYmxlc1tpXTtcbiAgdmFyIENvbGxlY3Rpb24gPSBnbG9iYWxbTkFNRV07XG4gIHZhciBwcm90byA9IENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGU7XG4gIGlmIChwcm90byAmJiAhcHJvdG9bVE9fU1RSSU5HX1RBR10pIGhpZGUocHJvdG8sIFRPX1NUUklOR19UQUcsIE5BTUUpO1xuICBJdGVyYXRvcnNbTkFNRV0gPSBJdGVyYXRvcnMuQXJyYXk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbi8vIFRoaXMgbWV0aG9kIG9mIG9idGFpbmluZyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdCBuZWVkcyB0byBiZVxuLy8ga2VwdCBpZGVudGljYWwgdG8gdGhlIHdheSBpdCBpcyBvYnRhaW5lZCBpbiBydW50aW1lLmpzXG52YXIgZyA9IChmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMgfSkoKSB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG5cbi8vIFVzZSBgZ2V0T3duUHJvcGVydHlOYW1lc2AgYmVjYXVzZSBub3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgY2FsbGluZ1xuLy8gYGhhc093blByb3BlcnR5YCBvbiB0aGUgZ2xvYmFsIGBzZWxmYCBvYmplY3QgaW4gYSB3b3JrZXIuIFNlZSAjMTgzLlxudmFyIGhhZFJ1bnRpbWUgPSBnLnJlZ2VuZXJhdG9yUnVudGltZSAmJlxuICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhnKS5pbmRleE9mKFwicmVnZW5lcmF0b3JSdW50aW1lXCIpID49IDA7XG5cbi8vIFNhdmUgdGhlIG9sZCByZWdlbmVyYXRvclJ1bnRpbWUgaW4gY2FzZSBpdCBuZWVkcyB0byBiZSByZXN0b3JlZCBsYXRlci5cbnZhciBvbGRSdW50aW1lID0gaGFkUnVudGltZSAmJiBnLnJlZ2VuZXJhdG9yUnVudGltZTtcblxuLy8gRm9yY2UgcmVldmFsdXRhdGlvbiBvZiBydW50aW1lLmpzLlxuZy5yZWdlbmVyYXRvclJ1bnRpbWUgPSB1bmRlZmluZWQ7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vcnVudGltZVwiKTtcblxuaWYgKGhhZFJ1bnRpbWUpIHtcbiAgLy8gUmVzdG9yZSB0aGUgb3JpZ2luYWwgcnVudGltZS5cbiAgZy5yZWdlbmVyYXRvclJ1bnRpbWUgPSBvbGRSdW50aW1lO1xufSBlbHNlIHtcbiAgLy8gUmVtb3ZlIHRoZSBnbG9iYWwgcHJvcGVydHkgYWRkZWQgYnkgcnVudGltZS5qcy5cbiAgdHJ5IHtcbiAgICBkZWxldGUgZy5yZWdlbmVyYXRvclJ1bnRpbWU7XG4gIH0gY2F0Y2goZSkge1xuICAgIGcucmVnZW5lcmF0b3JSdW50aW1lID0gdW5kZWZpbmVkO1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbiEoZnVuY3Rpb24oZ2xvYmFsKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBPcCA9IE9iamVjdC5wcm90b3R5cGU7XG4gIHZhciBoYXNPd24gPSBPcC5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyIHVuZGVmaW5lZDsgLy8gTW9yZSBjb21wcmVzc2libGUgdGhhbiB2b2lkIDAuXG4gIHZhciAkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiID8gU3ltYm9sIDoge307XG4gIHZhciBpdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuaXRlcmF0b3IgfHwgXCJAQGl0ZXJhdG9yXCI7XG4gIHZhciBhc3luY0l0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5hc3luY0l0ZXJhdG9yIHx8IFwiQEBhc3luY0l0ZXJhdG9yXCI7XG4gIHZhciB0b1N0cmluZ1RhZ1N5bWJvbCA9ICRTeW1ib2wudG9TdHJpbmdUYWcgfHwgXCJAQHRvU3RyaW5nVGFnXCI7XG5cbiAgdmFyIGluTW9kdWxlID0gdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIjtcbiAgdmFyIHJ1bnRpbWUgPSBnbG9iYWwucmVnZW5lcmF0b3JSdW50aW1lO1xuICBpZiAocnVudGltZSkge1xuICAgIGlmIChpbk1vZHVsZSkge1xuICAgICAgLy8gSWYgcmVnZW5lcmF0b3JSdW50aW1lIGlzIGRlZmluZWQgZ2xvYmFsbHkgYW5kIHdlJ3JlIGluIGEgbW9kdWxlLFxuICAgICAgLy8gbWFrZSB0aGUgZXhwb3J0cyBvYmplY3QgaWRlbnRpY2FsIHRvIHJlZ2VuZXJhdG9yUnVudGltZS5cbiAgICAgIG1vZHVsZS5leHBvcnRzID0gcnVudGltZTtcbiAgICB9XG4gICAgLy8gRG9uJ3QgYm90aGVyIGV2YWx1YXRpbmcgdGhlIHJlc3Qgb2YgdGhpcyBmaWxlIGlmIHRoZSBydW50aW1lIHdhc1xuICAgIC8vIGFscmVhZHkgZGVmaW5lZCBnbG9iYWxseS5cbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBEZWZpbmUgdGhlIHJ1bnRpbWUgZ2xvYmFsbHkgKGFzIGV4cGVjdGVkIGJ5IGdlbmVyYXRlZCBjb2RlKSBhcyBlaXRoZXJcbiAgLy8gbW9kdWxlLmV4cG9ydHMgKGlmIHdlJ3JlIGluIGEgbW9kdWxlKSBvciBhIG5ldywgZW1wdHkgb2JqZWN0LlxuICBydW50aW1lID0gZ2xvYmFsLnJlZ2VuZXJhdG9yUnVudGltZSA9IGluTW9kdWxlID8gbW9kdWxlLmV4cG9ydHMgOiB7fTtcblxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCBhbmQgb3V0ZXJGbi5wcm90b3R5cGUgaXMgYSBHZW5lcmF0b3IsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuXG4gICAgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3I7XG4gICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTtcblxuICAgIC8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMuXG4gICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfVxuICBydW50aW1lLndyYXAgPSB3cmFwO1xuXG4gIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvblxuICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcbiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlXG4gIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nXG4gIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlXG4gIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxuICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoXG4gIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS5cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwidGhyb3dcIiwgYXJnOiBlcnIgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XG4gIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG5cbiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xuICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuXG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kXG4gIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxuICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91clxuICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLlxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cblxuICAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0XG4gIC8vIGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgaXQuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuICBJdGVyYXRvclByb3RvdHlwZVtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XG4gIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJlxuICAgICAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmXG4gICAgICBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpKSB7XG4gICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWRcbiAgICAvLyBvZiB0aGUgcG9seWZpbGwuXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9XG4gICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHcC5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZVt0b1N0cmluZ1RhZ1N5bWJvbF0gPVxuICAgIEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuXG4gIC8vIEhlbHBlciBmb3IgZGVmaW5pbmcgdGhlIC5uZXh0LCAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMgb2YgdGhlXG4gIC8vIEl0ZXJhdG9yIGludGVyZmFjZSBpbiB0ZXJtcyBvZiBhIHNpbmdsZSAuX2ludm9rZSBtZXRob2QuXG4gIGZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhwcm90b3R5cGUpIHtcbiAgICBbXCJuZXh0XCIsIFwidGhyb3dcIiwgXCJyZXR1cm5cIl0uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgIHByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZva2UobWV0aG9kLCBhcmcpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIHJ1bnRpbWUuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIHZhciBjdG9yID0gdHlwZW9mIGdlbkZ1biA9PT0gXCJmdW5jdGlvblwiICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gY3RvclxuICAgICAgPyBjdG9yID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fFxuICAgICAgICAvLyBGb3IgdGhlIG5hdGl2ZSBHZW5lcmF0b3JGdW5jdGlvbiBjb25zdHJ1Y3RvciwgdGhlIGJlc3Qgd2UgY2FuXG4gICAgICAgIC8vIGRvIGlzIHRvIGNoZWNrIGl0cyAubmFtZSBwcm9wZXJ0eS5cbiAgICAgICAgKGN0b3IuZGlzcGxheU5hbWUgfHwgY3Rvci5uYW1lKSA9PT0gXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICAgICA6IGZhbHNlO1xuICB9O1xuXG4gIHJ1bnRpbWUubWFyayA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihnZW5GdW4sIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICAgICAgaWYgKCEodG9TdHJpbmdUYWdTeW1ib2wgaW4gZ2VuRnVuKSkge1xuICAgICAgICBnZW5GdW5bdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuICAgICAgfVxuICAgIH1cbiAgICBnZW5GdW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHcCk7XG4gICAgcmV0dXJuIGdlbkZ1bjtcbiAgfTtcblxuICAvLyBXaXRoaW4gdGhlIGJvZHkgb2YgYW55IGFzeW5jIGZ1bmN0aW9uLCBgYXdhaXQgeGAgaXMgdHJhbnNmb3JtZWQgdG9cbiAgLy8gYHlpZWxkIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh4KWAsIHNvIHRoYXQgdGhlIHJ1bnRpbWUgY2FuIHRlc3RcbiAgLy8gYGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIilgIHRvIGRldGVybWluZSBpZiB0aGUgeWllbGRlZCB2YWx1ZSBpc1xuICAvLyBtZWFudCB0byBiZSBhd2FpdGVkLlxuICBydW50aW1lLmF3cmFwID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHsgX19hd2FpdDogYXJnIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGdlbmVyYXRvclttZXRob2RdLCBnZW5lcmF0b3IsIGFyZyk7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICByZWplY3QocmVjb3JkLmFyZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZztcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUuX19hd2FpdCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaW52b2tlKFwibmV4dFwiLCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGludm9rZShcInRocm93XCIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24odW53cmFwcGVkKSB7XG4gICAgICAgICAgLy8gV2hlbiBhIHlpZWxkZWQgUHJvbWlzZSBpcyByZXNvbHZlZCwgaXRzIGZpbmFsIHZhbHVlIGJlY29tZXNcbiAgICAgICAgICAvLyB0aGUgLnZhbHVlIG9mIHRoZSBQcm9taXNlPHt2YWx1ZSxkb25lfT4gcmVzdWx0IGZvciB0aGVcbiAgICAgICAgICAvLyBjdXJyZW50IGl0ZXJhdGlvbi4gSWYgdGhlIFByb21pc2UgaXMgcmVqZWN0ZWQsIGhvd2V2ZXIsIHRoZVxuICAgICAgICAgIC8vIHJlc3VsdCBmb3IgdGhpcyBpdGVyYXRpb24gd2lsbCBiZSByZWplY3RlZCB3aXRoIHRoZSBzYW1lXG4gICAgICAgICAgLy8gcmVhc29uLiBOb3RlIHRoYXQgcmVqZWN0aW9ucyBvZiB5aWVsZGVkIFByb21pc2VzIGFyZSBub3RcbiAgICAgICAgICAvLyB0aHJvd24gYmFjayBpbnRvIHRoZSBnZW5lcmF0b3IgZnVuY3Rpb24sIGFzIGlzIHRoZSBjYXNlXG4gICAgICAgICAgLy8gd2hlbiBhbiBhd2FpdGVkIFByb21pc2UgaXMgcmVqZWN0ZWQuIFRoaXMgZGlmZmVyZW5jZSBpblxuICAgICAgICAgIC8vIGJlaGF2aW9yIGJldHdlZW4geWllbGQgYW5kIGF3YWl0IGlzIGltcG9ydGFudCwgYmVjYXVzZSBpdFxuICAgICAgICAgIC8vIGFsbG93cyB0aGUgY29uc3VtZXIgdG8gZGVjaWRlIHdoYXQgdG8gZG8gd2l0aCB0aGUgeWllbGRlZFxuICAgICAgICAgIC8vIHJlamVjdGlvbiAoc3dhbGxvdyBpdCBhbmQgY29udGludWUsIG1hbnVhbGx5IC50aHJvdyBpdCBiYWNrXG4gICAgICAgICAgLy8gaW50byB0aGUgZ2VuZXJhdG9yLCBhYmFuZG9uIGl0ZXJhdGlvbiwgd2hhdGV2ZXIpLiBXaXRoXG4gICAgICAgICAgLy8gYXdhaXQsIGJ5IGNvbnRyYXN0LCB0aGVyZSBpcyBubyBvcHBvcnR1bml0eSB0byBleGFtaW5lIHRoZVxuICAgICAgICAgIC8vIHJlamVjdGlvbiByZWFzb24gb3V0c2lkZSB0aGUgZ2VuZXJhdG9yIGZ1bmN0aW9uLCBzbyB0aGVcbiAgICAgICAgICAvLyBvbmx5IG9wdGlvbiBpcyB0byB0aHJvdyBpdCBmcm9tIHRoZSBhd2FpdCBleHByZXNzaW9uLCBhbmRcbiAgICAgICAgICAvLyBsZXQgdGhlIGdlbmVyYXRvciBmdW5jdGlvbiBoYW5kbGUgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXN1bHQudmFsdWUgPSB1bndyYXBwZWQ7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwcmV2aW91c1Byb21pc2U7XG5cbiAgICBmdW5jdGlvbiBlbnF1ZXVlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmV2aW91c1Byb21pc2UgPVxuICAgICAgICAvLyBJZiBlbnF1ZXVlIGhhcyBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gd2Ugd2FudCB0byB3YWl0IHVudGlsXG4gICAgICAgIC8vIGFsbCBwcmV2aW91cyBQcm9taXNlcyBoYXZlIGJlZW4gcmVzb2x2ZWQgYmVmb3JlIGNhbGxpbmcgaW52b2tlLFxuICAgICAgICAvLyBzbyB0aGF0IHJlc3VsdHMgYXJlIGFsd2F5cyBkZWxpdmVyZWQgaW4gdGhlIGNvcnJlY3Qgb3JkZXIuIElmXG4gICAgICAgIC8vIGVucXVldWUgaGFzIG5vdCBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gaXQgaXMgaW1wb3J0YW50IHRvXG4gICAgICAgIC8vIGNhbGwgaW52b2tlIGltbWVkaWF0ZWx5LCB3aXRob3V0IHdhaXRpbmcgb24gYSBjYWxsYmFjayB0byBmaXJlLFxuICAgICAgICAvLyBzbyB0aGF0IHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gaGFzIHRoZSBvcHBvcnR1bml0eSB0byBkb1xuICAgICAgICAvLyBhbnkgbmVjZXNzYXJ5IHNldHVwIGluIGEgcHJlZGljdGFibGUgd2F5LiBUaGlzIHByZWRpY3RhYmlsaXR5XG4gICAgICAgIC8vIGlzIHdoeSB0aGUgUHJvbWlzZSBjb25zdHJ1Y3RvciBzeW5jaHJvbm91c2x5IGludm9rZXMgaXRzXG4gICAgICAgIC8vIGV4ZWN1dG9yIGNhbGxiYWNrLCBhbmQgd2h5IGFzeW5jIGZ1bmN0aW9ucyBzeW5jaHJvbm91c2x5XG4gICAgICAgIC8vIGV4ZWN1dGUgY29kZSBiZWZvcmUgdGhlIGZpcnN0IGF3YWl0LiBTaW5jZSB3ZSBpbXBsZW1lbnQgc2ltcGxlXG4gICAgICAgIC8vIGFzeW5jIGZ1bmN0aW9ucyBpbiB0ZXJtcyBvZiBhc3luYyBnZW5lcmF0b3JzLCBpdCBpcyBlc3BlY2lhbGx5XG4gICAgICAgIC8vIGltcG9ydGFudCB0byBnZXQgdGhpcyByaWdodCwgZXZlbiB0aG91Z2ggaXQgcmVxdWlyZXMgY2FyZS5cbiAgICAgICAgcHJldmlvdXNQcm9taXNlID8gcHJldmlvdXNQcm9taXNlLnRoZW4oXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsXG4gICAgICAgICAgLy8gQXZvaWQgcHJvcGFnYXRpbmcgZmFpbHVyZXMgdG8gUHJvbWlzZXMgcmV0dXJuZWQgYnkgbGF0ZXJcbiAgICAgICAgICAvLyBpbnZvY2F0aW9ucyBvZiB0aGUgaXRlcmF0b3IuXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmdcbiAgICAgICAgKSA6IGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCk7XG4gICAgfVxuXG4gICAgLy8gRGVmaW5lIHRoZSB1bmlmaWVkIGhlbHBlciBtZXRob2QgdGhhdCBpcyB1c2VkIHRvIGltcGxlbWVudCAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIChzZWUgZGVmaW5lSXRlcmF0b3JNZXRob2RzKS5cbiAgICB0aGlzLl9pbnZva2UgPSBlbnF1ZXVlO1xuICB9XG5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlKTtcbiAgQXN5bmNJdGVyYXRvci5wcm90b3R5cGVbYXN5bmNJdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIHJ1bnRpbWUuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3I7XG5cbiAgLy8gTm90ZSB0aGF0IHNpbXBsZSBhc3luYyBmdW5jdGlvbnMgYXJlIGltcGxlbWVudGVkIG9uIHRvcCBvZlxuICAvLyBBc3luY0l0ZXJhdG9yIG9iamVjdHM7IHRoZXkganVzdCByZXR1cm4gYSBQcm9taXNlIGZvciB0aGUgdmFsdWUgb2ZcbiAgLy8gdGhlIGZpbmFsIHJlc3VsdCBwcm9kdWNlZCBieSB0aGUgaXRlcmF0b3IuXG4gIHJ1bnRpbWUuYXN5bmMgPSBmdW5jdGlvbihpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIHZhciBpdGVyID0gbmV3IEFzeW5jSXRlcmF0b3IoXG4gICAgICB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KVxuICAgICk7XG5cbiAgICByZXR1cm4gcnVudGltZS5pc0dlbmVyYXRvckZ1bmN0aW9uKG91dGVyRm4pXG4gICAgICA/IGl0ZXIgLy8gSWYgb3V0ZXJGbiBpcyBhIGdlbmVyYXRvciwgcmV0dXJuIHRoZSBmdWxsIGl0ZXJhdG9yLlxuICAgICAgOiBpdGVyLm5leHQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpO1xuICAgICAgICB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIHtcbiAgICB2YXIgc3RhdGUgPSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZykge1xuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUV4ZWN1dGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlQ29tcGxldGVkKSB7XG4gICAgICAgIGlmIChtZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHRocm93IGFyZztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJlIGZvcmdpdmluZywgcGVyIDI1LjMuMy4zLjMgb2YgdGhlIHNwZWM6XG4gICAgICAgIC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1nZW5lcmF0b3JyZXN1bWVcbiAgICAgICAgcmV0dXJuIGRvbmVSZXN1bHQoKTtcbiAgICAgIH1cblxuICAgICAgY29udGV4dC5tZXRob2QgPSBtZXRob2Q7XG4gICAgICBjb250ZXh0LmFyZyA9IGFyZztcblxuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gY29udGV4dC5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlKSB7XG4gICAgICAgICAgdmFyIGRlbGVnYXRlUmVzdWx0ID0gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG4gICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQgPT09IENvbnRpbnVlU2VudGluZWwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlUmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgICAvLyBTZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgICAgIGNvbnRleHQuc2VudCA9IGNvbnRleHQuX3NlbnQgPSBjb250ZXh0LmFyZztcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQpIHtcbiAgICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgICB0aHJvdyBjb250ZXh0LmFyZztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKTtcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInJldHVyblwiKSB7XG4gICAgICAgICAgY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgY29udGV4dC5hcmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUV4ZWN1dGluZztcblxuICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG4gICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIikge1xuICAgICAgICAgIC8vIElmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gZnJvbSBpbm5lckZuLCB3ZSBsZWF2ZSBzdGF0ZSA9PT1cbiAgICAgICAgICAvLyBHZW5TdGF0ZUV4ZWN1dGluZyBhbmQgbG9vcCBiYWNrIGZvciBhbm90aGVyIGludm9jYXRpb24uXG4gICAgICAgICAgc3RhdGUgPSBjb250ZXh0LmRvbmVcbiAgICAgICAgICAgID8gR2VuU3RhdGVDb21wbGV0ZWRcbiAgICAgICAgICAgIDogR2VuU3RhdGVTdXNwZW5kZWRZaWVsZDtcblxuICAgICAgICAgIGlmIChyZWNvcmQuYXJnID09PSBDb250aW51ZVNlbnRpbmVsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHJlY29yZC5hcmcsXG4gICAgICAgICAgICBkb25lOiBjb250ZXh0LmRvbmVcbiAgICAgICAgICB9O1xuXG4gICAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV4Y2VwdGlvbiBieSBsb29waW5nIGJhY2sgYXJvdW5kIHRvIHRoZVxuICAgICAgICAgIC8vIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpIGNhbGwgYWJvdmUuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIENhbGwgZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdKGNvbnRleHQuYXJnKSBhbmQgaGFuZGxlIHRoZVxuICAvLyByZXN1bHQsIGVpdGhlciBieSByZXR1cm5pbmcgYSB7IHZhbHVlLCBkb25lIH0gcmVzdWx0IGZyb20gdGhlXG4gIC8vIGRlbGVnYXRlIGl0ZXJhdG9yLCBvciBieSBtb2RpZnlpbmcgY29udGV4dC5tZXRob2QgYW5kIGNvbnRleHQuYXJnLFxuICAvLyBzZXR0aW5nIGNvbnRleHQuZGVsZWdhdGUgdG8gbnVsbCwgYW5kIHJldHVybmluZyB0aGUgQ29udGludWVTZW50aW5lbC5cbiAgZnVuY3Rpb24gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCkge1xuICAgIHZhciBtZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF07XG4gICAgaWYgKG1ldGhvZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBBIC50aHJvdyBvciAucmV0dXJuIHdoZW4gdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBubyAudGhyb3dcbiAgICAgIC8vIG1ldGhvZCBhbHdheXMgdGVybWluYXRlcyB0aGUgeWllbGQqIGxvb3AuXG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgaWYgKGRlbGVnYXRlLml0ZXJhdG9yLnJldHVybikge1xuICAgICAgICAgIC8vIElmIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgYSByZXR1cm4gbWV0aG9kLCBnaXZlIGl0IGFcbiAgICAgICAgICAvLyBjaGFuY2UgdG8gY2xlYW4gdXAuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuXG4gICAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIC8vIElmIG1heWJlSW52b2tlRGVsZWdhdGUoY29udGV4dCkgY2hhbmdlZCBjb250ZXh0Lm1ldGhvZCBmcm9tXG4gICAgICAgICAgICAvLyBcInJldHVyblwiIHRvIFwidGhyb3dcIiwgbGV0IHRoYXQgb3ZlcnJpZGUgdGhlIFR5cGVFcnJvciBiZWxvdy5cbiAgICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgXCJUaGUgaXRlcmF0b3IgZG9lcyBub3QgcHJvdmlkZSBhICd0aHJvdycgbWV0aG9kXCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2gobWV0aG9kLCBkZWxlZ2F0ZS5pdGVyYXRvciwgY29udGV4dC5hcmcpO1xuXG4gICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgaW5mbyA9IHJlY29yZC5hcmc7XG5cbiAgICBpZiAoISBpbmZvKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcIml0ZXJhdG9yIHJlc3VsdCBpcyBub3QgYW4gb2JqZWN0XCIpO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICBpZiAoaW5mby5kb25lKSB7XG4gICAgICAvLyBBc3NpZ24gdGhlIHJlc3VsdCBvZiB0aGUgZmluaXNoZWQgZGVsZWdhdGUgdG8gdGhlIHRlbXBvcmFyeVxuICAgICAgLy8gdmFyaWFibGUgc3BlY2lmaWVkIGJ5IGRlbGVnYXRlLnJlc3VsdE5hbWUgKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHRbZGVsZWdhdGUucmVzdWx0TmFtZV0gPSBpbmZvLnZhbHVlO1xuXG4gICAgICAvLyBSZXN1bWUgZXhlY3V0aW9uIGF0IHRoZSBkZXNpcmVkIGxvY2F0aW9uIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0Lm5leHQgPSBkZWxlZ2F0ZS5uZXh0TG9jO1xuXG4gICAgICAvLyBJZiBjb250ZXh0Lm1ldGhvZCB3YXMgXCJ0aHJvd1wiIGJ1dCB0aGUgZGVsZWdhdGUgaGFuZGxlZCB0aGVcbiAgICAgIC8vIGV4Y2VwdGlvbiwgbGV0IHRoZSBvdXRlciBnZW5lcmF0b3IgcHJvY2VlZCBub3JtYWxseS4gSWZcbiAgICAgIC8vIGNvbnRleHQubWV0aG9kIHdhcyBcIm5leHRcIiwgZm9yZ2V0IGNvbnRleHQuYXJnIHNpbmNlIGl0IGhhcyBiZWVuXG4gICAgICAvLyBcImNvbnN1bWVkXCIgYnkgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yLiBJZiBjb250ZXh0Lm1ldGhvZCB3YXNcbiAgICAgIC8vIFwicmV0dXJuXCIsIGFsbG93IHRoZSBvcmlnaW5hbCAucmV0dXJuIGNhbGwgdG8gY29udGludWUgaW4gdGhlXG4gICAgICAvLyBvdXRlciBnZW5lcmF0b3IuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgIT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmUteWllbGQgdGhlIHJlc3VsdCByZXR1cm5lZCBieSB0aGUgZGVsZWdhdGUgbWV0aG9kLlxuICAgICAgcmV0dXJuIGluZm87XG4gICAgfVxuXG4gICAgLy8gVGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGlzIGZpbmlzaGVkLCBzbyBmb3JnZXQgaXQgYW5kIGNvbnRpbnVlIHdpdGhcbiAgICAvLyB0aGUgb3V0ZXIgZ2VuZXJhdG9yLlxuICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICB9XG5cbiAgLy8gRGVmaW5lIEdlbmVyYXRvci5wcm90b3R5cGUue25leHQsdGhyb3cscmV0dXJufSBpbiB0ZXJtcyBvZiB0aGVcbiAgLy8gdW5pZmllZCAuX2ludm9rZSBoZWxwZXIgbWV0aG9kLlxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoR3ApO1xuXG4gIEdwW3RvU3RyaW5nVGFnU3ltYm9sXSA9IFwiR2VuZXJhdG9yXCI7XG5cbiAgLy8gQSBHZW5lcmF0b3Igc2hvdWxkIGFsd2F5cyByZXR1cm4gaXRzZWxmIGFzIHRoZSBpdGVyYXRvciBvYmplY3Qgd2hlbiB0aGVcbiAgLy8gQEBpdGVyYXRvciBmdW5jdGlvbiBpcyBjYWxsZWQgb24gaXQuIFNvbWUgYnJvd3NlcnMnIGltcGxlbWVudGF0aW9ucyBvZiB0aGVcbiAgLy8gaXRlcmF0b3IgcHJvdG90eXBlIGNoYWluIGluY29ycmVjdGx5IGltcGxlbWVudCB0aGlzLCBjYXVzaW5nIHRoZSBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0IHRvIG5vdCBiZSByZXR1cm5lZCBmcm9tIHRoaXMgY2FsbC4gVGhpcyBlbnN1cmVzIHRoYXQgZG9lc24ndCBoYXBwZW4uXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvaXNzdWVzLzI3NCBmb3IgbW9yZSBkZXRhaWxzLlxuICBHcFtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBHcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcIltvYmplY3QgR2VuZXJhdG9yXVwiO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHB1c2hUcnlFbnRyeShsb2NzKSB7XG4gICAgdmFyIGVudHJ5ID0geyB0cnlMb2M6IGxvY3NbMF0gfTtcblxuICAgIGlmICgxIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmNhdGNoTG9jID0gbG9jc1sxXTtcbiAgICB9XG5cbiAgICBpZiAoMiBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5maW5hbGx5TG9jID0gbG9jc1syXTtcbiAgICAgIGVudHJ5LmFmdGVyTG9jID0gbG9jc1szXTtcbiAgICB9XG5cbiAgICB0aGlzLnRyeUVudHJpZXMucHVzaChlbnRyeSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldFRyeUVudHJ5KGVudHJ5KSB7XG4gICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb24gfHwge307XG4gICAgcmVjb3JkLnR5cGUgPSBcIm5vcm1hbFwiO1xuICAgIGRlbGV0ZSByZWNvcmQuYXJnO1xuICAgIGVudHJ5LmNvbXBsZXRpb24gPSByZWNvcmQ7XG4gIH1cblxuICBmdW5jdGlvbiBDb250ZXh0KHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gVGhlIHJvb3QgZW50cnkgb2JqZWN0IChlZmZlY3RpdmVseSBhIHRyeSBzdGF0ZW1lbnQgd2l0aG91dCBhIGNhdGNoXG4gICAgLy8gb3IgYSBmaW5hbGx5IGJsb2NrKSBnaXZlcyB1cyBhIHBsYWNlIHRvIHN0b3JlIHZhbHVlcyB0aHJvd24gZnJvbVxuICAgIC8vIGxvY2F0aW9ucyB3aGVyZSB0aGVyZSBpcyBubyBlbmNsb3NpbmcgdHJ5IHN0YXRlbWVudC5cbiAgICB0aGlzLnRyeUVudHJpZXMgPSBbeyB0cnlMb2M6IFwicm9vdFwiIH1dO1xuICAgIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKTtcbiAgICB0aGlzLnJlc2V0KHRydWUpO1xuICB9XG5cbiAgcnVudGltZS5rZXlzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICB9XG4gICAga2V5cy5yZXZlcnNlKCk7XG5cbiAgICAvLyBSYXRoZXIgdGhhbiByZXR1cm5pbmcgYW4gb2JqZWN0IHdpdGggYSBuZXh0IG1ldGhvZCwgd2Uga2VlcFxuICAgIC8vIHRoaW5ncyBzaW1wbGUgYW5kIHJldHVybiB0aGUgbmV4dCBmdW5jdGlvbiBpdHNlbGYuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICB3aGlsZSAoa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXMucG9wKCk7XG4gICAgICAgIGlmIChrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgbmV4dC52YWx1ZSA9IGtleTtcbiAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUbyBhdm9pZCBjcmVhdGluZyBhbiBhZGRpdGlvbmFsIG9iamVjdCwgd2UganVzdCBoYW5nIHRoZSAudmFsdWVcbiAgICAgIC8vIGFuZCAuZG9uZSBwcm9wZXJ0aWVzIG9mZiB0aGUgbmV4dCBmdW5jdGlvbiBvYmplY3QgaXRzZWxmLiBUaGlzXG4gICAgICAvLyBhbHNvIGVuc3VyZXMgdGhhdCB0aGUgbWluaWZpZXIgd2lsbCBub3QgYW5vbnltaXplIHRoZSBmdW5jdGlvbi5cbiAgICAgIG5leHQuZG9uZSA9IHRydWU7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIHZhbHVlcyhpdGVyYWJsZSkge1xuICAgIGlmIChpdGVyYWJsZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gaXRlcmFibGVbaXRlcmF0b3JTeW1ib2xdO1xuICAgICAgaWYgKGl0ZXJhdG9yTWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvck1ldGhvZC5jYWxsKGl0ZXJhYmxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBpdGVyYWJsZS5uZXh0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTmFOKGl0ZXJhYmxlLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIGkgPSAtMSwgbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IGl0ZXJhYmxlLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKGl0ZXJhYmxlLCBpKSkge1xuICAgICAgICAgICAgICBuZXh0LnZhbHVlID0gaXRlcmFibGVbaV07XG4gICAgICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuZXh0LnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG5leHQuZG9uZSA9IHRydWU7XG5cbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbmV4dC5uZXh0ID0gbmV4dDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYW4gaXRlcmF0b3Igd2l0aCBubyB2YWx1ZXMuXG4gICAgcmV0dXJuIHsgbmV4dDogZG9uZVJlc3VsdCB9O1xuICB9XG4gIHJ1bnRpbWUudmFsdWVzID0gdmFsdWVzO1xuXG4gIGZ1bmN0aW9uIGRvbmVSZXN1bHQoKSB7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG5cbiAgQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IENvbnRleHQsXG5cbiAgICByZXNldDogZnVuY3Rpb24oc2tpcFRlbXBSZXNldCkge1xuICAgICAgdGhpcy5wcmV2ID0gMDtcbiAgICAgIHRoaXMubmV4dCA9IDA7XG4gICAgICAvLyBSZXNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpO1xuXG4gICAgICBpZiAoIXNraXBUZW1wUmVzZXQpIHtcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7XG4gICAgICAgICAgLy8gTm90IHN1cmUgYWJvdXQgdGhlIG9wdGltYWwgb3JkZXIgb2YgdGhlc2UgY29uZGl0aW9uczpcbiAgICAgICAgICBpZiAobmFtZS5jaGFyQXQoMCkgPT09IFwidFwiICYmXG4gICAgICAgICAgICAgIGhhc093bi5jYWxsKHRoaXMsIG5hbWUpICYmXG4gICAgICAgICAgICAgICFpc05hTigrbmFtZS5zbGljZSgxKSkpIHtcbiAgICAgICAgICAgIHRoaXNbbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcblxuICAgICAgdmFyIHJvb3RFbnRyeSA9IHRoaXMudHJ5RW50cmllc1swXTtcbiAgICAgIHZhciByb290UmVjb3JkID0gcm9vdEVudHJ5LmNvbXBsZXRpb247XG4gICAgICBpZiAocm9vdFJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcm9vdFJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJ2YWw7XG4gICAgfSxcblxuICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbihleGNlcHRpb24pIHtcbiAgICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgICAgdGhyb3cgZXhjZXB0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG4gICAgICBmdW5jdGlvbiBoYW5kbGUobG9jLCBjYXVnaHQpIHtcbiAgICAgICAgcmVjb3JkLnR5cGUgPSBcInRocm93XCI7XG4gICAgICAgIHJlY29yZC5hcmcgPSBleGNlcHRpb247XG4gICAgICAgIGNvbnRleHQubmV4dCA9IGxvYztcblxuICAgICAgICBpZiAoY2F1Z2h0KSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRpc3BhdGNoZWQgZXhjZXB0aW9uIHdhcyBjYXVnaHQgYnkgYSBjYXRjaCBibG9jayxcbiAgICAgICAgICAvLyB0aGVuIGxldCB0aGF0IGNhdGNoIGJsb2NrIGhhbmRsZSB0aGUgZXhjZXB0aW9uIG5vcm1hbGx5LlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gISEgY2F1Z2h0O1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gXCJyb290XCIpIHtcbiAgICAgICAgICAvLyBFeGNlcHRpb24gdGhyb3duIG91dHNpZGUgb2YgYW55IHRyeSBibG9jayB0aGF0IGNvdWxkIGhhbmRsZVxuICAgICAgICAgIC8vIGl0LCBzbyBzZXQgdGhlIGNvbXBsZXRpb24gdmFsdWUgb2YgdGhlIGVudGlyZSBmdW5jdGlvbiB0b1xuICAgICAgICAgIC8vIHRocm93IHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmV0dXJuIGhhbmRsZShcImVuZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7XG4gICAgICAgICAgdmFyIGhhc0NhdGNoID0gaGFzT3duLmNhbGwoZW50cnksIFwiY2F0Y2hMb2NcIik7XG4gICAgICAgICAgdmFyIGhhc0ZpbmFsbHkgPSBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpO1xuXG4gICAgICAgICAgaWYgKGhhc0NhdGNoICYmIGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNDYXRjaCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBhYnJ1cHQ6IGZ1bmN0aW9uKHR5cGUsIGFyZykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2ICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpICYmXG4gICAgICAgICAgICB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgdmFyIGZpbmFsbHlFbnRyeSA9IGVudHJ5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkgJiZcbiAgICAgICAgICAodHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgIHR5cGUgPT09IFwiY29udGludWVcIikgJiZcbiAgICAgICAgICBmaW5hbGx5RW50cnkudHJ5TG9jIDw9IGFyZyAmJlxuICAgICAgICAgIGFyZyA8PSBmaW5hbGx5RW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAvLyBJZ25vcmUgdGhlIGZpbmFsbHkgZW50cnkgaWYgY29udHJvbCBpcyBub3QganVtcGluZyB0byBhXG4gICAgICAgIC8vIGxvY2F0aW9uIG91dHNpZGUgdGhlIHRyeS9jYXRjaCBibG9jay5cbiAgICAgICAgZmluYWxseUVudHJ5ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlY29yZCA9IGZpbmFsbHlFbnRyeSA/IGZpbmFsbHlFbnRyeS5jb21wbGV0aW9uIDoge307XG4gICAgICByZWNvcmQudHlwZSA9IHR5cGU7XG4gICAgICByZWNvcmQuYXJnID0gYXJnO1xuXG4gICAgICBpZiAoZmluYWxseUVudHJ5KSB7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIHRoaXMubmV4dCA9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jO1xuICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuY29tcGxldGUocmVjb3JkKTtcbiAgICB9LFxuXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uKHJlY29yZCwgYWZ0ZXJMb2MpIHtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgcmVjb3JkLnR5cGUgPT09IFwiY29udGludWVcIikge1xuICAgICAgICB0aGlzLm5leHQgPSByZWNvcmQuYXJnO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICB0aGlzLnJ2YWwgPSB0aGlzLmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gXCJlbmRcIjtcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIgJiYgYWZ0ZXJMb2MpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gYWZ0ZXJMb2M7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH0sXG5cbiAgICBmaW5pc2g6IGZ1bmN0aW9uKGZpbmFsbHlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkuZmluYWxseUxvYyA9PT0gZmluYWxseUxvYykge1xuICAgICAgICAgIHRoaXMuY29tcGxldGUoZW50cnkuY29tcGxldGlvbiwgZW50cnkuYWZ0ZXJMb2MpO1xuICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIFwiY2F0Y2hcIjogZnVuY3Rpb24odHJ5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gdHJ5TG9jKSB7XG4gICAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG4gICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIHZhciB0aHJvd24gPSByZWNvcmQuYXJnO1xuICAgICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aHJvd247XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGNvbnRleHQuY2F0Y2ggbWV0aG9kIG11c3Qgb25seSBiZSBjYWxsZWQgd2l0aCBhIGxvY2F0aW9uXG4gICAgICAvLyBhcmd1bWVudCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEga25vd24gY2F0Y2ggYmxvY2suXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHRcIik7XG4gICAgfSxcblxuICAgIGRlbGVnYXRlWWllbGQ6IGZ1bmN0aW9uKGl0ZXJhYmxlLCByZXN1bHROYW1lLCBuZXh0TG9jKSB7XG4gICAgICB0aGlzLmRlbGVnYXRlID0ge1xuICAgICAgICBpdGVyYXRvcjogdmFsdWVzKGl0ZXJhYmxlKSxcbiAgICAgICAgcmVzdWx0TmFtZTogcmVzdWx0TmFtZSxcbiAgICAgICAgbmV4dExvYzogbmV4dExvY1xuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAvLyBEZWxpYmVyYXRlbHkgZm9yZ2V0IHRoZSBsYXN0IHNlbnQgdmFsdWUgc28gdGhhdCB3ZSBkb24ndFxuICAgICAgICAvLyBhY2NpZGVudGFsbHkgcGFzcyBpdCBvbiB0byB0aGUgZGVsZWdhdGUuXG4gICAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG4gIH07XG59KShcbiAgLy8gSW4gc2xvcHB5IG1vZGUsIHVuYm91bmQgYHRoaXNgIHJlZmVycyB0byB0aGUgZ2xvYmFsIG9iamVjdCwgZmFsbGJhY2sgdG9cbiAgLy8gRnVuY3Rpb24gY29uc3RydWN0b3IgaWYgd2UncmUgaW4gZ2xvYmFsIHN0cmljdCBtb2RlLiBUaGF0IGlzIHNhZGx5IGEgZm9ybVxuICAvLyBvZiBpbmRpcmVjdCBldmFsIHdoaWNoIHZpb2xhdGVzIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5LlxuICAoZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzIH0pKCkgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpXG4pO1xuIiwiLypcbiAqICBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIFdlYlJUQyBwcm9qZWN0IGF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlIGxpY2Vuc2VcbiAqICB0aGF0IGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IG9mIHRoZSBzb3VyY2VcbiAqICB0cmVlLlxuICovXG4gLyogZXNsaW50LWVudiBub2RlICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBTRFBVdGlscyA9IHJlcXVpcmUoJ3NkcCcpO1xuXG5mdW5jdGlvbiBmaXhTdGF0c1R5cGUoc3RhdCkge1xuICByZXR1cm4ge1xuICAgIGluYm91bmRydHA6ICdpbmJvdW5kLXJ0cCcsXG4gICAgb3V0Ym91bmRydHA6ICdvdXRib3VuZC1ydHAnLFxuICAgIGNhbmRpZGF0ZXBhaXI6ICdjYW5kaWRhdGUtcGFpcicsXG4gICAgbG9jYWxjYW5kaWRhdGU6ICdsb2NhbC1jYW5kaWRhdGUnLFxuICAgIHJlbW90ZWNhbmRpZGF0ZTogJ3JlbW90ZS1jYW5kaWRhdGUnXG4gIH1bc3RhdC50eXBlXSB8fCBzdGF0LnR5cGU7XG59XG5cbmZ1bmN0aW9uIHdyaXRlTWVkaWFTZWN0aW9uKHRyYW5zY2VpdmVyLCBjYXBzLCB0eXBlLCBzdHJlYW0sIGR0bHNSb2xlKSB7XG4gIHZhciBzZHAgPSBTRFBVdGlscy53cml0ZVJ0cERlc2NyaXB0aW9uKHRyYW5zY2VpdmVyLmtpbmQsIGNhcHMpO1xuXG4gIC8vIE1hcCBJQ0UgcGFyYW1ldGVycyAodWZyYWcsIHB3ZCkgdG8gU0RQLlxuICBzZHAgKz0gU0RQVXRpbHMud3JpdGVJY2VQYXJhbWV0ZXJzKFxuICAgICAgdHJhbnNjZWl2ZXIuaWNlR2F0aGVyZXIuZ2V0TG9jYWxQYXJhbWV0ZXJzKCkpO1xuXG4gIC8vIE1hcCBEVExTIHBhcmFtZXRlcnMgdG8gU0RQLlxuICBzZHAgKz0gU0RQVXRpbHMud3JpdGVEdGxzUGFyYW1ldGVycyhcbiAgICAgIHRyYW5zY2VpdmVyLmR0bHNUcmFuc3BvcnQuZ2V0TG9jYWxQYXJhbWV0ZXJzKCksXG4gICAgICB0eXBlID09PSAnb2ZmZXInID8gJ2FjdHBhc3MnIDogZHRsc1JvbGUgfHwgJ2FjdGl2ZScpO1xuXG4gIHNkcCArPSAnYT1taWQ6JyArIHRyYW5zY2VpdmVyLm1pZCArICdcXHJcXG4nO1xuXG4gIGlmICh0cmFuc2NlaXZlci5ydHBTZW5kZXIgJiYgdHJhbnNjZWl2ZXIucnRwUmVjZWl2ZXIpIHtcbiAgICBzZHAgKz0gJ2E9c2VuZHJlY3ZcXHJcXG4nO1xuICB9IGVsc2UgaWYgKHRyYW5zY2VpdmVyLnJ0cFNlbmRlcikge1xuICAgIHNkcCArPSAnYT1zZW5kb25seVxcclxcbic7XG4gIH0gZWxzZSBpZiAodHJhbnNjZWl2ZXIucnRwUmVjZWl2ZXIpIHtcbiAgICBzZHAgKz0gJ2E9cmVjdm9ubHlcXHJcXG4nO1xuICB9IGVsc2Uge1xuICAgIHNkcCArPSAnYT1pbmFjdGl2ZVxcclxcbic7XG4gIH1cblxuICBpZiAodHJhbnNjZWl2ZXIucnRwU2VuZGVyKSB7XG4gICAgdmFyIHRyYWNrSWQgPSB0cmFuc2NlaXZlci5ydHBTZW5kZXIuX2luaXRpYWxUcmFja0lkIHx8XG4gICAgICAgIHRyYW5zY2VpdmVyLnJ0cFNlbmRlci50cmFjay5pZDtcbiAgICB0cmFuc2NlaXZlci5ydHBTZW5kZXIuX2luaXRpYWxUcmFja0lkID0gdHJhY2tJZDtcbiAgICAvLyBzcGVjLlxuICAgIHZhciBtc2lkID0gJ21zaWQ6JyArIChzdHJlYW0gPyBzdHJlYW0uaWQgOiAnLScpICsgJyAnICtcbiAgICAgICAgdHJhY2tJZCArICdcXHJcXG4nO1xuICAgIHNkcCArPSAnYT0nICsgbXNpZDtcbiAgICAvLyBmb3IgQ2hyb21lLiBMZWdhY3kgc2hvdWxkIG5vIGxvbmdlciBiZSByZXF1aXJlZC5cbiAgICBzZHAgKz0gJ2E9c3NyYzonICsgdHJhbnNjZWl2ZXIuc2VuZEVuY29kaW5nUGFyYW1ldGVyc1swXS5zc3JjICtcbiAgICAgICAgJyAnICsgbXNpZDtcblxuICAgIC8vIFJUWFxuICAgIGlmICh0cmFuc2NlaXZlci5zZW5kRW5jb2RpbmdQYXJhbWV0ZXJzWzBdLnJ0eCkge1xuICAgICAgc2RwICs9ICdhPXNzcmM6JyArIHRyYW5zY2VpdmVyLnNlbmRFbmNvZGluZ1BhcmFtZXRlcnNbMF0ucnR4LnNzcmMgK1xuICAgICAgICAgICcgJyArIG1zaWQ7XG4gICAgICBzZHAgKz0gJ2E9c3NyYy1ncm91cDpGSUQgJyArXG4gICAgICAgICAgdHJhbnNjZWl2ZXIuc2VuZEVuY29kaW5nUGFyYW1ldGVyc1swXS5zc3JjICsgJyAnICtcbiAgICAgICAgICB0cmFuc2NlaXZlci5zZW5kRW5jb2RpbmdQYXJhbWV0ZXJzWzBdLnJ0eC5zc3JjICtcbiAgICAgICAgICAnXFxyXFxuJztcbiAgICB9XG4gIH1cbiAgLy8gRklYTUU6IHRoaXMgc2hvdWxkIGJlIHdyaXR0ZW4gYnkgd3JpdGVSdHBEZXNjcmlwdGlvbi5cbiAgc2RwICs9ICdhPXNzcmM6JyArIHRyYW5zY2VpdmVyLnNlbmRFbmNvZGluZ1BhcmFtZXRlcnNbMF0uc3NyYyArXG4gICAgICAnIGNuYW1lOicgKyBTRFBVdGlscy5sb2NhbENOYW1lICsgJ1xcclxcbic7XG4gIGlmICh0cmFuc2NlaXZlci5ydHBTZW5kZXIgJiYgdHJhbnNjZWl2ZXIuc2VuZEVuY29kaW5nUGFyYW1ldGVyc1swXS5ydHgpIHtcbiAgICBzZHAgKz0gJ2E9c3NyYzonICsgdHJhbnNjZWl2ZXIuc2VuZEVuY29kaW5nUGFyYW1ldGVyc1swXS5ydHguc3NyYyArXG4gICAgICAgICcgY25hbWU6JyArIFNEUFV0aWxzLmxvY2FsQ05hbWUgKyAnXFxyXFxuJztcbiAgfVxuICByZXR1cm4gc2RwO1xufVxuXG4vLyBFZGdlIGRvZXMgbm90IGxpa2Vcbi8vIDEpIHN0dW46IGZpbHRlcmVkIGFmdGVyIDE0MzkzIHVubGVzcyA/dHJhbnNwb3J0PXVkcCBpcyBwcmVzZW50XG4vLyAyKSB0dXJuOiB0aGF0IGRvZXMgbm90IGhhdmUgYWxsIG9mIHR1cm46aG9zdDpwb3J0P3RyYW5zcG9ydD11ZHBcbi8vIDMpIHR1cm46IHdpdGggaXB2NiBhZGRyZXNzZXNcbi8vIDQpIHR1cm46IG9jY3VycmluZyBtdWxpcGxlIHRpbWVzXG5mdW5jdGlvbiBmaWx0ZXJJY2VTZXJ2ZXJzKGljZVNlcnZlcnMsIGVkZ2VWZXJzaW9uKSB7XG4gIHZhciBoYXNUdXJuID0gZmFsc2U7XG4gIGljZVNlcnZlcnMgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGljZVNlcnZlcnMpKTtcbiAgcmV0dXJuIGljZVNlcnZlcnMuZmlsdGVyKGZ1bmN0aW9uKHNlcnZlcikge1xuICAgIGlmIChzZXJ2ZXIgJiYgKHNlcnZlci51cmxzIHx8IHNlcnZlci51cmwpKSB7XG4gICAgICB2YXIgdXJscyA9IHNlcnZlci51cmxzIHx8IHNlcnZlci51cmw7XG4gICAgICBpZiAoc2VydmVyLnVybCAmJiAhc2VydmVyLnVybHMpIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdSVENJY2VTZXJ2ZXIudXJsIGlzIGRlcHJlY2F0ZWQhIFVzZSB1cmxzIGluc3RlYWQuJyk7XG4gICAgICB9XG4gICAgICB2YXIgaXNTdHJpbmcgPSB0eXBlb2YgdXJscyA9PT0gJ3N0cmluZyc7XG4gICAgICBpZiAoaXNTdHJpbmcpIHtcbiAgICAgICAgdXJscyA9IFt1cmxzXTtcbiAgICAgIH1cbiAgICAgIHVybHMgPSB1cmxzLmZpbHRlcihmdW5jdGlvbih1cmwpIHtcbiAgICAgICAgdmFyIHZhbGlkVHVybiA9IHVybC5pbmRleE9mKCd0dXJuOicpID09PSAwICYmXG4gICAgICAgICAgICB1cmwuaW5kZXhPZigndHJhbnNwb3J0PXVkcCcpICE9PSAtMSAmJlxuICAgICAgICAgICAgdXJsLmluZGV4T2YoJ3R1cm46WycpID09PSAtMSAmJlxuICAgICAgICAgICAgIWhhc1R1cm47XG5cbiAgICAgICAgaWYgKHZhbGlkVHVybikge1xuICAgICAgICAgIGhhc1R1cm4gPSB0cnVlO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1cmwuaW5kZXhPZignc3R1bjonKSA9PT0gMCAmJiBlZGdlVmVyc2lvbiA+PSAxNDM5MyAmJlxuICAgICAgICAgICAgdXJsLmluZGV4T2YoJz90cmFuc3BvcnQ9dWRwJykgPT09IC0xO1xuICAgICAgfSk7XG5cbiAgICAgIGRlbGV0ZSBzZXJ2ZXIudXJsO1xuICAgICAgc2VydmVyLnVybHMgPSBpc1N0cmluZyA/IHVybHNbMF0gOiB1cmxzO1xuICAgICAgcmV0dXJuICEhdXJscy5sZW5ndGg7XG4gICAgfVxuICB9KTtcbn1cblxuLy8gRGV0ZXJtaW5lcyB0aGUgaW50ZXJzZWN0aW9uIG9mIGxvY2FsIGFuZCByZW1vdGUgY2FwYWJpbGl0aWVzLlxuZnVuY3Rpb24gZ2V0Q29tbW9uQ2FwYWJpbGl0aWVzKGxvY2FsQ2FwYWJpbGl0aWVzLCByZW1vdGVDYXBhYmlsaXRpZXMpIHtcbiAgdmFyIGNvbW1vbkNhcGFiaWxpdGllcyA9IHtcbiAgICBjb2RlY3M6IFtdLFxuICAgIGhlYWRlckV4dGVuc2lvbnM6IFtdLFxuICAgIGZlY01lY2hhbmlzbXM6IFtdXG4gIH07XG5cbiAgdmFyIGZpbmRDb2RlY0J5UGF5bG9hZFR5cGUgPSBmdW5jdGlvbihwdCwgY29kZWNzKSB7XG4gICAgcHQgPSBwYXJzZUludChwdCwgMTApO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29kZWNzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoY29kZWNzW2ldLnBheWxvYWRUeXBlID09PSBwdCB8fFxuICAgICAgICAgIGNvZGVjc1tpXS5wcmVmZXJyZWRQYXlsb2FkVHlwZSA9PT0gcHQpIHtcbiAgICAgICAgcmV0dXJuIGNvZGVjc1tpXTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdmFyIHJ0eENhcGFiaWxpdHlNYXRjaGVzID0gZnVuY3Rpb24obFJ0eCwgclJ0eCwgbENvZGVjcywgckNvZGVjcykge1xuICAgIHZhciBsQ29kZWMgPSBmaW5kQ29kZWNCeVBheWxvYWRUeXBlKGxSdHgucGFyYW1ldGVycy5hcHQsIGxDb2RlY3MpO1xuICAgIHZhciByQ29kZWMgPSBmaW5kQ29kZWNCeVBheWxvYWRUeXBlKHJSdHgucGFyYW1ldGVycy5hcHQsIHJDb2RlY3MpO1xuICAgIHJldHVybiBsQ29kZWMgJiYgckNvZGVjICYmXG4gICAgICAgIGxDb2RlYy5uYW1lLnRvTG93ZXJDYXNlKCkgPT09IHJDb2RlYy5uYW1lLnRvTG93ZXJDYXNlKCk7XG4gIH07XG5cbiAgbG9jYWxDYXBhYmlsaXRpZXMuY29kZWNzLmZvckVhY2goZnVuY3Rpb24obENvZGVjKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZW1vdGVDYXBhYmlsaXRpZXMuY29kZWNzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgckNvZGVjID0gcmVtb3RlQ2FwYWJpbGl0aWVzLmNvZGVjc1tpXTtcbiAgICAgIGlmIChsQ29kZWMubmFtZS50b0xvd2VyQ2FzZSgpID09PSByQ29kZWMubmFtZS50b0xvd2VyQ2FzZSgpICYmXG4gICAgICAgICAgbENvZGVjLmNsb2NrUmF0ZSA9PT0gckNvZGVjLmNsb2NrUmF0ZSkge1xuICAgICAgICBpZiAobENvZGVjLm5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3J0eCcgJiZcbiAgICAgICAgICAgIGxDb2RlYy5wYXJhbWV0ZXJzICYmIHJDb2RlYy5wYXJhbWV0ZXJzLmFwdCkge1xuICAgICAgICAgIC8vIGZvciBSVFggd2UgbmVlZCB0byBmaW5kIHRoZSBsb2NhbCBydHggdGhhdCBoYXMgYSBhcHRcbiAgICAgICAgICAvLyB3aGljaCBwb2ludHMgdG8gdGhlIHNhbWUgbG9jYWwgY29kZWMgYXMgdGhlIHJlbW90ZSBvbmUuXG4gICAgICAgICAgaWYgKCFydHhDYXBhYmlsaXR5TWF0Y2hlcyhsQ29kZWMsIHJDb2RlYyxcbiAgICAgICAgICAgICAgbG9jYWxDYXBhYmlsaXRpZXMuY29kZWNzLCByZW1vdGVDYXBhYmlsaXRpZXMuY29kZWNzKSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJDb2RlYyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkockNvZGVjKSk7IC8vIGRlZXBjb3B5XG4gICAgICAgIC8vIG51bWJlciBvZiBjaGFubmVscyBpcyB0aGUgaGlnaGVzdCBjb21tb24gbnVtYmVyIG9mIGNoYW5uZWxzXG4gICAgICAgIHJDb2RlYy5udW1DaGFubmVscyA9IE1hdGgubWluKGxDb2RlYy5udW1DaGFubmVscyxcbiAgICAgICAgICAgIHJDb2RlYy5udW1DaGFubmVscyk7XG4gICAgICAgIC8vIHB1c2ggckNvZGVjIHNvIHdlIHJlcGx5IHdpdGggb2ZmZXJlciBwYXlsb2FkIHR5cGVcbiAgICAgICAgY29tbW9uQ2FwYWJpbGl0aWVzLmNvZGVjcy5wdXNoKHJDb2RlYyk7XG5cbiAgICAgICAgLy8gZGV0ZXJtaW5lIGNvbW1vbiBmZWVkYmFjayBtZWNoYW5pc21zXG4gICAgICAgIHJDb2RlYy5ydGNwRmVlZGJhY2sgPSByQ29kZWMucnRjcEZlZWRiYWNrLmZpbHRlcihmdW5jdGlvbihmYikge1xuICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbENvZGVjLnJ0Y3BGZWVkYmFjay5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgaWYgKGxDb2RlYy5ydGNwRmVlZGJhY2tbal0udHlwZSA9PT0gZmIudHlwZSAmJlxuICAgICAgICAgICAgICAgIGxDb2RlYy5ydGNwRmVlZGJhY2tbal0ucGFyYW1ldGVyID09PSBmYi5wYXJhbWV0ZXIpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIEZJWE1FOiBhbHNvIG5lZWQgdG8gZGV0ZXJtaW5lIC5wYXJhbWV0ZXJzXG4gICAgICAgIC8vICBzZWUgaHR0cHM6Ly9naXRodWIuY29tL29wZW5wZWVyL29ydGMvaXNzdWVzLzU2OVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIGxvY2FsQ2FwYWJpbGl0aWVzLmhlYWRlckV4dGVuc2lvbnMuZm9yRWFjaChmdW5jdGlvbihsSGVhZGVyRXh0ZW5zaW9uKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZW1vdGVDYXBhYmlsaXRpZXMuaGVhZGVyRXh0ZW5zaW9ucy5sZW5ndGg7XG4gICAgICAgICBpKyspIHtcbiAgICAgIHZhciBySGVhZGVyRXh0ZW5zaW9uID0gcmVtb3RlQ2FwYWJpbGl0aWVzLmhlYWRlckV4dGVuc2lvbnNbaV07XG4gICAgICBpZiAobEhlYWRlckV4dGVuc2lvbi51cmkgPT09IHJIZWFkZXJFeHRlbnNpb24udXJpKSB7XG4gICAgICAgIGNvbW1vbkNhcGFiaWxpdGllcy5oZWFkZXJFeHRlbnNpb25zLnB1c2gockhlYWRlckV4dGVuc2lvbik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgLy8gRklYTUU6IGZlY01lY2hhbmlzbXNcbiAgcmV0dXJuIGNvbW1vbkNhcGFiaWxpdGllcztcbn1cblxuLy8gaXMgYWN0aW9uPXNldExvY2FsRGVzY3JpcHRpb24gd2l0aCB0eXBlIGFsbG93ZWQgaW4gc2lnbmFsaW5nU3RhdGVcbmZ1bmN0aW9uIGlzQWN0aW9uQWxsb3dlZEluU2lnbmFsaW5nU3RhdGUoYWN0aW9uLCB0eXBlLCBzaWduYWxpbmdTdGF0ZSkge1xuICByZXR1cm4ge1xuICAgIG9mZmVyOiB7XG4gICAgICBzZXRMb2NhbERlc2NyaXB0aW9uOiBbJ3N0YWJsZScsICdoYXZlLWxvY2FsLW9mZmVyJ10sXG4gICAgICBzZXRSZW1vdGVEZXNjcmlwdGlvbjogWydzdGFibGUnLCAnaGF2ZS1yZW1vdGUtb2ZmZXInXVxuICAgIH0sXG4gICAgYW5zd2VyOiB7XG4gICAgICBzZXRMb2NhbERlc2NyaXB0aW9uOiBbJ2hhdmUtcmVtb3RlLW9mZmVyJywgJ2hhdmUtbG9jYWwtcHJhbnN3ZXInXSxcbiAgICAgIHNldFJlbW90ZURlc2NyaXB0aW9uOiBbJ2hhdmUtbG9jYWwtb2ZmZXInLCAnaGF2ZS1yZW1vdGUtcHJhbnN3ZXInXVxuICAgIH1cbiAgfVt0eXBlXVthY3Rpb25dLmluZGV4T2Yoc2lnbmFsaW5nU3RhdGUpICE9PSAtMTtcbn1cblxuZnVuY3Rpb24gbWF5YmVBZGRDYW5kaWRhdGUoaWNlVHJhbnNwb3J0LCBjYW5kaWRhdGUpIHtcbiAgLy8gRWRnZSdzIGludGVybmFsIHJlcHJlc2VudGF0aW9uIGFkZHMgc29tZSBmaWVsZHMgdGhlcmVmb3JlXG4gIC8vIG5vdCBhbGwgZmllbGTRlSBhcmUgdGFrZW4gaW50byBhY2NvdW50LlxuICB2YXIgYWxyZWFkeUFkZGVkID0gaWNlVHJhbnNwb3J0LmdldFJlbW90ZUNhbmRpZGF0ZXMoKVxuICAgICAgLmZpbmQoZnVuY3Rpb24ocmVtb3RlQ2FuZGlkYXRlKSB7XG4gICAgICAgIHJldHVybiBjYW5kaWRhdGUuZm91bmRhdGlvbiA9PT0gcmVtb3RlQ2FuZGlkYXRlLmZvdW5kYXRpb24gJiZcbiAgICAgICAgICAgIGNhbmRpZGF0ZS5pcCA9PT0gcmVtb3RlQ2FuZGlkYXRlLmlwICYmXG4gICAgICAgICAgICBjYW5kaWRhdGUucG9ydCA9PT0gcmVtb3RlQ2FuZGlkYXRlLnBvcnQgJiZcbiAgICAgICAgICAgIGNhbmRpZGF0ZS5wcmlvcml0eSA9PT0gcmVtb3RlQ2FuZGlkYXRlLnByaW9yaXR5ICYmXG4gICAgICAgICAgICBjYW5kaWRhdGUucHJvdG9jb2wgPT09IHJlbW90ZUNhbmRpZGF0ZS5wcm90b2NvbCAmJlxuICAgICAgICAgICAgY2FuZGlkYXRlLnR5cGUgPT09IHJlbW90ZUNhbmRpZGF0ZS50eXBlO1xuICAgICAgfSk7XG4gIGlmICghYWxyZWFkeUFkZGVkKSB7XG4gICAgaWNlVHJhbnNwb3J0LmFkZFJlbW90ZUNhbmRpZGF0ZShjYW5kaWRhdGUpO1xuICB9XG4gIHJldHVybiAhYWxyZWFkeUFkZGVkO1xufVxuXG5cbmZ1bmN0aW9uIG1ha2VFcnJvcihuYW1lLCBkZXNjcmlwdGlvbikge1xuICB2YXIgZSA9IG5ldyBFcnJvcihkZXNjcmlwdGlvbik7XG4gIGUubmFtZSA9IG5hbWU7XG4gIC8vIGxlZ2FjeSBlcnJvciBjb2RlcyBmcm9tIGh0dHBzOi8vaGV5Y2FtLmdpdGh1Yi5pby93ZWJpZGwvI2lkbC1ET01FeGNlcHRpb24tZXJyb3ItbmFtZXNcbiAgZS5jb2RlID0ge1xuICAgIE5vdFN1cHBvcnRlZEVycm9yOiA5LFxuICAgIEludmFsaWRTdGF0ZUVycm9yOiAxMSxcbiAgICBJbnZhbGlkQWNjZXNzRXJyb3I6IDE1LFxuICAgIFR5cGVFcnJvcjogdW5kZWZpbmVkLFxuICAgIE9wZXJhdGlvbkVycm9yOiB1bmRlZmluZWRcbiAgfVtuYW1lXTtcbiAgcmV0dXJuIGU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24od2luZG93LCBlZGdlVmVyc2lvbikge1xuICAvLyBodHRwczovL3czYy5naXRodWIuaW8vbWVkaWFjYXB0dXJlLW1haW4vI21lZGlhc3RyZWFtXG4gIC8vIEhlbHBlciBmdW5jdGlvbiB0byBhZGQgdGhlIHRyYWNrIHRvIHRoZSBzdHJlYW0gYW5kXG4gIC8vIGRpc3BhdGNoIHRoZSBldmVudCBvdXJzZWx2ZXMuXG4gIGZ1bmN0aW9uIGFkZFRyYWNrVG9TdHJlYW1BbmRGaXJlRXZlbnQodHJhY2ssIHN0cmVhbSkge1xuICAgIHN0cmVhbS5hZGRUcmFjayh0cmFjayk7XG4gICAgc3RyZWFtLmRpc3BhdGNoRXZlbnQobmV3IHdpbmRvdy5NZWRpYVN0cmVhbVRyYWNrRXZlbnQoJ2FkZHRyYWNrJyxcbiAgICAgICAge3RyYWNrOiB0cmFja30pKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZVRyYWNrRnJvbVN0cmVhbUFuZEZpcmVFdmVudCh0cmFjaywgc3RyZWFtKSB7XG4gICAgc3RyZWFtLnJlbW92ZVRyYWNrKHRyYWNrKTtcbiAgICBzdHJlYW0uZGlzcGF0Y2hFdmVudChuZXcgd2luZG93Lk1lZGlhU3RyZWFtVHJhY2tFdmVudCgncmVtb3ZldHJhY2snLFxuICAgICAgICB7dHJhY2s6IHRyYWNrfSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gZmlyZUFkZFRyYWNrKHBjLCB0cmFjaywgcmVjZWl2ZXIsIHN0cmVhbXMpIHtcbiAgICB2YXIgdHJhY2tFdmVudCA9IG5ldyBFdmVudCgndHJhY2snKTtcbiAgICB0cmFja0V2ZW50LnRyYWNrID0gdHJhY2s7XG4gICAgdHJhY2tFdmVudC5yZWNlaXZlciA9IHJlY2VpdmVyO1xuICAgIHRyYWNrRXZlbnQudHJhbnNjZWl2ZXIgPSB7cmVjZWl2ZXI6IHJlY2VpdmVyfTtcbiAgICB0cmFja0V2ZW50LnN0cmVhbXMgPSBzdHJlYW1zO1xuICAgIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgcGMuX2Rpc3BhdGNoRXZlbnQoJ3RyYWNrJywgdHJhY2tFdmVudCk7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgUlRDUGVlckNvbm5lY3Rpb24gPSBmdW5jdGlvbihjb25maWcpIHtcbiAgICB2YXIgcGMgPSB0aGlzO1xuXG4gICAgdmFyIF9ldmVudFRhcmdldCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgICBbJ2FkZEV2ZW50TGlzdGVuZXInLCAncmVtb3ZlRXZlbnRMaXN0ZW5lcicsICdkaXNwYXRjaEV2ZW50J11cbiAgICAgICAgLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICAgICAgcGNbbWV0aG9kXSA9IF9ldmVudFRhcmdldFttZXRob2RdLmJpbmQoX2V2ZW50VGFyZ2V0KTtcbiAgICAgICAgfSk7XG5cbiAgICB0aGlzLmNhblRyaWNrbGVJY2VDYW5kaWRhdGVzID0gbnVsbDtcblxuICAgIHRoaXMubmVlZE5lZ290aWF0aW9uID0gZmFsc2U7XG5cbiAgICB0aGlzLmxvY2FsU3RyZWFtcyA9IFtdO1xuICAgIHRoaXMucmVtb3RlU3RyZWFtcyA9IFtdO1xuXG4gICAgdGhpcy5fbG9jYWxEZXNjcmlwdGlvbiA9IG51bGw7XG4gICAgdGhpcy5fcmVtb3RlRGVzY3JpcHRpb24gPSBudWxsO1xuXG4gICAgdGhpcy5zaWduYWxpbmdTdGF0ZSA9ICdzdGFibGUnO1xuICAgIHRoaXMuaWNlQ29ubmVjdGlvblN0YXRlID0gJ25ldyc7XG4gICAgdGhpcy5jb25uZWN0aW9uU3RhdGUgPSAnbmV3JztcbiAgICB0aGlzLmljZUdhdGhlcmluZ1N0YXRlID0gJ25ldyc7XG5cbiAgICBjb25maWcgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGNvbmZpZyB8fCB7fSkpO1xuXG4gICAgdGhpcy51c2luZ0J1bmRsZSA9IGNvbmZpZy5idW5kbGVQb2xpY3kgPT09ICdtYXgtYnVuZGxlJztcbiAgICBpZiAoY29uZmlnLnJ0Y3BNdXhQb2xpY3kgPT09ICduZWdvdGlhdGUnKSB7XG4gICAgICB0aHJvdyhtYWtlRXJyb3IoJ05vdFN1cHBvcnRlZEVycm9yJyxcbiAgICAgICAgICAncnRjcE11eFBvbGljeSBcXCduZWdvdGlhdGVcXCcgaXMgbm90IHN1cHBvcnRlZCcpKTtcbiAgICB9IGVsc2UgaWYgKCFjb25maWcucnRjcE11eFBvbGljeSkge1xuICAgICAgY29uZmlnLnJ0Y3BNdXhQb2xpY3kgPSAncmVxdWlyZSc7XG4gICAgfVxuXG4gICAgc3dpdGNoIChjb25maWcuaWNlVHJhbnNwb3J0UG9saWN5KSB7XG4gICAgICBjYXNlICdhbGwnOlxuICAgICAgY2FzZSAncmVsYXknOlxuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGNvbmZpZy5pY2VUcmFuc3BvcnRQb2xpY3kgPSAnYWxsJztcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgc3dpdGNoIChjb25maWcuYnVuZGxlUG9saWN5KSB7XG4gICAgICBjYXNlICdiYWxhbmNlZCc6XG4gICAgICBjYXNlICdtYXgtY29tcGF0JzpcbiAgICAgIGNhc2UgJ21heC1idW5kbGUnOlxuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGNvbmZpZy5idW5kbGVQb2xpY3kgPSAnYmFsYW5jZWQnO1xuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICBjb25maWcuaWNlU2VydmVycyA9IGZpbHRlckljZVNlcnZlcnMoY29uZmlnLmljZVNlcnZlcnMgfHwgW10sIGVkZ2VWZXJzaW9uKTtcblxuICAgIHRoaXMuX2ljZUdhdGhlcmVycyA9IFtdO1xuICAgIGlmIChjb25maWcuaWNlQ2FuZGlkYXRlUG9vbFNpemUpIHtcbiAgICAgIGZvciAodmFyIGkgPSBjb25maWcuaWNlQ2FuZGlkYXRlUG9vbFNpemU7IGkgPiAwOyBpLS0pIHtcbiAgICAgICAgdGhpcy5faWNlR2F0aGVyZXJzLnB1c2gobmV3IHdpbmRvdy5SVENJY2VHYXRoZXJlcih7XG4gICAgICAgICAgaWNlU2VydmVyczogY29uZmlnLmljZVNlcnZlcnMsXG4gICAgICAgICAgZ2F0aGVyUG9saWN5OiBjb25maWcuaWNlVHJhbnNwb3J0UG9saWN5XG4gICAgICAgIH0pKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY29uZmlnLmljZUNhbmRpZGF0ZVBvb2xTaXplID0gMDtcbiAgICB9XG5cbiAgICB0aGlzLl9jb25maWcgPSBjb25maWc7XG5cbiAgICAvLyBwZXItdHJhY2sgaWNlR2F0aGVycywgaWNlVHJhbnNwb3J0cywgZHRsc1RyYW5zcG9ydHMsIHJ0cFNlbmRlcnMsIC4uLlxuICAgIC8vIGV2ZXJ5dGhpbmcgdGhhdCBpcyBuZWVkZWQgdG8gZGVzY3JpYmUgYSBTRFAgbS1saW5lLlxuICAgIHRoaXMudHJhbnNjZWl2ZXJzID0gW107XG5cbiAgICB0aGlzLl9zZHBTZXNzaW9uSWQgPSBTRFBVdGlscy5nZW5lcmF0ZVNlc3Npb25JZCgpO1xuICAgIHRoaXMuX3NkcFNlc3Npb25WZXJzaW9uID0gMDtcblxuICAgIHRoaXMuX2R0bHNSb2xlID0gdW5kZWZpbmVkOyAvLyByb2xlIGZvciBhPXNldHVwIHRvIHVzZSBpbiBhbnN3ZXJzLlxuXG4gICAgdGhpcy5faXNDbG9zZWQgPSBmYWxzZTtcbiAgfTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLCAnbG9jYWxEZXNjcmlwdGlvbicsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9sb2NhbERlc2NyaXB0aW9uO1xuICAgIH1cbiAgfSk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUsICdyZW1vdGVEZXNjcmlwdGlvbicsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9yZW1vdGVEZXNjcmlwdGlvbjtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIHNldCB1cCBldmVudCBoYW5kbGVycyBvbiBwcm90b3R5cGVcbiAgUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLm9uaWNlY2FuZGlkYXRlID0gbnVsbDtcbiAgUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLm9uYWRkc3RyZWFtID0gbnVsbDtcbiAgUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLm9udHJhY2sgPSBudWxsO1xuICBSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUub25yZW1vdmVzdHJlYW0gPSBudWxsO1xuICBSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUub25zaWduYWxpbmdzdGF0ZWNoYW5nZSA9IG51bGw7XG4gIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5vbmljZWNvbm5lY3Rpb25zdGF0ZWNoYW5nZSA9IG51bGw7XG4gIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5vbmNvbm5lY3Rpb25zdGF0ZWNoYW5nZSA9IG51bGw7XG4gIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5vbmljZWdhdGhlcmluZ3N0YXRlY2hhbmdlID0gbnVsbDtcbiAgUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLm9ubmVnb3RpYXRpb25uZWVkZWQgPSBudWxsO1xuICBSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUub25kYXRhY2hhbm5lbCA9IG51bGw7XG5cbiAgUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLl9kaXNwYXRjaEV2ZW50ID0gZnVuY3Rpb24obmFtZSwgZXZlbnQpIHtcbiAgICBpZiAodGhpcy5faXNDbG9zZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICBpZiAodHlwZW9mIHRoaXNbJ29uJyArIG5hbWVdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzWydvbicgKyBuYW1lXShldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5fZW1pdEdhdGhlcmluZ1N0YXRlQ2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGV2ZW50ID0gbmV3IEV2ZW50KCdpY2VnYXRoZXJpbmdzdGF0ZWNoYW5nZScpO1xuICAgIHRoaXMuX2Rpc3BhdGNoRXZlbnQoJ2ljZWdhdGhlcmluZ3N0YXRlY2hhbmdlJywgZXZlbnQpO1xuICB9O1xuXG4gIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5nZXRDb25maWd1cmF0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbmZpZztcbiAgfTtcblxuICBSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0TG9jYWxTdHJlYW1zID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMubG9jYWxTdHJlYW1zO1xuICB9O1xuXG4gIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5nZXRSZW1vdGVTdHJlYW1zID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucmVtb3RlU3RyZWFtcztcbiAgfTtcblxuICAvLyBpbnRlcm5hbCBoZWxwZXIgdG8gY3JlYXRlIGEgdHJhbnNjZWl2ZXIgb2JqZWN0LlxuICAvLyAod2hpY2ggaXMgbm90IHlldCB0aGUgc2FtZSBhcyB0aGUgV2ViUlRDIDEuMCB0cmFuc2NlaXZlcilcbiAgUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLl9jcmVhdGVUcmFuc2NlaXZlciA9IGZ1bmN0aW9uKGtpbmQsIGRvTm90QWRkKSB7XG4gICAgdmFyIGhhc0J1bmRsZVRyYW5zcG9ydCA9IHRoaXMudHJhbnNjZWl2ZXJzLmxlbmd0aCA+IDA7XG4gICAgdmFyIHRyYW5zY2VpdmVyID0ge1xuICAgICAgdHJhY2s6IG51bGwsXG4gICAgICBpY2VHYXRoZXJlcjogbnVsbCxcbiAgICAgIGljZVRyYW5zcG9ydDogbnVsbCxcbiAgICAgIGR0bHNUcmFuc3BvcnQ6IG51bGwsXG4gICAgICBsb2NhbENhcGFiaWxpdGllczogbnVsbCxcbiAgICAgIHJlbW90ZUNhcGFiaWxpdGllczogbnVsbCxcbiAgICAgIHJ0cFNlbmRlcjogbnVsbCxcbiAgICAgIHJ0cFJlY2VpdmVyOiBudWxsLFxuICAgICAga2luZDoga2luZCxcbiAgICAgIG1pZDogbnVsbCxcbiAgICAgIHNlbmRFbmNvZGluZ1BhcmFtZXRlcnM6IG51bGwsXG4gICAgICByZWN2RW5jb2RpbmdQYXJhbWV0ZXJzOiBudWxsLFxuICAgICAgc3RyZWFtOiBudWxsLFxuICAgICAgYXNzb2NpYXRlZFJlbW90ZU1lZGlhU3RyZWFtczogW10sXG4gICAgICB3YW50UmVjZWl2ZTogdHJ1ZVxuICAgIH07XG4gICAgaWYgKHRoaXMudXNpbmdCdW5kbGUgJiYgaGFzQnVuZGxlVHJhbnNwb3J0KSB7XG4gICAgICB0cmFuc2NlaXZlci5pY2VUcmFuc3BvcnQgPSB0aGlzLnRyYW5zY2VpdmVyc1swXS5pY2VUcmFuc3BvcnQ7XG4gICAgICB0cmFuc2NlaXZlci5kdGxzVHJhbnNwb3J0ID0gdGhpcy50cmFuc2NlaXZlcnNbMF0uZHRsc1RyYW5zcG9ydDtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHRyYW5zcG9ydHMgPSB0aGlzLl9jcmVhdGVJY2VBbmREdGxzVHJhbnNwb3J0cygpO1xuICAgICAgdHJhbnNjZWl2ZXIuaWNlVHJhbnNwb3J0ID0gdHJhbnNwb3J0cy5pY2VUcmFuc3BvcnQ7XG4gICAgICB0cmFuc2NlaXZlci5kdGxzVHJhbnNwb3J0ID0gdHJhbnNwb3J0cy5kdGxzVHJhbnNwb3J0O1xuICAgIH1cbiAgICBpZiAoIWRvTm90QWRkKSB7XG4gICAgICB0aGlzLnRyYW5zY2VpdmVycy5wdXNoKHRyYW5zY2VpdmVyKTtcbiAgICB9XG4gICAgcmV0dXJuIHRyYW5zY2VpdmVyO1xuICB9O1xuXG4gIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRUcmFjayA9IGZ1bmN0aW9uKHRyYWNrLCBzdHJlYW0pIHtcbiAgICBpZiAodGhpcy5faXNDbG9zZWQpIHtcbiAgICAgIHRocm93IG1ha2VFcnJvcignSW52YWxpZFN0YXRlRXJyb3InLFxuICAgICAgICAgICdBdHRlbXB0ZWQgdG8gY2FsbCBhZGRUcmFjayBvbiBhIGNsb3NlZCBwZWVyY29ubmVjdGlvbi4nKTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUV4aXN0cyA9IHRoaXMudHJhbnNjZWl2ZXJzLmZpbmQoZnVuY3Rpb24ocykge1xuICAgICAgcmV0dXJuIHMudHJhY2sgPT09IHRyYWNrO1xuICAgIH0pO1xuXG4gICAgaWYgKGFscmVhZHlFeGlzdHMpIHtcbiAgICAgIHRocm93IG1ha2VFcnJvcignSW52YWxpZEFjY2Vzc0Vycm9yJywgJ1RyYWNrIGFscmVhZHkgZXhpc3RzLicpO1xuICAgIH1cblxuICAgIHZhciB0cmFuc2NlaXZlcjtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMudHJhbnNjZWl2ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoIXRoaXMudHJhbnNjZWl2ZXJzW2ldLnRyYWNrICYmXG4gICAgICAgICAgdGhpcy50cmFuc2NlaXZlcnNbaV0ua2luZCA9PT0gdHJhY2sua2luZCkge1xuICAgICAgICB0cmFuc2NlaXZlciA9IHRoaXMudHJhbnNjZWl2ZXJzW2ldO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIXRyYW5zY2VpdmVyKSB7XG4gICAgICB0cmFuc2NlaXZlciA9IHRoaXMuX2NyZWF0ZVRyYW5zY2VpdmVyKHRyYWNrLmtpbmQpO1xuICAgIH1cblxuICAgIHRoaXMuX21heWJlRmlyZU5lZ290aWF0aW9uTmVlZGVkKCk7XG5cbiAgICBpZiAodGhpcy5sb2NhbFN0cmVhbXMuaW5kZXhPZihzdHJlYW0pID09PSAtMSkge1xuICAgICAgdGhpcy5sb2NhbFN0cmVhbXMucHVzaChzdHJlYW0pO1xuICAgIH1cblxuICAgIHRyYW5zY2VpdmVyLnRyYWNrID0gdHJhY2s7XG4gICAgdHJhbnNjZWl2ZXIuc3RyZWFtID0gc3RyZWFtO1xuICAgIHRyYW5zY2VpdmVyLnJ0cFNlbmRlciA9IG5ldyB3aW5kb3cuUlRDUnRwU2VuZGVyKHRyYWNrLFxuICAgICAgICB0cmFuc2NlaXZlci5kdGxzVHJhbnNwb3J0KTtcbiAgICByZXR1cm4gdHJhbnNjZWl2ZXIucnRwU2VuZGVyO1xuICB9O1xuXG4gIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRTdHJlYW0gPSBmdW5jdGlvbihzdHJlYW0pIHtcbiAgICB2YXIgcGMgPSB0aGlzO1xuICAgIGlmIChlZGdlVmVyc2lvbiA+PSAxNTAyNSkge1xuICAgICAgc3RyZWFtLmdldFRyYWNrcygpLmZvckVhY2goZnVuY3Rpb24odHJhY2spIHtcbiAgICAgICAgcGMuYWRkVHJhY2sodHJhY2ssIHN0cmVhbSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ2xvbmUgaXMgbmVjZXNzYXJ5IGZvciBsb2NhbCBkZW1vcyBtb3N0bHksIGF0dGFjaGluZyBkaXJlY3RseVxuICAgICAgLy8gdG8gdHdvIGRpZmZlcmVudCBzZW5kZXJzIGRvZXMgbm90IHdvcmsgKGJ1aWxkIDEwNTQ3KS5cbiAgICAgIC8vIEZpeGVkIGluIDE1MDI1IChvciBlYXJsaWVyKVxuICAgICAgdmFyIGNsb25lZFN0cmVhbSA9IHN0cmVhbS5jbG9uZSgpO1xuICAgICAgc3RyZWFtLmdldFRyYWNrcygpLmZvckVhY2goZnVuY3Rpb24odHJhY2ssIGlkeCkge1xuICAgICAgICB2YXIgY2xvbmVkVHJhY2sgPSBjbG9uZWRTdHJlYW0uZ2V0VHJhY2tzKClbaWR4XTtcbiAgICAgICAgdHJhY2suYWRkRXZlbnRMaXN0ZW5lcignZW5hYmxlZCcsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgY2xvbmVkVHJhY2suZW5hYmxlZCA9IGV2ZW50LmVuYWJsZWQ7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICBjbG9uZWRTdHJlYW0uZ2V0VHJhY2tzKCkuZm9yRWFjaChmdW5jdGlvbih0cmFjaykge1xuICAgICAgICBwYy5hZGRUcmFjayh0cmFjaywgY2xvbmVkU3RyZWFtKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUucmVtb3ZlVHJhY2sgPSBmdW5jdGlvbihzZW5kZXIpIHtcbiAgICBpZiAodGhpcy5faXNDbG9zZWQpIHtcbiAgICAgIHRocm93IG1ha2VFcnJvcignSW52YWxpZFN0YXRlRXJyb3InLFxuICAgICAgICAgICdBdHRlbXB0ZWQgdG8gY2FsbCByZW1vdmVUcmFjayBvbiBhIGNsb3NlZCBwZWVyY29ubmVjdGlvbi4nKTtcbiAgICB9XG5cbiAgICBpZiAoIShzZW5kZXIgaW5zdGFuY2VvZiB3aW5kb3cuUlRDUnRwU2VuZGVyKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgMSBvZiBSVENQZWVyQ29ubmVjdGlvbi5yZW1vdmVUcmFjayAnICtcbiAgICAgICAgICAnZG9lcyBub3QgaW1wbGVtZW50IGludGVyZmFjZSBSVENSdHBTZW5kZXIuJyk7XG4gICAgfVxuXG4gICAgdmFyIHRyYW5zY2VpdmVyID0gdGhpcy50cmFuc2NlaXZlcnMuZmluZChmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gdC5ydHBTZW5kZXIgPT09IHNlbmRlcjtcbiAgICB9KTtcblxuICAgIGlmICghdHJhbnNjZWl2ZXIpIHtcbiAgICAgIHRocm93IG1ha2VFcnJvcignSW52YWxpZEFjY2Vzc0Vycm9yJyxcbiAgICAgICAgICAnU2VuZGVyIHdhcyBub3QgY3JlYXRlZCBieSB0aGlzIGNvbm5lY3Rpb24uJyk7XG4gICAgfVxuICAgIHZhciBzdHJlYW0gPSB0cmFuc2NlaXZlci5zdHJlYW07XG5cbiAgICB0cmFuc2NlaXZlci5ydHBTZW5kZXIuc3RvcCgpO1xuICAgIHRyYW5zY2VpdmVyLnJ0cFNlbmRlciA9IG51bGw7XG4gICAgdHJhbnNjZWl2ZXIudHJhY2sgPSBudWxsO1xuICAgIHRyYW5zY2VpdmVyLnN0cmVhbSA9IG51bGw7XG5cbiAgICAvLyByZW1vdmUgdGhlIHN0cmVhbSBmcm9tIHRoZSBzZXQgb2YgbG9jYWwgc3RyZWFtc1xuICAgIHZhciBsb2NhbFN0cmVhbXMgPSB0aGlzLnRyYW5zY2VpdmVycy5tYXAoZnVuY3Rpb24odCkge1xuICAgICAgcmV0dXJuIHQuc3RyZWFtO1xuICAgIH0pO1xuICAgIGlmIChsb2NhbFN0cmVhbXMuaW5kZXhPZihzdHJlYW0pID09PSAtMSAmJlxuICAgICAgICB0aGlzLmxvY2FsU3RyZWFtcy5pbmRleE9mKHN0cmVhbSkgPiAtMSkge1xuICAgICAgdGhpcy5sb2NhbFN0cmVhbXMuc3BsaWNlKHRoaXMubG9jYWxTdHJlYW1zLmluZGV4T2Yoc3RyZWFtKSwgMSk7XG4gICAgfVxuXG4gICAgdGhpcy5fbWF5YmVGaXJlTmVnb3RpYXRpb25OZWVkZWQoKTtcbiAgfTtcblxuICBSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUucmVtb3ZlU3RyZWFtID0gZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgdmFyIHBjID0gdGhpcztcbiAgICBzdHJlYW0uZ2V0VHJhY2tzKCkuZm9yRWFjaChmdW5jdGlvbih0cmFjaykge1xuICAgICAgdmFyIHNlbmRlciA9IHBjLmdldFNlbmRlcnMoKS5maW5kKGZ1bmN0aW9uKHMpIHtcbiAgICAgICAgcmV0dXJuIHMudHJhY2sgPT09IHRyYWNrO1xuICAgICAgfSk7XG4gICAgICBpZiAoc2VuZGVyKSB7XG4gICAgICAgIHBjLnJlbW92ZVRyYWNrKHNlbmRlcik7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmdldFNlbmRlcnMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy50cmFuc2NlaXZlcnMuZmlsdGVyKGZ1bmN0aW9uKHRyYW5zY2VpdmVyKSB7XG4gICAgICByZXR1cm4gISF0cmFuc2NlaXZlci5ydHBTZW5kZXI7XG4gICAgfSlcbiAgICAubWFwKGZ1bmN0aW9uKHRyYW5zY2VpdmVyKSB7XG4gICAgICByZXR1cm4gdHJhbnNjZWl2ZXIucnRwU2VuZGVyO1xuICAgIH0pO1xuICB9O1xuXG4gIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5nZXRSZWNlaXZlcnMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy50cmFuc2NlaXZlcnMuZmlsdGVyKGZ1bmN0aW9uKHRyYW5zY2VpdmVyKSB7XG4gICAgICByZXR1cm4gISF0cmFuc2NlaXZlci5ydHBSZWNlaXZlcjtcbiAgICB9KVxuICAgIC5tYXAoZnVuY3Rpb24odHJhbnNjZWl2ZXIpIHtcbiAgICAgIHJldHVybiB0cmFuc2NlaXZlci5ydHBSZWNlaXZlcjtcbiAgICB9KTtcbiAgfTtcblxuXG4gIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5fY3JlYXRlSWNlR2F0aGVyZXIgPSBmdW5jdGlvbihzZHBNTGluZUluZGV4LFxuICAgICAgdXNpbmdCdW5kbGUpIHtcbiAgICB2YXIgcGMgPSB0aGlzO1xuICAgIGlmICh1c2luZ0J1bmRsZSAmJiBzZHBNTGluZUluZGV4ID4gMCkge1xuICAgICAgcmV0dXJuIHRoaXMudHJhbnNjZWl2ZXJzWzBdLmljZUdhdGhlcmVyO1xuICAgIH0gZWxzZSBpZiAodGhpcy5faWNlR2F0aGVyZXJzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2ljZUdhdGhlcmVycy5zaGlmdCgpO1xuICAgIH1cbiAgICB2YXIgaWNlR2F0aGVyZXIgPSBuZXcgd2luZG93LlJUQ0ljZUdhdGhlcmVyKHtcbiAgICAgIGljZVNlcnZlcnM6IHRoaXMuX2NvbmZpZy5pY2VTZXJ2ZXJzLFxuICAgICAgZ2F0aGVyUG9saWN5OiB0aGlzLl9jb25maWcuaWNlVHJhbnNwb3J0UG9saWN5XG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGljZUdhdGhlcmVyLCAnc3RhdGUnLFxuICAgICAgICB7dmFsdWU6ICduZXcnLCB3cml0YWJsZTogdHJ1ZX1cbiAgICApO1xuXG4gICAgdGhpcy50cmFuc2NlaXZlcnNbc2RwTUxpbmVJbmRleF0uYnVmZmVyZWRDYW5kaWRhdGVFdmVudHMgPSBbXTtcbiAgICB0aGlzLnRyYW5zY2VpdmVyc1tzZHBNTGluZUluZGV4XS5idWZmZXJDYW5kaWRhdGVzID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIHZhciBlbmQgPSAhZXZlbnQuY2FuZGlkYXRlIHx8IE9iamVjdC5rZXlzKGV2ZW50LmNhbmRpZGF0ZSkubGVuZ3RoID09PSAwO1xuICAgICAgLy8gcG9seWZpbGwgc2luY2UgUlRDSWNlR2F0aGVyZXIuc3RhdGUgaXMgbm90IGltcGxlbWVudGVkIGluXG4gICAgICAvLyBFZGdlIDEwNTQ3IHlldC5cbiAgICAgIGljZUdhdGhlcmVyLnN0YXRlID0gZW5kID8gJ2NvbXBsZXRlZCcgOiAnZ2F0aGVyaW5nJztcbiAgICAgIGlmIChwYy50cmFuc2NlaXZlcnNbc2RwTUxpbmVJbmRleF0uYnVmZmVyZWRDYW5kaWRhdGVFdmVudHMgIT09IG51bGwpIHtcbiAgICAgICAgcGMudHJhbnNjZWl2ZXJzW3NkcE1MaW5lSW5kZXhdLmJ1ZmZlcmVkQ2FuZGlkYXRlRXZlbnRzLnB1c2goZXZlbnQpO1xuICAgICAgfVxuICAgIH07XG4gICAgaWNlR2F0aGVyZXIuYWRkRXZlbnRMaXN0ZW5lcignbG9jYWxjYW5kaWRhdGUnLFxuICAgICAgdGhpcy50cmFuc2NlaXZlcnNbc2RwTUxpbmVJbmRleF0uYnVmZmVyQ2FuZGlkYXRlcyk7XG4gICAgcmV0dXJuIGljZUdhdGhlcmVyO1xuICB9O1xuXG4gIC8vIHN0YXJ0IGdhdGhlcmluZyBmcm9tIGFuIFJUQ0ljZUdhdGhlcmVyLlxuICBSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuX2dhdGhlciA9IGZ1bmN0aW9uKG1pZCwgc2RwTUxpbmVJbmRleCkge1xuICAgIHZhciBwYyA9IHRoaXM7XG4gICAgdmFyIGljZUdhdGhlcmVyID0gdGhpcy50cmFuc2NlaXZlcnNbc2RwTUxpbmVJbmRleF0uaWNlR2F0aGVyZXI7XG4gICAgaWYgKGljZUdhdGhlcmVyLm9ubG9jYWxjYW5kaWRhdGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGJ1ZmZlcmVkQ2FuZGlkYXRlRXZlbnRzID1cbiAgICAgIHRoaXMudHJhbnNjZWl2ZXJzW3NkcE1MaW5lSW5kZXhdLmJ1ZmZlcmVkQ2FuZGlkYXRlRXZlbnRzO1xuICAgIHRoaXMudHJhbnNjZWl2ZXJzW3NkcE1MaW5lSW5kZXhdLmJ1ZmZlcmVkQ2FuZGlkYXRlRXZlbnRzID0gbnVsbDtcbiAgICBpY2VHYXRoZXJlci5yZW1vdmVFdmVudExpc3RlbmVyKCdsb2NhbGNhbmRpZGF0ZScsXG4gICAgICB0aGlzLnRyYW5zY2VpdmVyc1tzZHBNTGluZUluZGV4XS5idWZmZXJDYW5kaWRhdGVzKTtcbiAgICBpY2VHYXRoZXJlci5vbmxvY2FsY2FuZGlkYXRlID0gZnVuY3Rpb24oZXZ0KSB7XG4gICAgICBpZiAocGMudXNpbmdCdW5kbGUgJiYgc2RwTUxpbmVJbmRleCA+IDApIHtcbiAgICAgICAgLy8gaWYgd2Uga25vdyB0aGF0IHdlIHVzZSBidW5kbGUgd2UgY2FuIGRyb3AgY2FuZGlkYXRlcyB3aXRoXG4gICAgICAgIC8vINGVZHBNTGluZUluZGV4ID4gMC4gSWYgd2UgZG9uJ3QgZG8gdGhpcyB0aGVuIG91ciBzdGF0ZSBnZXRzXG4gICAgICAgIC8vIGNvbmZ1c2VkIHNpbmNlIHdlIGRpc3Bvc2UgdGhlIGV4dHJhIGljZSBnYXRoZXJlci5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGV2ZW50ID0gbmV3IEV2ZW50KCdpY2VjYW5kaWRhdGUnKTtcbiAgICAgIGV2ZW50LmNhbmRpZGF0ZSA9IHtzZHBNaWQ6IG1pZCwgc2RwTUxpbmVJbmRleDogc2RwTUxpbmVJbmRleH07XG5cbiAgICAgIHZhciBjYW5kID0gZXZ0LmNhbmRpZGF0ZTtcbiAgICAgIC8vIEVkZ2UgZW1pdHMgYW4gZW1wdHkgb2JqZWN0IGZvciBSVENJY2VDYW5kaWRhdGVDb21wbGV0ZeKApVxuICAgICAgdmFyIGVuZCA9ICFjYW5kIHx8IE9iamVjdC5rZXlzKGNhbmQpLmxlbmd0aCA9PT0gMDtcbiAgICAgIGlmIChlbmQpIHtcbiAgICAgICAgLy8gcG9seWZpbGwgc2luY2UgUlRDSWNlR2F0aGVyZXIuc3RhdGUgaXMgbm90IGltcGxlbWVudGVkIGluXG4gICAgICAgIC8vIEVkZ2UgMTA1NDcgeWV0LlxuICAgICAgICBpZiAoaWNlR2F0aGVyZXIuc3RhdGUgPT09ICduZXcnIHx8IGljZUdhdGhlcmVyLnN0YXRlID09PSAnZ2F0aGVyaW5nJykge1xuICAgICAgICAgIGljZUdhdGhlcmVyLnN0YXRlID0gJ2NvbXBsZXRlZCc7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpY2VHYXRoZXJlci5zdGF0ZSA9PT0gJ25ldycpIHtcbiAgICAgICAgICBpY2VHYXRoZXJlci5zdGF0ZSA9ICdnYXRoZXJpbmcnO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJUQ0ljZUNhbmRpZGF0ZSBkb2Vzbid0IGhhdmUgYSBjb21wb25lbnQsIG5lZWRzIHRvIGJlIGFkZGVkXG4gICAgICAgIGNhbmQuY29tcG9uZW50ID0gMTtcbiAgICAgICAgLy8gYWxzbyB0aGUgdXNlcm5hbWVGcmFnbWVudC4gVE9ETzogdXBkYXRlIFNEUCB0byB0YWtlIGJvdGggdmFyaWFudHMuXG4gICAgICAgIGNhbmQudWZyYWcgPSBpY2VHYXRoZXJlci5nZXRMb2NhbFBhcmFtZXRlcnMoKS51c2VybmFtZUZyYWdtZW50O1xuXG4gICAgICAgIHZhciBzZXJpYWxpemVkQ2FuZGlkYXRlID0gU0RQVXRpbHMud3JpdGVDYW5kaWRhdGUoY2FuZCk7XG4gICAgICAgIGV2ZW50LmNhbmRpZGF0ZSA9IE9iamVjdC5hc3NpZ24oZXZlbnQuY2FuZGlkYXRlLFxuICAgICAgICAgICAgU0RQVXRpbHMucGFyc2VDYW5kaWRhdGUoc2VyaWFsaXplZENhbmRpZGF0ZSkpO1xuXG4gICAgICAgIGV2ZW50LmNhbmRpZGF0ZS5jYW5kaWRhdGUgPSBzZXJpYWxpemVkQ2FuZGlkYXRlO1xuICAgICAgICBldmVudC5jYW5kaWRhdGUudG9KU09OID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNhbmRpZGF0ZTogZXZlbnQuY2FuZGlkYXRlLmNhbmRpZGF0ZSxcbiAgICAgICAgICAgIHNkcE1pZDogZXZlbnQuY2FuZGlkYXRlLnNkcE1pZCxcbiAgICAgICAgICAgIHNkcE1MaW5lSW5kZXg6IGV2ZW50LmNhbmRpZGF0ZS5zZHBNTGluZUluZGV4LFxuICAgICAgICAgICAgdXNlcm5hbWVGcmFnbWVudDogZXZlbnQuY2FuZGlkYXRlLnVzZXJuYW1lRnJhZ21lbnRcbiAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICAvLyB1cGRhdGUgbG9jYWwgZGVzY3JpcHRpb24uXG4gICAgICB2YXIgc2VjdGlvbnMgPSBTRFBVdGlscy5nZXRNZWRpYVNlY3Rpb25zKHBjLl9sb2NhbERlc2NyaXB0aW9uLnNkcCk7XG4gICAgICBpZiAoIWVuZCkge1xuICAgICAgICBzZWN0aW9uc1tldmVudC5jYW5kaWRhdGUuc2RwTUxpbmVJbmRleF0gKz1cbiAgICAgICAgICAgICdhPScgKyBldmVudC5jYW5kaWRhdGUuY2FuZGlkYXRlICsgJ1xcclxcbic7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZWN0aW9uc1tldmVudC5jYW5kaWRhdGUuc2RwTUxpbmVJbmRleF0gKz1cbiAgICAgICAgICAgICdhPWVuZC1vZi1jYW5kaWRhdGVzXFxyXFxuJztcbiAgICAgIH1cbiAgICAgIHBjLl9sb2NhbERlc2NyaXB0aW9uLnNkcCA9XG4gICAgICAgICAgU0RQVXRpbHMuZ2V0RGVzY3JpcHRpb24ocGMuX2xvY2FsRGVzY3JpcHRpb24uc2RwKSArXG4gICAgICAgICAgc2VjdGlvbnMuam9pbignJyk7XG4gICAgICB2YXIgY29tcGxldGUgPSBwYy50cmFuc2NlaXZlcnMuZXZlcnkoZnVuY3Rpb24odHJhbnNjZWl2ZXIpIHtcbiAgICAgICAgcmV0dXJuIHRyYW5zY2VpdmVyLmljZUdhdGhlcmVyICYmXG4gICAgICAgICAgICB0cmFuc2NlaXZlci5pY2VHYXRoZXJlci5zdGF0ZSA9PT0gJ2NvbXBsZXRlZCc7XG4gICAgICB9KTtcblxuICAgICAgaWYgKHBjLmljZUdhdGhlcmluZ1N0YXRlICE9PSAnZ2F0aGVyaW5nJykge1xuICAgICAgICBwYy5pY2VHYXRoZXJpbmdTdGF0ZSA9ICdnYXRoZXJpbmcnO1xuICAgICAgICBwYy5fZW1pdEdhdGhlcmluZ1N0YXRlQ2hhbmdlKCk7XG4gICAgICB9XG5cbiAgICAgIC8vIEVtaXQgY2FuZGlkYXRlLiBBbHNvIGVtaXQgbnVsbCBjYW5kaWRhdGUgd2hlbiBhbGwgZ2F0aGVyZXJzIGFyZVxuICAgICAgLy8gY29tcGxldGUuXG4gICAgICBpZiAoIWVuZCkge1xuICAgICAgICBwYy5fZGlzcGF0Y2hFdmVudCgnaWNlY2FuZGlkYXRlJywgZXZlbnQpO1xuICAgICAgfVxuICAgICAgaWYgKGNvbXBsZXRlKSB7XG4gICAgICAgIHBjLl9kaXNwYXRjaEV2ZW50KCdpY2VjYW5kaWRhdGUnLCBuZXcgRXZlbnQoJ2ljZWNhbmRpZGF0ZScpKTtcbiAgICAgICAgcGMuaWNlR2F0aGVyaW5nU3RhdGUgPSAnY29tcGxldGUnO1xuICAgICAgICBwYy5fZW1pdEdhdGhlcmluZ1N0YXRlQ2hhbmdlKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIGVtaXQgYWxyZWFkeSBnYXRoZXJlZCBjYW5kaWRhdGVzLlxuICAgIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgYnVmZmVyZWRDYW5kaWRhdGVFdmVudHMuZm9yRWFjaChmdW5jdGlvbihlKSB7XG4gICAgICAgIGljZUdhdGhlcmVyLm9ubG9jYWxjYW5kaWRhdGUoZSk7XG4gICAgICB9KTtcbiAgICB9LCAwKTtcbiAgfTtcblxuICAvLyBDcmVhdGUgSUNFIHRyYW5zcG9ydCBhbmQgRFRMUyB0cmFuc3BvcnQuXG4gIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5fY3JlYXRlSWNlQW5kRHRsc1RyYW5zcG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcGMgPSB0aGlzO1xuICAgIHZhciBpY2VUcmFuc3BvcnQgPSBuZXcgd2luZG93LlJUQ0ljZVRyYW5zcG9ydChudWxsKTtcbiAgICBpY2VUcmFuc3BvcnQub25pY2VzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcGMuX3VwZGF0ZUljZUNvbm5lY3Rpb25TdGF0ZSgpO1xuICAgICAgcGMuX3VwZGF0ZUNvbm5lY3Rpb25TdGF0ZSgpO1xuICAgIH07XG5cbiAgICB2YXIgZHRsc1RyYW5zcG9ydCA9IG5ldyB3aW5kb3cuUlRDRHRsc1RyYW5zcG9ydChpY2VUcmFuc3BvcnQpO1xuICAgIGR0bHNUcmFuc3BvcnQub25kdGxzc3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgIHBjLl91cGRhdGVDb25uZWN0aW9uU3RhdGUoKTtcbiAgICB9O1xuICAgIGR0bHNUcmFuc3BvcnQub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gb25lcnJvciBkb2VzIG5vdCBzZXQgc3RhdGUgdG8gZmFpbGVkIGJ5IGl0c2VsZi5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkdGxzVHJhbnNwb3J0LCAnc3RhdGUnLFxuICAgICAgICAgIHt2YWx1ZTogJ2ZhaWxlZCcsIHdyaXRhYmxlOiB0cnVlfSk7XG4gICAgICBwYy5fdXBkYXRlQ29ubmVjdGlvblN0YXRlKCk7XG4gICAgfTtcblxuICAgIHJldHVybiB7XG4gICAgICBpY2VUcmFuc3BvcnQ6IGljZVRyYW5zcG9ydCxcbiAgICAgIGR0bHNUcmFuc3BvcnQ6IGR0bHNUcmFuc3BvcnRcbiAgICB9O1xuICB9O1xuXG4gIC8vIERlc3Ryb3kgSUNFIGdhdGhlcmVyLCBJQ0UgdHJhbnNwb3J0IGFuZCBEVExTIHRyYW5zcG9ydC5cbiAgLy8gV2l0aG91dCB0cmlnZ2VyaW5nIHRoZSBjYWxsYmFja3MuXG4gIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5fZGlzcG9zZUljZUFuZER0bHNUcmFuc3BvcnRzID0gZnVuY3Rpb24oXG4gICAgICBzZHBNTGluZUluZGV4KSB7XG4gICAgdmFyIGljZUdhdGhlcmVyID0gdGhpcy50cmFuc2NlaXZlcnNbc2RwTUxpbmVJbmRleF0uaWNlR2F0aGVyZXI7XG4gICAgaWYgKGljZUdhdGhlcmVyKSB7XG4gICAgICBkZWxldGUgaWNlR2F0aGVyZXIub25sb2NhbGNhbmRpZGF0ZTtcbiAgICAgIGRlbGV0ZSB0aGlzLnRyYW5zY2VpdmVyc1tzZHBNTGluZUluZGV4XS5pY2VHYXRoZXJlcjtcbiAgICB9XG4gICAgdmFyIGljZVRyYW5zcG9ydCA9IHRoaXMudHJhbnNjZWl2ZXJzW3NkcE1MaW5lSW5kZXhdLmljZVRyYW5zcG9ydDtcbiAgICBpZiAoaWNlVHJhbnNwb3J0KSB7XG4gICAgICBkZWxldGUgaWNlVHJhbnNwb3J0Lm9uaWNlc3RhdGVjaGFuZ2U7XG4gICAgICBkZWxldGUgdGhpcy50cmFuc2NlaXZlcnNbc2RwTUxpbmVJbmRleF0uaWNlVHJhbnNwb3J0O1xuICAgIH1cbiAgICB2YXIgZHRsc1RyYW5zcG9ydCA9IHRoaXMudHJhbnNjZWl2ZXJzW3NkcE1MaW5lSW5kZXhdLmR0bHNUcmFuc3BvcnQ7XG4gICAgaWYgKGR0bHNUcmFuc3BvcnQpIHtcbiAgICAgIGRlbGV0ZSBkdGxzVHJhbnNwb3J0Lm9uZHRsc3N0YXRlY2hhbmdlO1xuICAgICAgZGVsZXRlIGR0bHNUcmFuc3BvcnQub25lcnJvcjtcbiAgICAgIGRlbGV0ZSB0aGlzLnRyYW5zY2VpdmVyc1tzZHBNTGluZUluZGV4XS5kdGxzVHJhbnNwb3J0O1xuICAgIH1cbiAgfTtcblxuICAvLyBTdGFydCB0aGUgUlRQIFNlbmRlciBhbmQgUmVjZWl2ZXIgZm9yIGEgdHJhbnNjZWl2ZXIuXG4gIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5fdHJhbnNjZWl2ZSA9IGZ1bmN0aW9uKHRyYW5zY2VpdmVyLFxuICAgICAgc2VuZCwgcmVjdikge1xuICAgIHZhciBwYXJhbXMgPSBnZXRDb21tb25DYXBhYmlsaXRpZXModHJhbnNjZWl2ZXIubG9jYWxDYXBhYmlsaXRpZXMsXG4gICAgICAgIHRyYW5zY2VpdmVyLnJlbW90ZUNhcGFiaWxpdGllcyk7XG4gICAgaWYgKHNlbmQgJiYgdHJhbnNjZWl2ZXIucnRwU2VuZGVyKSB7XG4gICAgICBwYXJhbXMuZW5jb2RpbmdzID0gdHJhbnNjZWl2ZXIuc2VuZEVuY29kaW5nUGFyYW1ldGVycztcbiAgICAgIHBhcmFtcy5ydGNwID0ge1xuICAgICAgICBjbmFtZTogU0RQVXRpbHMubG9jYWxDTmFtZSxcbiAgICAgICAgY29tcG91bmQ6IHRyYW5zY2VpdmVyLnJ0Y3BQYXJhbWV0ZXJzLmNvbXBvdW5kXG4gICAgICB9O1xuICAgICAgaWYgKHRyYW5zY2VpdmVyLnJlY3ZFbmNvZGluZ1BhcmFtZXRlcnMubGVuZ3RoKSB7XG4gICAgICAgIHBhcmFtcy5ydGNwLnNzcmMgPSB0cmFuc2NlaXZlci5yZWN2RW5jb2RpbmdQYXJhbWV0ZXJzWzBdLnNzcmM7XG4gICAgICB9XG4gICAgICB0cmFuc2NlaXZlci5ydHBTZW5kZXIuc2VuZChwYXJhbXMpO1xuICAgIH1cbiAgICBpZiAocmVjdiAmJiB0cmFuc2NlaXZlci5ydHBSZWNlaXZlciAmJiBwYXJhbXMuY29kZWNzLmxlbmd0aCA+IDApIHtcbiAgICAgIC8vIHJlbW92ZSBSVFggZmllbGQgaW4gRWRnZSAxNDk0MlxuICAgICAgaWYgKHRyYW5zY2VpdmVyLmtpbmQgPT09ICd2aWRlbydcbiAgICAgICAgICAmJiB0cmFuc2NlaXZlci5yZWN2RW5jb2RpbmdQYXJhbWV0ZXJzXG4gICAgICAgICAgJiYgZWRnZVZlcnNpb24gPCAxNTAxOSkge1xuICAgICAgICB0cmFuc2NlaXZlci5yZWN2RW5jb2RpbmdQYXJhbWV0ZXJzLmZvckVhY2goZnVuY3Rpb24ocCkge1xuICAgICAgICAgIGRlbGV0ZSBwLnJ0eDtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAodHJhbnNjZWl2ZXIucmVjdkVuY29kaW5nUGFyYW1ldGVycy5sZW5ndGgpIHtcbiAgICAgICAgcGFyYW1zLmVuY29kaW5ncyA9IHRyYW5zY2VpdmVyLnJlY3ZFbmNvZGluZ1BhcmFtZXRlcnM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJhbXMuZW5jb2RpbmdzID0gW3t9XTtcbiAgICAgIH1cbiAgICAgIHBhcmFtcy5ydGNwID0ge1xuICAgICAgICBjb21wb3VuZDogdHJhbnNjZWl2ZXIucnRjcFBhcmFtZXRlcnMuY29tcG91bmRcbiAgICAgIH07XG4gICAgICBpZiAodHJhbnNjZWl2ZXIucnRjcFBhcmFtZXRlcnMuY25hbWUpIHtcbiAgICAgICAgcGFyYW1zLnJ0Y3AuY25hbWUgPSB0cmFuc2NlaXZlci5ydGNwUGFyYW1ldGVycy5jbmFtZTtcbiAgICAgIH1cbiAgICAgIGlmICh0cmFuc2NlaXZlci5zZW5kRW5jb2RpbmdQYXJhbWV0ZXJzLmxlbmd0aCkge1xuICAgICAgICBwYXJhbXMucnRjcC5zc3JjID0gdHJhbnNjZWl2ZXIuc2VuZEVuY29kaW5nUGFyYW1ldGVyc1swXS5zc3JjO1xuICAgICAgfVxuICAgICAgdHJhbnNjZWl2ZXIucnRwUmVjZWl2ZXIucmVjZWl2ZShwYXJhbXMpO1xuICAgIH1cbiAgfTtcblxuICBSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuc2V0TG9jYWxEZXNjcmlwdGlvbiA9IGZ1bmN0aW9uKGRlc2NyaXB0aW9uKSB7XG4gICAgdmFyIHBjID0gdGhpcztcblxuICAgIC8vIE5vdGU6IHByYW5zd2VyIGlzIG5vdCBzdXBwb3J0ZWQuXG4gICAgaWYgKFsnb2ZmZXInLCAnYW5zd2VyJ10uaW5kZXhPZihkZXNjcmlwdGlvbi50eXBlKSA9PT0gLTEpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChtYWtlRXJyb3IoJ1R5cGVFcnJvcicsXG4gICAgICAgICAgJ1Vuc3VwcG9ydGVkIHR5cGUgXCInICsgZGVzY3JpcHRpb24udHlwZSArICdcIicpKTtcbiAgICB9XG5cbiAgICBpZiAoIWlzQWN0aW9uQWxsb3dlZEluU2lnbmFsaW5nU3RhdGUoJ3NldExvY2FsRGVzY3JpcHRpb24nLFxuICAgICAgICBkZXNjcmlwdGlvbi50eXBlLCBwYy5zaWduYWxpbmdTdGF0ZSkgfHwgcGMuX2lzQ2xvc2VkKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobWFrZUVycm9yKCdJbnZhbGlkU3RhdGVFcnJvcicsXG4gICAgICAgICAgJ0NhbiBub3Qgc2V0IGxvY2FsICcgKyBkZXNjcmlwdGlvbi50eXBlICtcbiAgICAgICAgICAnIGluIHN0YXRlICcgKyBwYy5zaWduYWxpbmdTdGF0ZSkpO1xuICAgIH1cblxuICAgIHZhciBzZWN0aW9ucztcbiAgICB2YXIgc2Vzc2lvbnBhcnQ7XG4gICAgaWYgKGRlc2NyaXB0aW9uLnR5cGUgPT09ICdvZmZlcicpIHtcbiAgICAgIC8vIFZFUlkgbGltaXRlZCBzdXBwb3J0IGZvciBTRFAgbXVuZ2luZy4gTGltaXRlZCB0bzpcbiAgICAgIC8vICogY2hhbmdpbmcgdGhlIG9yZGVyIG9mIGNvZGVjc1xuICAgICAgc2VjdGlvbnMgPSBTRFBVdGlscy5zcGxpdFNlY3Rpb25zKGRlc2NyaXB0aW9uLnNkcCk7XG4gICAgICBzZXNzaW9ucGFydCA9IHNlY3Rpb25zLnNoaWZ0KCk7XG4gICAgICBzZWN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uKG1lZGlhU2VjdGlvbiwgc2RwTUxpbmVJbmRleCkge1xuICAgICAgICB2YXIgY2FwcyA9IFNEUFV0aWxzLnBhcnNlUnRwUGFyYW1ldGVycyhtZWRpYVNlY3Rpb24pO1xuICAgICAgICBwYy50cmFuc2NlaXZlcnNbc2RwTUxpbmVJbmRleF0ubG9jYWxDYXBhYmlsaXRpZXMgPSBjYXBzO1xuICAgICAgfSk7XG5cbiAgICAgIHBjLnRyYW5zY2VpdmVycy5mb3JFYWNoKGZ1bmN0aW9uKHRyYW5zY2VpdmVyLCBzZHBNTGluZUluZGV4KSB7XG4gICAgICAgIHBjLl9nYXRoZXIodHJhbnNjZWl2ZXIubWlkLCBzZHBNTGluZUluZGV4KTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoZGVzY3JpcHRpb24udHlwZSA9PT0gJ2Fuc3dlcicpIHtcbiAgICAgIHNlY3Rpb25zID0gU0RQVXRpbHMuc3BsaXRTZWN0aW9ucyhwYy5fcmVtb3RlRGVzY3JpcHRpb24uc2RwKTtcbiAgICAgIHNlc3Npb25wYXJ0ID0gc2VjdGlvbnMuc2hpZnQoKTtcbiAgICAgIHZhciBpc0ljZUxpdGUgPSBTRFBVdGlscy5tYXRjaFByZWZpeChzZXNzaW9ucGFydCxcbiAgICAgICAgICAnYT1pY2UtbGl0ZScpLmxlbmd0aCA+IDA7XG4gICAgICBzZWN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uKG1lZGlhU2VjdGlvbiwgc2RwTUxpbmVJbmRleCkge1xuICAgICAgICB2YXIgdHJhbnNjZWl2ZXIgPSBwYy50cmFuc2NlaXZlcnNbc2RwTUxpbmVJbmRleF07XG4gICAgICAgIHZhciBpY2VHYXRoZXJlciA9IHRyYW5zY2VpdmVyLmljZUdhdGhlcmVyO1xuICAgICAgICB2YXIgaWNlVHJhbnNwb3J0ID0gdHJhbnNjZWl2ZXIuaWNlVHJhbnNwb3J0O1xuICAgICAgICB2YXIgZHRsc1RyYW5zcG9ydCA9IHRyYW5zY2VpdmVyLmR0bHNUcmFuc3BvcnQ7XG4gICAgICAgIHZhciBsb2NhbENhcGFiaWxpdGllcyA9IHRyYW5zY2VpdmVyLmxvY2FsQ2FwYWJpbGl0aWVzO1xuICAgICAgICB2YXIgcmVtb3RlQ2FwYWJpbGl0aWVzID0gdHJhbnNjZWl2ZXIucmVtb3RlQ2FwYWJpbGl0aWVzO1xuXG4gICAgICAgIC8vIHRyZWF0IGJ1bmRsZS1vbmx5IGFzIG5vdC1yZWplY3RlZC5cbiAgICAgICAgdmFyIHJlamVjdGVkID0gU0RQVXRpbHMuaXNSZWplY3RlZChtZWRpYVNlY3Rpb24pICYmXG4gICAgICAgICAgICBTRFBVdGlscy5tYXRjaFByZWZpeChtZWRpYVNlY3Rpb24sICdhPWJ1bmRsZS1vbmx5JykubGVuZ3RoID09PSAwO1xuXG4gICAgICAgIGlmICghcmVqZWN0ZWQgJiYgIXRyYW5zY2VpdmVyLnJlamVjdGVkKSB7XG4gICAgICAgICAgdmFyIHJlbW90ZUljZVBhcmFtZXRlcnMgPSBTRFBVdGlscy5nZXRJY2VQYXJhbWV0ZXJzKFxuICAgICAgICAgICAgICBtZWRpYVNlY3Rpb24sIHNlc3Npb25wYXJ0KTtcbiAgICAgICAgICB2YXIgcmVtb3RlRHRsc1BhcmFtZXRlcnMgPSBTRFBVdGlscy5nZXREdGxzUGFyYW1ldGVycyhcbiAgICAgICAgICAgICAgbWVkaWFTZWN0aW9uLCBzZXNzaW9ucGFydCk7XG4gICAgICAgICAgaWYgKGlzSWNlTGl0ZSkge1xuICAgICAgICAgICAgcmVtb3RlRHRsc1BhcmFtZXRlcnMucm9sZSA9ICdzZXJ2ZXInO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghcGMudXNpbmdCdW5kbGUgfHwgc2RwTUxpbmVJbmRleCA9PT0gMCkge1xuICAgICAgICAgICAgcGMuX2dhdGhlcih0cmFuc2NlaXZlci5taWQsIHNkcE1MaW5lSW5kZXgpO1xuICAgICAgICAgICAgaWYgKGljZVRyYW5zcG9ydC5zdGF0ZSA9PT0gJ25ldycpIHtcbiAgICAgICAgICAgICAgaWNlVHJhbnNwb3J0LnN0YXJ0KGljZUdhdGhlcmVyLCByZW1vdGVJY2VQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgICAgICAgaXNJY2VMaXRlID8gJ2NvbnRyb2xsaW5nJyA6ICdjb250cm9sbGVkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZHRsc1RyYW5zcG9ydC5zdGF0ZSA9PT0gJ25ldycpIHtcbiAgICAgICAgICAgICAgZHRsc1RyYW5zcG9ydC5zdGFydChyZW1vdGVEdGxzUGFyYW1ldGVycyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gQ2FsY3VsYXRlIGludGVyc2VjdGlvbiBvZiBjYXBhYmlsaXRpZXMuXG4gICAgICAgICAgdmFyIHBhcmFtcyA9IGdldENvbW1vbkNhcGFiaWxpdGllcyhsb2NhbENhcGFiaWxpdGllcyxcbiAgICAgICAgICAgICAgcmVtb3RlQ2FwYWJpbGl0aWVzKTtcblxuICAgICAgICAgIC8vIFN0YXJ0IHRoZSBSVENSdHBTZW5kZXIuIFRoZSBSVENSdHBSZWNlaXZlciBmb3IgdGhpc1xuICAgICAgICAgIC8vIHRyYW5zY2VpdmVyIGhhcyBhbHJlYWR5IGJlZW4gc3RhcnRlZCBpbiBzZXRSZW1vdGVEZXNjcmlwdGlvbi5cbiAgICAgICAgICBwYy5fdHJhbnNjZWl2ZSh0cmFuc2NlaXZlcixcbiAgICAgICAgICAgICAgcGFyYW1zLmNvZGVjcy5sZW5ndGggPiAwLFxuICAgICAgICAgICAgICBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHBjLl9sb2NhbERlc2NyaXB0aW9uID0ge1xuICAgICAgdHlwZTogZGVzY3JpcHRpb24udHlwZSxcbiAgICAgIHNkcDogZGVzY3JpcHRpb24uc2RwXG4gICAgfTtcbiAgICBpZiAoZGVzY3JpcHRpb24udHlwZSA9PT0gJ29mZmVyJykge1xuICAgICAgcGMuX3VwZGF0ZVNpZ25hbGluZ1N0YXRlKCdoYXZlLWxvY2FsLW9mZmVyJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBjLl91cGRhdGVTaWduYWxpbmdTdGF0ZSgnc3RhYmxlJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICB9O1xuXG4gIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5zZXRSZW1vdGVEZXNjcmlwdGlvbiA9IGZ1bmN0aW9uKGRlc2NyaXB0aW9uKSB7XG4gICAgdmFyIHBjID0gdGhpcztcblxuICAgIC8vIE5vdGU6IHByYW5zd2VyIGlzIG5vdCBzdXBwb3J0ZWQuXG4gICAgaWYgKFsnb2ZmZXInLCAnYW5zd2VyJ10uaW5kZXhPZihkZXNjcmlwdGlvbi50eXBlKSA9PT0gLTEpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChtYWtlRXJyb3IoJ1R5cGVFcnJvcicsXG4gICAgICAgICAgJ1Vuc3VwcG9ydGVkIHR5cGUgXCInICsgZGVzY3JpcHRpb24udHlwZSArICdcIicpKTtcbiAgICB9XG5cbiAgICBpZiAoIWlzQWN0aW9uQWxsb3dlZEluU2lnbmFsaW5nU3RhdGUoJ3NldFJlbW90ZURlc2NyaXB0aW9uJyxcbiAgICAgICAgZGVzY3JpcHRpb24udHlwZSwgcGMuc2lnbmFsaW5nU3RhdGUpIHx8IHBjLl9pc0Nsb3NlZCkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG1ha2VFcnJvcignSW52YWxpZFN0YXRlRXJyb3InLFxuICAgICAgICAgICdDYW4gbm90IHNldCByZW1vdGUgJyArIGRlc2NyaXB0aW9uLnR5cGUgK1xuICAgICAgICAgICcgaW4gc3RhdGUgJyArIHBjLnNpZ25hbGluZ1N0YXRlKSk7XG4gICAgfVxuXG4gICAgdmFyIHN0cmVhbXMgPSB7fTtcbiAgICBwYy5yZW1vdGVTdHJlYW1zLmZvckVhY2goZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgICBzdHJlYW1zW3N0cmVhbS5pZF0gPSBzdHJlYW07XG4gICAgfSk7XG4gICAgdmFyIHJlY2VpdmVyTGlzdCA9IFtdO1xuICAgIHZhciBzZWN0aW9ucyA9IFNEUFV0aWxzLnNwbGl0U2VjdGlvbnMoZGVzY3JpcHRpb24uc2RwKTtcbiAgICB2YXIgc2Vzc2lvbnBhcnQgPSBzZWN0aW9ucy5zaGlmdCgpO1xuICAgIHZhciBpc0ljZUxpdGUgPSBTRFBVdGlscy5tYXRjaFByZWZpeChzZXNzaW9ucGFydCxcbiAgICAgICAgJ2E9aWNlLWxpdGUnKS5sZW5ndGggPiAwO1xuICAgIHZhciB1c2luZ0J1bmRsZSA9IFNEUFV0aWxzLm1hdGNoUHJlZml4KHNlc3Npb25wYXJ0LFxuICAgICAgICAnYT1ncm91cDpCVU5ETEUgJykubGVuZ3RoID4gMDtcbiAgICBwYy51c2luZ0J1bmRsZSA9IHVzaW5nQnVuZGxlO1xuICAgIHZhciBpY2VPcHRpb25zID0gU0RQVXRpbHMubWF0Y2hQcmVmaXgoc2Vzc2lvbnBhcnQsXG4gICAgICAgICdhPWljZS1vcHRpb25zOicpWzBdO1xuICAgIGlmIChpY2VPcHRpb25zKSB7XG4gICAgICBwYy5jYW5Ucmlja2xlSWNlQ2FuZGlkYXRlcyA9IGljZU9wdGlvbnMuc3Vic3RyKDE0KS5zcGxpdCgnICcpXG4gICAgICAgICAgLmluZGV4T2YoJ3RyaWNrbGUnKSA+PSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYy5jYW5Ucmlja2xlSWNlQ2FuZGlkYXRlcyA9IGZhbHNlO1xuICAgIH1cblxuICAgIHNlY3Rpb25zLmZvckVhY2goZnVuY3Rpb24obWVkaWFTZWN0aW9uLCBzZHBNTGluZUluZGV4KSB7XG4gICAgICB2YXIgbGluZXMgPSBTRFBVdGlscy5zcGxpdExpbmVzKG1lZGlhU2VjdGlvbik7XG4gICAgICB2YXIga2luZCA9IFNEUFV0aWxzLmdldEtpbmQobWVkaWFTZWN0aW9uKTtcbiAgICAgIC8vIHRyZWF0IGJ1bmRsZS1vbmx5IGFzIG5vdC1yZWplY3RlZC5cbiAgICAgIHZhciByZWplY3RlZCA9IFNEUFV0aWxzLmlzUmVqZWN0ZWQobWVkaWFTZWN0aW9uKSAmJlxuICAgICAgICAgIFNEUFV0aWxzLm1hdGNoUHJlZml4KG1lZGlhU2VjdGlvbiwgJ2E9YnVuZGxlLW9ubHknKS5sZW5ndGggPT09IDA7XG4gICAgICB2YXIgcHJvdG9jb2wgPSBsaW5lc1swXS5zdWJzdHIoMikuc3BsaXQoJyAnKVsyXTtcblxuICAgICAgdmFyIGRpcmVjdGlvbiA9IFNEUFV0aWxzLmdldERpcmVjdGlvbihtZWRpYVNlY3Rpb24sIHNlc3Npb25wYXJ0KTtcbiAgICAgIHZhciByZW1vdGVNc2lkID0gU0RQVXRpbHMucGFyc2VNc2lkKG1lZGlhU2VjdGlvbik7XG5cbiAgICAgIHZhciBtaWQgPSBTRFBVdGlscy5nZXRNaWQobWVkaWFTZWN0aW9uKSB8fCBTRFBVdGlscy5nZW5lcmF0ZUlkZW50aWZpZXIoKTtcblxuICAgICAgLy8gUmVqZWN0IGRhdGFjaGFubmVscyB3aGljaCBhcmUgbm90IGltcGxlbWVudGVkIHlldC5cbiAgICAgIGlmIChyZWplY3RlZCB8fCAoa2luZCA9PT0gJ2FwcGxpY2F0aW9uJyAmJiAocHJvdG9jb2wgPT09ICdEVExTL1NDVFAnIHx8XG4gICAgICAgICAgcHJvdG9jb2wgPT09ICdVRFAvRFRMUy9TQ1RQJykpKSB7XG4gICAgICAgIC8vIFRPRE86IHRoaXMgaXMgZGFuZ2Vyb3VzIGluIHRoZSBjYXNlIHdoZXJlIGEgbm9uLXJlamVjdGVkIG0tbGluZVxuICAgICAgICAvLyAgICAgYmVjb21lcyByZWplY3RlZC5cbiAgICAgICAgcGMudHJhbnNjZWl2ZXJzW3NkcE1MaW5lSW5kZXhdID0ge1xuICAgICAgICAgIG1pZDogbWlkLFxuICAgICAgICAgIGtpbmQ6IGtpbmQsXG4gICAgICAgICAgcHJvdG9jb2w6IHByb3RvY29sLFxuICAgICAgICAgIHJlamVjdGVkOiB0cnVlXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKCFyZWplY3RlZCAmJiBwYy50cmFuc2NlaXZlcnNbc2RwTUxpbmVJbmRleF0gJiZcbiAgICAgICAgICBwYy50cmFuc2NlaXZlcnNbc2RwTUxpbmVJbmRleF0ucmVqZWN0ZWQpIHtcbiAgICAgICAgLy8gcmVjeWNsZSBhIHJlamVjdGVkIHRyYW5zY2VpdmVyLlxuICAgICAgICBwYy50cmFuc2NlaXZlcnNbc2RwTUxpbmVJbmRleF0gPSBwYy5fY3JlYXRlVHJhbnNjZWl2ZXIoa2luZCwgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciB0cmFuc2NlaXZlcjtcbiAgICAgIHZhciBpY2VHYXRoZXJlcjtcbiAgICAgIHZhciBpY2VUcmFuc3BvcnQ7XG4gICAgICB2YXIgZHRsc1RyYW5zcG9ydDtcbiAgICAgIHZhciBydHBSZWNlaXZlcjtcbiAgICAgIHZhciBzZW5kRW5jb2RpbmdQYXJhbWV0ZXJzO1xuICAgICAgdmFyIHJlY3ZFbmNvZGluZ1BhcmFtZXRlcnM7XG4gICAgICB2YXIgbG9jYWxDYXBhYmlsaXRpZXM7XG5cbiAgICAgIHZhciB0cmFjaztcbiAgICAgIC8vIEZJWE1FOiBlbnN1cmUgdGhlIG1lZGlhU2VjdGlvbiBoYXMgcnRjcC1tdXggc2V0LlxuICAgICAgdmFyIHJlbW90ZUNhcGFiaWxpdGllcyA9IFNEUFV0aWxzLnBhcnNlUnRwUGFyYW1ldGVycyhtZWRpYVNlY3Rpb24pO1xuICAgICAgdmFyIHJlbW90ZUljZVBhcmFtZXRlcnM7XG4gICAgICB2YXIgcmVtb3RlRHRsc1BhcmFtZXRlcnM7XG4gICAgICBpZiAoIXJlamVjdGVkKSB7XG4gICAgICAgIHJlbW90ZUljZVBhcmFtZXRlcnMgPSBTRFBVdGlscy5nZXRJY2VQYXJhbWV0ZXJzKG1lZGlhU2VjdGlvbixcbiAgICAgICAgICAgIHNlc3Npb25wYXJ0KTtcbiAgICAgICAgcmVtb3RlRHRsc1BhcmFtZXRlcnMgPSBTRFBVdGlscy5nZXREdGxzUGFyYW1ldGVycyhtZWRpYVNlY3Rpb24sXG4gICAgICAgICAgICBzZXNzaW9ucGFydCk7XG4gICAgICAgIHJlbW90ZUR0bHNQYXJhbWV0ZXJzLnJvbGUgPSAnY2xpZW50JztcbiAgICAgIH1cbiAgICAgIHJlY3ZFbmNvZGluZ1BhcmFtZXRlcnMgPVxuICAgICAgICAgIFNEUFV0aWxzLnBhcnNlUnRwRW5jb2RpbmdQYXJhbWV0ZXJzKG1lZGlhU2VjdGlvbik7XG5cbiAgICAgIHZhciBydGNwUGFyYW1ldGVycyA9IFNEUFV0aWxzLnBhcnNlUnRjcFBhcmFtZXRlcnMobWVkaWFTZWN0aW9uKTtcblxuICAgICAgdmFyIGlzQ29tcGxldGUgPSBTRFBVdGlscy5tYXRjaFByZWZpeChtZWRpYVNlY3Rpb24sXG4gICAgICAgICAgJ2E9ZW5kLW9mLWNhbmRpZGF0ZXMnLCBzZXNzaW9ucGFydCkubGVuZ3RoID4gMDtcbiAgICAgIHZhciBjYW5kcyA9IFNEUFV0aWxzLm1hdGNoUHJlZml4KG1lZGlhU2VjdGlvbiwgJ2E9Y2FuZGlkYXRlOicpXG4gICAgICAgICAgLm1hcChmdW5jdGlvbihjYW5kKSB7XG4gICAgICAgICAgICByZXR1cm4gU0RQVXRpbHMucGFyc2VDYW5kaWRhdGUoY2FuZCk7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uKGNhbmQpIHtcbiAgICAgICAgICAgIHJldHVybiBjYW5kLmNvbXBvbmVudCA9PT0gMTtcbiAgICAgICAgICB9KTtcblxuICAgICAgLy8gQ2hlY2sgaWYgd2UgY2FuIHVzZSBCVU5ETEUgYW5kIGRpc3Bvc2UgdHJhbnNwb3J0cy5cbiAgICAgIGlmICgoZGVzY3JpcHRpb24udHlwZSA9PT0gJ29mZmVyJyB8fCBkZXNjcmlwdGlvbi50eXBlID09PSAnYW5zd2VyJykgJiZcbiAgICAgICAgICAhcmVqZWN0ZWQgJiYgdXNpbmdCdW5kbGUgJiYgc2RwTUxpbmVJbmRleCA+IDAgJiZcbiAgICAgICAgICBwYy50cmFuc2NlaXZlcnNbc2RwTUxpbmVJbmRleF0pIHtcbiAgICAgICAgcGMuX2Rpc3Bvc2VJY2VBbmREdGxzVHJhbnNwb3J0cyhzZHBNTGluZUluZGV4KTtcbiAgICAgICAgcGMudHJhbnNjZWl2ZXJzW3NkcE1MaW5lSW5kZXhdLmljZUdhdGhlcmVyID1cbiAgICAgICAgICAgIHBjLnRyYW5zY2VpdmVyc1swXS5pY2VHYXRoZXJlcjtcbiAgICAgICAgcGMudHJhbnNjZWl2ZXJzW3NkcE1MaW5lSW5kZXhdLmljZVRyYW5zcG9ydCA9XG4gICAgICAgICAgICBwYy50cmFuc2NlaXZlcnNbMF0uaWNlVHJhbnNwb3J0O1xuICAgICAgICBwYy50cmFuc2NlaXZlcnNbc2RwTUxpbmVJbmRleF0uZHRsc1RyYW5zcG9ydCA9XG4gICAgICAgICAgICBwYy50cmFuc2NlaXZlcnNbMF0uZHRsc1RyYW5zcG9ydDtcbiAgICAgICAgaWYgKHBjLnRyYW5zY2VpdmVyc1tzZHBNTGluZUluZGV4XS5ydHBTZW5kZXIpIHtcbiAgICAgICAgICBwYy50cmFuc2NlaXZlcnNbc2RwTUxpbmVJbmRleF0ucnRwU2VuZGVyLnNldFRyYW5zcG9ydChcbiAgICAgICAgICAgICAgcGMudHJhbnNjZWl2ZXJzWzBdLmR0bHNUcmFuc3BvcnQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYy50cmFuc2NlaXZlcnNbc2RwTUxpbmVJbmRleF0ucnRwUmVjZWl2ZXIpIHtcbiAgICAgICAgICBwYy50cmFuc2NlaXZlcnNbc2RwTUxpbmVJbmRleF0ucnRwUmVjZWl2ZXIuc2V0VHJhbnNwb3J0KFxuICAgICAgICAgICAgICBwYy50cmFuc2NlaXZlcnNbMF0uZHRsc1RyYW5zcG9ydCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChkZXNjcmlwdGlvbi50eXBlID09PSAnb2ZmZXInICYmICFyZWplY3RlZCkge1xuICAgICAgICB0cmFuc2NlaXZlciA9IHBjLnRyYW5zY2VpdmVyc1tzZHBNTGluZUluZGV4XSB8fFxuICAgICAgICAgICAgcGMuX2NyZWF0ZVRyYW5zY2VpdmVyKGtpbmQpO1xuICAgICAgICB0cmFuc2NlaXZlci5taWQgPSBtaWQ7XG5cbiAgICAgICAgaWYgKCF0cmFuc2NlaXZlci5pY2VHYXRoZXJlcikge1xuICAgICAgICAgIHRyYW5zY2VpdmVyLmljZUdhdGhlcmVyID0gcGMuX2NyZWF0ZUljZUdhdGhlcmVyKHNkcE1MaW5lSW5kZXgsXG4gICAgICAgICAgICAgIHVzaW5nQnVuZGxlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjYW5kcy5sZW5ndGggJiYgdHJhbnNjZWl2ZXIuaWNlVHJhbnNwb3J0LnN0YXRlID09PSAnbmV3Jykge1xuICAgICAgICAgIGlmIChpc0NvbXBsZXRlICYmICghdXNpbmdCdW5kbGUgfHwgc2RwTUxpbmVJbmRleCA9PT0gMCkpIHtcbiAgICAgICAgICAgIHRyYW5zY2VpdmVyLmljZVRyYW5zcG9ydC5zZXRSZW1vdGVDYW5kaWRhdGVzKGNhbmRzKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FuZHMuZm9yRWFjaChmdW5jdGlvbihjYW5kaWRhdGUpIHtcbiAgICAgICAgICAgICAgbWF5YmVBZGRDYW5kaWRhdGUodHJhbnNjZWl2ZXIuaWNlVHJhbnNwb3J0LCBjYW5kaWRhdGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbG9jYWxDYXBhYmlsaXRpZXMgPSB3aW5kb3cuUlRDUnRwUmVjZWl2ZXIuZ2V0Q2FwYWJpbGl0aWVzKGtpbmQpO1xuXG4gICAgICAgIC8vIGZpbHRlciBSVFggdW50aWwgYWRkaXRpb25hbCBzdHVmZiBuZWVkZWQgZm9yIFJUWCBpcyBpbXBsZW1lbnRlZFxuICAgICAgICAvLyBpbiBhZGFwdGVyLmpzXG4gICAgICAgIGlmIChlZGdlVmVyc2lvbiA8IDE1MDE5KSB7XG4gICAgICAgICAgbG9jYWxDYXBhYmlsaXRpZXMuY29kZWNzID0gbG9jYWxDYXBhYmlsaXRpZXMuY29kZWNzLmZpbHRlcihcbiAgICAgICAgICAgICAgZnVuY3Rpb24oY29kZWMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29kZWMubmFtZSAhPT0gJ3J0eCc7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgc2VuZEVuY29kaW5nUGFyYW1ldGVycyA9IHRyYW5zY2VpdmVyLnNlbmRFbmNvZGluZ1BhcmFtZXRlcnMgfHwgW3tcbiAgICAgICAgICBzc3JjOiAoMiAqIHNkcE1MaW5lSW5kZXggKyAyKSAqIDEwMDFcbiAgICAgICAgfV07XG5cbiAgICAgICAgLy8gVE9ETzogcmV3cml0ZSB0byB1c2UgaHR0cDovL3czYy5naXRodWIuaW8vd2VicnRjLXBjLyNzZXQtYXNzb2NpYXRlZC1yZW1vdGUtc3RyZWFtc1xuICAgICAgICB2YXIgaXNOZXdUcmFjayA9IGZhbHNlO1xuICAgICAgICBpZiAoZGlyZWN0aW9uID09PSAnc2VuZHJlY3YnIHx8IGRpcmVjdGlvbiA9PT0gJ3NlbmRvbmx5Jykge1xuICAgICAgICAgIGlzTmV3VHJhY2sgPSAhdHJhbnNjZWl2ZXIucnRwUmVjZWl2ZXI7XG4gICAgICAgICAgcnRwUmVjZWl2ZXIgPSB0cmFuc2NlaXZlci5ydHBSZWNlaXZlciB8fFxuICAgICAgICAgICAgICBuZXcgd2luZG93LlJUQ1J0cFJlY2VpdmVyKHRyYW5zY2VpdmVyLmR0bHNUcmFuc3BvcnQsIGtpbmQpO1xuXG4gICAgICAgICAgaWYgKGlzTmV3VHJhY2spIHtcbiAgICAgICAgICAgIHZhciBzdHJlYW07XG4gICAgICAgICAgICB0cmFjayA9IHJ0cFJlY2VpdmVyLnRyYWNrO1xuICAgICAgICAgICAgLy8gRklYTUU6IGRvZXMgbm90IHdvcmsgd2l0aCBQbGFuIEIuXG4gICAgICAgICAgICBpZiAocmVtb3RlTXNpZCAmJiByZW1vdGVNc2lkLnN0cmVhbSA9PT0gJy0nKSB7XG4gICAgICAgICAgICAgIC8vIG5vLW9wLiBhIHN0cmVhbSBpZCBvZiAnLScgbWVhbnM6IG5vIGFzc29jaWF0ZWQgc3RyZWFtLlxuICAgICAgICAgICAgfSBlbHNlIGlmIChyZW1vdGVNc2lkKSB7XG4gICAgICAgICAgICAgIGlmICghc3RyZWFtc1tyZW1vdGVNc2lkLnN0cmVhbV0pIHtcbiAgICAgICAgICAgICAgICBzdHJlYW1zW3JlbW90ZU1zaWQuc3RyZWFtXSA9IG5ldyB3aW5kb3cuTWVkaWFTdHJlYW0oKTtcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc3RyZWFtc1tyZW1vdGVNc2lkLnN0cmVhbV0sICdpZCcsIHtcbiAgICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZW1vdGVNc2lkLnN0cmVhbTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodHJhY2ssICdpZCcsIHtcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlbW90ZU1zaWQudHJhY2s7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgc3RyZWFtID0gc3RyZWFtc1tyZW1vdGVNc2lkLnN0cmVhbV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpZiAoIXN0cmVhbXMuZGVmYXVsdCkge1xuICAgICAgICAgICAgICAgIHN0cmVhbXMuZGVmYXVsdCA9IG5ldyB3aW5kb3cuTWVkaWFTdHJlYW0oKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBzdHJlYW0gPSBzdHJlYW1zLmRlZmF1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3RyZWFtKSB7XG4gICAgICAgICAgICAgIGFkZFRyYWNrVG9TdHJlYW1BbmRGaXJlRXZlbnQodHJhY2ssIHN0cmVhbSk7XG4gICAgICAgICAgICAgIHRyYW5zY2VpdmVyLmFzc29jaWF0ZWRSZW1vdGVNZWRpYVN0cmVhbXMucHVzaChzdHJlYW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVjZWl2ZXJMaXN0LnB1c2goW3RyYWNrLCBydHBSZWNlaXZlciwgc3RyZWFtXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHRyYW5zY2VpdmVyLnJ0cFJlY2VpdmVyICYmIHRyYW5zY2VpdmVyLnJ0cFJlY2VpdmVyLnRyYWNrKSB7XG4gICAgICAgICAgdHJhbnNjZWl2ZXIuYXNzb2NpYXRlZFJlbW90ZU1lZGlhU3RyZWFtcy5mb3JFYWNoKGZ1bmN0aW9uKHMpIHtcbiAgICAgICAgICAgIHZhciBuYXRpdmVUcmFjayA9IHMuZ2V0VHJhY2tzKCkuZmluZChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgIHJldHVybiB0LmlkID09PSB0cmFuc2NlaXZlci5ydHBSZWNlaXZlci50cmFjay5pZDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKG5hdGl2ZVRyYWNrKSB7XG4gICAgICAgICAgICAgIHJlbW92ZVRyYWNrRnJvbVN0cmVhbUFuZEZpcmVFdmVudChuYXRpdmVUcmFjaywgcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdHJhbnNjZWl2ZXIuYXNzb2NpYXRlZFJlbW90ZU1lZGlhU3RyZWFtcyA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgdHJhbnNjZWl2ZXIubG9jYWxDYXBhYmlsaXRpZXMgPSBsb2NhbENhcGFiaWxpdGllcztcbiAgICAgICAgdHJhbnNjZWl2ZXIucmVtb3RlQ2FwYWJpbGl0aWVzID0gcmVtb3RlQ2FwYWJpbGl0aWVzO1xuICAgICAgICB0cmFuc2NlaXZlci5ydHBSZWNlaXZlciA9IHJ0cFJlY2VpdmVyO1xuICAgICAgICB0cmFuc2NlaXZlci5ydGNwUGFyYW1ldGVycyA9IHJ0Y3BQYXJhbWV0ZXJzO1xuICAgICAgICB0cmFuc2NlaXZlci5zZW5kRW5jb2RpbmdQYXJhbWV0ZXJzID0gc2VuZEVuY29kaW5nUGFyYW1ldGVycztcbiAgICAgICAgdHJhbnNjZWl2ZXIucmVjdkVuY29kaW5nUGFyYW1ldGVycyA9IHJlY3ZFbmNvZGluZ1BhcmFtZXRlcnM7XG5cbiAgICAgICAgLy8gU3RhcnQgdGhlIFJUQ1J0cFJlY2VpdmVyIG5vdy4gVGhlIFJUUFNlbmRlciBpcyBzdGFydGVkIGluXG4gICAgICAgIC8vIHNldExvY2FsRGVzY3JpcHRpb24uXG4gICAgICAgIHBjLl90cmFuc2NlaXZlKHBjLnRyYW5zY2VpdmVyc1tzZHBNTGluZUluZGV4XSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgaXNOZXdUcmFjayk7XG4gICAgICB9IGVsc2UgaWYgKGRlc2NyaXB0aW9uLnR5cGUgPT09ICdhbnN3ZXInICYmICFyZWplY3RlZCkge1xuICAgICAgICB0cmFuc2NlaXZlciA9IHBjLnRyYW5zY2VpdmVyc1tzZHBNTGluZUluZGV4XTtcbiAgICAgICAgaWNlR2F0aGVyZXIgPSB0cmFuc2NlaXZlci5pY2VHYXRoZXJlcjtcbiAgICAgICAgaWNlVHJhbnNwb3J0ID0gdHJhbnNjZWl2ZXIuaWNlVHJhbnNwb3J0O1xuICAgICAgICBkdGxzVHJhbnNwb3J0ID0gdHJhbnNjZWl2ZXIuZHRsc1RyYW5zcG9ydDtcbiAgICAgICAgcnRwUmVjZWl2ZXIgPSB0cmFuc2NlaXZlci5ydHBSZWNlaXZlcjtcbiAgICAgICAgc2VuZEVuY29kaW5nUGFyYW1ldGVycyA9IHRyYW5zY2VpdmVyLnNlbmRFbmNvZGluZ1BhcmFtZXRlcnM7XG4gICAgICAgIGxvY2FsQ2FwYWJpbGl0aWVzID0gdHJhbnNjZWl2ZXIubG9jYWxDYXBhYmlsaXRpZXM7XG5cbiAgICAgICAgcGMudHJhbnNjZWl2ZXJzW3NkcE1MaW5lSW5kZXhdLnJlY3ZFbmNvZGluZ1BhcmFtZXRlcnMgPVxuICAgICAgICAgICAgcmVjdkVuY29kaW5nUGFyYW1ldGVycztcbiAgICAgICAgcGMudHJhbnNjZWl2ZXJzW3NkcE1MaW5lSW5kZXhdLnJlbW90ZUNhcGFiaWxpdGllcyA9XG4gICAgICAgICAgICByZW1vdGVDYXBhYmlsaXRpZXM7XG4gICAgICAgIHBjLnRyYW5zY2VpdmVyc1tzZHBNTGluZUluZGV4XS5ydGNwUGFyYW1ldGVycyA9IHJ0Y3BQYXJhbWV0ZXJzO1xuXG4gICAgICAgIGlmIChjYW5kcy5sZW5ndGggJiYgaWNlVHJhbnNwb3J0LnN0YXRlID09PSAnbmV3Jykge1xuICAgICAgICAgIGlmICgoaXNJY2VMaXRlIHx8IGlzQ29tcGxldGUpICYmXG4gICAgICAgICAgICAgICghdXNpbmdCdW5kbGUgfHwgc2RwTUxpbmVJbmRleCA9PT0gMCkpIHtcbiAgICAgICAgICAgIGljZVRyYW5zcG9ydC5zZXRSZW1vdGVDYW5kaWRhdGVzKGNhbmRzKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FuZHMuZm9yRWFjaChmdW5jdGlvbihjYW5kaWRhdGUpIHtcbiAgICAgICAgICAgICAgbWF5YmVBZGRDYW5kaWRhdGUodHJhbnNjZWl2ZXIuaWNlVHJhbnNwb3J0LCBjYW5kaWRhdGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF1c2luZ0J1bmRsZSB8fCBzZHBNTGluZUluZGV4ID09PSAwKSB7XG4gICAgICAgICAgaWYgKGljZVRyYW5zcG9ydC5zdGF0ZSA9PT0gJ25ldycpIHtcbiAgICAgICAgICAgIGljZVRyYW5zcG9ydC5zdGFydChpY2VHYXRoZXJlciwgcmVtb3RlSWNlUGFyYW1ldGVycyxcbiAgICAgICAgICAgICAgICAnY29udHJvbGxpbmcnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGR0bHNUcmFuc3BvcnQuc3RhdGUgPT09ICduZXcnKSB7XG4gICAgICAgICAgICBkdGxzVHJhbnNwb3J0LnN0YXJ0KHJlbW90ZUR0bHNQYXJhbWV0ZXJzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiB0aGUgb2ZmZXIgY29udGFpbmVkIFJUWCBidXQgdGhlIGFuc3dlciBkaWQgbm90LFxuICAgICAgICAvLyByZW1vdmUgUlRYIGZyb20gc2VuZEVuY29kaW5nUGFyYW1ldGVycy5cbiAgICAgICAgdmFyIGNvbW1vbkNhcGFiaWxpdGllcyA9IGdldENvbW1vbkNhcGFiaWxpdGllcyhcbiAgICAgICAgICB0cmFuc2NlaXZlci5sb2NhbENhcGFiaWxpdGllcyxcbiAgICAgICAgICB0cmFuc2NlaXZlci5yZW1vdGVDYXBhYmlsaXRpZXMpO1xuXG4gICAgICAgIHZhciBoYXNSdHggPSBjb21tb25DYXBhYmlsaXRpZXMuY29kZWNzLmZpbHRlcihmdW5jdGlvbihjKSB7XG4gICAgICAgICAgcmV0dXJuIGMubmFtZS50b0xvd2VyQ2FzZSgpID09PSAncnR4JztcbiAgICAgICAgfSkubGVuZ3RoO1xuICAgICAgICBpZiAoIWhhc1J0eCAmJiB0cmFuc2NlaXZlci5zZW5kRW5jb2RpbmdQYXJhbWV0ZXJzWzBdLnJ0eCkge1xuICAgICAgICAgIGRlbGV0ZSB0cmFuc2NlaXZlci5zZW5kRW5jb2RpbmdQYXJhbWV0ZXJzWzBdLnJ0eDtcbiAgICAgICAgfVxuXG4gICAgICAgIHBjLl90cmFuc2NlaXZlKHRyYW5zY2VpdmVyLFxuICAgICAgICAgICAgZGlyZWN0aW9uID09PSAnc2VuZHJlY3YnIHx8IGRpcmVjdGlvbiA9PT0gJ3JlY3Zvbmx5JyxcbiAgICAgICAgICAgIGRpcmVjdGlvbiA9PT0gJ3NlbmRyZWN2JyB8fCBkaXJlY3Rpb24gPT09ICdzZW5kb25seScpO1xuXG4gICAgICAgIC8vIFRPRE86IHJld3JpdGUgdG8gdXNlIGh0dHA6Ly93M2MuZ2l0aHViLmlvL3dlYnJ0Yy1wYy8jc2V0LWFzc29jaWF0ZWQtcmVtb3RlLXN0cmVhbXNcbiAgICAgICAgaWYgKHJ0cFJlY2VpdmVyICYmXG4gICAgICAgICAgICAoZGlyZWN0aW9uID09PSAnc2VuZHJlY3YnIHx8IGRpcmVjdGlvbiA9PT0gJ3NlbmRvbmx5JykpIHtcbiAgICAgICAgICB0cmFjayA9IHJ0cFJlY2VpdmVyLnRyYWNrO1xuICAgICAgICAgIGlmIChyZW1vdGVNc2lkKSB7XG4gICAgICAgICAgICBpZiAoIXN0cmVhbXNbcmVtb3RlTXNpZC5zdHJlYW1dKSB7XG4gICAgICAgICAgICAgIHN0cmVhbXNbcmVtb3RlTXNpZC5zdHJlYW1dID0gbmV3IHdpbmRvdy5NZWRpYVN0cmVhbSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWRkVHJhY2tUb1N0cmVhbUFuZEZpcmVFdmVudCh0cmFjaywgc3RyZWFtc1tyZW1vdGVNc2lkLnN0cmVhbV0pO1xuICAgICAgICAgICAgcmVjZWl2ZXJMaXN0LnB1c2goW3RyYWNrLCBydHBSZWNlaXZlciwgc3RyZWFtc1tyZW1vdGVNc2lkLnN0cmVhbV1dKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFzdHJlYW1zLmRlZmF1bHQpIHtcbiAgICAgICAgICAgICAgc3RyZWFtcy5kZWZhdWx0ID0gbmV3IHdpbmRvdy5NZWRpYVN0cmVhbSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWRkVHJhY2tUb1N0cmVhbUFuZEZpcmVFdmVudCh0cmFjaywgc3RyZWFtcy5kZWZhdWx0KTtcbiAgICAgICAgICAgIHJlY2VpdmVyTGlzdC5wdXNoKFt0cmFjaywgcnRwUmVjZWl2ZXIsIHN0cmVhbXMuZGVmYXVsdF0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBGSVhNRTogYWN0dWFsbHkgdGhlIHJlY2VpdmVyIHNob3VsZCBiZSBjcmVhdGVkIGxhdGVyLlxuICAgICAgICAgIGRlbGV0ZSB0cmFuc2NlaXZlci5ydHBSZWNlaXZlcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKHBjLl9kdGxzUm9sZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBwYy5fZHRsc1JvbGUgPSBkZXNjcmlwdGlvbi50eXBlID09PSAnb2ZmZXInID8gJ2FjdGl2ZScgOiAncGFzc2l2ZSc7XG4gICAgfVxuXG4gICAgcGMuX3JlbW90ZURlc2NyaXB0aW9uID0ge1xuICAgICAgdHlwZTogZGVzY3JpcHRpb24udHlwZSxcbiAgICAgIHNkcDogZGVzY3JpcHRpb24uc2RwXG4gICAgfTtcbiAgICBpZiAoZGVzY3JpcHRpb24udHlwZSA9PT0gJ29mZmVyJykge1xuICAgICAgcGMuX3VwZGF0ZVNpZ25hbGluZ1N0YXRlKCdoYXZlLXJlbW90ZS1vZmZlcicpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYy5fdXBkYXRlU2lnbmFsaW5nU3RhdGUoJ3N0YWJsZScpO1xuICAgIH1cbiAgICBPYmplY3Qua2V5cyhzdHJlYW1zKS5mb3JFYWNoKGZ1bmN0aW9uKHNpZCkge1xuICAgICAgdmFyIHN0cmVhbSA9IHN0cmVhbXNbc2lkXTtcbiAgICAgIGlmIChzdHJlYW0uZ2V0VHJhY2tzKCkubGVuZ3RoKSB7XG4gICAgICAgIGlmIChwYy5yZW1vdGVTdHJlYW1zLmluZGV4T2Yoc3RyZWFtKSA9PT0gLTEpIHtcbiAgICAgICAgICBwYy5yZW1vdGVTdHJlYW1zLnB1c2goc3RyZWFtKTtcbiAgICAgICAgICB2YXIgZXZlbnQgPSBuZXcgRXZlbnQoJ2FkZHN0cmVhbScpO1xuICAgICAgICAgIGV2ZW50LnN0cmVhbSA9IHN0cmVhbTtcbiAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHBjLl9kaXNwYXRjaEV2ZW50KCdhZGRzdHJlYW0nLCBldmVudCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZWNlaXZlckxpc3QuZm9yRWFjaChmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgICAgdmFyIHRyYWNrID0gaXRlbVswXTtcbiAgICAgICAgICB2YXIgcmVjZWl2ZXIgPSBpdGVtWzFdO1xuICAgICAgICAgIGlmIChzdHJlYW0uaWQgIT09IGl0ZW1bMl0uaWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgZmlyZUFkZFRyYWNrKHBjLCB0cmFjaywgcmVjZWl2ZXIsIFtzdHJlYW1dKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmVjZWl2ZXJMaXN0LmZvckVhY2goZnVuY3Rpb24oaXRlbSkge1xuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZmlyZUFkZFRyYWNrKHBjLCBpdGVtWzBdLCBpdGVtWzFdLCBbXSk7XG4gICAgfSk7XG5cbiAgICAvLyBjaGVjayB3aGV0aGVyIGFkZEljZUNhbmRpZGF0ZSh7fSkgd2FzIGNhbGxlZCB3aXRoaW4gZm91ciBzZWNvbmRzIGFmdGVyXG4gICAgLy8gc2V0UmVtb3RlRGVzY3JpcHRpb24uXG4gICAgd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoIShwYyAmJiBwYy50cmFuc2NlaXZlcnMpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHBjLnRyYW5zY2VpdmVycy5mb3JFYWNoKGZ1bmN0aW9uKHRyYW5zY2VpdmVyKSB7XG4gICAgICAgIGlmICh0cmFuc2NlaXZlci5pY2VUcmFuc3BvcnQgJiZcbiAgICAgICAgICAgIHRyYW5zY2VpdmVyLmljZVRyYW5zcG9ydC5zdGF0ZSA9PT0gJ25ldycgJiZcbiAgICAgICAgICAgIHRyYW5zY2VpdmVyLmljZVRyYW5zcG9ydC5nZXRSZW1vdGVDYW5kaWRhdGVzKCkubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGNvbnNvbGUud2FybignVGltZW91dCBmb3IgYWRkUmVtb3RlQ2FuZGlkYXRlLiBDb25zaWRlciBzZW5kaW5nICcgK1xuICAgICAgICAgICAgICAnYW4gZW5kLW9mLWNhbmRpZGF0ZXMgbm90aWZpY2F0aW9uJyk7XG4gICAgICAgICAgdHJhbnNjZWl2ZXIuaWNlVHJhbnNwb3J0LmFkZFJlbW90ZUNhbmRpZGF0ZSh7fSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sIDQwMDApO1xuXG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICB9O1xuXG4gIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMudHJhbnNjZWl2ZXJzLmZvckVhY2goZnVuY3Rpb24odHJhbnNjZWl2ZXIpIHtcbiAgICAgIC8qIG5vdCB5ZXRcbiAgICAgIGlmICh0cmFuc2NlaXZlci5pY2VHYXRoZXJlcikge1xuICAgICAgICB0cmFuc2NlaXZlci5pY2VHYXRoZXJlci5jbG9zZSgpO1xuICAgICAgfVxuICAgICAgKi9cbiAgICAgIGlmICh0cmFuc2NlaXZlci5pY2VUcmFuc3BvcnQpIHtcbiAgICAgICAgdHJhbnNjZWl2ZXIuaWNlVHJhbnNwb3J0LnN0b3AoKTtcbiAgICAgIH1cbiAgICAgIGlmICh0cmFuc2NlaXZlci5kdGxzVHJhbnNwb3J0KSB7XG4gICAgICAgIHRyYW5zY2VpdmVyLmR0bHNUcmFuc3BvcnQuc3RvcCgpO1xuICAgICAgfVxuICAgICAgaWYgKHRyYW5zY2VpdmVyLnJ0cFNlbmRlcikge1xuICAgICAgICB0cmFuc2NlaXZlci5ydHBTZW5kZXIuc3RvcCgpO1xuICAgICAgfVxuICAgICAgaWYgKHRyYW5zY2VpdmVyLnJ0cFJlY2VpdmVyKSB7XG4gICAgICAgIHRyYW5zY2VpdmVyLnJ0cFJlY2VpdmVyLnN0b3AoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICAvLyBGSVhNRTogY2xlYW4gdXAgdHJhY2tzLCBsb2NhbCBzdHJlYW1zLCByZW1vdGUgc3RyZWFtcywgZXRjXG4gICAgdGhpcy5faXNDbG9zZWQgPSB0cnVlO1xuICAgIHRoaXMuX3VwZGF0ZVNpZ25hbGluZ1N0YXRlKCdjbG9zZWQnKTtcbiAgfTtcblxuICAvLyBVcGRhdGUgdGhlIHNpZ25hbGluZyBzdGF0ZS5cbiAgUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLl91cGRhdGVTaWduYWxpbmdTdGF0ZSA9IGZ1bmN0aW9uKG5ld1N0YXRlKSB7XG4gICAgdGhpcy5zaWduYWxpbmdTdGF0ZSA9IG5ld1N0YXRlO1xuICAgIHZhciBldmVudCA9IG5ldyBFdmVudCgnc2lnbmFsaW5nc3RhdGVjaGFuZ2UnKTtcbiAgICB0aGlzLl9kaXNwYXRjaEV2ZW50KCdzaWduYWxpbmdzdGF0ZWNoYW5nZScsIGV2ZW50KTtcbiAgfTtcblxuICAvLyBEZXRlcm1pbmUgd2hldGhlciB0byBmaXJlIHRoZSBuZWdvdGlhdGlvbm5lZWRlZCBldmVudC5cbiAgUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLl9tYXliZUZpcmVOZWdvdGlhdGlvbk5lZWRlZCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBwYyA9IHRoaXM7XG4gICAgaWYgKHRoaXMuc2lnbmFsaW5nU3RhdGUgIT09ICdzdGFibGUnIHx8IHRoaXMubmVlZE5lZ290aWF0aW9uID09PSB0cnVlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMubmVlZE5lZ290aWF0aW9uID0gdHJ1ZTtcbiAgICB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgIGlmIChwYy5uZWVkTmVnb3RpYXRpb24pIHtcbiAgICAgICAgcGMubmVlZE5lZ290aWF0aW9uID0gZmFsc2U7XG4gICAgICAgIHZhciBldmVudCA9IG5ldyBFdmVudCgnbmVnb3RpYXRpb25uZWVkZWQnKTtcbiAgICAgICAgcGMuX2Rpc3BhdGNoRXZlbnQoJ25lZ290aWF0aW9ubmVlZGVkJywgZXZlbnQpO1xuICAgICAgfVxuICAgIH0sIDApO1xuICB9O1xuXG4gIC8vIFVwZGF0ZSB0aGUgaWNlIGNvbm5lY3Rpb24gc3RhdGUuXG4gIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5fdXBkYXRlSWNlQ29ubmVjdGlvblN0YXRlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG5ld1N0YXRlO1xuICAgIHZhciBzdGF0ZXMgPSB7XG4gICAgICAnbmV3JzogMCxcbiAgICAgIGNsb3NlZDogMCxcbiAgICAgIGNoZWNraW5nOiAwLFxuICAgICAgY29ubmVjdGVkOiAwLFxuICAgICAgY29tcGxldGVkOiAwLFxuICAgICAgZGlzY29ubmVjdGVkOiAwLFxuICAgICAgZmFpbGVkOiAwXG4gICAgfTtcbiAgICB0aGlzLnRyYW5zY2VpdmVycy5mb3JFYWNoKGZ1bmN0aW9uKHRyYW5zY2VpdmVyKSB7XG4gICAgICBpZiAodHJhbnNjZWl2ZXIuaWNlVHJhbnNwb3J0ICYmICF0cmFuc2NlaXZlci5yZWplY3RlZCkge1xuICAgICAgICBzdGF0ZXNbdHJhbnNjZWl2ZXIuaWNlVHJhbnNwb3J0LnN0YXRlXSsrO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgbmV3U3RhdGUgPSAnbmV3JztcbiAgICBpZiAoc3RhdGVzLmZhaWxlZCA+IDApIHtcbiAgICAgIG5ld1N0YXRlID0gJ2ZhaWxlZCc7XG4gICAgfSBlbHNlIGlmIChzdGF0ZXMuY2hlY2tpbmcgPiAwKSB7XG4gICAgICBuZXdTdGF0ZSA9ICdjaGVja2luZyc7XG4gICAgfSBlbHNlIGlmIChzdGF0ZXMuZGlzY29ubmVjdGVkID4gMCkge1xuICAgICAgbmV3U3RhdGUgPSAnZGlzY29ubmVjdGVkJztcbiAgICB9IGVsc2UgaWYgKHN0YXRlcy5uZXcgPiAwKSB7XG4gICAgICBuZXdTdGF0ZSA9ICduZXcnO1xuICAgIH0gZWxzZSBpZiAoc3RhdGVzLmNvbm5lY3RlZCA+IDApIHtcbiAgICAgIG5ld1N0YXRlID0gJ2Nvbm5lY3RlZCc7XG4gICAgfSBlbHNlIGlmIChzdGF0ZXMuY29tcGxldGVkID4gMCkge1xuICAgICAgbmV3U3RhdGUgPSAnY29tcGxldGVkJztcbiAgICB9XG5cbiAgICBpZiAobmV3U3RhdGUgIT09IHRoaXMuaWNlQ29ubmVjdGlvblN0YXRlKSB7XG4gICAgICB0aGlzLmljZUNvbm5lY3Rpb25TdGF0ZSA9IG5ld1N0YXRlO1xuICAgICAgdmFyIGV2ZW50ID0gbmV3IEV2ZW50KCdpY2Vjb25uZWN0aW9uc3RhdGVjaGFuZ2UnKTtcbiAgICAgIHRoaXMuX2Rpc3BhdGNoRXZlbnQoJ2ljZWNvbm5lY3Rpb25zdGF0ZWNoYW5nZScsIGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgLy8gVXBkYXRlIHRoZSBjb25uZWN0aW9uIHN0YXRlLlxuICBSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuX3VwZGF0ZUNvbm5lY3Rpb25TdGF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBuZXdTdGF0ZTtcbiAgICB2YXIgc3RhdGVzID0ge1xuICAgICAgJ25ldyc6IDAsXG4gICAgICBjbG9zZWQ6IDAsXG4gICAgICBjb25uZWN0aW5nOiAwLFxuICAgICAgY29ubmVjdGVkOiAwLFxuICAgICAgY29tcGxldGVkOiAwLFxuICAgICAgZGlzY29ubmVjdGVkOiAwLFxuICAgICAgZmFpbGVkOiAwXG4gICAgfTtcbiAgICB0aGlzLnRyYW5zY2VpdmVycy5mb3JFYWNoKGZ1bmN0aW9uKHRyYW5zY2VpdmVyKSB7XG4gICAgICBpZiAodHJhbnNjZWl2ZXIuaWNlVHJhbnNwb3J0ICYmIHRyYW5zY2VpdmVyLmR0bHNUcmFuc3BvcnQgJiZcbiAgICAgICAgICAhdHJhbnNjZWl2ZXIucmVqZWN0ZWQpIHtcbiAgICAgICAgc3RhdGVzW3RyYW5zY2VpdmVyLmljZVRyYW5zcG9ydC5zdGF0ZV0rKztcbiAgICAgICAgc3RhdGVzW3RyYW5zY2VpdmVyLmR0bHNUcmFuc3BvcnQuc3RhdGVdKys7XG4gICAgICB9XG4gICAgfSk7XG4gICAgLy8gSUNFVHJhbnNwb3J0LmNvbXBsZXRlZCBhbmQgY29ubmVjdGVkIGFyZSB0aGUgc2FtZSBmb3IgdGhpcyBwdXJwb3NlLlxuICAgIHN0YXRlcy5jb25uZWN0ZWQgKz0gc3RhdGVzLmNvbXBsZXRlZDtcblxuICAgIG5ld1N0YXRlID0gJ25ldyc7XG4gICAgaWYgKHN0YXRlcy5mYWlsZWQgPiAwKSB7XG4gICAgICBuZXdTdGF0ZSA9ICdmYWlsZWQnO1xuICAgIH0gZWxzZSBpZiAoc3RhdGVzLmNvbm5lY3RpbmcgPiAwKSB7XG4gICAgICBuZXdTdGF0ZSA9ICdjb25uZWN0aW5nJztcbiAgICB9IGVsc2UgaWYgKHN0YXRlcy5kaXNjb25uZWN0ZWQgPiAwKSB7XG4gICAgICBuZXdTdGF0ZSA9ICdkaXNjb25uZWN0ZWQnO1xuICAgIH0gZWxzZSBpZiAoc3RhdGVzLm5ldyA+IDApIHtcbiAgICAgIG5ld1N0YXRlID0gJ25ldyc7XG4gICAgfSBlbHNlIGlmIChzdGF0ZXMuY29ubmVjdGVkID4gMCkge1xuICAgICAgbmV3U3RhdGUgPSAnY29ubmVjdGVkJztcbiAgICB9XG5cbiAgICBpZiAobmV3U3RhdGUgIT09IHRoaXMuY29ubmVjdGlvblN0YXRlKSB7XG4gICAgICB0aGlzLmNvbm5lY3Rpb25TdGF0ZSA9IG5ld1N0YXRlO1xuICAgICAgdmFyIGV2ZW50ID0gbmV3IEV2ZW50KCdjb25uZWN0aW9uc3RhdGVjaGFuZ2UnKTtcbiAgICAgIHRoaXMuX2Rpc3BhdGNoRXZlbnQoJ2Nvbm5lY3Rpb25zdGF0ZWNoYW5nZScsIGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmNyZWF0ZU9mZmVyID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHBjID0gdGhpcztcblxuICAgIGlmIChwYy5faXNDbG9zZWQpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChtYWtlRXJyb3IoJ0ludmFsaWRTdGF0ZUVycm9yJyxcbiAgICAgICAgICAnQ2FuIG5vdCBjYWxsIGNyZWF0ZU9mZmVyIGFmdGVyIGNsb3NlJykpO1xuICAgIH1cblxuICAgIHZhciBudW1BdWRpb1RyYWNrcyA9IHBjLnRyYW5zY2VpdmVycy5maWx0ZXIoZnVuY3Rpb24odCkge1xuICAgICAgcmV0dXJuIHQua2luZCA9PT0gJ2F1ZGlvJztcbiAgICB9KS5sZW5ndGg7XG4gICAgdmFyIG51bVZpZGVvVHJhY2tzID0gcGMudHJhbnNjZWl2ZXJzLmZpbHRlcihmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gdC5raW5kID09PSAndmlkZW8nO1xuICAgIH0pLmxlbmd0aDtcblxuICAgIC8vIERldGVybWluZSBudW1iZXIgb2YgYXVkaW8gYW5kIHZpZGVvIHRyYWNrcyB3ZSBuZWVkIHRvIHNlbmQvcmVjdi5cbiAgICB2YXIgb2ZmZXJPcHRpb25zID0gYXJndW1lbnRzWzBdO1xuICAgIGlmIChvZmZlck9wdGlvbnMpIHtcbiAgICAgIC8vIFJlamVjdCBDaHJvbWUgbGVnYWN5IGNvbnN0cmFpbnRzLlxuICAgICAgaWYgKG9mZmVyT3B0aW9ucy5tYW5kYXRvcnkgfHwgb2ZmZXJPcHRpb25zLm9wdGlvbmFsKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgICAnTGVnYWN5IG1hbmRhdG9yeS9vcHRpb25hbCBjb25zdHJhaW50cyBub3Qgc3VwcG9ydGVkLicpO1xuICAgICAgfVxuICAgICAgaWYgKG9mZmVyT3B0aW9ucy5vZmZlclRvUmVjZWl2ZUF1ZGlvICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKG9mZmVyT3B0aW9ucy5vZmZlclRvUmVjZWl2ZUF1ZGlvID09PSB0cnVlKSB7XG4gICAgICAgICAgbnVtQXVkaW9UcmFja3MgPSAxO1xuICAgICAgICB9IGVsc2UgaWYgKG9mZmVyT3B0aW9ucy5vZmZlclRvUmVjZWl2ZUF1ZGlvID09PSBmYWxzZSkge1xuICAgICAgICAgIG51bUF1ZGlvVHJhY2tzID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBudW1BdWRpb1RyYWNrcyA9IG9mZmVyT3B0aW9ucy5vZmZlclRvUmVjZWl2ZUF1ZGlvO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAob2ZmZXJPcHRpb25zLm9mZmVyVG9SZWNlaXZlVmlkZW8gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAob2ZmZXJPcHRpb25zLm9mZmVyVG9SZWNlaXZlVmlkZW8gPT09IHRydWUpIHtcbiAgICAgICAgICBudW1WaWRlb1RyYWNrcyA9IDE7XG4gICAgICAgIH0gZWxzZSBpZiAob2ZmZXJPcHRpb25zLm9mZmVyVG9SZWNlaXZlVmlkZW8gPT09IGZhbHNlKSB7XG4gICAgICAgICAgbnVtVmlkZW9UcmFja3MgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG51bVZpZGVvVHJhY2tzID0gb2ZmZXJPcHRpb25zLm9mZmVyVG9SZWNlaXZlVmlkZW87XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBwYy50cmFuc2NlaXZlcnMuZm9yRWFjaChmdW5jdGlvbih0cmFuc2NlaXZlcikge1xuICAgICAgaWYgKHRyYW5zY2VpdmVyLmtpbmQgPT09ICdhdWRpbycpIHtcbiAgICAgICAgbnVtQXVkaW9UcmFja3MtLTtcbiAgICAgICAgaWYgKG51bUF1ZGlvVHJhY2tzIDwgMCkge1xuICAgICAgICAgIHRyYW5zY2VpdmVyLndhbnRSZWNlaXZlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHJhbnNjZWl2ZXIua2luZCA9PT0gJ3ZpZGVvJykge1xuICAgICAgICBudW1WaWRlb1RyYWNrcy0tO1xuICAgICAgICBpZiAobnVtVmlkZW9UcmFja3MgPCAwKSB7XG4gICAgICAgICAgdHJhbnNjZWl2ZXIud2FudFJlY2VpdmUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gQ3JlYXRlIE0tbGluZXMgZm9yIHJlY3Zvbmx5IHN0cmVhbXMuXG4gICAgd2hpbGUgKG51bUF1ZGlvVHJhY2tzID4gMCB8fCBudW1WaWRlb1RyYWNrcyA+IDApIHtcbiAgICAgIGlmIChudW1BdWRpb1RyYWNrcyA+IDApIHtcbiAgICAgICAgcGMuX2NyZWF0ZVRyYW5zY2VpdmVyKCdhdWRpbycpO1xuICAgICAgICBudW1BdWRpb1RyYWNrcy0tO1xuICAgICAgfVxuICAgICAgaWYgKG51bVZpZGVvVHJhY2tzID4gMCkge1xuICAgICAgICBwYy5fY3JlYXRlVHJhbnNjZWl2ZXIoJ3ZpZGVvJyk7XG4gICAgICAgIG51bVZpZGVvVHJhY2tzLS07XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHNkcCA9IFNEUFV0aWxzLndyaXRlU2Vzc2lvbkJvaWxlcnBsYXRlKHBjLl9zZHBTZXNzaW9uSWQsXG4gICAgICAgIHBjLl9zZHBTZXNzaW9uVmVyc2lvbisrKTtcbiAgICBwYy50cmFuc2NlaXZlcnMuZm9yRWFjaChmdW5jdGlvbih0cmFuc2NlaXZlciwgc2RwTUxpbmVJbmRleCkge1xuICAgICAgLy8gRm9yIGVhY2ggdHJhY2ssIGNyZWF0ZSBhbiBpY2UgZ2F0aGVyZXIsIGljZSB0cmFuc3BvcnQsXG4gICAgICAvLyBkdGxzIHRyYW5zcG9ydCwgcG90ZW50aWFsbHkgcnRwc2VuZGVyIGFuZCBydHByZWNlaXZlci5cbiAgICAgIHZhciB0cmFjayA9IHRyYW5zY2VpdmVyLnRyYWNrO1xuICAgICAgdmFyIGtpbmQgPSB0cmFuc2NlaXZlci5raW5kO1xuICAgICAgdmFyIG1pZCA9IHRyYW5zY2VpdmVyLm1pZCB8fCBTRFBVdGlscy5nZW5lcmF0ZUlkZW50aWZpZXIoKTtcbiAgICAgIHRyYW5zY2VpdmVyLm1pZCA9IG1pZDtcblxuICAgICAgaWYgKCF0cmFuc2NlaXZlci5pY2VHYXRoZXJlcikge1xuICAgICAgICB0cmFuc2NlaXZlci5pY2VHYXRoZXJlciA9IHBjLl9jcmVhdGVJY2VHYXRoZXJlcihzZHBNTGluZUluZGV4LFxuICAgICAgICAgICAgcGMudXNpbmdCdW5kbGUpO1xuICAgICAgfVxuXG4gICAgICB2YXIgbG9jYWxDYXBhYmlsaXRpZXMgPSB3aW5kb3cuUlRDUnRwU2VuZGVyLmdldENhcGFiaWxpdGllcyhraW5kKTtcbiAgICAgIC8vIGZpbHRlciBSVFggdW50aWwgYWRkaXRpb25hbCBzdHVmZiBuZWVkZWQgZm9yIFJUWCBpcyBpbXBsZW1lbnRlZFxuICAgICAgLy8gaW4gYWRhcHRlci5qc1xuICAgICAgaWYgKGVkZ2VWZXJzaW9uIDwgMTUwMTkpIHtcbiAgICAgICAgbG9jYWxDYXBhYmlsaXRpZXMuY29kZWNzID0gbG9jYWxDYXBhYmlsaXRpZXMuY29kZWNzLmZpbHRlcihcbiAgICAgICAgICAgIGZ1bmN0aW9uKGNvZGVjKSB7XG4gICAgICAgICAgICAgIHJldHVybiBjb2RlYy5uYW1lICE9PSAncnR4JztcbiAgICAgICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgbG9jYWxDYXBhYmlsaXRpZXMuY29kZWNzLmZvckVhY2goZnVuY3Rpb24oY29kZWMpIHtcbiAgICAgICAgLy8gd29yayBhcm91bmQgaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3dlYnJ0Yy9pc3N1ZXMvZGV0YWlsP2lkPTY1NTJcbiAgICAgICAgLy8gYnkgYWRkaW5nIGxldmVsLWFzeW1tZXRyeS1hbGxvd2VkPTFcbiAgICAgICAgaWYgKGNvZGVjLm5hbWUgPT09ICdIMjY0JyAmJlxuICAgICAgICAgICAgY29kZWMucGFyYW1ldGVyc1snbGV2ZWwtYXN5bW1ldHJ5LWFsbG93ZWQnXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgY29kZWMucGFyYW1ldGVyc1snbGV2ZWwtYXN5bW1ldHJ5LWFsbG93ZWQnXSA9ICcxJztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGZvciBzdWJzZXF1ZW50IG9mZmVycywgd2UgbWlnaHQgaGF2ZSB0byByZS11c2UgdGhlIHBheWxvYWRcbiAgICAgICAgLy8gdHlwZSBvZiB0aGUgbGFzdCBvZmZlci5cbiAgICAgICAgaWYgKHRyYW5zY2VpdmVyLnJlbW90ZUNhcGFiaWxpdGllcyAmJlxuICAgICAgICAgICAgdHJhbnNjZWl2ZXIucmVtb3RlQ2FwYWJpbGl0aWVzLmNvZGVjcykge1xuICAgICAgICAgIHRyYW5zY2VpdmVyLnJlbW90ZUNhcGFiaWxpdGllcy5jb2RlY3MuZm9yRWFjaChmdW5jdGlvbihyZW1vdGVDb2RlYykge1xuICAgICAgICAgICAgaWYgKGNvZGVjLm5hbWUudG9Mb3dlckNhc2UoKSA9PT0gcmVtb3RlQ29kZWMubmFtZS50b0xvd2VyQ2FzZSgpICYmXG4gICAgICAgICAgICAgICAgY29kZWMuY2xvY2tSYXRlID09PSByZW1vdGVDb2RlYy5jbG9ja1JhdGUpIHtcbiAgICAgICAgICAgICAgY29kZWMucHJlZmVycmVkUGF5bG9hZFR5cGUgPSByZW1vdGVDb2RlYy5wYXlsb2FkVHlwZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBsb2NhbENhcGFiaWxpdGllcy5oZWFkZXJFeHRlbnNpb25zLmZvckVhY2goZnVuY3Rpb24oaGRyRXh0KSB7XG4gICAgICAgIHZhciByZW1vdGVFeHRlbnNpb25zID0gdHJhbnNjZWl2ZXIucmVtb3RlQ2FwYWJpbGl0aWVzICYmXG4gICAgICAgICAgICB0cmFuc2NlaXZlci5yZW1vdGVDYXBhYmlsaXRpZXMuaGVhZGVyRXh0ZW5zaW9ucyB8fCBbXTtcbiAgICAgICAgcmVtb3RlRXh0ZW5zaW9ucy5mb3JFYWNoKGZ1bmN0aW9uKHJIZHJFeHQpIHtcbiAgICAgICAgICBpZiAoaGRyRXh0LnVyaSA9PT0gckhkckV4dC51cmkpIHtcbiAgICAgICAgICAgIGhkckV4dC5pZCA9IHJIZHJFeHQuaWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBnZW5lcmF0ZSBhbiBzc3JjIG5vdywgdG8gYmUgdXNlZCBsYXRlciBpbiBydHBTZW5kZXIuc2VuZFxuICAgICAgdmFyIHNlbmRFbmNvZGluZ1BhcmFtZXRlcnMgPSB0cmFuc2NlaXZlci5zZW5kRW5jb2RpbmdQYXJhbWV0ZXJzIHx8IFt7XG4gICAgICAgIHNzcmM6ICgyICogc2RwTUxpbmVJbmRleCArIDEpICogMTAwMVxuICAgICAgfV07XG4gICAgICBpZiAodHJhY2spIHtcbiAgICAgICAgLy8gYWRkIFJUWFxuICAgICAgICBpZiAoZWRnZVZlcnNpb24gPj0gMTUwMTkgJiYga2luZCA9PT0gJ3ZpZGVvJyAmJlxuICAgICAgICAgICAgIXNlbmRFbmNvZGluZ1BhcmFtZXRlcnNbMF0ucnR4KSB7XG4gICAgICAgICAgc2VuZEVuY29kaW5nUGFyYW1ldGVyc1swXS5ydHggPSB7XG4gICAgICAgICAgICBzc3JjOiBzZW5kRW5jb2RpbmdQYXJhbWV0ZXJzWzBdLnNzcmMgKyAxXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodHJhbnNjZWl2ZXIud2FudFJlY2VpdmUpIHtcbiAgICAgICAgdHJhbnNjZWl2ZXIucnRwUmVjZWl2ZXIgPSBuZXcgd2luZG93LlJUQ1J0cFJlY2VpdmVyKFxuICAgICAgICAgICAgdHJhbnNjZWl2ZXIuZHRsc1RyYW5zcG9ydCwga2luZCk7XG4gICAgICB9XG5cbiAgICAgIHRyYW5zY2VpdmVyLmxvY2FsQ2FwYWJpbGl0aWVzID0gbG9jYWxDYXBhYmlsaXRpZXM7XG4gICAgICB0cmFuc2NlaXZlci5zZW5kRW5jb2RpbmdQYXJhbWV0ZXJzID0gc2VuZEVuY29kaW5nUGFyYW1ldGVycztcbiAgICB9KTtcblxuICAgIC8vIGFsd2F5cyBvZmZlciBCVU5ETEUgYW5kIGRpc3Bvc2Ugb24gcmV0dXJuIGlmIG5vdCBzdXBwb3J0ZWQuXG4gICAgaWYgKHBjLl9jb25maWcuYnVuZGxlUG9saWN5ICE9PSAnbWF4LWNvbXBhdCcpIHtcbiAgICAgIHNkcCArPSAnYT1ncm91cDpCVU5ETEUgJyArIHBjLnRyYW5zY2VpdmVycy5tYXAoZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdC5taWQ7XG4gICAgICB9KS5qb2luKCcgJykgKyAnXFxyXFxuJztcbiAgICB9XG4gICAgc2RwICs9ICdhPWljZS1vcHRpb25zOnRyaWNrbGVcXHJcXG4nO1xuXG4gICAgcGMudHJhbnNjZWl2ZXJzLmZvckVhY2goZnVuY3Rpb24odHJhbnNjZWl2ZXIsIHNkcE1MaW5lSW5kZXgpIHtcbiAgICAgIHNkcCArPSB3cml0ZU1lZGlhU2VjdGlvbih0cmFuc2NlaXZlciwgdHJhbnNjZWl2ZXIubG9jYWxDYXBhYmlsaXRpZXMsXG4gICAgICAgICAgJ29mZmVyJywgdHJhbnNjZWl2ZXIuc3RyZWFtLCBwYy5fZHRsc1JvbGUpO1xuICAgICAgc2RwICs9ICdhPXJ0Y3AtcnNpemVcXHJcXG4nO1xuXG4gICAgICBpZiAodHJhbnNjZWl2ZXIuaWNlR2F0aGVyZXIgJiYgcGMuaWNlR2F0aGVyaW5nU3RhdGUgIT09ICduZXcnICYmXG4gICAgICAgICAgKHNkcE1MaW5lSW5kZXggPT09IDAgfHwgIXBjLnVzaW5nQnVuZGxlKSkge1xuICAgICAgICB0cmFuc2NlaXZlci5pY2VHYXRoZXJlci5nZXRMb2NhbENhbmRpZGF0ZXMoKS5mb3JFYWNoKGZ1bmN0aW9uKGNhbmQpIHtcbiAgICAgICAgICBjYW5kLmNvbXBvbmVudCA9IDE7XG4gICAgICAgICAgc2RwICs9ICdhPScgKyBTRFBVdGlscy53cml0ZUNhbmRpZGF0ZShjYW5kKSArICdcXHJcXG4nO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAodHJhbnNjZWl2ZXIuaWNlR2F0aGVyZXIuc3RhdGUgPT09ICdjb21wbGV0ZWQnKSB7XG4gICAgICAgICAgc2RwICs9ICdhPWVuZC1vZi1jYW5kaWRhdGVzXFxyXFxuJztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIGRlc2MgPSBuZXcgd2luZG93LlJUQ1Nlc3Npb25EZXNjcmlwdGlvbih7XG4gICAgICB0eXBlOiAnb2ZmZXInLFxuICAgICAgc2RwOiBzZHBcbiAgICB9KTtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGRlc2MpO1xuICB9O1xuXG4gIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5jcmVhdGVBbnN3ZXIgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcGMgPSB0aGlzO1xuXG4gICAgaWYgKHBjLl9pc0Nsb3NlZCkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG1ha2VFcnJvcignSW52YWxpZFN0YXRlRXJyb3InLFxuICAgICAgICAgICdDYW4gbm90IGNhbGwgY3JlYXRlQW5zd2VyIGFmdGVyIGNsb3NlJykpO1xuICAgIH1cblxuICAgIGlmICghKHBjLnNpZ25hbGluZ1N0YXRlID09PSAnaGF2ZS1yZW1vdGUtb2ZmZXInIHx8XG4gICAgICAgIHBjLnNpZ25hbGluZ1N0YXRlID09PSAnaGF2ZS1sb2NhbC1wcmFuc3dlcicpKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobWFrZUVycm9yKCdJbnZhbGlkU3RhdGVFcnJvcicsXG4gICAgICAgICAgJ0NhbiBub3QgY2FsbCBjcmVhdGVBbnN3ZXIgaW4gc2lnbmFsaW5nU3RhdGUgJyArIHBjLnNpZ25hbGluZ1N0YXRlKSk7XG4gICAgfVxuXG4gICAgdmFyIHNkcCA9IFNEUFV0aWxzLndyaXRlU2Vzc2lvbkJvaWxlcnBsYXRlKHBjLl9zZHBTZXNzaW9uSWQsXG4gICAgICAgIHBjLl9zZHBTZXNzaW9uVmVyc2lvbisrKTtcbiAgICBpZiAocGMudXNpbmdCdW5kbGUpIHtcbiAgICAgIHNkcCArPSAnYT1ncm91cDpCVU5ETEUgJyArIHBjLnRyYW5zY2VpdmVycy5tYXAoZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdC5taWQ7XG4gICAgICB9KS5qb2luKCcgJykgKyAnXFxyXFxuJztcbiAgICB9XG4gICAgc2RwICs9ICdhPWljZS1vcHRpb25zOnRyaWNrbGVcXHJcXG4nO1xuXG4gICAgdmFyIG1lZGlhU2VjdGlvbnNJbk9mZmVyID0gU0RQVXRpbHMuZ2V0TWVkaWFTZWN0aW9ucyhcbiAgICAgICAgcGMuX3JlbW90ZURlc2NyaXB0aW9uLnNkcCkubGVuZ3RoO1xuICAgIHBjLnRyYW5zY2VpdmVycy5mb3JFYWNoKGZ1bmN0aW9uKHRyYW5zY2VpdmVyLCBzZHBNTGluZUluZGV4KSB7XG4gICAgICBpZiAoc2RwTUxpbmVJbmRleCArIDEgPiBtZWRpYVNlY3Rpb25zSW5PZmZlcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAodHJhbnNjZWl2ZXIucmVqZWN0ZWQpIHtcbiAgICAgICAgaWYgKHRyYW5zY2VpdmVyLmtpbmQgPT09ICdhcHBsaWNhdGlvbicpIHtcbiAgICAgICAgICBpZiAodHJhbnNjZWl2ZXIucHJvdG9jb2wgPT09ICdEVExTL1NDVFAnKSB7IC8vIGxlZ2FjeSBmbXRcbiAgICAgICAgICAgIHNkcCArPSAnbT1hcHBsaWNhdGlvbiAwIERUTFMvU0NUUCA1MDAwXFxyXFxuJztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2RwICs9ICdtPWFwcGxpY2F0aW9uIDAgJyArIHRyYW5zY2VpdmVyLnByb3RvY29sICtcbiAgICAgICAgICAgICAgICAnIHdlYnJ0Yy1kYXRhY2hhbm5lbFxcclxcbic7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHRyYW5zY2VpdmVyLmtpbmQgPT09ICdhdWRpbycpIHtcbiAgICAgICAgICBzZHAgKz0gJ209YXVkaW8gMCBVRFAvVExTL1JUUC9TQVZQRiAwXFxyXFxuJyArXG4gICAgICAgICAgICAgICdhPXJ0cG1hcDowIFBDTVUvODAwMFxcclxcbic7XG4gICAgICAgIH0gZWxzZSBpZiAodHJhbnNjZWl2ZXIua2luZCA9PT0gJ3ZpZGVvJykge1xuICAgICAgICAgIHNkcCArPSAnbT12aWRlbyAwIFVEUC9UTFMvUlRQL1NBVlBGIDEyMFxcclxcbicgK1xuICAgICAgICAgICAgICAnYT1ydHBtYXA6MTIwIFZQOC85MDAwMFxcclxcbic7XG4gICAgICAgIH1cbiAgICAgICAgc2RwICs9ICdjPUlOIElQNCAwLjAuMC4wXFxyXFxuJyArXG4gICAgICAgICAgICAnYT1pbmFjdGl2ZVxcclxcbicgK1xuICAgICAgICAgICAgJ2E9bWlkOicgKyB0cmFuc2NlaXZlci5taWQgKyAnXFxyXFxuJztcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBGSVhNRTogbG9vayBhdCBkaXJlY3Rpb24uXG4gICAgICBpZiAodHJhbnNjZWl2ZXIuc3RyZWFtKSB7XG4gICAgICAgIHZhciBsb2NhbFRyYWNrO1xuICAgICAgICBpZiAodHJhbnNjZWl2ZXIua2luZCA9PT0gJ2F1ZGlvJykge1xuICAgICAgICAgIGxvY2FsVHJhY2sgPSB0cmFuc2NlaXZlci5zdHJlYW0uZ2V0QXVkaW9UcmFja3MoKVswXTtcbiAgICAgICAgfSBlbHNlIGlmICh0cmFuc2NlaXZlci5raW5kID09PSAndmlkZW8nKSB7XG4gICAgICAgICAgbG9jYWxUcmFjayA9IHRyYW5zY2VpdmVyLnN0cmVhbS5nZXRWaWRlb1RyYWNrcygpWzBdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsb2NhbFRyYWNrKSB7XG4gICAgICAgICAgLy8gYWRkIFJUWFxuICAgICAgICAgIGlmIChlZGdlVmVyc2lvbiA+PSAxNTAxOSAmJiB0cmFuc2NlaXZlci5raW5kID09PSAndmlkZW8nICYmXG4gICAgICAgICAgICAgICF0cmFuc2NlaXZlci5zZW5kRW5jb2RpbmdQYXJhbWV0ZXJzWzBdLnJ0eCkge1xuICAgICAgICAgICAgdHJhbnNjZWl2ZXIuc2VuZEVuY29kaW5nUGFyYW1ldGVyc1swXS5ydHggPSB7XG4gICAgICAgICAgICAgIHNzcmM6IHRyYW5zY2VpdmVyLnNlbmRFbmNvZGluZ1BhcmFtZXRlcnNbMF0uc3NyYyArIDFcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIENhbGN1bGF0ZSBpbnRlcnNlY3Rpb24gb2YgY2FwYWJpbGl0aWVzLlxuICAgICAgdmFyIGNvbW1vbkNhcGFiaWxpdGllcyA9IGdldENvbW1vbkNhcGFiaWxpdGllcyhcbiAgICAgICAgICB0cmFuc2NlaXZlci5sb2NhbENhcGFiaWxpdGllcyxcbiAgICAgICAgICB0cmFuc2NlaXZlci5yZW1vdGVDYXBhYmlsaXRpZXMpO1xuXG4gICAgICB2YXIgaGFzUnR4ID0gY29tbW9uQ2FwYWJpbGl0aWVzLmNvZGVjcy5maWx0ZXIoZnVuY3Rpb24oYykge1xuICAgICAgICByZXR1cm4gYy5uYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdydHgnO1xuICAgICAgfSkubGVuZ3RoO1xuICAgICAgaWYgKCFoYXNSdHggJiYgdHJhbnNjZWl2ZXIuc2VuZEVuY29kaW5nUGFyYW1ldGVyc1swXS5ydHgpIHtcbiAgICAgICAgZGVsZXRlIHRyYW5zY2VpdmVyLnNlbmRFbmNvZGluZ1BhcmFtZXRlcnNbMF0ucnR4O1xuICAgICAgfVxuXG4gICAgICBzZHAgKz0gd3JpdGVNZWRpYVNlY3Rpb24odHJhbnNjZWl2ZXIsIGNvbW1vbkNhcGFiaWxpdGllcyxcbiAgICAgICAgICAnYW5zd2VyJywgdHJhbnNjZWl2ZXIuc3RyZWFtLCBwYy5fZHRsc1JvbGUpO1xuICAgICAgaWYgKHRyYW5zY2VpdmVyLnJ0Y3BQYXJhbWV0ZXJzICYmXG4gICAgICAgICAgdHJhbnNjZWl2ZXIucnRjcFBhcmFtZXRlcnMucmVkdWNlZFNpemUpIHtcbiAgICAgICAgc2RwICs9ICdhPXJ0Y3AtcnNpemVcXHJcXG4nO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIGRlc2MgPSBuZXcgd2luZG93LlJUQ1Nlc3Npb25EZXNjcmlwdGlvbih7XG4gICAgICB0eXBlOiAnYW5zd2VyJyxcbiAgICAgIHNkcDogc2RwXG4gICAgfSk7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShkZXNjKTtcbiAgfTtcblxuICBSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuYWRkSWNlQ2FuZGlkYXRlID0gZnVuY3Rpb24oY2FuZGlkYXRlKSB7XG4gICAgdmFyIHBjID0gdGhpcztcbiAgICB2YXIgc2VjdGlvbnM7XG4gICAgaWYgKGNhbmRpZGF0ZSAmJiAhKGNhbmRpZGF0ZS5zZHBNTGluZUluZGV4ICE9PSB1bmRlZmluZWQgfHxcbiAgICAgICAgY2FuZGlkYXRlLnNkcE1pZCkpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgVHlwZUVycm9yKCdzZHBNTGluZUluZGV4IG9yIHNkcE1pZCByZXF1aXJlZCcpKTtcbiAgICB9XG5cbiAgICAvLyBUT0RPOiBuZWVkcyB0byBnbyBpbnRvIG9wcyBxdWV1ZS5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBpZiAoIXBjLl9yZW1vdGVEZXNjcmlwdGlvbikge1xuICAgICAgICByZXR1cm4gcmVqZWN0KG1ha2VFcnJvcignSW52YWxpZFN0YXRlRXJyb3InLFxuICAgICAgICAgICAgJ0NhbiBub3QgYWRkIElDRSBjYW5kaWRhdGUgd2l0aG91dCBhIHJlbW90ZSBkZXNjcmlwdGlvbicpKTtcbiAgICAgIH0gZWxzZSBpZiAoIWNhbmRpZGF0ZSB8fCBjYW5kaWRhdGUuY2FuZGlkYXRlID09PSAnJykge1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHBjLnRyYW5zY2VpdmVycy5sZW5ndGg7IGorKykge1xuICAgICAgICAgIGlmIChwYy50cmFuc2NlaXZlcnNbal0ucmVqZWN0ZWQpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBwYy50cmFuc2NlaXZlcnNbal0uaWNlVHJhbnNwb3J0LmFkZFJlbW90ZUNhbmRpZGF0ZSh7fSk7XG4gICAgICAgICAgc2VjdGlvbnMgPSBTRFBVdGlscy5nZXRNZWRpYVNlY3Rpb25zKHBjLl9yZW1vdGVEZXNjcmlwdGlvbi5zZHApO1xuICAgICAgICAgIHNlY3Rpb25zW2pdICs9ICdhPWVuZC1vZi1jYW5kaWRhdGVzXFxyXFxuJztcbiAgICAgICAgICBwYy5fcmVtb3RlRGVzY3JpcHRpb24uc2RwID1cbiAgICAgICAgICAgICAgU0RQVXRpbHMuZ2V0RGVzY3JpcHRpb24ocGMuX3JlbW90ZURlc2NyaXB0aW9uLnNkcCkgK1xuICAgICAgICAgICAgICBzZWN0aW9ucy5qb2luKCcnKTtcbiAgICAgICAgICBpZiAocGMudXNpbmdCdW5kbGUpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHNkcE1MaW5lSW5kZXggPSBjYW5kaWRhdGUuc2RwTUxpbmVJbmRleDtcbiAgICAgICAgaWYgKGNhbmRpZGF0ZS5zZHBNaWQpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBjLnRyYW5zY2VpdmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHBjLnRyYW5zY2VpdmVyc1tpXS5taWQgPT09IGNhbmRpZGF0ZS5zZHBNaWQpIHtcbiAgICAgICAgICAgICAgc2RwTUxpbmVJbmRleCA9IGk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgdHJhbnNjZWl2ZXIgPSBwYy50cmFuc2NlaXZlcnNbc2RwTUxpbmVJbmRleF07XG4gICAgICAgIGlmICh0cmFuc2NlaXZlcikge1xuICAgICAgICAgIGlmICh0cmFuc2NlaXZlci5yZWplY3RlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGNhbmQgPSBPYmplY3Qua2V5cyhjYW5kaWRhdGUuY2FuZGlkYXRlKS5sZW5ndGggPiAwID9cbiAgICAgICAgICAgICAgU0RQVXRpbHMucGFyc2VDYW5kaWRhdGUoY2FuZGlkYXRlLmNhbmRpZGF0ZSkgOiB7fTtcbiAgICAgICAgICAvLyBJZ25vcmUgQ2hyb21lJ3MgaW52YWxpZCBjYW5kaWRhdGVzIHNpbmNlIEVkZ2UgZG9lcyBub3QgbGlrZSB0aGVtLlxuICAgICAgICAgIGlmIChjYW5kLnByb3RvY29sID09PSAndGNwJyAmJiAoY2FuZC5wb3J0ID09PSAwIHx8IGNhbmQucG9ydCA9PT0gOSkpIHtcbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIElnbm9yZSBSVENQIGNhbmRpZGF0ZXMsIHdlIGFzc3VtZSBSVENQLU1VWC5cbiAgICAgICAgICBpZiAoY2FuZC5jb21wb25lbnQgJiYgY2FuZC5jb21wb25lbnQgIT09IDEpIHtcbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIHdoZW4gdXNpbmcgYnVuZGxlLCBhdm9pZCBhZGRpbmcgY2FuZGlkYXRlcyB0byB0aGUgd3JvbmdcbiAgICAgICAgICAvLyBpY2UgdHJhbnNwb3J0LiBBbmQgYXZvaWQgYWRkaW5nIGNhbmRpZGF0ZXMgYWRkZWQgaW4gdGhlIFNEUC5cbiAgICAgICAgICBpZiAoc2RwTUxpbmVJbmRleCA9PT0gMCB8fCAoc2RwTUxpbmVJbmRleCA+IDAgJiZcbiAgICAgICAgICAgICAgdHJhbnNjZWl2ZXIuaWNlVHJhbnNwb3J0ICE9PSBwYy50cmFuc2NlaXZlcnNbMF0uaWNlVHJhbnNwb3J0KSkge1xuICAgICAgICAgICAgaWYgKCFtYXliZUFkZENhbmRpZGF0ZSh0cmFuc2NlaXZlci5pY2VUcmFuc3BvcnQsIGNhbmQpKSB7XG4gICAgICAgICAgICAgIHJldHVybiByZWplY3QobWFrZUVycm9yKCdPcGVyYXRpb25FcnJvcicsXG4gICAgICAgICAgICAgICAgICAnQ2FuIG5vdCBhZGQgSUNFIGNhbmRpZGF0ZScpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyB1cGRhdGUgdGhlIHJlbW90ZURlc2NyaXB0aW9uLlxuICAgICAgICAgIHZhciBjYW5kaWRhdGVTdHJpbmcgPSBjYW5kaWRhdGUuY2FuZGlkYXRlLnRyaW0oKTtcbiAgICAgICAgICBpZiAoY2FuZGlkYXRlU3RyaW5nLmluZGV4T2YoJ2E9JykgPT09IDApIHtcbiAgICAgICAgICAgIGNhbmRpZGF0ZVN0cmluZyA9IGNhbmRpZGF0ZVN0cmluZy5zdWJzdHIoMik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNlY3Rpb25zID0gU0RQVXRpbHMuZ2V0TWVkaWFTZWN0aW9ucyhwYy5fcmVtb3RlRGVzY3JpcHRpb24uc2RwKTtcbiAgICAgICAgICBzZWN0aW9uc1tzZHBNTGluZUluZGV4XSArPSAnYT0nICtcbiAgICAgICAgICAgICAgKGNhbmQudHlwZSA/IGNhbmRpZGF0ZVN0cmluZyA6ICdlbmQtb2YtY2FuZGlkYXRlcycpXG4gICAgICAgICAgICAgICsgJ1xcclxcbic7XG4gICAgICAgICAgcGMuX3JlbW90ZURlc2NyaXB0aW9uLnNkcCA9XG4gICAgICAgICAgICAgIFNEUFV0aWxzLmdldERlc2NyaXB0aW9uKHBjLl9yZW1vdGVEZXNjcmlwdGlvbi5zZHApICtcbiAgICAgICAgICAgICAgc2VjdGlvbnMuam9pbignJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHJlamVjdChtYWtlRXJyb3IoJ09wZXJhdGlvbkVycm9yJyxcbiAgICAgICAgICAgICAgJ0NhbiBub3QgYWRkIElDRSBjYW5kaWRhdGUnKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJlc29sdmUoKTtcbiAgICB9KTtcbiAgfTtcblxuICBSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0U3RhdHMgPSBmdW5jdGlvbihzZWxlY3Rvcikge1xuICAgIGlmIChzZWxlY3RvciAmJiBzZWxlY3RvciBpbnN0YW5jZW9mIHdpbmRvdy5NZWRpYVN0cmVhbVRyYWNrKSB7XG4gICAgICB2YXIgc2VuZGVyT3JSZWNlaXZlciA9IG51bGw7XG4gICAgICB0aGlzLnRyYW5zY2VpdmVycy5mb3JFYWNoKGZ1bmN0aW9uKHRyYW5zY2VpdmVyKSB7XG4gICAgICAgIGlmICh0cmFuc2NlaXZlci5ydHBTZW5kZXIgJiZcbiAgICAgICAgICAgIHRyYW5zY2VpdmVyLnJ0cFNlbmRlci50cmFjayA9PT0gc2VsZWN0b3IpIHtcbiAgICAgICAgICBzZW5kZXJPclJlY2VpdmVyID0gdHJhbnNjZWl2ZXIucnRwU2VuZGVyO1xuICAgICAgICB9IGVsc2UgaWYgKHRyYW5zY2VpdmVyLnJ0cFJlY2VpdmVyICYmXG4gICAgICAgICAgICB0cmFuc2NlaXZlci5ydHBSZWNlaXZlci50cmFjayA9PT0gc2VsZWN0b3IpIHtcbiAgICAgICAgICBzZW5kZXJPclJlY2VpdmVyID0gdHJhbnNjZWl2ZXIucnRwUmVjZWl2ZXI7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaWYgKCFzZW5kZXJPclJlY2VpdmVyKSB7XG4gICAgICAgIHRocm93IG1ha2VFcnJvcignSW52YWxpZEFjY2Vzc0Vycm9yJywgJ0ludmFsaWQgc2VsZWN0b3IuJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc2VuZGVyT3JSZWNlaXZlci5nZXRTdGF0cygpO1xuICAgIH1cblxuICAgIHZhciBwcm9taXNlcyA9IFtdO1xuICAgIHRoaXMudHJhbnNjZWl2ZXJzLmZvckVhY2goZnVuY3Rpb24odHJhbnNjZWl2ZXIpIHtcbiAgICAgIFsncnRwU2VuZGVyJywgJ3J0cFJlY2VpdmVyJywgJ2ljZUdhdGhlcmVyJywgJ2ljZVRyYW5zcG9ydCcsXG4gICAgICAgICAgJ2R0bHNUcmFuc3BvcnQnXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgICAgICAgaWYgKHRyYW5zY2VpdmVyW21ldGhvZF0pIHtcbiAgICAgICAgICAgICAgcHJvbWlzZXMucHVzaCh0cmFuc2NlaXZlclttZXRob2RdLmdldFN0YXRzKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcykudGhlbihmdW5jdGlvbihhbGxTdGF0cykge1xuICAgICAgdmFyIHJlc3VsdHMgPSBuZXcgTWFwKCk7XG4gICAgICBhbGxTdGF0cy5mb3JFYWNoKGZ1bmN0aW9uKHN0YXRzKSB7XG4gICAgICAgIHN0YXRzLmZvckVhY2goZnVuY3Rpb24oc3RhdCkge1xuICAgICAgICAgIHJlc3VsdHMuc2V0KHN0YXQuaWQsIHN0YXQpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgfSk7XG4gIH07XG5cbiAgLy8gZml4IGxvdy1sZXZlbCBzdGF0IG5hbWVzIGFuZCByZXR1cm4gTWFwIGluc3RlYWQgb2Ygb2JqZWN0LlxuICB2YXIgb3J0Y09iamVjdHMgPSBbJ1JUQ1J0cFNlbmRlcicsICdSVENSdHBSZWNlaXZlcicsICdSVENJY2VHYXRoZXJlcicsXG4gICAgJ1JUQ0ljZVRyYW5zcG9ydCcsICdSVENEdGxzVHJhbnNwb3J0J107XG4gIG9ydGNPYmplY3RzLmZvckVhY2goZnVuY3Rpb24ob3J0Y09iamVjdE5hbWUpIHtcbiAgICB2YXIgb2JqID0gd2luZG93W29ydGNPYmplY3ROYW1lXTtcbiAgICBpZiAob2JqICYmIG9iai5wcm90b3R5cGUgJiYgb2JqLnByb3RvdHlwZS5nZXRTdGF0cykge1xuICAgICAgdmFyIG5hdGl2ZUdldHN0YXRzID0gb2JqLnByb3RvdHlwZS5nZXRTdGF0cztcbiAgICAgIG9iai5wcm90b3R5cGUuZ2V0U3RhdHMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZUdldHN0YXRzLmFwcGx5KHRoaXMpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKG5hdGl2ZVN0YXRzKSB7XG4gICAgICAgICAgdmFyIG1hcFN0YXRzID0gbmV3IE1hcCgpO1xuICAgICAgICAgIE9iamVjdC5rZXlzKG5hdGl2ZVN0YXRzKS5mb3JFYWNoKGZ1bmN0aW9uKGlkKSB7XG4gICAgICAgICAgICBuYXRpdmVTdGF0c1tpZF0udHlwZSA9IGZpeFN0YXRzVHlwZShuYXRpdmVTdGF0c1tpZF0pO1xuICAgICAgICAgICAgbWFwU3RhdHMuc2V0KGlkLCBuYXRpdmVTdGF0c1tpZF0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiBtYXBTdGF0cztcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gbGVnYWN5IGNhbGxiYWNrIHNoaW1zLiBTaG91bGQgYmUgbW92ZWQgdG8gYWRhcHRlci5qcyBzb21lIGRheXMuXG4gIHZhciBtZXRob2RzID0gWydjcmVhdGVPZmZlcicsICdjcmVhdGVBbnN3ZXInXTtcbiAgbWV0aG9kcy5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgIHZhciBuYXRpdmVNZXRob2QgPSBSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGVbbWV0aG9kXTtcbiAgICBSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICBpZiAodHlwZW9mIGFyZ3NbMF0gPT09ICdmdW5jdGlvbicgfHxcbiAgICAgICAgICB0eXBlb2YgYXJnc1sxXSA9PT0gJ2Z1bmN0aW9uJykgeyAvLyBsZWdhY3lcbiAgICAgICAgcmV0dXJuIG5hdGl2ZU1ldGhvZC5hcHBseSh0aGlzLCBbYXJndW1lbnRzWzJdXSlcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oZGVzY3JpcHRpb24pIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGFyZ3NbMF0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGFyZ3NbMF0uYXBwbHkobnVsbCwgW2Rlc2NyaXB0aW9uXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgIGlmICh0eXBlb2YgYXJnc1sxXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgYXJnc1sxXS5hcHBseShudWxsLCBbZXJyb3JdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5hdGl2ZU1ldGhvZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH0pO1xuXG4gIG1ldGhvZHMgPSBbJ3NldExvY2FsRGVzY3JpcHRpb24nLCAnc2V0UmVtb3RlRGVzY3JpcHRpb24nLCAnYWRkSWNlQ2FuZGlkYXRlJ107XG4gIG1ldGhvZHMuZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICB2YXIgbmF0aXZlTWV0aG9kID0gUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlW21ldGhvZF07XG4gICAgUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgaWYgKHR5cGVvZiBhcmdzWzFdID09PSAnZnVuY3Rpb24nIHx8XG4gICAgICAgICAgdHlwZW9mIGFyZ3NbMl0gPT09ICdmdW5jdGlvbicpIHsgLy8gbGVnYWN5XG4gICAgICAgIHJldHVybiBuYXRpdmVNZXRob2QuYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICAgICAgICAudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGFyZ3NbMV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGFyZ3NbMV0uYXBwbHkobnVsbCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgIGlmICh0eXBlb2YgYXJnc1syXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgYXJnc1syXS5hcHBseShudWxsLCBbZXJyb3JdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5hdGl2ZU1ldGhvZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH0pO1xuXG4gIC8vIGdldFN0YXRzIGlzIHNwZWNpYWwuIEl0IGRvZXNuJ3QgaGF2ZSBhIHNwZWMgbGVnYWN5IG1ldGhvZCB5ZXQgd2Ugc3VwcG9ydFxuICAvLyBnZXRTdGF0cyhzb21ldGhpbmcsIGNiKSB3aXRob3V0IGVycm9yIGNhbGxiYWNrcy5cbiAgWydnZXRTdGF0cyddLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgdmFyIG5hdGl2ZU1ldGhvZCA9IFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZVttZXRob2RdO1xuICAgIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgIGlmICh0eXBlb2YgYXJnc1sxXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gbmF0aXZlTWV0aG9kLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBhcmdzWzFdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBhcmdzWzFdLmFwcGx5KG51bGwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmF0aXZlTWV0aG9kLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfSk7XG5cbiAgcmV0dXJuIFJUQ1BlZXJDb25uZWN0aW9uO1xufTtcbiIsIi8qIGVzbGludC1lbnYgbm9kZSAqL1xuJ3VzZSBzdHJpY3QnO1xuXG4vLyBTRFAgaGVscGVycy5cbnZhciBTRFBVdGlscyA9IHt9O1xuXG4vLyBHZW5lcmF0ZSBhbiBhbHBoYW51bWVyaWMgaWRlbnRpZmllciBmb3IgY25hbWUgb3IgbWlkcy5cbi8vIFRPRE86IHVzZSBVVUlEcyBpbnN0ZWFkPyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9qZWQvOTgyODgzXG5TRFBVdGlscy5nZW5lcmF0ZUlkZW50aWZpZXIgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCAxMCk7XG59O1xuXG4vLyBUaGUgUlRDUCBDTkFNRSB1c2VkIGJ5IGFsbCBwZWVyY29ubmVjdGlvbnMgZnJvbSB0aGUgc2FtZSBKUy5cblNEUFV0aWxzLmxvY2FsQ05hbWUgPSBTRFBVdGlscy5nZW5lcmF0ZUlkZW50aWZpZXIoKTtcblxuLy8gU3BsaXRzIFNEUCBpbnRvIGxpbmVzLCBkZWFsaW5nIHdpdGggYm90aCBDUkxGIGFuZCBMRi5cblNEUFV0aWxzLnNwbGl0TGluZXMgPSBmdW5jdGlvbihibG9iKSB7XG4gIHJldHVybiBibG9iLnRyaW0oKS5zcGxpdCgnXFxuJykubWFwKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICByZXR1cm4gbGluZS50cmltKCk7XG4gIH0pO1xufTtcbi8vIFNwbGl0cyBTRFAgaW50byBzZXNzaW9ucGFydCBhbmQgbWVkaWFzZWN0aW9ucy4gRW5zdXJlcyBDUkxGLlxuU0RQVXRpbHMuc3BsaXRTZWN0aW9ucyA9IGZ1bmN0aW9uKGJsb2IpIHtcbiAgdmFyIHBhcnRzID0gYmxvYi5zcGxpdCgnXFxubT0nKTtcbiAgcmV0dXJuIHBhcnRzLm1hcChmdW5jdGlvbihwYXJ0LCBpbmRleCkge1xuICAgIHJldHVybiAoaW5kZXggPiAwID8gJ209JyArIHBhcnQgOiBwYXJ0KS50cmltKCkgKyAnXFxyXFxuJztcbiAgfSk7XG59O1xuXG4vLyByZXR1cm5zIHRoZSBzZXNzaW9uIGRlc2NyaXB0aW9uLlxuU0RQVXRpbHMuZ2V0RGVzY3JpcHRpb24gPSBmdW5jdGlvbihibG9iKSB7XG4gIHZhciBzZWN0aW9ucyA9IFNEUFV0aWxzLnNwbGl0U2VjdGlvbnMoYmxvYik7XG4gIHJldHVybiBzZWN0aW9ucyAmJiBzZWN0aW9uc1swXTtcbn07XG5cbi8vIHJldHVybnMgdGhlIGluZGl2aWR1YWwgbWVkaWEgc2VjdGlvbnMuXG5TRFBVdGlscy5nZXRNZWRpYVNlY3Rpb25zID0gZnVuY3Rpb24oYmxvYikge1xuICB2YXIgc2VjdGlvbnMgPSBTRFBVdGlscy5zcGxpdFNlY3Rpb25zKGJsb2IpO1xuICBzZWN0aW9ucy5zaGlmdCgpO1xuICByZXR1cm4gc2VjdGlvbnM7XG59O1xuXG4vLyBSZXR1cm5zIGxpbmVzIHRoYXQgc3RhcnQgd2l0aCBhIGNlcnRhaW4gcHJlZml4LlxuU0RQVXRpbHMubWF0Y2hQcmVmaXggPSBmdW5jdGlvbihibG9iLCBwcmVmaXgpIHtcbiAgcmV0dXJuIFNEUFV0aWxzLnNwbGl0TGluZXMoYmxvYikuZmlsdGVyKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICByZXR1cm4gbGluZS5pbmRleE9mKHByZWZpeCkgPT09IDA7XG4gIH0pO1xufTtcblxuLy8gUGFyc2VzIGFuIElDRSBjYW5kaWRhdGUgbGluZS4gU2FtcGxlIGlucHV0OlxuLy8gY2FuZGlkYXRlOjcwMjc4NjM1MCAyIHVkcCA0MTgxOTkwMiA4LjguOC44IDYwNzY5IHR5cCByZWxheSByYWRkciA4LjguOC44XG4vLyBycG9ydCA1NTk5NlwiXG5TRFBVdGlscy5wYXJzZUNhbmRpZGF0ZSA9IGZ1bmN0aW9uKGxpbmUpIHtcbiAgdmFyIHBhcnRzO1xuICAvLyBQYXJzZSBib3RoIHZhcmlhbnRzLlxuICBpZiAobGluZS5pbmRleE9mKCdhPWNhbmRpZGF0ZTonKSA9PT0gMCkge1xuICAgIHBhcnRzID0gbGluZS5zdWJzdHJpbmcoMTIpLnNwbGl0KCcgJyk7XG4gIH0gZWxzZSB7XG4gICAgcGFydHMgPSBsaW5lLnN1YnN0cmluZygxMCkuc3BsaXQoJyAnKTtcbiAgfVxuXG4gIHZhciBjYW5kaWRhdGUgPSB7XG4gICAgZm91bmRhdGlvbjogcGFydHNbMF0sXG4gICAgY29tcG9uZW50OiBwYXJzZUludChwYXJ0c1sxXSwgMTApLFxuICAgIHByb3RvY29sOiBwYXJ0c1syXS50b0xvd2VyQ2FzZSgpLFxuICAgIHByaW9yaXR5OiBwYXJzZUludChwYXJ0c1szXSwgMTApLFxuICAgIGlwOiBwYXJ0c1s0XSxcbiAgICBhZGRyZXNzOiBwYXJ0c1s0XSwgLy8gYWRkcmVzcyBpcyBhbiBhbGlhcyBmb3IgaXAuXG4gICAgcG9ydDogcGFyc2VJbnQocGFydHNbNV0sIDEwKSxcbiAgICAvLyBza2lwIHBhcnRzWzZdID09ICd0eXAnXG4gICAgdHlwZTogcGFydHNbN11cbiAgfTtcblxuICBmb3IgKHZhciBpID0gODsgaSA8IHBhcnRzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgc3dpdGNoIChwYXJ0c1tpXSkge1xuICAgICAgY2FzZSAncmFkZHInOlxuICAgICAgICBjYW5kaWRhdGUucmVsYXRlZEFkZHJlc3MgPSBwYXJ0c1tpICsgMV07XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAncnBvcnQnOlxuICAgICAgICBjYW5kaWRhdGUucmVsYXRlZFBvcnQgPSBwYXJzZUludChwYXJ0c1tpICsgMV0sIDEwKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd0Y3B0eXBlJzpcbiAgICAgICAgY2FuZGlkYXRlLnRjcFR5cGUgPSBwYXJ0c1tpICsgMV07XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndWZyYWcnOlxuICAgICAgICBjYW5kaWRhdGUudWZyYWcgPSBwYXJ0c1tpICsgMV07IC8vIGZvciBiYWNrd2FyZCBjb21wYWJpbGl0eS5cbiAgICAgICAgY2FuZGlkYXRlLnVzZXJuYW1lRnJhZ21lbnQgPSBwYXJ0c1tpICsgMV07XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDogLy8gZXh0ZW5zaW9uIGhhbmRsaW5nLCBpbiBwYXJ0aWN1bGFyIHVmcmFnXG4gICAgICAgIGNhbmRpZGF0ZVtwYXJ0c1tpXV0gPSBwYXJ0c1tpICsgMV07XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gY2FuZGlkYXRlO1xufTtcblxuLy8gVHJhbnNsYXRlcyBhIGNhbmRpZGF0ZSBvYmplY3QgaW50byBTRFAgY2FuZGlkYXRlIGF0dHJpYnV0ZS5cblNEUFV0aWxzLndyaXRlQ2FuZGlkYXRlID0gZnVuY3Rpb24oY2FuZGlkYXRlKSB7XG4gIHZhciBzZHAgPSBbXTtcbiAgc2RwLnB1c2goY2FuZGlkYXRlLmZvdW5kYXRpb24pO1xuICBzZHAucHVzaChjYW5kaWRhdGUuY29tcG9uZW50KTtcbiAgc2RwLnB1c2goY2FuZGlkYXRlLnByb3RvY29sLnRvVXBwZXJDYXNlKCkpO1xuICBzZHAucHVzaChjYW5kaWRhdGUucHJpb3JpdHkpO1xuICBzZHAucHVzaChjYW5kaWRhdGUuYWRkcmVzcyB8fCBjYW5kaWRhdGUuaXApO1xuICBzZHAucHVzaChjYW5kaWRhdGUucG9ydCk7XG5cbiAgdmFyIHR5cGUgPSBjYW5kaWRhdGUudHlwZTtcbiAgc2RwLnB1c2goJ3R5cCcpO1xuICBzZHAucHVzaCh0eXBlKTtcbiAgaWYgKHR5cGUgIT09ICdob3N0JyAmJiBjYW5kaWRhdGUucmVsYXRlZEFkZHJlc3MgJiZcbiAgICAgIGNhbmRpZGF0ZS5yZWxhdGVkUG9ydCkge1xuICAgIHNkcC5wdXNoKCdyYWRkcicpO1xuICAgIHNkcC5wdXNoKGNhbmRpZGF0ZS5yZWxhdGVkQWRkcmVzcyk7XG4gICAgc2RwLnB1c2goJ3Jwb3J0Jyk7XG4gICAgc2RwLnB1c2goY2FuZGlkYXRlLnJlbGF0ZWRQb3J0KTtcbiAgfVxuICBpZiAoY2FuZGlkYXRlLnRjcFR5cGUgJiYgY2FuZGlkYXRlLnByb3RvY29sLnRvTG93ZXJDYXNlKCkgPT09ICd0Y3AnKSB7XG4gICAgc2RwLnB1c2goJ3RjcHR5cGUnKTtcbiAgICBzZHAucHVzaChjYW5kaWRhdGUudGNwVHlwZSk7XG4gIH1cbiAgaWYgKGNhbmRpZGF0ZS51c2VybmFtZUZyYWdtZW50IHx8IGNhbmRpZGF0ZS51ZnJhZykge1xuICAgIHNkcC5wdXNoKCd1ZnJhZycpO1xuICAgIHNkcC5wdXNoKGNhbmRpZGF0ZS51c2VybmFtZUZyYWdtZW50IHx8IGNhbmRpZGF0ZS51ZnJhZyk7XG4gIH1cbiAgcmV0dXJuICdjYW5kaWRhdGU6JyArIHNkcC5qb2luKCcgJyk7XG59O1xuXG4vLyBQYXJzZXMgYW4gaWNlLW9wdGlvbnMgbGluZSwgcmV0dXJucyBhbiBhcnJheSBvZiBvcHRpb24gdGFncy5cbi8vIGE9aWNlLW9wdGlvbnM6Zm9vIGJhclxuU0RQVXRpbHMucGFyc2VJY2VPcHRpb25zID0gZnVuY3Rpb24obGluZSkge1xuICByZXR1cm4gbGluZS5zdWJzdHIoMTQpLnNwbGl0KCcgJyk7XG59O1xuXG4vLyBQYXJzZXMgYW4gcnRwbWFwIGxpbmUsIHJldHVybnMgUlRDUnRwQ29kZGVjUGFyYW1ldGVycy4gU2FtcGxlIGlucHV0OlxuLy8gYT1ydHBtYXA6MTExIG9wdXMvNDgwMDAvMlxuU0RQVXRpbHMucGFyc2VSdHBNYXAgPSBmdW5jdGlvbihsaW5lKSB7XG4gIHZhciBwYXJ0cyA9IGxpbmUuc3Vic3RyKDkpLnNwbGl0KCcgJyk7XG4gIHZhciBwYXJzZWQgPSB7XG4gICAgcGF5bG9hZFR5cGU6IHBhcnNlSW50KHBhcnRzLnNoaWZ0KCksIDEwKSAvLyB3YXM6IGlkXG4gIH07XG5cbiAgcGFydHMgPSBwYXJ0c1swXS5zcGxpdCgnLycpO1xuXG4gIHBhcnNlZC5uYW1lID0gcGFydHNbMF07XG4gIHBhcnNlZC5jbG9ja1JhdGUgPSBwYXJzZUludChwYXJ0c1sxXSwgMTApOyAvLyB3YXM6IGNsb2NrcmF0ZVxuICBwYXJzZWQuY2hhbm5lbHMgPSBwYXJ0cy5sZW5ndGggPT09IDMgPyBwYXJzZUludChwYXJ0c1syXSwgMTApIDogMTtcbiAgLy8gbGVnYWN5IGFsaWFzLCBnb3QgcmVuYW1lZCBiYWNrIHRvIGNoYW5uZWxzIGluIE9SVEMuXG4gIHBhcnNlZC5udW1DaGFubmVscyA9IHBhcnNlZC5jaGFubmVscztcbiAgcmV0dXJuIHBhcnNlZDtcbn07XG5cbi8vIEdlbmVyYXRlIGFuIGE9cnRwbWFwIGxpbmUgZnJvbSBSVENSdHBDb2RlY0NhcGFiaWxpdHkgb3Jcbi8vIFJUQ1J0cENvZGVjUGFyYW1ldGVycy5cblNEUFV0aWxzLndyaXRlUnRwTWFwID0gZnVuY3Rpb24oY29kZWMpIHtcbiAgdmFyIHB0ID0gY29kZWMucGF5bG9hZFR5cGU7XG4gIGlmIChjb2RlYy5wcmVmZXJyZWRQYXlsb2FkVHlwZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcHQgPSBjb2RlYy5wcmVmZXJyZWRQYXlsb2FkVHlwZTtcbiAgfVxuICB2YXIgY2hhbm5lbHMgPSBjb2RlYy5jaGFubmVscyB8fCBjb2RlYy5udW1DaGFubmVscyB8fCAxO1xuICByZXR1cm4gJ2E9cnRwbWFwOicgKyBwdCArICcgJyArIGNvZGVjLm5hbWUgKyAnLycgKyBjb2RlYy5jbG9ja1JhdGUgK1xuICAgICAgKGNoYW5uZWxzICE9PSAxID8gJy8nICsgY2hhbm5lbHMgOiAnJykgKyAnXFxyXFxuJztcbn07XG5cbi8vIFBhcnNlcyBhbiBhPWV4dG1hcCBsaW5lIChoZWFkZXJleHRlbnNpb24gZnJvbSBSRkMgNTI4NSkuIFNhbXBsZSBpbnB1dDpcbi8vIGE9ZXh0bWFwOjIgdXJuOmlldGY6cGFyYW1zOnJ0cC1oZHJleHQ6dG9mZnNldFxuLy8gYT1leHRtYXA6Mi9zZW5kb25seSB1cm46aWV0ZjpwYXJhbXM6cnRwLWhkcmV4dDp0b2Zmc2V0XG5TRFBVdGlscy5wYXJzZUV4dG1hcCA9IGZ1bmN0aW9uKGxpbmUpIHtcbiAgdmFyIHBhcnRzID0gbGluZS5zdWJzdHIoOSkuc3BsaXQoJyAnKTtcbiAgcmV0dXJuIHtcbiAgICBpZDogcGFyc2VJbnQocGFydHNbMF0sIDEwKSxcbiAgICBkaXJlY3Rpb246IHBhcnRzWzBdLmluZGV4T2YoJy8nKSA+IDAgPyBwYXJ0c1swXS5zcGxpdCgnLycpWzFdIDogJ3NlbmRyZWN2JyxcbiAgICB1cmk6IHBhcnRzWzFdXG4gIH07XG59O1xuXG4vLyBHZW5lcmF0ZXMgYT1leHRtYXAgbGluZSBmcm9tIFJUQ1J0cEhlYWRlckV4dGVuc2lvblBhcmFtZXRlcnMgb3Jcbi8vIFJUQ1J0cEhlYWRlckV4dGVuc2lvbi5cblNEUFV0aWxzLndyaXRlRXh0bWFwID0gZnVuY3Rpb24oaGVhZGVyRXh0ZW5zaW9uKSB7XG4gIHJldHVybiAnYT1leHRtYXA6JyArIChoZWFkZXJFeHRlbnNpb24uaWQgfHwgaGVhZGVyRXh0ZW5zaW9uLnByZWZlcnJlZElkKSArXG4gICAgICAoaGVhZGVyRXh0ZW5zaW9uLmRpcmVjdGlvbiAmJiBoZWFkZXJFeHRlbnNpb24uZGlyZWN0aW9uICE9PSAnc2VuZHJlY3YnXG4gICAgICAgID8gJy8nICsgaGVhZGVyRXh0ZW5zaW9uLmRpcmVjdGlvblxuICAgICAgICA6ICcnKSArXG4gICAgICAnICcgKyBoZWFkZXJFeHRlbnNpb24udXJpICsgJ1xcclxcbic7XG59O1xuXG4vLyBQYXJzZXMgYW4gZnRtcCBsaW5lLCByZXR1cm5zIGRpY3Rpb25hcnkuIFNhbXBsZSBpbnB1dDpcbi8vIGE9Zm10cDo5NiB2YnI9b247Y25nPW9uXG4vLyBBbHNvIGRlYWxzIHdpdGggdmJyPW9uOyBjbmc9b25cblNEUFV0aWxzLnBhcnNlRm10cCA9IGZ1bmN0aW9uKGxpbmUpIHtcbiAgdmFyIHBhcnNlZCA9IHt9O1xuICB2YXIga3Y7XG4gIHZhciBwYXJ0cyA9IGxpbmUuc3Vic3RyKGxpbmUuaW5kZXhPZignICcpICsgMSkuc3BsaXQoJzsnKTtcbiAgZm9yICh2YXIgaiA9IDA7IGogPCBwYXJ0cy5sZW5ndGg7IGorKykge1xuICAgIGt2ID0gcGFydHNbal0udHJpbSgpLnNwbGl0KCc9Jyk7XG4gICAgcGFyc2VkW2t2WzBdLnRyaW0oKV0gPSBrdlsxXTtcbiAgfVxuICByZXR1cm4gcGFyc2VkO1xufTtcblxuLy8gR2VuZXJhdGVzIGFuIGE9ZnRtcCBsaW5lIGZyb20gUlRDUnRwQ29kZWNDYXBhYmlsaXR5IG9yIFJUQ1J0cENvZGVjUGFyYW1ldGVycy5cblNEUFV0aWxzLndyaXRlRm10cCA9IGZ1bmN0aW9uKGNvZGVjKSB7XG4gIHZhciBsaW5lID0gJyc7XG4gIHZhciBwdCA9IGNvZGVjLnBheWxvYWRUeXBlO1xuICBpZiAoY29kZWMucHJlZmVycmVkUGF5bG9hZFR5cGUgIT09IHVuZGVmaW5lZCkge1xuICAgIHB0ID0gY29kZWMucHJlZmVycmVkUGF5bG9hZFR5cGU7XG4gIH1cbiAgaWYgKGNvZGVjLnBhcmFtZXRlcnMgJiYgT2JqZWN0LmtleXMoY29kZWMucGFyYW1ldGVycykubGVuZ3RoKSB7XG4gICAgdmFyIHBhcmFtcyA9IFtdO1xuICAgIE9iamVjdC5rZXlzKGNvZGVjLnBhcmFtZXRlcnMpLmZvckVhY2goZnVuY3Rpb24ocGFyYW0pIHtcbiAgICAgIGlmIChjb2RlYy5wYXJhbWV0ZXJzW3BhcmFtXSkge1xuICAgICAgICBwYXJhbXMucHVzaChwYXJhbSArICc9JyArIGNvZGVjLnBhcmFtZXRlcnNbcGFyYW1dKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcmFtcy5wdXNoKHBhcmFtKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBsaW5lICs9ICdhPWZtdHA6JyArIHB0ICsgJyAnICsgcGFyYW1zLmpvaW4oJzsnKSArICdcXHJcXG4nO1xuICB9XG4gIHJldHVybiBsaW5lO1xufTtcblxuLy8gUGFyc2VzIGFuIHJ0Y3AtZmIgbGluZSwgcmV0dXJucyBSVENQUnRjcEZlZWRiYWNrIG9iamVjdC4gU2FtcGxlIGlucHV0OlxuLy8gYT1ydGNwLWZiOjk4IG5hY2sgcnBzaVxuU0RQVXRpbHMucGFyc2VSdGNwRmIgPSBmdW5jdGlvbihsaW5lKSB7XG4gIHZhciBwYXJ0cyA9IGxpbmUuc3Vic3RyKGxpbmUuaW5kZXhPZignICcpICsgMSkuc3BsaXQoJyAnKTtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBwYXJ0cy5zaGlmdCgpLFxuICAgIHBhcmFtZXRlcjogcGFydHMuam9pbignICcpXG4gIH07XG59O1xuLy8gR2VuZXJhdGUgYT1ydGNwLWZiIGxpbmVzIGZyb20gUlRDUnRwQ29kZWNDYXBhYmlsaXR5IG9yIFJUQ1J0cENvZGVjUGFyYW1ldGVycy5cblNEUFV0aWxzLndyaXRlUnRjcEZiID0gZnVuY3Rpb24oY29kZWMpIHtcbiAgdmFyIGxpbmVzID0gJyc7XG4gIHZhciBwdCA9IGNvZGVjLnBheWxvYWRUeXBlO1xuICBpZiAoY29kZWMucHJlZmVycmVkUGF5bG9hZFR5cGUgIT09IHVuZGVmaW5lZCkge1xuICAgIHB0ID0gY29kZWMucHJlZmVycmVkUGF5bG9hZFR5cGU7XG4gIH1cbiAgaWYgKGNvZGVjLnJ0Y3BGZWVkYmFjayAmJiBjb2RlYy5ydGNwRmVlZGJhY2subGVuZ3RoKSB7XG4gICAgLy8gRklYTUU6IHNwZWNpYWwgaGFuZGxpbmcgZm9yIHRyci1pbnQ/XG4gICAgY29kZWMucnRjcEZlZWRiYWNrLmZvckVhY2goZnVuY3Rpb24oZmIpIHtcbiAgICAgIGxpbmVzICs9ICdhPXJ0Y3AtZmI6JyArIHB0ICsgJyAnICsgZmIudHlwZSArXG4gICAgICAoZmIucGFyYW1ldGVyICYmIGZiLnBhcmFtZXRlci5sZW5ndGggPyAnICcgKyBmYi5wYXJhbWV0ZXIgOiAnJykgK1xuICAgICAgICAgICdcXHJcXG4nO1xuICAgIH0pO1xuICB9XG4gIHJldHVybiBsaW5lcztcbn07XG5cbi8vIFBhcnNlcyBhbiBSRkMgNTU3NiBzc3JjIG1lZGlhIGF0dHJpYnV0ZS4gU2FtcGxlIGlucHV0OlxuLy8gYT1zc3JjOjM3MzU5Mjg1NTkgY25hbWU6c29tZXRoaW5nXG5TRFBVdGlscy5wYXJzZVNzcmNNZWRpYSA9IGZ1bmN0aW9uKGxpbmUpIHtcbiAgdmFyIHNwID0gbGluZS5pbmRleE9mKCcgJyk7XG4gIHZhciBwYXJ0cyA9IHtcbiAgICBzc3JjOiBwYXJzZUludChsaW5lLnN1YnN0cig3LCBzcCAtIDcpLCAxMClcbiAgfTtcbiAgdmFyIGNvbG9uID0gbGluZS5pbmRleE9mKCc6Jywgc3ApO1xuICBpZiAoY29sb24gPiAtMSkge1xuICAgIHBhcnRzLmF0dHJpYnV0ZSA9IGxpbmUuc3Vic3RyKHNwICsgMSwgY29sb24gLSBzcCAtIDEpO1xuICAgIHBhcnRzLnZhbHVlID0gbGluZS5zdWJzdHIoY29sb24gKyAxKTtcbiAgfSBlbHNlIHtcbiAgICBwYXJ0cy5hdHRyaWJ1dGUgPSBsaW5lLnN1YnN0cihzcCArIDEpO1xuICB9XG4gIHJldHVybiBwYXJ0cztcbn07XG5cblNEUFV0aWxzLnBhcnNlU3NyY0dyb3VwID0gZnVuY3Rpb24obGluZSkge1xuICB2YXIgcGFydHMgPSBsaW5lLnN1YnN0cigxMykuc3BsaXQoJyAnKTtcbiAgcmV0dXJuIHtcbiAgICBzZW1hbnRpY3M6IHBhcnRzLnNoaWZ0KCksXG4gICAgc3NyY3M6IHBhcnRzLm1hcChmdW5jdGlvbihzc3JjKSB7XG4gICAgICByZXR1cm4gcGFyc2VJbnQoc3NyYywgMTApO1xuICAgIH0pXG4gIH07XG59O1xuXG4vLyBFeHRyYWN0cyB0aGUgTUlEIChSRkMgNTg4OCkgZnJvbSBhIG1lZGlhIHNlY3Rpb24uXG4vLyByZXR1cm5zIHRoZSBNSUQgb3IgdW5kZWZpbmVkIGlmIG5vIG1pZCBsaW5lIHdhcyBmb3VuZC5cblNEUFV0aWxzLmdldE1pZCA9IGZ1bmN0aW9uKG1lZGlhU2VjdGlvbikge1xuICB2YXIgbWlkID0gU0RQVXRpbHMubWF0Y2hQcmVmaXgobWVkaWFTZWN0aW9uLCAnYT1taWQ6JylbMF07XG4gIGlmIChtaWQpIHtcbiAgICByZXR1cm4gbWlkLnN1YnN0cig2KTtcbiAgfVxufTtcblxuU0RQVXRpbHMucGFyc2VGaW5nZXJwcmludCA9IGZ1bmN0aW9uKGxpbmUpIHtcbiAgdmFyIHBhcnRzID0gbGluZS5zdWJzdHIoMTQpLnNwbGl0KCcgJyk7XG4gIHJldHVybiB7XG4gICAgYWxnb3JpdGhtOiBwYXJ0c1swXS50b0xvd2VyQ2FzZSgpLCAvLyBhbGdvcml0aG0gaXMgY2FzZS1zZW5zaXRpdmUgaW4gRWRnZS5cbiAgICB2YWx1ZTogcGFydHNbMV1cbiAgfTtcbn07XG5cbi8vIEV4dHJhY3RzIERUTFMgcGFyYW1ldGVycyBmcm9tIFNEUCBtZWRpYSBzZWN0aW9uIG9yIHNlc3Npb25wYXJ0LlxuLy8gRklYTUU6IGZvciBjb25zaXN0ZW5jeSB3aXRoIG90aGVyIGZ1bmN0aW9ucyB0aGlzIHNob3VsZCBvbmx5XG4vLyAgIGdldCB0aGUgZmluZ2VycHJpbnQgbGluZSBhcyBpbnB1dC4gU2VlIGFsc28gZ2V0SWNlUGFyYW1ldGVycy5cblNEUFV0aWxzLmdldER0bHNQYXJhbWV0ZXJzID0gZnVuY3Rpb24obWVkaWFTZWN0aW9uLCBzZXNzaW9ucGFydCkge1xuICB2YXIgbGluZXMgPSBTRFBVdGlscy5tYXRjaFByZWZpeChtZWRpYVNlY3Rpb24gKyBzZXNzaW9ucGFydCxcbiAgICAnYT1maW5nZXJwcmludDonKTtcbiAgLy8gTm90ZTogYT1zZXR1cCBsaW5lIGlzIGlnbm9yZWQgc2luY2Ugd2UgdXNlIHRoZSAnYXV0bycgcm9sZS5cbiAgLy8gTm90ZTI6ICdhbGdvcml0aG0nIGlzIG5vdCBjYXNlIHNlbnNpdGl2ZSBleGNlcHQgaW4gRWRnZS5cbiAgcmV0dXJuIHtcbiAgICByb2xlOiAnYXV0bycsXG4gICAgZmluZ2VycHJpbnRzOiBsaW5lcy5tYXAoU0RQVXRpbHMucGFyc2VGaW5nZXJwcmludClcbiAgfTtcbn07XG5cbi8vIFNlcmlhbGl6ZXMgRFRMUyBwYXJhbWV0ZXJzIHRvIFNEUC5cblNEUFV0aWxzLndyaXRlRHRsc1BhcmFtZXRlcnMgPSBmdW5jdGlvbihwYXJhbXMsIHNldHVwVHlwZSkge1xuICB2YXIgc2RwID0gJ2E9c2V0dXA6JyArIHNldHVwVHlwZSArICdcXHJcXG4nO1xuICBwYXJhbXMuZmluZ2VycHJpbnRzLmZvckVhY2goZnVuY3Rpb24oZnApIHtcbiAgICBzZHAgKz0gJ2E9ZmluZ2VycHJpbnQ6JyArIGZwLmFsZ29yaXRobSArICcgJyArIGZwLnZhbHVlICsgJ1xcclxcbic7XG4gIH0pO1xuICByZXR1cm4gc2RwO1xufTtcblxuLy8gUGFyc2VzIGE9Y3J5cHRvIGxpbmVzIGludG9cbi8vICAgaHR0cHM6Ly9yYXdnaXQuY29tL2Fib2JhL2VkZ2VydGMvbWFzdGVyL21zb3J0Yy1yczQuaHRtbCNkaWN0aW9uYXJ5LXJ0Y3NydHBzZGVzcGFyYW1ldGVycy1tZW1iZXJzXG5TRFBVdGlscy5wYXJzZUNyeXB0b0xpbmUgPSBmdW5jdGlvbihsaW5lKSB7XG4gIHZhciBwYXJ0cyA9IGxpbmUuc3Vic3RyKDkpLnNwbGl0KCcgJyk7XG4gIHJldHVybiB7XG4gICAgdGFnOiBwYXJzZUludChwYXJ0c1swXSwgMTApLFxuICAgIGNyeXB0b1N1aXRlOiBwYXJ0c1sxXSxcbiAgICBrZXlQYXJhbXM6IHBhcnRzWzJdLFxuICAgIHNlc3Npb25QYXJhbXM6IHBhcnRzLnNsaWNlKDMpLFxuICB9O1xufTtcblxuU0RQVXRpbHMud3JpdGVDcnlwdG9MaW5lID0gZnVuY3Rpb24ocGFyYW1ldGVycykge1xuICByZXR1cm4gJ2E9Y3J5cHRvOicgKyBwYXJhbWV0ZXJzLnRhZyArICcgJyArXG4gICAgcGFyYW1ldGVycy5jcnlwdG9TdWl0ZSArICcgJyArXG4gICAgKHR5cGVvZiBwYXJhbWV0ZXJzLmtleVBhcmFtcyA9PT0gJ29iamVjdCdcbiAgICAgID8gU0RQVXRpbHMud3JpdGVDcnlwdG9LZXlQYXJhbXMocGFyYW1ldGVycy5rZXlQYXJhbXMpXG4gICAgICA6IHBhcmFtZXRlcnMua2V5UGFyYW1zKSArXG4gICAgKHBhcmFtZXRlcnMuc2Vzc2lvblBhcmFtcyA/ICcgJyArIHBhcmFtZXRlcnMuc2Vzc2lvblBhcmFtcy5qb2luKCcgJykgOiAnJykgK1xuICAgICdcXHJcXG4nO1xufTtcblxuLy8gUGFyc2VzIHRoZSBjcnlwdG8ga2V5IHBhcmFtZXRlcnMgaW50b1xuLy8gICBodHRwczovL3Jhd2dpdC5jb20vYWJvYmEvZWRnZXJ0Yy9tYXN0ZXIvbXNvcnRjLXJzNC5odG1sI3J0Y3NydHBrZXlwYXJhbSpcblNEUFV0aWxzLnBhcnNlQ3J5cHRvS2V5UGFyYW1zID0gZnVuY3Rpb24oa2V5UGFyYW1zKSB7XG4gIGlmIChrZXlQYXJhbXMuaW5kZXhPZignaW5saW5lOicpICE9PSAwKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgdmFyIHBhcnRzID0ga2V5UGFyYW1zLnN1YnN0cig3KS5zcGxpdCgnfCcpO1xuICByZXR1cm4ge1xuICAgIGtleU1ldGhvZDogJ2lubGluZScsXG4gICAga2V5U2FsdDogcGFydHNbMF0sXG4gICAgbGlmZVRpbWU6IHBhcnRzWzFdLFxuICAgIG1raVZhbHVlOiBwYXJ0c1syXSA/IHBhcnRzWzJdLnNwbGl0KCc6JylbMF0gOiB1bmRlZmluZWQsXG4gICAgbWtpTGVuZ3RoOiBwYXJ0c1syXSA/IHBhcnRzWzJdLnNwbGl0KCc6JylbMV0gOiB1bmRlZmluZWQsXG4gIH07XG59O1xuXG5TRFBVdGlscy53cml0ZUNyeXB0b0tleVBhcmFtcyA9IGZ1bmN0aW9uKGtleVBhcmFtcykge1xuICByZXR1cm4ga2V5UGFyYW1zLmtleU1ldGhvZCArICc6J1xuICAgICsga2V5UGFyYW1zLmtleVNhbHQgK1xuICAgIChrZXlQYXJhbXMubGlmZVRpbWUgPyAnfCcgKyBrZXlQYXJhbXMubGlmZVRpbWUgOiAnJykgK1xuICAgIChrZXlQYXJhbXMubWtpVmFsdWUgJiYga2V5UGFyYW1zLm1raUxlbmd0aFxuICAgICAgPyAnfCcgKyBrZXlQYXJhbXMubWtpVmFsdWUgKyAnOicgKyBrZXlQYXJhbXMubWtpTGVuZ3RoXG4gICAgICA6ICcnKTtcbn07XG5cbi8vIEV4dHJhY3RzIGFsbCBTREVTIHBhcmFtdGVycy5cblNEUFV0aWxzLmdldENyeXB0b1BhcmFtZXRlcnMgPSBmdW5jdGlvbihtZWRpYVNlY3Rpb24sIHNlc3Npb25wYXJ0KSB7XG4gIHZhciBsaW5lcyA9IFNEUFV0aWxzLm1hdGNoUHJlZml4KG1lZGlhU2VjdGlvbiArIHNlc3Npb25wYXJ0LFxuICAgICdhPWNyeXB0bzonKTtcbiAgcmV0dXJuIGxpbmVzLm1hcChTRFBVdGlscy5wYXJzZUNyeXB0b0xpbmUpO1xufTtcblxuLy8gUGFyc2VzIElDRSBpbmZvcm1hdGlvbiBmcm9tIFNEUCBtZWRpYSBzZWN0aW9uIG9yIHNlc3Npb25wYXJ0LlxuLy8gRklYTUU6IGZvciBjb25zaXN0ZW5jeSB3aXRoIG90aGVyIGZ1bmN0aW9ucyB0aGlzIHNob3VsZCBvbmx5XG4vLyAgIGdldCB0aGUgaWNlLXVmcmFnIGFuZCBpY2UtcHdkIGxpbmVzIGFzIGlucHV0LlxuU0RQVXRpbHMuZ2V0SWNlUGFyYW1ldGVycyA9IGZ1bmN0aW9uKG1lZGlhU2VjdGlvbiwgc2Vzc2lvbnBhcnQpIHtcbiAgdmFyIHVmcmFnID0gU0RQVXRpbHMubWF0Y2hQcmVmaXgobWVkaWFTZWN0aW9uICsgc2Vzc2lvbnBhcnQsXG4gICAgJ2E9aWNlLXVmcmFnOicpWzBdO1xuICB2YXIgcHdkID0gU0RQVXRpbHMubWF0Y2hQcmVmaXgobWVkaWFTZWN0aW9uICsgc2Vzc2lvbnBhcnQsXG4gICAgJ2E9aWNlLXB3ZDonKVswXTtcbiAgaWYgKCEodWZyYWcgJiYgcHdkKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiB7XG4gICAgdXNlcm5hbWVGcmFnbWVudDogdWZyYWcuc3Vic3RyKDEyKSxcbiAgICBwYXNzd29yZDogcHdkLnN1YnN0cigxMCksXG4gIH07XG59O1xuXG4vLyBTZXJpYWxpemVzIElDRSBwYXJhbWV0ZXJzIHRvIFNEUC5cblNEUFV0aWxzLndyaXRlSWNlUGFyYW1ldGVycyA9IGZ1bmN0aW9uKHBhcmFtcykge1xuICByZXR1cm4gJ2E9aWNlLXVmcmFnOicgKyBwYXJhbXMudXNlcm5hbWVGcmFnbWVudCArICdcXHJcXG4nICtcbiAgICAgICdhPWljZS1wd2Q6JyArIHBhcmFtcy5wYXNzd29yZCArICdcXHJcXG4nO1xufTtcblxuLy8gUGFyc2VzIHRoZSBTRFAgbWVkaWEgc2VjdGlvbiBhbmQgcmV0dXJucyBSVENSdHBQYXJhbWV0ZXJzLlxuU0RQVXRpbHMucGFyc2VSdHBQYXJhbWV0ZXJzID0gZnVuY3Rpb24obWVkaWFTZWN0aW9uKSB7XG4gIHZhciBkZXNjcmlwdGlvbiA9IHtcbiAgICBjb2RlY3M6IFtdLFxuICAgIGhlYWRlckV4dGVuc2lvbnM6IFtdLFxuICAgIGZlY01lY2hhbmlzbXM6IFtdLFxuICAgIHJ0Y3A6IFtdXG4gIH07XG4gIHZhciBsaW5lcyA9IFNEUFV0aWxzLnNwbGl0TGluZXMobWVkaWFTZWN0aW9uKTtcbiAgdmFyIG1saW5lID0gbGluZXNbMF0uc3BsaXQoJyAnKTtcbiAgZm9yICh2YXIgaSA9IDM7IGkgPCBtbGluZS5sZW5ndGg7IGkrKykgeyAvLyBmaW5kIGFsbCBjb2RlY3MgZnJvbSBtbGluZVszLi5dXG4gICAgdmFyIHB0ID0gbWxpbmVbaV07XG4gICAgdmFyIHJ0cG1hcGxpbmUgPSBTRFBVdGlscy5tYXRjaFByZWZpeChcbiAgICAgIG1lZGlhU2VjdGlvbiwgJ2E9cnRwbWFwOicgKyBwdCArICcgJylbMF07XG4gICAgaWYgKHJ0cG1hcGxpbmUpIHtcbiAgICAgIHZhciBjb2RlYyA9IFNEUFV0aWxzLnBhcnNlUnRwTWFwKHJ0cG1hcGxpbmUpO1xuICAgICAgdmFyIGZtdHBzID0gU0RQVXRpbHMubWF0Y2hQcmVmaXgoXG4gICAgICAgIG1lZGlhU2VjdGlvbiwgJ2E9Zm10cDonICsgcHQgKyAnICcpO1xuICAgICAgLy8gT25seSB0aGUgZmlyc3QgYT1mbXRwOjxwdD4gaXMgY29uc2lkZXJlZC5cbiAgICAgIGNvZGVjLnBhcmFtZXRlcnMgPSBmbXRwcy5sZW5ndGggPyBTRFBVdGlscy5wYXJzZUZtdHAoZm10cHNbMF0pIDoge307XG4gICAgICBjb2RlYy5ydGNwRmVlZGJhY2sgPSBTRFBVdGlscy5tYXRjaFByZWZpeChcbiAgICAgICAgbWVkaWFTZWN0aW9uLCAnYT1ydGNwLWZiOicgKyBwdCArICcgJylcbiAgICAgICAgLm1hcChTRFBVdGlscy5wYXJzZVJ0Y3BGYik7XG4gICAgICBkZXNjcmlwdGlvbi5jb2RlY3MucHVzaChjb2RlYyk7XG4gICAgICAvLyBwYXJzZSBGRUMgbWVjaGFuaXNtcyBmcm9tIHJ0cG1hcCBsaW5lcy5cbiAgICAgIHN3aXRjaCAoY29kZWMubmFtZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICAgIGNhc2UgJ1JFRCc6XG4gICAgICAgIGNhc2UgJ1VMUEZFQyc6XG4gICAgICAgICAgZGVzY3JpcHRpb24uZmVjTWVjaGFuaXNtcy5wdXNoKGNvZGVjLm5hbWUudG9VcHBlckNhc2UoKSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6IC8vIG9ubHkgUkVEIGFuZCBVTFBGRUMgYXJlIHJlY29nbml6ZWQgYXMgRkVDIG1lY2hhbmlzbXMuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIFNEUFV0aWxzLm1hdGNoUHJlZml4KG1lZGlhU2VjdGlvbiwgJ2E9ZXh0bWFwOicpLmZvckVhY2goZnVuY3Rpb24obGluZSkge1xuICAgIGRlc2NyaXB0aW9uLmhlYWRlckV4dGVuc2lvbnMucHVzaChTRFBVdGlscy5wYXJzZUV4dG1hcChsaW5lKSk7XG4gIH0pO1xuICAvLyBGSVhNRTogcGFyc2UgcnRjcC5cbiAgcmV0dXJuIGRlc2NyaXB0aW9uO1xufTtcblxuLy8gR2VuZXJhdGVzIHBhcnRzIG9mIHRoZSBTRFAgbWVkaWEgc2VjdGlvbiBkZXNjcmliaW5nIHRoZSBjYXBhYmlsaXRpZXMgL1xuLy8gcGFyYW1ldGVycy5cblNEUFV0aWxzLndyaXRlUnRwRGVzY3JpcHRpb24gPSBmdW5jdGlvbihraW5kLCBjYXBzKSB7XG4gIHZhciBzZHAgPSAnJztcblxuICAvLyBCdWlsZCB0aGUgbWxpbmUuXG4gIHNkcCArPSAnbT0nICsga2luZCArICcgJztcbiAgc2RwICs9IGNhcHMuY29kZWNzLmxlbmd0aCA+IDAgPyAnOScgOiAnMCc7IC8vIHJlamVjdCBpZiBubyBjb2RlY3MuXG4gIHNkcCArPSAnIFVEUC9UTFMvUlRQL1NBVlBGICc7XG4gIHNkcCArPSBjYXBzLmNvZGVjcy5tYXAoZnVuY3Rpb24oY29kZWMpIHtcbiAgICBpZiAoY29kZWMucHJlZmVycmVkUGF5bG9hZFR5cGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGNvZGVjLnByZWZlcnJlZFBheWxvYWRUeXBlO1xuICAgIH1cbiAgICByZXR1cm4gY29kZWMucGF5bG9hZFR5cGU7XG4gIH0pLmpvaW4oJyAnKSArICdcXHJcXG4nO1xuXG4gIHNkcCArPSAnYz1JTiBJUDQgMC4wLjAuMFxcclxcbic7XG4gIHNkcCArPSAnYT1ydGNwOjkgSU4gSVA0IDAuMC4wLjBcXHJcXG4nO1xuXG4gIC8vIEFkZCBhPXJ0cG1hcCBsaW5lcyBmb3IgZWFjaCBjb2RlYy4gQWxzbyBmbXRwIGFuZCBydGNwLWZiLlxuICBjYXBzLmNvZGVjcy5mb3JFYWNoKGZ1bmN0aW9uKGNvZGVjKSB7XG4gICAgc2RwICs9IFNEUFV0aWxzLndyaXRlUnRwTWFwKGNvZGVjKTtcbiAgICBzZHAgKz0gU0RQVXRpbHMud3JpdGVGbXRwKGNvZGVjKTtcbiAgICBzZHAgKz0gU0RQVXRpbHMud3JpdGVSdGNwRmIoY29kZWMpO1xuICB9KTtcbiAgdmFyIG1heHB0aW1lID0gMDtcbiAgY2Fwcy5jb2RlY3MuZm9yRWFjaChmdW5jdGlvbihjb2RlYykge1xuICAgIGlmIChjb2RlYy5tYXhwdGltZSA+IG1heHB0aW1lKSB7XG4gICAgICBtYXhwdGltZSA9IGNvZGVjLm1heHB0aW1lO1xuICAgIH1cbiAgfSk7XG4gIGlmIChtYXhwdGltZSA+IDApIHtcbiAgICBzZHAgKz0gJ2E9bWF4cHRpbWU6JyArIG1heHB0aW1lICsgJ1xcclxcbic7XG4gIH1cbiAgc2RwICs9ICdhPXJ0Y3AtbXV4XFxyXFxuJztcblxuICBpZiAoY2Fwcy5oZWFkZXJFeHRlbnNpb25zKSB7XG4gICAgY2Fwcy5oZWFkZXJFeHRlbnNpb25zLmZvckVhY2goZnVuY3Rpb24oZXh0ZW5zaW9uKSB7XG4gICAgICBzZHAgKz0gU0RQVXRpbHMud3JpdGVFeHRtYXAoZXh0ZW5zaW9uKTtcbiAgICB9KTtcbiAgfVxuICAvLyBGSVhNRTogd3JpdGUgZmVjTWVjaGFuaXNtcy5cbiAgcmV0dXJuIHNkcDtcbn07XG5cbi8vIFBhcnNlcyB0aGUgU0RQIG1lZGlhIHNlY3Rpb24gYW5kIHJldHVybnMgYW4gYXJyYXkgb2Zcbi8vIFJUQ1J0cEVuY29kaW5nUGFyYW1ldGVycy5cblNEUFV0aWxzLnBhcnNlUnRwRW5jb2RpbmdQYXJhbWV0ZXJzID0gZnVuY3Rpb24obWVkaWFTZWN0aW9uKSB7XG4gIHZhciBlbmNvZGluZ1BhcmFtZXRlcnMgPSBbXTtcbiAgdmFyIGRlc2NyaXB0aW9uID0gU0RQVXRpbHMucGFyc2VSdHBQYXJhbWV0ZXJzKG1lZGlhU2VjdGlvbik7XG4gIHZhciBoYXNSZWQgPSBkZXNjcmlwdGlvbi5mZWNNZWNoYW5pc21zLmluZGV4T2YoJ1JFRCcpICE9PSAtMTtcbiAgdmFyIGhhc1VscGZlYyA9IGRlc2NyaXB0aW9uLmZlY01lY2hhbmlzbXMuaW5kZXhPZignVUxQRkVDJykgIT09IC0xO1xuXG4gIC8vIGZpbHRlciBhPXNzcmM6Li4uIGNuYW1lOiwgaWdub3JlIFBsYW5CLW1zaWRcbiAgdmFyIHNzcmNzID0gU0RQVXRpbHMubWF0Y2hQcmVmaXgobWVkaWFTZWN0aW9uLCAnYT1zc3JjOicpXG4gICAgLm1hcChmdW5jdGlvbihsaW5lKSB7XG4gICAgICByZXR1cm4gU0RQVXRpbHMucGFyc2VTc3JjTWVkaWEobGluZSk7XG4gICAgfSlcbiAgICAuZmlsdGVyKGZ1bmN0aW9uKHBhcnRzKSB7XG4gICAgICByZXR1cm4gcGFydHMuYXR0cmlidXRlID09PSAnY25hbWUnO1xuICAgIH0pO1xuICB2YXIgcHJpbWFyeVNzcmMgPSBzc3Jjcy5sZW5ndGggPiAwICYmIHNzcmNzWzBdLnNzcmM7XG4gIHZhciBzZWNvbmRhcnlTc3JjO1xuXG4gIHZhciBmbG93cyA9IFNEUFV0aWxzLm1hdGNoUHJlZml4KG1lZGlhU2VjdGlvbiwgJ2E9c3NyYy1ncm91cDpGSUQnKVxuICAgIC5tYXAoZnVuY3Rpb24obGluZSkge1xuICAgICAgdmFyIHBhcnRzID0gbGluZS5zdWJzdHIoMTcpLnNwbGl0KCcgJyk7XG4gICAgICByZXR1cm4gcGFydHMubWFwKGZ1bmN0aW9uKHBhcnQpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlSW50KHBhcnQsIDEwKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICBpZiAoZmxvd3MubGVuZ3RoID4gMCAmJiBmbG93c1swXS5sZW5ndGggPiAxICYmIGZsb3dzWzBdWzBdID09PSBwcmltYXJ5U3NyYykge1xuICAgIHNlY29uZGFyeVNzcmMgPSBmbG93c1swXVsxXTtcbiAgfVxuXG4gIGRlc2NyaXB0aW9uLmNvZGVjcy5mb3JFYWNoKGZ1bmN0aW9uKGNvZGVjKSB7XG4gICAgaWYgKGNvZGVjLm5hbWUudG9VcHBlckNhc2UoKSA9PT0gJ1JUWCcgJiYgY29kZWMucGFyYW1ldGVycy5hcHQpIHtcbiAgICAgIHZhciBlbmNQYXJhbSA9IHtcbiAgICAgICAgc3NyYzogcHJpbWFyeVNzcmMsXG4gICAgICAgIGNvZGVjUGF5bG9hZFR5cGU6IHBhcnNlSW50KGNvZGVjLnBhcmFtZXRlcnMuYXB0LCAxMClcbiAgICAgIH07XG4gICAgICBpZiAocHJpbWFyeVNzcmMgJiYgc2Vjb25kYXJ5U3NyYykge1xuICAgICAgICBlbmNQYXJhbS5ydHggPSB7c3NyYzogc2Vjb25kYXJ5U3NyY307XG4gICAgICB9XG4gICAgICBlbmNvZGluZ1BhcmFtZXRlcnMucHVzaChlbmNQYXJhbSk7XG4gICAgICBpZiAoaGFzUmVkKSB7XG4gICAgICAgIGVuY1BhcmFtID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShlbmNQYXJhbSkpO1xuICAgICAgICBlbmNQYXJhbS5mZWMgPSB7XG4gICAgICAgICAgc3NyYzogcHJpbWFyeVNzcmMsXG4gICAgICAgICAgbWVjaGFuaXNtOiBoYXNVbHBmZWMgPyAncmVkK3VscGZlYycgOiAncmVkJ1xuICAgICAgICB9O1xuICAgICAgICBlbmNvZGluZ1BhcmFtZXRlcnMucHVzaChlbmNQYXJhbSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgaWYgKGVuY29kaW5nUGFyYW1ldGVycy5sZW5ndGggPT09IDAgJiYgcHJpbWFyeVNzcmMpIHtcbiAgICBlbmNvZGluZ1BhcmFtZXRlcnMucHVzaCh7XG4gICAgICBzc3JjOiBwcmltYXJ5U3NyY1xuICAgIH0pO1xuICB9XG5cbiAgLy8gd2Ugc3VwcG9ydCBib3RoIGI9QVMgYW5kIGI9VElBUyBidXQgaW50ZXJwcmV0IEFTIGFzIFRJQVMuXG4gIHZhciBiYW5kd2lkdGggPSBTRFBVdGlscy5tYXRjaFByZWZpeChtZWRpYVNlY3Rpb24sICdiPScpO1xuICBpZiAoYmFuZHdpZHRoLmxlbmd0aCkge1xuICAgIGlmIChiYW5kd2lkdGhbMF0uaW5kZXhPZignYj1USUFTOicpID09PSAwKSB7XG4gICAgICBiYW5kd2lkdGggPSBwYXJzZUludChiYW5kd2lkdGhbMF0uc3Vic3RyKDcpLCAxMCk7XG4gICAgfSBlbHNlIGlmIChiYW5kd2lkdGhbMF0uaW5kZXhPZignYj1BUzonKSA9PT0gMCkge1xuICAgICAgLy8gdXNlIGZvcm11bGEgZnJvbSBKU0VQIHRvIGNvbnZlcnQgYj1BUyB0byBUSUFTIHZhbHVlLlxuICAgICAgYmFuZHdpZHRoID0gcGFyc2VJbnQoYmFuZHdpZHRoWzBdLnN1YnN0cig1KSwgMTApICogMTAwMCAqIDAuOTVcbiAgICAgICAgICAtICg1MCAqIDQwICogOCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJhbmR3aWR0aCA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZW5jb2RpbmdQYXJhbWV0ZXJzLmZvckVhY2goZnVuY3Rpb24ocGFyYW1zKSB7XG4gICAgICBwYXJhbXMubWF4Qml0cmF0ZSA9IGJhbmR3aWR0aDtcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gZW5jb2RpbmdQYXJhbWV0ZXJzO1xufTtcblxuLy8gcGFyc2VzIGh0dHA6Ly9kcmFmdC5vcnRjLm9yZy8jcnRjcnRjcHBhcmFtZXRlcnMqXG5TRFBVdGlscy5wYXJzZVJ0Y3BQYXJhbWV0ZXJzID0gZnVuY3Rpb24obWVkaWFTZWN0aW9uKSB7XG4gIHZhciBydGNwUGFyYW1ldGVycyA9IHt9O1xuXG4gIC8vIEdldHMgdGhlIGZpcnN0IFNTUkMuIE5vdGUgdGhhIHdpdGggUlRYIHRoZXJlIG1pZ2h0IGJlIG11bHRpcGxlXG4gIC8vIFNTUkNzLlxuICB2YXIgcmVtb3RlU3NyYyA9IFNEUFV0aWxzLm1hdGNoUHJlZml4KG1lZGlhU2VjdGlvbiwgJ2E9c3NyYzonKVxuICAgIC5tYXAoZnVuY3Rpb24obGluZSkge1xuICAgICAgcmV0dXJuIFNEUFV0aWxzLnBhcnNlU3NyY01lZGlhKGxpbmUpO1xuICAgIH0pXG4gICAgLmZpbHRlcihmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiBvYmouYXR0cmlidXRlID09PSAnY25hbWUnO1xuICAgIH0pWzBdO1xuICBpZiAocmVtb3RlU3NyYykge1xuICAgIHJ0Y3BQYXJhbWV0ZXJzLmNuYW1lID0gcmVtb3RlU3NyYy52YWx1ZTtcbiAgICBydGNwUGFyYW1ldGVycy5zc3JjID0gcmVtb3RlU3NyYy5zc3JjO1xuICB9XG5cbiAgLy8gRWRnZSB1c2VzIHRoZSBjb21wb3VuZCBhdHRyaWJ1dGUgaW5zdGVhZCBvZiByZWR1Y2VkU2l6ZVxuICAvLyBjb21wb3VuZCBpcyAhcmVkdWNlZFNpemVcbiAgdmFyIHJzaXplID0gU0RQVXRpbHMubWF0Y2hQcmVmaXgobWVkaWFTZWN0aW9uLCAnYT1ydGNwLXJzaXplJyk7XG4gIHJ0Y3BQYXJhbWV0ZXJzLnJlZHVjZWRTaXplID0gcnNpemUubGVuZ3RoID4gMDtcbiAgcnRjcFBhcmFtZXRlcnMuY29tcG91bmQgPSByc2l6ZS5sZW5ndGggPT09IDA7XG5cbiAgLy8gcGFyc2VzIHRoZSBydGNwLW11eCBhdHRy0ZZidXRlLlxuICAvLyBOb3RlIHRoYXQgRWRnZSBkb2VzIG5vdCBzdXBwb3J0IHVubXV4ZWQgUlRDUC5cbiAgdmFyIG11eCA9IFNEUFV0aWxzLm1hdGNoUHJlZml4KG1lZGlhU2VjdGlvbiwgJ2E9cnRjcC1tdXgnKTtcbiAgcnRjcFBhcmFtZXRlcnMubXV4ID0gbXV4Lmxlbmd0aCA+IDA7XG5cbiAgcmV0dXJuIHJ0Y3BQYXJhbWV0ZXJzO1xufTtcblxuLy8gcGFyc2VzIGVpdGhlciBhPW1zaWQ6IG9yIGE9c3NyYzouLi4gbXNpZCBsaW5lcyBhbmQgcmV0dXJuc1xuLy8gdGhlIGlkIG9mIHRoZSBNZWRpYVN0cmVhbSBhbmQgTWVkaWFTdHJlYW1UcmFjay5cblNEUFV0aWxzLnBhcnNlTXNpZCA9IGZ1bmN0aW9uKG1lZGlhU2VjdGlvbikge1xuICB2YXIgcGFydHM7XG4gIHZhciBzcGVjID0gU0RQVXRpbHMubWF0Y2hQcmVmaXgobWVkaWFTZWN0aW9uLCAnYT1tc2lkOicpO1xuICBpZiAoc3BlYy5sZW5ndGggPT09IDEpIHtcbiAgICBwYXJ0cyA9IHNwZWNbMF0uc3Vic3RyKDcpLnNwbGl0KCcgJyk7XG4gICAgcmV0dXJuIHtzdHJlYW06IHBhcnRzWzBdLCB0cmFjazogcGFydHNbMV19O1xuICB9XG4gIHZhciBwbGFuQiA9IFNEUFV0aWxzLm1hdGNoUHJlZml4KG1lZGlhU2VjdGlvbiwgJ2E9c3NyYzonKVxuICAgIC5tYXAoZnVuY3Rpb24obGluZSkge1xuICAgICAgcmV0dXJuIFNEUFV0aWxzLnBhcnNlU3NyY01lZGlhKGxpbmUpO1xuICAgIH0pXG4gICAgLmZpbHRlcihmdW5jdGlvbihtc2lkUGFydHMpIHtcbiAgICAgIHJldHVybiBtc2lkUGFydHMuYXR0cmlidXRlID09PSAnbXNpZCc7XG4gICAgfSk7XG4gIGlmIChwbGFuQi5sZW5ndGggPiAwKSB7XG4gICAgcGFydHMgPSBwbGFuQlswXS52YWx1ZS5zcGxpdCgnICcpO1xuICAgIHJldHVybiB7c3RyZWFtOiBwYXJ0c1swXSwgdHJhY2s6IHBhcnRzWzFdfTtcbiAgfVxufTtcblxuLy8gU0NUUFxuLy8gcGFyc2VzIGRyYWZ0LWlldGYtbW11c2ljLXNjdHAtc2RwLTI2IGZpcnN0IGFuZCBmYWxscyBiYWNrXG4vLyB0byBkcmFmdC1pZXRmLW1tdXNpYy1zY3RwLXNkcC0wNVxuU0RQVXRpbHMucGFyc2VTY3RwRGVzY3JpcHRpb24gPSBmdW5jdGlvbihtZWRpYVNlY3Rpb24pIHtcbiAgdmFyIG1saW5lID0gU0RQVXRpbHMucGFyc2VNTGluZShtZWRpYVNlY3Rpb24pO1xuICB2YXIgbWF4U2l6ZUxpbmUgPSBTRFBVdGlscy5tYXRjaFByZWZpeChtZWRpYVNlY3Rpb24sICdhPW1heC1tZXNzYWdlLXNpemU6Jyk7XG4gIHZhciBtYXhNZXNzYWdlU2l6ZTtcbiAgaWYgKG1heFNpemVMaW5lLmxlbmd0aCA+IDApIHtcbiAgICBtYXhNZXNzYWdlU2l6ZSA9IHBhcnNlSW50KG1heFNpemVMaW5lWzBdLnN1YnN0cigxOSksIDEwKTtcbiAgfVxuICBpZiAoaXNOYU4obWF4TWVzc2FnZVNpemUpKSB7XG4gICAgbWF4TWVzc2FnZVNpemUgPSA2NTUzNjtcbiAgfVxuICB2YXIgc2N0cFBvcnQgPSBTRFBVdGlscy5tYXRjaFByZWZpeChtZWRpYVNlY3Rpb24sICdhPXNjdHAtcG9ydDonKTtcbiAgaWYgKHNjdHBQb3J0Lmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4ge1xuICAgICAgcG9ydDogcGFyc2VJbnQoc2N0cFBvcnRbMF0uc3Vic3RyKDEyKSwgMTApLFxuICAgICAgcHJvdG9jb2w6IG1saW5lLmZtdCxcbiAgICAgIG1heE1lc3NhZ2VTaXplOiBtYXhNZXNzYWdlU2l6ZVxuICAgIH07XG4gIH1cbiAgdmFyIHNjdHBNYXBMaW5lcyA9IFNEUFV0aWxzLm1hdGNoUHJlZml4KG1lZGlhU2VjdGlvbiwgJ2E9c2N0cG1hcDonKTtcbiAgaWYgKHNjdHBNYXBMaW5lcy5sZW5ndGggPiAwKSB7XG4gICAgdmFyIHBhcnRzID0gU0RQVXRpbHMubWF0Y2hQcmVmaXgobWVkaWFTZWN0aW9uLCAnYT1zY3RwbWFwOicpWzBdXG4gICAgICAuc3Vic3RyKDEwKVxuICAgICAgLnNwbGl0KCcgJyk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBvcnQ6IHBhcnNlSW50KHBhcnRzWzBdLCAxMCksXG4gICAgICBwcm90b2NvbDogcGFydHNbMV0sXG4gICAgICBtYXhNZXNzYWdlU2l6ZTogbWF4TWVzc2FnZVNpemVcbiAgICB9O1xuICB9XG59O1xuXG4vLyBTQ1RQXG4vLyBvdXRwdXRzIHRoZSBkcmFmdC1pZXRmLW1tdXNpYy1zY3RwLXNkcC0yNiB2ZXJzaW9uIHRoYXQgYWxsIGJyb3dzZXJzXG4vLyBzdXBwb3J0IGJ5IG5vdyByZWNlaXZpbmcgaW4gdGhpcyBmb3JtYXQsIHVubGVzcyB3ZSBvcmlnaW5hbGx5IHBhcnNlZFxuLy8gYXMgdGhlIGRyYWZ0LWlldGYtbW11c2ljLXNjdHAtc2RwLTA1IGZvcm1hdCAoaW5kaWNhdGVkIGJ5IHRoZSBtLWxpbmVcbi8vIHByb3RvY29sIG9mIERUTFMvU0NUUCAtLSB3aXRob3V0IFVEUC8gb3IgVENQLylcblNEUFV0aWxzLndyaXRlU2N0cERlc2NyaXB0aW9uID0gZnVuY3Rpb24obWVkaWEsIHNjdHApIHtcbiAgdmFyIG91dHB1dCA9IFtdO1xuICBpZiAobWVkaWEucHJvdG9jb2wgIT09ICdEVExTL1NDVFAnKSB7XG4gICAgb3V0cHV0ID0gW1xuICAgICAgJ209JyArIG1lZGlhLmtpbmQgKyAnIDkgJyArIG1lZGlhLnByb3RvY29sICsgJyAnICsgc2N0cC5wcm90b2NvbCArICdcXHJcXG4nLFxuICAgICAgJ2M9SU4gSVA0IDAuMC4wLjBcXHJcXG4nLFxuICAgICAgJ2E9c2N0cC1wb3J0OicgKyBzY3RwLnBvcnQgKyAnXFxyXFxuJ1xuICAgIF07XG4gIH0gZWxzZSB7XG4gICAgb3V0cHV0ID0gW1xuICAgICAgJ209JyArIG1lZGlhLmtpbmQgKyAnIDkgJyArIG1lZGlhLnByb3RvY29sICsgJyAnICsgc2N0cC5wb3J0ICsgJ1xcclxcbicsXG4gICAgICAnYz1JTiBJUDQgMC4wLjAuMFxcclxcbicsXG4gICAgICAnYT1zY3RwbWFwOicgKyBzY3RwLnBvcnQgKyAnICcgKyBzY3RwLnByb3RvY29sICsgJyA2NTUzNVxcclxcbidcbiAgICBdO1xuICB9XG4gIGlmIChzY3RwLm1heE1lc3NhZ2VTaXplICE9PSB1bmRlZmluZWQpIHtcbiAgICBvdXRwdXQucHVzaCgnYT1tYXgtbWVzc2FnZS1zaXplOicgKyBzY3RwLm1heE1lc3NhZ2VTaXplICsgJ1xcclxcbicpO1xuICB9XG4gIHJldHVybiBvdXRwdXQuam9pbignJyk7XG59O1xuXG4vLyBHZW5lcmF0ZSBhIHNlc3Npb24gSUQgZm9yIFNEUC5cbi8vIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9kcmFmdC1pZXRmLXJ0Y3dlYi1qc2VwLTIwI3NlY3Rpb24tNS4yLjFcbi8vIHJlY29tbWVuZHMgdXNpbmcgYSBjcnlwdG9ncmFwaGljYWxseSByYW5kb20gK3ZlIDY0LWJpdCB2YWx1ZVxuLy8gYnV0IHJpZ2h0IG5vdyB0aGlzIHNob3VsZCBiZSBhY2NlcHRhYmxlIGFuZCB3aXRoaW4gdGhlIHJpZ2h0IHJhbmdlXG5TRFBVdGlscy5nZW5lcmF0ZVNlc3Npb25JZCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygpLnN1YnN0cigyLCAyMSk7XG59O1xuXG4vLyBXcml0ZSBib2lsZGVyIHBsYXRlIGZvciBzdGFydCBvZiBTRFBcbi8vIHNlc3NJZCBhcmd1bWVudCBpcyBvcHRpb25hbCAtIGlmIG5vdCBzdXBwbGllZCBpdCB3aWxsXG4vLyBiZSBnZW5lcmF0ZWQgcmFuZG9tbHlcbi8vIHNlc3NWZXJzaW9uIGlzIG9wdGlvbmFsIGFuZCBkZWZhdWx0cyB0byAyXG4vLyBzZXNzVXNlciBpcyBvcHRpb25hbCBhbmQgZGVmYXVsdHMgdG8gJ3RoaXNpc2FkYXB0ZXJvcnRjJ1xuU0RQVXRpbHMud3JpdGVTZXNzaW9uQm9pbGVycGxhdGUgPSBmdW5jdGlvbihzZXNzSWQsIHNlc3NWZXIsIHNlc3NVc2VyKSB7XG4gIHZhciBzZXNzaW9uSWQ7XG4gIHZhciB2ZXJzaW9uID0gc2Vzc1ZlciAhPT0gdW5kZWZpbmVkID8gc2Vzc1ZlciA6IDI7XG4gIGlmIChzZXNzSWQpIHtcbiAgICBzZXNzaW9uSWQgPSBzZXNzSWQ7XG4gIH0gZWxzZSB7XG4gICAgc2Vzc2lvbklkID0gU0RQVXRpbHMuZ2VuZXJhdGVTZXNzaW9uSWQoKTtcbiAgfVxuICB2YXIgdXNlciA9IHNlc3NVc2VyIHx8ICd0aGlzaXNhZGFwdGVyb3J0Yyc7XG4gIC8vIEZJWE1FOiBzZXNzLWlkIHNob3VsZCBiZSBhbiBOVFAgdGltZXN0YW1wLlxuICByZXR1cm4gJ3Y9MFxcclxcbicgK1xuICAgICAgJ289JyArIHVzZXIgKyAnICcgKyBzZXNzaW9uSWQgKyAnICcgKyB2ZXJzaW9uICtcbiAgICAgICAgJyBJTiBJUDQgMTI3LjAuMC4xXFxyXFxuJyArXG4gICAgICAncz0tXFxyXFxuJyArXG4gICAgICAndD0wIDBcXHJcXG4nO1xufTtcblxuU0RQVXRpbHMud3JpdGVNZWRpYVNlY3Rpb24gPSBmdW5jdGlvbih0cmFuc2NlaXZlciwgY2FwcywgdHlwZSwgc3RyZWFtKSB7XG4gIHZhciBzZHAgPSBTRFBVdGlscy53cml0ZVJ0cERlc2NyaXB0aW9uKHRyYW5zY2VpdmVyLmtpbmQsIGNhcHMpO1xuXG4gIC8vIE1hcCBJQ0UgcGFyYW1ldGVycyAodWZyYWcsIHB3ZCkgdG8gU0RQLlxuICBzZHAgKz0gU0RQVXRpbHMud3JpdGVJY2VQYXJhbWV0ZXJzKFxuICAgIHRyYW5zY2VpdmVyLmljZUdhdGhlcmVyLmdldExvY2FsUGFyYW1ldGVycygpKTtcblxuICAvLyBNYXAgRFRMUyBwYXJhbWV0ZXJzIHRvIFNEUC5cbiAgc2RwICs9IFNEUFV0aWxzLndyaXRlRHRsc1BhcmFtZXRlcnMoXG4gICAgdHJhbnNjZWl2ZXIuZHRsc1RyYW5zcG9ydC5nZXRMb2NhbFBhcmFtZXRlcnMoKSxcbiAgICB0eXBlID09PSAnb2ZmZXInID8gJ2FjdHBhc3MnIDogJ2FjdGl2ZScpO1xuXG4gIHNkcCArPSAnYT1taWQ6JyArIHRyYW5zY2VpdmVyLm1pZCArICdcXHJcXG4nO1xuXG4gIGlmICh0cmFuc2NlaXZlci5kaXJlY3Rpb24pIHtcbiAgICBzZHAgKz0gJ2E9JyArIHRyYW5zY2VpdmVyLmRpcmVjdGlvbiArICdcXHJcXG4nO1xuICB9IGVsc2UgaWYgKHRyYW5zY2VpdmVyLnJ0cFNlbmRlciAmJiB0cmFuc2NlaXZlci5ydHBSZWNlaXZlcikge1xuICAgIHNkcCArPSAnYT1zZW5kcmVjdlxcclxcbic7XG4gIH0gZWxzZSBpZiAodHJhbnNjZWl2ZXIucnRwU2VuZGVyKSB7XG4gICAgc2RwICs9ICdhPXNlbmRvbmx5XFxyXFxuJztcbiAgfSBlbHNlIGlmICh0cmFuc2NlaXZlci5ydHBSZWNlaXZlcikge1xuICAgIHNkcCArPSAnYT1yZWN2b25seVxcclxcbic7XG4gIH0gZWxzZSB7XG4gICAgc2RwICs9ICdhPWluYWN0aXZlXFxyXFxuJztcbiAgfVxuXG4gIGlmICh0cmFuc2NlaXZlci5ydHBTZW5kZXIpIHtcbiAgICAvLyBzcGVjLlxuICAgIHZhciBtc2lkID0gJ21zaWQ6JyArIHN0cmVhbS5pZCArICcgJyArXG4gICAgICAgIHRyYW5zY2VpdmVyLnJ0cFNlbmRlci50cmFjay5pZCArICdcXHJcXG4nO1xuICAgIHNkcCArPSAnYT0nICsgbXNpZDtcblxuICAgIC8vIGZvciBDaHJvbWUuXG4gICAgc2RwICs9ICdhPXNzcmM6JyArIHRyYW5zY2VpdmVyLnNlbmRFbmNvZGluZ1BhcmFtZXRlcnNbMF0uc3NyYyArXG4gICAgICAgICcgJyArIG1zaWQ7XG4gICAgaWYgKHRyYW5zY2VpdmVyLnNlbmRFbmNvZGluZ1BhcmFtZXRlcnNbMF0ucnR4KSB7XG4gICAgICBzZHAgKz0gJ2E9c3NyYzonICsgdHJhbnNjZWl2ZXIuc2VuZEVuY29kaW5nUGFyYW1ldGVyc1swXS5ydHguc3NyYyArXG4gICAgICAgICAgJyAnICsgbXNpZDtcbiAgICAgIHNkcCArPSAnYT1zc3JjLWdyb3VwOkZJRCAnICtcbiAgICAgICAgICB0cmFuc2NlaXZlci5zZW5kRW5jb2RpbmdQYXJhbWV0ZXJzWzBdLnNzcmMgKyAnICcgK1xuICAgICAgICAgIHRyYW5zY2VpdmVyLnNlbmRFbmNvZGluZ1BhcmFtZXRlcnNbMF0ucnR4LnNzcmMgK1xuICAgICAgICAgICdcXHJcXG4nO1xuICAgIH1cbiAgfVxuICAvLyBGSVhNRTogdGhpcyBzaG91bGQgYmUgd3JpdHRlbiBieSB3cml0ZVJ0cERlc2NyaXB0aW9uLlxuICBzZHAgKz0gJ2E9c3NyYzonICsgdHJhbnNjZWl2ZXIuc2VuZEVuY29kaW5nUGFyYW1ldGVyc1swXS5zc3JjICtcbiAgICAgICcgY25hbWU6JyArIFNEUFV0aWxzLmxvY2FsQ05hbWUgKyAnXFxyXFxuJztcbiAgaWYgKHRyYW5zY2VpdmVyLnJ0cFNlbmRlciAmJiB0cmFuc2NlaXZlci5zZW5kRW5jb2RpbmdQYXJhbWV0ZXJzWzBdLnJ0eCkge1xuICAgIHNkcCArPSAnYT1zc3JjOicgKyB0cmFuc2NlaXZlci5zZW5kRW5jb2RpbmdQYXJhbWV0ZXJzWzBdLnJ0eC5zc3JjICtcbiAgICAgICAgJyBjbmFtZTonICsgU0RQVXRpbHMubG9jYWxDTmFtZSArICdcXHJcXG4nO1xuICB9XG4gIHJldHVybiBzZHA7XG59O1xuXG4vLyBHZXRzIHRoZSBkaXJlY3Rpb24gZnJvbSB0aGUgbWVkaWFTZWN0aW9uIG9yIHRoZSBzZXNzaW9ucGFydC5cblNEUFV0aWxzLmdldERpcmVjdGlvbiA9IGZ1bmN0aW9uKG1lZGlhU2VjdGlvbiwgc2Vzc2lvbnBhcnQpIHtcbiAgLy8gTG9vayBmb3Igc2VuZHJlY3YsIHNlbmRvbmx5LCByZWN2b25seSwgaW5hY3RpdmUsIGRlZmF1bHQgdG8gc2VuZHJlY3YuXG4gIHZhciBsaW5lcyA9IFNEUFV0aWxzLnNwbGl0TGluZXMobWVkaWFTZWN0aW9uKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xuICAgIHN3aXRjaCAobGluZXNbaV0pIHtcbiAgICAgIGNhc2UgJ2E9c2VuZHJlY3YnOlxuICAgICAgY2FzZSAnYT1zZW5kb25seSc6XG4gICAgICBjYXNlICdhPXJlY3Zvbmx5JzpcbiAgICAgIGNhc2UgJ2E9aW5hY3RpdmUnOlxuICAgICAgICByZXR1cm4gbGluZXNbaV0uc3Vic3RyKDIpO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgLy8gRklYTUU6IFdoYXQgc2hvdWxkIGhhcHBlbiBoZXJlP1xuICAgIH1cbiAgfVxuICBpZiAoc2Vzc2lvbnBhcnQpIHtcbiAgICByZXR1cm4gU0RQVXRpbHMuZ2V0RGlyZWN0aW9uKHNlc3Npb25wYXJ0KTtcbiAgfVxuICByZXR1cm4gJ3NlbmRyZWN2Jztcbn07XG5cblNEUFV0aWxzLmdldEtpbmQgPSBmdW5jdGlvbihtZWRpYVNlY3Rpb24pIHtcbiAgdmFyIGxpbmVzID0gU0RQVXRpbHMuc3BsaXRMaW5lcyhtZWRpYVNlY3Rpb24pO1xuICB2YXIgbWxpbmUgPSBsaW5lc1swXS5zcGxpdCgnICcpO1xuICByZXR1cm4gbWxpbmVbMF0uc3Vic3RyKDIpO1xufTtcblxuU0RQVXRpbHMuaXNSZWplY3RlZCA9IGZ1bmN0aW9uKG1lZGlhU2VjdGlvbikge1xuICByZXR1cm4gbWVkaWFTZWN0aW9uLnNwbGl0KCcgJywgMilbMV0gPT09ICcwJztcbn07XG5cblNEUFV0aWxzLnBhcnNlTUxpbmUgPSBmdW5jdGlvbihtZWRpYVNlY3Rpb24pIHtcbiAgdmFyIGxpbmVzID0gU0RQVXRpbHMuc3BsaXRMaW5lcyhtZWRpYVNlY3Rpb24pO1xuICB2YXIgcGFydHMgPSBsaW5lc1swXS5zdWJzdHIoMikuc3BsaXQoJyAnKTtcbiAgcmV0dXJuIHtcbiAgICBraW5kOiBwYXJ0c1swXSxcbiAgICBwb3J0OiBwYXJzZUludChwYXJ0c1sxXSwgMTApLFxuICAgIHByb3RvY29sOiBwYXJ0c1syXSxcbiAgICBmbXQ6IHBhcnRzLnNsaWNlKDMpLmpvaW4oJyAnKVxuICB9O1xufTtcblxuU0RQVXRpbHMucGFyc2VPTGluZSA9IGZ1bmN0aW9uKG1lZGlhU2VjdGlvbikge1xuICB2YXIgbGluZSA9IFNEUFV0aWxzLm1hdGNoUHJlZml4KG1lZGlhU2VjdGlvbiwgJ289JylbMF07XG4gIHZhciBwYXJ0cyA9IGxpbmUuc3Vic3RyKDIpLnNwbGl0KCcgJyk7XG4gIHJldHVybiB7XG4gICAgdXNlcm5hbWU6IHBhcnRzWzBdLFxuICAgIHNlc3Npb25JZDogcGFydHNbMV0sXG4gICAgc2Vzc2lvblZlcnNpb246IHBhcnNlSW50KHBhcnRzWzJdLCAxMCksXG4gICAgbmV0VHlwZTogcGFydHNbM10sXG4gICAgYWRkcmVzc1R5cGU6IHBhcnRzWzRdLFxuICAgIGFkZHJlc3M6IHBhcnRzWzVdXG4gIH07XG59O1xuXG4vLyBhIHZlcnkgbmFpdmUgaW50ZXJwcmV0YXRpb24gb2YgYSB2YWxpZCBTRFAuXG5TRFBVdGlscy5pc1ZhbGlkU0RQID0gZnVuY3Rpb24oYmxvYikge1xuICBpZiAodHlwZW9mIGJsb2IgIT09ICdzdHJpbmcnIHx8IGJsb2IubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBsaW5lcyA9IFNEUFV0aWxzLnNwbGl0TGluZXMoYmxvYik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAobGluZXNbaV0ubGVuZ3RoIDwgMiB8fCBsaW5lc1tpXS5jaGFyQXQoMSkgIT09ICc9Jykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvLyBUT0RPOiBjaGVjayB0aGUgbW9kaWZpZXIgYSBiaXQgbW9yZS5cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbi8vIEV4cG9zZSBwdWJsaWMgbWV0aG9kcy5cbmlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jykge1xuICBtb2R1bGUuZXhwb3J0cyA9IFNEUFV0aWxzO1xufVxuIiwiLyoqXG4gKiBDb252ZXJ0IGFycmF5IG9mIDE2IGJ5dGUgdmFsdWVzIHRvIFVVSUQgc3RyaW5nIGZvcm1hdCBvZiB0aGUgZm9ybTpcbiAqIFhYWFhYWFhYLVhYWFgtWFhYWC1YWFhYLVhYWFhYWFhYWFhYWFxuICovXG52YXIgYnl0ZVRvSGV4ID0gW107XG5mb3IgKHZhciBpID0gMDsgaSA8IDI1NjsgKytpKSB7XG4gIGJ5dGVUb0hleFtpXSA9IChpICsgMHgxMDApLnRvU3RyaW5nKDE2KS5zdWJzdHIoMSk7XG59XG5cbmZ1bmN0aW9uIGJ5dGVzVG9VdWlkKGJ1Ziwgb2Zmc2V0KSB7XG4gIHZhciBpID0gb2Zmc2V0IHx8IDA7XG4gIHZhciBidGggPSBieXRlVG9IZXg7XG4gIC8vIGpvaW4gdXNlZCB0byBmaXggbWVtb3J5IGlzc3VlIGNhdXNlZCBieSBjb25jYXRlbmF0aW9uOiBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMTc1I2M0XG4gIHJldHVybiAoW1xuICAgIGJ0aFtidWZbaSsrXV0sIGJ0aFtidWZbaSsrXV0sXG4gICAgYnRoW2J1ZltpKytdXSwgYnRoW2J1ZltpKytdXSwgJy0nLFxuICAgIGJ0aFtidWZbaSsrXV0sIGJ0aFtidWZbaSsrXV0sICctJyxcbiAgICBidGhbYnVmW2krK11dLCBidGhbYnVmW2krK11dLCAnLScsXG4gICAgYnRoW2J1ZltpKytdXSwgYnRoW2J1ZltpKytdXSwgJy0nLFxuICAgIGJ0aFtidWZbaSsrXV0sIGJ0aFtidWZbaSsrXV0sXG4gICAgYnRoW2J1ZltpKytdXSwgYnRoW2J1ZltpKytdXSxcbiAgICBidGhbYnVmW2krK11dLCBidGhbYnVmW2krK11dXG4gIF0pLmpvaW4oJycpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJ5dGVzVG9VdWlkO1xuIiwiLy8gVW5pcXVlIElEIGNyZWF0aW9uIHJlcXVpcmVzIGEgaGlnaCBxdWFsaXR5IHJhbmRvbSAjIGdlbmVyYXRvci4gIEluIHRoZVxuLy8gYnJvd3NlciB0aGlzIGlzIGEgbGl0dGxlIGNvbXBsaWNhdGVkIGR1ZSB0byB1bmtub3duIHF1YWxpdHkgb2YgTWF0aC5yYW5kb20oKVxuLy8gYW5kIGluY29uc2lzdGVudCBzdXBwb3J0IGZvciB0aGUgYGNyeXB0b2AgQVBJLiAgV2UgZG8gdGhlIGJlc3Qgd2UgY2FuIHZpYVxuLy8gZmVhdHVyZS1kZXRlY3Rpb25cblxuLy8gZ2V0UmFuZG9tVmFsdWVzIG5lZWRzIHRvIGJlIGludm9rZWQgaW4gYSBjb250ZXh0IHdoZXJlIFwidGhpc1wiIGlzIGEgQ3J5cHRvXG4vLyBpbXBsZW1lbnRhdGlvbi4gQWxzbywgZmluZCB0aGUgY29tcGxldGUgaW1wbGVtZW50YXRpb24gb2YgY3J5cHRvIG9uIElFMTEuXG52YXIgZ2V0UmFuZG9tVmFsdWVzID0gKHR5cGVvZihjcnlwdG8pICE9ICd1bmRlZmluZWQnICYmIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMgJiYgY3J5cHRvLmdldFJhbmRvbVZhbHVlcy5iaW5kKGNyeXB0bykpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgKHR5cGVvZihtc0NyeXB0bykgIT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5tc0NyeXB0by5nZXRSYW5kb21WYWx1ZXMgPT0gJ2Z1bmN0aW9uJyAmJiBtc0NyeXB0by5nZXRSYW5kb21WYWx1ZXMuYmluZChtc0NyeXB0bykpO1xuXG5pZiAoZ2V0UmFuZG9tVmFsdWVzKSB7XG4gIC8vIFdIQVRXRyBjcnlwdG8gUk5HIC0gaHR0cDovL3dpa2kud2hhdHdnLm9yZy93aWtpL0NyeXB0b1xuICB2YXIgcm5kczggPSBuZXcgVWludDhBcnJheSgxNik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcblxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHdoYXR3Z1JORygpIHtcbiAgICBnZXRSYW5kb21WYWx1ZXMocm5kczgpO1xuICAgIHJldHVybiBybmRzODtcbiAgfTtcbn0gZWxzZSB7XG4gIC8vIE1hdGgucmFuZG9tKCktYmFzZWQgKFJORylcbiAgLy9cbiAgLy8gSWYgYWxsIGVsc2UgZmFpbHMsIHVzZSBNYXRoLnJhbmRvbSgpLiAgSXQncyBmYXN0LCBidXQgaXMgb2YgdW5zcGVjaWZpZWRcbiAgLy8gcXVhbGl0eS5cbiAgdmFyIHJuZHMgPSBuZXcgQXJyYXkoMTYpO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbWF0aFJORygpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgcjsgaSA8IDE2OyBpKyspIHtcbiAgICAgIGlmICgoaSAmIDB4MDMpID09PSAwKSByID0gTWF0aC5yYW5kb20oKSAqIDB4MTAwMDAwMDAwO1xuICAgICAgcm5kc1tpXSA9IHIgPj4+ICgoaSAmIDB4MDMpIDw8IDMpICYgMHhmZjtcbiAgICB9XG5cbiAgICByZXR1cm4gcm5kcztcbiAgfTtcbn1cbiIsInZhciBybmcgPSByZXF1aXJlKCcuL2xpYi9ybmcnKTtcbnZhciBieXRlc1RvVXVpZCA9IHJlcXVpcmUoJy4vbGliL2J5dGVzVG9VdWlkJyk7XG5cbmZ1bmN0aW9uIHY0KG9wdGlvbnMsIGJ1Ziwgb2Zmc2V0KSB7XG4gIHZhciBpID0gYnVmICYmIG9mZnNldCB8fCAwO1xuXG4gIGlmICh0eXBlb2Yob3B0aW9ucykgPT0gJ3N0cmluZycpIHtcbiAgICBidWYgPSBvcHRpb25zID09PSAnYmluYXJ5JyA/IG5ldyBBcnJheSgxNikgOiBudWxsO1xuICAgIG9wdGlvbnMgPSBudWxsO1xuICB9XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIHZhciBybmRzID0gb3B0aW9ucy5yYW5kb20gfHwgKG9wdGlvbnMucm5nIHx8IHJuZykoKTtcblxuICAvLyBQZXIgNC40LCBzZXQgYml0cyBmb3IgdmVyc2lvbiBhbmQgYGNsb2NrX3NlcV9oaV9hbmRfcmVzZXJ2ZWRgXG4gIHJuZHNbNl0gPSAocm5kc1s2XSAmIDB4MGYpIHwgMHg0MDtcbiAgcm5kc1s4XSA9IChybmRzWzhdICYgMHgzZikgfCAweDgwO1xuXG4gIC8vIENvcHkgYnl0ZXMgdG8gYnVmZmVyLCBpZiBwcm92aWRlZFxuICBpZiAoYnVmKSB7XG4gICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IDE2OyArK2lpKSB7XG4gICAgICBidWZbaSArIGlpXSA9IHJuZHNbaWldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBidWYgfHwgYnl0ZXNUb1V1aWQocm5kcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdjQ7XG4iLCIvKlxuICogIENvcHlyaWdodCAoYykgMjAxNiBUaGUgV2ViUlRDIHByb2plY3QgYXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiAgVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYSBCU0Qtc3R5bGUgbGljZW5zZVxuICogIHRoYXQgY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3Qgb2YgdGhlIHNvdXJjZVxuICogIHRyZWUuXG4gKi9cbiAvKiBlc2xpbnQtZW52IG5vZGUgKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgYWRhcHRlckZhY3RvcnkgPSByZXF1aXJlKCcuL2FkYXB0ZXJfZmFjdG9yeS5qcycpO1xubW9kdWxlLmV4cG9ydHMgPSBhZGFwdGVyRmFjdG9yeSh7d2luZG93OiBnbG9iYWwud2luZG93fSk7XG4iLCIvKlxuICogIENvcHlyaWdodCAoYykgMjAxNiBUaGUgV2ViUlRDIHByb2plY3QgYXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiAgVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYSBCU0Qtc3R5bGUgbGljZW5zZVxuICogIHRoYXQgY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3Qgb2YgdGhlIHNvdXJjZVxuICogIHRyZWUuXG4gKi9cbiAvKiBlc2xpbnQtZW52IG5vZGUgKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG4vLyBTaGltbWluZyBzdGFydHMgaGVyZS5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZGVwZW5kZW5jaWVzLCBvcHRzKSB7XG4gIHZhciB3aW5kb3cgPSBkZXBlbmRlbmNpZXMgJiYgZGVwZW5kZW5jaWVzLndpbmRvdztcblxuICB2YXIgb3B0aW9ucyA9IHtcbiAgICBzaGltQ2hyb21lOiB0cnVlLFxuICAgIHNoaW1GaXJlZm94OiB0cnVlLFxuICAgIHNoaW1FZGdlOiB0cnVlLFxuICAgIHNoaW1TYWZhcmk6IHRydWUsXG4gIH07XG5cbiAgZm9yICh2YXIga2V5IGluIG9wdHMpIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvcHRzLCBrZXkpKSB7XG4gICAgICBvcHRpb25zW2tleV0gPSBvcHRzW2tleV07XG4gICAgfVxuICB9XG5cbiAgLy8gVXRpbHMuXG4gIHZhciBsb2dnaW5nID0gdXRpbHMubG9nO1xuICB2YXIgYnJvd3NlckRldGFpbHMgPSB1dGlscy5kZXRlY3RCcm93c2VyKHdpbmRvdyk7XG5cbiAgLy8gVW5jb21tZW50IHRoZSBsaW5lIGJlbG93IGlmIHlvdSB3YW50IGxvZ2dpbmcgdG8gb2NjdXIsIGluY2x1ZGluZyBsb2dnaW5nXG4gIC8vIGZvciB0aGUgc3dpdGNoIHN0YXRlbWVudCBiZWxvdy4gQ2FuIGFsc28gYmUgdHVybmVkIG9uIGluIHRoZSBicm93c2VyIHZpYVxuICAvLyBhZGFwdGVyLmRpc2FibGVMb2coZmFsc2UpLCBidXQgdGhlbiBsb2dnaW5nIGZyb20gdGhlIHN3aXRjaCBzdGF0ZW1lbnQgYmVsb3dcbiAgLy8gd2lsbCBub3QgYXBwZWFyLlxuICAvLyByZXF1aXJlKCcuL3V0aWxzJykuZGlzYWJsZUxvZyhmYWxzZSk7XG5cbiAgLy8gQnJvd3NlciBzaGltcy5cbiAgdmFyIGNocm9tZVNoaW0gPSByZXF1aXJlKCcuL2Nocm9tZS9jaHJvbWVfc2hpbScpIHx8IG51bGw7XG4gIHZhciBlZGdlU2hpbSA9IHJlcXVpcmUoJy4vZWRnZS9lZGdlX3NoaW0nKSB8fCBudWxsO1xuICB2YXIgZmlyZWZveFNoaW0gPSByZXF1aXJlKCcuL2ZpcmVmb3gvZmlyZWZveF9zaGltJykgfHwgbnVsbDtcbiAgdmFyIHNhZmFyaVNoaW0gPSByZXF1aXJlKCcuL3NhZmFyaS9zYWZhcmlfc2hpbScpIHx8IG51bGw7XG4gIHZhciBjb21tb25TaGltID0gcmVxdWlyZSgnLi9jb21tb25fc2hpbScpIHx8IG51bGw7XG5cbiAgLy8gRXhwb3J0IHRvIHRoZSBhZGFwdGVyIGdsb2JhbCBvYmplY3QgdmlzaWJsZSBpbiB0aGUgYnJvd3Nlci5cbiAgdmFyIGFkYXB0ZXIgPSB7XG4gICAgYnJvd3NlckRldGFpbHM6IGJyb3dzZXJEZXRhaWxzLFxuICAgIGNvbW1vblNoaW06IGNvbW1vblNoaW0sXG4gICAgZXh0cmFjdFZlcnNpb246IHV0aWxzLmV4dHJhY3RWZXJzaW9uLFxuICAgIGRpc2FibGVMb2c6IHV0aWxzLmRpc2FibGVMb2csXG4gICAgZGlzYWJsZVdhcm5pbmdzOiB1dGlscy5kaXNhYmxlV2FybmluZ3NcbiAgfTtcblxuICAvLyBTaGltIGJyb3dzZXIgaWYgZm91bmQuXG4gIHN3aXRjaCAoYnJvd3NlckRldGFpbHMuYnJvd3Nlcikge1xuICAgIGNhc2UgJ2Nocm9tZSc6XG4gICAgICBpZiAoIWNocm9tZVNoaW0gfHwgIWNocm9tZVNoaW0uc2hpbVBlZXJDb25uZWN0aW9uIHx8XG4gICAgICAgICAgIW9wdGlvbnMuc2hpbUNocm9tZSkge1xuICAgICAgICBsb2dnaW5nKCdDaHJvbWUgc2hpbSBpcyBub3QgaW5jbHVkZWQgaW4gdGhpcyBhZGFwdGVyIHJlbGVhc2UuJyk7XG4gICAgICAgIHJldHVybiBhZGFwdGVyO1xuICAgICAgfVxuICAgICAgbG9nZ2luZygnYWRhcHRlci5qcyBzaGltbWluZyBjaHJvbWUuJyk7XG4gICAgICAvLyBFeHBvcnQgdG8gdGhlIGFkYXB0ZXIgZ2xvYmFsIG9iamVjdCB2aXNpYmxlIGluIHRoZSBicm93c2VyLlxuICAgICAgYWRhcHRlci5icm93c2VyU2hpbSA9IGNocm9tZVNoaW07XG4gICAgICBjb21tb25TaGltLnNoaW1DcmVhdGVPYmplY3RVUkwod2luZG93KTtcblxuICAgICAgY2hyb21lU2hpbS5zaGltR2V0VXNlck1lZGlhKHdpbmRvdyk7XG4gICAgICBjaHJvbWVTaGltLnNoaW1NZWRpYVN0cmVhbSh3aW5kb3cpO1xuICAgICAgY2hyb21lU2hpbS5zaGltU291cmNlT2JqZWN0KHdpbmRvdyk7XG4gICAgICBjaHJvbWVTaGltLnNoaW1QZWVyQ29ubmVjdGlvbih3aW5kb3cpO1xuICAgICAgY2hyb21lU2hpbS5zaGltT25UcmFjayh3aW5kb3cpO1xuICAgICAgY2hyb21lU2hpbS5zaGltQWRkVHJhY2tSZW1vdmVUcmFjayh3aW5kb3cpO1xuICAgICAgY2hyb21lU2hpbS5zaGltR2V0U2VuZGVyc1dpdGhEdG1mKHdpbmRvdyk7XG4gICAgICBjaHJvbWVTaGltLnNoaW1TZW5kZXJSZWNlaXZlckdldFN0YXRzKHdpbmRvdyk7XG4gICAgICBjaHJvbWVTaGltLmZpeE5lZ290aWF0aW9uTmVlZGVkKHdpbmRvdyk7XG5cbiAgICAgIGNvbW1vblNoaW0uc2hpbVJUQ0ljZUNhbmRpZGF0ZSh3aW5kb3cpO1xuICAgICAgY29tbW9uU2hpbS5zaGltTWF4TWVzc2FnZVNpemUod2luZG93KTtcbiAgICAgIGNvbW1vblNoaW0uc2hpbVNlbmRUaHJvd1R5cGVFcnJvcih3aW5kb3cpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnZmlyZWZveCc6XG4gICAgICBpZiAoIWZpcmVmb3hTaGltIHx8ICFmaXJlZm94U2hpbS5zaGltUGVlckNvbm5lY3Rpb24gfHxcbiAgICAgICAgICAhb3B0aW9ucy5zaGltRmlyZWZveCkge1xuICAgICAgICBsb2dnaW5nKCdGaXJlZm94IHNoaW0gaXMgbm90IGluY2x1ZGVkIGluIHRoaXMgYWRhcHRlciByZWxlYXNlLicpO1xuICAgICAgICByZXR1cm4gYWRhcHRlcjtcbiAgICAgIH1cbiAgICAgIGxvZ2dpbmcoJ2FkYXB0ZXIuanMgc2hpbW1pbmcgZmlyZWZveC4nKTtcbiAgICAgIC8vIEV4cG9ydCB0byB0aGUgYWRhcHRlciBnbG9iYWwgb2JqZWN0IHZpc2libGUgaW4gdGhlIGJyb3dzZXIuXG4gICAgICBhZGFwdGVyLmJyb3dzZXJTaGltID0gZmlyZWZveFNoaW07XG4gICAgICBjb21tb25TaGltLnNoaW1DcmVhdGVPYmplY3RVUkwod2luZG93KTtcblxuICAgICAgZmlyZWZveFNoaW0uc2hpbUdldFVzZXJNZWRpYSh3aW5kb3cpO1xuICAgICAgZmlyZWZveFNoaW0uc2hpbVNvdXJjZU9iamVjdCh3aW5kb3cpO1xuICAgICAgZmlyZWZveFNoaW0uc2hpbVBlZXJDb25uZWN0aW9uKHdpbmRvdyk7XG4gICAgICBmaXJlZm94U2hpbS5zaGltT25UcmFjayh3aW5kb3cpO1xuICAgICAgZmlyZWZveFNoaW0uc2hpbVJlbW92ZVN0cmVhbSh3aW5kb3cpO1xuICAgICAgZmlyZWZveFNoaW0uc2hpbVNlbmRlckdldFN0YXRzKHdpbmRvdyk7XG4gICAgICBmaXJlZm94U2hpbS5zaGltUmVjZWl2ZXJHZXRTdGF0cyh3aW5kb3cpO1xuICAgICAgZmlyZWZveFNoaW0uc2hpbVJUQ0RhdGFDaGFubmVsKHdpbmRvdyk7XG5cbiAgICAgIGNvbW1vblNoaW0uc2hpbVJUQ0ljZUNhbmRpZGF0ZSh3aW5kb3cpO1xuICAgICAgY29tbW9uU2hpbS5zaGltTWF4TWVzc2FnZVNpemUod2luZG93KTtcbiAgICAgIGNvbW1vblNoaW0uc2hpbVNlbmRUaHJvd1R5cGVFcnJvcih3aW5kb3cpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnZWRnZSc6XG4gICAgICBpZiAoIWVkZ2VTaGltIHx8ICFlZGdlU2hpbS5zaGltUGVlckNvbm5lY3Rpb24gfHwgIW9wdGlvbnMuc2hpbUVkZ2UpIHtcbiAgICAgICAgbG9nZ2luZygnTVMgZWRnZSBzaGltIGlzIG5vdCBpbmNsdWRlZCBpbiB0aGlzIGFkYXB0ZXIgcmVsZWFzZS4nKTtcbiAgICAgICAgcmV0dXJuIGFkYXB0ZXI7XG4gICAgICB9XG4gICAgICBsb2dnaW5nKCdhZGFwdGVyLmpzIHNoaW1taW5nIGVkZ2UuJyk7XG4gICAgICAvLyBFeHBvcnQgdG8gdGhlIGFkYXB0ZXIgZ2xvYmFsIG9iamVjdCB2aXNpYmxlIGluIHRoZSBicm93c2VyLlxuICAgICAgYWRhcHRlci5icm93c2VyU2hpbSA9IGVkZ2VTaGltO1xuICAgICAgY29tbW9uU2hpbS5zaGltQ3JlYXRlT2JqZWN0VVJMKHdpbmRvdyk7XG5cbiAgICAgIGVkZ2VTaGltLnNoaW1HZXRVc2VyTWVkaWEod2luZG93KTtcbiAgICAgIGVkZ2VTaGltLnNoaW1QZWVyQ29ubmVjdGlvbih3aW5kb3cpO1xuICAgICAgZWRnZVNoaW0uc2hpbVJlcGxhY2VUcmFjayh3aW5kb3cpO1xuICAgICAgZWRnZVNoaW0uc2hpbUdldERpc3BsYXlNZWRpYSh3aW5kb3cpO1xuXG4gICAgICAvLyB0aGUgZWRnZSBzaGltIGltcGxlbWVudHMgdGhlIGZ1bGwgUlRDSWNlQ2FuZGlkYXRlIG9iamVjdC5cblxuICAgICAgY29tbW9uU2hpbS5zaGltTWF4TWVzc2FnZVNpemUod2luZG93KTtcbiAgICAgIGNvbW1vblNoaW0uc2hpbVNlbmRUaHJvd1R5cGVFcnJvcih3aW5kb3cpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnc2FmYXJpJzpcbiAgICAgIGlmICghc2FmYXJpU2hpbSB8fCAhb3B0aW9ucy5zaGltU2FmYXJpKSB7XG4gICAgICAgIGxvZ2dpbmcoJ1NhZmFyaSBzaGltIGlzIG5vdCBpbmNsdWRlZCBpbiB0aGlzIGFkYXB0ZXIgcmVsZWFzZS4nKTtcbiAgICAgICAgcmV0dXJuIGFkYXB0ZXI7XG4gICAgICB9XG4gICAgICBsb2dnaW5nKCdhZGFwdGVyLmpzIHNoaW1taW5nIHNhZmFyaS4nKTtcbiAgICAgIC8vIEV4cG9ydCB0byB0aGUgYWRhcHRlciBnbG9iYWwgb2JqZWN0IHZpc2libGUgaW4gdGhlIGJyb3dzZXIuXG4gICAgICBhZGFwdGVyLmJyb3dzZXJTaGltID0gc2FmYXJpU2hpbTtcbiAgICAgIGNvbW1vblNoaW0uc2hpbUNyZWF0ZU9iamVjdFVSTCh3aW5kb3cpO1xuXG4gICAgICBzYWZhcmlTaGltLnNoaW1SVENJY2VTZXJ2ZXJVcmxzKHdpbmRvdyk7XG4gICAgICBzYWZhcmlTaGltLnNoaW1DcmVhdGVPZmZlckxlZ2FjeSh3aW5kb3cpO1xuICAgICAgc2FmYXJpU2hpbS5zaGltQ2FsbGJhY2tzQVBJKHdpbmRvdyk7XG4gICAgICBzYWZhcmlTaGltLnNoaW1Mb2NhbFN0cmVhbXNBUEkod2luZG93KTtcbiAgICAgIHNhZmFyaVNoaW0uc2hpbVJlbW90ZVN0cmVhbXNBUEkod2luZG93KTtcbiAgICAgIHNhZmFyaVNoaW0uc2hpbVRyYWNrRXZlbnRUcmFuc2NlaXZlcih3aW5kb3cpO1xuICAgICAgc2FmYXJpU2hpbS5zaGltR2V0VXNlck1lZGlhKHdpbmRvdyk7XG5cbiAgICAgIGNvbW1vblNoaW0uc2hpbVJUQ0ljZUNhbmRpZGF0ZSh3aW5kb3cpO1xuICAgICAgY29tbW9uU2hpbS5zaGltTWF4TWVzc2FnZVNpemUod2luZG93KTtcbiAgICAgIGNvbW1vblNoaW0uc2hpbVNlbmRUaHJvd1R5cGVFcnJvcih3aW5kb3cpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGxvZ2dpbmcoJ1Vuc3VwcG9ydGVkIGJyb3dzZXIhJyk7XG4gICAgICBicmVhaztcbiAgfVxuXG4gIHJldHVybiBhZGFwdGVyO1xufTtcbiIsIlxuLypcbiAqICBDb3B5cmlnaHQgKGMpIDIwMTYgVGhlIFdlYlJUQyBwcm9qZWN0IGF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlIGxpY2Vuc2VcbiAqICB0aGF0IGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IG9mIHRoZSBzb3VyY2VcbiAqICB0cmVlLlxuICovXG4gLyogZXNsaW50LWVudiBub2RlICovXG4ndXNlIHN0cmljdCc7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscy5qcycpO1xudmFyIGxvZ2dpbmcgPSB1dGlscy5sb2c7XG5cbi8qIGl0ZXJhdGVzIHRoZSBzdGF0cyBncmFwaCByZWN1cnNpdmVseS4gKi9cbmZ1bmN0aW9uIHdhbGtTdGF0cyhzdGF0cywgYmFzZSwgcmVzdWx0U2V0KSB7XG4gIGlmICghYmFzZSB8fCByZXN1bHRTZXQuaGFzKGJhc2UuaWQpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHJlc3VsdFNldC5zZXQoYmFzZS5pZCwgYmFzZSk7XG4gIE9iamVjdC5rZXlzKGJhc2UpLmZvckVhY2goZnVuY3Rpb24obmFtZSkge1xuICAgIGlmIChuYW1lLmVuZHNXaXRoKCdJZCcpKSB7XG4gICAgICB3YWxrU3RhdHMoc3RhdHMsIHN0YXRzLmdldChiYXNlW25hbWVdKSwgcmVzdWx0U2V0KTtcbiAgICB9IGVsc2UgaWYgKG5hbWUuZW5kc1dpdGgoJ0lkcycpKSB7XG4gICAgICBiYXNlW25hbWVdLmZvckVhY2goZnVuY3Rpb24oaWQpIHtcbiAgICAgICAgd2Fsa1N0YXRzKHN0YXRzLCBzdGF0cy5nZXQoaWQpLCByZXN1bHRTZXQpO1xuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbn1cblxuLyogZmlsdGVyIGdldFN0YXRzIGZvciBhIHNlbmRlci9yZWNlaXZlciB0cmFjay4gKi9cbmZ1bmN0aW9uIGZpbHRlclN0YXRzKHJlc3VsdCwgdHJhY2ssIG91dGJvdW5kKSB7XG4gIHZhciBzdHJlYW1TdGF0c1R5cGUgPSBvdXRib3VuZCA/ICdvdXRib3VuZC1ydHAnIDogJ2luYm91bmQtcnRwJztcbiAgdmFyIGZpbHRlcmVkUmVzdWx0ID0gbmV3IE1hcCgpO1xuICBpZiAodHJhY2sgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmlsdGVyZWRSZXN1bHQ7XG4gIH1cbiAgdmFyIHRyYWNrU3RhdHMgPSBbXTtcbiAgcmVzdWx0LmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAodmFsdWUudHlwZSA9PT0gJ3RyYWNrJyAmJlxuICAgICAgICB2YWx1ZS50cmFja0lkZW50aWZpZXIgPT09IHRyYWNrLmlkKSB7XG4gICAgICB0cmFja1N0YXRzLnB1c2godmFsdWUpO1xuICAgIH1cbiAgfSk7XG4gIHRyYWNrU3RhdHMuZm9yRWFjaChmdW5jdGlvbih0cmFja1N0YXQpIHtcbiAgICByZXN1bHQuZm9yRWFjaChmdW5jdGlvbihzdGF0cykge1xuICAgICAgaWYgKHN0YXRzLnR5cGUgPT09IHN0cmVhbVN0YXRzVHlwZSAmJiBzdGF0cy50cmFja0lkID09PSB0cmFja1N0YXQuaWQpIHtcbiAgICAgICAgd2Fsa1N0YXRzKHJlc3VsdCwgc3RhdHMsIGZpbHRlcmVkUmVzdWx0KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiBmaWx0ZXJlZFJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNoaW1HZXRVc2VyTWVkaWE6IHJlcXVpcmUoJy4vZ2V0dXNlcm1lZGlhJyksXG4gIHNoaW1NZWRpYVN0cmVhbTogZnVuY3Rpb24od2luZG93KSB7XG4gICAgd2luZG93Lk1lZGlhU3RyZWFtID0gd2luZG93Lk1lZGlhU3RyZWFtIHx8IHdpbmRvdy53ZWJraXRNZWRpYVN0cmVhbTtcbiAgfSxcblxuICBzaGltT25UcmFjazogZnVuY3Rpb24od2luZG93KSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnICYmIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbiAmJiAhKCdvbnRyYWNrJyBpblxuICAgICAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlKSkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUsICdvbnRyYWNrJywge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLl9vbnRyYWNrO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uKGYpIHtcbiAgICAgICAgICBpZiAodGhpcy5fb250cmFjaykge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCd0cmFjaycsIHRoaXMuX29udHJhY2spO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYWNrJywgdGhpcy5fb250cmFjayA9IGYpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgICAgdmFyIG9yaWdTZXRSZW1vdGVEZXNjcmlwdGlvbiA9XG4gICAgICAgICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5zZXRSZW1vdGVEZXNjcmlwdGlvbjtcbiAgICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuc2V0UmVtb3RlRGVzY3JpcHRpb24gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHBjID0gdGhpcztcbiAgICAgICAgaWYgKCFwYy5fb250cmFja3BvbHkpIHtcbiAgICAgICAgICBwYy5fb250cmFja3BvbHkgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAvLyBvbmFkZHN0cmVhbSBkb2VzIG5vdCBmaXJlIHdoZW4gYSB0cmFjayBpcyBhZGRlZCB0byBhbiBleGlzdGluZ1xuICAgICAgICAgICAgLy8gc3RyZWFtLiBCdXQgc3RyZWFtLm9uYWRkdHJhY2sgaXMgaW1wbGVtZW50ZWQgc28gd2UgdXNlIHRoYXQuXG4gICAgICAgICAgICBlLnN0cmVhbS5hZGRFdmVudExpc3RlbmVyKCdhZGR0cmFjaycsIGZ1bmN0aW9uKHRlKSB7XG4gICAgICAgICAgICAgIHZhciByZWNlaXZlcjtcbiAgICAgICAgICAgICAgaWYgKHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0UmVjZWl2ZXJzKSB7XG4gICAgICAgICAgICAgICAgcmVjZWl2ZXIgPSBwYy5nZXRSZWNlaXZlcnMoKS5maW5kKGZ1bmN0aW9uKHIpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiByLnRyYWNrICYmIHIudHJhY2suaWQgPT09IHRlLnRyYWNrLmlkO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlY2VpdmVyID0ge3RyYWNrOiB0ZS50cmFja307XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB2YXIgZXZlbnQgPSBuZXcgRXZlbnQoJ3RyYWNrJyk7XG4gICAgICAgICAgICAgIGV2ZW50LnRyYWNrID0gdGUudHJhY2s7XG4gICAgICAgICAgICAgIGV2ZW50LnJlY2VpdmVyID0gcmVjZWl2ZXI7XG4gICAgICAgICAgICAgIGV2ZW50LnRyYW5zY2VpdmVyID0ge3JlY2VpdmVyOiByZWNlaXZlcn07XG4gICAgICAgICAgICAgIGV2ZW50LnN0cmVhbXMgPSBbZS5zdHJlYW1dO1xuICAgICAgICAgICAgICBwYy5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZS5zdHJlYW0uZ2V0VHJhY2tzKCkuZm9yRWFjaChmdW5jdGlvbih0cmFjaykge1xuICAgICAgICAgICAgICB2YXIgcmVjZWl2ZXI7XG4gICAgICAgICAgICAgIGlmICh3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmdldFJlY2VpdmVycykge1xuICAgICAgICAgICAgICAgIHJlY2VpdmVyID0gcGMuZ2V0UmVjZWl2ZXJzKCkuZmluZChmdW5jdGlvbihyKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gci50cmFjayAmJiByLnRyYWNrLmlkID09PSB0cmFjay5pZDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZWNlaXZlciA9IHt0cmFjazogdHJhY2t9O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHZhciBldmVudCA9IG5ldyBFdmVudCgndHJhY2snKTtcbiAgICAgICAgICAgICAgZXZlbnQudHJhY2sgPSB0cmFjaztcbiAgICAgICAgICAgICAgZXZlbnQucmVjZWl2ZXIgPSByZWNlaXZlcjtcbiAgICAgICAgICAgICAgZXZlbnQudHJhbnNjZWl2ZXIgPSB7cmVjZWl2ZXI6IHJlY2VpdmVyfTtcbiAgICAgICAgICAgICAgZXZlbnQuc3RyZWFtcyA9IFtlLnN0cmVhbV07XG4gICAgICAgICAgICAgIHBjLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgICBwYy5hZGRFdmVudExpc3RlbmVyKCdhZGRzdHJlYW0nLCBwYy5fb250cmFja3BvbHkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvcmlnU2V0UmVtb3RlRGVzY3JpcHRpb24uYXBwbHkocGMsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBldmVuIGlmIFJUQ1J0cFRyYW5zY2VpdmVyIGlzIGluIHdpbmRvdywgaXQgaXMgb25seSB1c2VkIGFuZFxuICAgICAgLy8gZW1pdHRlZCBpbiB1bmlmaWVkLXBsYW4uIFVuZm9ydHVuYXRlbHkgdGhpcyBtZWFucyB3ZSBuZWVkXG4gICAgICAvLyB0byB1bmNvbmRpdGlvbmFsbHkgd3JhcCB0aGUgZXZlbnQuXG4gICAgICB1dGlscy53cmFwUGVlckNvbm5lY3Rpb25FdmVudCh3aW5kb3csICd0cmFjaycsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgaWYgKCFlLnRyYW5zY2VpdmVyKSB7XG4gICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsICd0cmFuc2NlaXZlcicsXG4gICAgICAgICAgICB7dmFsdWU6IHtyZWNlaXZlcjogZS5yZWNlaXZlcn19KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSxcblxuICBzaGltR2V0U2VuZGVyc1dpdGhEdG1mOiBmdW5jdGlvbih3aW5kb3cpIHtcbiAgICAvLyBPdmVycmlkZXMgYWRkVHJhY2svcmVtb3ZlVHJhY2ssIGRlcGVuZHMgb24gc2hpbUFkZFRyYWNrUmVtb3ZlVHJhY2suXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnICYmIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbiAmJlxuICAgICAgICAhKCdnZXRTZW5kZXJzJyBpbiB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlKSAmJlxuICAgICAgICAnY3JlYXRlRFRNRlNlbmRlcicgaW4gd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZSkge1xuICAgICAgdmFyIHNoaW1TZW5kZXJXaXRoRHRtZiA9IGZ1bmN0aW9uKHBjLCB0cmFjaykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHRyYWNrOiB0cmFjayxcbiAgICAgICAgICBnZXQgZHRtZigpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9kdG1mID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgaWYgKHRyYWNrLmtpbmQgPT09ICdhdWRpbycpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9kdG1mID0gcGMuY3JlYXRlRFRNRlNlbmRlcih0cmFjayk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZHRtZiA9IG51bGw7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9kdG1mO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgX3BjOiBwY1xuICAgICAgICB9O1xuICAgICAgfTtcblxuICAgICAgLy8gYXVnbWVudCBhZGRUcmFjayB3aGVuIGdldFNlbmRlcnMgaXMgbm90IGF2YWlsYWJsZS5cbiAgICAgIGlmICghd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5nZXRTZW5kZXJzKSB7XG4gICAgICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0U2VuZGVycyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHRoaXMuX3NlbmRlcnMgPSB0aGlzLl9zZW5kZXJzIHx8IFtdO1xuICAgICAgICAgIHJldHVybiB0aGlzLl9zZW5kZXJzLnNsaWNlKCk7IC8vIHJldHVybiBhIGNvcHkgb2YgdGhlIGludGVybmFsIHN0YXRlLlxuICAgICAgICB9O1xuICAgICAgICB2YXIgb3JpZ0FkZFRyYWNrID0gd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRUcmFjaztcbiAgICAgICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRUcmFjayA9IGZ1bmN0aW9uKHRyYWNrLCBzdHJlYW0pIHtcbiAgICAgICAgICB2YXIgcGMgPSB0aGlzO1xuICAgICAgICAgIHZhciBzZW5kZXIgPSBvcmlnQWRkVHJhY2suYXBwbHkocGMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgaWYgKCFzZW5kZXIpIHtcbiAgICAgICAgICAgIHNlbmRlciA9IHNoaW1TZW5kZXJXaXRoRHRtZihwYywgdHJhY2spO1xuICAgICAgICAgICAgcGMuX3NlbmRlcnMucHVzaChzZW5kZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gc2VuZGVyO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBvcmlnUmVtb3ZlVHJhY2sgPSB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLnJlbW92ZVRyYWNrO1xuICAgICAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLnJlbW92ZVRyYWNrID0gZnVuY3Rpb24oc2VuZGVyKSB7XG4gICAgICAgICAgdmFyIHBjID0gdGhpcztcbiAgICAgICAgICBvcmlnUmVtb3ZlVHJhY2suYXBwbHkocGMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgdmFyIGlkeCA9IHBjLl9zZW5kZXJzLmluZGV4T2Yoc2VuZGVyKTtcbiAgICAgICAgICBpZiAoaWR4ICE9PSAtMSkge1xuICAgICAgICAgICAgcGMuX3NlbmRlcnMuc3BsaWNlKGlkeCwgMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgdmFyIG9yaWdBZGRTdHJlYW0gPSB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmFkZFN0cmVhbTtcbiAgICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuYWRkU3RyZWFtID0gZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgICAgIHZhciBwYyA9IHRoaXM7XG4gICAgICAgIHBjLl9zZW5kZXJzID0gcGMuX3NlbmRlcnMgfHwgW107XG4gICAgICAgIG9yaWdBZGRTdHJlYW0uYXBwbHkocGMsIFtzdHJlYW1dKTtcbiAgICAgICAgc3RyZWFtLmdldFRyYWNrcygpLmZvckVhY2goZnVuY3Rpb24odHJhY2spIHtcbiAgICAgICAgICBwYy5fc2VuZGVycy5wdXNoKHNoaW1TZW5kZXJXaXRoRHRtZihwYywgdHJhY2spKTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuXG4gICAgICB2YXIgb3JpZ1JlbW92ZVN0cmVhbSA9IHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUucmVtb3ZlU3RyZWFtO1xuICAgICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5yZW1vdmVTdHJlYW0gPSBmdW5jdGlvbihzdHJlYW0pIHtcbiAgICAgICAgdmFyIHBjID0gdGhpcztcbiAgICAgICAgcGMuX3NlbmRlcnMgPSBwYy5fc2VuZGVycyB8fCBbXTtcbiAgICAgICAgb3JpZ1JlbW92ZVN0cmVhbS5hcHBseShwYywgW3N0cmVhbV0pO1xuXG4gICAgICAgIHN0cmVhbS5nZXRUcmFja3MoKS5mb3JFYWNoKGZ1bmN0aW9uKHRyYWNrKSB7XG4gICAgICAgICAgdmFyIHNlbmRlciA9IHBjLl9zZW5kZXJzLmZpbmQoZnVuY3Rpb24ocykge1xuICAgICAgICAgICAgcmV0dXJuIHMudHJhY2sgPT09IHRyYWNrO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGlmIChzZW5kZXIpIHtcbiAgICAgICAgICAgIHBjLl9zZW5kZXJzLnNwbGljZShwYy5fc2VuZGVycy5pbmRleE9mKHNlbmRlciksIDEpOyAvLyByZW1vdmUgc2VuZGVyXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JyAmJiB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24gJiZcbiAgICAgICAgICAgICAgICdnZXRTZW5kZXJzJyBpbiB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlICYmXG4gICAgICAgICAgICAgICAnY3JlYXRlRFRNRlNlbmRlcicgaW4gd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZSAmJlxuICAgICAgICAgICAgICAgd2luZG93LlJUQ1J0cFNlbmRlciAmJlxuICAgICAgICAgICAgICAgISgnZHRtZicgaW4gd2luZG93LlJUQ1J0cFNlbmRlci5wcm90b3R5cGUpKSB7XG4gICAgICB2YXIgb3JpZ0dldFNlbmRlcnMgPSB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmdldFNlbmRlcnM7XG4gICAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmdldFNlbmRlcnMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHBjID0gdGhpcztcbiAgICAgICAgdmFyIHNlbmRlcnMgPSBvcmlnR2V0U2VuZGVycy5hcHBseShwYywgW10pO1xuICAgICAgICBzZW5kZXJzLmZvckVhY2goZnVuY3Rpb24oc2VuZGVyKSB7XG4gICAgICAgICAgc2VuZGVyLl9wYyA9IHBjO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHNlbmRlcnM7XG4gICAgICB9O1xuXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlJUQ1J0cFNlbmRlci5wcm90b3R5cGUsICdkdG1mJywge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmICh0aGlzLl9kdG1mID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnRyYWNrLmtpbmQgPT09ICdhdWRpbycpIHtcbiAgICAgICAgICAgICAgdGhpcy5fZHRtZiA9IHRoaXMuX3BjLmNyZWF0ZURUTUZTZW5kZXIodGhpcy50cmFjayk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLl9kdG1mID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX2R0bWY7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSxcblxuICBzaGltU2VuZGVyUmVjZWl2ZXJHZXRTdGF0czogZnVuY3Rpb24od2luZG93KSB7XG4gICAgaWYgKCEodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcgJiYgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uICYmXG4gICAgICAgIHdpbmRvdy5SVENSdHBTZW5kZXIgJiYgd2luZG93LlJUQ1J0cFJlY2VpdmVyKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIHNoaW0gc2VuZGVyIHN0YXRzLlxuICAgIGlmICghKCdnZXRTdGF0cycgaW4gd2luZG93LlJUQ1J0cFNlbmRlci5wcm90b3R5cGUpKSB7XG4gICAgICB2YXIgb3JpZ0dldFNlbmRlcnMgPSB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmdldFNlbmRlcnM7XG4gICAgICBpZiAob3JpZ0dldFNlbmRlcnMpIHtcbiAgICAgICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5nZXRTZW5kZXJzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIHBjID0gdGhpcztcbiAgICAgICAgICB2YXIgc2VuZGVycyA9IG9yaWdHZXRTZW5kZXJzLmFwcGx5KHBjLCBbXSk7XG4gICAgICAgICAgc2VuZGVycy5mb3JFYWNoKGZ1bmN0aW9uKHNlbmRlcikge1xuICAgICAgICAgICAgc2VuZGVyLl9wYyA9IHBjO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiBzZW5kZXJzO1xuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICB2YXIgb3JpZ0FkZFRyYWNrID0gd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRUcmFjaztcbiAgICAgIGlmIChvcmlnQWRkVHJhY2spIHtcbiAgICAgICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRUcmFjayA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBzZW5kZXIgPSBvcmlnQWRkVHJhY2suYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICBzZW5kZXIuX3BjID0gdGhpcztcbiAgICAgICAgICByZXR1cm4gc2VuZGVyO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgd2luZG93LlJUQ1J0cFNlbmRlci5wcm90b3R5cGUuZ2V0U3RhdHMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHNlbmRlciA9IHRoaXM7XG4gICAgICAgIHJldHVybiB0aGlzLl9wYy5nZXRTdGF0cygpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgLyogTm90ZTogdGhpcyB3aWxsIGluY2x1ZGUgc3RhdHMgb2YgYWxsIHNlbmRlcnMgdGhhdFxuICAgICAgICAgICAqICAgc2VuZCBhIHRyYWNrIHdpdGggdGhlIHNhbWUgaWQgYXMgc2VuZGVyLnRyYWNrIGFzXG4gICAgICAgICAgICogICBpdCBpcyBub3QgcG9zc2libGUgdG8gaWRlbnRpZnkgdGhlIFJUQ1J0cFNlbmRlci5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICByZXR1cm4gZmlsdGVyU3RhdHMocmVzdWx0LCBzZW5kZXIudHJhY2ssIHRydWUpO1xuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gc2hpbSByZWNlaXZlciBzdGF0cy5cbiAgICBpZiAoISgnZ2V0U3RhdHMnIGluIHdpbmRvdy5SVENSdHBSZWNlaXZlci5wcm90b3R5cGUpKSB7XG4gICAgICB2YXIgb3JpZ0dldFJlY2VpdmVycyA9IHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0UmVjZWl2ZXJzO1xuICAgICAgaWYgKG9yaWdHZXRSZWNlaXZlcnMpIHtcbiAgICAgICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5nZXRSZWNlaXZlcnMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgcGMgPSB0aGlzO1xuICAgICAgICAgIHZhciByZWNlaXZlcnMgPSBvcmlnR2V0UmVjZWl2ZXJzLmFwcGx5KHBjLCBbXSk7XG4gICAgICAgICAgcmVjZWl2ZXJzLmZvckVhY2goZnVuY3Rpb24ocmVjZWl2ZXIpIHtcbiAgICAgICAgICAgIHJlY2VpdmVyLl9wYyA9IHBjO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiByZWNlaXZlcnM7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICB1dGlscy53cmFwUGVlckNvbm5lY3Rpb25FdmVudCh3aW5kb3csICd0cmFjaycsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgZS5yZWNlaXZlci5fcGMgPSBlLnNyY0VsZW1lbnQ7XG4gICAgICAgIHJldHVybiBlO1xuICAgICAgfSk7XG4gICAgICB3aW5kb3cuUlRDUnRwUmVjZWl2ZXIucHJvdG90eXBlLmdldFN0YXRzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciByZWNlaXZlciA9IHRoaXM7XG4gICAgICAgIHJldHVybiB0aGlzLl9wYy5nZXRTdGF0cygpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIGZpbHRlclN0YXRzKHJlc3VsdCwgcmVjZWl2ZXIudHJhY2ssIGZhbHNlKTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmICghKCdnZXRTdGF0cycgaW4gd2luZG93LlJUQ1J0cFNlbmRlci5wcm90b3R5cGUgJiZcbiAgICAgICAgJ2dldFN0YXRzJyBpbiB3aW5kb3cuUlRDUnRwUmVjZWl2ZXIucHJvdG90eXBlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIHNoaW0gUlRDUGVlckNvbm5lY3Rpb24uZ2V0U3RhdHModHJhY2spLlxuICAgIHZhciBvcmlnR2V0U3RhdHMgPSB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmdldFN0YXRzO1xuICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0U3RhdHMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBwYyA9IHRoaXM7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDAgJiZcbiAgICAgICAgICBhcmd1bWVudHNbMF0gaW5zdGFuY2VvZiB3aW5kb3cuTWVkaWFTdHJlYW1UcmFjaykge1xuICAgICAgICB2YXIgdHJhY2sgPSBhcmd1bWVudHNbMF07XG4gICAgICAgIHZhciBzZW5kZXI7XG4gICAgICAgIHZhciByZWNlaXZlcjtcbiAgICAgICAgdmFyIGVycjtcbiAgICAgICAgcGMuZ2V0U2VuZGVycygpLmZvckVhY2goZnVuY3Rpb24ocykge1xuICAgICAgICAgIGlmIChzLnRyYWNrID09PSB0cmFjaykge1xuICAgICAgICAgICAgaWYgKHNlbmRlcikge1xuICAgICAgICAgICAgICBlcnIgPSB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc2VuZGVyID0gcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBwYy5nZXRSZWNlaXZlcnMoKS5mb3JFYWNoKGZ1bmN0aW9uKHIpIHtcbiAgICAgICAgICBpZiAoci50cmFjayA9PT0gdHJhY2spIHtcbiAgICAgICAgICAgIGlmIChyZWNlaXZlcikge1xuICAgICAgICAgICAgICBlcnIgPSB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmVjZWl2ZXIgPSByO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gci50cmFjayA9PT0gdHJhY2s7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoZXJyIHx8IChzZW5kZXIgJiYgcmVjZWl2ZXIpKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBET01FeGNlcHRpb24oXG4gICAgICAgICAgICAnVGhlcmUgYXJlIG1vcmUgdGhhbiBvbmUgc2VuZGVyIG9yIHJlY2VpdmVyIGZvciB0aGUgdHJhY2suJyxcbiAgICAgICAgICAgICdJbnZhbGlkQWNjZXNzRXJyb3InKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoc2VuZGVyKSB7XG4gICAgICAgICAgcmV0dXJuIHNlbmRlci5nZXRTdGF0cygpO1xuICAgICAgICB9IGVsc2UgaWYgKHJlY2VpdmVyKSB7XG4gICAgICAgICAgcmV0dXJuIHJlY2VpdmVyLmdldFN0YXRzKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBET01FeGNlcHRpb24oXG4gICAgICAgICAgJ1RoZXJlIGlzIG5vIHNlbmRlciBvciByZWNlaXZlciBmb3IgdGhlIHRyYWNrLicsXG4gICAgICAgICAgJ0ludmFsaWRBY2Nlc3NFcnJvcicpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvcmlnR2V0U3RhdHMuYXBwbHkocGMsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfSxcblxuICBzaGltU291cmNlT2JqZWN0OiBmdW5jdGlvbih3aW5kb3cpIHtcbiAgICB2YXIgVVJMID0gd2luZG93ICYmIHdpbmRvdy5VUkw7XG5cbiAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGlmICh3aW5kb3cuSFRNTE1lZGlhRWxlbWVudCAmJlxuICAgICAgICAhKCdzcmNPYmplY3QnIGluIHdpbmRvdy5IVE1MTWVkaWFFbGVtZW50LnByb3RvdHlwZSkpIHtcbiAgICAgICAgLy8gU2hpbSB0aGUgc3JjT2JqZWN0IHByb3BlcnR5LCBvbmNlLCB3aGVuIEhUTUxNZWRpYUVsZW1lbnQgaXMgZm91bmQuXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuSFRNTE1lZGlhRWxlbWVudC5wcm90b3R5cGUsICdzcmNPYmplY3QnLCB7XG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zcmNPYmplY3Q7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKHN0cmVhbSkge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICAgICAgLy8gVXNlIF9zcmNPYmplY3QgYXMgYSBwcml2YXRlIHByb3BlcnR5IGZvciB0aGlzIHNoaW1cbiAgICAgICAgICAgIHRoaXMuX3NyY09iamVjdCA9IHN0cmVhbTtcbiAgICAgICAgICAgIGlmICh0aGlzLnNyYykge1xuICAgICAgICAgICAgICBVUkwucmV2b2tlT2JqZWN0VVJMKHRoaXMuc3JjKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFzdHJlYW0pIHtcbiAgICAgICAgICAgICAgdGhpcy5zcmMgPSAnJztcbiAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc3JjID0gVVJMLmNyZWF0ZU9iamVjdFVSTChzdHJlYW0pO1xuICAgICAgICAgICAgLy8gV2UgbmVlZCB0byByZWNyZWF0ZSB0aGUgYmxvYiB1cmwgd2hlbiBhIHRyYWNrIGlzIGFkZGVkIG9yXG4gICAgICAgICAgICAvLyByZW1vdmVkLiBEb2luZyBpdCBtYW51YWxseSBzaW5jZSB3ZSB3YW50IHRvIGF2b2lkIGEgcmVjdXJzaW9uLlxuICAgICAgICAgICAgc3RyZWFtLmFkZEV2ZW50TGlzdGVuZXIoJ2FkZHRyYWNrJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIGlmIChzZWxmLnNyYykge1xuICAgICAgICAgICAgICAgIFVSTC5yZXZva2VPYmplY3RVUkwoc2VsZi5zcmMpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHNlbGYuc3JjID0gVVJMLmNyZWF0ZU9iamVjdFVSTChzdHJlYW0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzdHJlYW0uYWRkRXZlbnRMaXN0ZW5lcigncmVtb3ZldHJhY2snLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgaWYgKHNlbGYuc3JjKSB7XG4gICAgICAgICAgICAgICAgVVJMLnJldm9rZU9iamVjdFVSTChzZWxmLnNyYyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgc2VsZi5zcmMgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKHN0cmVhbSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBzaGltQWRkVHJhY2tSZW1vdmVUcmFja1dpdGhOYXRpdmU6IGZ1bmN0aW9uKHdpbmRvdykge1xuICAgIC8vIHNoaW0gYWRkVHJhY2svcmVtb3ZlVHJhY2sgd2l0aCBuYXRpdmUgdmFyaWFudHMgaW4gb3JkZXIgdG8gbWFrZVxuICAgIC8vIHRoZSBpbnRlcmFjdGlvbnMgd2l0aCBsZWdhY3kgZ2V0TG9jYWxTdHJlYW1zIGJlaGF2ZSBhcyBpbiBvdGhlciBicm93c2Vycy5cbiAgICAvLyBLZWVwcyBhIG1hcHBpbmcgc3RyZWFtLmlkID0+IFtzdHJlYW0sIHJ0cHNlbmRlcnMuLi5dXG4gICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5nZXRMb2NhbFN0cmVhbXMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBwYyA9IHRoaXM7XG4gICAgICB0aGlzLl9zaGltbWVkTG9jYWxTdHJlYW1zID0gdGhpcy5fc2hpbW1lZExvY2FsU3RyZWFtcyB8fCB7fTtcbiAgICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLl9zaGltbWVkTG9jYWxTdHJlYW1zKS5tYXAoZnVuY3Rpb24oc3RyZWFtSWQpIHtcbiAgICAgICAgcmV0dXJuIHBjLl9zaGltbWVkTG9jYWxTdHJlYW1zW3N0cmVhbUlkXVswXTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICB2YXIgb3JpZ0FkZFRyYWNrID0gd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRUcmFjaztcbiAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmFkZFRyYWNrID0gZnVuY3Rpb24odHJhY2ssIHN0cmVhbSkge1xuICAgICAgaWYgKCFzdHJlYW0pIHtcbiAgICAgICAgcmV0dXJuIG9yaWdBZGRUcmFjay5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuICAgICAgdGhpcy5fc2hpbW1lZExvY2FsU3RyZWFtcyA9IHRoaXMuX3NoaW1tZWRMb2NhbFN0cmVhbXMgfHwge307XG5cbiAgICAgIHZhciBzZW5kZXIgPSBvcmlnQWRkVHJhY2suYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIGlmICghdGhpcy5fc2hpbW1lZExvY2FsU3RyZWFtc1tzdHJlYW0uaWRdKSB7XG4gICAgICAgIHRoaXMuX3NoaW1tZWRMb2NhbFN0cmVhbXNbc3RyZWFtLmlkXSA9IFtzdHJlYW0sIHNlbmRlcl07XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX3NoaW1tZWRMb2NhbFN0cmVhbXNbc3RyZWFtLmlkXS5pbmRleE9mKHNlbmRlcikgPT09IC0xKSB7XG4gICAgICAgIHRoaXMuX3NoaW1tZWRMb2NhbFN0cmVhbXNbc3RyZWFtLmlkXS5wdXNoKHNlbmRlcik7XG4gICAgICB9XG4gICAgICByZXR1cm4gc2VuZGVyO1xuICAgIH07XG5cbiAgICB2YXIgb3JpZ0FkZFN0cmVhbSA9IHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuYWRkU3RyZWFtO1xuICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuYWRkU3RyZWFtID0gZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgICB2YXIgcGMgPSB0aGlzO1xuICAgICAgdGhpcy5fc2hpbW1lZExvY2FsU3RyZWFtcyA9IHRoaXMuX3NoaW1tZWRMb2NhbFN0cmVhbXMgfHwge307XG5cbiAgICAgIHN0cmVhbS5nZXRUcmFja3MoKS5mb3JFYWNoKGZ1bmN0aW9uKHRyYWNrKSB7XG4gICAgICAgIHZhciBhbHJlYWR5RXhpc3RzID0gcGMuZ2V0U2VuZGVycygpLmZpbmQoZnVuY3Rpb24ocykge1xuICAgICAgICAgIHJldHVybiBzLnRyYWNrID09PSB0cmFjaztcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChhbHJlYWR5RXhpc3RzKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbignVHJhY2sgYWxyZWFkeSBleGlzdHMuJyxcbiAgICAgICAgICAgICAgJ0ludmFsaWRBY2Nlc3NFcnJvcicpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHZhciBleGlzdGluZ1NlbmRlcnMgPSBwYy5nZXRTZW5kZXJzKCk7XG4gICAgICBvcmlnQWRkU3RyZWFtLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB2YXIgbmV3U2VuZGVycyA9IHBjLmdldFNlbmRlcnMoKS5maWx0ZXIoZnVuY3Rpb24obmV3U2VuZGVyKSB7XG4gICAgICAgIHJldHVybiBleGlzdGluZ1NlbmRlcnMuaW5kZXhPZihuZXdTZW5kZXIpID09PSAtMTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5fc2hpbW1lZExvY2FsU3RyZWFtc1tzdHJlYW0uaWRdID0gW3N0cmVhbV0uY29uY2F0KG5ld1NlbmRlcnMpO1xuICAgIH07XG5cbiAgICB2YXIgb3JpZ1JlbW92ZVN0cmVhbSA9IHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUucmVtb3ZlU3RyZWFtO1xuICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUucmVtb3ZlU3RyZWFtID0gZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgICB0aGlzLl9zaGltbWVkTG9jYWxTdHJlYW1zID0gdGhpcy5fc2hpbW1lZExvY2FsU3RyZWFtcyB8fCB7fTtcbiAgICAgIGRlbGV0ZSB0aGlzLl9zaGltbWVkTG9jYWxTdHJlYW1zW3N0cmVhbS5pZF07XG4gICAgICByZXR1cm4gb3JpZ1JlbW92ZVN0cmVhbS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICB2YXIgb3JpZ1JlbW92ZVRyYWNrID0gd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5yZW1vdmVUcmFjaztcbiAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLnJlbW92ZVRyYWNrID0gZnVuY3Rpb24oc2VuZGVyKSB7XG4gICAgICB2YXIgcGMgPSB0aGlzO1xuICAgICAgdGhpcy5fc2hpbW1lZExvY2FsU3RyZWFtcyA9IHRoaXMuX3NoaW1tZWRMb2NhbFN0cmVhbXMgfHwge307XG4gICAgICBpZiAoc2VuZGVyKSB7XG4gICAgICAgIE9iamVjdC5rZXlzKHRoaXMuX3NoaW1tZWRMb2NhbFN0cmVhbXMpLmZvckVhY2goZnVuY3Rpb24oc3RyZWFtSWQpIHtcbiAgICAgICAgICB2YXIgaWR4ID0gcGMuX3NoaW1tZWRMb2NhbFN0cmVhbXNbc3RyZWFtSWRdLmluZGV4T2Yoc2VuZGVyKTtcbiAgICAgICAgICBpZiAoaWR4ICE9PSAtMSkge1xuICAgICAgICAgICAgcGMuX3NoaW1tZWRMb2NhbFN0cmVhbXNbc3RyZWFtSWRdLnNwbGljZShpZHgsIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocGMuX3NoaW1tZWRMb2NhbFN0cmVhbXNbc3RyZWFtSWRdLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgZGVsZXRlIHBjLl9zaGltbWVkTG9jYWxTdHJlYW1zW3N0cmVhbUlkXTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9yaWdSZW1vdmVUcmFjay5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH0sXG5cbiAgc2hpbUFkZFRyYWNrUmVtb3ZlVHJhY2s6IGZ1bmN0aW9uKHdpbmRvdykge1xuICAgIGlmICghd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBicm93c2VyRGV0YWlscyA9IHV0aWxzLmRldGVjdEJyb3dzZXIod2luZG93KTtcbiAgICAvLyBzaGltIGFkZFRyYWNrIGFuZCByZW1vdmVUcmFjay5cbiAgICBpZiAod2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRUcmFjayAmJlxuICAgICAgICBicm93c2VyRGV0YWlscy52ZXJzaW9uID49IDY1KSB7XG4gICAgICByZXR1cm4gdGhpcy5zaGltQWRkVHJhY2tSZW1vdmVUcmFja1dpdGhOYXRpdmUod2luZG93KTtcbiAgICB9XG5cbiAgICAvLyBhbHNvIHNoaW0gcGMuZ2V0TG9jYWxTdHJlYW1zIHdoZW4gYWRkVHJhY2sgaXMgc2hpbW1lZFxuICAgIC8vIHRvIHJldHVybiB0aGUgb3JpZ2luYWwgc3RyZWFtcy5cbiAgICB2YXIgb3JpZ0dldExvY2FsU3RyZWFtcyA9IHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGVcbiAgICAgICAgLmdldExvY2FsU3RyZWFtcztcbiAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmdldExvY2FsU3RyZWFtcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHBjID0gdGhpcztcbiAgICAgIHZhciBuYXRpdmVTdHJlYW1zID0gb3JpZ0dldExvY2FsU3RyZWFtcy5hcHBseSh0aGlzKTtcbiAgICAgIHBjLl9yZXZlcnNlU3RyZWFtcyA9IHBjLl9yZXZlcnNlU3RyZWFtcyB8fCB7fTtcbiAgICAgIHJldHVybiBuYXRpdmVTdHJlYW1zLm1hcChmdW5jdGlvbihzdHJlYW0pIHtcbiAgICAgICAgcmV0dXJuIHBjLl9yZXZlcnNlU3RyZWFtc1tzdHJlYW0uaWRdO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIHZhciBvcmlnQWRkU3RyZWFtID0gd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRTdHJlYW07XG4gICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRTdHJlYW0gPSBmdW5jdGlvbihzdHJlYW0pIHtcbiAgICAgIHZhciBwYyA9IHRoaXM7XG4gICAgICBwYy5fc3RyZWFtcyA9IHBjLl9zdHJlYW1zIHx8IHt9O1xuICAgICAgcGMuX3JldmVyc2VTdHJlYW1zID0gcGMuX3JldmVyc2VTdHJlYW1zIHx8IHt9O1xuXG4gICAgICBzdHJlYW0uZ2V0VHJhY2tzKCkuZm9yRWFjaChmdW5jdGlvbih0cmFjaykge1xuICAgICAgICB2YXIgYWxyZWFkeUV4aXN0cyA9IHBjLmdldFNlbmRlcnMoKS5maW5kKGZ1bmN0aW9uKHMpIHtcbiAgICAgICAgICByZXR1cm4gcy50cmFjayA9PT0gdHJhY2s7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoYWxyZWFkeUV4aXN0cykge1xuICAgICAgICAgIHRocm93IG5ldyBET01FeGNlcHRpb24oJ1RyYWNrIGFscmVhZHkgZXhpc3RzLicsXG4gICAgICAgICAgICAgICdJbnZhbGlkQWNjZXNzRXJyb3InKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICAvLyBBZGQgaWRlbnRpdHkgbWFwcGluZyBmb3IgY29uc2lzdGVuY3kgd2l0aCBhZGRUcmFjay5cbiAgICAgIC8vIFVubGVzcyB0aGlzIGlzIGJlaW5nIHVzZWQgd2l0aCBhIHN0cmVhbSBmcm9tIGFkZFRyYWNrLlxuICAgICAgaWYgKCFwYy5fcmV2ZXJzZVN0cmVhbXNbc3RyZWFtLmlkXSkge1xuICAgICAgICB2YXIgbmV3U3RyZWFtID0gbmV3IHdpbmRvdy5NZWRpYVN0cmVhbShzdHJlYW0uZ2V0VHJhY2tzKCkpO1xuICAgICAgICBwYy5fc3RyZWFtc1tzdHJlYW0uaWRdID0gbmV3U3RyZWFtO1xuICAgICAgICBwYy5fcmV2ZXJzZVN0cmVhbXNbbmV3U3RyZWFtLmlkXSA9IHN0cmVhbTtcbiAgICAgICAgc3RyZWFtID0gbmV3U3RyZWFtO1xuICAgICAgfVxuICAgICAgb3JpZ0FkZFN0cmVhbS5hcHBseShwYywgW3N0cmVhbV0pO1xuICAgIH07XG5cbiAgICB2YXIgb3JpZ1JlbW92ZVN0cmVhbSA9IHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUucmVtb3ZlU3RyZWFtO1xuICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUucmVtb3ZlU3RyZWFtID0gZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgICB2YXIgcGMgPSB0aGlzO1xuICAgICAgcGMuX3N0cmVhbXMgPSBwYy5fc3RyZWFtcyB8fCB7fTtcbiAgICAgIHBjLl9yZXZlcnNlU3RyZWFtcyA9IHBjLl9yZXZlcnNlU3RyZWFtcyB8fCB7fTtcblxuICAgICAgb3JpZ1JlbW92ZVN0cmVhbS5hcHBseShwYywgWyhwYy5fc3RyZWFtc1tzdHJlYW0uaWRdIHx8IHN0cmVhbSldKTtcbiAgICAgIGRlbGV0ZSBwYy5fcmV2ZXJzZVN0cmVhbXNbKHBjLl9zdHJlYW1zW3N0cmVhbS5pZF0gP1xuICAgICAgICAgIHBjLl9zdHJlYW1zW3N0cmVhbS5pZF0uaWQgOiBzdHJlYW0uaWQpXTtcbiAgICAgIGRlbGV0ZSBwYy5fc3RyZWFtc1tzdHJlYW0uaWRdO1xuICAgIH07XG5cbiAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmFkZFRyYWNrID0gZnVuY3Rpb24odHJhY2ssIHN0cmVhbSkge1xuICAgICAgdmFyIHBjID0gdGhpcztcbiAgICAgIGlmIChwYy5zaWduYWxpbmdTdGF0ZSA9PT0gJ2Nsb3NlZCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbihcbiAgICAgICAgICAnVGhlIFJUQ1BlZXJDb25uZWN0aW9uXFwncyBzaWduYWxpbmdTdGF0ZSBpcyBcXCdjbG9zZWRcXCcuJyxcbiAgICAgICAgICAnSW52YWxpZFN0YXRlRXJyb3InKTtcbiAgICAgIH1cbiAgICAgIHZhciBzdHJlYW1zID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgICAgaWYgKHN0cmVhbXMubGVuZ3RoICE9PSAxIHx8XG4gICAgICAgICAgIXN0cmVhbXNbMF0uZ2V0VHJhY2tzKCkuZmluZChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4gdCA9PT0gdHJhY2s7XG4gICAgICAgICAgfSkpIHtcbiAgICAgICAgLy8gdGhpcyBpcyBub3QgZnVsbHkgY29ycmVjdCBidXQgYWxsIHdlIGNhbiBtYW5hZ2Ugd2l0aG91dFxuICAgICAgICAvLyBbW2Fzc29jaWF0ZWQgTWVkaWFTdHJlYW1zXV0gaW50ZXJuYWwgc2xvdC5cbiAgICAgICAgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbihcbiAgICAgICAgICAnVGhlIGFkYXB0ZXIuanMgYWRkVHJhY2sgcG9seWZpbGwgb25seSBzdXBwb3J0cyBhIHNpbmdsZSAnICtcbiAgICAgICAgICAnIHN0cmVhbSB3aGljaCBpcyBhc3NvY2lhdGVkIHdpdGggdGhlIHNwZWNpZmllZCB0cmFjay4nLFxuICAgICAgICAgICdOb3RTdXBwb3J0ZWRFcnJvcicpO1xuICAgICAgfVxuXG4gICAgICB2YXIgYWxyZWFkeUV4aXN0cyA9IHBjLmdldFNlbmRlcnMoKS5maW5kKGZ1bmN0aW9uKHMpIHtcbiAgICAgICAgcmV0dXJuIHMudHJhY2sgPT09IHRyYWNrO1xuICAgICAgfSk7XG4gICAgICBpZiAoYWxyZWFkeUV4aXN0cykge1xuICAgICAgICB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKCdUcmFjayBhbHJlYWR5IGV4aXN0cy4nLFxuICAgICAgICAgICAgJ0ludmFsaWRBY2Nlc3NFcnJvcicpO1xuICAgICAgfVxuXG4gICAgICBwYy5fc3RyZWFtcyA9IHBjLl9zdHJlYW1zIHx8IHt9O1xuICAgICAgcGMuX3JldmVyc2VTdHJlYW1zID0gcGMuX3JldmVyc2VTdHJlYW1zIHx8IHt9O1xuICAgICAgdmFyIG9sZFN0cmVhbSA9IHBjLl9zdHJlYW1zW3N0cmVhbS5pZF07XG4gICAgICBpZiAob2xkU3RyZWFtKSB7XG4gICAgICAgIC8vIHRoaXMgaXMgdXNpbmcgb2RkIENocm9tZSBiZWhhdmlvdXIsIHVzZSB3aXRoIGNhdXRpb246XG4gICAgICAgIC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC93ZWJydGMvaXNzdWVzL2RldGFpbD9pZD03ODE1XG4gICAgICAgIC8vIE5vdGU6IHdlIHJlbHkgb24gdGhlIGhpZ2gtbGV2ZWwgYWRkVHJhY2svZHRtZiBzaGltIHRvXG4gICAgICAgIC8vIGNyZWF0ZSB0aGUgc2VuZGVyIHdpdGggYSBkdG1mIHNlbmRlci5cbiAgICAgICAgb2xkU3RyZWFtLmFkZFRyYWNrKHRyYWNrKTtcblxuICAgICAgICAvLyBUcmlnZ2VyIE9OTiBhc3luYy5cbiAgICAgICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICBwYy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgnbmVnb3RpYXRpb25uZWVkZWQnKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIG5ld1N0cmVhbSA9IG5ldyB3aW5kb3cuTWVkaWFTdHJlYW0oW3RyYWNrXSk7XG4gICAgICAgIHBjLl9zdHJlYW1zW3N0cmVhbS5pZF0gPSBuZXdTdHJlYW07XG4gICAgICAgIHBjLl9yZXZlcnNlU3RyZWFtc1tuZXdTdHJlYW0uaWRdID0gc3RyZWFtO1xuICAgICAgICBwYy5hZGRTdHJlYW0obmV3U3RyZWFtKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwYy5nZXRTZW5kZXJzKCkuZmluZChmdW5jdGlvbihzKSB7XG4gICAgICAgIHJldHVybiBzLnRyYWNrID09PSB0cmFjaztcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvLyByZXBsYWNlIHRoZSBpbnRlcm5hbCBzdHJlYW0gaWQgd2l0aCB0aGUgZXh0ZXJuYWwgb25lIGFuZFxuICAgIC8vIHZpY2UgdmVyc2EuXG4gICAgZnVuY3Rpb24gcmVwbGFjZUludGVybmFsU3RyZWFtSWQocGMsIGRlc2NyaXB0aW9uKSB7XG4gICAgICB2YXIgc2RwID0gZGVzY3JpcHRpb24uc2RwO1xuICAgICAgT2JqZWN0LmtleXMocGMuX3JldmVyc2VTdHJlYW1zIHx8IFtdKS5mb3JFYWNoKGZ1bmN0aW9uKGludGVybmFsSWQpIHtcbiAgICAgICAgdmFyIGV4dGVybmFsU3RyZWFtID0gcGMuX3JldmVyc2VTdHJlYW1zW2ludGVybmFsSWRdO1xuICAgICAgICB2YXIgaW50ZXJuYWxTdHJlYW0gPSBwYy5fc3RyZWFtc1tleHRlcm5hbFN0cmVhbS5pZF07XG4gICAgICAgIHNkcCA9IHNkcC5yZXBsYWNlKG5ldyBSZWdFeHAoaW50ZXJuYWxTdHJlYW0uaWQsICdnJyksXG4gICAgICAgICAgICBleHRlcm5hbFN0cmVhbS5pZCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBuZXcgUlRDU2Vzc2lvbkRlc2NyaXB0aW9uKHtcbiAgICAgICAgdHlwZTogZGVzY3JpcHRpb24udHlwZSxcbiAgICAgICAgc2RwOiBzZHBcbiAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZXBsYWNlRXh0ZXJuYWxTdHJlYW1JZChwYywgZGVzY3JpcHRpb24pIHtcbiAgICAgIHZhciBzZHAgPSBkZXNjcmlwdGlvbi5zZHA7XG4gICAgICBPYmplY3Qua2V5cyhwYy5fcmV2ZXJzZVN0cmVhbXMgfHwgW10pLmZvckVhY2goZnVuY3Rpb24oaW50ZXJuYWxJZCkge1xuICAgICAgICB2YXIgZXh0ZXJuYWxTdHJlYW0gPSBwYy5fcmV2ZXJzZVN0cmVhbXNbaW50ZXJuYWxJZF07XG4gICAgICAgIHZhciBpbnRlcm5hbFN0cmVhbSA9IHBjLl9zdHJlYW1zW2V4dGVybmFsU3RyZWFtLmlkXTtcbiAgICAgICAgc2RwID0gc2RwLnJlcGxhY2UobmV3IFJlZ0V4cChleHRlcm5hbFN0cmVhbS5pZCwgJ2cnKSxcbiAgICAgICAgICAgIGludGVybmFsU3RyZWFtLmlkKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG5ldyBSVENTZXNzaW9uRGVzY3JpcHRpb24oe1xuICAgICAgICB0eXBlOiBkZXNjcmlwdGlvbi50eXBlLFxuICAgICAgICBzZHA6IHNkcFxuICAgICAgfSk7XG4gICAgfVxuICAgIFsnY3JlYXRlT2ZmZXInLCAnY3JlYXRlQW5zd2VyJ10uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgIHZhciBuYXRpdmVNZXRob2QgPSB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlW21ldGhvZF07XG4gICAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHBjID0gdGhpcztcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIHZhciBpc0xlZ2FjeUNhbGwgPSBhcmd1bWVudHMubGVuZ3RoICYmXG4gICAgICAgICAgICB0eXBlb2YgYXJndW1lbnRzWzBdID09PSAnZnVuY3Rpb24nO1xuICAgICAgICBpZiAoaXNMZWdhY3lDYWxsKSB7XG4gICAgICAgICAgcmV0dXJuIG5hdGl2ZU1ldGhvZC5hcHBseShwYywgW1xuICAgICAgICAgICAgZnVuY3Rpb24oZGVzY3JpcHRpb24pIHtcbiAgICAgICAgICAgICAgdmFyIGRlc2MgPSByZXBsYWNlSW50ZXJuYWxTdHJlYW1JZChwYywgZGVzY3JpcHRpb24pO1xuICAgICAgICAgICAgICBhcmdzWzBdLmFwcGx5KG51bGwsIFtkZXNjXSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgIGlmIChhcmdzWzFdKSB7XG4gICAgICAgICAgICAgICAgYXJnc1sxXS5hcHBseShudWxsLCBlcnIpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBhcmd1bWVudHNbMl1cbiAgICAgICAgICBdKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmF0aXZlTWV0aG9kLmFwcGx5KHBjLCBhcmd1bWVudHMpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKGRlc2NyaXB0aW9uKSB7XG4gICAgICAgICAgcmV0dXJuIHJlcGxhY2VJbnRlcm5hbFN0cmVhbUlkKHBjLCBkZXNjcmlwdGlvbik7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIHZhciBvcmlnU2V0TG9jYWxEZXNjcmlwdGlvbiA9XG4gICAgICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuc2V0TG9jYWxEZXNjcmlwdGlvbjtcbiAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLnNldExvY2FsRGVzY3JpcHRpb24gPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBwYyA9IHRoaXM7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGggfHwgIWFyZ3VtZW50c1swXS50eXBlKSB7XG4gICAgICAgIHJldHVybiBvcmlnU2V0TG9jYWxEZXNjcmlwdGlvbi5hcHBseShwYywgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICAgIGFyZ3VtZW50c1swXSA9IHJlcGxhY2VFeHRlcm5hbFN0cmVhbUlkKHBjLCBhcmd1bWVudHNbMF0pO1xuICAgICAgcmV0dXJuIG9yaWdTZXRMb2NhbERlc2NyaXB0aW9uLmFwcGx5KHBjLCBhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICAvLyBUT0RPOiBtYW5nbGUgZ2V0U3RhdHM6IGh0dHBzOi8vdzNjLmdpdGh1Yi5pby93ZWJydGMtc3RhdHMvI2RvbS1ydGNtZWRpYXN0cmVhbXN0YXRzLXN0cmVhbWlkZW50aWZpZXJcblxuICAgIHZhciBvcmlnTG9jYWxEZXNjcmlwdGlvbiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoXG4gICAgICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUsICdsb2NhbERlc2NyaXB0aW9uJyk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUsXG4gICAgICAgICdsb2NhbERlc2NyaXB0aW9uJywge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgcGMgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIGRlc2NyaXB0aW9uID0gb3JpZ0xvY2FsRGVzY3JpcHRpb24uZ2V0LmFwcGx5KHRoaXMpO1xuICAgICAgICAgICAgaWYgKGRlc2NyaXB0aW9uLnR5cGUgPT09ICcnKSB7XG4gICAgICAgICAgICAgIHJldHVybiBkZXNjcmlwdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXBsYWNlSW50ZXJuYWxTdHJlYW1JZChwYywgZGVzY3JpcHRpb24pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLnJlbW92ZVRyYWNrID0gZnVuY3Rpb24oc2VuZGVyKSB7XG4gICAgICB2YXIgcGMgPSB0aGlzO1xuICAgICAgaWYgKHBjLnNpZ25hbGluZ1N0YXRlID09PSAnY2xvc2VkJykge1xuICAgICAgICB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKFxuICAgICAgICAgICdUaGUgUlRDUGVlckNvbm5lY3Rpb25cXCdzIHNpZ25hbGluZ1N0YXRlIGlzIFxcJ2Nsb3NlZFxcJy4nLFxuICAgICAgICAgICdJbnZhbGlkU3RhdGVFcnJvcicpO1xuICAgICAgfVxuICAgICAgLy8gV2UgY2FuIG5vdCB5ZXQgY2hlY2sgZm9yIHNlbmRlciBpbnN0YW5jZW9mIFJUQ1J0cFNlbmRlclxuICAgICAgLy8gc2luY2Ugd2Ugc2hpbSBSVFBTZW5kZXIuIFNvIHdlIGNoZWNrIGlmIHNlbmRlci5fcGMgaXMgc2V0LlxuICAgICAgaWYgKCFzZW5kZXIuX3BjKSB7XG4gICAgICAgIHRocm93IG5ldyBET01FeGNlcHRpb24oJ0FyZ3VtZW50IDEgb2YgUlRDUGVlckNvbm5lY3Rpb24ucmVtb3ZlVHJhY2sgJyArXG4gICAgICAgICAgICAnZG9lcyBub3QgaW1wbGVtZW50IGludGVyZmFjZSBSVENSdHBTZW5kZXIuJywgJ1R5cGVFcnJvcicpO1xuICAgICAgfVxuICAgICAgdmFyIGlzTG9jYWwgPSBzZW5kZXIuX3BjID09PSBwYztcbiAgICAgIGlmICghaXNMb2NhbCkge1xuICAgICAgICB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKCdTZW5kZXIgd2FzIG5vdCBjcmVhdGVkIGJ5IHRoaXMgY29ubmVjdGlvbi4nLFxuICAgICAgICAgICAgJ0ludmFsaWRBY2Nlc3NFcnJvcicpO1xuICAgICAgfVxuXG4gICAgICAvLyBTZWFyY2ggZm9yIHRoZSBuYXRpdmUgc3RyZWFtIHRoZSBzZW5kZXJzIHRyYWNrIGJlbG9uZ3MgdG8uXG4gICAgICBwYy5fc3RyZWFtcyA9IHBjLl9zdHJlYW1zIHx8IHt9O1xuICAgICAgdmFyIHN0cmVhbTtcbiAgICAgIE9iamVjdC5rZXlzKHBjLl9zdHJlYW1zKS5mb3JFYWNoKGZ1bmN0aW9uKHN0cmVhbWlkKSB7XG4gICAgICAgIHZhciBoYXNUcmFjayA9IHBjLl9zdHJlYW1zW3N0cmVhbWlkXS5nZXRUcmFja3MoKS5maW5kKGZ1bmN0aW9uKHRyYWNrKSB7XG4gICAgICAgICAgcmV0dXJuIHNlbmRlci50cmFjayA9PT0gdHJhY2s7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoaGFzVHJhY2spIHtcbiAgICAgICAgICBzdHJlYW0gPSBwYy5fc3RyZWFtc1tzdHJlYW1pZF07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBpZiAoc3RyZWFtKSB7XG4gICAgICAgIGlmIChzdHJlYW0uZ2V0VHJhY2tzKCkubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgLy8gaWYgdGhpcyBpcyB0aGUgbGFzdCB0cmFjayBvZiB0aGUgc3RyZWFtLCByZW1vdmUgdGhlIHN0cmVhbS4gVGhpc1xuICAgICAgICAgIC8vIHRha2VzIGNhcmUgb2YgYW55IHNoaW1tZWQgX3NlbmRlcnMuXG4gICAgICAgICAgcGMucmVtb3ZlU3RyZWFtKHBjLl9yZXZlcnNlU3RyZWFtc1tzdHJlYW0uaWRdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyByZWx5aW5nIG9uIHRoZSBzYW1lIG9kZCBjaHJvbWUgYmVoYXZpb3VyIGFzIGFib3ZlLlxuICAgICAgICAgIHN0cmVhbS5yZW1vdmVUcmFjayhzZW5kZXIudHJhY2spO1xuICAgICAgICB9XG4gICAgICAgIHBjLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCduZWdvdGlhdGlvbm5lZWRlZCcpKTtcbiAgICAgIH1cbiAgICB9O1xuICB9LFxuXG4gIHNoaW1QZWVyQ29ubmVjdGlvbjogZnVuY3Rpb24od2luZG93KSB7XG4gICAgdmFyIGJyb3dzZXJEZXRhaWxzID0gdXRpbHMuZGV0ZWN0QnJvd3Nlcih3aW5kb3cpO1xuXG4gICAgLy8gVGhlIFJUQ1BlZXJDb25uZWN0aW9uIG9iamVjdC5cbiAgICBpZiAoIXdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbiAmJiB3aW5kb3cud2Via2l0UlRDUGVlckNvbm5lY3Rpb24pIHtcbiAgICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbiA9IGZ1bmN0aW9uKHBjQ29uZmlnLCBwY0NvbnN0cmFpbnRzKSB7XG4gICAgICAgIC8vIFRyYW5zbGF0ZSBpY2VUcmFuc3BvcnRQb2xpY3kgdG8gaWNlVHJhbnNwb3J0cyxcbiAgICAgICAgLy8gc2VlIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3Avd2VicnRjL2lzc3Vlcy9kZXRhaWw/aWQ9NDg2OVxuICAgICAgICAvLyB0aGlzIHdhcyBmaXhlZCBpbiBNNTYgYWxvbmcgd2l0aCB1bnByZWZpeGluZyBSVENQZWVyQ29ubmVjdGlvbi5cbiAgICAgICAgbG9nZ2luZygnUGVlckNvbm5lY3Rpb24nKTtcbiAgICAgICAgaWYgKHBjQ29uZmlnICYmIHBjQ29uZmlnLmljZVRyYW5zcG9ydFBvbGljeSkge1xuICAgICAgICAgIHBjQ29uZmlnLmljZVRyYW5zcG9ydHMgPSBwY0NvbmZpZy5pY2VUcmFuc3BvcnRQb2xpY3k7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3IHdpbmRvdy53ZWJraXRSVENQZWVyQ29ubmVjdGlvbihwY0NvbmZpZywgcGNDb25zdHJhaW50cyk7XG4gICAgICB9O1xuICAgICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZSA9XG4gICAgICAgICAgd2luZG93LndlYmtpdFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZTtcbiAgICAgIC8vIHdyYXAgc3RhdGljIG1ldGhvZHMuIEN1cnJlbnRseSBqdXN0IGdlbmVyYXRlQ2VydGlmaWNhdGUuXG4gICAgICBpZiAod2luZG93LndlYmtpdFJUQ1BlZXJDb25uZWN0aW9uLmdlbmVyYXRlQ2VydGlmaWNhdGUpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbiwgJ2dlbmVyYXRlQ2VydGlmaWNhdGUnLCB7XG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB3aW5kb3cud2Via2l0UlRDUGVlckNvbm5lY3Rpb24uZ2VuZXJhdGVDZXJ0aWZpY2F0ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIXdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBvcmlnR2V0U3RhdHMgPSB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmdldFN0YXRzO1xuICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0U3RhdHMgPSBmdW5jdGlvbihzZWxlY3RvcixcbiAgICAgICAgc3VjY2Vzc0NhbGxiYWNrLCBlcnJvckNhbGxiYWNrKSB7XG4gICAgICB2YXIgcGMgPSB0aGlzO1xuICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG5cbiAgICAgIC8vIElmIHNlbGVjdG9yIGlzIGEgZnVuY3Rpb24gdGhlbiB3ZSBhcmUgaW4gdGhlIG9sZCBzdHlsZSBzdGF0cyBzbyBqdXN0XG4gICAgICAvLyBwYXNzIGJhY2sgdGhlIG9yaWdpbmFsIGdldFN0YXRzIGZvcm1hdCB0byBhdm9pZCBicmVha2luZyBvbGQgdXNlcnMuXG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIHNlbGVjdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBvcmlnR2V0U3RhdHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cblxuICAgICAgLy8gV2hlbiBzcGVjLXN0eWxlIGdldFN0YXRzIGlzIHN1cHBvcnRlZCwgcmV0dXJuIHRob3NlIHdoZW4gY2FsbGVkIHdpdGhcbiAgICAgIC8vIGVpdGhlciBubyBhcmd1bWVudHMgb3IgdGhlIHNlbGVjdG9yIGFyZ3VtZW50IGlzIG51bGwuXG4gICAgICBpZiAob3JpZ0dldFN0YXRzLmxlbmd0aCA9PT0gMCAmJiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCB8fFxuICAgICAgICAgIHR5cGVvZiBhcmd1bWVudHNbMF0gIT09ICdmdW5jdGlvbicpKSB7XG4gICAgICAgIHJldHVybiBvcmlnR2V0U3RhdHMuYXBwbHkodGhpcywgW10pO1xuICAgICAgfVxuXG4gICAgICB2YXIgZml4Q2hyb21lU3RhdHNfID0gZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgdmFyIHN0YW5kYXJkUmVwb3J0ID0ge307XG4gICAgICAgIHZhciByZXBvcnRzID0gcmVzcG9uc2UucmVzdWx0KCk7XG4gICAgICAgIHJlcG9ydHMuZm9yRWFjaChmdW5jdGlvbihyZXBvcnQpIHtcbiAgICAgICAgICB2YXIgc3RhbmRhcmRTdGF0cyA9IHtcbiAgICAgICAgICAgIGlkOiByZXBvcnQuaWQsXG4gICAgICAgICAgICB0aW1lc3RhbXA6IHJlcG9ydC50aW1lc3RhbXAsXG4gICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgIGxvY2FsY2FuZGlkYXRlOiAnbG9jYWwtY2FuZGlkYXRlJyxcbiAgICAgICAgICAgICAgcmVtb3RlY2FuZGlkYXRlOiAncmVtb3RlLWNhbmRpZGF0ZSdcbiAgICAgICAgICAgIH1bcmVwb3J0LnR5cGVdIHx8IHJlcG9ydC50eXBlXG4gICAgICAgICAgfTtcbiAgICAgICAgICByZXBvcnQubmFtZXMoKS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgICAgIHN0YW5kYXJkU3RhdHNbbmFtZV0gPSByZXBvcnQuc3RhdChuYW1lKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBzdGFuZGFyZFJlcG9ydFtzdGFuZGFyZFN0YXRzLmlkXSA9IHN0YW5kYXJkU3RhdHM7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBzdGFuZGFyZFJlcG9ydDtcbiAgICAgIH07XG5cbiAgICAgIC8vIHNoaW0gZ2V0U3RhdHMgd2l0aCBtYXBsaWtlIHN1cHBvcnRcbiAgICAgIHZhciBtYWtlTWFwU3RhdHMgPSBmdW5jdGlvbihzdGF0cykge1xuICAgICAgICByZXR1cm4gbmV3IE1hcChPYmplY3Qua2V5cyhzdGF0cykubWFwKGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAgIHJldHVybiBba2V5LCBzdGF0c1trZXldXTtcbiAgICAgICAgfSkpO1xuICAgICAgfTtcblxuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gMikge1xuICAgICAgICB2YXIgc3VjY2Vzc0NhbGxiYWNrV3JhcHBlcl8gPSBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgIGFyZ3NbMV0obWFrZU1hcFN0YXRzKGZpeENocm9tZVN0YXRzXyhyZXNwb25zZSkpKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gb3JpZ0dldFN0YXRzLmFwcGx5KHRoaXMsIFtzdWNjZXNzQ2FsbGJhY2tXcmFwcGVyXyxcbiAgICAgICAgICBhcmd1bWVudHNbMF1dKTtcbiAgICAgIH1cblxuICAgICAgLy8gcHJvbWlzZS1zdXBwb3J0XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIG9yaWdHZXRTdGF0cy5hcHBseShwYywgW1xuICAgICAgICAgIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICByZXNvbHZlKG1ha2VNYXBTdGF0cyhmaXhDaHJvbWVTdGF0c18ocmVzcG9uc2UpKSk7XG4gICAgICAgICAgfSwgcmVqZWN0XSk7XG4gICAgICB9KS50aGVuKHN1Y2Nlc3NDYWxsYmFjaywgZXJyb3JDYWxsYmFjayk7XG4gICAgfTtcblxuICAgIC8vIGFkZCBwcm9taXNlIHN1cHBvcnQgLS0gbmF0aXZlbHkgYXZhaWxhYmxlIGluIENocm9tZSA1MVxuICAgIGlmIChicm93c2VyRGV0YWlscy52ZXJzaW9uIDwgNTEpIHtcbiAgICAgIFsnc2V0TG9jYWxEZXNjcmlwdGlvbicsICdzZXRSZW1vdGVEZXNjcmlwdGlvbicsICdhZGRJY2VDYW5kaWRhdGUnXVxuICAgICAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgICAgICAgdmFyIG5hdGl2ZU1ldGhvZCA9IHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGVbbWV0aG9kXTtcbiAgICAgICAgICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgICAgICAgdmFyIHBjID0gdGhpcztcbiAgICAgICAgICAgICAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICBuYXRpdmVNZXRob2QuYXBwbHkocGMsIFthcmdzWzBdLCByZXNvbHZlLCByZWplY3RdKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGlmIChhcmdzLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gcHJvbWlzZS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGFyZ3NbMV0uYXBwbHkobnVsbCwgW10pO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICBpZiAoYXJncy5sZW5ndGggPj0gMykge1xuICAgICAgICAgICAgICAgICAgYXJnc1syXS5hcHBseShudWxsLCBbZXJyXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gcHJvbWlzZSBzdXBwb3J0IGZvciBjcmVhdGVPZmZlciBhbmQgY3JlYXRlQW5zd2VyLiBBdmFpbGFibGUgKHdpdGhvdXRcbiAgICAvLyBidWdzKSBzaW5jZSBNNTI6IGNyYnVnLzYxOTI4OVxuICAgIGlmIChicm93c2VyRGV0YWlscy52ZXJzaW9uIDwgNTIpIHtcbiAgICAgIFsnY3JlYXRlT2ZmZXInLCAnY3JlYXRlQW5zd2VyJ10uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgICAgdmFyIG5hdGl2ZU1ldGhvZCA9IHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGVbbWV0aG9kXTtcbiAgICAgICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIHBjID0gdGhpcztcbiAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDEgfHwgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEgJiZcbiAgICAgICAgICAgICAgdHlwZW9mIGFyZ3VtZW50c1swXSA9PT0gJ29iamVjdCcpKSB7XG4gICAgICAgICAgICB2YXIgb3B0cyA9IGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgIG5hdGl2ZU1ldGhvZC5hcHBseShwYywgW3Jlc29sdmUsIHJlamVjdCwgb3B0c10pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBuYXRpdmVNZXRob2QuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIHNoaW0gaW1wbGljaXQgY3JlYXRpb24gb2YgUlRDU2Vzc2lvbkRlc2NyaXB0aW9uL1JUQ0ljZUNhbmRpZGF0ZVxuICAgIFsnc2V0TG9jYWxEZXNjcmlwdGlvbicsICdzZXRSZW1vdGVEZXNjcmlwdGlvbicsICdhZGRJY2VDYW5kaWRhdGUnXVxuICAgICAgICAuZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgICAgICB2YXIgbmF0aXZlTWV0aG9kID0gd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZVttZXRob2RdO1xuICAgICAgICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgYXJndW1lbnRzWzBdID0gbmV3ICgobWV0aG9kID09PSAnYWRkSWNlQ2FuZGlkYXRlJykgP1xuICAgICAgICAgICAgICAgIHdpbmRvdy5SVENJY2VDYW5kaWRhdGUgOlxuICAgICAgICAgICAgICAgIHdpbmRvdy5SVENTZXNzaW9uRGVzY3JpcHRpb24pKGFyZ3VtZW50c1swXSk7XG4gICAgICAgICAgICByZXR1cm4gbmF0aXZlTWV0aG9kLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSk7XG5cbiAgICAvLyBzdXBwb3J0IGZvciBhZGRJY2VDYW5kaWRhdGUobnVsbCBvciB1bmRlZmluZWQpXG4gICAgdmFyIG5hdGl2ZUFkZEljZUNhbmRpZGF0ZSA9XG4gICAgICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuYWRkSWNlQ2FuZGlkYXRlO1xuICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuYWRkSWNlQ2FuZGlkYXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50c1swXSkge1xuICAgICAgICBpZiAoYXJndW1lbnRzWzFdKSB7XG4gICAgICAgICAgYXJndW1lbnRzWzFdLmFwcGx5KG51bGwpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuYXRpdmVBZGRJY2VDYW5kaWRhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9LFxuXG4gIGZpeE5lZ290aWF0aW9uTmVlZGVkOiBmdW5jdGlvbih3aW5kb3cpIHtcbiAgICB1dGlscy53cmFwUGVlckNvbm5lY3Rpb25FdmVudCh3aW5kb3csICduZWdvdGlhdGlvbm5lZWRlZCcsIGZ1bmN0aW9uKGUpIHtcbiAgICAgIHZhciBwYyA9IGUudGFyZ2V0O1xuICAgICAgaWYgKHBjLnNpZ25hbGluZ1N0YXRlICE9PSAnc3RhYmxlJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICByZXR1cm4gZTtcbiAgICB9KTtcbiAgfSxcblxuICBzaGltR2V0RGlzcGxheU1lZGlhOiBmdW5jdGlvbih3aW5kb3csIGdldFNvdXJjZUlkKSB7XG4gICAgaWYgKCF3aW5kb3cubmF2aWdhdG9yIHx8ICF3aW5kb3cubmF2aWdhdG9yLm1lZGlhRGV2aWNlcyB8fFxuICAgICAgICAnZ2V0RGlzcGxheU1lZGlhJyBpbiB3aW5kb3cubmF2aWdhdG9yLm1lZGlhRGV2aWNlcykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBnZXRTb3VyY2VJZCBpcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIHByb21pc2UgcmVzb2x2aW5nIHdpdGhcbiAgICAvLyB0aGUgc291cmNlSWQgb2YgdGhlIHNjcmVlbi93aW5kb3cvdGFiIHRvIGJlIHNoYXJlZC5cbiAgICBpZiAodHlwZW9mIGdldFNvdXJjZUlkICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdzaGltR2V0RGlzcGxheU1lZGlhOiBnZXRTb3VyY2VJZCBhcmd1bWVudCBpcyBub3QgJyArXG4gICAgICAgICAgJ2EgZnVuY3Rpb24nKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgd2luZG93Lm5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0RGlzcGxheU1lZGlhID0gZnVuY3Rpb24oY29uc3RyYWludHMpIHtcbiAgICAgIHJldHVybiBnZXRTb3VyY2VJZChjb25zdHJhaW50cylcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oc291cmNlSWQpIHtcbiAgICAgICAgICB2YXIgd2lkdGhTcGVjaWZpZWQgPSBjb25zdHJhaW50cy52aWRlbyAmJiBjb25zdHJhaW50cy52aWRlby53aWR0aDtcbiAgICAgICAgICB2YXIgaGVpZ2h0U3BlY2lmaWVkID0gY29uc3RyYWludHMudmlkZW8gJiYgY29uc3RyYWludHMudmlkZW8uaGVpZ2h0O1xuICAgICAgICAgIHZhciBmcmFtZVJhdGVTcGVjaWZpZWQgPSBjb25zdHJhaW50cy52aWRlbyAmJlxuICAgICAgICAgICAgY29uc3RyYWludHMudmlkZW8uZnJhbWVSYXRlO1xuICAgICAgICAgIGNvbnN0cmFpbnRzLnZpZGVvID0ge1xuICAgICAgICAgICAgbWFuZGF0b3J5OiB7XG4gICAgICAgICAgICAgIGNocm9tZU1lZGlhU291cmNlOiAnZGVza3RvcCcsXG4gICAgICAgICAgICAgIGNocm9tZU1lZGlhU291cmNlSWQ6IHNvdXJjZUlkLFxuICAgICAgICAgICAgICBtYXhGcmFtZVJhdGU6IGZyYW1lUmF0ZVNwZWNpZmllZCB8fCAzXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgICBpZiAod2lkdGhTcGVjaWZpZWQpIHtcbiAgICAgICAgICAgIGNvbnN0cmFpbnRzLnZpZGVvLm1hbmRhdG9yeS5tYXhXaWR0aCA9IHdpZHRoU3BlY2lmaWVkO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaGVpZ2h0U3BlY2lmaWVkKSB7XG4gICAgICAgICAgICBjb25zdHJhaW50cy52aWRlby5tYW5kYXRvcnkubWF4SGVpZ2h0ID0gaGVpZ2h0U3BlY2lmaWVkO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKGNvbnN0cmFpbnRzKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICB3aW5kb3cubmF2aWdhdG9yLmdldERpc3BsYXlNZWRpYSA9IGZ1bmN0aW9uKGNvbnN0cmFpbnRzKSB7XG4gICAgICB1dGlscy5kZXByZWNhdGVkKCduYXZpZ2F0b3IuZ2V0RGlzcGxheU1lZGlhJyxcbiAgICAgICAgICAnbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXREaXNwbGF5TWVkaWEnKTtcbiAgICAgIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXREaXNwbGF5TWVkaWEoY29uc3RyYWludHMpO1xuICAgIH07XG4gIH1cbn07XG4iLCIvKlxuICogIENvcHlyaWdodCAoYykgMjAxNiBUaGUgV2ViUlRDIHByb2plY3QgYXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiAgVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYSBCU0Qtc3R5bGUgbGljZW5zZVxuICogIHRoYXQgY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3Qgb2YgdGhlIHNvdXJjZVxuICogIHRyZWUuXG4gKi9cbiAvKiBlc2xpbnQtZW52IG5vZGUgKi9cbid1c2Ugc3RyaWN0JztcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzLmpzJyk7XG52YXIgbG9nZ2luZyA9IHV0aWxzLmxvZztcblxuLy8gRXhwb3NlIHB1YmxpYyBtZXRob2RzLlxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih3aW5kb3cpIHtcbiAgdmFyIGJyb3dzZXJEZXRhaWxzID0gdXRpbHMuZGV0ZWN0QnJvd3Nlcih3aW5kb3cpO1xuICB2YXIgbmF2aWdhdG9yID0gd2luZG93ICYmIHdpbmRvdy5uYXZpZ2F0b3I7XG5cbiAgdmFyIGNvbnN0cmFpbnRzVG9DaHJvbWVfID0gZnVuY3Rpb24oYykge1xuICAgIGlmICh0eXBlb2YgYyAhPT0gJ29iamVjdCcgfHwgYy5tYW5kYXRvcnkgfHwgYy5vcHRpb25hbCkge1xuICAgICAgcmV0dXJuIGM7XG4gICAgfVxuICAgIHZhciBjYyA9IHt9O1xuICAgIE9iamVjdC5rZXlzKGMpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgICBpZiAoa2V5ID09PSAncmVxdWlyZScgfHwga2V5ID09PSAnYWR2YW5jZWQnIHx8IGtleSA9PT0gJ21lZGlhU291cmNlJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgciA9ICh0eXBlb2YgY1trZXldID09PSAnb2JqZWN0JykgPyBjW2tleV0gOiB7aWRlYWw6IGNba2V5XX07XG4gICAgICBpZiAoci5leGFjdCAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiByLmV4YWN0ID09PSAnbnVtYmVyJykge1xuICAgICAgICByLm1pbiA9IHIubWF4ID0gci5leGFjdDtcbiAgICAgIH1cbiAgICAgIHZhciBvbGRuYW1lXyA9IGZ1bmN0aW9uKHByZWZpeCwgbmFtZSkge1xuICAgICAgICBpZiAocHJlZml4KSB7XG4gICAgICAgICAgcmV0dXJuIHByZWZpeCArIG5hbWUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKDEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAobmFtZSA9PT0gJ2RldmljZUlkJykgPyAnc291cmNlSWQnIDogbmFtZTtcbiAgICAgIH07XG4gICAgICBpZiAoci5pZGVhbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNjLm9wdGlvbmFsID0gY2Mub3B0aW9uYWwgfHwgW107XG4gICAgICAgIHZhciBvYyA9IHt9O1xuICAgICAgICBpZiAodHlwZW9mIHIuaWRlYWwgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgb2Nbb2xkbmFtZV8oJ21pbicsIGtleSldID0gci5pZGVhbDtcbiAgICAgICAgICBjYy5vcHRpb25hbC5wdXNoKG9jKTtcbiAgICAgICAgICBvYyA9IHt9O1xuICAgICAgICAgIG9jW29sZG5hbWVfKCdtYXgnLCBrZXkpXSA9IHIuaWRlYWw7XG4gICAgICAgICAgY2Mub3B0aW9uYWwucHVzaChvYyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb2Nbb2xkbmFtZV8oJycsIGtleSldID0gci5pZGVhbDtcbiAgICAgICAgICBjYy5vcHRpb25hbC5wdXNoKG9jKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHIuZXhhY3QgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygci5leGFjdCAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgY2MubWFuZGF0b3J5ID0gY2MubWFuZGF0b3J5IHx8IHt9O1xuICAgICAgICBjYy5tYW5kYXRvcnlbb2xkbmFtZV8oJycsIGtleSldID0gci5leGFjdDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIFsnbWluJywgJ21heCddLmZvckVhY2goZnVuY3Rpb24obWl4KSB7XG4gICAgICAgICAgaWYgKHJbbWl4XSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjYy5tYW5kYXRvcnkgPSBjYy5tYW5kYXRvcnkgfHwge307XG4gICAgICAgICAgICBjYy5tYW5kYXRvcnlbb2xkbmFtZV8obWl4LCBrZXkpXSA9IHJbbWl4XTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChjLmFkdmFuY2VkKSB7XG4gICAgICBjYy5vcHRpb25hbCA9IChjYy5vcHRpb25hbCB8fCBbXSkuY29uY2F0KGMuYWR2YW5jZWQpO1xuICAgIH1cbiAgICByZXR1cm4gY2M7XG4gIH07XG5cbiAgdmFyIHNoaW1Db25zdHJhaW50c18gPSBmdW5jdGlvbihjb25zdHJhaW50cywgZnVuYykge1xuICAgIGlmIChicm93c2VyRGV0YWlscy52ZXJzaW9uID49IDYxKSB7XG4gICAgICByZXR1cm4gZnVuYyhjb25zdHJhaW50cyk7XG4gICAgfVxuICAgIGNvbnN0cmFpbnRzID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShjb25zdHJhaW50cykpO1xuICAgIGlmIChjb25zdHJhaW50cyAmJiB0eXBlb2YgY29uc3RyYWludHMuYXVkaW8gPT09ICdvYmplY3QnKSB7XG4gICAgICB2YXIgcmVtYXAgPSBmdW5jdGlvbihvYmosIGEsIGIpIHtcbiAgICAgICAgaWYgKGEgaW4gb2JqICYmICEoYiBpbiBvYmopKSB7XG4gICAgICAgICAgb2JqW2JdID0gb2JqW2FdO1xuICAgICAgICAgIGRlbGV0ZSBvYmpbYV07XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBjb25zdHJhaW50cyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoY29uc3RyYWludHMpKTtcbiAgICAgIHJlbWFwKGNvbnN0cmFpbnRzLmF1ZGlvLCAnYXV0b0dhaW5Db250cm9sJywgJ2dvb2dBdXRvR2FpbkNvbnRyb2wnKTtcbiAgICAgIHJlbWFwKGNvbnN0cmFpbnRzLmF1ZGlvLCAnbm9pc2VTdXBwcmVzc2lvbicsICdnb29nTm9pc2VTdXBwcmVzc2lvbicpO1xuICAgICAgY29uc3RyYWludHMuYXVkaW8gPSBjb25zdHJhaW50c1RvQ2hyb21lXyhjb25zdHJhaW50cy5hdWRpbyk7XG4gICAgfVxuICAgIGlmIChjb25zdHJhaW50cyAmJiB0eXBlb2YgY29uc3RyYWludHMudmlkZW8gPT09ICdvYmplY3QnKSB7XG4gICAgICAvLyBTaGltIGZhY2luZ01vZGUgZm9yIG1vYmlsZSAmIHN1cmZhY2UgcHJvLlxuICAgICAgdmFyIGZhY2UgPSBjb25zdHJhaW50cy52aWRlby5mYWNpbmdNb2RlO1xuICAgICAgZmFjZSA9IGZhY2UgJiYgKCh0eXBlb2YgZmFjZSA9PT0gJ29iamVjdCcpID8gZmFjZSA6IHtpZGVhbDogZmFjZX0pO1xuICAgICAgdmFyIGdldFN1cHBvcnRlZEZhY2luZ01vZGVMaWVzID0gYnJvd3NlckRldGFpbHMudmVyc2lvbiA8IDY2O1xuXG4gICAgICBpZiAoKGZhY2UgJiYgKGZhY2UuZXhhY3QgPT09ICd1c2VyJyB8fCBmYWNlLmV4YWN0ID09PSAnZW52aXJvbm1lbnQnIHx8XG4gICAgICAgICAgICAgICAgICAgIGZhY2UuaWRlYWwgPT09ICd1c2VyJyB8fCBmYWNlLmlkZWFsID09PSAnZW52aXJvbm1lbnQnKSkgJiZcbiAgICAgICAgICAhKG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0U3VwcG9ydGVkQ29uc3RyYWludHMgJiZcbiAgICAgICAgICAgIG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0U3VwcG9ydGVkQ29uc3RyYWludHMoKS5mYWNpbmdNb2RlICYmXG4gICAgICAgICAgICAhZ2V0U3VwcG9ydGVkRmFjaW5nTW9kZUxpZXMpKSB7XG4gICAgICAgIGRlbGV0ZSBjb25zdHJhaW50cy52aWRlby5mYWNpbmdNb2RlO1xuICAgICAgICB2YXIgbWF0Y2hlcztcbiAgICAgICAgaWYgKGZhY2UuZXhhY3QgPT09ICdlbnZpcm9ubWVudCcgfHwgZmFjZS5pZGVhbCA9PT0gJ2Vudmlyb25tZW50Jykge1xuICAgICAgICAgIG1hdGNoZXMgPSBbJ2JhY2snLCAncmVhciddO1xuICAgICAgICB9IGVsc2UgaWYgKGZhY2UuZXhhY3QgPT09ICd1c2VyJyB8fCBmYWNlLmlkZWFsID09PSAndXNlcicpIHtcbiAgICAgICAgICBtYXRjaGVzID0gWydmcm9udCddO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtYXRjaGVzKSB7XG4gICAgICAgICAgLy8gTG9vayBmb3IgbWF0Y2hlcyBpbiBsYWJlbCwgb3IgdXNlIGxhc3QgY2FtIGZvciBiYWNrICh0eXBpY2FsKS5cbiAgICAgICAgICByZXR1cm4gbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5lbnVtZXJhdGVEZXZpY2VzKClcbiAgICAgICAgICAudGhlbihmdW5jdGlvbihkZXZpY2VzKSB7XG4gICAgICAgICAgICBkZXZpY2VzID0gZGV2aWNlcy5maWx0ZXIoZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICByZXR1cm4gZC5raW5kID09PSAndmlkZW9pbnB1dCc7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHZhciBkZXYgPSBkZXZpY2VzLmZpbmQoZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICByZXR1cm4gbWF0Y2hlcy5zb21lKGZ1bmN0aW9uKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGQubGFiZWwudG9Mb3dlckNhc2UoKS5pbmRleE9mKG1hdGNoKSAhPT0gLTE7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoIWRldiAmJiBkZXZpY2VzLmxlbmd0aCAmJiBtYXRjaGVzLmluZGV4T2YoJ2JhY2snKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgZGV2ID0gZGV2aWNlc1tkZXZpY2VzLmxlbmd0aCAtIDFdOyAvLyBtb3JlIGxpa2VseSB0aGUgYmFjayBjYW1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkZXYpIHtcbiAgICAgICAgICAgICAgY29uc3RyYWludHMudmlkZW8uZGV2aWNlSWQgPSBmYWNlLmV4YWN0ID8ge2V4YWN0OiBkZXYuZGV2aWNlSWR9IDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2lkZWFsOiBkZXYuZGV2aWNlSWR9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3RyYWludHMudmlkZW8gPSBjb25zdHJhaW50c1RvQ2hyb21lXyhjb25zdHJhaW50cy52aWRlbyk7XG4gICAgICAgICAgICBsb2dnaW5nKCdjaHJvbWU6ICcgKyBKU09OLnN0cmluZ2lmeShjb25zdHJhaW50cykpO1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmMoY29uc3RyYWludHMpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb25zdHJhaW50cy52aWRlbyA9IGNvbnN0cmFpbnRzVG9DaHJvbWVfKGNvbnN0cmFpbnRzLnZpZGVvKTtcbiAgICB9XG4gICAgbG9nZ2luZygnY2hyb21lOiAnICsgSlNPTi5zdHJpbmdpZnkoY29uc3RyYWludHMpKTtcbiAgICByZXR1cm4gZnVuYyhjb25zdHJhaW50cyk7XG4gIH07XG5cbiAgdmFyIHNoaW1FcnJvcl8gPSBmdW5jdGlvbihlKSB7XG4gICAgaWYgKGJyb3dzZXJEZXRhaWxzLnZlcnNpb24gPj0gNjQpIHtcbiAgICAgIHJldHVybiBlO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgbmFtZToge1xuICAgICAgICBQZXJtaXNzaW9uRGVuaWVkRXJyb3I6ICdOb3RBbGxvd2VkRXJyb3InLFxuICAgICAgICBQZXJtaXNzaW9uRGlzbWlzc2VkRXJyb3I6ICdOb3RBbGxvd2VkRXJyb3InLFxuICAgICAgICBJbnZhbGlkU3RhdGVFcnJvcjogJ05vdEFsbG93ZWRFcnJvcicsXG4gICAgICAgIERldmljZXNOb3RGb3VuZEVycm9yOiAnTm90Rm91bmRFcnJvcicsXG4gICAgICAgIENvbnN0cmFpbnROb3RTYXRpc2ZpZWRFcnJvcjogJ092ZXJjb25zdHJhaW5lZEVycm9yJyxcbiAgICAgICAgVHJhY2tTdGFydEVycm9yOiAnTm90UmVhZGFibGVFcnJvcicsXG4gICAgICAgIE1lZGlhRGV2aWNlRmFpbGVkRHVlVG9TaHV0ZG93bjogJ05vdEFsbG93ZWRFcnJvcicsXG4gICAgICAgIE1lZGlhRGV2aWNlS2lsbFN3aXRjaE9uOiAnTm90QWxsb3dlZEVycm9yJyxcbiAgICAgICAgVGFiQ2FwdHVyZUVycm9yOiAnQWJvcnRFcnJvcicsXG4gICAgICAgIFNjcmVlbkNhcHR1cmVFcnJvcjogJ0Fib3J0RXJyb3InLFxuICAgICAgICBEZXZpY2VDYXB0dXJlRXJyb3I6ICdBYm9ydEVycm9yJ1xuICAgICAgfVtlLm5hbWVdIHx8IGUubmFtZSxcbiAgICAgIG1lc3NhZ2U6IGUubWVzc2FnZSxcbiAgICAgIGNvbnN0cmFpbnQ6IGUuY29uc3RyYWludCB8fCBlLmNvbnN0cmFpbnROYW1lLFxuICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5uYW1lICsgKHRoaXMubWVzc2FnZSAmJiAnOiAnKSArIHRoaXMubWVzc2FnZTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIHZhciBnZXRVc2VyTWVkaWFfID0gZnVuY3Rpb24oY29uc3RyYWludHMsIG9uU3VjY2Vzcywgb25FcnJvcikge1xuICAgIHNoaW1Db25zdHJhaW50c18oY29uc3RyYWludHMsIGZ1bmN0aW9uKGMpIHtcbiAgICAgIG5hdmlnYXRvci53ZWJraXRHZXRVc2VyTWVkaWEoYywgb25TdWNjZXNzLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIGlmIChvbkVycm9yKSB7XG4gICAgICAgICAgb25FcnJvcihzaGltRXJyb3JfKGUpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgbmF2aWdhdG9yLmdldFVzZXJNZWRpYSA9IGdldFVzZXJNZWRpYV87XG5cbiAgLy8gUmV0dXJucyB0aGUgcmVzdWx0IG9mIGdldFVzZXJNZWRpYSBhcyBhIFByb21pc2UuXG4gIHZhciBnZXRVc2VyTWVkaWFQcm9taXNlXyA9IGZ1bmN0aW9uKGNvbnN0cmFpbnRzKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgbmF2aWdhdG9yLmdldFVzZXJNZWRpYShjb25zdHJhaW50cywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICB9KTtcbiAgfTtcblxuICBpZiAoIW5hdmlnYXRvci5tZWRpYURldmljZXMpIHtcbiAgICBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzID0ge1xuICAgICAgZ2V0VXNlck1lZGlhOiBnZXRVc2VyTWVkaWFQcm9taXNlXyxcbiAgICAgIGVudW1lcmF0ZURldmljZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSkge1xuICAgICAgICAgIHZhciBraW5kcyA9IHthdWRpbzogJ2F1ZGlvaW5wdXQnLCB2aWRlbzogJ3ZpZGVvaW5wdXQnfTtcbiAgICAgICAgICByZXR1cm4gd2luZG93Lk1lZGlhU3RyZWFtVHJhY2suZ2V0U291cmNlcyhmdW5jdGlvbihkZXZpY2VzKSB7XG4gICAgICAgICAgICByZXNvbHZlKGRldmljZXMubWFwKGZ1bmN0aW9uKGRldmljZSkge1xuICAgICAgICAgICAgICByZXR1cm4ge2xhYmVsOiBkZXZpY2UubGFiZWwsXG4gICAgICAgICAgICAgICAga2luZDoga2luZHNbZGV2aWNlLmtpbmRdLFxuICAgICAgICAgICAgICAgIGRldmljZUlkOiBkZXZpY2UuaWQsXG4gICAgICAgICAgICAgICAgZ3JvdXBJZDogJyd9O1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBnZXRTdXBwb3J0ZWRDb25zdHJhaW50czogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZGV2aWNlSWQ6IHRydWUsIGVjaG9DYW5jZWxsYXRpb246IHRydWUsIGZhY2luZ01vZGU6IHRydWUsXG4gICAgICAgICAgZnJhbWVSYXRlOiB0cnVlLCBoZWlnaHQ6IHRydWUsIHdpZHRoOiB0cnVlXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIEEgc2hpbSBmb3IgZ2V0VXNlck1lZGlhIG1ldGhvZCBvbiB0aGUgbWVkaWFEZXZpY2VzIG9iamVjdC5cbiAgLy8gVE9ETyhLYXB0ZW5KYW5zc29uKSByZW1vdmUgb25jZSBpbXBsZW1lbnRlZCBpbiBDaHJvbWUgc3RhYmxlLlxuICBpZiAoIW5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKSB7XG4gICAgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEgPSBmdW5jdGlvbihjb25zdHJhaW50cykge1xuICAgICAgcmV0dXJuIGdldFVzZXJNZWRpYVByb21pc2VfKGNvbnN0cmFpbnRzKTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIC8vIEV2ZW4gdGhvdWdoIENocm9tZSA0NSBoYXMgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcyBhbmQgYSBnZXRVc2VyTWVkaWFcbiAgICAvLyBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGEgUHJvbWlzZSwgaXQgZG9lcyBub3QgYWNjZXB0IHNwZWMtc3R5bGVcbiAgICAvLyBjb25zdHJhaW50cy5cbiAgICB2YXIgb3JpZ0dldFVzZXJNZWRpYSA9IG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhLlxuICAgICAgICBiaW5kKG5hdmlnYXRvci5tZWRpYURldmljZXMpO1xuICAgIG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhID0gZnVuY3Rpb24oY3MpIHtcbiAgICAgIHJldHVybiBzaGltQ29uc3RyYWludHNfKGNzLCBmdW5jdGlvbihjKSB7XG4gICAgICAgIHJldHVybiBvcmlnR2V0VXNlck1lZGlhKGMpLnRoZW4oZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgICAgICAgaWYgKGMuYXVkaW8gJiYgIXN0cmVhbS5nZXRBdWRpb1RyYWNrcygpLmxlbmd0aCB8fFxuICAgICAgICAgICAgICBjLnZpZGVvICYmICFzdHJlYW0uZ2V0VmlkZW9UcmFja3MoKS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHN0cmVhbS5nZXRUcmFja3MoKS5mb3JFYWNoKGZ1bmN0aW9uKHRyYWNrKSB7XG4gICAgICAgICAgICAgIHRyYWNrLnN0b3AoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbignJywgJ05vdEZvdW5kRXJyb3InKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHN0cmVhbTtcbiAgICAgICAgfSwgZnVuY3Rpb24oZSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChzaGltRXJyb3JfKGUpKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9O1xuICB9XG5cbiAgLy8gRHVtbXkgZGV2aWNlY2hhbmdlIGV2ZW50IG1ldGhvZHMuXG4gIC8vIFRPRE8oS2FwdGVuSmFuc3NvbikgcmVtb3ZlIG9uY2UgaW1wbGVtZW50ZWQgaW4gQ2hyb21lIHN0YWJsZS5cbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmFkZEV2ZW50TGlzdGVuZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5hZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24oKSB7XG4gICAgICBsb2dnaW5nKCdEdW1teSBtZWRpYURldmljZXMuYWRkRXZlbnRMaXN0ZW5lciBjYWxsZWQuJyk7XG4gICAgfTtcbiAgfVxuICBpZiAodHlwZW9mIG5hdmlnYXRvci5tZWRpYURldmljZXMucmVtb3ZlRXZlbnRMaXN0ZW5lciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIGxvZ2dpbmcoJ0R1bW15IG1lZGlhRGV2aWNlcy5yZW1vdmVFdmVudExpc3RlbmVyIGNhbGxlZC4nKTtcbiAgICB9O1xuICB9XG59O1xuIiwiLypcbiAqICBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIFdlYlJUQyBwcm9qZWN0IGF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlIGxpY2Vuc2VcbiAqICB0aGF0IGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IG9mIHRoZSBzb3VyY2VcbiAqICB0cmVlLlxuICovXG4gLyogZXNsaW50LWVudiBub2RlICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBTRFBVdGlscyA9IHJlcXVpcmUoJ3NkcCcpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2hpbVJUQ0ljZUNhbmRpZGF0ZTogZnVuY3Rpb24od2luZG93KSB7XG4gICAgLy8gZm91bmRhdGlvbiBpcyBhcmJpdHJhcmlseSBjaG9zZW4gYXMgYW4gaW5kaWNhdG9yIGZvciBmdWxsIHN1cHBvcnQgZm9yXG4gICAgLy8gaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3dlYnJ0Yy1wYy8jcnRjaWNlY2FuZGlkYXRlLWludGVyZmFjZVxuICAgIGlmICghd2luZG93LlJUQ0ljZUNhbmRpZGF0ZSB8fCAod2luZG93LlJUQ0ljZUNhbmRpZGF0ZSAmJiAnZm91bmRhdGlvbicgaW5cbiAgICAgICAgd2luZG93LlJUQ0ljZUNhbmRpZGF0ZS5wcm90b3R5cGUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIE5hdGl2ZVJUQ0ljZUNhbmRpZGF0ZSA9IHdpbmRvdy5SVENJY2VDYW5kaWRhdGU7XG4gICAgd2luZG93LlJUQ0ljZUNhbmRpZGF0ZSA9IGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgIC8vIFJlbW92ZSB0aGUgYT0gd2hpY2ggc2hvdWxkbid0IGJlIHBhcnQgb2YgdGhlIGNhbmRpZGF0ZSBzdHJpbmcuXG4gICAgICBpZiAodHlwZW9mIGFyZ3MgPT09ICdvYmplY3QnICYmIGFyZ3MuY2FuZGlkYXRlICYmXG4gICAgICAgICAgYXJncy5jYW5kaWRhdGUuaW5kZXhPZignYT0nKSA9PT0gMCkge1xuICAgICAgICBhcmdzID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShhcmdzKSk7XG4gICAgICAgIGFyZ3MuY2FuZGlkYXRlID0gYXJncy5jYW5kaWRhdGUuc3Vic3RyKDIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoYXJncy5jYW5kaWRhdGUgJiYgYXJncy5jYW5kaWRhdGUubGVuZ3RoKSB7XG4gICAgICAgIC8vIEF1Z21lbnQgdGhlIG5hdGl2ZSBjYW5kaWRhdGUgd2l0aCB0aGUgcGFyc2VkIGZpZWxkcy5cbiAgICAgICAgdmFyIG5hdGl2ZUNhbmRpZGF0ZSA9IG5ldyBOYXRpdmVSVENJY2VDYW5kaWRhdGUoYXJncyk7XG4gICAgICAgIHZhciBwYXJzZWRDYW5kaWRhdGUgPSBTRFBVdGlscy5wYXJzZUNhbmRpZGF0ZShhcmdzLmNhbmRpZGF0ZSk7XG4gICAgICAgIHZhciBhdWdtZW50ZWRDYW5kaWRhdGUgPSBPYmplY3QuYXNzaWduKG5hdGl2ZUNhbmRpZGF0ZSxcbiAgICAgICAgICAgIHBhcnNlZENhbmRpZGF0ZSk7XG5cbiAgICAgICAgLy8gQWRkIGEgc2VyaWFsaXplciB0aGF0IGRvZXMgbm90IHNlcmlhbGl6ZSB0aGUgZXh0cmEgYXR0cmlidXRlcy5cbiAgICAgICAgYXVnbWVudGVkQ2FuZGlkYXRlLnRvSlNPTiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjYW5kaWRhdGU6IGF1Z21lbnRlZENhbmRpZGF0ZS5jYW5kaWRhdGUsXG4gICAgICAgICAgICBzZHBNaWQ6IGF1Z21lbnRlZENhbmRpZGF0ZS5zZHBNaWQsXG4gICAgICAgICAgICBzZHBNTGluZUluZGV4OiBhdWdtZW50ZWRDYW5kaWRhdGUuc2RwTUxpbmVJbmRleCxcbiAgICAgICAgICAgIHVzZXJuYW1lRnJhZ21lbnQ6IGF1Z21lbnRlZENhbmRpZGF0ZS51c2VybmFtZUZyYWdtZW50LFxuICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBhdWdtZW50ZWRDYW5kaWRhdGU7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IE5hdGl2ZVJUQ0ljZUNhbmRpZGF0ZShhcmdzKTtcbiAgICB9O1xuICAgIHdpbmRvdy5SVENJY2VDYW5kaWRhdGUucHJvdG90eXBlID0gTmF0aXZlUlRDSWNlQ2FuZGlkYXRlLnByb3RvdHlwZTtcblxuICAgIC8vIEhvb2sgdXAgdGhlIGF1Z21lbnRlZCBjYW5kaWRhdGUgaW4gb25pY2VjYW5kaWRhdGUgYW5kXG4gICAgLy8gYWRkRXZlbnRMaXN0ZW5lcignaWNlY2FuZGlkYXRlJywgLi4uKVxuICAgIHV0aWxzLndyYXBQZWVyQ29ubmVjdGlvbkV2ZW50KHdpbmRvdywgJ2ljZWNhbmRpZGF0ZScsIGZ1bmN0aW9uKGUpIHtcbiAgICAgIGlmIChlLmNhbmRpZGF0ZSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgJ2NhbmRpZGF0ZScsIHtcbiAgICAgICAgICB2YWx1ZTogbmV3IHdpbmRvdy5SVENJY2VDYW5kaWRhdGUoZS5jYW5kaWRhdGUpLFxuICAgICAgICAgIHdyaXRhYmxlOiAnZmFsc2UnXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGU7XG4gICAgfSk7XG4gIH0sXG5cbiAgLy8gc2hpbUNyZWF0ZU9iamVjdFVSTCBtdXN0IGJlIGNhbGxlZCBiZWZvcmUgc2hpbVNvdXJjZU9iamVjdCB0byBhdm9pZCBsb29wLlxuXG4gIHNoaW1DcmVhdGVPYmplY3RVUkw6IGZ1bmN0aW9uKHdpbmRvdykge1xuICAgIHZhciBVUkwgPSB3aW5kb3cgJiYgd2luZG93LlVSTDtcblxuICAgIGlmICghKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnICYmIHdpbmRvdy5IVE1MTWVkaWFFbGVtZW50ICYmXG4gICAgICAgICAgJ3NyY09iamVjdCcgaW4gd2luZG93LkhUTUxNZWRpYUVsZW1lbnQucHJvdG90eXBlICYmXG4gICAgICAgIFVSTC5jcmVhdGVPYmplY3RVUkwgJiYgVVJMLnJldm9rZU9iamVjdFVSTCkpIHtcbiAgICAgIC8vIE9ubHkgc2hpbSBDcmVhdGVPYmplY3RVUkwgdXNpbmcgc3JjT2JqZWN0IGlmIHNyY09iamVjdCBleGlzdHMuXG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHZhciBuYXRpdmVDcmVhdGVPYmplY3RVUkwgPSBVUkwuY3JlYXRlT2JqZWN0VVJMLmJpbmQoVVJMKTtcbiAgICB2YXIgbmF0aXZlUmV2b2tlT2JqZWN0VVJMID0gVVJMLnJldm9rZU9iamVjdFVSTC5iaW5kKFVSTCk7XG4gICAgdmFyIHN0cmVhbXMgPSBuZXcgTWFwKCksIG5ld0lkID0gMDtcblxuICAgIFVSTC5jcmVhdGVPYmplY3RVUkwgPSBmdW5jdGlvbihzdHJlYW0pIHtcbiAgICAgIGlmICgnZ2V0VHJhY2tzJyBpbiBzdHJlYW0pIHtcbiAgICAgICAgdmFyIHVybCA9ICdwb2x5YmxvYjonICsgKCsrbmV3SWQpO1xuICAgICAgICBzdHJlYW1zLnNldCh1cmwsIHN0cmVhbSk7XG4gICAgICAgIHV0aWxzLmRlcHJlY2F0ZWQoJ1VSTC5jcmVhdGVPYmplY3RVUkwoc3RyZWFtKScsXG4gICAgICAgICAgICAnZWxlbS5zcmNPYmplY3QgPSBzdHJlYW0nKTtcbiAgICAgICAgcmV0dXJuIHVybDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuYXRpdmVDcmVhdGVPYmplY3RVUkwoc3RyZWFtKTtcbiAgICB9O1xuICAgIFVSTC5yZXZva2VPYmplY3RVUkwgPSBmdW5jdGlvbih1cmwpIHtcbiAgICAgIG5hdGl2ZVJldm9rZU9iamVjdFVSTCh1cmwpO1xuICAgICAgc3RyZWFtcy5kZWxldGUodXJsKTtcbiAgICB9O1xuXG4gICAgdmFyIGRzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iod2luZG93LkhUTUxNZWRpYUVsZW1lbnQucHJvdG90eXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzcmMnKTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LkhUTUxNZWRpYUVsZW1lbnQucHJvdG90eXBlLCAnc3JjJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGRzYy5nZXQuYXBwbHkodGhpcyk7XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbih1cmwpIHtcbiAgICAgICAgdGhpcy5zcmNPYmplY3QgPSBzdHJlYW1zLmdldCh1cmwpIHx8IG51bGw7XG4gICAgICAgIHJldHVybiBkc2Muc2V0LmFwcGx5KHRoaXMsIFt1cmxdKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHZhciBuYXRpdmVTZXRBdHRyaWJ1dGUgPSB3aW5kb3cuSFRNTE1lZGlhRWxlbWVudC5wcm90b3R5cGUuc2V0QXR0cmlidXRlO1xuICAgIHdpbmRvdy5IVE1MTWVkaWFFbGVtZW50LnByb3RvdHlwZS5zZXRBdHRyaWJ1dGUgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyICYmXG4gICAgICAgICAgKCcnICsgYXJndW1lbnRzWzBdKS50b0xvd2VyQ2FzZSgpID09PSAnc3JjJykge1xuICAgICAgICB0aGlzLnNyY09iamVjdCA9IHN0cmVhbXMuZ2V0KGFyZ3VtZW50c1sxXSkgfHwgbnVsbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuYXRpdmVTZXRBdHRyaWJ1dGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9LFxuXG4gIHNoaW1NYXhNZXNzYWdlU2l6ZTogZnVuY3Rpb24od2luZG93KSB7XG4gICAgaWYgKHdpbmRvdy5SVENTY3RwVHJhbnNwb3J0IHx8ICF3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGJyb3dzZXJEZXRhaWxzID0gdXRpbHMuZGV0ZWN0QnJvd3Nlcih3aW5kb3cpO1xuXG4gICAgaWYgKCEoJ3NjdHAnIGluIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUpKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZSwgJ3NjdHAnLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIHR5cGVvZiB0aGlzLl9zY3RwID09PSAndW5kZWZpbmVkJyA/IG51bGwgOiB0aGlzLl9zY3RwO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgc2N0cEluRGVzY3JpcHRpb24gPSBmdW5jdGlvbihkZXNjcmlwdGlvbikge1xuICAgICAgdmFyIHNlY3Rpb25zID0gU0RQVXRpbHMuc3BsaXRTZWN0aW9ucyhkZXNjcmlwdGlvbi5zZHApO1xuICAgICAgc2VjdGlvbnMuc2hpZnQoKTtcbiAgICAgIHJldHVybiBzZWN0aW9ucy5zb21lKGZ1bmN0aW9uKG1lZGlhU2VjdGlvbikge1xuICAgICAgICB2YXIgbUxpbmUgPSBTRFBVdGlscy5wYXJzZU1MaW5lKG1lZGlhU2VjdGlvbik7XG4gICAgICAgIHJldHVybiBtTGluZSAmJiBtTGluZS5raW5kID09PSAnYXBwbGljYXRpb24nXG4gICAgICAgICAgICAmJiBtTGluZS5wcm90b2NvbC5pbmRleE9mKCdTQ1RQJykgIT09IC0xO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIHZhciBnZXRSZW1vdGVGaXJlZm94VmVyc2lvbiA9IGZ1bmN0aW9uKGRlc2NyaXB0aW9uKSB7XG4gICAgICAvLyBUT0RPOiBJcyB0aGVyZSBhIGJldHRlciBzb2x1dGlvbiBmb3IgZGV0ZWN0aW5nIEZpcmVmb3g/XG4gICAgICB2YXIgbWF0Y2ggPSBkZXNjcmlwdGlvbi5zZHAubWF0Y2goL21vemlsbGEuLi5USElTX0lTX1NEUEFSVEEtKFxcZCspLyk7XG4gICAgICBpZiAobWF0Y2ggPT09IG51bGwgfHwgbWF0Y2gubGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICB2YXIgdmVyc2lvbiA9IHBhcnNlSW50KG1hdGNoWzFdLCAxMCk7XG4gICAgICAvLyBUZXN0IGZvciBOYU4gKHllcywgdGhpcyBpcyB1Z2x5KVxuICAgICAgcmV0dXJuIHZlcnNpb24gIT09IHZlcnNpb24gPyAtMSA6IHZlcnNpb247XG4gICAgfTtcblxuICAgIHZhciBnZXRDYW5TZW5kTWF4TWVzc2FnZVNpemUgPSBmdW5jdGlvbihyZW1vdGVJc0ZpcmVmb3gpIHtcbiAgICAgIC8vIEV2ZXJ5IGltcGxlbWVudGF0aW9uIHdlIGtub3cgY2FuIHNlbmQgYXQgbGVhc3QgNjQgS2lCLlxuICAgICAgLy8gTm90ZTogQWx0aG91Z2ggQ2hyb21lIGlzIHRlY2huaWNhbGx5IGFibGUgdG8gc2VuZCB1cCB0byAyNTYgS2lCLCB0aGVcbiAgICAgIC8vICAgICAgIGRhdGEgZG9lcyBub3QgcmVhY2ggdGhlIG90aGVyIHBlZXIgcmVsaWFibHkuXG4gICAgICAvLyAgICAgICBTZWU6IGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC93ZWJydGMvaXNzdWVzL2RldGFpbD9pZD04NDE5XG4gICAgICB2YXIgY2FuU2VuZE1heE1lc3NhZ2VTaXplID0gNjU1MzY7XG4gICAgICBpZiAoYnJvd3NlckRldGFpbHMuYnJvd3NlciA9PT0gJ2ZpcmVmb3gnKSB7XG4gICAgICAgIGlmIChicm93c2VyRGV0YWlscy52ZXJzaW9uIDwgNTcpIHtcbiAgICAgICAgICBpZiAocmVtb3RlSXNGaXJlZm94ID09PSAtMSkge1xuICAgICAgICAgICAgLy8gRkYgPCA1NyB3aWxsIHNlbmQgaW4gMTYgS2lCIGNodW5rcyB1c2luZyB0aGUgZGVwcmVjYXRlZCBQUElEXG4gICAgICAgICAgICAvLyBmcmFnbWVudGF0aW9uLlxuICAgICAgICAgICAgY2FuU2VuZE1heE1lc3NhZ2VTaXplID0gMTYzODQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIEhvd2V2ZXIsIG90aGVyIEZGIChhbmQgUkFXUlRDKSBjYW4gcmVhc3NlbWJsZSBQUElELWZyYWdtZW50ZWRcbiAgICAgICAgICAgIC8vIG1lc3NhZ2VzLiBUaHVzLCBzdXBwb3J0aW5nIH4yIEdpQiB3aGVuIHNlbmRpbmcuXG4gICAgICAgICAgICBjYW5TZW5kTWF4TWVzc2FnZVNpemUgPSAyMTQ3NDgzNjM3O1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChicm93c2VyRGV0YWlscy52ZXJzaW9uIDwgNjApIHtcbiAgICAgICAgICAvLyBDdXJyZW50bHksIGFsbCBGRiA+PSA1NyB3aWxsIHJlc2V0IHRoZSByZW1vdGUgbWF4aW11bSBtZXNzYWdlIHNpemVcbiAgICAgICAgICAvLyB0byB0aGUgZGVmYXVsdCB2YWx1ZSB3aGVuIGEgZGF0YSBjaGFubmVsIGlzIGNyZWF0ZWQgYXQgYSBsYXRlclxuICAgICAgICAgIC8vIHN0YWdlLiA6KFxuICAgICAgICAgIC8vIFNlZTogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTQyNjgzMVxuICAgICAgICAgIGNhblNlbmRNYXhNZXNzYWdlU2l6ZSA9XG4gICAgICAgICAgICBicm93c2VyRGV0YWlscy52ZXJzaW9uID09PSA1NyA/IDY1NTM1IDogNjU1MzY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gRkYgPj0gNjAgc3VwcG9ydHMgc2VuZGluZyB+MiBHaUJcbiAgICAgICAgICBjYW5TZW5kTWF4TWVzc2FnZVNpemUgPSAyMTQ3NDgzNjM3O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gY2FuU2VuZE1heE1lc3NhZ2VTaXplO1xuICAgIH07XG5cbiAgICB2YXIgZ2V0TWF4TWVzc2FnZVNpemUgPSBmdW5jdGlvbihkZXNjcmlwdGlvbiwgcmVtb3RlSXNGaXJlZm94KSB7XG4gICAgICAvLyBOb3RlOiA2NTUzNiBieXRlcyBpcyB0aGUgZGVmYXVsdCB2YWx1ZSBmcm9tIHRoZSBTRFAgc3BlYy4gQWxzbyxcbiAgICAgIC8vICAgICAgIGV2ZXJ5IGltcGxlbWVudGF0aW9uIHdlIGtub3cgc3VwcG9ydHMgcmVjZWl2aW5nIDY1NTM2IGJ5dGVzLlxuICAgICAgdmFyIG1heE1lc3NhZ2VTaXplID0gNjU1MzY7XG5cbiAgICAgIC8vIEZGIDU3IGhhcyBhIHNsaWdodGx5IGluY29ycmVjdCBkZWZhdWx0IHJlbW90ZSBtYXggbWVzc2FnZSBzaXplLCBzb1xuICAgICAgLy8gd2UgbmVlZCB0byBhZGp1c3QgaXQgaGVyZSB0byBhdm9pZCBhIGZhaWx1cmUgd2hlbiBzZW5kaW5nLlxuICAgICAgLy8gU2VlOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0xNDI1Njk3XG4gICAgICBpZiAoYnJvd3NlckRldGFpbHMuYnJvd3NlciA9PT0gJ2ZpcmVmb3gnXG4gICAgICAgICAgICYmIGJyb3dzZXJEZXRhaWxzLnZlcnNpb24gPT09IDU3KSB7XG4gICAgICAgIG1heE1lc3NhZ2VTaXplID0gNjU1MzU7XG4gICAgICB9XG5cbiAgICAgIHZhciBtYXRjaCA9IFNEUFV0aWxzLm1hdGNoUHJlZml4KGRlc2NyaXB0aW9uLnNkcCwgJ2E9bWF4LW1lc3NhZ2Utc2l6ZTonKTtcbiAgICAgIGlmIChtYXRjaC5sZW5ndGggPiAwKSB7XG4gICAgICAgIG1heE1lc3NhZ2VTaXplID0gcGFyc2VJbnQobWF0Y2hbMF0uc3Vic3RyKDE5KSwgMTApO1xuICAgICAgfSBlbHNlIGlmIChicm93c2VyRGV0YWlscy5icm93c2VyID09PSAnZmlyZWZveCcgJiZcbiAgICAgICAgICAgICAgICAgIHJlbW90ZUlzRmlyZWZveCAhPT0gLTEpIHtcbiAgICAgICAgLy8gSWYgdGhlIG1heGltdW0gbWVzc2FnZSBzaXplIGlzIG5vdCBwcmVzZW50IGluIHRoZSByZW1vdGUgU0RQIGFuZFxuICAgICAgICAvLyBib3RoIGxvY2FsIGFuZCByZW1vdGUgYXJlIEZpcmVmb3gsIHRoZSByZW1vdGUgcGVlciBjYW4gcmVjZWl2ZVxuICAgICAgICAvLyB+MiBHaUIuXG4gICAgICAgIG1heE1lc3NhZ2VTaXplID0gMjE0NzQ4MzYzNztcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYXhNZXNzYWdlU2l6ZTtcbiAgICB9O1xuXG4gICAgdmFyIG9yaWdTZXRSZW1vdGVEZXNjcmlwdGlvbiA9XG4gICAgICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuc2V0UmVtb3RlRGVzY3JpcHRpb247XG4gICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5zZXRSZW1vdGVEZXNjcmlwdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHBjID0gdGhpcztcbiAgICAgIHBjLl9zY3RwID0gbnVsbDtcblxuICAgICAgaWYgKHNjdHBJbkRlc2NyaXB0aW9uKGFyZ3VtZW50c1swXSkpIHtcbiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIHJlbW90ZSBpcyBGRi5cbiAgICAgICAgdmFyIGlzRmlyZWZveCA9IGdldFJlbW90ZUZpcmVmb3hWZXJzaW9uKGFyZ3VtZW50c1swXSk7XG5cbiAgICAgICAgLy8gR2V0IHRoZSBtYXhpbXVtIG1lc3NhZ2Ugc2l6ZSB0aGUgbG9jYWwgcGVlciBpcyBjYXBhYmxlIG9mIHNlbmRpbmdcbiAgICAgICAgdmFyIGNhblNlbmRNTVMgPSBnZXRDYW5TZW5kTWF4TWVzc2FnZVNpemUoaXNGaXJlZm94KTtcblxuICAgICAgICAvLyBHZXQgdGhlIG1heGltdW0gbWVzc2FnZSBzaXplIG9mIHRoZSByZW1vdGUgcGVlci5cbiAgICAgICAgdmFyIHJlbW90ZU1NUyA9IGdldE1heE1lc3NhZ2VTaXplKGFyZ3VtZW50c1swXSwgaXNGaXJlZm94KTtcblxuICAgICAgICAvLyBEZXRlcm1pbmUgZmluYWwgbWF4aW11bSBtZXNzYWdlIHNpemVcbiAgICAgICAgdmFyIG1heE1lc3NhZ2VTaXplO1xuICAgICAgICBpZiAoY2FuU2VuZE1NUyA9PT0gMCAmJiByZW1vdGVNTVMgPT09IDApIHtcbiAgICAgICAgICBtYXhNZXNzYWdlU2l6ZSA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICAgICAgfSBlbHNlIGlmIChjYW5TZW5kTU1TID09PSAwIHx8IHJlbW90ZU1NUyA9PT0gMCkge1xuICAgICAgICAgIG1heE1lc3NhZ2VTaXplID0gTWF0aC5tYXgoY2FuU2VuZE1NUywgcmVtb3RlTU1TKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtYXhNZXNzYWdlU2l6ZSA9IE1hdGgubWluKGNhblNlbmRNTVMsIHJlbW90ZU1NUyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDcmVhdGUgYSBkdW1teSBSVENTY3RwVHJhbnNwb3J0IG9iamVjdCBhbmQgdGhlICdtYXhNZXNzYWdlU2l6ZSdcbiAgICAgICAgLy8gYXR0cmlidXRlLlxuICAgICAgICB2YXIgc2N0cCA9IHt9O1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc2N0cCwgJ21heE1lc3NhZ2VTaXplJywge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gbWF4TWVzc2FnZVNpemU7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcGMuX3NjdHAgPSBzY3RwO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gb3JpZ1NldFJlbW90ZURlc2NyaXB0aW9uLmFwcGx5KHBjLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH0sXG5cbiAgc2hpbVNlbmRUaHJvd1R5cGVFcnJvcjogZnVuY3Rpb24od2luZG93KSB7XG4gICAgaWYgKCEod2luZG93LlJUQ1BlZXJDb25uZWN0aW9uICYmXG4gICAgICAgICdjcmVhdGVEYXRhQ2hhbm5lbCcgaW4gd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBOb3RlOiBBbHRob3VnaCBGaXJlZm94ID49IDU3IGhhcyBhIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbiwgdGhlIG1heGltdW1cbiAgICAvLyAgICAgICBtZXNzYWdlIHNpemUgY2FuIGJlIHJlc2V0IGZvciBhbGwgZGF0YSBjaGFubmVscyBhdCBhIGxhdGVyIHN0YWdlLlxuICAgIC8vICAgICAgIFNlZTogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTQyNjgzMVxuXG4gICAgZnVuY3Rpb24gd3JhcERjU2VuZChkYywgcGMpIHtcbiAgICAgIHZhciBvcmlnRGF0YUNoYW5uZWxTZW5kID0gZGMuc2VuZDtcbiAgICAgIGRjLnNlbmQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGRhdGEgPSBhcmd1bWVudHNbMF07XG4gICAgICAgIHZhciBsZW5ndGggPSBkYXRhLmxlbmd0aCB8fCBkYXRhLnNpemUgfHwgZGF0YS5ieXRlTGVuZ3RoO1xuICAgICAgICBpZiAoZGMucmVhZHlTdGF0ZSA9PT0gJ29wZW4nICYmXG4gICAgICAgICAgICBwYy5zY3RwICYmIGxlbmd0aCA+IHBjLnNjdHAubWF4TWVzc2FnZVNpemUpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdNZXNzYWdlIHRvbyBsYXJnZSAoY2FuIHNlbmQgYSBtYXhpbXVtIG9mICcgK1xuICAgICAgICAgICAgcGMuc2N0cC5tYXhNZXNzYWdlU2l6ZSArICcgYnl0ZXMpJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9yaWdEYXRhQ2hhbm5lbFNlbmQuYXBwbHkoZGMsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgIH1cbiAgICB2YXIgb3JpZ0NyZWF0ZURhdGFDaGFubmVsID1cbiAgICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuY3JlYXRlRGF0YUNoYW5uZWw7XG4gICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5jcmVhdGVEYXRhQ2hhbm5lbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHBjID0gdGhpcztcbiAgICAgIHZhciBkYXRhQ2hhbm5lbCA9IG9yaWdDcmVhdGVEYXRhQ2hhbm5lbC5hcHBseShwYywgYXJndW1lbnRzKTtcbiAgICAgIHdyYXBEY1NlbmQoZGF0YUNoYW5uZWwsIHBjKTtcbiAgICAgIHJldHVybiBkYXRhQ2hhbm5lbDtcbiAgICB9O1xuICAgIHV0aWxzLndyYXBQZWVyQ29ubmVjdGlvbkV2ZW50KHdpbmRvdywgJ2RhdGFjaGFubmVsJywgZnVuY3Rpb24oZSkge1xuICAgICAgd3JhcERjU2VuZChlLmNoYW5uZWwsIGUudGFyZ2V0KTtcbiAgICAgIHJldHVybiBlO1xuICAgIH0pO1xuICB9XG59O1xuIiwiLypcbiAqICBDb3B5cmlnaHQgKGMpIDIwMTYgVGhlIFdlYlJUQyBwcm9qZWN0IGF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlIGxpY2Vuc2VcbiAqICB0aGF0IGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IG9mIHRoZSBzb3VyY2VcbiAqICB0cmVlLlxuICovXG4gLyogZXNsaW50LWVudiBub2RlICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgZmlsdGVySWNlU2VydmVycyA9IHJlcXVpcmUoJy4vZmlsdGVyaWNlc2VydmVycycpO1xudmFyIHNoaW1SVENQZWVyQ29ubmVjdGlvbiA9IHJlcXVpcmUoJ3J0Y3BlZXJjb25uZWN0aW9uLXNoaW0nKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNoaW1HZXRVc2VyTWVkaWE6IHJlcXVpcmUoJy4vZ2V0dXNlcm1lZGlhJyksXG4gIHNoaW1QZWVyQ29ubmVjdGlvbjogZnVuY3Rpb24od2luZG93KSB7XG4gICAgdmFyIGJyb3dzZXJEZXRhaWxzID0gdXRpbHMuZGV0ZWN0QnJvd3Nlcih3aW5kb3cpO1xuXG4gICAgaWYgKHdpbmRvdy5SVENJY2VHYXRoZXJlcikge1xuICAgICAgaWYgKCF3aW5kb3cuUlRDSWNlQ2FuZGlkYXRlKSB7XG4gICAgICAgIHdpbmRvdy5SVENJY2VDYW5kaWRhdGUgPSBmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgICAgcmV0dXJuIGFyZ3M7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBpZiAoIXdpbmRvdy5SVENTZXNzaW9uRGVzY3JpcHRpb24pIHtcbiAgICAgICAgd2luZG93LlJUQ1Nlc3Npb25EZXNjcmlwdGlvbiA9IGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgICByZXR1cm4gYXJncztcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIC8vIHRoaXMgYWRkcyBhbiBhZGRpdGlvbmFsIGV2ZW50IGxpc3RlbmVyIHRvIE1lZGlhU3RyYWNrVHJhY2sgdGhhdCBzaWduYWxzXG4gICAgICAvLyB3aGVuIGEgdHJhY2tzIGVuYWJsZWQgcHJvcGVydHkgd2FzIGNoYW5nZWQuIFdvcmthcm91bmQgZm9yIGEgYnVnIGluXG4gICAgICAvLyBhZGRTdHJlYW0sIHNlZSBiZWxvdy4gTm8gbG9uZ2VyIHJlcXVpcmVkIGluIDE1MDI1K1xuICAgICAgaWYgKGJyb3dzZXJEZXRhaWxzLnZlcnNpb24gPCAxNTAyNSkge1xuICAgICAgICB2YXIgb3JpZ01TVEVuYWJsZWQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKFxuICAgICAgICAgICAgd2luZG93Lk1lZGlhU3RyZWFtVHJhY2sucHJvdG90eXBlLCAnZW5hYmxlZCcpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93Lk1lZGlhU3RyZWFtVHJhY2sucHJvdG90eXBlLCAnZW5hYmxlZCcsIHtcbiAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBvcmlnTVNURW5hYmxlZC5zZXQuY2FsbCh0aGlzLCB2YWx1ZSk7XG4gICAgICAgICAgICB2YXIgZXYgPSBuZXcgRXZlbnQoJ2VuYWJsZWQnKTtcbiAgICAgICAgICAgIGV2LmVuYWJsZWQgPSB2YWx1ZTtcbiAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChldik7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBPUlRDIGRlZmluZXMgdGhlIERUTUYgc2VuZGVyIGEgYml0IGRpZmZlcmVudC5cbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdzNjL29ydGMvaXNzdWVzLzcxNFxuICAgIGlmICh3aW5kb3cuUlRDUnRwU2VuZGVyICYmICEoJ2R0bWYnIGluIHdpbmRvdy5SVENSdHBTZW5kZXIucHJvdG90eXBlKSkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5SVENSdHBTZW5kZXIucHJvdG90eXBlLCAnZHRtZicsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAodGhpcy5fZHRtZiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAodGhpcy50cmFjay5raW5kID09PSAnYXVkaW8nKSB7XG4gICAgICAgICAgICAgIHRoaXMuX2R0bWYgPSBuZXcgd2luZG93LlJUQ0R0bWZTZW5kZXIodGhpcyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMudHJhY2sua2luZCA9PT0gJ3ZpZGVvJykge1xuICAgICAgICAgICAgICB0aGlzLl9kdG1mID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX2R0bWY7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBFZGdlIGN1cnJlbnRseSBvbmx5IGltcGxlbWVudHMgdGhlIFJUQ0R0bWZTZW5kZXIsIG5vdCB0aGVcbiAgICAvLyBSVENEVE1GU2VuZGVyIGFsaWFzLiBTZWUgaHR0cDovL2RyYWZ0Lm9ydGMub3JnLyNydGNkdG1mc2VuZGVyMipcbiAgICBpZiAod2luZG93LlJUQ0R0bWZTZW5kZXIgJiYgIXdpbmRvdy5SVENEVE1GU2VuZGVyKSB7XG4gICAgICB3aW5kb3cuUlRDRFRNRlNlbmRlciA9IHdpbmRvdy5SVENEdG1mU2VuZGVyO1xuICAgIH1cblxuICAgIHZhciBSVENQZWVyQ29ubmVjdGlvblNoaW0gPSBzaGltUlRDUGVlckNvbm5lY3Rpb24od2luZG93LFxuICAgICAgICBicm93c2VyRGV0YWlscy52ZXJzaW9uKTtcbiAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24gPSBmdW5jdGlvbihjb25maWcpIHtcbiAgICAgIGlmIChjb25maWcgJiYgY29uZmlnLmljZVNlcnZlcnMpIHtcbiAgICAgICAgY29uZmlnLmljZVNlcnZlcnMgPSBmaWx0ZXJJY2VTZXJ2ZXJzKGNvbmZpZy5pY2VTZXJ2ZXJzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXcgUlRDUGVlckNvbm5lY3Rpb25TaGltKGNvbmZpZyk7XG4gICAgfTtcbiAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlID0gUlRDUGVlckNvbm5lY3Rpb25TaGltLnByb3RvdHlwZTtcbiAgfSxcbiAgc2hpbVJlcGxhY2VUcmFjazogZnVuY3Rpb24od2luZG93KSB7XG4gICAgLy8gT1JUQyBoYXMgcmVwbGFjZVRyYWNrIC0tIGh0dHBzOi8vZ2l0aHViLmNvbS93M2Mvb3J0Yy9pc3N1ZXMvNjE0XG4gICAgaWYgKHdpbmRvdy5SVENSdHBTZW5kZXIgJiZcbiAgICAgICAgISgncmVwbGFjZVRyYWNrJyBpbiB3aW5kb3cuUlRDUnRwU2VuZGVyLnByb3RvdHlwZSkpIHtcbiAgICAgIHdpbmRvdy5SVENSdHBTZW5kZXIucHJvdG90eXBlLnJlcGxhY2VUcmFjayA9XG4gICAgICAgICAgd2luZG93LlJUQ1J0cFNlbmRlci5wcm90b3R5cGUuc2V0VHJhY2s7XG4gICAgfVxuICB9LFxuICBzaGltR2V0RGlzcGxheU1lZGlhOiBmdW5jdGlvbih3aW5kb3csIHByZWZlcnJlZE1lZGlhU291cmNlKSB7XG4gICAgaWYgKCEoJ2dldERpc3BsYXlNZWRpYScgaW4gd2luZG93Lm5hdmlnYXRvcikgfHxcbiAgICAgICAgIXdpbmRvdy5uYXZpZ2F0b3IubWVkaWFEZXZpY2VzIHx8XG4gICAgICAgICdnZXREaXNwbGF5TWVkaWEnIGluIHdpbmRvdy5uYXZpZ2F0b3IubWVkaWFEZXZpY2VzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBvcmlnR2V0RGlzcGxheU1lZGlhID0gd2luZG93Lm5hdmlnYXRvci5nZXREaXNwbGF5TWVkaWE7XG4gICAgd2luZG93Lm5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0RGlzcGxheU1lZGlhID0gZnVuY3Rpb24oY29uc3RyYWludHMpIHtcbiAgICAgIHJldHVybiBvcmlnR2V0RGlzcGxheU1lZGlhLmNhbGwod2luZG93Lm5hdmlnYXRvciwgY29uc3RyYWludHMpO1xuICAgIH07XG4gICAgd2luZG93Lm5hdmlnYXRvci5nZXREaXNwbGF5TWVkaWEgPSBmdW5jdGlvbihjb25zdHJhaW50cykge1xuICAgICAgdXRpbHMuZGVwcmVjYXRlZCgnbmF2aWdhdG9yLmdldERpc3BsYXlNZWRpYScsXG4gICAgICAgICAgJ25hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0RGlzcGxheU1lZGlhJyk7XG4gICAgICByZXR1cm4gb3JpZ0dldERpc3BsYXlNZWRpYS5jYWxsKHdpbmRvdy5uYXZpZ2F0b3IsIGNvbnN0cmFpbnRzKTtcbiAgICB9O1xuICB9XG59O1xuIiwiLypcbiAqICBDb3B5cmlnaHQgKGMpIDIwMTggVGhlIFdlYlJUQyBwcm9qZWN0IGF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlIGxpY2Vuc2VcbiAqICB0aGF0IGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IG9mIHRoZSBzb3VyY2VcbiAqICB0cmVlLlxuICovXG4gLyogZXNsaW50LWVudiBub2RlICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG4vLyBFZGdlIGRvZXMgbm90IGxpa2Vcbi8vIDEpIHN0dW46IGZpbHRlcmVkIGFmdGVyIDE0MzkzIHVubGVzcyA/dHJhbnNwb3J0PXVkcCBpcyBwcmVzZW50XG4vLyAyKSB0dXJuOiB0aGF0IGRvZXMgbm90IGhhdmUgYWxsIG9mIHR1cm46aG9zdDpwb3J0P3RyYW5zcG9ydD11ZHBcbi8vIDMpIHR1cm46IHdpdGggaXB2NiBhZGRyZXNzZXNcbi8vIDQpIHR1cm46IG9jY3VycmluZyBtdWxpcGxlIHRpbWVzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGljZVNlcnZlcnMsIGVkZ2VWZXJzaW9uKSB7XG4gIHZhciBoYXNUdXJuID0gZmFsc2U7XG4gIGljZVNlcnZlcnMgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGljZVNlcnZlcnMpKTtcbiAgcmV0dXJuIGljZVNlcnZlcnMuZmlsdGVyKGZ1bmN0aW9uKHNlcnZlcikge1xuICAgIGlmIChzZXJ2ZXIgJiYgKHNlcnZlci51cmxzIHx8IHNlcnZlci51cmwpKSB7XG4gICAgICB2YXIgdXJscyA9IHNlcnZlci51cmxzIHx8IHNlcnZlci51cmw7XG4gICAgICBpZiAoc2VydmVyLnVybCAmJiAhc2VydmVyLnVybHMpIHtcbiAgICAgICAgdXRpbHMuZGVwcmVjYXRlZCgnUlRDSWNlU2VydmVyLnVybCcsICdSVENJY2VTZXJ2ZXIudXJscycpO1xuICAgICAgfVxuICAgICAgdmFyIGlzU3RyaW5nID0gdHlwZW9mIHVybHMgPT09ICdzdHJpbmcnO1xuICAgICAgaWYgKGlzU3RyaW5nKSB7XG4gICAgICAgIHVybHMgPSBbdXJsc107XG4gICAgICB9XG4gICAgICB1cmxzID0gdXJscy5maWx0ZXIoZnVuY3Rpb24odXJsKSB7XG4gICAgICAgIHZhciB2YWxpZFR1cm4gPSB1cmwuaW5kZXhPZigndHVybjonKSA9PT0gMCAmJlxuICAgICAgICAgICAgdXJsLmluZGV4T2YoJ3RyYW5zcG9ydD11ZHAnKSAhPT0gLTEgJiZcbiAgICAgICAgICAgIHVybC5pbmRleE9mKCd0dXJuOlsnKSA9PT0gLTEgJiZcbiAgICAgICAgICAgICFoYXNUdXJuO1xuXG4gICAgICAgIGlmICh2YWxpZFR1cm4pIHtcbiAgICAgICAgICBoYXNUdXJuID0gdHJ1ZTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdXJsLmluZGV4T2YoJ3N0dW46JykgPT09IDAgJiYgZWRnZVZlcnNpb24gPj0gMTQzOTMgJiZcbiAgICAgICAgICAgIHVybC5pbmRleE9mKCc/dHJhbnNwb3J0PXVkcCcpID09PSAtMTtcbiAgICAgIH0pO1xuXG4gICAgICBkZWxldGUgc2VydmVyLnVybDtcbiAgICAgIHNlcnZlci51cmxzID0gaXNTdHJpbmcgPyB1cmxzWzBdIDogdXJscztcbiAgICAgIHJldHVybiAhIXVybHMubGVuZ3RoO1xuICAgIH1cbiAgfSk7XG59O1xuIiwiLypcbiAqICBDb3B5cmlnaHQgKGMpIDIwMTYgVGhlIFdlYlJUQyBwcm9qZWN0IGF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlIGxpY2Vuc2VcbiAqICB0aGF0IGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IG9mIHRoZSBzb3VyY2VcbiAqICB0cmVlLlxuICovXG4gLyogZXNsaW50LWVudiBub2RlICovXG4ndXNlIHN0cmljdCc7XG5cbi8vIEV4cG9zZSBwdWJsaWMgbWV0aG9kcy5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24od2luZG93KSB7XG4gIHZhciBuYXZpZ2F0b3IgPSB3aW5kb3cgJiYgd2luZG93Lm5hdmlnYXRvcjtcblxuICB2YXIgc2hpbUVycm9yXyA9IGZ1bmN0aW9uKGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZToge1Blcm1pc3Npb25EZW5pZWRFcnJvcjogJ05vdEFsbG93ZWRFcnJvcid9W2UubmFtZV0gfHwgZS5uYW1lLFxuICAgICAgbWVzc2FnZTogZS5tZXNzYWdlLFxuICAgICAgY29uc3RyYWludDogZS5jb25zdHJhaW50LFxuICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5uYW1lO1xuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgLy8gZ2V0VXNlck1lZGlhIGVycm9yIHNoaW0uXG4gIHZhciBvcmlnR2V0VXNlck1lZGlhID0gbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEuXG4gICAgICBiaW5kKG5hdmlnYXRvci5tZWRpYURldmljZXMpO1xuICBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYSA9IGZ1bmN0aW9uKGMpIHtcbiAgICByZXR1cm4gb3JpZ0dldFVzZXJNZWRpYShjKS5jYXRjaChmdW5jdGlvbihlKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3Qoc2hpbUVycm9yXyhlKSk7XG4gICAgfSk7XG4gIH07XG59O1xuIiwiLypcbiAqICBDb3B5cmlnaHQgKGMpIDIwMTYgVGhlIFdlYlJUQyBwcm9qZWN0IGF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlIGxpY2Vuc2VcbiAqICB0aGF0IGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IG9mIHRoZSBzb3VyY2VcbiAqICB0cmVlLlxuICovXG4gLyogZXNsaW50LWVudiBub2RlICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzaGltR2V0VXNlck1lZGlhOiByZXF1aXJlKCcuL2dldHVzZXJtZWRpYScpLFxuICBzaGltT25UcmFjazogZnVuY3Rpb24od2luZG93KSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnICYmIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbiAmJiAhKCdvbnRyYWNrJyBpblxuICAgICAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlKSkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUsICdvbnRyYWNrJywge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLl9vbnRyYWNrO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uKGYpIHtcbiAgICAgICAgICBpZiAodGhpcy5fb250cmFjaykge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCd0cmFjaycsIHRoaXMuX29udHJhY2spO1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCdhZGRzdHJlYW0nLCB0aGlzLl9vbnRyYWNrcG9seSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcigndHJhY2snLCB0aGlzLl9vbnRyYWNrID0gZik7XG4gICAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCdhZGRzdHJlYW0nLCB0aGlzLl9vbnRyYWNrcG9seSA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIGUuc3RyZWFtLmdldFRyYWNrcygpLmZvckVhY2goZnVuY3Rpb24odHJhY2spIHtcbiAgICAgICAgICAgICAgdmFyIGV2ZW50ID0gbmV3IEV2ZW50KCd0cmFjaycpO1xuICAgICAgICAgICAgICBldmVudC50cmFjayA9IHRyYWNrO1xuICAgICAgICAgICAgICBldmVudC5yZWNlaXZlciA9IHt0cmFjazogdHJhY2t9O1xuICAgICAgICAgICAgICBldmVudC50cmFuc2NlaXZlciA9IHtyZWNlaXZlcjogZXZlbnQucmVjZWl2ZXJ9O1xuICAgICAgICAgICAgICBldmVudC5zdHJlYW1zID0gW2Uuc3RyZWFtXTtcbiAgICAgICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICAgICAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgICAgICAgfS5iaW5kKHRoaXMpKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnICYmIHdpbmRvdy5SVENUcmFja0V2ZW50ICYmXG4gICAgICAgICgncmVjZWl2ZXInIGluIHdpbmRvdy5SVENUcmFja0V2ZW50LnByb3RvdHlwZSkgJiZcbiAgICAgICAgISgndHJhbnNjZWl2ZXInIGluIHdpbmRvdy5SVENUcmFja0V2ZW50LnByb3RvdHlwZSkpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuUlRDVHJhY2tFdmVudC5wcm90b3R5cGUsICd0cmFuc2NlaXZlcicsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4ge3JlY2VpdmVyOiB0aGlzLnJlY2VpdmVyfTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9LFxuXG4gIHNoaW1Tb3VyY2VPYmplY3Q6IGZ1bmN0aW9uKHdpbmRvdykge1xuICAgIC8vIEZpcmVmb3ggaGFzIHN1cHBvcnRlZCBtb3pTcmNPYmplY3Qgc2luY2UgRkYyMiwgdW5wcmVmaXhlZCBpbiA0Mi5cbiAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGlmICh3aW5kb3cuSFRNTE1lZGlhRWxlbWVudCAmJlxuICAgICAgICAhKCdzcmNPYmplY3QnIGluIHdpbmRvdy5IVE1MTWVkaWFFbGVtZW50LnByb3RvdHlwZSkpIHtcbiAgICAgICAgLy8gU2hpbSB0aGUgc3JjT2JqZWN0IHByb3BlcnR5LCBvbmNlLCB3aGVuIEhUTUxNZWRpYUVsZW1lbnQgaXMgZm91bmQuXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuSFRNTE1lZGlhRWxlbWVudC5wcm90b3R5cGUsICdzcmNPYmplY3QnLCB7XG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1velNyY09iamVjdDtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNldDogZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgICAgICAgICB0aGlzLm1velNyY09iamVjdCA9IHN0cmVhbTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBzaGltUGVlckNvbm5lY3Rpb246IGZ1bmN0aW9uKHdpbmRvdykge1xuICAgIHZhciBicm93c2VyRGV0YWlscyA9IHV0aWxzLmRldGVjdEJyb3dzZXIod2luZG93KTtcblxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAnb2JqZWN0JyB8fCAhKHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbiB8fFxuICAgICAgICB3aW5kb3cubW96UlRDUGVlckNvbm5lY3Rpb24pKSB7XG4gICAgICByZXR1cm47IC8vIHByb2JhYmx5IG1lZGlhLnBlZXJjb25uZWN0aW9uLmVuYWJsZWQ9ZmFsc2UgaW4gYWJvdXQ6Y29uZmlnXG4gICAgfVxuICAgIC8vIFRoZSBSVENQZWVyQ29ubmVjdGlvbiBvYmplY3QuXG4gICAgaWYgKCF3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24pIHtcbiAgICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbiA9IGZ1bmN0aW9uKHBjQ29uZmlnLCBwY0NvbnN0cmFpbnRzKSB7XG4gICAgICAgIGlmIChicm93c2VyRGV0YWlscy52ZXJzaW9uIDwgMzgpIHtcbiAgICAgICAgICAvLyAudXJscyBpcyBub3Qgc3VwcG9ydGVkIGluIEZGIDwgMzguXG4gICAgICAgICAgLy8gY3JlYXRlIFJUQ0ljZVNlcnZlcnMgd2l0aCBhIHNpbmdsZSB1cmwuXG4gICAgICAgICAgaWYgKHBjQ29uZmlnICYmIHBjQ29uZmlnLmljZVNlcnZlcnMpIHtcbiAgICAgICAgICAgIHZhciBuZXdJY2VTZXJ2ZXJzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBjQ29uZmlnLmljZVNlcnZlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgdmFyIHNlcnZlciA9IHBjQ29uZmlnLmljZVNlcnZlcnNbaV07XG4gICAgICAgICAgICAgIGlmIChzZXJ2ZXIuaGFzT3duUHJvcGVydHkoJ3VybHMnKSkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgc2VydmVyLnVybHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgIHZhciBuZXdTZXJ2ZXIgPSB7XG4gICAgICAgICAgICAgICAgICAgIHVybDogc2VydmVyLnVybHNbal1cbiAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICBpZiAoc2VydmVyLnVybHNbal0uaW5kZXhPZigndHVybicpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld1NlcnZlci51c2VybmFtZSA9IHNlcnZlci51c2VybmFtZTtcbiAgICAgICAgICAgICAgICAgICAgbmV3U2VydmVyLmNyZWRlbnRpYWwgPSBzZXJ2ZXIuY3JlZGVudGlhbDtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIG5ld0ljZVNlcnZlcnMucHVzaChuZXdTZXJ2ZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBuZXdJY2VTZXJ2ZXJzLnB1c2gocGNDb25maWcuaWNlU2VydmVyc1tpXSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBjQ29uZmlnLmljZVNlcnZlcnMgPSBuZXdJY2VTZXJ2ZXJzO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IHdpbmRvdy5tb3pSVENQZWVyQ29ubmVjdGlvbihwY0NvbmZpZywgcGNDb25zdHJhaW50cyk7XG4gICAgICB9O1xuICAgICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZSA9XG4gICAgICAgICAgd2luZG93Lm1velJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZTtcblxuICAgICAgLy8gd3JhcCBzdGF0aWMgbWV0aG9kcy4gQ3VycmVudGx5IGp1c3QgZ2VuZXJhdGVDZXJ0aWZpY2F0ZS5cbiAgICAgIGlmICh3aW5kb3cubW96UlRDUGVlckNvbm5lY3Rpb24uZ2VuZXJhdGVDZXJ0aWZpY2F0ZSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLCAnZ2VuZXJhdGVDZXJ0aWZpY2F0ZScsIHtcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5tb3pSVENQZWVyQ29ubmVjdGlvbi5nZW5lcmF0ZUNlcnRpZmljYXRlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHdpbmRvdy5SVENTZXNzaW9uRGVzY3JpcHRpb24gPSB3aW5kb3cubW96UlRDU2Vzc2lvbkRlc2NyaXB0aW9uO1xuICAgICAgd2luZG93LlJUQ0ljZUNhbmRpZGF0ZSA9IHdpbmRvdy5tb3pSVENJY2VDYW5kaWRhdGU7XG4gICAgfVxuXG4gICAgLy8gc2hpbSBhd2F5IG5lZWQgZm9yIG9ic29sZXRlIFJUQ0ljZUNhbmRpZGF0ZS9SVENTZXNzaW9uRGVzY3JpcHRpb24uXG4gICAgWydzZXRMb2NhbERlc2NyaXB0aW9uJywgJ3NldFJlbW90ZURlc2NyaXB0aW9uJywgJ2FkZEljZUNhbmRpZGF0ZSddXG4gICAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgICAgIHZhciBuYXRpdmVNZXRob2QgPSB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlW21ldGhvZF07XG4gICAgICAgICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBhcmd1bWVudHNbMF0gPSBuZXcgKChtZXRob2QgPT09ICdhZGRJY2VDYW5kaWRhdGUnKSA/XG4gICAgICAgICAgICAgICAgd2luZG93LlJUQ0ljZUNhbmRpZGF0ZSA6XG4gICAgICAgICAgICAgICAgd2luZG93LlJUQ1Nlc3Npb25EZXNjcmlwdGlvbikoYXJndW1lbnRzWzBdKTtcbiAgICAgICAgICAgIHJldHVybiBuYXRpdmVNZXRob2QuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9KTtcblxuICAgIC8vIHN1cHBvcnQgZm9yIGFkZEljZUNhbmRpZGF0ZShudWxsIG9yIHVuZGVmaW5lZClcbiAgICB2YXIgbmF0aXZlQWRkSWNlQ2FuZGlkYXRlID1cbiAgICAgICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRJY2VDYW5kaWRhdGU7XG4gICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRJY2VDYW5kaWRhdGUgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICghYXJndW1lbnRzWzBdKSB7XG4gICAgICAgIGlmIChhcmd1bWVudHNbMV0pIHtcbiAgICAgICAgICBhcmd1bWVudHNbMV0uYXBwbHkobnVsbCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5hdGl2ZUFkZEljZUNhbmRpZGF0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICAvLyBzaGltIGdldFN0YXRzIHdpdGggbWFwbGlrZSBzdXBwb3J0XG4gICAgdmFyIG1ha2VNYXBTdGF0cyA9IGZ1bmN0aW9uKHN0YXRzKSB7XG4gICAgICB2YXIgbWFwID0gbmV3IE1hcCgpO1xuICAgICAgT2JqZWN0LmtleXMoc3RhdHMpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIG1hcC5zZXQoa2V5LCBzdGF0c1trZXldKTtcbiAgICAgICAgbWFwW2tleV0gPSBzdGF0c1trZXldO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gbWFwO1xuICAgIH07XG5cbiAgICB2YXIgbW9kZXJuU3RhdHNUeXBlcyA9IHtcbiAgICAgIGluYm91bmRydHA6ICdpbmJvdW5kLXJ0cCcsXG4gICAgICBvdXRib3VuZHJ0cDogJ291dGJvdW5kLXJ0cCcsXG4gICAgICBjYW5kaWRhdGVwYWlyOiAnY2FuZGlkYXRlLXBhaXInLFxuICAgICAgbG9jYWxjYW5kaWRhdGU6ICdsb2NhbC1jYW5kaWRhdGUnLFxuICAgICAgcmVtb3RlY2FuZGlkYXRlOiAncmVtb3RlLWNhbmRpZGF0ZSdcbiAgICB9O1xuXG4gICAgdmFyIG5hdGl2ZUdldFN0YXRzID0gd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5nZXRTdGF0cztcbiAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmdldFN0YXRzID0gZnVuY3Rpb24oXG4gICAgICBzZWxlY3RvcixcbiAgICAgIG9uU3VjYyxcbiAgICAgIG9uRXJyXG4gICAgKSB7XG4gICAgICByZXR1cm4gbmF0aXZlR2V0U3RhdHMuYXBwbHkodGhpcywgW3NlbGVjdG9yIHx8IG51bGxdKVxuICAgICAgICAudGhlbihmdW5jdGlvbihzdGF0cykge1xuICAgICAgICAgIGlmIChicm93c2VyRGV0YWlscy52ZXJzaW9uIDwgNDgpIHtcbiAgICAgICAgICAgIHN0YXRzID0gbWFrZU1hcFN0YXRzKHN0YXRzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGJyb3dzZXJEZXRhaWxzLnZlcnNpb24gPCA1MyAmJiAhb25TdWNjKSB7XG4gICAgICAgICAgICAvLyBTaGltIG9ubHkgcHJvbWlzZSBnZXRTdGF0cyB3aXRoIHNwZWMtaHlwaGVucyBpbiB0eXBlIG5hbWVzXG4gICAgICAgICAgICAvLyBMZWF2ZSBjYWxsYmFjayB2ZXJzaW9uIGFsb25lOyBtaXNjIG9sZCB1c2VzIG9mIGZvckVhY2ggYmVmb3JlIE1hcFxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgc3RhdHMuZm9yRWFjaChmdW5jdGlvbihzdGF0KSB7XG4gICAgICAgICAgICAgICAgc3RhdC50eXBlID0gbW9kZXJuU3RhdHNUeXBlc1tzdGF0LnR5cGVdIHx8IHN0YXQudHlwZTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgIGlmIChlLm5hbWUgIT09ICdUeXBlRXJyb3InKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvLyBBdm9pZCBUeXBlRXJyb3I6IFwidHlwZVwiIGlzIHJlYWQtb25seSwgaW4gb2xkIHZlcnNpb25zLiAzNC00M2lzaFxuICAgICAgICAgICAgICBzdGF0cy5mb3JFYWNoKGZ1bmN0aW9uKHN0YXQsIGkpIHtcbiAgICAgICAgICAgICAgICBzdGF0cy5zZXQoaSwgT2JqZWN0LmFzc2lnbih7fSwgc3RhdCwge1xuICAgICAgICAgICAgICAgICAgdHlwZTogbW9kZXJuU3RhdHNUeXBlc1tzdGF0LnR5cGVdIHx8IHN0YXQudHlwZVxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBzdGF0cztcbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4ob25TdWNjLCBvbkVycik7XG4gICAgfTtcbiAgfSxcblxuICBzaGltU2VuZGVyR2V0U3RhdHM6IGZ1bmN0aW9uKHdpbmRvdykge1xuICAgIGlmICghKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnICYmIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbiAmJlxuICAgICAgICB3aW5kb3cuUlRDUnRwU2VuZGVyKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAod2luZG93LlJUQ1J0cFNlbmRlciAmJiAnZ2V0U3RhdHMnIGluIHdpbmRvdy5SVENSdHBTZW5kZXIucHJvdG90eXBlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBvcmlnR2V0U2VuZGVycyA9IHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0U2VuZGVycztcbiAgICBpZiAob3JpZ0dldFNlbmRlcnMpIHtcbiAgICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0U2VuZGVycyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgcGMgPSB0aGlzO1xuICAgICAgICB2YXIgc2VuZGVycyA9IG9yaWdHZXRTZW5kZXJzLmFwcGx5KHBjLCBbXSk7XG4gICAgICAgIHNlbmRlcnMuZm9yRWFjaChmdW5jdGlvbihzZW5kZXIpIHtcbiAgICAgICAgICBzZW5kZXIuX3BjID0gcGM7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gc2VuZGVycztcbiAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIG9yaWdBZGRUcmFjayA9IHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuYWRkVHJhY2s7XG4gICAgaWYgKG9yaWdBZGRUcmFjaykge1xuICAgICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRUcmFjayA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgc2VuZGVyID0gb3JpZ0FkZFRyYWNrLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIHNlbmRlci5fcGMgPSB0aGlzO1xuICAgICAgICByZXR1cm4gc2VuZGVyO1xuICAgICAgfTtcbiAgICB9XG4gICAgd2luZG93LlJUQ1J0cFNlbmRlci5wcm90b3R5cGUuZ2V0U3RhdHMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnRyYWNrID8gdGhpcy5fcGMuZ2V0U3RhdHModGhpcy50cmFjaykgOlxuICAgICAgICAgIFByb21pc2UucmVzb2x2ZShuZXcgTWFwKCkpO1xuICAgIH07XG4gIH0sXG5cbiAgc2hpbVJlY2VpdmVyR2V0U3RhdHM6IGZ1bmN0aW9uKHdpbmRvdykge1xuICAgIGlmICghKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnICYmIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbiAmJlxuICAgICAgICB3aW5kb3cuUlRDUnRwU2VuZGVyKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAod2luZG93LlJUQ1J0cFNlbmRlciAmJiAnZ2V0U3RhdHMnIGluIHdpbmRvdy5SVENSdHBSZWNlaXZlci5wcm90b3R5cGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIG9yaWdHZXRSZWNlaXZlcnMgPSB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmdldFJlY2VpdmVycztcbiAgICBpZiAob3JpZ0dldFJlY2VpdmVycykge1xuICAgICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5nZXRSZWNlaXZlcnMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHBjID0gdGhpcztcbiAgICAgICAgdmFyIHJlY2VpdmVycyA9IG9yaWdHZXRSZWNlaXZlcnMuYXBwbHkocGMsIFtdKTtcbiAgICAgICAgcmVjZWl2ZXJzLmZvckVhY2goZnVuY3Rpb24ocmVjZWl2ZXIpIHtcbiAgICAgICAgICByZWNlaXZlci5fcGMgPSBwYztcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiByZWNlaXZlcnM7XG4gICAgICB9O1xuICAgIH1cbiAgICB1dGlscy53cmFwUGVlckNvbm5lY3Rpb25FdmVudCh3aW5kb3csICd0cmFjaycsIGZ1bmN0aW9uKGUpIHtcbiAgICAgIGUucmVjZWl2ZXIuX3BjID0gZS5zcmNFbGVtZW50O1xuICAgICAgcmV0dXJuIGU7XG4gICAgfSk7XG4gICAgd2luZG93LlJUQ1J0cFJlY2VpdmVyLnByb3RvdHlwZS5nZXRTdGF0cyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3BjLmdldFN0YXRzKHRoaXMudHJhY2spO1xuICAgIH07XG4gIH0sXG5cbiAgc2hpbVJlbW92ZVN0cmVhbTogZnVuY3Rpb24od2luZG93KSB7XG4gICAgaWYgKCF3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24gfHxcbiAgICAgICAgJ3JlbW92ZVN0cmVhbScgaW4gd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLnJlbW92ZVN0cmVhbSA9IGZ1bmN0aW9uKHN0cmVhbSkge1xuICAgICAgdmFyIHBjID0gdGhpcztcbiAgICAgIHV0aWxzLmRlcHJlY2F0ZWQoJ3JlbW92ZVN0cmVhbScsICdyZW1vdmVUcmFjaycpO1xuICAgICAgdGhpcy5nZXRTZW5kZXJzKCkuZm9yRWFjaChmdW5jdGlvbihzZW5kZXIpIHtcbiAgICAgICAgaWYgKHNlbmRlci50cmFjayAmJiBzdHJlYW0uZ2V0VHJhY2tzKCkuaW5kZXhPZihzZW5kZXIudHJhY2spICE9PSAtMSkge1xuICAgICAgICAgIHBjLnJlbW92ZVRyYWNrKHNlbmRlcik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG4gIH0sXG5cbiAgc2hpbVJUQ0RhdGFDaGFubmVsOiBmdW5jdGlvbih3aW5kb3cpIHtcbiAgICAvLyByZW5hbWUgRGF0YUNoYW5uZWwgdG8gUlRDRGF0YUNoYW5uZWwgKG5hdGl2ZSBmaXggaW4gRkY2MCk6XG4gICAgLy8gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTE3Mzg1MVxuICAgIGlmICh3aW5kb3cuRGF0YUNoYW5uZWwgJiYgIXdpbmRvdy5SVENEYXRhQ2hhbm5lbCkge1xuICAgICAgd2luZG93LlJUQ0RhdGFDaGFubmVsID0gd2luZG93LkRhdGFDaGFubmVsO1xuICAgIH1cbiAgfSxcblxuICBzaGltR2V0RGlzcGxheU1lZGlhOiBmdW5jdGlvbih3aW5kb3csIHByZWZlcnJlZE1lZGlhU291cmNlKSB7XG4gICAgaWYgKCF3aW5kb3cubmF2aWdhdG9yIHx8ICF3aW5kb3cubmF2aWdhdG9yLm1lZGlhRGV2aWNlcyB8fFxuICAgICAgICAnZ2V0RGlzcGxheU1lZGlhJyBpbiB3aW5kb3cubmF2aWdhdG9yLm1lZGlhRGV2aWNlcykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB3aW5kb3cubmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXREaXNwbGF5TWVkaWEgPSBmdW5jdGlvbihjb25zdHJhaW50cykge1xuICAgICAgaWYgKCEoY29uc3RyYWludHMgJiYgY29uc3RyYWludHMudmlkZW8pKSB7XG4gICAgICAgIHZhciBlcnIgPSBuZXcgRE9NRXhjZXB0aW9uKCdnZXREaXNwbGF5TWVkaWEgd2l0aG91dCB2aWRlbyAnICtcbiAgICAgICAgICAgICdjb25zdHJhaW50cyBpcyB1bmRlZmluZWQnKTtcbiAgICAgICAgZXJyLm5hbWUgPSAnTm90Rm91bmRFcnJvcic7XG4gICAgICAgIC8vIGZyb20gaHR0cHM6Ly9oZXljYW0uZ2l0aHViLmlvL3dlYmlkbC8jaWRsLURPTUV4Y2VwdGlvbi1lcnJvci1uYW1lc1xuICAgICAgICBlcnIuY29kZSA9IDg7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnIpO1xuICAgICAgfVxuICAgICAgaWYgKGNvbnN0cmFpbnRzLnZpZGVvID09PSB0cnVlKSB7XG4gICAgICAgIGNvbnN0cmFpbnRzLnZpZGVvID0ge21lZGlhU291cmNlOiBwcmVmZXJyZWRNZWRpYVNvdXJjZX07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdHJhaW50cy52aWRlby5tZWRpYVNvdXJjZSA9IHByZWZlcnJlZE1lZGlhU291cmNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdpbmRvdy5uYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYShjb25zdHJhaW50cyk7XG4gICAgfTtcbiAgICB3aW5kb3cubmF2aWdhdG9yLmdldERpc3BsYXlNZWRpYSA9IGZ1bmN0aW9uKGNvbnN0cmFpbnRzKSB7XG4gICAgICB1dGlscy5kZXByZWNhdGVkKCduYXZpZ2F0b3IuZ2V0RGlzcGxheU1lZGlhJyxcbiAgICAgICAgICAnbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXREaXNwbGF5TWVkaWEnKTtcbiAgICAgIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXREaXNwbGF5TWVkaWEoY29uc3RyYWludHMpO1xuICAgIH07XG4gIH1cbn07XG4iLCIvKlxuICogIENvcHlyaWdodCAoYykgMjAxNiBUaGUgV2ViUlRDIHByb2plY3QgYXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiAgVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYSBCU0Qtc3R5bGUgbGljZW5zZVxuICogIHRoYXQgY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3Qgb2YgdGhlIHNvdXJjZVxuICogIHRyZWUuXG4gKi9cbiAvKiBlc2xpbnQtZW52IG5vZGUgKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBsb2dnaW5nID0gdXRpbHMubG9nO1xuXG4vLyBFeHBvc2UgcHVibGljIG1ldGhvZHMuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHdpbmRvdykge1xuICB2YXIgYnJvd3NlckRldGFpbHMgPSB1dGlscy5kZXRlY3RCcm93c2VyKHdpbmRvdyk7XG4gIHZhciBuYXZpZ2F0b3IgPSB3aW5kb3cgJiYgd2luZG93Lm5hdmlnYXRvcjtcbiAgdmFyIE1lZGlhU3RyZWFtVHJhY2sgPSB3aW5kb3cgJiYgd2luZG93Lk1lZGlhU3RyZWFtVHJhY2s7XG5cbiAgdmFyIHNoaW1FcnJvcl8gPSBmdW5jdGlvbihlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IHtcbiAgICAgICAgSW50ZXJuYWxFcnJvcjogJ05vdFJlYWRhYmxlRXJyb3InLFxuICAgICAgICBOb3RTdXBwb3J0ZWRFcnJvcjogJ1R5cGVFcnJvcicsXG4gICAgICAgIFBlcm1pc3Npb25EZW5pZWRFcnJvcjogJ05vdEFsbG93ZWRFcnJvcicsXG4gICAgICAgIFNlY3VyaXR5RXJyb3I6ICdOb3RBbGxvd2VkRXJyb3InXG4gICAgICB9W2UubmFtZV0gfHwgZS5uYW1lLFxuICAgICAgbWVzc2FnZToge1xuICAgICAgICAnVGhlIG9wZXJhdGlvbiBpcyBpbnNlY3VyZS4nOiAnVGhlIHJlcXVlc3QgaXMgbm90IGFsbG93ZWQgYnkgdGhlICcgK1xuICAgICAgICAndXNlciBhZ2VudCBvciB0aGUgcGxhdGZvcm0gaW4gdGhlIGN1cnJlbnQgY29udGV4dC4nXG4gICAgICB9W2UubWVzc2FnZV0gfHwgZS5tZXNzYWdlLFxuICAgICAgY29uc3RyYWludDogZS5jb25zdHJhaW50LFxuICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5uYW1lICsgKHRoaXMubWVzc2FnZSAmJiAnOiAnKSArIHRoaXMubWVzc2FnZTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIC8vIGdldFVzZXJNZWRpYSBjb25zdHJhaW50cyBzaGltLlxuICB2YXIgZ2V0VXNlck1lZGlhXyA9IGZ1bmN0aW9uKGNvbnN0cmFpbnRzLCBvblN1Y2Nlc3MsIG9uRXJyb3IpIHtcbiAgICB2YXIgY29uc3RyYWludHNUb0ZGMzdfID0gZnVuY3Rpb24oYykge1xuICAgICAgaWYgKHR5cGVvZiBjICE9PSAnb2JqZWN0JyB8fCBjLnJlcXVpcmUpIHtcbiAgICAgICAgcmV0dXJuIGM7XG4gICAgICB9XG4gICAgICB2YXIgcmVxdWlyZSA9IFtdO1xuICAgICAgT2JqZWN0LmtleXMoYykuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgaWYgKGtleSA9PT0gJ3JlcXVpcmUnIHx8IGtleSA9PT0gJ2FkdmFuY2VkJyB8fCBrZXkgPT09ICdtZWRpYVNvdXJjZScpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHIgPSBjW2tleV0gPSAodHlwZW9mIGNba2V5XSA9PT0gJ29iamVjdCcpID9cbiAgICAgICAgICAgIGNba2V5XSA6IHtpZGVhbDogY1trZXldfTtcbiAgICAgICAgaWYgKHIubWluICE9PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgIHIubWF4ICE9PSB1bmRlZmluZWQgfHwgci5leGFjdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmVxdWlyZS5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHIuZXhhY3QgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmICh0eXBlb2Ygci5leGFjdCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHIuIG1pbiA9IHIubWF4ID0gci5leGFjdDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY1trZXldID0gci5leGFjdDtcbiAgICAgICAgICB9XG4gICAgICAgICAgZGVsZXRlIHIuZXhhY3Q7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHIuaWRlYWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGMuYWR2YW5jZWQgPSBjLmFkdmFuY2VkIHx8IFtdO1xuICAgICAgICAgIHZhciBvYyA9IHt9O1xuICAgICAgICAgIGlmICh0eXBlb2Ygci5pZGVhbCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIG9jW2tleV0gPSB7bWluOiByLmlkZWFsLCBtYXg6IHIuaWRlYWx9O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvY1trZXldID0gci5pZGVhbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgYy5hZHZhbmNlZC5wdXNoKG9jKTtcbiAgICAgICAgICBkZWxldGUgci5pZGVhbDtcbiAgICAgICAgICBpZiAoIU9iamVjdC5rZXlzKHIpLmxlbmd0aCkge1xuICAgICAgICAgICAgZGVsZXRlIGNba2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaWYgKHJlcXVpcmUubGVuZ3RoKSB7XG4gICAgICAgIGMucmVxdWlyZSA9IHJlcXVpcmU7XG4gICAgICB9XG4gICAgICByZXR1cm4gYztcbiAgICB9O1xuICAgIGNvbnN0cmFpbnRzID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShjb25zdHJhaW50cykpO1xuICAgIGlmIChicm93c2VyRGV0YWlscy52ZXJzaW9uIDwgMzgpIHtcbiAgICAgIGxvZ2dpbmcoJ3NwZWM6ICcgKyBKU09OLnN0cmluZ2lmeShjb25zdHJhaW50cykpO1xuICAgICAgaWYgKGNvbnN0cmFpbnRzLmF1ZGlvKSB7XG4gICAgICAgIGNvbnN0cmFpbnRzLmF1ZGlvID0gY29uc3RyYWludHNUb0ZGMzdfKGNvbnN0cmFpbnRzLmF1ZGlvKTtcbiAgICAgIH1cbiAgICAgIGlmIChjb25zdHJhaW50cy52aWRlbykge1xuICAgICAgICBjb25zdHJhaW50cy52aWRlbyA9IGNvbnN0cmFpbnRzVG9GRjM3Xyhjb25zdHJhaW50cy52aWRlbyk7XG4gICAgICB9XG4gICAgICBsb2dnaW5nKCdmZjM3OiAnICsgSlNPTi5zdHJpbmdpZnkoY29uc3RyYWludHMpKTtcbiAgICB9XG4gICAgcmV0dXJuIG5hdmlnYXRvci5tb3pHZXRVc2VyTWVkaWEoY29uc3RyYWludHMsIG9uU3VjY2VzcywgZnVuY3Rpb24oZSkge1xuICAgICAgb25FcnJvcihzaGltRXJyb3JfKGUpKTtcbiAgICB9KTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIHRoZSByZXN1bHQgb2YgZ2V0VXNlck1lZGlhIGFzIGEgUHJvbWlzZS5cbiAgdmFyIGdldFVzZXJNZWRpYVByb21pc2VfID0gZnVuY3Rpb24oY29uc3RyYWludHMpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBnZXRVc2VyTWVkaWFfKGNvbnN0cmFpbnRzLCByZXNvbHZlLCByZWplY3QpO1xuICAgIH0pO1xuICB9O1xuXG4gIC8vIFNoaW0gZm9yIG1lZGlhRGV2aWNlcyBvbiBvbGRlciB2ZXJzaW9ucy5cbiAgaWYgKCFuYXZpZ2F0b3IubWVkaWFEZXZpY2VzKSB7XG4gICAgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcyA9IHtnZXRVc2VyTWVkaWE6IGdldFVzZXJNZWRpYVByb21pc2VfLFxuICAgICAgYWRkRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24oKSB7IH0sXG4gICAgICByZW1vdmVFdmVudExpc3RlbmVyOiBmdW5jdGlvbigpIHsgfVxuICAgIH07XG4gIH1cbiAgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5lbnVtZXJhdGVEZXZpY2VzID1cbiAgICAgIG5hdmlnYXRvci5tZWRpYURldmljZXMuZW51bWVyYXRlRGV2aWNlcyB8fCBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUpIHtcbiAgICAgICAgICB2YXIgaW5mb3MgPSBbXG4gICAgICAgICAgICB7a2luZDogJ2F1ZGlvaW5wdXQnLCBkZXZpY2VJZDogJ2RlZmF1bHQnLCBsYWJlbDogJycsIGdyb3VwSWQ6ICcnfSxcbiAgICAgICAgICAgIHtraW5kOiAndmlkZW9pbnB1dCcsIGRldmljZUlkOiAnZGVmYXVsdCcsIGxhYmVsOiAnJywgZ3JvdXBJZDogJyd9XG4gICAgICAgICAgXTtcbiAgICAgICAgICByZXNvbHZlKGluZm9zKTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuXG4gIGlmIChicm93c2VyRGV0YWlscy52ZXJzaW9uIDwgNDEpIHtcbiAgICAvLyBXb3JrIGFyb3VuZCBodHRwOi8vYnVnemlsLmxhLzExNjk2NjVcbiAgICB2YXIgb3JnRW51bWVyYXRlRGV2aWNlcyA9XG4gICAgICAgIG5hdmlnYXRvci5tZWRpYURldmljZXMuZW51bWVyYXRlRGV2aWNlcy5iaW5kKG5hdmlnYXRvci5tZWRpYURldmljZXMpO1xuICAgIG5hdmlnYXRvci5tZWRpYURldmljZXMuZW51bWVyYXRlRGV2aWNlcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIG9yZ0VudW1lcmF0ZURldmljZXMoKS50aGVuKHVuZGVmaW5lZCwgZnVuY3Rpb24oZSkge1xuICAgICAgICBpZiAoZS5uYW1lID09PSAnTm90Rm91bmRFcnJvcicpIHtcbiAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH0pO1xuICAgIH07XG4gIH1cbiAgaWYgKGJyb3dzZXJEZXRhaWxzLnZlcnNpb24gPCA0OSkge1xuICAgIHZhciBvcmlnR2V0VXNlck1lZGlhID0gbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEuXG4gICAgICAgIGJpbmQobmF2aWdhdG9yLm1lZGlhRGV2aWNlcyk7XG4gICAgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEgPSBmdW5jdGlvbihjKSB7XG4gICAgICByZXR1cm4gb3JpZ0dldFVzZXJNZWRpYShjKS50aGVuKGZ1bmN0aW9uKHN0cmVhbSkge1xuICAgICAgICAvLyBXb3JrIGFyb3VuZCBodHRwczovL2J1Z3ppbC5sYS84MDIzMjZcbiAgICAgICAgaWYgKGMuYXVkaW8gJiYgIXN0cmVhbS5nZXRBdWRpb1RyYWNrcygpLmxlbmd0aCB8fFxuICAgICAgICAgICAgYy52aWRlbyAmJiAhc3RyZWFtLmdldFZpZGVvVHJhY2tzKCkubGVuZ3RoKSB7XG4gICAgICAgICAgc3RyZWFtLmdldFRyYWNrcygpLmZvckVhY2goZnVuY3Rpb24odHJhY2spIHtcbiAgICAgICAgICAgIHRyYWNrLnN0b3AoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKCdUaGUgb2JqZWN0IGNhbiBub3QgYmUgZm91bmQgaGVyZS4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ05vdEZvdW5kRXJyb3InKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RyZWFtO1xuICAgICAgfSwgZnVuY3Rpb24oZSkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3Qoc2hpbUVycm9yXyhlKSk7XG4gICAgICB9KTtcbiAgICB9O1xuICB9XG4gIGlmICghKGJyb3dzZXJEZXRhaWxzLnZlcnNpb24gPiA1NSAmJlxuICAgICAgJ2F1dG9HYWluQ29udHJvbCcgaW4gbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRTdXBwb3J0ZWRDb25zdHJhaW50cygpKSkge1xuICAgIHZhciByZW1hcCA9IGZ1bmN0aW9uKG9iaiwgYSwgYikge1xuICAgICAgaWYgKGEgaW4gb2JqICYmICEoYiBpbiBvYmopKSB7XG4gICAgICAgIG9ialtiXSA9IG9ialthXTtcbiAgICAgICAgZGVsZXRlIG9ialthXTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIG5hdGl2ZUdldFVzZXJNZWRpYSA9IG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhLlxuICAgICAgICBiaW5kKG5hdmlnYXRvci5tZWRpYURldmljZXMpO1xuICAgIG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhID0gZnVuY3Rpb24oYykge1xuICAgICAgaWYgKHR5cGVvZiBjID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgYy5hdWRpbyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgYyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoYykpO1xuICAgICAgICByZW1hcChjLmF1ZGlvLCAnYXV0b0dhaW5Db250cm9sJywgJ21vekF1dG9HYWluQ29udHJvbCcpO1xuICAgICAgICByZW1hcChjLmF1ZGlvLCAnbm9pc2VTdXBwcmVzc2lvbicsICdtb3pOb2lzZVN1cHByZXNzaW9uJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmF0aXZlR2V0VXNlck1lZGlhKGMpO1xuICAgIH07XG5cbiAgICBpZiAoTWVkaWFTdHJlYW1UcmFjayAmJiBNZWRpYVN0cmVhbVRyYWNrLnByb3RvdHlwZS5nZXRTZXR0aW5ncykge1xuICAgICAgdmFyIG5hdGl2ZUdldFNldHRpbmdzID0gTWVkaWFTdHJlYW1UcmFjay5wcm90b3R5cGUuZ2V0U2V0dGluZ3M7XG4gICAgICBNZWRpYVN0cmVhbVRyYWNrLnByb3RvdHlwZS5nZXRTZXR0aW5ncyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgb2JqID0gbmF0aXZlR2V0U2V0dGluZ3MuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgcmVtYXAob2JqLCAnbW96QXV0b0dhaW5Db250cm9sJywgJ2F1dG9HYWluQ29udHJvbCcpO1xuICAgICAgICByZW1hcChvYmosICdtb3pOb2lzZVN1cHByZXNzaW9uJywgJ25vaXNlU3VwcHJlc3Npb24nKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKE1lZGlhU3RyZWFtVHJhY2sgJiYgTWVkaWFTdHJlYW1UcmFjay5wcm90b3R5cGUuYXBwbHlDb25zdHJhaW50cykge1xuICAgICAgdmFyIG5hdGl2ZUFwcGx5Q29uc3RyYWludHMgPSBNZWRpYVN0cmVhbVRyYWNrLnByb3RvdHlwZS5hcHBseUNvbnN0cmFpbnRzO1xuICAgICAgTWVkaWFTdHJlYW1UcmFjay5wcm90b3R5cGUuYXBwbHlDb25zdHJhaW50cyA9IGZ1bmN0aW9uKGMpIHtcbiAgICAgICAgaWYgKHRoaXMua2luZCA9PT0gJ2F1ZGlvJyAmJiB0eXBlb2YgYyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICBjID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShjKSk7XG4gICAgICAgICAgcmVtYXAoYywgJ2F1dG9HYWluQ29udHJvbCcsICdtb3pBdXRvR2FpbkNvbnRyb2wnKTtcbiAgICAgICAgICByZW1hcChjLCAnbm9pc2VTdXBwcmVzc2lvbicsICdtb3pOb2lzZVN1cHByZXNzaW9uJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5hdGl2ZUFwcGx5Q29uc3RyYWludHMuYXBwbHkodGhpcywgW2NdKTtcbiAgICAgIH07XG4gICAgfVxuICB9XG4gIG5hdmlnYXRvci5nZXRVc2VyTWVkaWEgPSBmdW5jdGlvbihjb25zdHJhaW50cywgb25TdWNjZXNzLCBvbkVycm9yKSB7XG4gICAgaWYgKGJyb3dzZXJEZXRhaWxzLnZlcnNpb24gPCA0NCkge1xuICAgICAgcmV0dXJuIGdldFVzZXJNZWRpYV8oY29uc3RyYWludHMsIG9uU3VjY2Vzcywgb25FcnJvcik7XG4gICAgfVxuICAgIC8vIFJlcGxhY2UgRmlyZWZveCA0NCsncyBkZXByZWNhdGlvbiB3YXJuaW5nIHdpdGggdW5wcmVmaXhlZCB2ZXJzaW9uLlxuICAgIHV0aWxzLmRlcHJlY2F0ZWQoJ25hdmlnYXRvci5nZXRVc2VyTWVkaWEnLFxuICAgICAgICAnbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEnKTtcbiAgICBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYShjb25zdHJhaW50cykudGhlbihvblN1Y2Nlc3MsIG9uRXJyb3IpO1xuICB9O1xufTtcbiIsIi8qXG4gKiAgQ29weXJpZ2h0IChjKSAyMDE2IFRoZSBXZWJSVEMgcHJvamVjdCBhdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqICBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhIEJTRC1zdHlsZSBsaWNlbnNlXG4gKiAgdGhhdCBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBvZiB0aGUgc291cmNlXG4gKiAgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNoaW1Mb2NhbFN0cmVhbXNBUEk6IGZ1bmN0aW9uKHdpbmRvdykge1xuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAnb2JqZWN0JyB8fCAhd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghKCdnZXRMb2NhbFN0cmVhbXMnIGluIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUpKSB7XG4gICAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmdldExvY2FsU3RyZWFtcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoIXRoaXMuX2xvY2FsU3RyZWFtcykge1xuICAgICAgICAgIHRoaXMuX2xvY2FsU3RyZWFtcyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9sb2NhbFN0cmVhbXM7XG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAoISgnZ2V0U3RyZWFtQnlJZCcgaW4gd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZSkpIHtcbiAgICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0U3RyZWFtQnlJZCA9IGZ1bmN0aW9uKGlkKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBudWxsO1xuICAgICAgICBpZiAodGhpcy5fbG9jYWxTdHJlYW1zKSB7XG4gICAgICAgICAgdGhpcy5fbG9jYWxTdHJlYW1zLmZvckVhY2goZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgICAgICAgICBpZiAoc3RyZWFtLmlkID09PSBpZCkge1xuICAgICAgICAgICAgICByZXN1bHQgPSBzdHJlYW07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3JlbW90ZVN0cmVhbXMpIHtcbiAgICAgICAgICB0aGlzLl9yZW1vdGVTdHJlYW1zLmZvckVhY2goZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgICAgICAgICBpZiAoc3RyZWFtLmlkID09PSBpZCkge1xuICAgICAgICAgICAgICByZXN1bHQgPSBzdHJlYW07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfVxuICAgIGlmICghKCdhZGRTdHJlYW0nIGluIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUpKSB7XG4gICAgICB2YXIgX2FkZFRyYWNrID0gd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRUcmFjaztcbiAgICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuYWRkU3RyZWFtID0gZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgICAgIGlmICghdGhpcy5fbG9jYWxTdHJlYW1zKSB7XG4gICAgICAgICAgdGhpcy5fbG9jYWxTdHJlYW1zID0gW107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2xvY2FsU3RyZWFtcy5pbmRleE9mKHN0cmVhbSkgPT09IC0xKSB7XG4gICAgICAgICAgdGhpcy5fbG9jYWxTdHJlYW1zLnB1c2goc3RyZWFtKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcGMgPSB0aGlzO1xuICAgICAgICBzdHJlYW0uZ2V0VHJhY2tzKCkuZm9yRWFjaChmdW5jdGlvbih0cmFjaykge1xuICAgICAgICAgIF9hZGRUcmFjay5jYWxsKHBjLCB0cmFjaywgc3RyZWFtKTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuXG4gICAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmFkZFRyYWNrID0gZnVuY3Rpb24odHJhY2ssIHN0cmVhbSkge1xuICAgICAgICBpZiAoc3RyZWFtKSB7XG4gICAgICAgICAgaWYgKCF0aGlzLl9sb2NhbFN0cmVhbXMpIHtcbiAgICAgICAgICAgIHRoaXMuX2xvY2FsU3RyZWFtcyA9IFtzdHJlYW1dO1xuICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5fbG9jYWxTdHJlYW1zLmluZGV4T2Yoc3RyZWFtKSA9PT0gLTEpIHtcbiAgICAgICAgICAgIHRoaXMuX2xvY2FsU3RyZWFtcy5wdXNoKHN0cmVhbSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfYWRkVHJhY2suY2FsbCh0aGlzLCB0cmFjaywgc3RyZWFtKTtcbiAgICAgIH07XG4gICAgfVxuICAgIGlmICghKCdyZW1vdmVTdHJlYW0nIGluIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUpKSB7XG4gICAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLnJlbW92ZVN0cmVhbSA9IGZ1bmN0aW9uKHN0cmVhbSkge1xuICAgICAgICBpZiAoIXRoaXMuX2xvY2FsU3RyZWFtcykge1xuICAgICAgICAgIHRoaXMuX2xvY2FsU3RyZWFtcyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpbmRleCA9IHRoaXMuX2xvY2FsU3RyZWFtcy5pbmRleE9mKHN0cmVhbSk7XG4gICAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbG9jYWxTdHJlYW1zLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIHZhciBwYyA9IHRoaXM7XG4gICAgICAgIHZhciB0cmFja3MgPSBzdHJlYW0uZ2V0VHJhY2tzKCk7XG4gICAgICAgIHRoaXMuZ2V0U2VuZGVycygpLmZvckVhY2goZnVuY3Rpb24oc2VuZGVyKSB7XG4gICAgICAgICAgaWYgKHRyYWNrcy5pbmRleE9mKHNlbmRlci50cmFjaykgIT09IC0xKSB7XG4gICAgICAgICAgICBwYy5yZW1vdmVUcmFjayhzZW5kZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH1cbiAgfSxcbiAgc2hpbVJlbW90ZVN0cmVhbXNBUEk6IGZ1bmN0aW9uKHdpbmRvdykge1xuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAnb2JqZWN0JyB8fCAhd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghKCdnZXRSZW1vdGVTdHJlYW1zJyBpbiB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlKSkge1xuICAgICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5nZXRSZW1vdGVTdHJlYW1zID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZW1vdGVTdHJlYW1zID8gdGhpcy5fcmVtb3RlU3RyZWFtcyA6IFtdO1xuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKCEoJ29uYWRkc3RyZWFtJyBpbiB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlKSkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUsICdvbmFkZHN0cmVhbScsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5fb25hZGRzdHJlYW07XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24oZikge1xuICAgICAgICAgIGlmICh0aGlzLl9vbmFkZHN0cmVhbSkge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCdhZGRzdHJlYW0nLCB0aGlzLl9vbmFkZHN0cmVhbSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcignYWRkc3RyZWFtJywgdGhpcy5fb25hZGRzdHJlYW0gPSBmKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICB2YXIgb3JpZ1NldFJlbW90ZURlc2NyaXB0aW9uID1cbiAgICAgICAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLnNldFJlbW90ZURlc2NyaXB0aW9uO1xuICAgICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5zZXRSZW1vdGVEZXNjcmlwdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgcGMgPSB0aGlzO1xuICAgICAgICBpZiAoIXRoaXMuX29uYWRkc3RyZWFtcG9seSkge1xuICAgICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcigndHJhY2snLCB0aGlzLl9vbmFkZHN0cmVhbXBvbHkgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBlLnN0cmVhbXMuZm9yRWFjaChmdW5jdGlvbihzdHJlYW0pIHtcbiAgICAgICAgICAgICAgaWYgKCFwYy5fcmVtb3RlU3RyZWFtcykge1xuICAgICAgICAgICAgICAgIHBjLl9yZW1vdGVTdHJlYW1zID0gW107XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKHBjLl9yZW1vdGVTdHJlYW1zLmluZGV4T2Yoc3RyZWFtKSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHBjLl9yZW1vdGVTdHJlYW1zLnB1c2goc3RyZWFtKTtcbiAgICAgICAgICAgICAgdmFyIGV2ZW50ID0gbmV3IEV2ZW50KCdhZGRzdHJlYW0nKTtcbiAgICAgICAgICAgICAgZXZlbnQuc3RyZWFtID0gc3RyZWFtO1xuICAgICAgICAgICAgICBwYy5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvcmlnU2V0UmVtb3RlRGVzY3JpcHRpb24uYXBwbHkocGMsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgIH1cbiAgfSxcbiAgc2hpbUNhbGxiYWNrc0FQSTogZnVuY3Rpb24od2luZG93KSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICdvYmplY3QnIHx8ICF3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHByb3RvdHlwZSA9IHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGU7XG4gICAgdmFyIGNyZWF0ZU9mZmVyID0gcHJvdG90eXBlLmNyZWF0ZU9mZmVyO1xuICAgIHZhciBjcmVhdGVBbnN3ZXIgPSBwcm90b3R5cGUuY3JlYXRlQW5zd2VyO1xuICAgIHZhciBzZXRMb2NhbERlc2NyaXB0aW9uID0gcHJvdG90eXBlLnNldExvY2FsRGVzY3JpcHRpb247XG4gICAgdmFyIHNldFJlbW90ZURlc2NyaXB0aW9uID0gcHJvdG90eXBlLnNldFJlbW90ZURlc2NyaXB0aW9uO1xuICAgIHZhciBhZGRJY2VDYW5kaWRhdGUgPSBwcm90b3R5cGUuYWRkSWNlQ2FuZGlkYXRlO1xuXG4gICAgcHJvdG90eXBlLmNyZWF0ZU9mZmVyID0gZnVuY3Rpb24oc3VjY2Vzc0NhbGxiYWNrLCBmYWlsdXJlQ2FsbGJhY2spIHtcbiAgICAgIHZhciBvcHRpb25zID0gKGFyZ3VtZW50cy5sZW5ndGggPj0gMikgPyBhcmd1bWVudHNbMl0gOiBhcmd1bWVudHNbMF07XG4gICAgICB2YXIgcHJvbWlzZSA9IGNyZWF0ZU9mZmVyLmFwcGx5KHRoaXMsIFtvcHRpb25zXSk7XG4gICAgICBpZiAoIWZhaWx1cmVDYWxsYmFjaykge1xuICAgICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICAgIH1cbiAgICAgIHByb21pc2UudGhlbihzdWNjZXNzQ2FsbGJhY2ssIGZhaWx1cmVDYWxsYmFjayk7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfTtcblxuICAgIHByb3RvdHlwZS5jcmVhdGVBbnN3ZXIgPSBmdW5jdGlvbihzdWNjZXNzQ2FsbGJhY2ssIGZhaWx1cmVDYWxsYmFjaykge1xuICAgICAgdmFyIG9wdGlvbnMgPSAoYXJndW1lbnRzLmxlbmd0aCA+PSAyKSA/IGFyZ3VtZW50c1syXSA6IGFyZ3VtZW50c1swXTtcbiAgICAgIHZhciBwcm9taXNlID0gY3JlYXRlQW5zd2VyLmFwcGx5KHRoaXMsIFtvcHRpb25zXSk7XG4gICAgICBpZiAoIWZhaWx1cmVDYWxsYmFjaykge1xuICAgICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICAgIH1cbiAgICAgIHByb21pc2UudGhlbihzdWNjZXNzQ2FsbGJhY2ssIGZhaWx1cmVDYWxsYmFjayk7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfTtcblxuICAgIHZhciB3aXRoQ2FsbGJhY2sgPSBmdW5jdGlvbihkZXNjcmlwdGlvbiwgc3VjY2Vzc0NhbGxiYWNrLCBmYWlsdXJlQ2FsbGJhY2spIHtcbiAgICAgIHZhciBwcm9taXNlID0gc2V0TG9jYWxEZXNjcmlwdGlvbi5hcHBseSh0aGlzLCBbZGVzY3JpcHRpb25dKTtcbiAgICAgIGlmICghZmFpbHVyZUNhbGxiYWNrKSB7XG4gICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgICAgfVxuICAgICAgcHJvbWlzZS50aGVuKHN1Y2Nlc3NDYWxsYmFjaywgZmFpbHVyZUNhbGxiYWNrKTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9O1xuICAgIHByb3RvdHlwZS5zZXRMb2NhbERlc2NyaXB0aW9uID0gd2l0aENhbGxiYWNrO1xuXG4gICAgd2l0aENhbGxiYWNrID0gZnVuY3Rpb24oZGVzY3JpcHRpb24sIHN1Y2Nlc3NDYWxsYmFjaywgZmFpbHVyZUNhbGxiYWNrKSB7XG4gICAgICB2YXIgcHJvbWlzZSA9IHNldFJlbW90ZURlc2NyaXB0aW9uLmFwcGx5KHRoaXMsIFtkZXNjcmlwdGlvbl0pO1xuICAgICAgaWYgKCFmYWlsdXJlQ2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgICB9XG4gICAgICBwcm9taXNlLnRoZW4oc3VjY2Vzc0NhbGxiYWNrLCBmYWlsdXJlQ2FsbGJhY2spO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH07XG4gICAgcHJvdG90eXBlLnNldFJlbW90ZURlc2NyaXB0aW9uID0gd2l0aENhbGxiYWNrO1xuXG4gICAgd2l0aENhbGxiYWNrID0gZnVuY3Rpb24oY2FuZGlkYXRlLCBzdWNjZXNzQ2FsbGJhY2ssIGZhaWx1cmVDYWxsYmFjaykge1xuICAgICAgdmFyIHByb21pc2UgPSBhZGRJY2VDYW5kaWRhdGUuYXBwbHkodGhpcywgW2NhbmRpZGF0ZV0pO1xuICAgICAgaWYgKCFmYWlsdXJlQ2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgICB9XG4gICAgICBwcm9taXNlLnRoZW4oc3VjY2Vzc0NhbGxiYWNrLCBmYWlsdXJlQ2FsbGJhY2spO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH07XG4gICAgcHJvdG90eXBlLmFkZEljZUNhbmRpZGF0ZSA9IHdpdGhDYWxsYmFjaztcbiAgfSxcbiAgc2hpbUdldFVzZXJNZWRpYTogZnVuY3Rpb24od2luZG93KSB7XG4gICAgdmFyIG5hdmlnYXRvciA9IHdpbmRvdyAmJiB3aW5kb3cubmF2aWdhdG9yO1xuXG4gICAgaWYgKCFuYXZpZ2F0b3IuZ2V0VXNlck1lZGlhKSB7XG4gICAgICBpZiAobmF2aWdhdG9yLndlYmtpdEdldFVzZXJNZWRpYSkge1xuICAgICAgICBuYXZpZ2F0b3IuZ2V0VXNlck1lZGlhID0gbmF2aWdhdG9yLndlYmtpdEdldFVzZXJNZWRpYS5iaW5kKG5hdmlnYXRvcik7XG4gICAgICB9IGVsc2UgaWYgKG5hdmlnYXRvci5tZWRpYURldmljZXMgJiZcbiAgICAgICAgICBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYSkge1xuICAgICAgICBuYXZpZ2F0b3IuZ2V0VXNlck1lZGlhID0gZnVuY3Rpb24oY29uc3RyYWludHMsIGNiLCBlcnJjYikge1xuICAgICAgICAgIG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKGNvbnN0cmFpbnRzKVxuICAgICAgICAgIC50aGVuKGNiLCBlcnJjYik7XG4gICAgICAgIH0uYmluZChuYXZpZ2F0b3IpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgc2hpbVJUQ0ljZVNlcnZlclVybHM6IGZ1bmN0aW9uKHdpbmRvdykge1xuICAgIC8vIG1pZ3JhdGUgZnJvbSBub24tc3BlYyBSVENJY2VTZXJ2ZXIudXJsIHRvIFJUQ0ljZVNlcnZlci51cmxzXG4gICAgdmFyIE9yaWdQZWVyQ29ubmVjdGlvbiA9IHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbjtcbiAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24gPSBmdW5jdGlvbihwY0NvbmZpZywgcGNDb25zdHJhaW50cykge1xuICAgICAgaWYgKHBjQ29uZmlnICYmIHBjQ29uZmlnLmljZVNlcnZlcnMpIHtcbiAgICAgICAgdmFyIG5ld0ljZVNlcnZlcnMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwY0NvbmZpZy5pY2VTZXJ2ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdmFyIHNlcnZlciA9IHBjQ29uZmlnLmljZVNlcnZlcnNbaV07XG4gICAgICAgICAgaWYgKCFzZXJ2ZXIuaGFzT3duUHJvcGVydHkoJ3VybHMnKSAmJlxuICAgICAgICAgICAgICBzZXJ2ZXIuaGFzT3duUHJvcGVydHkoJ3VybCcpKSB7XG4gICAgICAgICAgICB1dGlscy5kZXByZWNhdGVkKCdSVENJY2VTZXJ2ZXIudXJsJywgJ1JUQ0ljZVNlcnZlci51cmxzJyk7XG4gICAgICAgICAgICBzZXJ2ZXIgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHNlcnZlcikpO1xuICAgICAgICAgICAgc2VydmVyLnVybHMgPSBzZXJ2ZXIudXJsO1xuICAgICAgICAgICAgZGVsZXRlIHNlcnZlci51cmw7XG4gICAgICAgICAgICBuZXdJY2VTZXJ2ZXJzLnB1c2goc2VydmVyKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV3SWNlU2VydmVycy5wdXNoKHBjQ29uZmlnLmljZVNlcnZlcnNbaV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwY0NvbmZpZy5pY2VTZXJ2ZXJzID0gbmV3SWNlU2VydmVycztcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXcgT3JpZ1BlZXJDb25uZWN0aW9uKHBjQ29uZmlnLCBwY0NvbnN0cmFpbnRzKTtcbiAgICB9O1xuICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUgPSBPcmlnUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlO1xuICAgIC8vIHdyYXAgc3RhdGljIG1ldGhvZHMuIEN1cnJlbnRseSBqdXN0IGdlbmVyYXRlQ2VydGlmaWNhdGUuXG4gICAgaWYgKCdnZW5lcmF0ZUNlcnRpZmljYXRlJyBpbiB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24pIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24sICdnZW5lcmF0ZUNlcnRpZmljYXRlJywge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBPcmlnUGVlckNvbm5lY3Rpb24uZ2VuZXJhdGVDZXJ0aWZpY2F0ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9LFxuICBzaGltVHJhY2tFdmVudFRyYW5zY2VpdmVyOiBmdW5jdGlvbih3aW5kb3cpIHtcbiAgICAvLyBBZGQgZXZlbnQudHJhbnNjZWl2ZXIgbWVtYmVyIG92ZXIgZGVwcmVjYXRlZCBldmVudC5yZWNlaXZlclxuICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JyAmJiB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24gJiZcbiAgICAgICAgKCdyZWNlaXZlcicgaW4gd2luZG93LlJUQ1RyYWNrRXZlbnQucHJvdG90eXBlKSAmJlxuICAgICAgICAvLyBjYW4ndCBjaGVjayAndHJhbnNjZWl2ZXInIGluIHdpbmRvdy5SVENUcmFja0V2ZW50LnByb3RvdHlwZSwgYXMgaXQgaXNcbiAgICAgICAgLy8gZGVmaW5lZCBmb3Igc29tZSByZWFzb24gZXZlbiB3aGVuIHdpbmRvdy5SVENUcmFuc2NlaXZlciBpcyBub3QuXG4gICAgICAgICF3aW5kb3cuUlRDVHJhbnNjZWl2ZXIpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuUlRDVHJhY2tFdmVudC5wcm90b3R5cGUsICd0cmFuc2NlaXZlcicsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4ge3JlY2VpdmVyOiB0aGlzLnJlY2VpdmVyfTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9LFxuXG4gIHNoaW1DcmVhdGVPZmZlckxlZ2FjeTogZnVuY3Rpb24od2luZG93KSB7XG4gICAgdmFyIG9yaWdDcmVhdGVPZmZlciA9IHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuY3JlYXRlT2ZmZXI7XG4gICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5jcmVhdGVPZmZlciA9IGZ1bmN0aW9uKG9mZmVyT3B0aW9ucykge1xuICAgICAgdmFyIHBjID0gdGhpcztcbiAgICAgIGlmIChvZmZlck9wdGlvbnMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvZmZlck9wdGlvbnMub2ZmZXJUb1JlY2VpdmVBdWRpbyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAvLyBzdXBwb3J0IGJpdCB2YWx1ZXNcbiAgICAgICAgICBvZmZlck9wdGlvbnMub2ZmZXJUb1JlY2VpdmVBdWRpbyA9ICEhb2ZmZXJPcHRpb25zLm9mZmVyVG9SZWNlaXZlQXVkaW87XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGF1ZGlvVHJhbnNjZWl2ZXIgPSBwYy5nZXRUcmFuc2NlaXZlcnMoKS5maW5kKGZ1bmN0aW9uKHRyYW5zY2VpdmVyKSB7XG4gICAgICAgICAgcmV0dXJuIHRyYW5zY2VpdmVyLnNlbmRlci50cmFjayAmJlxuICAgICAgICAgICAgICB0cmFuc2NlaXZlci5zZW5kZXIudHJhY2sua2luZCA9PT0gJ2F1ZGlvJztcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChvZmZlck9wdGlvbnMub2ZmZXJUb1JlY2VpdmVBdWRpbyA9PT0gZmFsc2UgJiYgYXVkaW9UcmFuc2NlaXZlcikge1xuICAgICAgICAgIGlmIChhdWRpb1RyYW5zY2VpdmVyLmRpcmVjdGlvbiA9PT0gJ3NlbmRyZWN2Jykge1xuICAgICAgICAgICAgaWYgKGF1ZGlvVHJhbnNjZWl2ZXIuc2V0RGlyZWN0aW9uKSB7XG4gICAgICAgICAgICAgIGF1ZGlvVHJhbnNjZWl2ZXIuc2V0RGlyZWN0aW9uKCdzZW5kb25seScpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgYXVkaW9UcmFuc2NlaXZlci5kaXJlY3Rpb24gPSAnc2VuZG9ubHknO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoYXVkaW9UcmFuc2NlaXZlci5kaXJlY3Rpb24gPT09ICdyZWN2b25seScpIHtcbiAgICAgICAgICAgIGlmIChhdWRpb1RyYW5zY2VpdmVyLnNldERpcmVjdGlvbikge1xuICAgICAgICAgICAgICBhdWRpb1RyYW5zY2VpdmVyLnNldERpcmVjdGlvbignaW5hY3RpdmUnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGF1ZGlvVHJhbnNjZWl2ZXIuZGlyZWN0aW9uID0gJ2luYWN0aXZlJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAob2ZmZXJPcHRpb25zLm9mZmVyVG9SZWNlaXZlQXVkaW8gPT09IHRydWUgJiZcbiAgICAgICAgICAgICFhdWRpb1RyYW5zY2VpdmVyKSB7XG4gICAgICAgICAgcGMuYWRkVHJhbnNjZWl2ZXIoJ2F1ZGlvJyk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGlmICh0eXBlb2Ygb2ZmZXJPcHRpb25zLm9mZmVyVG9SZWNlaXZlVmlkZW8gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgLy8gc3VwcG9ydCBiaXQgdmFsdWVzXG4gICAgICAgICAgb2ZmZXJPcHRpb25zLm9mZmVyVG9SZWNlaXZlVmlkZW8gPSAhIW9mZmVyT3B0aW9ucy5vZmZlclRvUmVjZWl2ZVZpZGVvO1xuICAgICAgICB9XG4gICAgICAgIHZhciB2aWRlb1RyYW5zY2VpdmVyID0gcGMuZ2V0VHJhbnNjZWl2ZXJzKCkuZmluZChmdW5jdGlvbih0cmFuc2NlaXZlcikge1xuICAgICAgICAgIHJldHVybiB0cmFuc2NlaXZlci5zZW5kZXIudHJhY2sgJiZcbiAgICAgICAgICAgICAgdHJhbnNjZWl2ZXIuc2VuZGVyLnRyYWNrLmtpbmQgPT09ICd2aWRlbyc7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAob2ZmZXJPcHRpb25zLm9mZmVyVG9SZWNlaXZlVmlkZW8gPT09IGZhbHNlICYmIHZpZGVvVHJhbnNjZWl2ZXIpIHtcbiAgICAgICAgICBpZiAodmlkZW9UcmFuc2NlaXZlci5kaXJlY3Rpb24gPT09ICdzZW5kcmVjdicpIHtcbiAgICAgICAgICAgIHZpZGVvVHJhbnNjZWl2ZXIuc2V0RGlyZWN0aW9uKCdzZW5kb25seScpO1xuICAgICAgICAgIH0gZWxzZSBpZiAodmlkZW9UcmFuc2NlaXZlci5kaXJlY3Rpb24gPT09ICdyZWN2b25seScpIHtcbiAgICAgICAgICAgIHZpZGVvVHJhbnNjZWl2ZXIuc2V0RGlyZWN0aW9uKCdpbmFjdGl2ZScpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChvZmZlck9wdGlvbnMub2ZmZXJUb1JlY2VpdmVWaWRlbyA9PT0gdHJ1ZSAmJlxuICAgICAgICAgICAgIXZpZGVvVHJhbnNjZWl2ZXIpIHtcbiAgICAgICAgICBwYy5hZGRUcmFuc2NlaXZlcigndmlkZW8nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG9yaWdDcmVhdGVPZmZlci5hcHBseShwYywgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9XG59O1xuIiwiLypcbiAqICBDb3B5cmlnaHQgKGMpIDIwMTYgVGhlIFdlYlJUQyBwcm9qZWN0IGF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlIGxpY2Vuc2VcbiAqICB0aGF0IGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IG9mIHRoZSBzb3VyY2VcbiAqICB0cmVlLlxuICovXG4gLyogZXNsaW50LWVudiBub2RlICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBsb2dEaXNhYmxlZF8gPSB0cnVlO1xudmFyIGRlcHJlY2F0aW9uV2FybmluZ3NfID0gdHJ1ZTtcblxuLyoqXG4gKiBFeHRyYWN0IGJyb3dzZXIgdmVyc2lvbiBvdXQgb2YgdGhlIHByb3ZpZGVkIHVzZXIgYWdlbnQgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7IXN0cmluZ30gdWFzdHJpbmcgdXNlckFnZW50IHN0cmluZy5cbiAqIEBwYXJhbSB7IXN0cmluZ30gZXhwciBSZWd1bGFyIGV4cHJlc3Npb24gdXNlZCBhcyBtYXRjaCBjcml0ZXJpYS5cbiAqIEBwYXJhbSB7IW51bWJlcn0gcG9zIHBvc2l0aW9uIGluIHRoZSB2ZXJzaW9uIHN0cmluZyB0byBiZSByZXR1cm5lZC5cbiAqIEByZXR1cm4geyFudW1iZXJ9IGJyb3dzZXIgdmVyc2lvbi5cbiAqL1xuZnVuY3Rpb24gZXh0cmFjdFZlcnNpb24odWFzdHJpbmcsIGV4cHIsIHBvcykge1xuICB2YXIgbWF0Y2ggPSB1YXN0cmluZy5tYXRjaChleHByKTtcbiAgcmV0dXJuIG1hdGNoICYmIG1hdGNoLmxlbmd0aCA+PSBwb3MgJiYgcGFyc2VJbnQobWF0Y2hbcG9zXSwgMTApO1xufVxuXG4vLyBXcmFwcyB0aGUgcGVlcmNvbm5lY3Rpb24gZXZlbnQgZXZlbnROYW1lVG9XcmFwIGluIGEgZnVuY3Rpb25cbi8vIHdoaWNoIHJldHVybnMgdGhlIG1vZGlmaWVkIGV2ZW50IG9iamVjdCAob3IgZmFsc2UgdG8gcHJldmVudFxuLy8gdGhlIGV2ZW50KS5cbmZ1bmN0aW9uIHdyYXBQZWVyQ29ubmVjdGlvbkV2ZW50KHdpbmRvdywgZXZlbnROYW1lVG9XcmFwLCB3cmFwcGVyKSB7XG4gIGlmICghd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBwcm90byA9IHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGU7XG4gIHZhciBuYXRpdmVBZGRFdmVudExpc3RlbmVyID0gcHJvdG8uYWRkRXZlbnRMaXN0ZW5lcjtcbiAgcHJvdG8uYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKG5hdGl2ZUV2ZW50TmFtZSwgY2IpIHtcbiAgICBpZiAobmF0aXZlRXZlbnROYW1lICE9PSBldmVudE5hbWVUb1dyYXApIHtcbiAgICAgIHJldHVybiBuYXRpdmVBZGRFdmVudExpc3RlbmVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICAgIHZhciB3cmFwcGVkQ2FsbGJhY2sgPSBmdW5jdGlvbihlKSB7XG4gICAgICB2YXIgbW9kaWZpZWRFdmVudCA9IHdyYXBwZXIoZSk7XG4gICAgICBpZiAobW9kaWZpZWRFdmVudCkge1xuICAgICAgICBjYihtb2RpZmllZEV2ZW50KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHRoaXMuX2V2ZW50TWFwID0gdGhpcy5fZXZlbnRNYXAgfHwge307XG4gICAgdGhpcy5fZXZlbnRNYXBbY2JdID0gd3JhcHBlZENhbGxiYWNrO1xuICAgIHJldHVybiBuYXRpdmVBZGRFdmVudExpc3RlbmVyLmFwcGx5KHRoaXMsIFtuYXRpdmVFdmVudE5hbWUsXG4gICAgICB3cmFwcGVkQ2FsbGJhY2tdKTtcbiAgfTtcblxuICB2YXIgbmF0aXZlUmVtb3ZlRXZlbnRMaXN0ZW5lciA9IHByb3RvLnJlbW92ZUV2ZW50TGlzdGVuZXI7XG4gIHByb3RvLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbihuYXRpdmVFdmVudE5hbWUsIGNiKSB7XG4gICAgaWYgKG5hdGl2ZUV2ZW50TmFtZSAhPT0gZXZlbnROYW1lVG9XcmFwIHx8ICF0aGlzLl9ldmVudE1hcFxuICAgICAgICB8fCAhdGhpcy5fZXZlbnRNYXBbY2JdKSB7XG4gICAgICByZXR1cm4gbmF0aXZlUmVtb3ZlRXZlbnRMaXN0ZW5lci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgICB2YXIgdW53cmFwcGVkQ2IgPSB0aGlzLl9ldmVudE1hcFtjYl07XG4gICAgZGVsZXRlIHRoaXMuX2V2ZW50TWFwW2NiXTtcbiAgICByZXR1cm4gbmF0aXZlUmVtb3ZlRXZlbnRMaXN0ZW5lci5hcHBseSh0aGlzLCBbbmF0aXZlRXZlbnROYW1lLFxuICAgICAgdW53cmFwcGVkQ2JdKTtcbiAgfTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvdG8sICdvbicgKyBldmVudE5hbWVUb1dyYXAsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXNbJ19vbicgKyBldmVudE5hbWVUb1dyYXBdO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbihjYikge1xuICAgICAgaWYgKHRoaXNbJ19vbicgKyBldmVudE5hbWVUb1dyYXBdKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWVUb1dyYXAsXG4gICAgICAgICAgICB0aGlzWydfb24nICsgZXZlbnROYW1lVG9XcmFwXSk7XG4gICAgICAgIGRlbGV0ZSB0aGlzWydfb24nICsgZXZlbnROYW1lVG9XcmFwXTtcbiAgICAgIH1cbiAgICAgIGlmIChjYikge1xuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lVG9XcmFwLFxuICAgICAgICAgICAgdGhpc1snX29uJyArIGV2ZW50TmFtZVRvV3JhcF0gPSBjYik7XG4gICAgICB9XG4gICAgfSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcbn1cblxuLy8gVXRpbGl0eSBtZXRob2RzLlxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGV4dHJhY3RWZXJzaW9uOiBleHRyYWN0VmVyc2lvbixcbiAgd3JhcFBlZXJDb25uZWN0aW9uRXZlbnQ6IHdyYXBQZWVyQ29ubmVjdGlvbkV2ZW50LFxuICBkaXNhYmxlTG9nOiBmdW5jdGlvbihib29sKSB7XG4gICAgaWYgKHR5cGVvZiBib29sICE9PSAnYm9vbGVhbicpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoJ0FyZ3VtZW50IHR5cGU6ICcgKyB0eXBlb2YgYm9vbCArXG4gICAgICAgICAgJy4gUGxlYXNlIHVzZSBhIGJvb2xlYW4uJyk7XG4gICAgfVxuICAgIGxvZ0Rpc2FibGVkXyA9IGJvb2w7XG4gICAgcmV0dXJuIChib29sKSA/ICdhZGFwdGVyLmpzIGxvZ2dpbmcgZGlzYWJsZWQnIDpcbiAgICAgICAgJ2FkYXB0ZXIuanMgbG9nZ2luZyBlbmFibGVkJztcbiAgfSxcblxuICAvKipcbiAgICogRGlzYWJsZSBvciBlbmFibGUgZGVwcmVjYXRpb24gd2FybmluZ3NcbiAgICogQHBhcmFtIHshYm9vbGVhbn0gYm9vbCBzZXQgdG8gdHJ1ZSB0byBkaXNhYmxlIHdhcm5pbmdzLlxuICAgKi9cbiAgZGlzYWJsZVdhcm5pbmdzOiBmdW5jdGlvbihib29sKSB7XG4gICAgaWYgKHR5cGVvZiBib29sICE9PSAnYm9vbGVhbicpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoJ0FyZ3VtZW50IHR5cGU6ICcgKyB0eXBlb2YgYm9vbCArXG4gICAgICAgICAgJy4gUGxlYXNlIHVzZSBhIGJvb2xlYW4uJyk7XG4gICAgfVxuICAgIGRlcHJlY2F0aW9uV2FybmluZ3NfID0gIWJvb2w7XG4gICAgcmV0dXJuICdhZGFwdGVyLmpzIGRlcHJlY2F0aW9uIHdhcm5pbmdzICcgKyAoYm9vbCA/ICdkaXNhYmxlZCcgOiAnZW5hYmxlZCcpO1xuICB9LFxuXG4gIGxvZzogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSB7XG4gICAgICBpZiAobG9nRGlzYWJsZWRfKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGNvbnNvbGUubG9nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsIGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBTaG93cyBhIGRlcHJlY2F0aW9uIHdhcm5pbmcgc3VnZ2VzdGluZyB0aGUgbW9kZXJuIGFuZCBzcGVjLWNvbXBhdGlibGUgQVBJLlxuICAgKi9cbiAgZGVwcmVjYXRlZDogZnVuY3Rpb24ob2xkTWV0aG9kLCBuZXdNZXRob2QpIHtcbiAgICBpZiAoIWRlcHJlY2F0aW9uV2FybmluZ3NfKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnNvbGUud2FybihvbGRNZXRob2QgKyAnIGlzIGRlcHJlY2F0ZWQsIHBsZWFzZSB1c2UgJyArIG5ld01ldGhvZCArXG4gICAgICAgICcgaW5zdGVhZC4nKTtcbiAgfSxcblxuICAvKipcbiAgICogQnJvd3NlciBkZXRlY3Rvci5cbiAgICpcbiAgICogQHJldHVybiB7b2JqZWN0fSByZXN1bHQgY29udGFpbmluZyBicm93c2VyIGFuZCB2ZXJzaW9uXG4gICAqICAgICBwcm9wZXJ0aWVzLlxuICAgKi9cbiAgZGV0ZWN0QnJvd3NlcjogZnVuY3Rpb24od2luZG93KSB7XG4gICAgdmFyIG5hdmlnYXRvciA9IHdpbmRvdyAmJiB3aW5kb3cubmF2aWdhdG9yO1xuXG4gICAgLy8gUmV0dXJuZWQgcmVzdWx0IG9iamVjdC5cbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgcmVzdWx0LmJyb3dzZXIgPSBudWxsO1xuICAgIHJlc3VsdC52ZXJzaW9uID0gbnVsbDtcblxuICAgIC8vIEZhaWwgZWFybHkgaWYgaXQncyBub3QgYSBicm93c2VyXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnIHx8ICF3aW5kb3cubmF2aWdhdG9yKSB7XG4gICAgICByZXN1bHQuYnJvd3NlciA9ICdOb3QgYSBicm93c2VyLic7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIGlmIChuYXZpZ2F0b3IubW96R2V0VXNlck1lZGlhKSB7IC8vIEZpcmVmb3guXG4gICAgICByZXN1bHQuYnJvd3NlciA9ICdmaXJlZm94JztcbiAgICAgIHJlc3VsdC52ZXJzaW9uID0gZXh0cmFjdFZlcnNpb24obmF2aWdhdG9yLnVzZXJBZ2VudCxcbiAgICAgICAgICAvRmlyZWZveFxcLyhcXGQrKVxcLi8sIDEpO1xuICAgIH0gZWxzZSBpZiAobmF2aWdhdG9yLndlYmtpdEdldFVzZXJNZWRpYSkge1xuICAgICAgLy8gQ2hyb21lLCBDaHJvbWl1bSwgV2VidmlldywgT3BlcmEuXG4gICAgICAvLyBWZXJzaW9uIG1hdGNoZXMgQ2hyb21lL1dlYlJUQyB2ZXJzaW9uLlxuICAgICAgcmVzdWx0LmJyb3dzZXIgPSAnY2hyb21lJztcbiAgICAgIHJlc3VsdC52ZXJzaW9uID0gZXh0cmFjdFZlcnNpb24obmF2aWdhdG9yLnVzZXJBZ2VudCxcbiAgICAgICAgICAvQ2hyb20oZXxpdW0pXFwvKFxcZCspXFwuLywgMik7XG4gICAgfSBlbHNlIGlmIChuYXZpZ2F0b3IubWVkaWFEZXZpY2VzICYmXG4gICAgICAgIG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL0VkZ2VcXC8oXFxkKykuKFxcZCspJC8pKSB7IC8vIEVkZ2UuXG4gICAgICByZXN1bHQuYnJvd3NlciA9ICdlZGdlJztcbiAgICAgIHJlc3VsdC52ZXJzaW9uID0gZXh0cmFjdFZlcnNpb24obmF2aWdhdG9yLnVzZXJBZ2VudCxcbiAgICAgICAgICAvRWRnZVxcLyhcXGQrKS4oXFxkKykkLywgMik7XG4gICAgfSBlbHNlIGlmICh3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24gJiZcbiAgICAgICAgbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvQXBwbGVXZWJLaXRcXC8oXFxkKylcXC4vKSkgeyAvLyBTYWZhcmkuXG4gICAgICByZXN1bHQuYnJvd3NlciA9ICdzYWZhcmknO1xuICAgICAgcmVzdWx0LnZlcnNpb24gPSBleHRyYWN0VmVyc2lvbihuYXZpZ2F0b3IudXNlckFnZW50LFxuICAgICAgICAgIC9BcHBsZVdlYktpdFxcLyhcXGQrKVxcLi8sIDEpO1xuICAgIH0gZWxzZSB7IC8vIERlZmF1bHQgZmFsbHRocm91Z2g6IG5vdCBzdXBwb3J0ZWQuXG4gICAgICByZXN1bHQuYnJvd3NlciA9ICdOb3QgYSBzdXBwb3J0ZWQgYnJvd3Nlci4nO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59O1xuIiwiZXhwb3J0IGNvbnN0IFVOREVGSU5FRCA9ICd1bmRlZmluZWQnO1xuZXhwb3J0IGNvbnN0IERDVl9TVFJBVEVHWSAgPSAnRENWU3RyYXRlZ3knO1xuZXhwb3J0IGNvbnN0IEFVRElPID0gJ2F1ZGlvJztcbmV4cG9ydCBjb25zdCAgQU5TV0VSID0gJ2Fuc3dlcic7XG5leHBvcnQgY29uc3QgQ0hST01FID0gJ2Nocm9tZSc7IiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBMaWNlbnNlIGluZm8gZm9yIHdlYnJ0Yy1hZGFwdGVyIG1vZHVsZSBhc3NlbWJsZWQgaW50byBqcyBidW5kbGU6XG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LCBUaGUgV2ViUlRDIHByb2plY3QgYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXQgbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4gKlxuICogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbiAqXG4gKiBOZWl0aGVyIHRoZSBuYW1lIG9mIEdvb2dsZSBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnMgbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuICpcbiAqIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAqL1xuLyoqXG4gKiBAbGljZW5zZVxuICogTGljZW5zZSBpbmZvIGZvciBzZHAgbW9kdWxlIGFzc2VtYmxlZCBpbnRvIGpzIGJ1bmRsZTpcbiAqXG4gKiBTZWUgaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvc2RwXG4gKi9cbmltcG9ydCAnd2VicnRjLWFkYXB0ZXInO1xuLyoqXG4gKiBAbGljZW5zZVxuICogTGljZW5zZSBpbmZvIGZvciB1dWlkIG1vZHVsZSBhc3NlbWJsZWQgaW50byBqcyBidW5kbGU6XG4gKlxuICogVGhlIE1JVCBMaWNlbnNlIChNSVQpXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEwLTIwMTYgUm9iZXJ0IEtpZWZmZXIgYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4gKi9cbmltcG9ydCBSdGNTZXNzaW9uIGZyb20gJy4vcnRjX3Nlc3Npb24nO1xuaW1wb3J0IHtSVENfRVJST1JTfSBmcm9tICcuL3J0Y19jb25zdCc7XG5pbXBvcnQgUnRjUGVlckNvbm5lY3Rpb25GYWN0b3J5IGZyb20gJy4vcnRjX3BlZXJfY29ubmVjdGlvbl9mYWN0b3J5J1xuaW1wb3J0IHV1aWQgZnJvbSAndXVpZC92NCc7XG5pbXBvcnQgU3RhbmRhcmRTdHJhdGVneSBmcm9tIFwiLi9zdHJhdGVnaWVzL1N0YW5kYXJkU3RyYXRlZ3lcIjtcbmltcG9ydCBDaXRyaXhWRElTdHJhdGVneSBmcm9tIFwiLi9zdHJhdGVnaWVzL0NpdHJpeFZESVN0cmF0ZWd5XCI7XG5pbXBvcnQgRENWV2ViUlRDU3RyYXRlZ3kgZnJvbSBcIi4vc3RyYXRlZ2llcy9EQ1ZXZWJSVENTdHJhdGVneVwiO1xuXG5nbG9iYWwuY29ubmVjdCA9IGdsb2JhbC5jb25uZWN0IHx8IHt9O1xuZ2xvYmFsLmNvbm5lY3QuUlRDU2Vzc2lvbiA9IFJ0Y1Nlc3Npb247XG5nbG9iYWwuY29ubmVjdC5SVENFcnJvcnMgPSBSVENfRVJST1JTO1xuZ2xvYmFsLmNvbm5lY3QuUnRjUGVlckNvbm5lY3Rpb25GYWN0b3J5ID0gUnRjUGVlckNvbm5lY3Rpb25GYWN0b3J5O1xuZ2xvYmFsLmNvbm5lY3QudXVpZCA9IHV1aWQ7XG5nbG9iYWwuY29ubmVjdC5TdGFuZGFyZFN0cmF0ZWd5ID0gU3RhbmRhcmRTdHJhdGVneTtcbmdsb2JhbC5jb25uZWN0LkNpdHJpeFZESVN0cmF0ZWd5ID0gQ2l0cml4VkRJU3RyYXRlZ3k7XG5nbG9iYWwuY29ubmVjdC5EQ1ZXZWJSVENTdHJhdGVneSA9IERDVldlYlJUQ1N0cmF0ZWd5O1xuXG5nbG9iYWwubGlseSA9IGdsb2JhbC5saWx5IHx8IHt9O1xuZ2xvYmFsLmxpbHkuUlRDU2Vzc2lvbiA9IFJ0Y1Nlc3Npb247XG5nbG9iYWwubGlseS5SVENFcnJvcnMgPSBSVENfRVJST1JTO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNyBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cbmV4cG9ydCBjb25zdCBUaW1lb3V0RXhjZXB0aW9uTmFtZSA9ICdUaW1lb3V0JztcbmV4cG9ydCBjbGFzcyBUaW1lb3V0IGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1zZykge1xuICAgICAgICBzdXBlcihtc2cpO1xuICAgICAgICB0aGlzLm5hbWUgPSBUaW1lb3V0RXhjZXB0aW9uTmFtZTtcbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBHdW1UaW1lb3V0RXhjZXB0aW9uTmFtZSA9ICdHdW1UaW1lb3V0JztcbmV4cG9ydCBjbGFzcyBHdW1UaW1lb3V0IGV4dGVuZHMgVGltZW91dCB7XG4gICAgY29uc3RydWN0b3IobXNnKSB7XG4gICAgICAgIHN1cGVyKG1zZyk7XG4gICAgICAgIHRoaXMubmFtZSA9IEd1bVRpbWVvdXRFeGNlcHRpb25OYW1lO1xuICAgIH1cbn1cblxuZXhwb3J0IGNvbnN0IElsbGVnYWxQYXJhbWV0ZXJzRXhjZXB0aW9uTmFtZSA9ICdJbGxlZ2FsUGFyYW1ldGVycyc7XG5leHBvcnQgY2xhc3MgSWxsZWdhbFBhcmFtZXRlcnMgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IobXNnKSB7XG4gICAgICAgIHN1cGVyKG1zZyk7XG4gICAgICAgIHRoaXMubmFtZSA9IElsbGVnYWxQYXJhbWV0ZXJzRXhjZXB0aW9uTmFtZTtcbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBJbGxlZ2FsU3RhdGVFeGNlcHRpb25OYW1lID0gJ0lsbGVnYWxTdGF0ZSc7XG5leHBvcnQgY2xhc3MgSWxsZWdhbFN0YXRlIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1zZykge1xuICAgICAgICBzdXBlcihtc2cpO1xuICAgICAgICB0aGlzLm5hbWUgPSBJbGxlZ2FsU3RhdGVFeGNlcHRpb25OYW1lO1xuICAgIH1cbn1cblxuZXhwb3J0IGNvbnN0IFVuc3VwcG9ydGVkT3BlcmF0aW9uRXhjZXB0aW9uTmFtZSA9ICdVbnN1cHBvcnRlZE9wZXJhdGlvbic7XG5leHBvcnQgY2xhc3MgVW5zdXBwb3J0ZWRPcGVyYXRpb24gZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IobXNnKSB7XG4gICAgICAgIHN1cGVyKG1zZyk7XG4gICAgICAgIHRoaXMubmFtZSA9IFVuc3VwcG9ydGVkT3BlcmF0aW9uRXhjZXB0aW9uTmFtZTtcbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBCdXN5RXhjZXB0aW9uTmFtZSA9ICdCdXN5RXhjZXB0aW9uJztcbmV4cG9ydCBjbGFzcyBCdXN5RXhjZXB0aW9uIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1zZykge1xuICAgICAgICBzdXBlcihtc2cpO1xuICAgICAgICB0aGlzLm5hbWUgPSBCdXN5RXhjZXB0aW9uTmFtZTtcbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBDYWxsTm90Rm91bmRFeGNlcHRpb25OYW1lID0gJ0NhbGxOb3RGb3VuZEV4Y2VwdGlvbic7XG5leHBvcnQgY2xhc3MgQ2FsbE5vdEZvdW5kRXhjZXB0aW9uIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1zZykge1xuICAgICAgICBzdXBlcihtc2cpO1xuICAgICAgICB0aGlzLm5hbWUgPSBDYWxsTm90Rm91bmRFeGNlcHRpb25OYW1lO1xuICAgIH1cbn1cblxuZXhwb3J0IGNvbnN0IFVua25vd25TaWduYWxpbmdFcnJvck5hbWUgPSAnVW5rbm93blNpZ25hbGluZ0Vycm9yJztcbmV4cG9ydCBjbGFzcyBVbmtub3duU2lnbmFsaW5nRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMubmFtZSA9IFVua25vd25TaWduYWxpbmdFcnJvck5hbWU7XG4gICAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNyBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuLyoqXG4gKiBUaW1lb3V0IHdhaXRpbmcgZm9yIHNlcnZlciByZXNwb25zZSB0byBhY2NlcHQvaGFuZ3VwIHJlcXVlc3QuXG4gKi9cbmV4cG9ydCBjb25zdCBNQVhfQUNDRVBUX0JZRV9ERUxBWV9NUyA9IDIwMDA7XG4vKipcbiAqIFRpbWVvdXQgd2FpdGluZyBmb3Igc2VydmVyIHJlc3BvbnNlIHRvIGludml0ZS5cbiAqL1xuZXhwb3J0IGNvbnN0IE1BWF9JTlZJVEVfREVMQVlfTVMgPSA1MDAwO1xuLyoqXG4gKiAgRGVmYXVsdCB0aW1lb3V0IG9uIG9wZW5pbmcgV2ViU29ja2V0IGNvbm5lY3Rpb24uXG4gKi9cbmV4cG9ydCBjb25zdCBERUZBVUxUX0NPTk5FQ1RfVElNRU9VVF9NUyA9IDEwMDAwO1xuLyoqXG4gKiBEZWZhdWx0IGljZSBjb2xsZWN0aW9uIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzLlxuICovXG5leHBvcnQgY29uc3QgREVGQVVMVF9JQ0VfVElNRU9VVF9NUyA9IDgwMDA7XG4vKipcbiAqIERlZmF1bHQgZ3VtIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIHRvIGJlIGVuZm9yY2VkIGR1cmluZyBzdGFydCBvZiBhIGNhbGwuXG4gKi9cbmV4cG9ydCBjb25zdCBERUZBVUxUX0dVTV9USU1FT1VUX01TID0gMTAwMDA7XG5cbmV4cG9ydCBjb25zdCBTT0ZUUEhPTkVfUk9VVEVfS0VZID0gXCJhd3Mvc29mdHBob25lXCI7XG5cbmV4cG9ydCBjb25zdCBJTlZJVEVfTUVUSE9EX05BTUUgPSBcImludml0ZVwiO1xuZXhwb3J0IGNvbnN0IEFDQ0VQVF9NRVRIT0RfTkFNRSA9IFwiYWNjZXB0XCI7XG5leHBvcnQgY29uc3QgQllFX01FVEhPRF9OQU1FID0gXCJieWVcIjtcblxuZXhwb3J0IGNvbnN0IFJUQ19QRUVSX0NPTk5FQ1RJT05fQ09ORklHID0ge1xuICAgIGljZVRyYW5zcG9ydFBvbGljeTogJ3JlbGF5JyxcbiAgICBydGNwTXV4UG9saWN5OiAncmVxdWlyZScsXG4gICAgYnVuZGxlUG9saWN5OiAnYmFsYW5jZWQnLFxuICAgIHNkcFNlbWFudGljczogJ3VuaWZpZWQtcGxhbicsXG4gICAgZW5hYmxlRHRsc1NydHA6IHRydWVcbn07XG5cbmV4cG9ydCBjb25zdCBSVENfUEVFUl9DT05ORUNUSU9OX09QVElPTkFMX0NPTkZJRyA9IHtcbiAgICBvcHRpb25hbDogW1xuICAgICAgICB7XG4gICAgICAgICAgICBnb29nRHNjcDogdHJ1ZVxuXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIER0bHNTcnRwS2V5QWdyZWVtZW50OiB0cnVlXG4gICAgICAgIH1cbiAgICBdXG59O1xuXG5leHBvcnQgY29uc3QgREVGQVVMVF9JQ0VfQ0FORElEQVRFX1BPT0xfU0laRSA9IDE7XG5cbmV4cG9ydCBjb25zdCBSVENfUEVFUl9DT05ORUNUSU9OX0lETEVfVElNRU9VVF9NUyA9IDEqNjAqMTAwMDtcblxuZXhwb3J0IGNvbnN0IE5FVFdPUktfQ09OTkVDVElWSVRZX0NIRUNLX0lOVEVSVkFMX01TID0gMjUwO1xuXG5leHBvcnQgY29uc3QgQ0hST01FX1NVUFBPUlRFRF9WRVJTSU9OID0gNTk7XG5cbi8qKlxuICogUlRDIGVycm9yIG5hbWVzLlxuICovXG5leHBvcnQgY29uc3QgUlRDX0VSUk9SUyA9IHtcbiAgICBJQ0VfQ09MTEVDVElPTl9USU1FT1VUIDogJ0ljZSBDb2xsZWN0aW9uIFRpbWVvdXQnLFxuICAgIFVTRVJfQlVTWSA6ICdVc2VyIEJ1c3knLFxuICAgIFNJR05BTExJTkdfQ09OTkVDVElPTl9GQUlMVVJFIDogJ1NpZ25hbGxpbmcgQ29ubmVjdGlvbiBGYWlsdXJlJyxcbiAgICBTSUdOQUxMSU5HX0hBTkRTSEFLRV9GQUlMVVJFIDogJ1NpZ25hbGxpbmcgSGFuZHNoYWtlIEZhaWx1cmUnLFxuICAgIFNFVF9SRU1PVEVfREVTQ1JJUFRJT05fRkFJTFVSRSA6ICdTZXQgUmVtb3RlIERlc2NyaXB0aW9uIEZhaWx1cmUnLFxuICAgIENSRUFURV9PRkZFUl9GQUlMVVJFIDogJ0NyZWF0ZSBPZmZlciBGYWlsdXJlJyxcbiAgICBTRVRfTE9DQUxfREVTQ1JJUFRJT05fRkFJTFVSRSA6ICdTZXQgTG9jYWwgRGVzY3JpcHRpb24gRmFpbHVyZScsXG4gICAgSU5WQUxJRF9SRU1PVEVfU0RQIDogJ0ludmFsaWQgUmVtb3RlIFNEUCcsXG4gICAgTk9fUkVNT1RFX0lDRV9DQU5ESURBVEUgOiAnTm8gUmVtb3RlIElDRSBDYW5kaWRhdGUnLFxuICAgIEdVTV9USU1FT1VUX0ZBSUxVUkUgOiAnR1VNIFRpbWVvdXQgRmFpbHVyZScsXG4gICAgR1VNX09USEVSX0ZBSUxVUkUgOiAnR1VNIE90aGVyIEZhaWx1cmUnLFxuICAgIENBTExfTk9UX0ZPVU5EOiAnQ2FsbCBOb3QgRm91bmQnXG59O1xuXG5leHBvcnQgY29uc3QgSUNFX0NPTk5FQ1RJT05fU1RBVEUgPSB7XG4gICAgTkVXIDogJ25ldycsXG4gICAgQ0hFQ0tJTkcgOiAnY2hlY2tpbmcnLFxuICAgIENPTk5FQ1RFRCA6ICdjb25uZWN0ZWQnLFxuICAgIENPTVBMRVRFRCA6ICdjb21wbGV0ZWQnLFxuICAgIEZBSUxFRCA6ICdmYWlsZWQnLFxuICAgIERJU0NPTk5FQ1RFRCA6ICdkaXNjb25uZWN0ZWQnLFxuICAgIENMT1NFRCA6ICdjbG9zZWQnXG59O1xuXG5leHBvcnQgY29uc3QgUEVFUl9DT05ORUNUSU9OX1NUQVRFID0ge1xuICAgIE5FVyA6ICduZXcnLFxuICAgIENPTk5FQ1RJTkcgOiAnY29ubmVjdGluZycsXG4gICAgQ09OTkVDVEVEIDogJ2Nvbm5lY3RlZCcsXG4gICAgRkFJTEVEIDogJ2ZhaWxlZCcsXG4gICAgRElTQ09OTkVDVEVEIDogJ2Rpc2Nvbm5lY3RlZCcsXG4gICAgQ0xPU0VEIDogJ2Nsb3NlZCdcbn07IiwiaW1wb3J0IHthc3NlcnRUcnVlLCBoaXRjaCwgaXNGdW5jdGlvbn0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQge1xuICAgIERFRkFVTFRfSUNFX0NBTkRJREFURV9QT09MX1NJWkUsXG4gICAgTkVUV09SS19DT05ORUNUSVZJVFlfQ0hFQ0tfSU5URVJWQUxfTVMsXG4gICAgUlRDX1BFRVJfQ09OTkVDVElPTl9DT05GSUcsXG4gICAgUlRDX1BFRVJfQ09OTkVDVElPTl9JRExFX1RJTUVPVVRfTVMsXG4gICAgUlRDX1BFRVJfQ09OTkVDVElPTl9PUFRJT05BTF9DT05GSUcsXG4gICAgU09GVFBIT05FX1JPVVRFX0tFWVxufSBmcm9tICcuL3J0Y19jb25zdCdcbmltcG9ydCBDQ1BJbml0aWF0aW9uU3RyYXRlZ3lJbnRlcmZhY2UgZnJvbSBcIi4vc3RyYXRlZ2llcy9DQ1BJbml0aWF0aW9uU3RyYXRlZ3lJbnRlcmZhY2VcIjtcbmltcG9ydCBTdGFuZGFyZFN0cmF0ZWd5IGZyb20gXCIuL3N0cmF0ZWdpZXMvU3RhbmRhcmRTdHJhdGVneVwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSdGNQZWVyQ29ubmVjdGlvbkZhY3Rvcnkge1xuXG4gICAgLy90cmFuc3BvcnRIYW5kbGUgbXVzdCBiZSBhIGNhbGxiYWNrIGZ1bmN0aW9uIHdoaWNoIHNob3VsZCByZXR1cm4gYSBwcm9taXNlIHdoaWNoIGlzIGdvaW5nIHRvIHJldHVybiB0aGUgaWNlU2VydmVycy4gUGxlYXNlIHJlZmVyIGh0dHBzOi8vd3d3LnczLm9yZy9UUi93ZWJydGMvI3J0Y2ljZXNlcnZlci1kaWN0aW9uYXJ5IGZvciBpY2VTZXJ2ZXIgZXhhbXBsZVxuICAgIC8vcHVibGlzaEVycm9yKGVycm9yVHlwZSwgZXJyb3JNZXNzYWdlKSBtdXN0IGJlIGEgY2FsbGJhY2sgZnVuY3Rpb24gd2hpY2ggd2lsbCBwdWJsaXNoIHRoZSBwYXNzZWQgZXJyb3IgbWVzc2FnZSB0byBjbGllbnQgYnJvd3NlclxuICAgIGNvbnN0cnVjdG9yKGxvZ2dlciwgd3NzTWFuYWdlciwgY2xpZW50SWQsIHRyYW5zcG9ydEhhbmRsZSwgcHVibGlzaEVycm9yLCBzdHJhdGVneSA9IG5ldyBTdGFuZGFyZFN0cmF0ZWd5KCkpIHtcbiAgICAgICAgaWYgKCEoc3RyYXRlZ3kgaW5zdGFuY2VvZiBDQ1BJbml0aWF0aW9uU3RyYXRlZ3lJbnRlcmZhY2UpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIGEgc3RyYXRlZ3kgb2YgdHlwZSBDQ1BJbml0aWF0aW9uU3RyYXRlZ3lJbnRlcmZhY2UnKTtcbiAgICAgICAgfVxuICAgICAgICBhc3NlcnRUcnVlKGlzRnVuY3Rpb24odHJhbnNwb3J0SGFuZGxlKSwgJ3RyYW5zcG9ydEhhbmRsZSBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgICAgICAgYXNzZXJ0VHJ1ZShpc0Z1bmN0aW9uKHB1Ymxpc2hFcnJvciksICdwdWJsaXNoRXJyb3IgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gICAgICAgIHRoaXMuX3N0cmF0ZWd5ID0gc3RyYXRlZ3k7XG4gICAgICAgIHRoaXMuX2xvZ2dlciA9IGxvZ2dlcjtcbiAgICAgICAgdGhpcy5fY2xpZW50SWQgPSBjbGllbnRJZDtcbiAgICAgICAgdGhpcy5fd3NzTWFuYWdlciA9IHdzc01hbmFnZXI7XG4gICAgICAgIHRoaXMuX3JlcXVlc3RJY2VBY2Nlc3MgPSB0cmFuc3BvcnRIYW5kbGU7XG4gICAgICAgIHRoaXMuX3B1Ymxpc2hFcnJvciA9IHB1Ymxpc2hFcnJvcjtcbiAgICAgICAgdGhpcy5fZWFybHlNZWRpYUNvbm5lY3Rpb25TdXBwb3J0ZWQgPSB0aGlzLl9pc0Vhcmx5TWVkaWFDb25uZWN0aW9uU3VwcG9ydGVkKCk7XG4gICAgICAgIHRoaXMuX2luaXRpYWxpemVXZWJTb2NrZXRFdmVudExpc3RlbmVycygpO1xuICAgICAgICB0aGlzLl9yZXF1ZXN0UGVlckNvbm5lY3Rpb24oKTtcbiAgICAgICAgdGhpcy5fbmV0d29ya0Nvbm5lY3Rpdml0eUNoZWNrZXIoKTtcblxuICAgICAgICB0aGlzLl9sb2dnZXIubG9nKFwiUlRDLmpzIGlzIHVzaW5nIFwiICsgc3RyYXRlZ3kuZ2V0U3RyYXRlZ3lOYW1lKCkpO1xuICAgIH1cblxuICAgIF9pc0Vhcmx5TWVkaWFDb25uZWN0aW9uU3VwcG9ydGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3RyYXRlZ3kuX2lzRWFybHlNZWRpYUNvbm5lY3Rpb25TdXBwb3J0ZWQoKTtcbiAgICB9XG5cbiAgICAvL1RoaXMgd2lsbCBoYW5kbGUgdGhlIGlkbGVDb25uZWN0aW9uIGFuZCBxdW90YSBsaW1pdHMgbm90aWZpY2F0aW9uIGZyb20gdGhlIHNlcnZlclxuICAgIF93ZWJTb2NrZXRNYW5hZ2VyT25NZXNzYWdlKGV2ZW50KSB7XG4gICAgICAgIGxldCBjb250ZW50O1xuICAgICAgICBpZiAoZXZlbnQuY29udGVudCkge1xuICAgICAgICAgICAgY29udGVudCA9IEpTT04ucGFyc2UoZXZlbnQuY29udGVudCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbnRlbnQgJiYgdGhpcy5fY2xpZW50SWQgPT09IGNvbnRlbnQuY2xpZW50SWQpIHtcbiAgICAgICAgICAgIGlmIChjb250ZW50Lmpzb25ScGNNc2cubWV0aG9kID09PSBcImlkbGVDb25uZWN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jbGVhcklkbGVSdGNQZWVyQ29ubmVjdGlvbigpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjb250ZW50Lmpzb25ScGNNc2cubWV0aG9kID09PSBcInF1b3RhQnJlYWNoZWRcIikge1xuICAgICAgICAgICAgICAgIHRoaXMuX2xvZ2dlci5sb2coXCJOdW1iZXIgb2YgYWN0aXZlIHNlc3Npb25zIGFyZSBtb3JlIHRoZW4gYWxsb3dlZCBsaW1pdCBmb3IgdGhlIGNsaWVudCBcIiArIHRoaXMuX2NsaWVudElkKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9jbG9zZVJUQ1BlZXJDb25uZWN0aW9uKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fcHVibGlzaEVycm9yKFwibXVsdGlwbGVfc29mdHBob25lX2FjdGl2ZV9zZXNzaW9uc1wiLCBcIk51bWJlciBvZiBhY3RpdmUgc2Vzc2lvbnMgYXJlIG1vcmUgdGhlbiBhbGxvd2VkIGxpbWl0LlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9pbml0aWFsaXplV2ViU29ja2V0RXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgICAgIHRoaXMuX3dzc01hbmFnZXIuc3Vic2NyaWJlVG9waWNzKFtTT0ZUUEhPTkVfUk9VVEVfS0VZXSk7XG4gICAgICAgIHRoaXMuX3VuU3Vic2NyaWJlID0gdGhpcy5fd3NzTWFuYWdlci5vbk1lc3NhZ2UoU09GVFBIT05FX1JPVVRFX0tFWSwgaGl0Y2godGhpcywgdGhpcy5fd2ViU29ja2V0TWFuYWdlck9uTWVzc2FnZSkpO1xuICAgIH1cblxuICAgIC8vIFRoaXMgbWV0aG9kIHdpbGwgY3JlYXRlIGFuZCByZXR1cm4gbmV3IHBlZXIgY29ubmVjdGlvbiBpZiBicm93c2VyIGlzIG5vdCBzdXBwb3J0aW5nIGVhcmx5IGljZSBjb2xsZWN0aW9uLlxuICAgIC8vIEZvciB0aGUgc3VwcG9ydGVkIGJyb3dzZXIsIHRoaXMgbWV0aG9kIHdpbGwgcmVxdWVzdCBmb3IgbmV3IHBlZXJDb25uZWN0aW9uIGFmdGVyIHJldHVybmluZyB0aGUgZXhpc3RpbmcgcGVlckNvbm5lY3Rpb25cbiAgICBnZXQoaWNlU2VydmVycykge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIHZhciBwYyA9IHNlbGYuX3BjO1xuICAgICAgICBzZWxmLl9wYyA9IG51bGw7XG4gICAgICAgIGlmIChwYyA9PSBudWxsKSB7XG4gICAgICAgICAgICBwYyA9IHNlbGYuX2NyZWF0ZVJ0Y1BlZXJDb25uZWN0aW9uKGljZVNlcnZlcnMpO1xuICAgICAgICB9XG4gICAgICAgIHNlbGYuY2xlYXJJZGxlUnRjUGVlckNvbm5lY3Rpb25UaW1lcklkKCk7XG4gICAgICAgIHNlbGYuX3JlcXVlc3RQZWVyQ29ubmVjdGlvbigpO1xuICAgICAgICByZXR1cm4gcGM7XG4gICAgfVxuXG4gICAgY2xlYXJJZGxlUnRjUGVlckNvbm5lY3Rpb25UaW1lcklkKCkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIGlmIChzZWxmLl9pZGxlUnRjUGVlckNvbm5lY3Rpb25UaW1lcklkKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQoc2VsZi5faWRsZVJ0Y1BlZXJDb25uZWN0aW9uVGltZXJJZCk7XG4gICAgICAgICAgICBzZWxmLl9pZGxlUnRjUGVlckNvbm5lY3Rpb25UaW1lcklkID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9yZXF1ZXN0UGVlckNvbm5lY3Rpb24oKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgaWYgKCFzZWxmLl9wZWVyQ29ubmVjdGlvblJlcXVlc3RJbkZsaWdodCAmJiBzZWxmLl9lYXJseU1lZGlhQ29ubmVjdGlvblN1cHBvcnRlZCkge1xuICAgICAgICAgICAgc2VsZi5fcGVlckNvbm5lY3Rpb25SZXF1ZXN0SW5GbGlnaHQgPSB0cnVlO1xuICAgICAgICAgICAgc2VsZi5fcmVxdWVzdEljZUFjY2VzcygpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX3BjID0gc2VsZi5fY3JlYXRlUnRjUGVlckNvbm5lY3Rpb24ocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLl9wZWVyQ29ubmVjdGlvblJlcXVlc3RJbkZsaWdodCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLl9pZGxlUnRjUGVlckNvbm5lY3Rpb25UaW1lcklkID0gc2V0VGltZW91dChoaXRjaChzZWxmLCBzZWxmLl9yZWZyZXNoUnRjUGVlckNvbm5lY3Rpb24pLCBSVENfUEVFUl9DT05ORUNUSU9OX0lETEVfVElNRU9VVF9NUyk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX3BlZXJDb25uZWN0aW9uUmVxdWVzdEluRmxpZ2h0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfbmV0d29ya0Nvbm5lY3Rpdml0eUNoZWNrZXIoKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCFuYXZpZ2F0b3Iub25MaW5lICYmIHNlbGYuX3BjKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5fbG9nZ2VyLmxvZyhcIk5ldHdvcmsgb2ZmbGluZS4gQ2xlYW5pbmcgdXAgZWFybHkgY29ubmVjdGlvblwiKTtcbiAgICAgICAgICAgICAgICBzZWxmLl9wYy5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIHNlbGYuX3BjID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgTkVUV09SS19DT05ORUNUSVZJVFlfQ0hFQ0tfSU5URVJWQUxfTVMpO1xuICAgIH1cblxuICAgIF9jcmVhdGVSdGNQZWVyQ29ubmVjdGlvbihpY2VTZXJ2ZXJzKSB7XG4gICAgICAgIHZhciBydGNQZWVyQ29ubmVjdGlvbkNvbmZpZyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoUlRDX1BFRVJfQ09OTkVDVElPTl9DT05GSUcpKTtcbiAgICAgICAgcnRjUGVlckNvbm5lY3Rpb25Db25maWcuaWNlU2VydmVycyA9IGljZVNlcnZlcnM7XG4gICAgICAgIHJ0Y1BlZXJDb25uZWN0aW9uQ29uZmlnLmljZUNhbmRpZGF0ZVBvb2xTaXplID0gREVGQVVMVF9JQ0VfQ0FORElEQVRFX1BPT0xfU0laRTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N0cmF0ZWd5Ll9jcmVhdGVSdGNQZWVyQ29ubmVjdGlvbihydGNQZWVyQ29ubmVjdGlvbkNvbmZpZywgUlRDX1BFRVJfQ09OTkVDVElPTl9PUFRJT05BTF9DT05GSUcpO1xuICAgIH1cblxuICAgIF9jbGVhcklkbGVSdGNQZWVyQ29ubmVjdGlvbigpIHtcbiAgICAgICAgdGhpcy5fbG9nZ2VyLmxvZyhcInNlc3Npb24gaXMgaWRsZSBmcm9tIGxvbmcgdGltZS4gY2xvc2luZyB0aGUgcGVlciBjb25uZWN0aW9uIGZvciBjbGllbnQgXCIgKyB0aGlzLl9jbGllbnRJZCk7XG4gICAgICAgIHRoaXMuX2Nsb3NlUlRDUGVlckNvbm5lY3Rpb24oKTtcbiAgICB9XG5cbiAgICBfcmVmcmVzaFJ0Y1BlZXJDb25uZWN0aW9uKCkge1xuICAgICAgICB0aGlzLl9pZGxlUnRjUGVlckNvbm5lY3Rpb25UaW1lcklkID0gbnVsbDtcbiAgICAgICAgdGhpcy5fY2xlYXJJZGxlUnRjUGVlckNvbm5lY3Rpb24oKTtcbiAgICAgICAgdGhpcy5fbG9nZ2VyLmxvZyhcInJlZnJlc2hpbmcgcGVlciBjb25uZWN0aW9uIGZvciBjbGllbnQgXCIgKyB0aGlzLl9jbGllbnRJZCk7XG4gICAgICAgIHRoaXMuX3JlcXVlc3RQZWVyQ29ubmVjdGlvbigpO1xuICAgIH1cblxuICAgIF9jbG9zZVJUQ1BlZXJDb25uZWN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5fcGMpIHtcbiAgICAgICAgICAgIHRoaXMuX3BjLmNsb3NlKCk7XG4gICAgICAgICAgICB0aGlzLl9wYyA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG59IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNyBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cbmltcG9ydCB7Y2xvc2VTdHJlYW0sIGhpdGNoLCBpc0xlZ2FjeVN0YXRzUmVwb3J0U3VwcG9ydGVkLCBTZHBPcHRpb25zLCB0cmFuc2Zvcm1TZHAsIHdyYXBMb2dnZXJ9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHtTZXNzaW9uUmVwb3J0fSBmcm9tICcuL3Nlc3Npb25fcmVwb3J0JztcbmltcG9ydCB7XG4gICAgREVGQVVMVF9HVU1fVElNRU9VVF9NUyxcbiAgICBERUZBVUxUX0lDRV9USU1FT1VUX01TLFxuICAgIFJUQ19FUlJPUlMsXG4gICAgUlRDX1BFRVJfQ09OTkVDVElPTl9DT05GSUcsXG4gICAgUlRDX1BFRVJfQ09OTkVDVElPTl9PUFRJT05BTF9DT05GSUcsXG4gICAgSUNFX0NPTk5FQ1RJT05fU1RBVEUsXG4gICAgUEVFUl9DT05ORUNUSU9OX1NUQVRFXG59IGZyb20gJy4vcnRjX2NvbnN0JztcbmltcG9ydCB7XG4gICAgQnVzeUV4Y2VwdGlvbk5hbWUsXG4gICAgQ2FsbE5vdEZvdW5kRXhjZXB0aW9uTmFtZSxcbiAgICBHdW1UaW1lb3V0LFxuICAgIElsbGVnYWxQYXJhbWV0ZXJzLFxuICAgIElsbGVnYWxTdGF0ZSxcbiAgICBVbnN1cHBvcnRlZE9wZXJhdGlvblxufSBmcm9tICcuL2V4Y2VwdGlvbnMnO1xuaW1wb3J0IFJ0Y1NpZ25hbGluZyBmcm9tICcuL3NpZ25hbGluZyc7XG5pbXBvcnQgdXVpZCBmcm9tICd1dWlkL3Y0JztcbmltcG9ydCB7ZXh0cmFjdE1lZGlhU3RhdHNGcm9tU3RhdHN9IGZyb20gJy4vcnRwLXN0YXRzJztcbmltcG9ydCB7cGFyc2VDYW5kaWRhdGV9IGZyb20gJ3NkcCc7XG5pbXBvcnQgQ0NQSW5pdGlhdGlvblN0cmF0ZWd5SW50ZXJmYWNlIGZyb20gXCIuL3N0cmF0ZWdpZXMvQ0NQSW5pdGlhdGlvblN0cmF0ZWd5SW50ZXJmYWNlXCI7XG5pbXBvcnQgU3RhbmRhcmRTdHJhdGVneSBmcm9tIFwiLi9zdHJhdGVnaWVzL1N0YW5kYXJkU3RyYXRlZ3lcIjtcblxuZXhwb3J0IGNsYXNzIFJUQ1Nlc3Npb25TdGF0ZSB7XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1J0Y1Nlc3Npb259IHJ0Y1Nlc3Npb25cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihydGNTZXNzaW9uKSB7XG4gICAgICAgIHRoaXMuX3J0Y1Nlc3Npb24gPSBydGNTZXNzaW9uO1xuICAgIH1cbiAgICBvbkVudGVyKCkge1xuICAgIH1cbiAgICBvbkV4aXQoKSB7XG4gICAgfVxuICAgIF9pc0N1cnJlbnRTdGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3J0Y1Nlc3Npb24uX3N0YXRlID09PSB0aGlzO1xuICAgIH1cbiAgICB0cmFuc2l0KG5leHRTdGF0ZSkge1xuICAgICAgICBpZiAodGhpcy5faXNDdXJyZW50U3RhdGUoKSkge1xuICAgICAgICAgICAgdGhpcy5fcnRjU2Vzc2lvbi50cmFuc2l0KG5leHRTdGF0ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IGxvZ2dlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3J0Y1Nlc3Npb24uX2xvZ2dlcjtcbiAgICB9XG4gICAgaGFuZ3VwKCkge1xuICAgICAgICB0aGlzLnRyYW5zaXQobmV3IEZhaWxlZFN0YXRlKHRoaXMuX3J0Y1Nlc3Npb24pKTtcbiAgICB9XG4gICAgb25JY2VDYW5kaWRhdGUoZXZ0KSB7Ly8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgICAvL2lnbm9yZSBjYW5kaWRhdGUgYnkgZGVmYXVsdCwgQ29ubmVjdFNpZ25hbGluZ0FuZEljZUNvbGxlY3Rpb25TdGF0ZSB3aWxsIG92ZXJyaWRlIHRvIGNvbGxlY3QgY2FuZGlkYXRlcywgYnV0IGNvbGxlY3RpbmcgcHJvY2VzcyBjb3VsZCBsYXN0IG11Y2ggbG9uZ2VyIHRoYW4gQ29ubmVjdFNpZ25hbGluZ0FuZEljZUNvbGxlY3Rpb25TdGF0ZVxuICAgICAgICAvL3dlIGRvbid0IHdhbnQgdG8gc3BhbSB0aGUgY29uc29sZSBsb2dcbiAgICB9XG4gICAgb25SZW1vdGVIdW5ndXAoKSB7XG4gICAgICAgIHRocm93IG5ldyBVbnN1cHBvcnRlZE9wZXJhdGlvbignb25SZW1vdGVIdW5ndXAgbm90IGltcGxlbWVudGVkIGJ5ICcgKyB0aGlzLm5hbWUpO1xuICAgIH1cbiAgICBnZXQgbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiUlRDU2Vzc2lvblN0YXRlXCI7XG4gICAgfVxuICAgIG9uU2lnbmFsaW5nQ29ubmVjdGVkKCkge1xuICAgICAgICB0aHJvdyBuZXcgVW5zdXBwb3J0ZWRPcGVyYXRpb24oJ29uU2lnbmFsaW5nQ29ubmVjdGVkIG5vdCBpbXBsZW1lbnRlZCBieSAnICsgdGhpcy5uYW1lKTtcbiAgICB9XG4gICAgb25TaWduYWxpbmdIYW5kc2hha2VkKCkge1xuICAgICAgICB0aHJvdyBuZXcgVW5zdXBwb3J0ZWRPcGVyYXRpb24oJ29uU2lnbmFsaW5nSGFuZHNoYWtlZCBub3QgaW1wbGVtZW50ZWQgYnkgJyArIHRoaXMubmFtZSk7XG4gICAgfVxuICAgIG9uU2lnbmFsaW5nRmFpbGVkKGUpIHsvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICAgIHRocm93IG5ldyBVbnN1cHBvcnRlZE9wZXJhdGlvbignb25TaWduYWxpbmdGYWlsZWQgbm90IGltcGxlbWVudGVkIGJ5ICcgKyB0aGlzLm5hbWUpO1xuICAgIH1cbiAgICBvbkljZVN0YXRlQ2hhbmdlKGV2dCkgey8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgR3JhYkxvY2FsTWVkaWFTdGF0ZSBleHRlbmRzIFJUQ1Nlc3Npb25TdGF0ZSB7XG4gICAgb25FbnRlcigpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICB2YXIgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgICAgaWYgKHNlbGYuX3J0Y1Nlc3Npb24uX2lzVXNlclByb3ZpZGVkU3RyZWFtKSB7XG4gICAgICAgICAgICBzZWxmLnRyYW5zaXQobmV3IENyZWF0ZU9mZmVyU3RhdGUoc2VsZi5fcnRjU2Vzc2lvbikpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGd1bVRpbWVvdXRQcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QobmV3IEd1bVRpbWVvdXQoJ0xvY2FsIG1lZGlhIGhhcyBub3QgYmVlbiBpbml0aWFsaXplZCB5ZXQuJykpO1xuICAgICAgICAgICAgICAgIH0sIHNlbGYuX3J0Y1Nlc3Npb24uX2d1bVRpbWVvdXRNaWxsaXMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB2YXIgc2Vzc2lvbkd1bVByb21pc2UgPSBzZWxmLl9nVU0oc2VsZi5fcnRjU2Vzc2lvbi5fYnVpbGRNZWRpYUNvbnN0cmFpbnRzKCkpO1xuXG4gICAgICAgICAgICBQcm9taXNlLnJhY2UoW3Nlc3Npb25HdW1Qcm9taXNlLCBndW1UaW1lb3V0UHJvbWlzZV0pXG4gICAgICAgICAgICAgICAgLnRoZW4oc3RyZWFtID0+IHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5fcnRjU2Vzc2lvbi5fc2Vzc2lvblJlcG9ydC5ndW1UaW1lTWlsbGlzID0gRGF0ZS5ub3coKSAtIHN0YXJ0VGltZTtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5fcnRjU2Vzc2lvbi5fb25HdW1TdWNjZXNzKHNlbGYuX3J0Y1Nlc3Npb24pO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLl9ydGNTZXNzaW9uLl9sb2NhbFN0cmVhbSA9IHN0cmVhbTtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5fcnRjU2Vzc2lvbi5fc2Vzc2lvblJlcG9ydC5ndW1PdGhlckZhaWx1cmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5fcnRjU2Vzc2lvbi5fc2Vzc2lvblJlcG9ydC5ndW1UaW1lb3V0RmFpbHVyZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLnRyYW5zaXQobmV3IENyZWF0ZU9mZmVyU3RhdGUoc2VsZi5fcnRjU2Vzc2lvbikpO1xuICAgICAgICAgICAgICAgIH0pLmNhdGNoKGUgPT4ge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLl9ydGNTZXNzaW9uLl9zZXNzaW9uUmVwb3J0Lmd1bVRpbWVNaWxsaXMgPSBEYXRlLm5vdygpIC0gc3RhcnRUaW1lO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZXJyb3JSZWFzb247XG4gICAgICAgICAgICAgICAgICAgIGlmIChlIGluc3RhbmNlb2YgR3VtVGltZW91dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JSZWFzb24gPSBSVENfRVJST1JTLkdVTV9USU1FT1VUX0ZBSUxVUkU7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9ydGNTZXNzaW9uLl9zZXNzaW9uUmVwb3J0Lmd1bVRpbWVvdXRGYWlsdXJlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX3J0Y1Nlc3Npb24uX3Nlc3Npb25SZXBvcnQuZ3VtT3RoZXJGYWlsdXJlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvclJlYXNvbiA9IFJUQ19FUlJPUlMuR1VNX09USEVSX0ZBSUxVUkU7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9ydGNTZXNzaW9uLl9zZXNzaW9uUmVwb3J0Lmd1bU90aGVyRmFpbHVyZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9ydGNTZXNzaW9uLl9zZXNzaW9uUmVwb3J0Lmd1bVRpbWVvdXRGYWlsdXJlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoJ0xvY2FsIG1lZGlhIGluaXRpYWxpemF0aW9uIGZhaWxlZCcsIGUpO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLl9ydGNTZXNzaW9uLl9vbkd1bUVycm9yKHNlbGYuX3J0Y1Nlc3Npb24pO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLnRyYW5zaXQobmV3IEZhaWxlZFN0YXRlKHNlbGYuX3J0Y1Nlc3Npb24sIGVycm9yUmVhc29uKSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiBcIkdyYWJMb2NhbE1lZGlhU3RhdGVcIjtcbiAgICB9XG4gICAgX2dVTShjb25zdHJhaW50cykge1xuICAgICAgICByZXR1cm4gdGhpcy5fcnRjU2Vzc2lvbi5fc3RyYXRlZ3kuX2dVTShjb25zdHJhaW50cyk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIENyZWF0ZU9mZmVyU3RhdGUgZXh0ZW5kcyBSVENTZXNzaW9uU3RhdGUge1xuICAgIG9uRW50ZXIoKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgdmFyIHN0cmVhbSA9IHNlbGYuX3J0Y1Nlc3Npb24uX2xvY2FsU3RyZWFtO1xuICAgICAgICBzZWxmLl9ydGNTZXNzaW9uLl9zdHJhdGVneS5hZGRTdHJlYW0oc2VsZi5fcnRjU2Vzc2lvbi5fcGMsIHN0cmVhbSk7XG4gICAgICAgIHNlbGYuX3J0Y1Nlc3Npb24uX29uTG9jYWxTdHJlYW1BZGRlZChzZWxmLl9ydGNTZXNzaW9uLCBzdHJlYW0pO1xuICAgICAgICBzZWxmLl9ydGNTZXNzaW9uLl9wYy5jcmVhdGVPZmZlcigpLnRoZW4ocnRjU2Vzc2lvbkRlc2NyaXB0aW9uID0+IHtcbiAgICAgICAgICAgIHNlbGYuX3J0Y1Nlc3Npb24uX2xvY2FsU2Vzc2lvbkRlc2NyaXB0aW9uID0gcnRjU2Vzc2lvbkRlc2NyaXB0aW9uO1xuICAgICAgICAgICAgc2VsZi5fcnRjU2Vzc2lvbi5fc2Vzc2lvblJlcG9ydC5jcmVhdGVPZmZlckZhaWx1cmUgPSBmYWxzZTtcbiAgICAgICAgICAgIHNlbGYudHJhbnNpdChuZXcgU2V0TG9jYWxTZXNzaW9uRGVzY3JpcHRpb25TdGF0ZShzZWxmLl9ydGNTZXNzaW9uKSk7XG4gICAgICAgIH0pLmNhdGNoKGUgPT4ge1xuICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoJ0NyZWF0ZU9mZmVyIGZhaWxlZCcsIGUpO1xuICAgICAgICAgICAgc2VsZi5fcnRjU2Vzc2lvbi5fc2Vzc2lvblJlcG9ydC5jcmVhdGVPZmZlckZhaWx1cmUgPSB0cnVlO1xuICAgICAgICAgICAgc2VsZi50cmFuc2l0KG5ldyBGYWlsZWRTdGF0ZShzZWxmLl9ydGNTZXNzaW9uLCBSVENfRVJST1JTLkNSRUFURV9PRkZFUl9GQUlMVVJFKSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBnZXQgbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiQ3JlYXRlT2ZmZXJTdGF0ZVwiO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBTZXRMb2NhbFNlc3Npb25EZXNjcmlwdGlvblN0YXRlIGV4dGVuZHMgUlRDU2Vzc2lvblN0YXRlIHtcbiAgICBvbkVudGVyKCkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgLy8gZml4L21vZGlmeSBTRFAgYXMgbmVlZGVkIGhlcmUsIGJlZm9yZSBzZXRMb2NhbERlc2NyaXB0aW9uXG4gICAgICAgIHZhciBsb2NhbERlc2NyaXB0aW9uID0gc2VsZi5fcnRjU2Vzc2lvbi5fbG9jYWxTZXNzaW9uRGVzY3JpcHRpb247XG4gICAgICAgIHZhciBzZHBPcHRpb25zID0gbmV3IFNkcE9wdGlvbnMoKTtcbiAgICAgICAgLy8gU2V0IGF1ZGlvIGNvZGVjLlxuICAgICAgICBpZiAoc2VsZi5fcnRjU2Vzc2lvbi5fZm9yY2VBdWRpb0NvZGVjKSB7XG4gICAgICAgICAgICBzZHBPcHRpb25zLmZvcmNlQ29kZWNbJ2F1ZGlvJ10gPSBzZWxmLl9ydGNTZXNzaW9uLl9mb3JjZUF1ZGlvQ29kZWM7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2V0IHZpZGVvIGNvZGVjLlxuICAgICAgICBpZiAoc2VsZi5fcnRjU2Vzc2lvbi5fZm9yY2VWaWRlb0NvZGVjKSB7XG4gICAgICAgICAgICBzZHBPcHRpb25zLmZvcmNlQ29kZWNbJ3ZpZGVvJ10gPSBzZWxmLl9ydGNTZXNzaW9uLl9mb3JjZVZpZGVvQ29kZWM7XG4gICAgICAgIH1cbiAgICAgICAgc2RwT3B0aW9ucy5lbmFibGVPcHVzRHR4ID0gc2VsZi5fcnRjU2Vzc2lvbi5fZW5hYmxlT3B1c0R0eDtcblxuICAgICAgICB2YXIgdHJhbnNmb3JtZWRTZHAgPSB0cmFuc2Zvcm1TZHAobG9jYWxEZXNjcmlwdGlvbi5zZHAsIHNkcE9wdGlvbnMpO1xuICAgICAgICBsb2NhbERlc2NyaXB0aW9uLnNkcCA9IHRyYW5zZm9ybWVkU2RwLnNkcDtcbiAgICAgICAgbG9jYWxEZXNjcmlwdGlvbi5zZHAgKz0gJ2E9cHRpbWU6MjBcXHJcXG4nO1xuICAgICAgICBsb2NhbERlc2NyaXB0aW9uLnNkcCArPSAnYT1tYXhwdGltZToyMFxcclxcbic7XG4gICAgICAgIGxvY2FsRGVzY3JpcHRpb24uc2RwID0gbG9jYWxEZXNjcmlwdGlvbi5zZHAucmVwbGFjZShcIm1pbnB0aW1lPTEwXCIsIFwibWlucHRpbWU9MjBcIik7XG5cbiAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygnTG9jYWxTRCcsIHNlbGYuX3J0Y1Nlc3Npb24uX2xvY2FsU2Vzc2lvbkRlc2NyaXB0aW9uKTtcbiAgICAgICAgc2VsZi5fcnRjU2Vzc2lvbi5fcGMuc2V0TG9jYWxEZXNjcmlwdGlvbihzZWxmLl9ydGNTZXNzaW9uLl9sb2NhbFNlc3Npb25EZXNjcmlwdGlvbikudGhlbigoKSA9PiB7XG4gICAgICAgICAgICB2YXIgaW5pdGlhbGl6YXRpb25UaW1lID0gRGF0ZS5ub3coKSAtIHNlbGYuX3J0Y1Nlc3Npb24uX2Nvbm5lY3RUaW1lU3RhbXA7XG4gICAgICAgICAgICBzZWxmLl9ydGNTZXNzaW9uLl9zZXNzaW9uUmVwb3J0LmluaXRpYWxpemF0aW9uVGltZU1pbGxpcyA9IGluaXRpYWxpemF0aW9uVGltZTtcbiAgICAgICAgICAgIHNlbGYuX3J0Y1Nlc3Npb24uX29uU2Vzc2lvbkluaXRpYWxpemVkKHNlbGYuX3J0Y1Nlc3Npb24sIGluaXRpYWxpemF0aW9uVGltZSk7XG4gICAgICAgICAgICBzZWxmLl9ydGNTZXNzaW9uLl9zZXNzaW9uUmVwb3J0LnNldExvY2FsRGVzY3JpcHRpb25GYWlsdXJlID0gZmFsc2U7XG4gICAgICAgICAgICBzZWxmLnRyYW5zaXQobmV3IENvbm5lY3RTaWduYWxpbmdBbmRJY2VDb2xsZWN0aW9uU3RhdGUoc2VsZi5fcnRjU2Vzc2lvbiwgdHJhbnNmb3JtZWRTZHAubUxpbmVzKSk7XG4gICAgICAgIH0pLmNhdGNoKGUgPT4ge1xuICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoJ1NldExvY2FsRGVzY3JpcHRpb24gZmFpbGVkJywgZSk7XG4gICAgICAgICAgICBzZWxmLl9ydGNTZXNzaW9uLl9zZXNzaW9uUmVwb3J0LnNldExvY2FsRGVzY3JpcHRpb25GYWlsdXJlID0gdHJ1ZTtcbiAgICAgICAgICAgIHNlbGYudHJhbnNpdChuZXcgRmFpbGVkU3RhdGUoc2VsZi5fcnRjU2Vzc2lvbiwgUlRDX0VSUk9SUy5TRVRfTE9DQUxfREVTQ1JJUFRJT05fRkFJTFVSRSkpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiBcIlNldExvY2FsU2Vzc2lvbkRlc2NyaXB0aW9uU3RhdGVcIjtcbiAgICB9XG59XG5cbi8qKlxuICogS2ljayBvZmYgc2lnbmFsaW5nIGNvbm5lY3Rpb24uIFdhaXQgdW50aWwgc2lnbmFsaW5nIGNvbm5lY3RzIGFuZCBJQ0UgY29sbGVjdGlvbiAod2hpY2ggYWxyZWFkeSBzdGFydGVkIGluIHByZXZpb3VzIHN0YXRlKSBjb21wbGV0ZXMuXG4gKiBJQ0UgY29sbGVjdGlvbiB0aW1lcyBvdXQgYWZ0ZXIgdXNlciBzcGVjaWZpZWQgYW1vdW50IG9mIHRpbWUgKGRlZmF1bHQgdG8gREVGQVVMVF9JQ0VfVElNRU9VVF9NUykgaW4gY2FzZSB1c2VyIGhhcyBjb21wbGV4IG5ldHdvcmsgZW52aXJvbm1lbnQgdGhhdCBibGFja2hvbGVzIFNUVU4vVFVSTiByZXF1ZXN0cy4gSW4gdGhpcyBjYXNlIGF0IGxlYXN0IG9uZSBjYW5kaWRhdGUgaXMgcmVxdWlyZWQgdG8gbW92ZSBmb3J3YXJkLlxuICogSUNFIGNvbGxlY3Rpb24gY291bGQgYWxzbyB3cmFwIHVwIGJlZm9yZSB0aW1lb3V0IGlmIGl0J3MgZGV0ZXJtaW5lZCB0aGF0IFJUUCBjYW5kaWRhdGVzIGZyb20gc2FtZSBUVVJOIHNlcnZlciBoYXZlIGJlZW4gY29sbGVjdGVkIGZvciBhbGwgbSBsaW5lcy5cbiAqL1xuZXhwb3J0IGNsYXNzIENvbm5lY3RTaWduYWxpbmdBbmRJY2VDb2xsZWN0aW9uU3RhdGUgZXh0ZW5kcyBSVENTZXNzaW9uU3RhdGUge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBDb25uZWN0U2lnbmFsaW5nQW5kSWNlQ29sbGVjdGlvblN0YXRlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge1J0Y1Nlc3Npb259IHJ0Y1Nlc3Npb25cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbUxpbmVzIE51bWJlciBvZiBtIGxpbmVzIGluIFNEUFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHJ0Y1Nlc3Npb24sIG1MaW5lcykge1xuICAgICAgICBzdXBlcihydGNTZXNzaW9uKTtcbiAgICAgICAgdGhpcy5faWNlQ2FuZGlkYXRlcyA9IFtdO1xuICAgICAgICB0aGlzLl9pY2VDYW5kaWRhdGVGb3VuZGF0aW9uc01hcCA9IHt9O1xuICAgICAgICB0aGlzLl9tTGluZXMgPSBtTGluZXM7XG4gICAgfVxuICAgIG9uRW50ZXIoKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgc2VsZi5fc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBpZiAoc2VsZi5faXNDdXJyZW50U3RhdGUoKSAmJiAhc2VsZi5faWNlQ29tcGxldGVkKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIud2FybignSUNFIGNvbGxlY3Rpb24gdGltZWQgb3V0Jyk7XG4gICAgICAgICAgICAgICAgc2VsZi5fcmVwb3J0SWNlQ29tcGxldGVkKHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBzZWxmLl9ydGNTZXNzaW9uLl9pY2VUaW1lb3V0TWlsbGlzKTtcbiAgICAgICAgc2VsZi5fcnRjU2Vzc2lvbi5fY3JlYXRlU2lnbmFsaW5nQ2hhbm5lbCgpLmNvbm5lY3QoKTtcbiAgICB9XG4gICAgb25TaWduYWxpbmdDb25uZWN0ZWQoKSB7XG4gICAgICAgIHRoaXMuX3J0Y1Nlc3Npb24uX3NpZ25hbGxpbmdDb25uZWN0VGltZXN0YW1wID0gRGF0ZS5ub3coKTtcbiAgICAgICAgdGhpcy5fcnRjU2Vzc2lvbi5fc2Vzc2lvblJlcG9ydC5zaWduYWxsaW5nQ29ubmVjdFRpbWVNaWxsaXMgPSB0aGlzLl9ydGNTZXNzaW9uLl9zaWduYWxsaW5nQ29ubmVjdFRpbWVzdGFtcCAtIHRoaXMuX3N0YXJ0VGltZTtcbiAgICAgICAgdGhpcy5fc2lnbmFsaW5nQ29ubmVjdGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fcnRjU2Vzc2lvbi5fb25TaWduYWxpbmdDb25uZWN0ZWQodGhpcy5fcnRjU2Vzc2lvbik7XG4gICAgICAgIHRoaXMuX3J0Y1Nlc3Npb24uX3Nlc3Npb25SZXBvcnQuc2lnbmFsbGluZ0Nvbm5lY3Rpb25GYWlsdXJlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2NoZWNrQW5kVHJhbnNpdCgpO1xuICAgIH1cbiAgICBvblNpZ25hbGluZ0ZhaWxlZChlKSB7XG4gICAgICAgIHRoaXMuX3J0Y1Nlc3Npb24uX3Nlc3Npb25SZXBvcnQuc2lnbmFsbGluZ0Nvbm5lY3RUaW1lTWlsbGlzID0gRGF0ZS5ub3coKSAtIHRoaXMuX3N0YXJ0VGltZTtcbiAgICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoJ0ZhaWxlZCBjb25uZWN0aW5nIHRvIHNpZ25hbGluZyBzZXJ2ZXInLCBlKTtcbiAgICAgICAgdGhpcy5fcnRjU2Vzc2lvbi5fc2Vzc2lvblJlcG9ydC5zaWduYWxsaW5nQ29ubmVjdGlvbkZhaWx1cmUgPSB0cnVlO1xuICAgICAgICB0aGlzLnRyYW5zaXQobmV3IEZhaWxlZFN0YXRlKHRoaXMuX3J0Y1Nlc3Npb24sIFJUQ19FUlJPUlMuU0lHTkFMTElOR19DT05ORUNUSU9OX0ZBSUxVUkUpKTtcbiAgICB9XG4gICAgX2NyZWF0ZUxvY2FsQ2FuZGlkYXRlKGluaXREaWN0KSB7XG4gICAgICAgIHJldHVybiBuZXcgUlRDSWNlQ2FuZGlkYXRlKGluaXREaWN0KTtcbiAgICB9XG4gICAgb25JY2VDYW5kaWRhdGUoZXZ0KSB7XG4gICAgICAgIHZhciBjYW5kaWRhdGUgPSBldnQuY2FuZGlkYXRlO1xuICAgICAgICB0aGlzLmxvZ2dlci5sb2coJ29uaWNlY2FuZGlkYXRlICcgKyBKU09OLnN0cmluZ2lmeShjYW5kaWRhdGUpKTtcbiAgICAgICAgaWYgKGNhbmRpZGF0ZSkge1xuICAgICAgICAgICAgaWYgKGNhbmRpZGF0ZS5jYW5kaWRhdGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9pY2VDYW5kaWRhdGVzLnB1c2godGhpcy5fY3JlYXRlTG9jYWxDYW5kaWRhdGUoY2FuZGlkYXRlKSk7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9pY2VDb21wbGV0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2hlY2tDYW5kaWRhdGVzU3VmZmljaWVudChjYW5kaWRhdGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fcmVwb3J0SWNlQ29tcGxldGVkKGZhbHNlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfY2hlY2tDYW5kaWRhdGVzU3VmZmljaWVudChjYW5kaWRhdGUpIHtcbiAgICAgICAgLy9jaGVjayBpZiB3ZSBjb2xsZWN0ZWQgc3VmZmljaWVudCBjYW5kaWRhdGVzIGZyb20gc2luZ2xlIG1lZGlhIHNlcnZlciB0byBzdGFydCB0aGUgY2FsbFxuICAgICAgICB2YXIgY2FuZGlkYXRlT2JqID0gcGFyc2VDYW5kaWRhdGUoY2FuZGlkYXRlLmNhbmRpZGF0ZSk7XG4gICAgICAgIGlmIChjYW5kaWRhdGVPYmouY29tcG9uZW50ICE9IDEpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2FuZGlkYXRlRm91bmRhdGlvbiA9IGNhbmRpZGF0ZU9iai5mb3VuZGF0aW9uO1xuICAgICAgICB2YXIgY2FuZGlkYXRlTUxpbmVJbmRleCA9IGNhbmRpZGF0ZS5zZHBNTGluZUluZGV4O1xuICAgICAgICBpZiAoY2FuZGlkYXRlRm91bmRhdGlvbiAmJiBjYW5kaWRhdGVNTGluZUluZGV4ID49IDAgJiYgY2FuZGlkYXRlTUxpbmVJbmRleCA8IHRoaXMuX21MaW5lcykge1xuICAgICAgICAgICAgdmFyIG1JbmRleExpc3QgPSB0aGlzLl9pY2VDYW5kaWRhdGVGb3VuZGF0aW9uc01hcFtjYW5kaWRhdGVGb3VuZGF0aW9uXSB8fCBbXTtcbiAgICAgICAgICAgIGlmICghbUluZGV4TGlzdC5pbmNsdWRlcyhjYW5kaWRhdGVNTGluZUluZGV4KSkge1xuICAgICAgICAgICAgICAgIG1JbmRleExpc3QucHVzaChjYW5kaWRhdGVNTGluZUluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2ljZUNhbmRpZGF0ZUZvdW5kYXRpb25zTWFwW2NhbmRpZGF0ZUZvdW5kYXRpb25dID0gbUluZGV4TGlzdDtcblxuICAgICAgICAgICAgaWYgKHRoaXMuX21MaW5lcyA9PSBtSW5kZXhMaXN0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3JlcG9ydEljZUNvbXBsZXRlZChmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgX3JlcG9ydEljZUNvbXBsZXRlZChpc1RpbWVvdXQpIHtcbiAgICAgICAgdGhpcy5fcnRjU2Vzc2lvbi5fc2Vzc2lvblJlcG9ydC5pY2VDb2xsZWN0aW9uVGltZU1pbGxpcyA9IERhdGUubm93KCkgLSB0aGlzLl9zdGFydFRpbWU7XG4gICAgICAgIHRoaXMuX2ljZUNvbXBsZXRlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuX3J0Y1Nlc3Npb24uX29uSWNlQ29sbGVjdGlvbkNvbXBsZXRlKHRoaXMuX3J0Y1Nlc3Npb24sIGlzVGltZW91dCwgdGhpcy5faWNlQ2FuZGlkYXRlcy5sZW5ndGgpO1xuICAgICAgICBpZiAodGhpcy5faWNlQ2FuZGlkYXRlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLl9ydGNTZXNzaW9uLl9zZXNzaW9uUmVwb3J0LmljZUNvbGxlY3Rpb25GYWlsdXJlID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLl9jaGVja0FuZFRyYW5zaXQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLmVycm9yKCdObyBJQ0UgY2FuZGlkYXRlJyk7XG4gICAgICAgICAgICB0aGlzLl9ydGNTZXNzaW9uLl9zZXNzaW9uUmVwb3J0LmljZUNvbGxlY3Rpb25GYWlsdXJlID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMudHJhbnNpdChuZXcgRmFpbGVkU3RhdGUodGhpcy5fcnRjU2Vzc2lvbiwgUlRDX0VSUk9SUy5JQ0VfQ09MTEVDVElPTl9USU1FT1VUKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX2NoZWNrQW5kVHJhbnNpdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2ljZUNvbXBsZXRlZCAmJiB0aGlzLl9zaWduYWxpbmdDb25uZWN0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMudHJhbnNpdChuZXcgSW52aXRlQW5zd2VyU3RhdGUodGhpcy5fcnRjU2Vzc2lvbiwgdGhpcy5faWNlQ2FuZGlkYXRlcykpO1xuICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLl9pY2VDb21wbGV0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZygnUGVuZGluZyBJQ0UgY29sbGVjdGlvbicpO1xuICAgICAgICB9IGVsc2Ugey8vaW1wbGllcyBfc2lnbmFsaW5nQ29ubmVjdGVkID09IGZhbHNlXG4gICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2coJ1BlbmRpbmcgc2lnbmFsaW5nIGNvbm5lY3Rpb24nKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiQ29ubmVjdFNpZ25hbGluZ0FuZEljZUNvbGxlY3Rpb25TdGF0ZVwiO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEludml0ZUFuc3dlclN0YXRlIGV4dGVuZHMgUlRDU2Vzc2lvblN0YXRlIHtcbiAgICBjb25zdHJ1Y3RvcihydGNTZXNzaW9uLCBpY2VDYW5kaWRhdGVzKSB7XG4gICAgICAgIHN1cGVyKHJ0Y1Nlc3Npb24pO1xuICAgICAgICB0aGlzLl9pY2VDYW5kaWRhdGVzID0gaWNlQ2FuZGlkYXRlcztcbiAgICB9XG4gICAgb25FbnRlcigpIHtcbiAgICAgICAgdmFyIHJ0Y1Nlc3Npb24gPSB0aGlzLl9ydGNTZXNzaW9uO1xuICAgICAgICBydGNTZXNzaW9uLl9vblNpZ25hbGluZ1N0YXJ0ZWQocnRjU2Vzc2lvbik7XG4gICAgICAgIHJ0Y1Nlc3Npb24uX3NpZ25hbGluZ0NoYW5uZWwuaW52aXRlKHJ0Y1Nlc3Npb24uX2xvY2FsU2Vzc2lvbkRlc2NyaXB0aW9uLnNkcCxcbiAgICAgICAgICAgIHRoaXMuX2ljZUNhbmRpZGF0ZXMpO1xuICAgIH1cbiAgICBvblNpZ25hbGluZ0Fuc3dlcmVkKHNkcCwgY2FuZGlkYXRlcykge1xuICAgICAgICB0aGlzLl9ydGNTZXNzaW9uLl9zZXNzaW9uUmVwb3J0LnVzZXJCdXN5RmFpbHVyZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9ydGNTZXNzaW9uLl9zZXNzaW9uUmVwb3J0LmhhbmRzaGFraW5nRmFpbHVyZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnRyYW5zaXQobmV3IEFjY2VwdFN0YXRlKHRoaXMuX3J0Y1Nlc3Npb24sIHNkcCwgY2FuZGlkYXRlcykpO1xuICAgIH1cbiAgICBvblNpZ25hbGluZ0ZhaWxlZChlKSB7XG4gICAgICAgIHZhciByZWFzb247XG4gICAgICAgIGlmIChlLm5hbWUgPT0gQnVzeUV4Y2VwdGlvbk5hbWUpIHtcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLmVycm9yKCdVc2VyIEJ1c3ksIHBvc3NpYmx5IG11bHRpcGxlIENDUCB3aW5kb3dzIG9wZW4nLCBlKTtcbiAgICAgICAgICAgIHRoaXMuX3J0Y1Nlc3Npb24uX3Nlc3Npb25SZXBvcnQudXNlckJ1c3lGYWlsdXJlID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX3J0Y1Nlc3Npb24uX3Nlc3Npb25SZXBvcnQuaGFuZHNoYWtpbmdGYWlsdXJlID0gdHJ1ZTtcbiAgICAgICAgICAgIHJlYXNvbiA9IFJUQ19FUlJPUlMuVVNFUl9CVVNZO1xuICAgICAgICB9IGVsc2UgaWYgKGUubmFtZSA9PSBDYWxsTm90Rm91bmRFeGNlcHRpb25OYW1lKSB7XG4gICAgICAgICAgICB0aGlzLmxvZ2dlci5lcnJvcignQ2FsbCBub3QgZm91bmQuIE9uZSBvZiB0aGUgcGFydGljaXBhbnQgcHJvYmFibHkgaHVuZ3VwLicsIGUpO1xuICAgICAgICAgICAgcmVhc29uID0gUlRDX0VSUk9SUy5DQUxMX05PVF9GT1VORDtcbiAgICAgICAgICAgIHRoaXMuX3J0Y1Nlc3Npb24uX3Nlc3Npb25SZXBvcnQuaGFuZHNoYWtpbmdGYWlsdXJlID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLmVycm9yKCdGYWlsZWQgaGFuZHNoYWtpbmcgd2l0aCBzaWduYWxpbmcgc2VydmVyJywgZSk7XG4gICAgICAgICAgICB0aGlzLl9ydGNTZXNzaW9uLl9zZXNzaW9uUmVwb3J0LnVzZXJCdXN5RmFpbHVyZSA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5fcnRjU2Vzc2lvbi5fc2Vzc2lvblJlcG9ydC5oYW5kc2hha2luZ0ZhaWx1cmUgPSB0cnVlO1xuICAgICAgICAgICAgcmVhc29uID0gUlRDX0VSUk9SUy5TSUdOQUxMSU5HX0hBTkRTSEFLRV9GQUlMVVJFO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudHJhbnNpdChuZXcgRmFpbGVkU3RhdGUodGhpcy5fcnRjU2Vzc2lvbiwgcmVhc29uKSk7XG4gICAgfVxuICAgIGdldCBuYW1lKCkge1xuICAgICAgICByZXR1cm4gXCJJbnZpdGVBbnN3ZXJTdGF0ZVwiO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBBY2NlcHRTdGF0ZSBleHRlbmRzIFJUQ1Nlc3Npb25TdGF0ZSB7XG4gICAgY29uc3RydWN0b3IocnRjU2Vzc2lvbiwgc2RwLCBjYW5kaWRhdGVzKSB7XG4gICAgICAgIHN1cGVyKHJ0Y1Nlc3Npb24pO1xuICAgICAgICB0aGlzLl9zZHAgPSBzZHA7XG4gICAgICAgIHRoaXMuX2NhbmRpZGF0ZXMgPSBjYW5kaWRhdGVzO1xuICAgIH1cbiAgICBfY3JlYXRlU2Vzc2lvbkRlc2NyaXB0aW9uKGluaXREaWN0KSB7XG4gICAgICAgIHJldHVybiBuZXcgUlRDU2Vzc2lvbkRlc2NyaXB0aW9uKGluaXREaWN0KTtcbiAgICB9XG4gICAgX2NyZWF0ZVJlbW90ZUNhbmRpZGF0ZShpbml0RGljdCkge1xuICAgICAgICByZXR1cm4gbmV3IFJUQ0ljZUNhbmRpZGF0ZShpbml0RGljdCk7XG4gICAgfVxuICAgIG9uRW50ZXIoKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgdmFyIHJ0Y1Nlc3Npb24gPSBzZWxmLl9ydGNTZXNzaW9uO1xuXG4gICAgICAgIGlmICghc2VsZi5fc2RwKSB7XG4gICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcignSW52YWxpZCByZW1vdGUgU0RQJyk7XG4gICAgICAgICAgICBydGNTZXNzaW9uLl9zdG9wU2Vzc2lvbigpO1xuICAgICAgICAgICAgcnRjU2Vzc2lvbi5fc2Vzc2lvblJlcG9ydC5pbnZhbGlkUmVtb3RlU0RQRmFpbHVyZSA9IHRydWU7XG4gICAgICAgICAgICBzZWxmLnRyYW5zaXQobmV3IEZhaWxlZFN0YXRlKHJ0Y1Nlc3Npb24sIFJUQ19FUlJPUlMuSU5WQUxJRF9SRU1PVEVfU0RQKSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSBpZiAoIXNlbGYuX2NhbmRpZGF0ZXMgfHwgc2VsZi5fY2FuZGlkYXRlcy5sZW5ndGggPCAxKSB7XG4gICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcignTm8gcmVtb3RlIElDRSBjYW5kaWRhdGUnKTtcbiAgICAgICAgICAgIHJ0Y1Nlc3Npb24uX3N0b3BTZXNzaW9uKCk7XG4gICAgICAgICAgICBydGNTZXNzaW9uLl9zZXNzaW9uUmVwb3J0Lm5vUmVtb3RlSWNlQ2FuZGlkYXRlRmFpbHVyZSA9IHRydWU7XG4gICAgICAgICAgICBzZWxmLnRyYW5zaXQobmV3IEZhaWxlZFN0YXRlKHJ0Y1Nlc3Npb24sIFJUQ19FUlJPUlMuTk9fUkVNT1RFX0lDRV9DQU5ESURBVEUpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJ0Y1Nlc3Npb24uX3Nlc3Npb25SZXBvcnQuaW52YWxpZFJlbW90ZVNEUEZhaWx1cmUgPSBmYWxzZTtcbiAgICAgICAgcnRjU2Vzc2lvbi5fc2Vzc2lvblJlcG9ydC5ub1JlbW90ZUljZUNhbmRpZGF0ZUZhaWx1cmUgPSBmYWxzZTtcbiAgICAgICAgc2VsZi5fcnRjU2Vzc2lvbi5fc3RyYXRlZ3kuc2V0UmVtb3RlRGVzY3JpcHRpb24oc2VsZiwgcnRjU2Vzc2lvbik7XG4gICAgfVxuICAgIG9uU2lnbmFsaW5nSGFuZHNoYWtlZCgpIHtcbiAgICAgICAgdGhpcy5fcnRjU2Vzc2lvbi5fc2Vzc2lvblJlcG9ydC5oYW5kc2hha2luZ1RpbWVNaWxsaXMgPSBEYXRlLm5vdygpIC0gdGhpcy5fcnRjU2Vzc2lvbi5fc2lnbmFsbGluZ0Nvbm5lY3RUaW1lc3RhbXA7XG4gICAgICAgIHRoaXMuX3NpZ25hbGluZ0hhbmRzaGFrZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLl9jaGVja0FuZFRyYW5zaXQoKTtcbiAgICB9XG4gICAgX2NoZWNrQW5kVHJhbnNpdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3NpZ25hbGluZ0hhbmRzaGFrZWQgJiYgdGhpcy5fcmVtb3RlRGVzY3JpcHRpb25TZXQpIHtcbiAgICAgICAgICAgIHRoaXMudHJhbnNpdChuZXcgVGFsa2luZ1N0YXRlKHRoaXMuX3J0Y1Nlc3Npb24pKTtcbiAgICAgICAgfSBlbHNlIGlmICghdGhpcy5fc2lnbmFsaW5nSGFuZHNoYWtlZCkge1xuICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKCdQZW5kaW5nIGhhbmRzaGFraW5nJyk7XG4gICAgICAgIH0gZWxzZSB7Ly9pbXBsaWVzIF9yZW1vdGVEZXNjcmlwdGlvblNldCA9PSBmYWxzZVxuICAgICAgICAgICAgdGhpcy5sb2dnZXIubG9nKCdQZW5kaW5nIHNldHRpbmcgcmVtb3RlIGRlc2NyaXB0aW9uJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiBcIkFjY2VwdFN0YXRlXCI7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFRhbGtpbmdTdGF0ZSBleHRlbmRzIFJUQ1Nlc3Npb25TdGF0ZSB7XG5cbiAgICBvbkVudGVyKCkge1xuICAgICAgICB0aGlzLl9zdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgICB0aGlzLl9ydGNTZXNzaW9uLl9zZXNzaW9uUmVwb3J0LnByZVRhbGtpbmdUaW1lTWlsbGlzID0gdGhpcy5fc3RhcnRUaW1lIC0gdGhpcy5fcnRjU2Vzc2lvbi5fY29ubmVjdFRpbWVTdGFtcDtcbiAgICAgICAgdGhpcy5fcnRjU2Vzc2lvbi5fb25TZXNzaW9uQ29ubmVjdGVkKHRoaXMuX3J0Y1Nlc3Npb24pO1xuICAgIH1cbiAgICBvblNpZ25hbGluZ1JlY29ubmVjdGVkKCkge1xuICAgIH1cbiAgICBvblJlbW90ZUh1bmd1cCgpIHtcbiAgICAgICAgdGhpcy5fcnRjU2Vzc2lvbi5fc2lnbmFsaW5nQ2hhbm5lbC5oYW5ndXAoKTtcbiAgICAgICAgdGhpcy50cmFuc2l0KG5ldyBEaXNjb25uZWN0ZWRTdGF0ZSh0aGlzLl9ydGNTZXNzaW9uKSk7XG4gICAgfVxuICAgIGhhbmd1cCgpIHtcbiAgICAgICAgdGhpcy5fcnRjU2Vzc2lvbi5fc2lnbmFsaW5nQ2hhbm5lbC5oYW5ndXAoKTtcbiAgICAgICAgdGhpcy50cmFuc2l0KG5ldyBEaXNjb25uZWN0ZWRTdGF0ZSh0aGlzLl9ydGNTZXNzaW9uKSk7XG4gICAgfVxuICAgIG9uSWNlU3RhdGVDaGFuZ2UoZXZ0KSB7XG4gICAgICAgIHZhciBpY2VTdGF0ZSA9IHRoaXMuX3J0Y1Nlc3Npb24uX3N0cmF0ZWd5Lm9uSWNlU3RhdGVDaGFuZ2UoZXZ0LCB0aGlzLl9ydGNTZXNzaW9uLl9wYyk7XG4gICAgICAgIHRoaXMubG9nZ2VyLmluZm8oJ0lDRSBDb25uZWN0aW9uIFN0YXRlOiAnLCBpY2VTdGF0ZSk7XG5cbiAgICAgICAgaWYgKGljZVN0YXRlID09IElDRV9DT05ORUNUSU9OX1NUQVRFLkRJU0NPTk5FQ1RFRCkge1xuICAgICAgICAgICAgdGhpcy5sb2dnZXIuaW5mbygnTG9zdCBJQ0UgY29ubmVjdGlvbicpO1xuICAgICAgICAgICAgdGhpcy5fcnRjU2Vzc2lvbi5fc2Vzc2lvblJlcG9ydC5pY2VDb25uZWN0aW9uc0xvc3QgKz0gMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaWNlU3RhdGUgPT0gSUNFX0NPTk5FQ1RJT05fU1RBVEUuRkFJTEVEKSB7XG4gICAgICAgICAgICB0aGlzLl9ydGNTZXNzaW9uLl9zZXNzaW9uUmVwb3J0LmljZUNvbm5lY3Rpb25zRmFpbGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uUGVlckNvbm5lY3Rpb25TdGF0ZUNoYW5nZSgpIHtcbiAgICAgICAgdmFyIHBlZXJDb25uZWN0aW9uU3RhdGUgPSB0aGlzLl9ydGNTZXNzaW9uLl9zdHJhdGVneS5vblBlZXJDb25uZWN0aW9uU3RhdGVDaGFuZ2UodGhpcy5fcnRjU2Vzc2lvbi5fcGMpO1xuICAgICAgICB0aGlzLmxvZ2dlci5pbmZvKCdQZWVyIENvbm5lY3Rpb24gU3RhdGU6ICcsIHBlZXJDb25uZWN0aW9uU3RhdGUpO1xuXG4gICAgICAgIGlmIChwZWVyQ29ubmVjdGlvblN0YXRlID09IFBFRVJfQ09OTkVDVElPTl9TVEFURS5GQUlMRUQpIHtcbiAgICAgICAgICAgIHRoaXMuX3J0Y1Nlc3Npb24uX3Nlc3Npb25SZXBvcnQucGVlckNvbm5lY3Rpb25GYWlsZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25FeGl0KCkge1xuICAgICAgICB0aGlzLl9ydGNTZXNzaW9uLl9zZXNzaW9uUmVwb3J0LnRhbGtpbmdUaW1lTWlsbGlzID0gRGF0ZS5ub3coKSAtIHRoaXMuX3N0YXJ0VGltZTtcbiAgICAgICAgdGhpcy5fcnRjU2Vzc2lvbi5fZGV0YWNoTWVkaWEoKTtcbiAgICAgICAgdGhpcy5fcnRjU2Vzc2lvbi5fc2Vzc2lvblJlcG9ydC5zZXNzaW9uRW5kVGltZSA9IG5ldyBEYXRlKCk7XG4gICAgICAgIHRoaXMuX3J0Y1Nlc3Npb24uX29uU2Vzc2lvbkNvbXBsZXRlZCh0aGlzLl9ydGNTZXNzaW9uKTtcbiAgICB9XG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiBcIlRhbGtpbmdTdGF0ZVwiO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBDbGVhblVwU3RhdGUgZXh0ZW5kcyBSVENTZXNzaW9uU3RhdGUge1xuICAgIG9uRW50ZXIoKSB7XG4gICAgICAgIHRoaXMuX3N0YXJ0VGltZSA9IERhdGUubm93KCk7XG4gICAgICAgIHRoaXMuX3J0Y1Nlc3Npb24uX3N0b3BTZXNzaW9uKCk7XG4gICAgICAgIHRoaXMuX3J0Y1Nlc3Npb24uX3Nlc3Npb25SZXBvcnQuY2xlYW51cFRpbWVNaWxsaXMgPSBEYXRlLm5vdygpIC0gdGhpcy5fc3RhcnRUaW1lO1xuICAgICAgICB0aGlzLl9ydGNTZXNzaW9uLl9vblNlc3Npb25EZXN0cm95ZWQodGhpcy5fcnRjU2Vzc2lvbiwgdGhpcy5fcnRjU2Vzc2lvbi5fc2Vzc2lvblJlcG9ydCk7XG4gICAgfVxuICAgIGdldCBuYW1lKCkge1xuICAgICAgICByZXR1cm4gXCJDbGVhblVwU3RhdGVcIjtcbiAgICB9XG4gICAgaGFuZ3VwKCkge1xuICAgICAgICAvL2RvIG5vdGhpbmcsIGFscmVhZHkgYXQgdGhlIGVuZCBvZiBsaWZlY3ljbGVcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgRGlzY29ubmVjdGVkU3RhdGUgZXh0ZW5kcyBDbGVhblVwU3RhdGUge1xuICAgIGdldCBuYW1lKCkge1xuICAgICAgICByZXR1cm4gXCJEaXNjb25uZWN0ZWRTdGF0ZVwiO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBGYWlsZWRTdGF0ZSBleHRlbmRzIENsZWFuVXBTdGF0ZSB7XG4gICAgY29uc3RydWN0b3IocnRjU2Vzc2lvbiwgZmFpbHVyZVJlYXNvbikge1xuICAgICAgICBzdXBlcihydGNTZXNzaW9uKTtcbiAgICAgICAgdGhpcy5fZmFpbHVyZVJlYXNvbiA9IGZhaWx1cmVSZWFzb247XG4gICAgfVxuICAgIG9uRW50ZXIoKSB7XG4gICAgICAgIHRoaXMuX3J0Y1Nlc3Npb24uX3Nlc3Npb25SZXBvcnQuc2Vzc2lvbkVuZFRpbWUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICB0aGlzLl9ydGNTZXNzaW9uLl9vblNlc3Npb25GYWlsZWQodGhpcy5fcnRjU2Vzc2lvbiwgdGhpcy5fZmFpbHVyZVJlYXNvbik7XG4gICAgICAgIHN1cGVyLm9uRW50ZXIoKTtcbiAgICB9XG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiBcIkZhaWxlZFN0YXRlXCI7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSdGNTZXNzaW9uIHtcbiAgICAvKipcbiAgICAgKiBCdWlsZCBhbiBBbWF6b25Db25uZWN0IFJUQyBzZXNzaW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gc2lnbmFsaW5nVXJpXG4gICAgICogQHBhcmFtIHsqfSBpY2VTZXJ2ZXJzIEFycmF5IG9mIGljZSBzZXJ2ZXJzXG4gICAgICogQHBhcmFtIHsqfSBjb250YWN0VG9rZW4gQSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBjb250YWN0IHRva2VuIChvcHRpb25hbClcbiAgICAgKiBAcGFyYW0geyp9IGxvZ2dlciBBbiBvYmplY3QgcHJvdmlkZXMgbG9nZ2luZyBmdW5jdGlvbnMsIHN1Y2ggYXMgY29uc29sZVxuICAgICAqIEBwYXJhbSB7Kn0gY29udGFjdElkIE11c3QgYmUgVVVJRCwgdW5pcXVlbHkgaWRlbnRpZmllcyB0aGUgc2Vzc2lvbi5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzaWduYWxpbmdVcmksIGljZVNlcnZlcnMsIGNvbnRhY3RUb2tlbiwgbG9nZ2VyLCBjb250YWN0SWQsIGNvbm5lY3Rpb25JZCwgd3NzTWFuYWdlciwgc3RyYXRlZ3kgPSBuZXcgU3RhbmRhcmRTdHJhdGVneSgpKSB7XG4gICAgICAgIGlmICghKHN0cmF0ZWd5IGluc3RhbmNlb2YgQ0NQSW5pdGlhdGlvblN0cmF0ZWd5SW50ZXJmYWNlKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBhIHN0cmF0ZWd5IG9mIHR5cGUgQ0NQSW5pdGlhdGlvblN0cmF0ZWd5SW50ZXJmYWNlJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBzaWduYWxpbmdVcmkgIT09ICdzdHJpbmcnIHx8IHNpZ25hbGluZ1VyaS50cmltKCkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSWxsZWdhbFBhcmFtZXRlcnMoJ3NpZ25hbGluZ1VyaSByZXF1aXJlZCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaWNlU2VydmVycykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IElsbGVnYWxQYXJhbWV0ZXJzKCdpY2VTZXJ2ZXJzIHJlcXVpcmVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBsb2dnZXIgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSWxsZWdhbFBhcmFtZXRlcnMoJ2xvZ2dlciByZXF1aXJlZCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghY29udGFjdElkKSB7XG4gICAgICAgICAgICB0aGlzLl9jYWxsSWQgPSB1dWlkKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9jYWxsSWQgPSBjb250YWN0SWQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc3RyYXRlZ3kgPSBzdHJhdGVneTtcbiAgICAgICAgdGhpcy5fY29ubmVjdGlvbklkID0gY29ubmVjdGlvbklkO1xuICAgICAgICB0aGlzLl93c3NNYW5hZ2VyID0gd3NzTWFuYWdlcjtcbiAgICAgICAgdGhpcy5fc2Vzc2lvblJlcG9ydCA9IG5ldyBTZXNzaW9uUmVwb3J0KCk7XG4gICAgICAgIHRoaXMuX3NpZ25hbGluZ1VyaSA9IHNpZ25hbGluZ1VyaTtcbiAgICAgICAgdGhpcy5faWNlU2VydmVycyA9IGljZVNlcnZlcnM7XG4gICAgICAgIHRoaXMuX2NvbnRhY3RUb2tlbiA9IGNvbnRhY3RUb2tlbjtcbiAgICAgICAgdGhpcy5fb3JpZ2luYWxMb2dnZXIgPSBsb2dnZXI7XG4gICAgICAgIHRoaXMuX2xvZ2dlciA9IHdyYXBMb2dnZXIodGhpcy5fb3JpZ2luYWxMb2dnZXIsIHRoaXMuX2NhbGxJZCwgJ1NFU1NJT04nKTtcbiAgICAgICAgdGhpcy5faWNlVGltZW91dE1pbGxpcyA9IERFRkFVTFRfSUNFX1RJTUVPVVRfTVM7XG4gICAgICAgIHRoaXMuX2d1bVRpbWVvdXRNaWxsaXMgPSBERUZBVUxUX0dVTV9USU1FT1VUX01TO1xuXG4gICAgICAgIHRoaXMuX2VuYWJsZUF1ZGlvID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fZW5hYmxlVmlkZW8gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fZmFjaW5nTW9kZSA9ICd1c2VyJztcbiAgICAgICAgdGhpcy5fbGVnYWN5U3RhdHNSZXBvcnRTdXBwb3J0ID0gZmFsc2U7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiB1c2VyIG1heSBwcm92aWRlIHRoZSBzdHJlYW0gdG8gdGhlIFJ0Y1Nlc3Npb24gZGlyZWN0bHkgdG8gY29ubmVjdCB0byB0aGUgb3RoZXIgZW5kLlxuICAgICAgICAgKiB1c2VyIG1heSBhbHNvIGFjcXVpcmUgdGhlIHN0cmVhbSBmcm9tIHRoZSBsb2NhbCBkZXZpY2UuXG4gICAgICAgICAqIFRoaXMgZmxhZyBpcyB1c2VkIHRvIHRyYWNrIHdoZXJlIHRoZSBzdHJlYW0gaXMgYWNxdWlyZWQuXG4gICAgICAgICAqIElmIGl0J3MgYWNxdWlyZWQgZnJvbSBsb2NhbCBkZXZpY2VzLCB0aGVuIHdlIG11c3QgY2xvc2UgdGhlIHN0cmVhbSB3aGVuIHRoZSBzZXNzaW9uIGVuZHMuXG4gICAgICAgICAqIElmIGl0J3MgcHJvdmlkZWQgYnkgdXNlciAocmF0aGVyIHRoYW4gbG9jYWwgY2FtZXJhL21pY3JvcGhvbmUpLCB0aGVuIHdlIHNob3VsZCBsZWF2ZSBpdCBvcGVuIHdoZW4gdGhlXG4gICAgICAgICAqIHNlc3Npb24gZW5kcy5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX2lzVXNlclByb3ZpZGVkU3RyZWFtID0gZmFsc2U7XG5cbiAgICAgICAgdGhpcy5fb25HdW1FcnJvciA9XG4gICAgICAgIHRoaXMuX29uR3VtU3VjY2VzcyA9XG4gICAgICAgIHRoaXMuX29uTG9jYWxTdHJlYW1BZGRlZCA9XG4gICAgICAgIHRoaXMuX29uU2Vzc2lvbkZhaWxlZCA9XG4gICAgICAgIHRoaXMuX29uU2Vzc2lvbkluaXRpYWxpemVkID1cbiAgICAgICAgdGhpcy5fb25TaWduYWxpbmdDb25uZWN0ZWQgPVxuICAgICAgICB0aGlzLl9vbkljZUNvbGxlY3Rpb25Db21wbGV0ZSA9XG4gICAgICAgIHRoaXMuX29uU2lnbmFsaW5nU3RhcnRlZCA9XG4gICAgICAgIHRoaXMuX29uU2Vzc2lvbkNvbm5lY3RlZCA9XG4gICAgICAgIHRoaXMuX29uUmVtb3RlU3RyZWFtQWRkZWQgPVxuICAgICAgICB0aGlzLl9vblNlc3Npb25Db21wbGV0ZWQgPVxuICAgICAgICB0aGlzLl9vblNlc3Npb25EZXN0cm95ZWQgPSAoKSA9PiB7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGdldCBzZXNzaW9uUmVwb3J0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2Vzc2lvblJlcG9ydDtcbiAgICB9XG4gICAgZ2V0IGNhbGxJZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NhbGxJZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogZ2V0TWVkaWFTdHJlYW0gcmV0dXJucyB0aGUgbG9jYWwgc3RyZWFtLCB3aGljaCBtYXkgYmUgYWNxdWlyZWQgZnJvbSBsb2NhbCBkZXZpY2Ugb3IgZnJvbSB1c2VyIHByb3ZpZGVkIHN0cmVhbS5cbiAgICAgKiBSYXRoZXIgdGhhbiBnZXR0aW5nIGEgc3RyZWFtIGJ5IGNhbGxpbmcgZ2V0VXNlck1lZGlhICh3aGljaCBnZXRzIGEgc3RyZWFtIGZyb20gbG9jYWwgZGV2aWNlIHN1Y2ggYXMgY2FtZXJhKSxcbiAgICAgKiB1c2VyIGNvdWxkIGFsc28gcHJvdmlkZSB0aGUgc3RyZWFtIHRvIHRoZSBSdGNTZXNzaW9uIGRpcmVjdGx5IHRvIGNvbm5lY3QgdG8gdGhlIG90aGVyIGVuZC5cbiAgICAgKi9cbiAgICBnZXQgbWVkaWFTdHJlYW0oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9sb2NhbFN0cmVhbTtcbiAgICB9XG4gICAgZ2V0IHJlbW90ZVZpZGVvU3RyZWFtKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVtb3RlVmlkZW9TdHJlYW07XG4gICAgfVxuICAgIHBhdXNlTG9jYWxWaWRlbygpIHtcbiAgICAgICAgaWYodGhpcy5fbG9jYWxTdHJlYW0pIHtcbiAgICAgICAgICAgIHZhciB2aWRlb1RyYWNrID0gdGhpcy5fbG9jYWxTdHJlYW0uZ2V0VmlkZW9UcmFja3MoKVswXTtcbiAgICAgICAgICAgIGlmKHZpZGVvVHJhY2spIHtcbiAgICAgICAgICAgICAgICB2aWRlb1RyYWNrLmVuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXN1bWVMb2NhbFZpZGVvKCkge1xuICAgICAgICBpZih0aGlzLl9sb2NhbFN0cmVhbSkge1xuICAgICAgICAgICAgdmFyIHZpZGVvVHJhY2sgPSB0aGlzLl9sb2NhbFN0cmVhbS5nZXRWaWRlb1RyYWNrcygpWzBdO1xuICAgICAgICAgICAgaWYodmlkZW9UcmFjaykge1xuICAgICAgICAgICAgICAgIHZpZGVvVHJhY2suZW5hYmxlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcGF1c2VSZW1vdGVWaWRlbygpIHtcbiAgICAgICAgaWYgKHRoaXMuX3JlbW90ZVZpZGVvU3RyZWFtKSB7XG4gICAgICAgICAgICB2YXIgdmlkZW9UcmFjayA9IHRoaXMuX3JlbW90ZVZpZGVvU3RyZWFtLmdldFRyYWNrcygpWzFdO1xuICAgICAgICAgICAgaWYodmlkZW9UcmFjaykge1xuICAgICAgICAgICAgICAgIHZpZGVvVHJhY2suZW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJlc3VtZVJlbW90ZVZpZGVvKCkge1xuICAgICAgICBpZiAodGhpcy5fcmVtb3RlVmlkZW9TdHJlYW0pIHtcbiAgICAgICAgICAgIHZhciB2aWRlb1RyYWNrID0gdGhpcy5fcmVtb3RlVmlkZW9TdHJlYW0uZ2V0VHJhY2tzKClbMV07XG4gICAgICAgICAgICBpZih2aWRlb1RyYWNrKSB7XG4gICAgICAgICAgICAgICAgdmlkZW9UcmFjay5lbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBwYXVzZUxvY2FsQXVkaW8oKSB7XG4gICAgICAgIGlmICh0aGlzLl9sb2NhbFN0cmVhbSkge1xuICAgICAgICAgICAgdmFyIGF1ZGlvVHJhY2sgPSB0aGlzLl9sb2NhbFN0cmVhbS5nZXRBdWRpb1RyYWNrcygpWzBdO1xuICAgICAgICAgICAgaWYoYXVkaW9UcmFjaykge1xuICAgICAgICAgICAgICAgIGF1ZGlvVHJhY2suZW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJlc3VtZUxvY2FsQXVkaW8oKSB7XG4gICAgICAgIGlmICh0aGlzLl9sb2NhbFN0cmVhbSkge1xuICAgICAgICAgICAgdmFyIGF1ZGlvVHJhY2sgPSB0aGlzLl9sb2NhbFN0cmVhbS5nZXRBdWRpb1RyYWNrcygpWzBdO1xuICAgICAgICAgICAgaWYoYXVkaW9UcmFjaykge1xuICAgICAgICAgICAgICAgIGF1ZGlvVHJhY2suZW5hYmxlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcGF1c2VSZW1vdGVBdWRpbygpIHtcbiAgICAgICAgaWYgKHRoaXMuX3JlbW90ZUF1ZGlvU3RyZWFtKSB7XG4gICAgICAgICAgICB2YXIgYXVkaW9UcmFjayA9IHRoaXMuX3JlbW90ZUF1ZGlvU3RyZWFtLmdldFRyYWNrcygpWzBdO1xuICAgICAgICAgICAgaWYoYXVkaW9UcmFjaykge1xuICAgICAgICAgICAgICAgIGF1ZGlvVHJhY2suZW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJlc3VtZVJlbW90ZUF1ZGlvKCkge1xuICAgICAgICBpZiAodGhpcy5fcmVtb3RlQXVkaW9TdHJlYW0pIHtcbiAgICAgICAgICAgIHZhciBhdWRpb1RyYWNrID0gdGhpcy5fcmVtb3RlQXVkaW9TdHJlYW0uZ2V0VHJhY2tzKClbMF07XG4gICAgICAgICAgICBpZihhdWRpb1RyYWNrKSB7XG4gICAgICAgICAgICAgICAgYXVkaW9UcmFjay5lbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsYmFjayB3aGVuIGdVTSBzdWNjZWVkcy5cbiAgICAgKiBGaXJzdCBwYXJhbSBpcyBSdGNTZXNzaW9uIG9iamVjdC5cbiAgICAgKi9cbiAgICBzZXQgb25HdW1TdWNjZXNzKGhhbmRsZXIpIHtcbiAgICAgICAgdGhpcy5fb25HdW1TdWNjZXNzID0gaGFuZGxlcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGJhY2sgd2hlbiBnVU0gZmFpbHMuXG4gICAgICogRmlyc3QgcGFyYW0gaXMgUnRjU2Vzc2lvbiBvYmplY3QuXG4gICAgICogU2Vjb25kIHBhcmFtIGlzIHRoZSBlcnJvci5cbiAgICAgKi9cbiAgICBzZXQgb25HdW1FcnJvcihoYW5kbGVyKSB7XG4gICAgICAgIHRoaXMuX29uR3VtRXJyb3IgPSBoYW5kbGVyO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsYmFjayBpZiBmYWlsZWQgaW5pdGlhbGl6aW5nIGxvY2FsIHJlc291cmNlc1xuICAgICAqIEZpcnN0IHBhcmFtIGlzIFJ0Y1Nlc3Npb24gb2JqZWN0LlxuICAgICAqL1xuICAgIHNldCBvblNlc3Npb25GYWlsZWQoaGFuZGxlcikge1xuICAgICAgICB0aGlzLl9vblNlc3Npb25GYWlsZWQgPSBoYW5kbGVyO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsYmFjayBhZnRlciBsb2NhbCB1c2VyIG1lZGlhIHN0cmVhbSBpcyBhZGRlZCB0byB0aGUgc2Vzc2lvbi5cbiAgICAgKiBGaXJzdCBwYXJhbSBpcyBSdGNTZXNzaW9uIG9iamVjdC5cbiAgICAgKiBTZWNvbmQgcGFyYW0gaXMgbWVkaWEgc3RyZWFtXG4gICAgICovXG4gICAgc2V0IG9uTG9jYWxTdHJlYW1BZGRlZChoYW5kbGVyKSB7XG4gICAgICAgIHRoaXMuX29uTG9jYWxTdHJlYW1BZGRlZCA9IGhhbmRsZXI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxiYWNrIHdoZW4gYWxsIGxvY2FsIHJlc291cmNlcyBhcmUgcmVhZHkuIEVzdGFibGlzaGluZyBzaWduYWxpbmcgY2hhbmVsIGFuZCBJQ0UgY29sbGVjdGlvbiBoYXBwZW5zIGF0IHRoZSBzYW1lIHRpbWUgYWZ0ZXIgdGhpcy5cbiAgICAgKiBGaXJzdCBwYXJhbSBpcyBSdGNTZXNzaW9uIG9iamVjdC5cbiAgICAgKi9cbiAgICBzZXQgb25TZXNzaW9uSW5pdGlhbGl6ZWQoaGFuZGxlcikge1xuICAgICAgICB0aGlzLl9vblNlc3Npb25Jbml0aWFsaXplZCA9IGhhbmRsZXI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxiYWNrIHdoZW4gc2lnbmFsaW5nIGNoYW5uZWwgaXMgZXN0YWJsaXNoZWQuXG4gICAgICogUlRDIHNlc3Npb24gd2lsbCBtb3ZlIGZvcndhcmQgb25seSBpZiBvblNpZ25hbGluZ0Nvbm5lY3RlZCBhbmQgb25JY2VDb2xsZWN0aW9uQ29tcGxldGUgYXJlIGJvdGggY2FsbGVkLlxuICAgICAqXG4gICAgICogRmlyc3QgcGFyYW0gaXMgUnRjU2Vzc2lvbiBvYmplY3QuXG4gICAgICovXG4gICAgc2V0IG9uU2lnbmFsaW5nQ29ubmVjdGVkKGhhbmRsZXIpIHtcbiAgICAgICAgdGhpcy5fb25TaWduYWxpbmdDb25uZWN0ZWQgPSBoYW5kbGVyO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsYmFjayB3aGVuIElDRSBjb2xsZWN0aW9uIGNvbXBsZXRlcyBlaXRoZXIgYmVjYXVzZSB0aGVyZSBpcyBubyBtb3JlIGNhbmRpZGF0ZSBvciBjb2xsZWN0aW9uIHRpbWVkIG91dC5cbiAgICAgKiBSVEMgc2Vzc2lvbiB3aWxsIG1vdmUgZm9yd2FyZCBvbmx5IGlmIG9uU2lnbmFsaW5nQ29ubmVjdGVkIGFuZCBvbkljZUNvbGxlY3Rpb25Db21wbGV0ZSBhcmUgYm90aCBjYWxsZWQuXG4gICAgICpcbiAgICAgKiBGaXJzdCBwYXJhbSBpcyBSdGNTZXNzaW9uIG9iamVjdC5cbiAgICAgKiBTZWNvbmQgcGFyYW0gaXMgYm9vbGVhbiwgVFJVRSAtIElDRSBjb2xsZWN0aW9uIHRpbWVkIG91dC5cbiAgICAgKiBUaGlyZCBwYXJhbSBpcyBudW1iZXIgb2YgY2FuZGlkYXRlcyBjb2xsZWN0ZWQuXG4gICAgICovXG4gICAgc2V0IG9uSWNlQ29sbGVjdGlvbkNvbXBsZXRlKGhhbmRsZXIpIHtcbiAgICAgICAgdGhpcy5fb25JY2VDb2xsZWN0aW9uQ29tcGxldGUgPSBoYW5kbGVyO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsYmFjayB3aGVuIHNpZ25hbGluZyBjaGFubmVsIGlzIGVzdGFibGlzaGVkIGFuZCBJQ0UgY29sbGVjdGlvbiBjb21wbGV0ZWQgd2l0aCBhdCBsZWFzdCBvbmUgY2FuZGlkYXRlLlxuICAgICAqIEZpcnN0IHBhcmFtIGlzIFJ0Y1Nlc3Npb24gb2JqZWN0LlxuICAgICAqL1xuICAgIHNldCBvblNpZ25hbGluZ1N0YXJ0ZWQoaGFuZGxlcikge1xuICAgICAgICB0aGlzLl9vblNpZ25hbGluZ1N0YXJ0ZWQgPSBoYW5kbGVyO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsYmFjayB3aGVuIHRoZSBjYWxsIGlzIGVzdGFibGlzaGVkIChoYW5kc2hha2VkIGFuZCBtZWRpYSBzdHJlYW0gc2hvdWxkIGJlIGZsb3dpbmcpXG4gICAgICogRmlyc3QgcGFyYW0gaXMgUnRjU2Vzc2lvbiBvYmplY3QuXG4gICAgICovXG4gICAgc2V0IG9uU2Vzc2lvbkNvbm5lY3RlZChoYW5kbGVyKSB7XG4gICAgICAgIHRoaXMuX29uU2Vzc2lvbkNvbm5lY3RlZCA9IGhhbmRsZXI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxiYWNrIGFmdGVyIHJlbW90ZSBtZWRpYSBzdHJlYW0gaXMgYWRkZWQgdG8gdGhlIHNlc3Npb24uXG4gICAgICogVGhpcyBjb3VsZCBiZSBjYWxsZWQgbXVsdGlwbGUgdGltZXMgd2l0aCB0aGUgc2FtZSBzdHJlYW0gaWYgbXVsdGlwbGUgdHJhY2tzIGFyZSBpbmNsdWRlZCBpbiB0aGUgc2FtZSBzdHJlYW0uXG4gICAgICpcbiAgICAgKiBGaXJzdCBwYXJhbSBpcyBSdGNTZXNzaW9uIG9iamVjdC5cbiAgICAgKiBTZWNvbmQgcGFyYW0gaXMgbWVkaWEgc3RyZWFtIHRyYWNrLlxuICAgICAqL1xuICAgIHNldCBvblJlbW90ZVN0cmVhbUFkZGVkKGhhbmRsZXIpIHtcbiAgICAgICAgdGhpcy5fb25SZW1vdGVTdHJlYW1BZGRlZCA9IGhhbmRsZXI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxiYWNrIHdoZW4gdGhlIGhhbmd1cCBpcyBpbml0aWF0ZWQgKGltcGxpZXMgdGhlIGNhbGwgd2FzIHN1Y2Nlc3NmdWxseSBlc3RhYmxpc2hlZCkuXG4gICAgICogRmlyc3QgcGFyYW0gaXMgUnRjU2Vzc2lvbiBvYmplY3QuXG4gICAgICovXG4gICAgc2V0IG9uU2Vzc2lvbkNvbXBsZXRlZChoYW5kbGVyKSB7XG4gICAgICAgIHRoaXMuX29uU2Vzc2lvbkNvbXBsZXRlZCA9IGhhbmRsZXI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxiYWNrIGFmdGVyIHNlc3Npb24gaXMgY2xlYW5lZCB1cCwgbm8gbWF0dGVyIGlmIHRoZSBjYWxsIHdhcyBzdWNjZXNzZnVsbHkgZXN0YWJsaXNoZWQgb3Igbm90LlxuICAgICAqIEZpcnN0IHBhcmFtIGlzIFJ0Y1Nlc3Npb24gb2JqZWN0LlxuICAgICAqIFNlY29uZCBwYXJhbSBpcyBTZXNzaW9uUmVwb3J0IG9iamVjdC5cbiAgICAgKi9cbiAgICBzZXQgb25TZXNzaW9uRGVzdHJveWVkKGhhbmRsZXIpIHtcbiAgICAgICAgdGhpcy5fb25TZXNzaW9uRGVzdHJveWVkID0gaGFuZGxlcjtcbiAgICB9XG4gICAgc2V0IGVuYWJsZUF1ZGlvKGZsYWcpIHtcbiAgICAgICAgdGhpcy5fZW5hYmxlQXVkaW8gPSBmbGFnO1xuICAgIH1cbiAgICBzZXQgZWNob0NhbmNlbGxhdGlvbihmbGFnKSB7XG4gICAgICAgIHRoaXMuX2VjaG9DYW5jZWxsYXRpb24gPSBmbGFnO1xuICAgIH1cbiAgICBzZXQgZW5hYmxlVmlkZW8oZmxhZykge1xuICAgICAgICB0aGlzLl9lbmFibGVWaWRlbyA9IGZsYWc7XG4gICAgfVxuICAgIHNldCBtYXhWaWRlb0ZyYW1lUmF0ZShmcmFtZVJhdGUpIHtcbiAgICAgICAgdGhpcy5fbWF4VmlkZW9GcmFtZVJhdGUgPSBmcmFtZVJhdGU7XG4gICAgfVxuICAgIHNldCBtaW5WaWRlb0ZyYW1lUmF0ZShmcmFtZVJhdGUpIHtcbiAgICAgICAgdGhpcy5fbWluVmlkZW9GcmFtZVJhdGUgPSBmcmFtZVJhdGU7XG4gICAgfVxuICAgIHNldCB2aWRlb0ZyYW1lUmF0ZShmcmFtZVJhdGUpIHtcbiAgICAgICAgdGhpcy5fdmlkZW9GcmFtZVJhdGUgPSBmcmFtZVJhdGU7XG4gICAgfVxuICAgIHNldCBtYXhWaWRlb1dpZHRoKHdpZHRoKSB7XG4gICAgICAgIHRoaXMuX21heFZpZGVvV2lkdGggPSB3aWR0aDtcbiAgICB9XG4gICAgc2V0IG1pblZpZGVvV2lkdGgod2lkdGgpIHtcbiAgICAgICAgdGhpcy5fbWluVmlkZW9XaWR0aCA9IHdpZHRoO1xuICAgIH1cbiAgICBzZXQgaWRlYWxWaWRlb1dpZHRoKHdpZHRoKSB7XG4gICAgICAgIHRoaXMuX2lkZWFsVmlkZW9XaWR0aCA9IHdpZHRoO1xuICAgIH1cbiAgICBzZXQgbWF4VmlkZW9IZWlnaHQoaGVpZ2h0KSB7XG4gICAgICAgIHRoaXMuX21heFZpZGVvSGVpZ2h0ID0gaGVpZ2h0O1xuICAgIH1cbiAgICBzZXQgbWluVmlkZW9IZWlnaHQoaGVpZ2h0KSB7XG4gICAgICAgIHRoaXMuX21pblZpZGVvSGVpZ2h0ID0gaGVpZ2h0O1xuICAgIH1cbiAgICBzZXQgaWRlYWxWaWRlb0hlaWdodChoZWlnaHQpIHtcbiAgICAgICAgdGhpcy5faWRlYWxWaWRlb0hlaWdodCA9IGhlaWdodDtcbiAgICB9XG4gICAgc2V0IGZhY2luZ01vZGUobW9kZSkge1xuICAgICAgICB0aGlzLl9mYWNpbmdNb2RlID0gbW9kZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogT3B0aW9uYWwuIFJ0Y1Nlc3Npb24gd2lsbCBncmFiIGlucHV0IGRldmljZSBpZiB0aGlzIGlzIG5vdCBzcGVjaWZpZWQuXG4gICAgICogUGxlYXNlIG5vdGU6IHRoaXMgUnRjU2Vzc2lvbiBjbGFzcyBvbmx5IHN1cHBvcnQgc2luZ2xlIGF1ZGlvIHRyYWNrIGFuZC9vciBzaW5nbGUgdmlkZW8gdHJhY2suXG4gICAgICovXG4gICAgc2V0IG1lZGlhU3RyZWFtKGlucHV0KSB7XG4gICAgICAgIHRoaXMuX2xvY2FsU3RyZWFtID0gaW5wdXQ7XG4gICAgICAgIHRoaXMuX2lzVXNlclByb3ZpZGVkU3RyZWFtID0gdHJ1ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTmVlZGVkLCBleHBlY3QgYW4gYXVkaW8gZWxlbWVudCB0aGF0IGNhbiBiZSB1c2VkIHRvIHBsYXkgcmVtb3RlIGF1ZGlvIHN0cmVhbS5cbiAgICAgKi9cbiAgICBzZXQgcmVtb3RlQXVkaW9FbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5fcmVtb3RlQXVkaW9FbGVtZW50ID0gZWxlbWVudDtcbiAgICB9XG4gICAgc2V0IHJlbW90ZVZpZGVvRWxlbWVudChlbGVtZW50KSB7XG4gICAgICAgIHRoaXMuX3JlbW90ZVZpZGVvRWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE92ZXJyaWRlIHRoZSBkZWZhdWx0IHNpZ25hbGluZyBjb25uZWN0IHRpbWUgb3V0LlxuICAgICAqL1xuICAgIHNldCBzaWduYWxpbmdDb25uZWN0VGltZW91dChtcykge1xuICAgICAgICB0aGlzLl9zaWduYWxpbmdDb25uZWN0VGltZW91dCA9IG1zO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBPdmVycmlkZSB0aGUgZGVmYXVsdCBJQ0UgY29sbGVjdGlvbiB0aW1lIGxpbWl0LlxuICAgICAqL1xuICAgIHNldCBpY2VUaW1lb3V0TWlsbGlzKHRpbWVvdXRNaWxsaXMpIHtcbiAgICAgICAgdGhpcy5faWNlVGltZW91dE1pbGxpcyA9IHRpbWVvdXRNaWxsaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE92ZXJyaWRlIHRoZSBkZWZhdWx0IEdVTSB0aW1lb3V0IHRpbWUgbGltaXQuXG4gICAgICovXG4gICAgc2V0IGd1bVRpbWVvdXRNaWxsaXModGltZW91dE1pbGxpcykge1xuICAgICAgICB0aGlzLl9ndW1UaW1lb3V0TWlsbGlzID0gdGltZW91dE1pbGxpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogY29ubmVjdC1ydGMtanMgaW5pdGlhdGUgdGhlIGhhbmRzaGFraW5nIHdpdGggYWxsIGJyb3dzZXIgc3VwcG9ydGVkIGNvZGVjIGJ5IGRlZmF1bHQsIEFtYXpvbiBDb25uZWN0IHNlcnZpY2Ugd2lsbCBjaG9vc2UgdGhlIGNvZGVjIGFjY29yZGluZyB0byBpdHMgcHJlZmVyZW5jZSBzZXR0aW5nLlxuICAgICAqIFNldHRpbmcgdGhpcyBhdHRyaWJ1dGUgd2lsbCBmb3JjZSBjb25uZWN0LXJ0Yy1qcyB0byBvbmx5IHVzZSBzcGVjaWZpZWQgY29kZWMuXG4gICAgICogV0FSTklORzogU2V0dGluZyB0aGlzIHRvIHVuc3VwcG9ydGVkIGNvZGVjIHdpbGwgY2F1c2UgdGhlIGZhaWx1cmUgb2YgaGFuZHNoYWtpbmcuXG4gICAgICogU3VwcG9ydGVkIGF1ZGlvIGNvZGVjczogb3B1cy5cbiAgICAgKi9cbiAgICBzZXQgZm9yY2VBdWRpb0NvZGVjKGF1ZGlvQ29kZWMpIHtcbiAgICAgICAgdGhpcy5fZm9yY2VBdWRpb0NvZGVjID0gYXVkaW9Db2RlYztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBjb25uZWN0LXJ0Yy1qcyBpbml0aWF0ZSB0aGUgaGFuZHNoYWtpbmcgd2l0aCBhbGwgYnJvd3NlciBzdXBwb3J0ZWQgY29kZWMgYnkgZGVmYXVsdCwgQW1hem9uIENvbm5lY3Qgc2VydmljZSB3aWxsIGNob29zZSB0aGUgY29kZWMgYWNjb3JkaW5nIHRvIGl0cyBwcmVmZXJlbmNlIHNldHRpbmcuXG4gICAgICogU2V0dGluZyB0aGlzIGF0dHJpYnV0ZSB3aWxsIGZvcmNlIGNvbm5lY3QtcnRjLWpzIHRvIG9ubHkgdXNlIHNwZWNpZmllZCBjb2RlYy5cbiAgICAgKiBXQVJOSU5HOiBTZXR0aW5nIHRoaXMgdG8gdW5zdXBwb3J0ZWQgY29kZWMgd2lsbCBjYXVzZSB0aGUgZmFpbHVyZSBvZiBoYW5kc2hha2luZy5cbiAgICAgKiBTdXBwb3J0ZWQgdmlkZW8gY29kZWNzOiBWUDgsIFZQOSwgSDI2NC5cbiAgICAgKi9cbiAgICBzZXQgZm9yY2VWaWRlb0NvZGVjKHZpZGVvQ29kZWMpIHtcbiAgICAgICAgdGhpcy5fZm9yY2VWaWRlb0NvZGVjID0gdmlkZW9Db2RlYztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBjb25uZWN0LXJ0Yy1qcyBkaXNhYmxlcyBPUFVTIERUWCBieSBkZWZhdWx0IGJlY2F1c2UgaXQgaGFybXMgYXVkaW8gcXVhbGl0eS5cbiAgICAgKiBAcGFyYW0gZmxhZyBib29sZWFuXG4gICAgICovXG4gICAgc2V0IGVuYWJsZU9wdXNEdHgoZmxhZykge1xuICAgICAgICB0aGlzLl9lbmFibGVPcHVzRHR4ID0gZmxhZztcbiAgICB9XG5cbiAgICB0cmFuc2l0KG5leHRTdGF0ZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5fbG9nZ2VyLmluZm8oKHRoaXMuX3N0YXRlID8gdGhpcy5fc3RhdGUubmFtZSA6ICdudWxsJykgKyAnID0+ICcgKyBuZXh0U3RhdGUubmFtZSk7XG4gICAgICAgICAgICBpZiAodGhpcy5fc3RhdGUgJiYgdGhpcy5fc3RhdGUub25FeGl0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGUub25FeGl0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IG5leHRTdGF0ZTtcbiAgICAgICAgICAgIGlmIChuZXh0U3RhdGUub25FbnRlcikge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIG5leHRTdGF0ZS5vbkVudGVyKCk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9sb2dnZXIud2FybihuZXh0U3RhdGUubmFtZSArICcjb25FbnRlciBmYWlsZWQnLCBlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnNhZmUtZmluYWxseVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9jcmVhdGVTaWduYWxpbmdDaGFubmVsKCkge1xuICAgICAgICB2YXIgc2lnbmFsaW5nQ2hhbm5lbCA9IG5ldyBSdGNTaWduYWxpbmcodGhpcy5fY2FsbElkLCB0aGlzLl9zaWduYWxpbmdVcmksIHRoaXMuX2NvbnRhY3RUb2tlbiwgdGhpcy5fb3JpZ2luYWxMb2dnZXIsIHRoaXMuX3NpZ25hbGluZ0Nvbm5lY3RUaW1lb3V0LCB0aGlzLl9jb25uZWN0aW9uSWQsIHRoaXMuX3dzc01hbmFnZXIpO1xuICAgICAgICBzaWduYWxpbmdDaGFubmVsLm9uQ29ubmVjdGVkID0gaGl0Y2godGhpcywgdGhpcy5fc2lnbmFsaW5nQ29ubmVjdGVkKTtcbiAgICAgICAgc2lnbmFsaW5nQ2hhbm5lbC5vbkFuc3dlcmVkID0gaGl0Y2godGhpcywgdGhpcy5fc2lnbmFsaW5nQW5zd2VyZWQpO1xuICAgICAgICBzaWduYWxpbmdDaGFubmVsLm9uSGFuZHNoYWtlZCA9IGhpdGNoKHRoaXMsIHRoaXMuX3NpZ25hbGluZ0hhbmRzaGFrZWQpO1xuICAgICAgICBzaWduYWxpbmdDaGFubmVsLm9uUmVtb3RlSHVuZ3VwID0gaGl0Y2godGhpcywgdGhpcy5fc2lnbmFsaW5nUmVtb3RlSHVuZ3VwKTtcbiAgICAgICAgc2lnbmFsaW5nQ2hhbm5lbC5vbkZhaWxlZCA9IGhpdGNoKHRoaXMsIHRoaXMuX3NpZ25hbGluZ0ZhaWxlZCk7XG4gICAgICAgIHNpZ25hbGluZ0NoYW5uZWwub25EaXNjb25uZWN0ZWQgPSBoaXRjaCh0aGlzLCB0aGlzLl9zaWduYWxpbmdEaXNjb25uZWN0ZWQpO1xuXG4gICAgICAgIHRoaXMuX3NpZ25hbGluZ0NoYW5uZWwgPSBzaWduYWxpbmdDaGFubmVsO1xuXG4gICAgICAgIHJldHVybiBzaWduYWxpbmdDaGFubmVsO1xuICAgIH1cblxuICAgIF9zaWduYWxpbmdDb25uZWN0ZWQoKSB7XG4gICAgICAgIHRoaXMuX3N0YXRlLm9uU2lnbmFsaW5nQ29ubmVjdGVkKCk7XG4gICAgfVxuICAgIF9zaWduYWxpbmdBbnN3ZXJlZChzZHAsIGNhbmRpZGF0ZXMpIHtcbiAgICAgICAgdGhpcy5fc3RhdGUub25TaWduYWxpbmdBbnN3ZXJlZChzZHAsIGNhbmRpZGF0ZXMpO1xuICAgIH1cbiAgICBfc2lnbmFsaW5nSGFuZHNoYWtlZCgpIHtcbiAgICAgICAgdGhpcy5fc3RhdGUub25TaWduYWxpbmdIYW5kc2hha2VkKCk7XG4gICAgfVxuICAgIF9zaWduYWxpbmdSZW1vdGVIdW5ndXAoKSB7XG4gICAgICAgIHRoaXMuX3N0YXRlLm9uUmVtb3RlSHVuZ3VwKCk7XG4gICAgfVxuICAgIF9zaWduYWxpbmdGYWlsZWQoZSkge1xuICAgICAgICB0aGlzLl9zdGF0ZS5vblNpZ25hbGluZ0ZhaWxlZChlKTtcbiAgICB9XG4gICAgX3NpZ25hbGluZ0Rpc2Nvbm5lY3RlZCgpIHtcbiAgICB9XG4gICAgX2NyZWF0ZVBlZXJDb25uZWN0aW9uKGNvbmZpZ3VyYXRpb24sIG9wdGlvbmFsQ29uZmlndXJhdGlvbikge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3RyYXRlZ3kuX2NyZWF0ZVBlZXJDb25uZWN0aW9uKGNvbmZpZ3VyYXRpb24sIG9wdGlvbmFsQ29uZmlndXJhdGlvbik7XG4gICAgfVxuICAgIGNvbm5lY3QocGMpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICB2YXIgbm93ID0gbmV3IERhdGUoKTtcbiAgICAgICAgc2VsZi5fc2Vzc2lvblJlcG9ydC5zZXNzaW9uU3RhcnRUaW1lID0gbm93O1xuICAgICAgICBzZWxmLl9jb25uZWN0VGltZVN0YW1wID0gbm93LmdldFRpbWUoKTtcbiAgICAgICAgaWYgKHBjICYmIHBjLnNpZ25hbGluZ1N0YXRlICE9ICdjbG9zZWQnKSB7XG4gICAgICAgICAgICBzZWxmLl9wYyA9IHBjO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHBjKSB7XG4gICAgICAgICAgICAgICAgcGMuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICBwYyA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBSVENfUEVFUl9DT05ORUNUSU9OX0NPTkZJRy5pY2VTZXJ2ZXJzID0gc2VsZi5faWNlU2VydmVycztcbiAgICAgICAgICAgIHNlbGYuX3BjID0gc2VsZi5fY3JlYXRlUGVlckNvbm5lY3Rpb24oUlRDX1BFRVJfQ09OTkVDVElPTl9DT05GSUcsIFJUQ19QRUVSX0NPTk5FQ1RJT05fT1BUSU9OQUxfQ09ORklHKTtcbiAgICAgICAgfVxuICAgICAgICBzZWxmLl9wYy5vbnRyYWNrID0gaGl0Y2goc2VsZiwgc2VsZi5fb250cmFjayk7XG4gICAgICAgIHNlbGYuX3BjLm9uaWNlY2FuZGlkYXRlID0gaGl0Y2goc2VsZiwgc2VsZi5fb25JY2VDYW5kaWRhdGUpO1xuICAgICAgICBzZWxmLl9wYy5vbmNvbm5lY3Rpb25zdGF0ZWNoYW5nZSA9IGhpdGNoKHNlbGYsIHNlbGYuX29uUGVlckNvbm5lY3Rpb25TdGF0ZUNoYW5nZSk7XG4gICAgICAgIHNlbGYuX3BjLm9uaWNlY29ubmVjdGlvbnN0YXRlY2hhbmdlID0gaGl0Y2goc2VsZiwgc2VsZi5fb25JY2VTdGF0ZUNoYW5nZSk7XG5cbiAgICAgICAgaXNMZWdhY3lTdGF0c1JlcG9ydFN1cHBvcnRlZChzZWxmLl9wYykudGhlbihyZXN1bHQgPT4ge1xuICAgICAgICAgICAgc2VsZi5fbGVnYWN5U3RhdHNSZXBvcnRTdXBwb3J0ID0gcmVzdWx0O1xuICAgICAgICAgICAgc2VsZi50cmFuc2l0KG5ldyBHcmFiTG9jYWxNZWRpYVN0YXRlKHNlbGYpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFjY2VwdCgpIHtcbiAgICAgICAgdGhyb3cgbmV3IFVuc3VwcG9ydGVkT3BlcmF0aW9uKCdhY2NlcHQgZG9lcyBub3QgZ28gdGhyb3VnaCBzaWduYWxpbmcgY2hhbm5lbCBhdCB0aGlzIG1vbWVudCcpO1xuICAgIH1cbiAgICBoYW5ndXAoKSB7XG4gICAgICAgIHRoaXMuX3N0YXRlLmhhbmd1cCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBhIHByb21pc2UgY29udGFpbmluZyBhbiBvYmplY3Qgd2l0aCB0d28gbmFtZWQgbGlzdHMgb2YgYXVkaW8gc3RhdHMsIG9uZSBmb3IgZWFjaCBjaGFubmVsIG9uIGVhY2hcbiAgICAgKiBtZWRpYSB0eXBlIG9mICd2aWRlbycgYW5kICdhdWRpbycuXG4gICAgICogQHJldHVybiBSZWplY3RlZCBwcm9taXNlIGlmIGZhaWxlZCB0byBnZXQgTWVkaWFSdHBTdGF0cy4gVGhlIHByb21pc2UgaXMgbmV2ZXIgcmVzb2x2ZWQgd2l0aCBudWxsIHZhbHVlLlxuICAgICAqL1xuICAgIGFzeW5jIGdldFN0YXRzKCkge1xuICAgICAgICB2YXIgdGltZXN0YW1wID0gbmV3IERhdGUoKTtcblxuICAgICAgICB2YXIgaW1wbCA9IGFzeW5jIChzdHJlYW0sIHN0cmVhbVR5cGUpID0+IHtcbiAgICAgICAgICAgIHZhciB0cmFja3MgPSBbXTtcblxuICAgICAgICAgICAgaWYgKCFzdHJlYW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHN3aXRjaCAoc3RyZWFtVHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2F1ZGlvX2lucHV0JzpcbiAgICAgICAgICAgICAgICBjYXNlICdhdWRpb19vdXRwdXQnOlxuICAgICAgICAgICAgICAgICAgICB0cmFja3MgPSBzdHJlYW0uZ2V0QXVkaW9UcmFja3MoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAndmlkZW9faW5wdXQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3ZpZGVvX291dHB1dCc6XG4gICAgICAgICAgICAgICAgICAgIHRyYWNrcyA9IHN0cmVhbS5nZXRWaWRlb1RyYWNrcygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIHN0cmVhbSB0eXBlIHdoaWxlIHRyeWluZyB0byBnZXQgc3RhdHM6ICcgKyBzdHJlYW1UeXBlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IFByb21pc2UuYWxsKHRyYWNrcy5tYXAoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIGdldCBzdGFuZGFyZGl6ZWQgcmVwb3J0XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3BjLmdldFN0YXRzKCkudGhlbihmdW5jdGlvbiAocmF3U3RhdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRpZ2VzdGVkU3RhdHMgPSBleHRyYWN0TWVkaWFTdGF0c0Zyb21TdGF0cyh0aW1lc3RhbXAsIHJhd1N0YXRzLCBzdHJlYW1UeXBlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkaWdlc3RlZFN0YXRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBleHRyYWN0IE1lZGlhUnRwU3RhdHMgZnJvbSBSVENTdGF0c1JlcG9ydCBmb3Igc3RyZWFtIHR5cGUgJyArIHN0cmVhbVR5cGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkaWdlc3RlZFN0YXRzO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKHRoaXMuX3BjICYmIHRoaXMuX3BjLnNpZ25hbGluZ1N0YXRlID09PSAnc3RhYmxlJykge1xuICAgICAgICAgICAgdmFyIHN0YXRzUmVzdWx0ID0ge1xuICAgICAgICAgICAgICAgIGF1ZGlvOiB7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0OiBhd2FpdCBpbXBsKHRoaXMuX3JlbW90ZUF1ZGlvU3RyZWFtLCAnYXVkaW9faW5wdXQnKSxcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0OiBhd2FpdCBpbXBsKHRoaXMuX2xvY2FsU3RyZWFtLCAnYXVkaW9fb3V0cHV0JylcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgdmlkZW86IHtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQ6IGF3YWl0IGltcGwodGhpcy5fcmVtb3RlVmlkZW9TdHJlYW0sICd2aWRlb19pbnB1dCcpLFxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQ6IGF3YWl0IGltcGwodGhpcy5fbG9jYWxTdHJlYW0sICd2aWRlb19vdXRwdXQnKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8vIEZvciBjb25zaXN0ZW5jeSdzIHNha2UsIGNvYWxlc2NlIHJ0dE1pbGxpc2Vjb25kcyBpbnRvIHRoZSBvdXRwdXQgZm9yIGF1ZGlvIGFuZCB2aWRlby5cbiAgICAgICAgICAgIHZhciBydHRSZWR1Y2VyID0gKGFjYywgc3RhdHMpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoc3RhdHMucnR0TWlsbGlzZWNvbmRzICE9PSBudWxsICYmIChhY2MgPT09IG51bGwgfHwgc3RhdHMucnR0TWlsbGlzZWNvbmRzID4gYWNjKSkge1xuICAgICAgICAgICAgICAgICAgICBhY2MgPSBzdGF0cy5ydHRNaWxsaXNlY29uZHM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN0YXRzLl9ydHRNaWxsaXNlY29uZHMgPSBudWxsO1xuICAgICAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB2YXIgYXVkaW9JbnB1dFJ0dE1pbGxpc2Vjb25kcyA9IHN0YXRzUmVzdWx0LmF1ZGlvLmlucHV0LnJlZHVjZShydHRSZWR1Y2VyLCBudWxsKTtcbiAgICAgICAgICAgIHZhciB2aWRlb0lucHV0UnR0TWlsbGlzZWNvbmRzID0gc3RhdHNSZXN1bHQudmlkZW8uaW5wdXQucmVkdWNlKHJ0dFJlZHVjZXIsIG51bGwpO1xuXG4gICAgICAgICAgICBpZiAoYXVkaW9JbnB1dFJ0dE1pbGxpc2Vjb25kcyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHN0YXRzUmVzdWx0LmF1ZGlvLm91dHB1dC5mb3JFYWNoKChzdGF0cykgPT4geyBzdGF0cy5fcnR0TWlsbGlzZWNvbmRzID0gYXVkaW9JbnB1dFJ0dE1pbGxpc2Vjb25kczsgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh2aWRlb0lucHV0UnR0TWlsbGlzZWNvbmRzICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgc3RhdHNSZXN1bHQudmlkZW8ub3V0cHV0LmZvckVhY2goKHN0YXRzKSA9PiB7IHN0YXRzLl9ydHRNaWxsaXNlY29uZHMgPSB2aWRlb0lucHV0UnR0TWlsbGlzZWNvbmRzOyB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHN0YXRzUmVzdWx0O1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IElsbGVnYWxTdGF0ZSgpKTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGEgcHJvbWlzZSBvZiBNZWRpYVJ0cFN0YXRzIG9iamVjdCBmb3IgcmVtb3RlIGF1ZGlvIChmcm9tIEFtYXpvbiBDb25uZWN0IHRvIGNsaWVudCkuXG4gICAgICogQHJldHVybiBSZWplY3RlZCBwcm9taXNlIGlmIGZhaWxlZCB0byBnZXQgTWVkaWFSdHBTdGF0cy4gVGhlIHByb21pc2UgaXMgbmV2ZXIgcmVzb2x2ZWQgd2l0aCBudWxsIHZhbHVlLlxuICAgICAqIEBkZXByZWNhdGVkIGluIGZhdm9yIG9mIGdldFN0YXRzKClcbiAgICAgKi9cbiAgICBnZXRSZW1vdGVBdWRpb1N0YXRzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRTdGF0cygpLnRoZW4oZnVuY3Rpb24oc3RhdHMpIHtcbiAgICAgICAgICAgIGlmIChzdGF0cy5hdWRpby5vdXRwdXQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzdGF0cy5hdWRpby5vdXRwdXRbMF07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgSWxsZWdhbFN0YXRlKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgYSBwcm9taXNlIG9mIE1lZGlhUnRwU3RhdHMgb2JqZWN0IGZvciB1c2VyIGF1ZGlvIChmcm9tIGNsaWVudCB0byBBbWF6b24gQ29ubmVjdCkuXG4gICAgICogQHJldHVybiBSZWplY3RlZCBwcm9taXNlIGlmIGZhaWxlZCB0byBnZXQgTWVkaWFSdHBTdGF0cy4gVGhlIHByb21pc2UgaXMgbmV2ZXIgcmVzb2x2ZWQgd2l0aCBudWxsIHZhbHVlLlxuICAgICAqIEBkZXByZWNhdGVkIGluIGZhdm9yIG9mIGdldFN0YXRzKClcbiAgICAgKi9cbiAgICBnZXRVc2VyQXVkaW9TdGF0cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U3RhdHMoKS50aGVuKGZ1bmN0aW9uKHN0YXRzKSB7XG4gICAgICAgICAgICBpZiAoc3RhdHMuYXVkaW8uaW5wdXQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzdGF0cy5hdWRpby5pbnB1dFswXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBJbGxlZ2FsU3RhdGUoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBhIHByb21pc2Ugb2YgTWVkaWFSdHBTdGF0cyBvYmplY3QgZm9yIHVzZXIgdmlkZW8gKGZyb20gY2xpZW50IHRvIEFtYXpvbiBDb25uZWN0KS5cbiAgICAgKiBAcmV0dXJuIFJlamVjdGVkIHByb21pc2UgaWYgZmFpbGVkIHRvIGdldCBNZWRpYVJ0cFN0YXRzLiBUaGUgcHJvbWlzZSBpcyBuZXZlciByZXNvbHZlZCB3aXRoIG51bGwgdmFsdWUuXG4gICAgICogQGRlcHJlY2F0ZWQgaW4gZmF2b3Igb2YgZ2V0U3RhdHMoKVxuICAgICAqL1xuICAgIGdldFJlbW90ZVZpZGVvU3RhdHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFN0YXRzKCkudGhlbihmdW5jdGlvbihzdGF0cykge1xuICAgICAgICAgICAgaWYgKHN0YXRzLnZpZGVvLm91dHB1dC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0YXRzLnZpZGVvLm91dHB1dFswXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBJbGxlZ2FsU3RhdGUoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBhIHByb21pc2Ugb2YgTWVkaWFSdHBTdGF0cyBvYmplY3QgZm9yIHVzZXIgdmlkZW8gKGZyb20gY2xpZW50IHRvIEFtYXpvbiBDb25uZWN0KS5cbiAgICAgKiBAcmV0dXJuIFJlamVjdGVkIHByb21pc2UgaWYgZmFpbGVkIHRvIGdldCBNZWRpYVJ0cFN0YXRzLiBUaGUgcHJvbWlzZSBpcyBuZXZlciByZXNvbHZlZCB3aXRoIG51bGwgdmFsdWUuXG4gICAgICogQGRlcHJlY2F0ZWQgaW4gZmF2b3Igb2YgZ2V0U3RhdHMoKVxuICAgICAqL1xuICAgIGdldFVzZXJWaWRlb1N0YXRzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRTdGF0cygpLnRoZW4oZnVuY3Rpb24oc3RhdHMpIHtcbiAgICAgICAgICAgIGlmIChzdGF0cy52aWRlby5pbnB1dC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0YXRzLnZpZGVvLmlucHV0WzBdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IElsbGVnYWxTdGF0ZSgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgX29uSWNlQ2FuZGlkYXRlKGV2dCkge1xuICAgICAgICB0aGlzLl9zdGF0ZS5vbkljZUNhbmRpZGF0ZShldnQpO1xuICAgIH1cblxuICAgIF9vblBlZXJDb25uZWN0aW9uU3RhdGVDaGFuZ2UoKSB7XG4gICAgICAgIHRoaXMuX3N0YXRlLm9uUGVlckNvbm5lY3Rpb25TdGF0ZUNoYW5nZSgpO1xuICAgIH1cblxuICAgIF9vbkljZVN0YXRlQ2hhbmdlKGV2dCkge1xuICAgICAgICB0aGlzLl9zdGF0ZS5vbkljZVN0YXRlQ2hhbmdlKGV2dCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQXR0YWNoIHJlbW90ZSBtZWRpYSBzdHJlYW0gdG8gd2ViIGVsZW1lbnQuXG4gICAgICovXG4gICAgX29udHJhY2soZXZ0KSB7XG4gICAgICAgIHRoaXMuX3N0cmF0ZWd5Ll9vbnRyYWNrKHRoaXMsIGV2dCk7XG4gICAgICAgIHRoaXMuX29uUmVtb3RlU3RyZWFtQWRkZWQodGhpcywgZXZ0LnN0cmVhbXNbMF0pO1xuICAgIH1cbiAgICBfZGV0YWNoTWVkaWEoKSB7XG4gICAgICAgIGlmICh0aGlzLl9yZW1vdGVWaWRlb0VsZW1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMuX3JlbW90ZVZpZGVvRWxlbWVudC5zcmNPYmplY3QgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9yZW1vdGVBdWRpb0VsZW1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMuX3JlbW90ZUF1ZGlvRWxlbWVudC5zcmNPYmplY3QgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5fcmVtb3RlQXVkaW9TdHJlYW0gPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9zdG9wU2Vzc2lvbigpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9sb2NhbFN0cmVhbSAmJiAhdGhpcy5faXNVc2VyUHJvdmlkZWRTdHJlYW0pIHtcbiAgICAgICAgICAgICAgICBjbG9zZVN0cmVhbSh0aGlzLl9sb2NhbFN0cmVhbSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fbG9jYWxTdHJlYW0gPSBudWxsO1xuICAgICAgICAgICAgICAgIHRoaXMuX2lzVXNlclByb3ZpZGVkU3RyZWFtID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9wYykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9wYy5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAvLyBlYXQgZXhjZXB0aW9uXG4gICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3BjID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9idWlsZE1lZGlhQ29uc3RyYWludHMoKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgdmFyIG1lZGlhQ29uc3RyYWludHMgPSB7fTtcblxuICAgICAgICBzZWxmLl9zdHJhdGVneS5fYnVpbGRNZWRpYUNvbnN0cmFpbnRzKHNlbGYsIG1lZGlhQ29uc3RyYWludHMpO1xuXG4gICAgICAgIGlmIChzZWxmLl9lbmFibGVWaWRlbykge1xuICAgICAgICAgICAgdmFyIHZpZGVvQ29uc3RyYWludHMgPSB7fTtcbiAgICAgICAgICAgIHZhciB3aWR0aENvbnN0cmFpbnRzID0ge307XG4gICAgICAgICAgICB2YXIgaGVpZ2h0Q29uc3RyYWludHMgPSB7fTtcbiAgICAgICAgICAgIHZhciBmcmFtZVJhdGVDb25zdHJhaW50cyA9IHt9O1xuXG4gICAgICAgICAgICAvL2J1aWxkIHZpZGVvIHdpZHRoIGNvbnN0cmFpbnRzXG4gICAgICAgICAgICBpZiAodHlwZW9mIHNlbGYuX2lkZWFsVmlkZW9XaWR0aCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICB3aWR0aENvbnN0cmFpbnRzLmlkZWFsID0gc2VsZi5faWRlYWxWaWRlb1dpZHRoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBzZWxmLl9tYXhWaWRlb1dpZHRoICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHdpZHRoQ29uc3RyYWludHMubWF4ID0gc2VsZi5fbWF4VmlkZW9XaWR0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc2VsZi5fbWluVmlkZW9XaWR0aCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICB3aWR0aENvbnN0cmFpbnRzLm1pbiA9IHNlbGYuX21pblZpZGVvV2lkdGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBidWlsZCB2aWRlbyBoZWlnaHQgY29uc3RyYWludHNcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc2VsZi5faWRlYWxWaWRlb0hlaWdodCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBoZWlnaHRDb25zdHJhaW50cy5pZGVhbCA9IHNlbGYuX2lkZWFsVmlkZW9IZWlnaHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIHNlbGYuX21heFZpZGVvSGVpZ2h0ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIGhlaWdodENvbnN0cmFpbnRzLm1heCA9IHNlbGYuX21heFZpZGVvSGVpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBzZWxmLl9taW5WaWRlb0hlaWdodCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBoZWlnaHRDb25zdHJhaW50cy5taW4gPSBzZWxmLl9taW5WaWRlb0hlaWdodDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKE9iamVjdC5rZXlzKHdpZHRoQ29uc3RyYWludHMpLmxlbmd0aCA+IDAgJiYgT2JqZWN0LmtleXMoaGVpZ2h0Q29uc3RyYWludHMpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICB2aWRlb0NvbnN0cmFpbnRzLndpZHRoID0gd2lkdGhDb25zdHJhaW50cztcbiAgICAgICAgICAgICAgICB2aWRlb0NvbnN0cmFpbnRzLmhlaWdodCA9IGhlaWdodENvbnN0cmFpbnRzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gYnVpbGQgZnJhbWUgcmF0ZSBjb25zdHJhaW50c1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBzZWxmLl92aWRlb0ZyYW1lUmF0ZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBmcmFtZVJhdGVDb25zdHJhaW50cy5pZGVhbCA9IHNlbGYuX3ZpZGVvRnJhbWVSYXRlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBzZWxmLl9taW5WaWRlb0ZyYW1lUmF0ZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBmcmFtZVJhdGVDb25zdHJhaW50cy5taW4gPSBzZWxmLl9taW5WaWRlb0ZyYW1lUmF0ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc2VsZi5fbWF4VmlkZW9GcmFtZVJhdGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgZnJhbWVSYXRlQ29uc3RyYWludHMubWF4ID0gc2VsZi5fbWF4VmlkZW9GcmFtZVJhdGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZihPYmplY3Qua2V5cyhmcmFtZVJhdGVDb25zdHJhaW50cykubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHZpZGVvQ29uc3RyYWludHMuZnJhbWVSYXRlID0gZnJhbWVSYXRlQ29uc3RyYWludHM7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGJ1aWxkIGZhY2luZyBtb2RlIGNvbnN0cmFpbnRzXG4gICAgICAgICAgICBpZihzZWxmLl9mYWNpbmdNb2RlICE9PSAndXNlcicgJiYgc2VsZi5fZmFjaW5nTW9kZSAhPT0gXCJlbnZpcm9ubWVudFwiKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5fZmFjaW5nTW9kZSA9ICd1c2VyJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZpZGVvQ29uc3RyYWludHMuZmFjaW5nTW9kZSA9IHNlbGYuX2ZhY2luZ01vZGU7XG5cbiAgICAgICAgICAgIC8vIHNldCB2aWRlbyBjb25zdHJhaW50c1xuICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKHZpZGVvQ29uc3RyYWludHMpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBtZWRpYUNvbnN0cmFpbnRzLnZpZGVvID0gdmlkZW9Db25zdHJhaW50cztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbWVkaWFDb25zdHJhaW50cy52aWRlbyA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbWVkaWFDb25zdHJhaW50cztcbiAgICB9XG59XG4iLCIvKipcbiAqIEV4dHJhY3QgcnRwIHN0YXRzIG9mIHNwZWNpZmllZCBzdHJlYW0gZnJvbSBSVENTdGF0c1JlcG9ydFxuICogQ2hyb21lIHJlcG9ydHMgYWxsIHN0cmVhbSBzdGF0cyBpbiBzdGF0c1JlcG9ydHMgd2hlcmVhcyBmaXJlZm94IHJlcG9ydHMgb25seSBzaW5nbGUgc3RyZWFtIHN0YXRzIGluIHJlcG9ydFxuICogU3RyZWFtVHlwZSBpcyBwYXNzZWQgb25seSB0byBwdWxsIHJpZ2h0IHN0cmVhbSBzdGF0cyBhdWRpb19pbnB1dCBvciBhdWRpb19vdXRwdXQuXG4gKi9cblxuaW1wb3J0IHsgaXNfZGVmaW5lZCwgd2hlbl9kZWZpbmVkIH0gZnJvbSAnLi91dGlscyc7XG5leHBvcnQgZnVuY3Rpb24gZXh0cmFjdE1lZGlhU3RhdHNGcm9tU3RhdHModGltZXN0YW1wLCBzdGF0cywgc3RyZWFtVHlwZSkge1xuICAgIHZhciBleHRyYWN0ZWRTdGF0cyA9IG51bGw7XG4gICAgdmFyIHJlcG9ydFR5cGUgPSBudWxsO1xuXG4gICAgc3RhdHMuZm9yRWFjaChzdGF0c1JlcG9ydCA9PiB7XG4gICAgICAgIGlmIChzdGF0c1JlcG9ydCkge1xuICAgICAgICAgICAgaWYgKHN0YXRzUmVwb3J0LnR5cGUgPT09ICdpbmJvdW5kLXJ0cCcgJiYgc3RyZWFtVHlwZSA9PT0gJ2F1ZGlvX2lucHV0Jykge1xuICAgICAgICAgICAgICAgIC8vIGluYm91bmQtcnRwOiBTdGF0cyBmb3Igc3RyZWFtIGZyb20gU2VydmVyIHRvIENDUCwgYXMgc2VlbiBvbiB0aGUgYnJvd3NlclxuICAgICAgICAgICAgICAgIHJlcG9ydFR5cGUgPSBzdGF0c1JlcG9ydC50eXBlO1xuICAgICAgICAgICAgICAgIGV4dHJhY3RlZFN0YXRzID0ge1xuICAgICAgICAgICAgICAgICAgICB0aW1lc3RhbXA6IHRpbWVzdGFtcCxcbiAgICAgICAgICAgICAgICAgICAgcGFja2V0c0xvc3Q6IHN0YXRzUmVwb3J0LnBhY2tldHNMb3N0LFxuICAgICAgICAgICAgICAgICAgICAvLyBwYWNrZXRzQ291bnQ6IG51bWJlciBvZiBwYWNrZXQgcmVjZWl2ZWQgYnkgQ0NQLCBhcyBzZWVuIG9uIHRoZSBicm93c2VyXG4gICAgICAgICAgICAgICAgICAgIHBhY2tldHNDb3VudDogc3RhdHNSZXBvcnQucGFja2V0c1JlY2VpdmVkLFxuICAgICAgICAgICAgICAgICAgICBqYk1pbGxpc2Vjb25kczogTWF0aC5mbG9vcih3aGVuX2RlZmluZWQoc3RhdHNSZXBvcnQuaml0dGVyLCAwKSAqIDEwMDApLFxuICAgICAgICAgICAgICAgICAgICAvLyBNdWx0aXBseWluZyBhdWRpb0xldmVsIGJ5IDMyNzY4IGFsaWducyBpdHMgdmFsdWUgd2l0aCB0aGUgbGVnYWN5IGdldFN0YXRzIEFQSS5cbiAgICAgICAgICAgICAgICAgICAgYXVkaW9MZXZlbDogaXNfZGVmaW5lZChzdGF0c1JlcG9ydC5hdWRpb0xldmVsKSA/IE1hdGguZmxvb3Ioc3RhdHNSZXBvcnQuYXVkaW9MZXZlbCAqIDMyNzY4KSA6IG51bGxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzdGF0c1JlcG9ydC50eXBlID09PSAnb3V0Ym91bmQtcnRwJyAmJiBzdHJlYW1UeXBlID09PSAnYXVkaW9fb3V0cHV0Jykge1xuICAgICAgICAgICAgICAgIC8vIG91dGJvdW5kLXJ0cDogU3RhdHMgZm9yIHN0cmVhbSBmcm9tIENDUCB0byBTZXJ2ZXIsIGFzIHNlZW4gb24gdGhlIGJyb3dzZXJcbiAgICAgICAgICAgICAgICBleHRyYWN0ZWRTdGF0cyA9IGV4dHJhY3RlZFN0YXRzIHx8IHt9O1xuICAgICAgICAgICAgICAgIC8vIHBhY2tldHNDb3VudDogbnVtYmVyIG9mIHBhY2tldCBzZW50IGJ5IENDUCwgYXMgc2VlbiBvbiB0aGUgYnJvd3NlclxuICAgICAgICAgICAgICAgIGV4dHJhY3RlZFN0YXRzLnBhY2tldHNDb3VudCA9IHN0YXRzUmVwb3J0LnBhY2tldHNTZW50O1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzdGF0c1JlcG9ydC50eXBlID09PSAnbWVkaWEtc291cmNlJyAmJiBzdHJlYW1UeXBlID09PSAnYXVkaW9fb3V0cHV0Jykge1xuICAgICAgICAgICAgICAgIGV4dHJhY3RlZFN0YXRzID0gZXh0cmFjdGVkU3RhdHMgfHwge307XG4gICAgICAgICAgICAgICAgLy8gTXVsdGlwbHlpbmcgYXVkaW9MZXZlbCBieSAzMjc2OCBhbGlnbnMgaXRzIHZhbHVlIHdpdGggdGhlIGxlZ2FjeSBnZXRTdGF0cyBBUEkuXG4gICAgICAgICAgICAgICAgZXh0cmFjdGVkU3RhdHMuYXVkaW9MZXZlbCA9IGlzX2RlZmluZWQoc3RhdHNSZXBvcnQuYXVkaW9MZXZlbCkgPyBNYXRoLmZsb29yKHN0YXRzUmVwb3J0LmF1ZGlvTGV2ZWwgKiAzMjc2OCkgOiBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzdGF0c1JlcG9ydC50eXBlID09PSAncmVtb3RlLWluYm91bmQtcnRwJyAmJiBzdHJlYW1UeXBlID09PSAnYXVkaW9fb3V0cHV0Jykge1xuICAgICAgICAgICAgICAgIC8vIHJlbW90ZS1pbmJvdW5kLXJ0cDogU3RhdHMgZm9yIHN0cmVhbSBmcm9tIENDUCB0byBTZXJ2ZXIsIGFzIHNlZW4gb24gU2VydmVyIHNpZGVcbiAgICAgICAgICAgICAgICByZXBvcnRUeXBlID0gc3RhdHNSZXBvcnQudHlwZTtcbiAgICAgICAgICAgICAgICBleHRyYWN0ZWRTdGF0cyA9IGV4dHJhY3RlZFN0YXRzIHx8IHt9O1xuICAgICAgICAgICAgICAgIGV4dHJhY3RlZFN0YXRzLnRpbWVzdGFtcCA9IHRpbWVzdGFtcDtcbiAgICAgICAgICAgICAgICBleHRyYWN0ZWRTdGF0cy5wYWNrZXRzTG9zdCA9IHN0YXRzUmVwb3J0LnBhY2tldHNMb3N0O1xuICAgICAgICAgICAgICAgIGV4dHJhY3RlZFN0YXRzLnJ0dE1pbGxpc2Vjb25kcyA9IGlzX2RlZmluZWQoc3RhdHNSZXBvcnQucm91bmRUcmlwVGltZSkgPyBNYXRoLmZsb29yKHN0YXRzUmVwb3J0LnJvdW5kVHJpcFRpbWUgKiAxMDAwKSA6IG51bGw7XG4gICAgICAgICAgICAgICAgZXh0cmFjdGVkU3RhdHMuamJNaWxsaXNlY29uZHMgPSBNYXRoLmZsb29yKHdoZW5fZGVmaW5lZChzdGF0c1JlcG9ydC5qaXR0ZXIsIDApICogMTAwMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBleHRyYWN0ZWRTdGF0cyA/IG5ldyBNZWRpYVJ0cFN0YXRzKGV4dHJhY3RlZFN0YXRzLCByZXBvcnRUeXBlLCBzdHJlYW1UeXBlKSA6IG51bGw7XG59XG5cbi8qKlxuICogQmFzaWMgUlRQIHN0YXRpc3RpY3Mgb2JqZWN0LCByZXByZXNlbnRzIHN0YXRpc3RpY3Mgb2YgYW4gYXVkaW8gb3IgdmlkZW8gc3RyZWFtLlxuICovXG5jbGFzcyBNZWRpYVJ0cFN0YXRzIHtcbiAgICBjb25zdHJ1Y3RvcihwYXJhbXNJbiwgc3RhdHNSZXBvcnRUeXBlLCBzdHJlYW1UeXBlKSB7XG4gICAgICAgIHZhciBwYXJhbXMgPSBwYXJhbXNJbiB8fCB7fTtcblxuICAgICAgICB0aGlzLl90aW1lc3RhbXAgICAgICAgICA9IHBhcmFtcy50aW1lc3RhbXAgfHwgbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICAgIHRoaXMuX3BhY2tldHNMb3N0ICAgICAgID0gd2hlbl9kZWZpbmVkKHBhcmFtcy5wYWNrZXRzTG9zdCk7XG4gICAgICAgIHRoaXMuX3BhY2tldHNDb3VudCAgICAgID0gd2hlbl9kZWZpbmVkKHBhcmFtcy5wYWNrZXRzQ291bnQpO1xuICAgICAgICB0aGlzLl9hdWRpb0xldmVsICAgICAgICA9IHdoZW5fZGVmaW5lZChwYXJhbXMuYXVkaW9MZXZlbCk7XG4gICAgICAgIHRoaXMuX3Byb2NNaWxsaXNlY29uZHMgID0gd2hlbl9kZWZpbmVkKHBhcmFtcy5wcm9jTWlsbGlzZWNvbmRzKTtcbiAgICAgICAgdGhpcy5fcnR0TWlsbGlzZWNvbmRzICAgPSB3aGVuX2RlZmluZWQocGFyYW1zLnJ0dE1pbGxpc2Vjb25kcyk7XG4gICAgICAgIHRoaXMuX2piTWlsbGlzZWNvbmRzICAgID0gd2hlbl9kZWZpbmVkKHBhcmFtcy5qYk1pbGxpc2Vjb25kcyk7XG4gICAgICAgIHRoaXMuX2J5dGVzU2VudCAgICAgICAgID0gd2hlbl9kZWZpbmVkKHBhcmFtcy5ieXRlc1NlbnQpO1xuICAgICAgICB0aGlzLl9ieXRlc1JlY2VpdmVkICAgICA9IHdoZW5fZGVmaW5lZChwYXJhbXMuYnl0ZXNSZWNlaXZlZCk7XG4gICAgICAgIHRoaXMuX2ZyYW1lc0VuY29kZWQgICAgID0gd2hlbl9kZWZpbmVkKHBhcmFtcy5mcmFtZXNFbmNvZGVkKTtcbiAgICAgICAgdGhpcy5fZnJhbWVzRGVjb2RlZCAgICAgPSB3aGVuX2RlZmluZWQocGFyYW1zLmZyYW1lc0RlY29kZWQpO1xuICAgICAgICB0aGlzLl9mcmFtZVJhdGVTZW50ICAgICA9IHdoZW5fZGVmaW5lZChwYXJhbXMuZnJhbWVSYXRlU2VudCk7XG4gICAgICAgIHRoaXMuX2ZyYW1lUmF0ZVJlY2VpdmVkID0gd2hlbl9kZWZpbmVkKHBhcmFtcy5mcmFtZVJhdGVSZWNlaXZlZCk7XG4gICAgICAgIHRoaXMuX3N0YXRzUmVwb3J0VHlwZSAgID0gc3RhdHNSZXBvcnRUeXBlIHx8IHBhcmFtcy5fc3RhdHNSZXBvcnRUeXBlIHx8IFwidW5rbm93blwiO1xuICAgICAgICB0aGlzLl9zdHJlYW1UeXBlICAgICAgICA9IHN0cmVhbVR5cGUgfHwgcGFyYW1zLnN0cmVhbVR5cGUgfHwgXCJ1bmtub3duXCI7XG4gICAgfVxuXG4gICAgLyoqIHtudW1iZXJ9IG51bWJlciBvZiBwYWNrZXRzIHNlbnQgdG8gdGhlIGNoYW5uZWwgKi9cbiAgICBnZXQgcGFja2V0c0NvdW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcGFja2V0c0NvdW50O1xuICAgIH1cbiAgICAvKioge251bWJlcn0gbnVtYmVyIG9mIHBhY2tldHMgbG9zdCBhZnRlciB0cmF2ZWxsaW5nIHRocm91Z2ggdGhlIGNoYW5uZWwgKi9cbiAgICBnZXQgcGFja2V0c0xvc3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wYWNrZXRzTG9zdDtcbiAgICB9XG4gICAgLyoqIHtudW1iZXJ9IG51bWJlciBvZiBwYWNrZXRzIGxvc3QgYWZ0ZXIgdHJhdmVsbGluZyB0aHJvdWdoIHRoZSBjaGFubmVsICovXG4gICAgZ2V0IHBhY2tldExvc3NQZXJjZW50YWdlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcGFja2V0c0NvdW50ID4gMCA/IHRoaXMuX3BhY2tldHNMb3N0IC8gdGhpcy5fcGFja2V0c0NvdW50IDogMDtcbiAgICB9XG4gICAgLyoqIEF1ZGlvIHZvbHVtZSBsZXZlbFxuICAgICAqIEN1cnJlbnRseSBmaXJlZm94IGRvZXNuJ3QgcHJvdmlkZSBhdWRpbyBsZXZlbCBpbiBydHAgc3RhdHMuXG4gICAgICovXG4gICAgZ2V0IGF1ZGlvTGV2ZWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hdWRpb0xldmVsO1xuICAgIH1cbiAgICAvKiogVGltZXN0YW1wIHdoZW4gc3RhdHMgYXJlIGNvbGxlY3RlZC4gKi9cbiAgICBnZXQgdGltZXN0YW1wKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdGltZXN0YW1wO1xuICAgIH1cbiAgICAvKioge251bWJlcn0gUHJvY2Vzc2luZyBkZWxheSBjYWxjdWxhdGVkIGJ5IHRpbWUgdG8gcHJvY2VzcyBwYWNrZXQgaGVhZGVyICovXG4gICAgZ2V0IHByb2NNaWxsaXNlY29uZHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcm9jTWlsbGlzZWNvbmRzXG4gICAgfVxuICAgIC8qKiB7bnVtYmVyfSBSb3VuZCB0cmlwIHRpbWUgY2FsY3VsYXRlZCB3aXRoIFJUQ1AgcmVwb3J0cyAqL1xuICAgIGdldCBydHRNaWxsaXNlY29uZHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9ydHRNaWxsaXNlY29uZHM7XG4gICAgfVxuICAgIC8qKiB7bnVtYmVyfSBTdGF0aXN0aWNhbCB2YXJpYW5jZSBvZiBSVFAgZGF0YSBwYWNrZXQgaW50ZXItYXJyaXZhbCB0aW1lICovXG4gICAgZ2V0IGpiTWlsbGlzZWNvbmRzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5famJNaWxsaXNlY29uZHM7XG4gICAgfVxuICAgIC8qKiB7bnVtYmVyfSBudW1iZXIgb2YgYnl0ZXMgc2VudCB0byB0aGUgY2hhbm5lbCovXG4gICAgZ2V0IGJ5dGVzU2VudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2J5dGVzU2VudDtcbiAgICB9XG4gICAgLyoqIHtudW1iZXJ9IG51bWJlciBvZiBieXRlcyByZWNlaXZlZCBmcm9tIHRoZSBjaGFubmVsKi9cbiAgICBnZXQgYnl0ZXNSZWNlaXZlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2J5dGVzUmVjZWl2ZWQ7XG4gICAgfVxuICAgIC8qKiB7bnVtYmVyfSBudW1iZXIgb2YgdmlkZW8gZnJhbWVzIGVuY29kZWQqL1xuICAgIGdldCBmcmFtZXNFbmNvZGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZnJhbWVzRW5jb2RlZDtcbiAgICB9XG4gICAgLyoqIHtudW1iZXJ9IG51bWJlciBvZiB2aWRlbyBmcmFtZXMgZGVjb2RlZCovXG4gICAgZ2V0IGZyYW1lc0RlY29kZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9mcmFtZXNEZWNvZGVkO1xuICAgIH1cbiAgICAvKioge251bWJlcn0gZnJhbWVzIHBlciBzZWNvbmQgc2VudCB0byB0aGUgY2hhbm5lbCovXG4gICAgZ2V0IGZyYW1lUmF0ZVNlbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9mcmFtZVJhdGVTZW50O1xuICAgIH1cbiAgICAvKioge251bWJlcn0gZnJhbWVzIHBlciBzZWNvbmQgcmVjZWl2ZWQgZnJvbSB0aGUgY2hhbm5lbCovXG4gICAgZ2V0IGZyYW1lUmF0ZVJlY2VpdmVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZnJhbWVSYXRlUmVjZWl2ZWQ7XG4gICAgfVxuICAgIC8qKiB7c3RyaW5nfSB0aGUgdHlwZSBvZiB0aGUgc3RhdHMgcmVwb3J0ICovXG4gICAgZ2V0IHN0YXRzUmVwb3J0VHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N0YXRzUmVwb3J0VHlwZTtcbiAgICB9XG4gICAgLyoqIHtzdHJpbmd9IHRoZSB0eXBlIG9mIHRoZSBzdHJlYW0gKi9cbiAgICBnZXQgc3RyZWFtVHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N0cmVhbVR5cGU7XG4gICAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNyBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuZXhwb3J0IGNsYXNzIFNlc3Npb25SZXBvcnQge1xuICAgIC8qKlxuICAgICAqIEBjbGFzcyBQcm90b3R5cGUgZm9yIHRyYWNraW5nIHZhcmlvdXMgUlRDIHNlc3Npb24gcmVwb3J0XG4gICAgICogQGNvbnN0cnVjdHNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5fc2Vzc2lvblN0YXJ0VGltZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX3Nlc3Npb25FbmRUaW1lID0gbnVsbDtcbiAgICAgICAgdGhpcy5fZ3VtVGltZU1pbGxpcyA9IG51bGw7XG4gICAgICAgIHRoaXMuX2luaXRpYWxpemF0aW9uVGltZU1pbGxpcyA9IG51bGw7XG4gICAgICAgIHRoaXMuX2ljZUNvbGxlY3Rpb25UaW1lTWlsbGlzID0gbnVsbDtcbiAgICAgICAgdGhpcy5fc2lnbmFsbGluZ0Nvbm5lY3RUaW1lTWlsbGlzID0gbnVsbDtcbiAgICAgICAgdGhpcy5faGFuZHNoYWtpbmdUaW1lTWlsbGlzID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcHJlVGFsa2luZ1RpbWVNaWxsaXMgPSBudWxsO1xuICAgICAgICB0aGlzLl90YWxraW5nVGltZU1pbGxpcyA9IG51bGw7XG4gICAgICAgIHRoaXMuX2ljZUNvbm5lY3Rpb25zTG9zdCA9IDA7XG4gICAgICAgIHRoaXMuX2ljZUNvbm5lY3Rpb25zRmFpbGVkID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcGVlckNvbm5lY3Rpb25GYWlsZWQgPSBudWxsO1xuICAgICAgICB0aGlzLl9jbGVhbnVwVGltZU1pbGxpcyA9IG51bGw7XG4gICAgICAgIHRoaXMuX2ljZUNvbGxlY3Rpb25GYWlsdXJlID0gbnVsbDtcbiAgICAgICAgdGhpcy5fc2lnbmFsbGluZ0Nvbm5lY3Rpb25GYWlsdXJlID0gbnVsbDtcbiAgICAgICAgdGhpcy5faGFuZHNoYWtpbmdGYWlsdXJlID0gbnVsbDtcbiAgICAgICAgdGhpcy5fZ3VtT3RoZXJGYWlsdXJlID0gbnVsbDtcbiAgICAgICAgdGhpcy5fZ3VtVGltZW91dEZhaWx1cmUgPSBudWxsO1xuICAgICAgICB0aGlzLl9jcmVhdGVPZmZlckZhaWx1cmUgPSBudWxsO1xuICAgICAgICB0aGlzLl9zZXRMb2NhbERlc2NyaXB0aW9uRmFpbHVyZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX3VzZXJCdXN5RmFpbHVyZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX2ludmFsaWRSZW1vdGVTRFBGYWlsdXJlID0gbnVsbDtcbiAgICAgICAgdGhpcy5fbm9SZW1vdGVJY2VDYW5kaWRhdGVGYWlsdXJlID0gbnVsbDtcbiAgICAgICAgdGhpcy5fc2V0UmVtb3RlRGVzY3JpcHRpb25GYWlsdXJlID0gbnVsbDtcbiAgICAgICAgdGhpcy5fc3RyZWFtU3RhdHMgPSBbXTtcbiAgICAgICAgdGhpcy5fcnRjSnNWZXJzaW9uID0gXCJAQFJUQ19KU19WRVJTSU9OXCJcbiAgICB9XG4gICAgLyoqXG4gICAgICpUaW1lc3RhbXAgd2hlbiBSVENTZXNzaW9uIHN0YXJ0ZWQuXG4gICAgICovXG4gICAgZ2V0IHNlc3Npb25TdGFydFRpbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zZXNzaW9uU3RhcnRUaW1lO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaW1lc3RhbXAgd2hlbiBSVENTZXNzaW9uIGVuZGVkLlxuICAgICAqL1xuICAgIGdldCBzZXNzaW9uRW5kVGltZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Nlc3Npb25FbmRUaW1lO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaW1lIHRha2VuIGZvciBncmFiYmluZyB1c2VyIG1pY3JvcGhvbmUgYXQgdGhlIHRpbWUgb2YgY29ubmVjdGluZyBSVENTZXNzaW9uLlxuICAgICAqL1xuICAgIGdldCBndW1UaW1lTWlsbGlzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ3VtVGltZU1pbGxpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGltZSB0YWtlbiBmb3Igc2Vzc2lvbiBpbml0aWFsaXphdGlvbiBpbiBtaWxsaXMuIEluY2x1ZGVzIHRpbWUgc3BlbnQgaW4gR3JhYkxvY2FsTWVkaWEsIFNldExvY2FsU0RQIHN0YXRlcy5cbiAgICAgKi9cbiAgICBnZXQgaW5pdGlhbGl6YXRpb25UaW1lTWlsbGlzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faW5pdGlhbGl6YXRpb25UaW1lTWlsbGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaW1lIHNwZW50IG9uIElDRUNvbGxlY3Rpb24gaW4gbWlsbGlzLlxuICAgICAqL1xuICAgIGdldCBpY2VDb2xsZWN0aW9uVGltZU1pbGxpcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ljZUNvbGxlY3Rpb25UaW1lTWlsbGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaW1lIHRha2VuIGZvciBjb25uZWN0aW5nIHRoZSBzaWduYWxsaW5nIGluIG1pbGxpcy5cbiAgICAgKi9cbiAgICBnZXQgc2lnbmFsbGluZ0Nvbm5lY3RUaW1lTWlsbGlzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2lnbmFsbGluZ0Nvbm5lY3RUaW1lTWlsbGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaW1lcyBzcGVudCBmcm9tIFJUQ1Nlc3Npb24gY29ubmVjdGlvbiB1bnRpbCBlbnRlcmluZyBUYWxraW5nIHN0YXRlIGluIG1pbGxpcy5cbiAgICAgKi9cbiAgICBnZXQgcHJlVGFsa2luZ1RpbWVNaWxsaXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcmVUYWxraW5nVGltZU1pbGxpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFRpbWVzIHNwZW50IGluIGNvbXBsZXRpbmcgaGFuZHNoYWtpbmcgcHJvY2VzcyBvZiB0aGUgUlRDU2Vzc2lvbiBpbiBtaWxsaXMuXG4gICAgICovXG4gICAgZ2V0IGhhbmRzaGFraW5nVGltZU1pbGxpcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2hhbmRzaGFraW5nVGltZU1pbGxpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFRpbWVzIHNwZW50IGluIFRhbGtpbmcgc3RhdGUgaW4gbWlsbGlzLlxuICAgICAqL1xuICAgIGdldCB0YWxraW5nVGltZU1pbGxpcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RhbGtpbmdUaW1lTWlsbGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBIb3cgbWFueSB0aW1lcyB0aGUgUlRDU2Vzc2lvbiBoYXMgbG9zdCBJQ0UgY29ubmVjdGlvbiBpbiB0YWxraW5nIHN0YXRlLlxuICAgICAqL1xuICAgIGdldCBpY2VDb25uZWN0aW9uc0xvc3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pY2VDb25uZWN0aW9uc0xvc3Q7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRlbGxzIGlmIHRoZSBSVENTZXNzaW9uIGhhcyBmYWlsZWQgUlRDUGVlckNvbm5lY3Rpb24uaWNlQ29ubmVjdGlvblN0YXRlXG4gICAgICovXG4gICAgZ2V0IGljZUNvbm5lY3Rpb25zRmFpbGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faWNlQ29ubmVjdGlvbnNGYWlsZWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRlbGxzIGlmIHRoZSBSVENTZXNzaW9uIGhhcyBmYWlsZWQgUlRDUGVlckNvbm5lY3Rpb24uY29ubmVjdGlvblN0YXRlXG4gICAgICovXG4gICAgZ2V0IHBlZXJDb25uZWN0aW9uRmFpbGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcGVlckNvbm5lY3Rpb25GYWlsZWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRpbWVzIHNwZW50IGluIENsZWFudXAgc3RhdGUgaW4gbWlsbGlzXG4gICAgICovXG4gICAgZ2V0IGNsZWFudXBUaW1lTWlsbGlzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xlYW51cFRpbWVNaWxsaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRlbGxzIGlmIHRoZSBSVENTZXNzaW9uIGZhaWxzIGluIElDRUNvbGxlY3Rpb24uXG4gICAgICovXG4gICAgZ2V0IGljZUNvbGxlY3Rpb25GYWlsdXJlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faWNlQ29sbGVjdGlvbkZhaWx1cmU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRlbGxzIGlmIHRoZSBSVENTZXNzaW9uIGZhaWxlZCBpbiBzaWduYWxsaW5nIGNvbm5lY3Qgc3RhZ2UuXG4gICAgICovXG4gICAgZ2V0IHNpZ25hbGxpbmdDb25uZWN0aW9uRmFpbHVyZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NpZ25hbGxpbmdDb25uZWN0aW9uRmFpbHVyZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSGFuZHNoYWtpbmcgZmFpbHVyZSBvZiB0aGUgUlRDU2Vzc2lvblxuICAgICAqL1xuICAgIGdldCBoYW5kc2hha2luZ0ZhaWx1cmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9oYW5kc2hha2luZ0ZhaWx1cmU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEd1bSBmYWlsZWQgZHVlIHRvIHRpbWVvdXQgYXQgdGhlIHRpbWUgb2YgbmV3IFJUQ1Nlc3Npb24gY29ubmVjdGlvblxuICAgICAqL1xuICAgIGdldCBndW1UaW1lb3V0RmFpbHVyZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2d1bVRpbWVvdXRGYWlsdXJlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHdW0gZmFpbGVkIGR1ZSB0byBvdGhlciByZWFzb25zIChvdGhlciB0aGFuIFRpbWVvdXQpXG4gICAgICovXG4gICAgZ2V0IGd1bU90aGVyRmFpbHVyZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2d1bU90aGVyRmFpbHVyZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUlRDIFNlc3Npb24gZmFpbGVkIGluIGNyZWF0ZSBPZmZlciBzdGF0ZS5cbiAgICAgKi9cbiAgICBnZXQgY3JlYXRlT2ZmZXJGYWlsdXJlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY3JlYXRlT2ZmZXJGYWlsdXJlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUZWxscyBpZiBzZXRMb2NhbERlc2NyaXB0aW9uIGZhaWxlZCBmb3IgdGhlIFJUQyBTZXNzaW9uLlxuICAgICAqL1xuICAgIGdldCBzZXRMb2NhbERlc2NyaXB0aW9uRmFpbHVyZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NldExvY2FsRGVzY3JpcHRpb25GYWlsdXJlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUZWxscyBpZiBoYW5kc2hha2luZyBmYWlsZWQgZHVlIHRvIHVzZXIgYnVzeSBjYXNlLFxuICAgICAqIGhhcHBlbnMgd2hlbiBtdWx0aXBsZSBzb2Z0cGhvbmUgY2FsbHMgYXJlIGluaXRpYXRlZCBhdCBzYW1lIHRpbWUuXG4gICAgICovXG4gICAgZ2V0IHVzZXJCdXN5RmFpbHVyZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3VzZXJCdXN5RmFpbHVyZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGVsbHMgaXQgcmVtb3RlIFNEUCBpcyBpbnZhbGlkLlxuICAgICAqL1xuICAgIGdldCBpbnZhbGlkUmVtb3RlU0RQRmFpbHVyZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludmFsaWRSZW1vdGVTRFBGYWlsdXJlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUZWxscyBpZiB0aGUgc2V0UmVtb3RlRGVzY3JpcHRpb24gZmFpbGVkIGZvciB0aGUgUlRDIFNlc3Npb24uXG4gICAgICovXG4gICAgZ2V0IHNldFJlbW90ZURlc2NyaXB0aW9uRmFpbHVyZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NldFJlbW90ZURlc2NyaXB0aW9uRmFpbHVyZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQSBmYWlsdXJlIGNhc2Ugd2hlbiB0aGVyZSBpcyBubyBSZW1vdGVJY2VDYW5kaWRhdGUuXG4gICAgICovXG4gICAgZ2V0IG5vUmVtb3RlSWNlQ2FuZGlkYXRlRmFpbHVyZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX25vUmVtb3RlSWNlQ2FuZGlkYXRlRmFpbHVyZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3RhdGlzdGljcyBmb3IgZWFjaCBzdHJlYW0oYXVkaW8taW4sIGF1ZGlvLW91dCwgdmlkZW8taW4sIHZpZGVvLW91dCkgb2YgdGhlIFJUQ1Nlc3Npb24uXG4gICAgICovXG4gICAgZ2V0IHN0cmVhbVN0YXRzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3RyZWFtU3RhdHM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIGdldCBjdXJyZW50IGNvbm5lY3QtcnRjLWpzIHZlcnNpb25cbiAgICAgKi9cbiAgICBnZXQgcnRjSnNWZXJzaW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcnRjSnNWZXJzaW9uO1xuICAgIH1cblxuICAgIHNldCBzZXNzaW9uU3RhcnRUaW1lKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX3Nlc3Npb25TdGFydFRpbWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgc2V0IHNlc3Npb25FbmRUaW1lKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX3Nlc3Npb25FbmRUaW1lID0gdmFsdWU7XG4gICAgfVxuICAgIHNldCBndW1UaW1lTWlsbGlzKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX2d1bVRpbWVNaWxsaXMgPSB2YWx1ZTtcbiAgICB9XG4gICAgc2V0IGluaXRpYWxpemF0aW9uVGltZU1pbGxpcyh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9pbml0aWFsaXphdGlvblRpbWVNaWxsaXMgPSB2YWx1ZTtcbiAgICB9XG4gICAgc2V0IGljZUNvbGxlY3Rpb25UaW1lTWlsbGlzKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX2ljZUNvbGxlY3Rpb25UaW1lTWlsbGlzID0gdmFsdWU7XG4gICAgfVxuICAgIHNldCBzaWduYWxsaW5nQ29ubmVjdFRpbWVNaWxsaXModmFsdWUpIHtcbiAgICAgICAgdGhpcy5fc2lnbmFsbGluZ0Nvbm5lY3RUaW1lTWlsbGlzID0gdmFsdWU7XG4gICAgfVxuICAgIHNldCBwcmVUYWxraW5nVGltZU1pbGxpcyh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9wcmVUYWxraW5nVGltZU1pbGxpcyA9IHZhbHVlO1xuICAgIH1cbiAgICBzZXQgaGFuZHNoYWtpbmdUaW1lTWlsbGlzKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX2hhbmRzaGFraW5nVGltZU1pbGxpcyA9IHZhbHVlO1xuICAgIH1cbiAgICBzZXQgdGFsa2luZ1RpbWVNaWxsaXModmFsdWUpIHtcbiAgICAgICAgdGhpcy5fdGFsa2luZ1RpbWVNaWxsaXMgPSB2YWx1ZTtcbiAgICB9XG4gICAgc2V0IGljZUNvbm5lY3Rpb25zTG9zdCh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9pY2VDb25uZWN0aW9uc0xvc3QgPSB2YWx1ZTtcbiAgICB9XG4gICAgc2V0IGljZUNvbm5lY3Rpb25zRmFpbGVkKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX2ljZUNvbm5lY3Rpb25zRmFpbGVkID0gdmFsdWU7XG4gICAgfVxuICAgIHNldCBwZWVyQ29ubmVjdGlvbkZhaWxlZCh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9wZWVyQ29ubmVjdGlvbkZhaWxlZCA9IHZhbHVlO1xuICAgIH1cbiAgICBzZXQgY2xlYW51cFRpbWVNaWxsaXModmFsdWUpIHtcbiAgICAgICAgdGhpcy5fY2xlYW51cFRpbWVNaWxsaXMgPSB2YWx1ZTtcbiAgICB9XG4gICAgc2V0IGljZUNvbGxlY3Rpb25GYWlsdXJlKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX2ljZUNvbGxlY3Rpb25GYWlsdXJlID0gdmFsdWU7XG4gICAgfVxuICAgIHNldCBzaWduYWxsaW5nQ29ubmVjdGlvbkZhaWx1cmUodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fc2lnbmFsbGluZ0Nvbm5lY3Rpb25GYWlsdXJlID0gdmFsdWU7XG4gICAgfVxuICAgIHNldCBoYW5kc2hha2luZ0ZhaWx1cmUodmFsdWUpIHtcbiAgICAgICAgdGhpcy5faGFuZHNoYWtpbmdGYWlsdXJlID0gdmFsdWU7XG4gICAgfVxuICAgIHNldCBndW1UaW1lb3V0RmFpbHVyZSh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9ndW1UaW1lb3V0RmFpbHVyZSA9IHZhbHVlO1xuICAgIH1cbiAgICBzZXQgZ3VtT3RoZXJGYWlsdXJlKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX2d1bU90aGVyRmFpbHVyZSA9IHZhbHVlO1xuICAgIH1cbiAgICBzZXQgY3JlYXRlT2ZmZXJGYWlsdXJlKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX2NyZWF0ZU9mZmVyRmFpbHVyZSA9IHZhbHVlO1xuICAgIH1cbiAgICBzZXQgc2V0TG9jYWxEZXNjcmlwdGlvbkZhaWx1cmUodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fc2V0TG9jYWxEZXNjcmlwdGlvbkZhaWx1cmUgPSB2YWx1ZTtcbiAgICB9XG4gICAgc2V0IHVzZXJCdXN5RmFpbHVyZSh2YWx1ZSkge1xuICAgICAgICB0aGlzLl91c2VyQnVzeUZhaWx1cmUgPSB2YWx1ZTtcbiAgICB9XG4gICAgc2V0IGludmFsaWRSZW1vdGVTRFBGYWlsdXJlKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX2ludmFsaWRSZW1vdGVTRFBGYWlsdXJlID0gdmFsdWU7XG4gICAgfVxuICAgIHNldCBub1JlbW90ZUljZUNhbmRpZGF0ZUZhaWx1cmUodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fbm9SZW1vdGVJY2VDYW5kaWRhdGVGYWlsdXJlID0gdmFsdWU7XG4gICAgfVxuICAgIHNldCBzZXRSZW1vdGVEZXNjcmlwdGlvbkZhaWx1cmUodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fc2V0UmVtb3RlRGVzY3JpcHRpb25GYWlsdXJlID0gdmFsdWU7XG4gICAgfVxuICAgIHNldCBzdHJlYW1TdGF0cyh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9zdHJlYW1TdGF0cyA9IHZhbHVlO1xuICAgIH1cbiAgICBzZXQgcnRjSnNWZXJzaW9uKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX3J0Y0pzVmVyc2lvbiA9IHZhbHVlO1xuICAgIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTcgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG5cbmltcG9ydCB7IGdldFJlZGFjdGVkU2RwLCBoaXRjaCwgd3JhcExvZ2dlcn0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgeyBNQVhfSU5WSVRFX0RFTEFZX01TLCBNQVhfQUNDRVBUX0JZRV9ERUxBWV9NUywgREVGQVVMVF9DT05ORUNUX1RJTUVPVVRfTVMsIElOVklURV9NRVRIT0RfTkFNRSwgQUNDRVBUX01FVEhPRF9OQU1FLCBCWUVfTUVUSE9EX05BTUUgfSBmcm9tICcuL3J0Y19jb25zdCc7XG5pbXBvcnQgeyBVbnN1cHBvcnRlZE9wZXJhdGlvbiwgVGltZW91dCwgQnVzeUV4Y2VwdGlvbiwgQ2FsbE5vdEZvdW5kRXhjZXB0aW9uLCBVbmtub3duU2lnbmFsaW5nRXJyb3IgfSBmcm9tICcuL2V4Y2VwdGlvbnMnO1xuaW1wb3J0IHV1aWQgZnJvbSAndXVpZC92NCc7XG5pbXBvcnQgVmlydHVhbFdzc0Nvbm5lY3Rpb25NYW5hZ2VyIGZyb20gXCIuL3ZpcnR1YWxfd3NzX2Nvbm5lY3Rpb25fbWFuYWdlclwiO1xuXG52YXIgQ09OTkVDVF9NQVhfUkVUUklFUyA9IDM7XG5cbi8qKlxuICogQWJzdHJhY3Qgc2lnbmFsaW5nIHN0YXRlIGNsYXNzLlxuICovXG5leHBvcnQgY2xhc3MgU2lnbmFsaW5nU3RhdGUge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7QW16blJ0Y1NpZ25hbGluZ30gc2lnbmFsaW5nIFNpZ25hbGluZyBvYmplY3QuXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2lnbmFsaW5nKSB7XG4gICAgICAgIHRoaXMuX3NpZ25hbGluZyA9IHNpZ25hbGluZztcbiAgICAgICAgdGhpcy5fY3JlYXRlVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgIH1cbiAgICBzZXRTdGF0ZVRpbWVvdXQodGltZW91dE1zKSB7XG4gICAgICAgIHNldFRpbWVvdXQoaGl0Y2godGhpcywgdGhpcy5fb25UaW1lb3V0Q2hlY2tlZCksIHRpbWVvdXRNcyk7XG4gICAgfVxuICAgIGdldCBpc0N1cnJlbnRTdGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMgPT09IHRoaXMuX3NpZ25hbGluZy5zdGF0ZTtcbiAgICB9XG4gICAgb25FbnRlcigpIHt9XG4gICAgX29uVGltZW91dENoZWNrZWQoKSB7XG4gICAgICAgIGlmICh0aGlzLmlzQ3VycmVudFN0YXRlKSB7XG4gICAgICAgICAgICB0aGlzLm9uVGltZW91dCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIG9uVGltZW91dCgpIHtcbiAgICAgICAgdGhyb3cgbmV3IFVuc3VwcG9ydGVkT3BlcmF0aW9uKCk7XG4gICAgfVxuICAgIHRyYW5zaXQobmV3U3RhdGUpIHtcbiAgICAgICAgdGhpcy5fc2lnbmFsaW5nLnRyYW5zaXQobmV3U3RhdGUpO1xuICAgIH1cbiAgICBvbkV4aXQoKSB7fVxuICAgIG9uT3BlbigpIHtcbiAgICAgICAgdGhyb3cgbmV3IFVuc3VwcG9ydGVkT3BlcmF0aW9uKCdvbk9wZW4gbm90IHN1cHBvcnRlZCBieSAnICsgdGhpcy5uYW1lKTtcbiAgICB9XG4gICAgb25FcnJvcigpIHtcbiAgICAgICAgdGhpcy5jaGFubmVsRG93bigpO1xuICAgIH1cbiAgICBvbkNsb3NlKCkge1xuICAgICAgICB0aGlzLmNoYW5uZWxEb3duKCk7XG4gICAgfVxuICAgIGNoYW5uZWxEb3duKCkge1xuICAgICAgICB0aHJvdyBuZXcgVW5zdXBwb3J0ZWRPcGVyYXRpb24oJ2NoYW5uZWxEb3duIG5vdCBzdXBwb3J0ZWQgYnkgJyArIHRoaXMubmFtZSk7XG4gICAgfVxuICAgIG9uUnBjTXNnKHJwY01zZykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICAgIHRocm93IG5ldyBVbnN1cHBvcnRlZE9wZXJhdGlvbignb25ScGNNc2cgbm90IHN1cHBvcnRlZCBieSAnICsgdGhpcy5uYW1lKTtcbiAgICB9XG4gICAgaW52aXRlKHNkcCwgaWNlQ2FuZGlkYXRlcykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICAgIHRocm93IG5ldyBVbnN1cHBvcnRlZE9wZXJhdGlvbignaW52aXRlIG5vdCBzdXBwb3J0ZWQgYnkgJyArIHRoaXMubmFtZSk7XG4gICAgfVxuICAgIGFjY2VwdCgpIHtcbiAgICAgICAgdGhyb3cgbmV3IFVuc3VwcG9ydGVkT3BlcmF0aW9uKCdhY2NlcHQgbm90IHN1cHBvcnRlZCBieSAnICsgdGhpcy5uYW1lKTtcbiAgICB9XG4gICAgaGFuZ3VwKCkge1xuICAgICAgICB0aHJvdyBuZXcgVW5zdXBwb3J0ZWRPcGVyYXRpb24oJ2hhbmd1cCBub3Qgc3VwcG9ydGVkIGJ5ICcgKyB0aGlzLm5hbWUpO1xuICAgIH1cbiAgICBnZXQgbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiU2lnbmFsaW5nU3RhdGVcIjtcbiAgICB9XG4gICAgZ2V0IGxvZ2dlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NpZ25hbGluZy5fbG9nZ2VyO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBGYWlsT25UaW1lb3V0U3RhdGUgZXh0ZW5kcyBTaWduYWxpbmdTdGF0ZSB7XG4gICAgY29uc3RydWN0b3Ioc2lnbmFsaW5nLCB0aW1lb3V0TXMpIHtcbiAgICAgICAgc3VwZXIoc2lnbmFsaW5nKTtcbiAgICAgICAgdGhpcy5fdGltZW91dE1zID0gdGltZW91dE1zO1xuICAgIH1cbiAgICBvbkVudGVyKCkge1xuICAgICAgICB0aGlzLnNldFN0YXRlVGltZW91dCh0aGlzLl90aW1lb3V0TXMpO1xuICAgIH1cbiAgICBvblRpbWVvdXQoKSB7XG4gICAgICAgIHRoaXMudHJhbnNpdChuZXcgRmFpbGVkU3RhdGUodGhpcy5fc2lnbmFsaW5nLCBuZXcgVGltZW91dCgpKSk7XG4gICAgfVxuICAgIGdldCBuYW1lKCkge1xuICAgICAgICByZXR1cm4gXCJGYWlsT25UaW1lb3V0U3RhdGVcIjtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgUGVuZGluZ0Nvbm5lY3RTdGF0ZSBleHRlbmRzIEZhaWxPblRpbWVvdXRTdGF0ZSB7XG4gICAgY29uc3RydWN0b3Ioc2lnbmFsaW5nLCB0aW1lb3V0TXMsIGluaXRpYWxTdGFydFRpbWVJbiwgcmV0cmllc0luKSB7XG4gICAgICAgIHN1cGVyKHNpZ25hbGluZywgdGltZW91dE1zKTtcbiAgICAgICAgdGhpcy5faW5pdGlhbFN0YXJ0VGltZSA9IGluaXRpYWxTdGFydFRpbWVJbiB8fCBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgICAgdGhpcy5fcmV0cmllcyA9IHJldHJpZXNJbiB8fCAwO1xuICAgIH1cbiAgICBvbk9wZW4oKSB7XG4gICAgICAgIHRoaXMudHJhbnNpdChuZXcgUGVuZGluZ0ludml0ZVN0YXRlKHRoaXMuX3NpZ25hbGluZykpO1xuICAgIH1cbiAgICBjaGFubmVsRG93bigpIHtcbiAgICAgICAgdmFyIG5vdyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgICB2YXIgdW50aWxUaW1lb3V0TXMgPSAodGhpcy5faW5pdGlhbFN0YXJ0VGltZSArIHRoaXMuX3RpbWVvdXRNcykgLSBub3c7XG4gICAgICAgIGlmICh1bnRpbFRpbWVvdXRNcyA+IDAgJiYgKyt0aGlzLl9yZXRyaWVzIDwgQ09OTkVDVF9NQVhfUkVUUklFUykge1xuICAgICAgICAgICAgdGhpcy5fc2lnbmFsaW5nLl9jb25uZWN0KCk7XG4gICAgICAgICAgICB0aGlzLnRyYW5zaXQobmV3IFBlbmRpbmdDb25uZWN0U3RhdGUodGhpcy5fc2lnbmFsaW5nLCB1bnRpbFRpbWVvdXRNcywgdGhpcy5faW5pdGlhbFN0YXJ0VGltZSwgdGhpcy5fcmV0cmllcykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy50cmFuc2l0KG5ldyBGYWlsZWRTdGF0ZSh0aGlzLl9zaWduYWxpbmcsIG5ldyBFcnJvcignY2hhbm5lbERvd24nKSkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBuYW1lKCkge1xuICAgICAgICByZXR1cm4gXCJQZW5kaW5nQ29ubmVjdFN0YXRlXCI7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFBlbmRpbmdJbnZpdGVTdGF0ZSBleHRlbmRzIFNpZ25hbGluZ1N0YXRlIHtcbiAgICBvbkVudGVyKCkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIG5ldyBQcm9taXNlKGZ1bmN0aW9uIG5vdGlmeUNvbm5lY3RlZChyZXNvbHZlKSB7XG4gICAgICAgICAgICBzZWxmLl9zaWduYWxpbmcuX2Nvbm5lY3RlZEhhbmRsZXIoKTtcbiAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGludml0ZShzZHAsIGljZUNhbmRpZGF0ZXMpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICB2YXIgaW52aXRlSWQgPSB1dWlkKCk7XG5cbiAgICAgICAgdmFyIGludml0ZVBhcmFtcyA9IHtcbiAgICAgICAgICAgIHNkcDogc2RwLFxuICAgICAgICAgICAgY2FuZGlkYXRlczogaWNlQ2FuZGlkYXRlcyxcbiAgICAgICAgICAgIGNhbGxDb250ZXh0VG9rZW4gOiBzZWxmLl9zaWduYWxpbmcuX2NvbnRhY3RUb2tlblxuICAgICAgICB9O1xuICAgICAgICBzZWxmLmxvZ2dlci5sb2coJ1NlbmRpbmcgU0RQJywgZ2V0UmVkYWN0ZWRTZHAoc2RwKSk7XG4gICAgICAgIHNlbGYuX3NpZ25hbGluZy5fd3NzLnNlbmQoSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAganNvbnJwYzogJzIuMCcsXG4gICAgICAgICAgICBtZXRob2Q6IElOVklURV9NRVRIT0RfTkFNRSxcbiAgICAgICAgICAgIHBhcmFtczogaW52aXRlUGFyYW1zLFxuICAgICAgICAgICAgaWQ6IGludml0ZUlkXG4gICAgICAgIH0pKTtcbiAgICAgICAgc2VsZi50cmFuc2l0KG5ldyBQZW5kaW5nQW5zd2VyU3RhdGUoc2VsZi5fc2lnbmFsaW5nLCBpbnZpdGVJZCkpO1xuICAgIH1cbiAgICBjaGFubmVsRG93bigpIHtcbiAgICAgICAgdGhpcy50cmFuc2l0KG5ldyBGYWlsZWRTdGF0ZSh0aGlzLl9zaWduYWxpbmcpKTtcbiAgICB9XG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiBcIlBlbmRpbmdJbnZpdGVTdGF0ZVwiO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBQZW5kaW5nQW5zd2VyU3RhdGUgZXh0ZW5kcyBGYWlsT25UaW1lb3V0U3RhdGUge1xuICAgIGNvbnN0cnVjdG9yKHNpZ25hbGluZywgaW52aXRlSWQpIHtcbiAgICAgICAgc3VwZXIoc2lnbmFsaW5nLCBNQVhfSU5WSVRFX0RFTEFZX01TKTtcbiAgICAgICAgdGhpcy5faW52aXRlSWQgPSBpbnZpdGVJZDtcbiAgICB9XG4gICAgb25ScGNNc2cobXNnKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgaWYgKG1zZy5pZCA9PT0gdGhpcy5faW52aXRlSWQpIHtcbiAgICAgICAgICAgIGlmIChtc2cuZXJyb3IgfHwgIW1zZy5yZXN1bHQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRyYW5zaXQobmV3IEZhaWxlZFN0YXRlKHRoaXMuX3NpZ25hbGluZywgc2VsZi50cmFuc2xhdGVJbnZpdGVFcnJvcihtc2cpKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG5ldyBQcm9taXNlKGZ1bmN0aW9uIG5vdGlmeUFuc3dlcmVkKHJlc29sdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIubG9nKCdSZWNlaXZlZCBTRFAnLCBnZXRSZWRhY3RlZFNkcChtc2cucmVzdWx0LnNkcCkpO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLl9zaWduYWxpbmcuX2Fuc3dlcmVkSGFuZGxlcihtc2cucmVzdWx0LnNkcCwgbXNnLnJlc3VsdC5jYW5kaWRhdGVzKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMudHJhbnNpdChuZXcgUGVuZGluZ0FjY2VwdFN0YXRlKHRoaXMuX3NpZ25hbGluZywgdGhpcy5fc2lnbmFsaW5nLl9hdXRvQW5zd2VyKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgdHJhbnNsYXRlSW52aXRlRXJyb3IobXNnKSB7XG4gICAgICAgIGlmIChtc2cuZXJyb3IgJiYgbXNnLmVycm9yLmNvZGUgPT0gNDg2KSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEJ1c3lFeGNlcHRpb24obXNnLmVycm9yLm1lc3NhZ2UpO1xuICAgICAgICB9IGVsc2UgaWYgKG1zZy5lcnJvciAmJiBtc2cuZXJyb3IuY29kZSA9PSA0MDQpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ2FsbE5vdEZvdW5kRXhjZXB0aW9uKG1zZy5lcnJvci5tZXNzYWdlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgVW5rbm93blNpZ25hbGluZ0Vycm9yKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXQgbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiUGVuZGluZ0Fuc3dlclN0YXRlXCI7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFBlbmRpbmdBY2NlcHRTdGF0ZSBleHRlbmRzIFNpZ25hbGluZ1N0YXRlIHtcbiAgICBjb25zdHJ1Y3RvcihzaWduYWxpbmcsIGF1dG9BbnN3ZXIpIHtcbiAgICAgICAgc3VwZXIoc2lnbmFsaW5nKTtcbiAgICAgICAgdGhpcy5fYXV0b0Fuc3dlciA9IGF1dG9BbnN3ZXI7XG4gICAgfVxuICAgIG9uRW50ZXIoKSB7XG4gICAgICAgIGlmICh0aGlzLl9hdXRvQW5zd2VyKSB7XG4gICAgICAgICAgICB0aGlzLmFjY2VwdCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFjY2VwdCgpIHtcbiAgICAgICAgdGhpcy5zZW5kQWNjZXB0UmVxdWVzdCgpO1xuICAgICAgICB0aGlzLnRyYW5zaXQobmV3IFRhbGtpbmdTdGF0ZSh0aGlzLl9zaWduYWxpbmcpKTtcbiAgICB9XG4gICAgY2hhbm5lbERvd24oKSB7XG4gICAgICAgIHRoaXMudHJhbnNpdChuZXcgRmFpbGVkU3RhdGUodGhpcy5fc2lnbmFsaW5nKSk7XG4gICAgfVxuICAgIGdldCBuYW1lKCkge1xuICAgICAgICByZXR1cm4gXCJQZW5kaW5nQWNjZXB0U3RhdGVcIjtcbiAgICB9XG4gICAgYXN5bmMgc2VuZEFjY2VwdFJlcXVlc3QoKSB7XG4gICAgICAgIHZhciBhY2NlcHRJZCA9IHV1aWQoKTtcbiAgICAgICAgdGhpcy5fc2lnbmFsaW5nLl93c3Muc2VuZChKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICBqc29ucnBjOiAnMi4wJyxcbiAgICAgICAgICAgIG1ldGhvZDogQUNDRVBUX01FVEhPRF9OQU1FLFxuICAgICAgICAgICAgcGFyYW1zOiB7fSxcbiAgICAgICAgICAgIGlkOiBhY2NlcHRJZFxuICAgICAgICB9KSk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFBlbmRpbmdBY2NlcHRBY2tTdGF0ZSBleHRlbmRzIEZhaWxPblRpbWVvdXRTdGF0ZSB7XG4gICAgY29uc3RydWN0b3Ioc2lnbmFsaW5nLCBhY2NlcHRJZCkge1xuICAgICAgICBzdXBlcihzaWduYWxpbmcsIE1BWF9BQ0NFUFRfQllFX0RFTEFZX01TKTtcbiAgICAgICAgdGhpcy5fYWNjZXB0SWQgPSBhY2NlcHRJZDtcbiAgICB9XG4gICAgb25ScGNNc2cobXNnKSB7XG4gICAgICAgIGlmIChtc2cuaWQgPT09IHRoaXMuX2FjY2VwdElkKSB7XG4gICAgICAgICAgICBpZiAobXNnLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50cmFuc2l0KG5ldyBGYWlsZWRTdGF0ZSh0aGlzLl9zaWduYWxpbmcpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2lnbmFsaW5nLl9jbGllbnRUb2tlbiA9IG1zZy5yZXN1bHQuY2xpZW50VG9rZW47XG4gICAgICAgICAgICAgICAgdGhpcy50cmFuc2l0KG5ldyBUYWxraW5nU3RhdGUodGhpcy5fc2lnbmFsaW5nKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiBcIlBlbmRpbmdBY2NlcHRBY2tTdGF0ZVwiO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBUYWxraW5nU3RhdGUgZXh0ZW5kcyBTaWduYWxpbmdTdGF0ZSB7XG4gICAgb25FbnRlcigpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICBuZXcgUHJvbWlzZShmdW5jdGlvbiBub3RpZnlIYW5kc2hha2VkKHJlc29sdmUpIHtcbiAgICAgICAgICAgIHNlbGYuX3NpZ25hbGluZy5faGFuZHNoYWtlZEhhbmRsZXIoKTtcbiAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGhhbmd1cCgpIHtcbiAgICAgICAgdmFyIGJ5ZUlkID0gdXVpZCgpO1xuICAgICAgICB0aGlzLl9zaWduYWxpbmcuX3dzcy5zZW5kKEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgIGpzb25ycGM6ICcyLjAnLFxuICAgICAgICAgICAgbWV0aG9kOiBCWUVfTUVUSE9EX05BTUUsXG4gICAgICAgICAgICBwYXJhbXM6IHtjYWxsQ29udGV4dFRva2VuOiB0aGlzLl9zaWduYWxpbmcuX2NvbnRhY3RUb2tlbn0sXG4gICAgICAgICAgICBpZDogYnllSWRcbiAgICAgICAgfSkpO1xuICAgICAgICB0aGlzLnRyYW5zaXQobmV3IFBlbmRpbmdSZW1vdGVIYW5ndXBTdGF0ZSh0aGlzLl9zaWduYWxpbmcsIGJ5ZUlkKSk7XG4gICAgfVxuICAgIG9uUnBjTXNnKG1zZykge1xuICAgICAgICBpZiAobXNnLm1ldGhvZCA9PT0gQllFX01FVEhPRF9OQU1FKSB7XG4gICAgICAgICAgICB0aGlzLnRyYW5zaXQobmV3IFBlbmRpbmdMb2NhbEhhbmd1cFN0YXRlKHRoaXMuX3NpZ25hbGluZywgbXNnLmlkKSk7XG4gICAgICAgIH0gZWxzZSBpZiAobXNnLm1ldGhvZCA9PT0gJ3JlbmV3Q2xpZW50VG9rZW4nKSB7XG4gICAgICAgICAgICB0aGlzLl9zaWduYWxpbmcuX2NsaWVudFRva2VuID0gbXNnLnBhcmFtcy5jbGllbnRUb2tlbjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjaGFubmVsRG93bigpIHtcbiAgICAgICAgdGhpcy5fc2lnbmFsaW5nLl9yZWNvbm5lY3QoKTtcbiAgICAgICAgdGhpcy5fc2lnbmFsaW5nLnRyYW5zaXQobmV3IFBlbmRpbmdSZWNvbm5lY3RTdGF0ZSh0aGlzLl9zaWduYWxpbmcpKTtcbiAgICB9XG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiBcIlRhbGtpbmdTdGF0ZVwiO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBQZW5kaW5nUmVjb25uZWN0U3RhdGUgZXh0ZW5kcyBGYWlsT25UaW1lb3V0U3RhdGUge1xuICAgIGNvbnN0cnVjdG9yKHNpZ25hbGluZykge1xuICAgICAgICBzdXBlcihzaWduYWxpbmcsIERFRkFVTFRfQ09OTkVDVF9USU1FT1VUX01TKTtcbiAgICB9XG4gICAgb25PcGVuKCkge1xuICAgICAgICB0aGlzLnRyYW5zaXQobmV3IFRhbGtpbmdTdGF0ZSh0aGlzLl9zaWduYWxpbmcpKTtcbiAgICB9XG4gICAgY2hhbm5lbERvd24oKSB7XG4gICAgICAgIHRoaXMudHJhbnNpdChuZXcgRmFpbGVkU3RhdGUodGhpcy5fc2lnbmFsaW5nKSk7XG4gICAgfVxuICAgIGdldCBuYW1lKCkge1xuICAgICAgICByZXR1cm4gXCJQZW5kaW5nUmVjb25uZWN0U3RhdGVcIjtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgUGVuZGluZ1JlbW90ZUhhbmd1cFN0YXRlIGV4dGVuZHMgRmFpbE9uVGltZW91dFN0YXRlIHtcbiAgICBjb25zdHJ1Y3RvcihzaWduYWxpbmcsIGJ5ZUlkKSB7XG4gICAgICAgIHN1cGVyKHNpZ25hbGluZywgTUFYX0FDQ0VQVF9CWUVfREVMQVlfTVMpO1xuICAgICAgICB0aGlzLl9ieWVJZCA9IGJ5ZUlkO1xuICAgIH1cbiAgICBvblJwY01zZyhtc2cpIHtcbiAgICAgICAgaWYgKG1zZy5pZCA9PT0gdGhpcy5fYnllSWQgfHwgbXNnLm1ldGhvZCA9PT0gQllFX01FVEhPRF9OQU1FKSB7XG4gICAgICAgICAgICB0aGlzLnRyYW5zaXQobmV3IERpc2Nvbm5lY3RlZFN0YXRlKHRoaXMuX3NpZ25hbGluZykpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBuYW1lKCkge1xuICAgICAgICByZXR1cm4gXCJQZW5kaW5nUmVtb3RlSGFuZ3VwU3RhdGVcIjtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgUGVuZGluZ0xvY2FsSGFuZ3VwU3RhdGUgZXh0ZW5kcyBTaWduYWxpbmdTdGF0ZSB7XG4gICAgY29uc3RydWN0b3Ioc2lnbmFsaW5nLCBieWVJZCkge1xuICAgICAgICBzdXBlcihzaWduYWxpbmcpO1xuICAgICAgICB0aGlzLl9ieWVJZCA9IGJ5ZUlkO1xuICAgIH1cbiAgICBvbkVudGVyKCkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIG5ldyBQcm9taXNlKGZ1bmN0aW9uIG5vdGlmeVJlbW90ZUh1bmd1cChyZXNvbHZlKSB7XG4gICAgICAgICAgICBzZWxmLl9zaWduYWxpbmcuX3JlbW90ZUh1bmd1cEhhbmRsZXIoKTtcbiAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGhhbmd1cCgpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICBzZWxmLl9zaWduYWxpbmcuX3dzcy5zZW5kKEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgIGpzb25ycGM6ICcyLjAnLFxuICAgICAgICAgICAgcmVzdWx0OiB7fSxcbiAgICAgICAgICAgIGlkOiBzZWxmLl9ieWVJZFxuICAgICAgICB9KSk7XG4gICAgICAgIHNlbGYudHJhbnNpdChuZXcgRGlzY29ubmVjdGVkU3RhdGUoc2VsZi5fc2lnbmFsaW5nKSk7XG4gICAgfVxuICAgIG9uUnBjTXNnKCkge1xuICAgICAgICAvL0RvIG5vdGhpbmdcbiAgICB9XG4gICAgY2hhbm5lbERvd24oKSB7XG4gICAgICAgIHRoaXMudHJhbnNpdChuZXcgRGlzY29ubmVjdGVkU3RhdGUodGhpcy5fc2lnbmFsaW5nKSk7XG4gICAgfVxuICAgIGdldCBuYW1lKCkge1xuICAgICAgICByZXR1cm4gXCJQZW5kaW5nTG9jYWxIYW5ndXBTdGF0ZVwiO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBEaXNjb25uZWN0ZWRTdGF0ZSBleHRlbmRzIFNpZ25hbGluZ1N0YXRlIHtcbiAgICBvbkVudGVyKCkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIG5ldyBQcm9taXNlKGZ1bmN0aW9uIG5vdGlmeURpc2Nvbm5lY3RlZChyZXNvbHZlKSB7XG4gICAgICAgICAgICBzZWxmLl9zaWduYWxpbmcuX2Rpc2Nvbm5lY3RlZEhhbmRsZXIoKTtcbiAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX3NpZ25hbGluZy5fd3NzLmNsb3NlKCk7XG4gICAgfVxuICAgIGNoYW5uZWxEb3duKCkge1xuICAgICAgICAvL0RvIG5vdGhpbmdcbiAgICB9XG4gICAgb25ScGNNc2coKSB7XG4gICAgICAgIC8vRG8gbm90aGluZ1xuICAgIH1cbiAgICBnZXQgbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiRGlzY29ubmVjdGVkU3RhdGVcIjtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgRmFpbGVkU3RhdGUgZXh0ZW5kcyBTaWduYWxpbmdTdGF0ZSB7XG4gICAgY29uc3RydWN0b3Ioc2lnbmFsaW5nLCBleGNlcHRpb24pIHtcbiAgICAgICAgc3VwZXIoc2lnbmFsaW5nKTtcbiAgICAgICAgdGhpcy5fZXhjZXB0aW9uID0gZXhjZXB0aW9uO1xuICAgIH1cbiAgICBvbkVudGVyKCkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIG5ldyBQcm9taXNlKGZ1bmN0aW9uIG5vdGlmeUZhaWxlZChyZXNvbHZlKSB7XG4gICAgICAgICAgICBzZWxmLl9zaWduYWxpbmcuX2ZhaWxlZEhhbmRsZXIoc2VsZi5fZXhjZXB0aW9uKTtcbiAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX3NpZ25hbGluZy5fd3NzLmNsb3NlKCk7XG4gICAgfVxuICAgIGNoYW5uZWxEb3duKCkge1xuICAgICAgICAvL0RvIG5vdGhpbmdcbiAgICB9XG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiBcIkZhaWxlZFN0YXRlXCI7XG4gICAgfVxuICAgIGdldCBleGNlcHRpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9leGNlcHRpb247XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBbXpuUnRjU2lnbmFsaW5nIHtcbiAgICBjb25zdHJ1Y3RvcihjYWxsSWQsIHNpZ25hbGluZ1VyaSwgY29udGFjdFRva2VuLCBsb2dnZXIsIGNvbm5lY3RUaW1lb3V0TXMsIGNvbm5lY3Rpb25JZCwgd3NzTWFuYWdlcikge1xuICAgICAgICB0aGlzLl9jYWxsSWQgPSBjYWxsSWQ7XG4gICAgICAgIHRoaXMuX2Nvbm5lY3RUaW1lb3V0TXMgPSBjb25uZWN0VGltZW91dE1zIHx8IERFRkFVTFRfQ09OTkVDVF9USU1FT1VUX01TO1xuICAgICAgICB0aGlzLl9hdXRvQW5zd2VyID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fc2lnbmFsaW5nVXJpID0gc2lnbmFsaW5nVXJpO1xuICAgICAgICB0aGlzLl9jb250YWN0VG9rZW4gPSBjb250YWN0VG9rZW47XG4gICAgICAgIHRoaXMuX2xvZ2dlciA9IHdyYXBMb2dnZXIobG9nZ2VyLCBjYWxsSWQsICdTSUdOQUxJTkcnKTtcbiAgICAgICAgdGhpcy5fY29ubmVjdGlvbklkID0gY29ubmVjdGlvbklkO1xuICAgICAgICB0aGlzLl93c3NNYW5hZ2VyID0gd3NzTWFuYWdlcjtcblxuICAgICAgICAvL2VtcHR5IGV2ZW50IGhhbmRsZXJzXG4gICAgICAgIHRoaXMuX2Nvbm5lY3RlZEhhbmRsZXIgPVxuICAgICAgICB0aGlzLl9hbnN3ZXJlZEhhbmRsZXIgPVxuICAgICAgICB0aGlzLl9oYW5kc2hha2VkSGFuZGxlciA9XG4gICAgICAgIHRoaXMuX3JlY29ubmVjdGVkSGFuZGxlciA9XG4gICAgICAgIHRoaXMuX3JlbW90ZUh1bmd1cEhhbmRsZXIgPVxuICAgICAgICB0aGlzLl9kaXNjb25uZWN0ZWRIYW5kbGVyID1cbiAgICAgICAgdGhpcy5fZmFpbGVkSGFuZGxlciA9IGZ1bmN0aW9uIG5vT3AoKSB7fTtcbiAgICB9XG4gICAgZ2V0IGNhbGxJZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NhbGxJZDtcbiAgICB9XG4gICAgc2V0IG9uQ29ubmVjdGVkKGNvbm5lY3RlZEhhbmRsZXIpIHtcbiAgICAgICAgdGhpcy5fY29ubmVjdGVkSGFuZGxlciA9IGNvbm5lY3RlZEhhbmRsZXI7XG4gICAgfVxuICAgIHNldCBvbkFuc3dlcmVkKGFuc3dlcmVkSGFuZGxlcikge1xuICAgICAgICB0aGlzLl9hbnN3ZXJlZEhhbmRsZXIgPSBhbnN3ZXJlZEhhbmRsZXI7XG4gICAgfVxuICAgIHNldCBvbkhhbmRzaGFrZWQoaGFuZHNoYWtlZEhhbmRsZXIpIHtcbiAgICAgICAgdGhpcy5faGFuZHNoYWtlZEhhbmRsZXIgPSBoYW5kc2hha2VkSGFuZGxlcjtcbiAgICB9XG4gICAgc2V0IG9uUmVjb25uZWN0ZWQocmVjb25uZWN0ZWRIYW5kbGVyKSB7XG4gICAgICAgIHRoaXMuX3JlY29ubmVjdGVkSGFuZGxlciA9IHJlY29ubmVjdGVkSGFuZGxlcjtcbiAgICB9XG4gICAgc2V0IG9uUmVtb3RlSHVuZ3VwKHJlbW90ZUh1bmd1cEhhbmRsZXIpIHtcbiAgICAgICAgdGhpcy5fcmVtb3RlSHVuZ3VwSGFuZGxlciA9IHJlbW90ZUh1bmd1cEhhbmRsZXI7XG4gICAgfVxuICAgIHNldCBvbkRpc2Nvbm5lY3RlZChkaXNjb25uZWN0ZWRIYW5kbGVyKSB7XG4gICAgICAgIHRoaXMuX2Rpc2Nvbm5lY3RlZEhhbmRsZXIgPSBkaXNjb25uZWN0ZWRIYW5kbGVyO1xuICAgIH1cbiAgICBzZXQgb25GYWlsZWQoZmFpbGVkSGFuZGxlcikge1xuICAgICAgICB0aGlzLl9mYWlsZWRIYW5kbGVyID0gZmFpbGVkSGFuZGxlcjtcbiAgICB9XG4gICAgZ2V0IHN0YXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3RhdGU7XG4gICAgfVxuXG4gICAgY29ubmVjdCgpIHtcbiAgICAgICAgdGhpcy5fY29ubmVjdCgpO1xuICAgICAgICB0aGlzLnRyYW5zaXQobmV3IFBlbmRpbmdDb25uZWN0U3RhdGUodGhpcywgdGhpcy5fY29ubmVjdFRpbWVvdXRNcykpO1xuICAgIH1cblxuICAgIF9jb25uZWN0KCkge1xuICAgICAgICB0aGlzLl93c3MgPSB0aGlzLl9jb25uZWN0V2ViU29ja2V0KHRoaXMuX2J1aWxkSW52aXRlVXJpKCkpO1xuICAgIH1cbiAgICB0cmFuc2l0KG5leHRTdGF0ZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5fbG9nZ2VyLmluZm8oKHRoaXMuX3N0YXRlID8gdGhpcy5fc3RhdGUubmFtZSA6ICdudWxsJykgKyAnID0+ICcgKyBuZXh0U3RhdGUubmFtZSk7XG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0ZSAmJiB0aGlzLnN0YXRlLm9uRXhpdCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUub25FeGl0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IG5leHRTdGF0ZTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9zdGF0ZS5vbkVudGVyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGUub25FbnRlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIF9jb25uZWN0V2ViU29ja2V0KHVyaSkge1xuICAgICAgICBsZXQgd3NDb25uZWN0aW9uO1xuICAgICAgICBpZiAodGhpcy5fd3NzTWFuYWdlcikge1xuICAgICAgICAgICAgd3NDb25uZWN0aW9uID0gbmV3IFZpcnR1YWxXc3NDb25uZWN0aW9uTWFuYWdlcih0aGlzLl9sb2dnZXIsIHRoaXMuX2Nvbm5lY3Rpb25JZCwgdGhpcy5fd3NzTWFuYWdlcik7XG4gICAgICAgIH1lbHNlIHtcbiAgICAgICAgICAgIHdzQ29ubmVjdGlvbiA9IG5ldyBXZWJTb2NrZXQodXJpKTtcbiAgICAgICAgfVxuICAgICAgICB3c0Nvbm5lY3Rpb24ub25vcGVuID0gaGl0Y2godGhpcywgdGhpcy5fb25PcGVuKTtcbiAgICAgICAgd3NDb25uZWN0aW9uLm9ubWVzc2FnZSA9IGhpdGNoKHRoaXMsIHRoaXMuX29uTWVzc2FnZSk7XG4gICAgICAgIHdzQ29ubmVjdGlvbi5vbmVycm9yID0gaGl0Y2godGhpcywgdGhpcy5fb25FcnJvcik7XG4gICAgICAgIHdzQ29ubmVjdGlvbi5vbmNsb3NlID0gaGl0Y2godGhpcywgdGhpcy5fb25DbG9zZSk7XG4gICAgICAgIHJldHVybiB3c0Nvbm5lY3Rpb247XG4gICAgfVxuICAgIF9idWlsZEludml0ZVVyaSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2NvbnRhY3RUb2tlbikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2J1aWxkVXJpQmFzZSgpICsgJyZjb250YWN0Q3R4PScgKyBlbmNvZGVVUklDb21wb25lbnQodGhpcy5fY29udGFjdFRva2VuKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9idWlsZFVyaUJhc2UoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfYnVpbGRSZWNvbm5lY3RVcmkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9idWlsZFVyaUJhc2UoKSArICcmY2xpZW50VG9rZW49JyArIGVuY29kZVVSSUNvbXBvbmVudCh0aGlzLl9jbGllbnRUb2tlbik7XG4gICAgfVxuICAgIF9idWlsZFVyaUJhc2UoKSB7XG4gICAgICAgIHZhciBzZXBhcmF0b3IgPSAnPyc7XG4gICAgICAgIGlmICh0aGlzLl9zaWduYWxpbmdVcmkuaW5kZXhPZihzZXBhcmF0b3IpID4gLTEpIHtcbiAgICAgICAgICAgIHNlcGFyYXRvciA9ICcmJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fc2lnbmFsaW5nVXJpICsgc2VwYXJhdG9yICsgJ2NhbGxJZD0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHRoaXMuX2NhbGxJZCk7XG4gICAgfVxuICAgIF9vbk1lc3NhZ2UoZXZ0KSB7XG4gICAgICAgIHRoaXMuc3RhdGUub25ScGNNc2coSlNPTi5wYXJzZShldnQuZGF0YSkpO1xuICAgIH1cbiAgICBfb25PcGVuKGV2dCkge1xuICAgICAgICB0aGlzLnN0YXRlLm9uT3BlbihldnQpO1xuICAgIH1cbiAgICBfb25FcnJvcihldnQpIHtcbiAgICAgICAgdGhpcy5zdGF0ZS5vbkVycm9yKGV2dCk7XG4gICAgfVxuICAgIF9vbkNsb3NlKGV2dCkge1xuICAgICAgICB0aGlzLl9sb2dnZXIubG9nKCdXZWJTb2NrZXQgb25jbG9zZSBjb2RlPScgKyBldnQuY29kZSArICcsIHJlYXNvbj0nICsgZXZ0LnJlYXNvbik7XG4gICAgICAgIHRoaXMuc3RhdGUub25DbG9zZShldnQpO1xuICAgIH1cbiAgICBfcmVjb25uZWN0KCkge1xuICAgICAgICB0aGlzLl93c3MgPSB0aGlzLl9jb25uZWN0V2ViU29ja2V0KHRoaXMuX2J1aWxkUmVjb25uZWN0VXJpKCkpO1xuICAgIH1cbiAgICBpbnZpdGUoc2RwLCBpY2VDYW5kaWRhdGVzKSB7XG4gICAgICAgIHRoaXMuc3RhdGUuaW52aXRlKHNkcCwgaWNlQ2FuZGlkYXRlcyk7XG4gICAgfVxuICAgIGFjY2VwdCgpIHtcbiAgICAgICAgdGhpcy5zdGF0ZS5hY2NlcHQoKTtcbiAgICB9XG4gICAgaGFuZ3VwKCkge1xuICAgICAgICB0aGlzLnN0YXRlLmhhbmd1cCgpO1xuICAgIH1cbn0iLCJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENDUEluaXRpYXRpb25TdHJhdGVneUludGVyZmFjZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiQ0NQSW5pdGlhdGlvblN0cmF0ZWd5SW50ZXJmYWNlIGluaXRpYWxpemVkXCIpO1xuICAgIH1cblxuICAgIGdldFN0cmF0ZWd5TmFtZSgpe1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiZ2V0U3RyYXRlZ3lOYW1lIG5lZWRzIHRvIGJlIG92ZXJyaWRkZW5cIik7XG4gICAgfVxuXG4gICAgLy8gdGhlIGZvbGxvd2luZyBmdW5jdGlvbnMgYXJlIHJ0Y19wZWVyX2Nvbm5lY3Rpb25fZmFjdG9yeSByZWxhdGVkIGZ1bmN0aW9uc1xuICAgIC8vIGNoZWNrIGlmIHRoZSBicm93c2VyIHN1cHBvcnRzIGVhcmx5IG1lZGlhIGNvbm5lY3Rpb25cbiAgICBfaXNFYXJseU1lZGlhQ29ubmVjdGlvblN1cHBvcnRlZCgpe1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiX2lzRWFybHlNZWRpYUNvbm5lY3Rpb25TdXBwb3J0ZWQgbmVlZHMgdG8gYmUgb3ZlcnJpZGRlblwiKTtcbiAgICB9XG5cbiAgICBfY3JlYXRlUnRjUGVlckNvbm5lY3Rpb24oKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJfY3JlYXRlUnRjUGVlckNvbm5lY3Rpb24gbmVlZHMgdG8gYmUgb3ZlcnJpZGRlblwiKTtcbiAgICB9XG5cbiAgICAvLyB0aGUgZm9sbG93aW5nIGZ1bmN0aW9ucyBhcmUgcnRjX3Nlc3Npb24gcmVsYXRlZCBmdW5jdGlvbnNcbiAgICBfZ3VNKCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiX2d1TSBuZWVkcyB0byBiZSBvdmVycmlkZGVuXCIpO1xuICAgIH1cblxuICAgIGFkZFN0cmVhbSgpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcImFkZFN0cmVhbSBuZWVkcyB0byBiZSBvdmVycmlkZGVuXCIpO1xuICAgIH1cblxuICAgIHNldFJlbW90ZURlc2NyaXB0aW9uKCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwic2V0UmVtb3RlRGVzY3JpcHRpb24gbmVlZHMgdG8gYmUgb3ZlcnJpZGRlblwiKTtcbiAgICB9XG5cbiAgICBvbkljZVN0YXRlQ2hhbmdlKCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwib25JY2VTdGF0ZUNoYW5nZSBuZWVkcyB0byBiZSBvdmVycmlkZGVuXCIpO1xuICAgIH1cblxuICAgIG9uUGVlckNvbm5lY3Rpb25TdGF0ZUNoYW5nZSgpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIm9uUGVlckNvbm5lY3Rpb25TdGF0ZUNoYW5nZSBuZWVkcyB0byBiZSBvdmVycmlkZGVuXCIpO1xuICAgIH1cblxuICAgIF9jcmVhdGVQZWVyQ29ubmVjdGlvbigpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIl9jcmVhdGVQZWVyQ29ubmVjdGlvbiBuZWVkcyB0byBiZSBvdmVycmlkZGVuXCIpO1xuICAgIH1cblxuICAgIGNvbm5lY3QoKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJjb25uZWN0IG5lZWRzIHRvIGJlIG92ZXJyaWRkZW5cIik7XG4gICAgfVxuXG4gICAgX29udHJhY2soKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJfb250cmFjayBuZWVkcyB0byBiZSBvdmVycmlkZGVuXCIpO1xuICAgIH1cblxuICAgIF9idWlsZE1lZGlhQ29uc3RyYWludHMoKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJfYnVpbGRNZWRpYUNvbnN0cmFpbnRzIG5lZWRzIHRvIGJlIG92ZXJyaWRkZW5cIik7XG4gICAgfVxufVxuIiwiLyoqXG4gKiBCeSB1c2luZyB0aGUgQ2l0cml4IHVjc2RrIChodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9AY2l0cml4L3Vjc2RrKSwgeW91IGFyZSBhY2NlcHRpbmcgdGhlIENpdHJpeCBEZXZlbG9wZXIgVGVybXMgb2YgVXNlICBsb2NhdGVkIGhlcmU6IGh0dHBzOi8vd3d3LmNsb3VkLmNvbS90ZXJtcy1vZi11c2UuXG4gKi9cblxuaW1wb3J0IENDUEluaXRpYXRpb25TdHJhdGVneUludGVyZmFjZSBmcm9tIFwiLi9DQ1BJbml0aWF0aW9uU3RyYXRlZ3lJbnRlcmZhY2VcIjtcbmltcG9ydCB7RmFpbGVkU3RhdGV9IGZyb20gXCIuLi9ydGNfc2Vzc2lvblwiO1xuaW1wb3J0IHtSVENfRVJST1JTfSBmcm9tIFwiLi4vcnRjX2NvbnN0XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENpdHJpeFZESVN0cmF0ZWd5IGV4dGVuZHMgQ0NQSW5pdGlhdGlvblN0cmF0ZWd5SW50ZXJmYWNlIHtcblxuICAgIGNvbnN0cnVjdG9yKHVzZVJlYWxDaXRyaXggPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIGlmKHVzZVJlYWxDaXRyaXgpe1xuICAgICAgICAgICAgcmVxdWlyZShcIkBjaXRyaXgvdWNzZGsvQ2l0cml4V2ViUlRDXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUubG9nKFwiQ2l0cml4VkRJU3RyYXRlZ3kgaW5pdGlhbGl6aW5nXCIpO1xuICAgICAgICB0aGlzLmluaXRDaXRyaXhXZWJSVEMoKTtcbiAgICAgICAgdGhpcy5pbml0R2V0Q2l0cml4V2VicnRjUmVkaXIoKTtcbiAgICAgICAgdGhpcy5pbml0TG9nKCk7XG4gICAgfVxuXG4gICAgaW5pdENpdHJpeFdlYlJUQygpIHtcbiAgICAgICAgd2luZG93LkNpdHJpeFdlYlJUQy5zZXRWTUV2ZW50Q2FsbGJhY2soKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAoZXZlbnQuZXZlbnQgPT09ICd2ZGlDbGllbnRDb25uZWN0ZWQnKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF3aW5kb3cuQ2l0cml4V2ViUlRDLmlzRmVhdHVyZU9uKFwid2VicnRjMS4wXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2l0cml4IFdlYlJUQyByZWRpcmVjdGlvbiBmZWF0dXJlIGlzIE5PVCBzdXBwb3J0ZWQhJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQ2l0cml4VkRJU3RyYXRlZ3kgaW5pdGlhbGl6ZWRcIik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LmV2ZW50ID09PSAndmRpQ2xpZW50RGlzY29ubmVjdGVkJykge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwidmRpQ2xpZW50RGlzY29ubmVjdGVkXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgd2luZG93LkNpdHJpeFdlYlJUQy5pbml0VUNTREsoXCJBbWF6b25Db25uZWN0XCIpO1xuICAgIH1cbiAgICBpbml0R2V0Q2l0cml4V2VicnRjUmVkaXIoKSB7XG4gICAgICAgIHdpbmRvdy5nZXRDaXRyaXhXZWJydGNSZWRpciA9ICgpID0+IFByb21pc2UucmVzb2x2ZSgxKTtcbiAgICB9XG5cbiAgICBpbml0TG9nKCkge1xuICAgICAgICB3aW5kb3cuQ2l0cml4V2ViUlRDLmluaXRMb2coZ2xvYmFsLmNvbm5lY3QuZ2V0TG9nKCkpO1xuICAgIH1cblxuICAgIC8vIHRoZSBmb2xsb3dpbmcgZnVuY3Rpb25zIGFyZSBydGNfcGVlcl9jb25uZWN0aW9uX2ZhY3RvcnkgcmVsYXRlZCBmdW5jdGlvbnNcbiAgICAvLyBjaGVjayBpZiB0aGUgYnJvd3NlciBzdXBwb3J0cyBlYXJseSBtZWRpYSBjb25uZWN0aW9uXG4gICAgX2lzRWFybHlNZWRpYUNvbm5lY3Rpb25TdXBwb3J0ZWQoKSB7XG4gICAgICAgIC8vIENpdHJpeCBXZWJSVEMgU0RLIGRvZXNuJ3Qgc3VwcG9ydCBlYXJseSBtZWRpYSBjb25uZWN0aW9uXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBfY3JlYXRlUnRjUGVlckNvbm5lY3Rpb24ocnRjUGVlckNvbm5lY3Rpb25Db25maWcsIHJ0Y1BlZXJDb25uZWN0aW9uT3B0aW9uYWxDb25maWcpIHtcbiAgICAgICAgcmV0dXJuIG5ldyB3aW5kb3cuQ2l0cml4V2ViUlRDLkNpdHJpeFBlZXJDb25uZWN0aW9uKHJ0Y1BlZXJDb25uZWN0aW9uQ29uZmlnLCBydGNQZWVyQ29ubmVjdGlvbk9wdGlvbmFsQ29uZmlnKTtcbiAgICB9XG5cbiAgICAvLyB0aGUgZm9sbG93aW5nIGZ1bmN0aW9ucyBhcmUgcnRjX3Nlc3Npb24gcmVsYXRlZCBmdW5jdGlvbnNcbiAgICBfZ1VNKGNvbnN0cmFpbnRzKSB7XG4gICAgICAgIHJldHVybiB3aW5kb3cuQ2l0cml4V2ViUlRDLmdldFVzZXJNZWRpYShjb25zdHJhaW50cyk7XG4gICAgfVxuXG4gICAgYWRkU3RyZWFtKF9wYywgc3RyZWFtKSB7XG4gICAgICAgIHN0cmVhbS5nZXRUcmFja3MoKS5mb3JFYWNoKHRyYWNrID0+IHtcbiAgICAgICAgICAgIF9wYy5hZGRUcmFuc2NlaXZlcih0cmFjaywge30pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzZXRSZW1vdGVEZXNjcmlwdGlvbihzZWxmLCBydGNTZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IGFuc3dlclNlc3Npb25EZXNjcmlwdGlvbiA9IHNlbGYuX2NyZWF0ZVNlc3Npb25EZXNjcmlwdGlvbih7dHlwZTogJ2Fuc3dlcicsIHNkcDogc2VsZi5fc2RwfSk7XG5cbiAgICAgICAgcnRjU2Vzc2lvbi5fcGMuc2V0UmVtb3RlRGVzY3JpcHRpb24oYW5zd2VyU2Vzc2lvbkRlc2NyaXB0aW9uLCAoKSA9PiB7XG4gICAgICAgICAgICB2YXIgcmVtb3RlQ2FuZGlkYXRlUHJvbWlzZXMgPSBQcm9taXNlLmFsbChzZWxmLl9jYW5kaWRhdGVzLm1hcChmdW5jdGlvbiAoY2FuZGlkYXRlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlbW90ZUNhbmRpZGF0ZSA9IHNlbGYuX2NyZWF0ZVJlbW90ZUNhbmRpZGF0ZShjYW5kaWRhdGUpO1xuICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oJ0FkZGluZyByZW1vdGUgY2FuZGlkYXRlJywgcmVtb3RlQ2FuZGlkYXRlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcnRjU2Vzc2lvbi5fcGMuYWRkSWNlQ2FuZGlkYXRlKHJlbW90ZUNhbmRpZGF0ZSk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICByZW1vdGVDYW5kaWRhdGVQcm9taXNlcy5jYXRjaChyZWFzb24gPT4ge1xuICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm4oJ0Vycm9yIGFkZGluZyByZW1vdGUgY2FuZGlkYXRlJywgcmVhc29uKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcnRjU2Vzc2lvbi5fc2Vzc2lvblJlcG9ydC5zZXRSZW1vdGVEZXNjcmlwdGlvbkZhaWx1cmUgPSBmYWxzZTtcbiAgICAgICAgICAgIHNlbGYuX3JlbW90ZURlc2NyaXB0aW9uU2V0ID0gdHJ1ZTtcbiAgICAgICAgICAgIHNlbGYuX2NoZWNrQW5kVHJhbnNpdCgpO1xuICAgICAgICB9LCAoKSA9PiB7XG4gICAgICAgICAgICBydGNTZXNzaW9uLl9zdG9wU2Vzc2lvbigpO1xuICAgICAgICAgICAgcnRjU2Vzc2lvbi5fc2Vzc2lvblJlcG9ydC5zZXRSZW1vdGVEZXNjcmlwdGlvbkZhaWx1cmUgPSB0cnVlO1xuICAgICAgICAgICAgc2VsZi50cmFuc2l0KG5ldyBGYWlsZWRTdGF0ZShydGNTZXNzaW9uLCBSVENfRVJST1JTLlNFVF9SRU1PVEVfREVTQ1JJUFRJT05fRkFJTFVSRSkpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBvbkljZVN0YXRlQ2hhbmdlKGV2dCwgX3BjKSB7XG4gICAgICAgIHJldHVybiBfcGMuaWNlQ29ubmVjdGlvblN0YXRlO1xuICAgIH1cblxuICAgIG9uUGVlckNvbm5lY3Rpb25TdGF0ZUNoYW5nZShfcGMpIHtcbiAgICAgICAgcmV0dXJuIF9wYy5jb25uZWN0aW9uU3RhdGVfO1xuICAgIH1cblxuICAgIF9jcmVhdGVQZWVyQ29ubmVjdGlvbihjb25maWd1cmF0aW9uLCBvcHRpb25hbENvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIG5ldyB3aW5kb3cuQ2l0cml4V2ViUlRDLkNpdHJpeFBlZXJDb25uZWN0aW9uKGNvbmZpZ3VyYXRpb24sIG9wdGlvbmFsQ29uZmlndXJhdGlvbik7XG4gICAgfVxuXG4gICAgX29udHJhY2soc2VsZiwgZXZ0KSB7XG4gICAgICAgIHdpbmRvdy5DaXRyaXhXZWJSVEMubWFwQXVkaW9FbGVtZW50KHNlbGYuX3JlbW90ZUF1ZGlvRWxlbWVudCk7XG4gICAgICAgIGlmIChldnQuc3RyZWFtcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICBzZWxmLl9sb2dnZXIud2FybignRm91bmQgbW9yZSB0aGFuIDEgc3RyZWFtcyBmb3IgJyArIGV2dC50cmFjay5raW5kICsgJyB0cmFjayAnICsgZXZ0LnRyYWNrLmlkICsgJyA6ICcgK1xuICAgICAgICAgICAgICAgIGV2dC5zdHJlYW1zLm1hcChzdHJlYW0gPT4gc3RyZWFtLmlkKS5qb2luKCcsJykpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChldnQudHJhY2sua2luZCA9PT0gJ3ZpZGVvJyAmJiBzZWxmLl9yZW1vdGVWaWRlb0VsZW1lbnQpIHtcbiAgICAgICAgICAgIHNlbGYuX3JlbW90ZVZpZGVvRWxlbWVudC5zcmNPYmplY3QgPSBldnQuc3RyZWFtc1swXTtcbiAgICAgICAgICAgIHNlbGYuX3JlbW90ZVZpZGVvU3RyZWFtID0gZXZ0LnN0cmVhbXNbMF07XG4gICAgICAgIH0gZWxzZSBpZiAoZXZ0LnRyYWNrLmtpbmQgPT09ICdhdWRpbycgJiYgc2VsZi5fcmVtb3RlQXVkaW9FbGVtZW50KSB7XG4gICAgICAgICAgICBzZWxmLl9yZW1vdGVBdWRpb0VsZW1lbnQuc3JjT2JqZWN0ID0gZXZ0LnN0cmVhbXNbMF07XG4gICAgICAgICAgICBzZWxmLl9yZW1vdGVBdWRpb1N0cmVhbSA9IGV2dC5zdHJlYW1zWzBdO1xuICAgICAgICB9XG4gICAgICAgIHNlbGYuX3JlbW90ZUF1ZGlvRWxlbWVudC5wbGF5KCk7XG4gICAgfVxuXG4gICAgX2J1aWxkTWVkaWFDb25zdHJhaW50cyhzZWxmLCBtZWRpYUNvbnN0cmFpbnRzKSB7XG4gICAgICAgIGlmIChzZWxmLl9lbmFibGVBdWRpbykge1xuICAgICAgICAgICAgdmFyIGF1ZGlvQ29uc3RyYWludHMgPSB7fTtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc2VsZi5fZWNob0NhbmNlbGxhdGlvbiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBhdWRpb0NvbnN0cmFpbnRzLmVjaG9DYW5jZWxsYXRpb24gPSAhIXNlbGYuX2VjaG9DYW5jZWxsYXRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAod2luZG93LmF1ZGlvX2lucHV0KSB7XG4gICAgICAgICAgICAgICAgYXVkaW9Db25zdHJhaW50cy5kZXZpY2VJZCA9IHdpbmRvdy5hdWRpb19pbnB1dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhhdWRpb0NvbnN0cmFpbnRzKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgbWVkaWFDb25zdHJhaW50cy5hdWRpbyA9IGF1ZGlvQ29uc3RyYWludHM7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG1lZGlhQ29uc3RyYWludHMuYXVkaW8gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWVkaWFDb25zdHJhaW50cy5hdWRpbyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0U3RyYXRlZ3lOYW1lKCkge1xuICAgICAgICByZXR1cm4gJ0NpdHJpeFZESVN0cmF0ZWd5JztcbiAgICB9XG59IiwiaW1wb3J0IENDUEluaXRpYXRpb25TdHJhdGVneUludGVyZmFjZSBmcm9tIFwiLi9DQ1BJbml0aWF0aW9uU3RyYXRlZ3lJbnRlcmZhY2VcIjtcbmltcG9ydCB7RmFpbGVkU3RhdGV9IGZyb20gXCIuLi9ydGNfc2Vzc2lvblwiO1xuaW1wb3J0IHtSVENfRVJST1JTfSBmcm9tIFwiLi4vcnRjX2NvbnN0XCI7XG5pbXBvcnQge0FOU1dFUiwgQVVESU8sIENIUk9NRSwgRENWX1NUUkFURUdZLCBVTkRFRklORUR9IGZyb20gXCIuLi9jb25maWcvY29uc3RhbnRzXCI7XG5jb25zdCBDSFJPTUVfU1VQUE9SVEVEX1ZFUlNJT04gPSA1OTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRENWV2ViUlRDU3RyYXRlZ3kgZXh0ZW5kcyBDQ1BJbml0aWF0aW9uU3RyYXRlZ3lJbnRlcmZhY2Uge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIGlmICh3aW5kb3cuRENWV2ViUlRDUGVlckNvbm5lY3Rpb25Qcm94eSkge1xuICAgICAgICAgICAgd2luZG93LkRDVldlYlJUQ1BlZXJDb25uZWN0aW9uUHJveHkuc2V0SW5pdENhbGxiYWNrKChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgICBpZihyZXN1bHQuc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIG9ubHkgY3JlYXRlZCB3aGVuOlxuICAgICAgICAgICAgICAgICAgICAvLyAxKSB0aGUgZGN2IHdlYnJ0YyBjaHJvbWUgZXh0ZW5zaW9uIGlzIGluc3RhbGxlZCBhbmQgZW5hYmxlZCBhbmRcbiAgICAgICAgICAgICAgICAgICAgLy8gMikgdGhpcyBicm93c2VyIGlzIHJ1bm5pbmcgd2l0aGluIGEgRENWIHNlcnZlciBlbnZpcm9ubWVudCBhbmRcbiAgICAgICAgICAgICAgICAgICAgLy8gMykgdGhlIGRjdiBzZXJ2ZXIgaXMgY29ubmVjdGVkIGZyb20gYSBXZWJSVEMgcmVkaXJlY3Rpb24tZW5hYmxlZCBjbGllbnRcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm94eSA9IHdpbmRvdy5EQ1ZXZWJSVENSZWRpclByb3h5O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3h5Lm92ZXJyaWRlV2ViUlRDKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdEQ1ZTdHJhdGVneSBpbml0aWFsaXplZCcpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRENWIFdlYlJUQyByZWRpcmVjdGlvbiBmZWF0dXJlIGlzIE5PVCBzdXBwb3J0ZWQhJyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LCA1MDAwKTtcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdEQ1YgV2ViUlRDIHJlZGlyZWN0aW9uIGZlYXR1cmUgaXMgTk9UIHN1cHBvcnRlZCEnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlzQ2hyb21lQnJvd3NlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJveHkuY2xpZW50SW5mby5icm93c2VyRGV0YWlscy5icm93c2VyID09PSBDSFJPTUU7XG4gICAgfVxuXG4gICAgZ2V0Q2hyb21lQnJvd3NlclZlcnNpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3h5LmNsaWVudEluZm8uYnJvd3NlckRldGFpbHMudmVyc2lvbjtcbiAgICB9XG5cbiAgICBfaXNFYXJseU1lZGlhQ29ubmVjdGlvblN1cHBvcnRlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNDaHJvbWVCcm93c2VyKCkgJiYgdGhpcy5nZXRDaHJvbWVCcm93c2VyVmVyc2lvbigpID49IENIUk9NRV9TVVBQT1JURURfVkVSU0lPTjtcbiAgICB9XG5cbiAgICBfY3JlYXRlUnRjUGVlckNvbm5lY3Rpb24ocnRjUGVlckNvbm5lY3Rpb25Db25maWcsIHJ0Y1BlZXJDb25uZWN0aW9uT3B0aW9uYWxDb25maWcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJveHkuY3JlYXRlUGVlckNvbm5lY3Rpb24ocnRjUGVlckNvbm5lY3Rpb25Db25maWcsIHJ0Y1BlZXJDb25uZWN0aW9uT3B0aW9uYWxDb25maWcpO1xuICAgIH1cblxuICAgIF9idWlsZE1lZGlhQ29uc3RyYWludHMoc2VsZiwgbWVkaWFDb25zdHJhaW50cykge1xuICAgICAgICBpZiAoc2VsZi5fZW5hYmxlQXVkaW8pIHtcbiAgICAgICAgICAgIHZhciBhdWRpb0NvbnN0cmFpbnRzID0ge307XG4gICAgICAgICAgICBpZiAodHlwZW9mIHNlbGYuX2VjaG9DYW5jZWxsYXRpb24gIT09IFVOREVGSU5FRCkge1xuICAgICAgICAgICAgICAgIGF1ZGlvQ29uc3RyYWludHMuZWNob0NhbmNlbGxhdGlvbiA9ICEhc2VsZi5fZWNob0NhbmNlbGxhdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhhdWRpb0NvbnN0cmFpbnRzKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgbWVkaWFDb25zdHJhaW50cy5hdWRpbyA9IGF1ZGlvQ29uc3RyYWludHM7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG1lZGlhQ29uc3RyYWludHMuYXVkaW8gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWVkaWFDb25zdHJhaW50cy5hdWRpbyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX2dVTShjb25zdHJhaW50cykge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm94eS5nZXRVc2VyTWVkaWEoY29uc3RyYWludHMpO1xuICAgIH1cblxuICAgIF9jcmVhdGVQZWVyQ29ubmVjdGlvbihjb25maWd1cmF0aW9uLCBvcHRpb25hbENvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJveHkuY3JlYXRlUGVlckNvbm5lY3Rpb24oY29uZmlndXJhdGlvbiwgb3B0aW9uYWxDb25maWd1cmF0aW9uKTtcbiAgICB9XG5cbiAgICBhZGRTdHJlYW0oX3BjLCBzdHJlYW0pIHtcbiAgICAgICAgc3RyZWFtLmdldFRyYWNrcygpLmZvckVhY2godHJhY2sgPT4ge1xuICAgICAgICAgICAgbGV0IHRyYW5zY2VpdmVyID0gX3BjLmFkZFRyYW5zY2VpdmVyKHRyYWNrLmtpbmQsIHtcbiAgICAgICAgICAgICAgICBzdHJlYW1zOiBbc3RyZWFtXVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0cmFuc2NlaXZlci5zZW5kZXIucmVwbGFjZVRyYWNrKHRyYWNrKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2V0UmVtb3RlRGVzY3JpcHRpb24oc2VsZiwgcnRjU2Vzc2lvbikge1xuICAgICAgICB2YXIgc2V0UmVtb3RlRGVzY3JpcHRpb25Qcm9taXNlID0gcnRjU2Vzc2lvbi5fcGMuc2V0UmVtb3RlRGVzY3JpcHRpb24oc2VsZi5fY3JlYXRlU2Vzc2lvbkRlc2NyaXB0aW9uKHtcbiAgICAgICAgICAgIHR5cGU6IEFOU1dFUixcbiAgICAgICAgICAgIHNkcDogc2VsZi5fc2RwXG4gICAgICAgIH0pKTtcbiAgICAgICAgc2V0UmVtb3RlRGVzY3JpcHRpb25Qcm9taXNlLmNhdGNoKGUgPT4ge1xuICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3IoJ1NldFJlbW90ZURlc2NyaXB0aW9uIGZhaWxlZCcsIGUpO1xuICAgICAgICB9KTtcbiAgICAgICAgc2V0UmVtb3RlRGVzY3JpcHRpb25Qcm9taXNlLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgdmFyIHJlbW90ZUNhbmRpZGF0ZVByb21pc2VzID0gUHJvbWlzZS5hbGwoc2VsZi5fY2FuZGlkYXRlcy5tYXAoZnVuY3Rpb24gKGNhbmRpZGF0ZSkge1xuICAgICAgICAgICAgICAgIHZhciByZW1vdGVDYW5kaWRhdGUgPSBzZWxmLl9jcmVhdGVSZW1vdGVDYW5kaWRhdGUoY2FuZGlkYXRlKTtcbiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCdBZGRpbmcgcmVtb3RlIGNhbmRpZGF0ZScsIHJlbW90ZUNhbmRpZGF0ZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJ0Y1Nlc3Npb24uX3BjLmFkZEljZUNhbmRpZGF0ZShyZW1vdGVDYW5kaWRhdGUpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgcmVtb3RlQ2FuZGlkYXRlUHJvbWlzZXMuY2F0Y2gocmVhc29uID0+IHtcbiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuKCdFcnJvciBhZGRpbmcgcmVtb3RlIGNhbmRpZGF0ZScsIHJlYXNvbik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiByZW1vdGVDYW5kaWRhdGVQcm9taXNlcztcbiAgICAgICAgfSkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICBydGNTZXNzaW9uLl9zZXNzaW9uUmVwb3J0LnNldFJlbW90ZURlc2NyaXB0aW9uRmFpbHVyZSA9IGZhbHNlO1xuICAgICAgICAgICAgc2VsZi5fcmVtb3RlRGVzY3JpcHRpb25TZXQgPSB0cnVlO1xuICAgICAgICAgICAgc2VsZi5fY2hlY2tBbmRUcmFuc2l0KCk7XG4gICAgICAgIH0pLmNhdGNoKCgpID0+IHtcbiAgICAgICAgICAgIHJ0Y1Nlc3Npb24uX3N0b3BTZXNzaW9uKCk7XG4gICAgICAgICAgICBydGNTZXNzaW9uLl9zZXNzaW9uUmVwb3J0LnNldFJlbW90ZURlc2NyaXB0aW9uRmFpbHVyZSA9IHRydWU7XG4gICAgICAgICAgICBzZWxmLnRyYW5zaXQobmV3IEZhaWxlZFN0YXRlKHJ0Y1Nlc3Npb24sIFJUQ19FUlJPUlMuU0VUX1JFTU9URV9ERVNDUklQVElPTl9GQUlMVVJFKSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG9uSWNlU3RhdGVDaGFuZ2UoZXZ0LCBfcGMpIHtcbiAgICAgICAgcmV0dXJuIF9wYy5pY2VDb25uZWN0aW9uU3RhdGU7XG4gICAgfVxuXG4gICAgb25QZWVyQ29ubmVjdGlvblN0YXRlQ2hhbmdlKF9wYykge1xuICAgICAgICByZXR1cm4gX3BjLmNvbm5lY3Rpb25TdGF0ZTtcbiAgICB9XG5cbiAgICBfb250cmFjayhzZWxmLCBldnQpIHtcbiAgICAgICAgaWYgKGV2dC5zdHJlYW1zLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignRm91bmQgbW9yZSB0aGFuIDEgc3RyZWFtcyBmb3IgJyArIGV2dC50cmFjay5raW5kICsgJyB0cmFjayAnICsgZXZ0LnRyYWNrLmlkICsgJyA6ICcgK1xuICAgICAgICAgICAgICAgIGV2dC5zdHJlYW1zLm1hcChzdHJlYW0gPT4gc3RyZWFtLmlkKS5qb2luKCcsJykpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBzdHJlYW0gPSBldnQuc3RyZWFtc1swXTtcbiAgICAgICAgc2VsZi5fcmVtb3RlQXVkaW9FbGVtZW50ID0gdGhpcy5jcmVhdGVNZWRpYUVsZW1lbnQoc3RyZWFtKTtcbiAgICAgICAgc2VsZi5fcmVtb3RlQXVkaW9TdHJlYW0gPSBzdHJlYW07XG4gICAgICAgIHNlbGYuX3JlbW90ZUF1ZGlvRWxlbWVudC5zcmNPYmplY3QgPSBzdHJlYW07XG4gICAgfVxuXG4gICAgY3JlYXRlTWVkaWFFbGVtZW50KHN0cmVhbSkge1xuICAgICAgICBsZXQgcHJvcHMgPSB7XG4gICAgICAgICAgICBraW5kOiBBVURJTyxcbiAgICAgICAgICAgIGF1dG9wbGF5OiB0cnVlLFxuICAgICAgICB9O1xuICAgICAgICBsZXQgZWxlbWVudCA9IHN0cmVhbS5jcmVhdGVNZWRpYUVsZW1lbnQocHJvcHMpO1xuICAgICAgICBjb25zb2xlLmxvZyhcIkNyZWF0aW5nIHByb3hpZWQgbWVkaWEgZWxlbWVudC5cIik7XG4gICAgICAgIHJldHVybiBlbGVtZW50O1xuICAgIH1cblxuICAgIGdldFN0cmF0ZWd5TmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIERDVl9TVFJBVEVHWTtcbiAgICB9XG59XG4iLCJpbXBvcnQgQ0NQSW5pdGlhdGlvblN0cmF0ZWd5SW50ZXJmYWNlIGZyb20gXCIuL0NDUEluaXRpYXRpb25TdHJhdGVneUludGVyZmFjZVwiO1xuaW1wb3J0IHtDSFJPTUVfU1VQUE9SVEVEX1ZFUlNJT04sIFJUQ19FUlJPUlN9IGZyb20gXCIuLi9ydGNfY29uc3RcIjtcbmltcG9ydCB7Z2V0Q2hyb21lQnJvd3NlclZlcnNpb24sIGlzQ2hyb21lQnJvd3Nlcn0gZnJvbSBcIi4uL3V0aWxzXCI7XG5pbXBvcnQge0ZhaWxlZFN0YXRlfSBmcm9tIFwiLi4vcnRjX3Nlc3Npb25cIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3RhbmRhcmRTdHJhdGVneSBleHRlbmRzIENDUEluaXRpYXRpb25TdHJhdGVneUludGVyZmFjZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiU3RhbmRhcmRTdHJhdGVneSBpbml0aWFsaXplZFwiKTtcbiAgICB9XG5cbiAgICAvLyB0aGUgZm9sbG93aW5nIGZ1bmN0aW9ucyBhcmUgcnRjX3BlZXJfY29ubmVjdGlvbl9mYWN0b3J5IHJlbGF0ZWQgZnVuY3Rpb25zXG4gICAgLy8gY2hlY2sgaWYgdGhlIGJyb3dzZXIgc3VwcG9ydHMgZWFybHkgbWVkaWEgY29ubmVjdGlvblxuICAgIF9pc0Vhcmx5TWVkaWFDb25uZWN0aW9uU3VwcG9ydGVkKCl7XG4gICAgICAgIHJldHVybiBpc0Nocm9tZUJyb3dzZXIoKSAmJiBnZXRDaHJvbWVCcm93c2VyVmVyc2lvbigpID49IENIUk9NRV9TVVBQT1JURURfVkVSU0lPTjtcbiAgICB9XG5cbiAgICBfY3JlYXRlUnRjUGVlckNvbm5lY3Rpb24ocnRjUGVlckNvbm5lY3Rpb25Db25maWcsIHJ0Y1BlZXJDb25uZWN0aW9uT3B0aW9uYWxDb25maWcpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSVENQZWVyQ29ubmVjdGlvbihydGNQZWVyQ29ubmVjdGlvbkNvbmZpZywgcnRjUGVlckNvbm5lY3Rpb25PcHRpb25hbENvbmZpZyk7XG4gICAgfVxuXG4gICAgLy8gdGhlIGZvbGxvd2luZyBmdW5jdGlvbnMgYXJlIHJ0Y19zZXNzaW9uIHJlbGF0ZWQgZnVuY3Rpb25zXG4gICAgX2dVTShjb25zdHJhaW50cykge1xuICAgICAgICByZXR1cm4gbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEoY29uc3RyYWludHMpO1xuICAgIH1cblxuICAgIGFkZFN0cmVhbShfcGMsIHN0cmVhbSkge1xuICAgICAgICBfcGMuYWRkU3RyZWFtKHN0cmVhbSk7XG4gICAgfVxuXG4gICAgc2V0UmVtb3RlRGVzY3JpcHRpb24oc2VsZiwgcnRjU2Vzc2lvbikge1xuICAgICAgICB2YXIgc2V0UmVtb3RlRGVzY3JpcHRpb25Qcm9taXNlID0gcnRjU2Vzc2lvbi5fcGMuc2V0UmVtb3RlRGVzY3JpcHRpb24oc2VsZi5fY3JlYXRlU2Vzc2lvbkRlc2NyaXB0aW9uKHtcbiAgICAgICAgICAgIHR5cGU6ICdhbnN3ZXInLFxuICAgICAgICAgICAgc2RwOiBzZWxmLl9zZHBcbiAgICAgICAgfSkpO1xuICAgICAgICBzZXRSZW1vdGVEZXNjcmlwdGlvblByb21pc2UuY2F0Y2goZSA9PiB7XG4gICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcignU2V0UmVtb3RlRGVzY3JpcHRpb24gZmFpbGVkJywgZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBzZXRSZW1vdGVEZXNjcmlwdGlvblByb21pc2UudGhlbigoKSA9PiB7XG4gICAgICAgICAgICB2YXIgcmVtb3RlQ2FuZGlkYXRlUHJvbWlzZXMgPSBQcm9taXNlLmFsbChzZWxmLl9jYW5kaWRhdGVzLm1hcChmdW5jdGlvbiAoY2FuZGlkYXRlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlbW90ZUNhbmRpZGF0ZSA9IHNlbGYuX2NyZWF0ZVJlbW90ZUNhbmRpZGF0ZShjYW5kaWRhdGUpO1xuICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmluZm8oJ0FkZGluZyByZW1vdGUgY2FuZGlkYXRlJywgcmVtb3RlQ2FuZGlkYXRlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcnRjU2Vzc2lvbi5fcGMuYWRkSWNlQ2FuZGlkYXRlKHJlbW90ZUNhbmRpZGF0ZSk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICByZW1vdGVDYW5kaWRhdGVQcm9taXNlcy5jYXRjaChyZWFzb24gPT4ge1xuICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm4oJ0Vycm9yIGFkZGluZyByZW1vdGUgY2FuZGlkYXRlJywgcmVhc29uKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHJlbW90ZUNhbmRpZGF0ZVByb21pc2VzO1xuICAgICAgICB9KS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHJ0Y1Nlc3Npb24uX3Nlc3Npb25SZXBvcnQuc2V0UmVtb3RlRGVzY3JpcHRpb25GYWlsdXJlID0gZmFsc2U7XG4gICAgICAgICAgICBzZWxmLl9yZW1vdGVEZXNjcmlwdGlvblNldCA9IHRydWU7XG4gICAgICAgICAgICBzZWxmLl9jaGVja0FuZFRyYW5zaXQoKTtcbiAgICAgICAgfSkuY2F0Y2goKCkgPT4ge1xuICAgICAgICAgICAgcnRjU2Vzc2lvbi5fc3RvcFNlc3Npb24oKTtcbiAgICAgICAgICAgIHJ0Y1Nlc3Npb24uX3Nlc3Npb25SZXBvcnQuc2V0UmVtb3RlRGVzY3JpcHRpb25GYWlsdXJlID0gdHJ1ZTtcbiAgICAgICAgICAgIHNlbGYudHJhbnNpdChuZXcgRmFpbGVkU3RhdGUocnRjU2Vzc2lvbiwgUlRDX0VSUk9SUy5TRVRfUkVNT1RFX0RFU0NSSVBUSU9OX0ZBSUxVUkUpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgb25JY2VTdGF0ZUNoYW5nZShldnQsIF9wYykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICAgIHJldHVybiBldnQuY3VycmVudFRhcmdldC5pY2VDb25uZWN0aW9uU3RhdGU7XG4gICAgfVxuXG4gICAgb25QZWVyQ29ubmVjdGlvblN0YXRlQ2hhbmdlKF9wYykge1xuICAgICAgICByZXR1cm4gX3BjLmNvbm5lY3Rpb25TdGF0ZTtcbiAgICB9XG5cbiAgICBfY3JlYXRlUGVlckNvbm5lY3Rpb24oY29uZmlndXJhdGlvbiwgb3B0aW9uYWxDb25maWd1cmF0aW9uKSB7XG4gICAgICAgIHJldHVybiBuZXcgUlRDUGVlckNvbm5lY3Rpb24oY29uZmlndXJhdGlvbiwgb3B0aW9uYWxDb25maWd1cmF0aW9uKTtcbiAgICB9XG5cbiAgICBfb250cmFjayhzZWxmLCBldnQpIHtcbiAgICAgICAgaWYgKGV2dC5zdHJlYW1zLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIHNlbGYuX2xvZ2dlci53YXJuKCdGb3VuZCBtb3JlIHRoYW4gMSBzdHJlYW1zIGZvciAnICsgZXZ0LnRyYWNrLmtpbmQgKyAnIHRyYWNrICcgKyBldnQudHJhY2suaWQgKyAnIDogJyArXG4gICAgICAgICAgICAgICAgZXZ0LnN0cmVhbXMubWFwKHN0cmVhbSA9PiBzdHJlYW0uaWQpLmpvaW4oJywnKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV2dC50cmFjay5raW5kID09PSAndmlkZW8nICYmIHNlbGYuX3JlbW90ZVZpZGVvRWxlbWVudCkge1xuICAgICAgICAgICAgc2VsZi5fcmVtb3RlVmlkZW9FbGVtZW50LnNyY09iamVjdCA9IGV2dC5zdHJlYW1zWzBdO1xuICAgICAgICAgICAgc2VsZi5fcmVtb3RlVmlkZW9TdHJlYW0gPSBldnQuc3RyZWFtc1swXTtcbiAgICAgICAgfSBlbHNlIGlmIChldnQudHJhY2sua2luZCA9PT0gJ2F1ZGlvJyAmJiBzZWxmLl9yZW1vdGVBdWRpb0VsZW1lbnQpIHtcbiAgICAgICAgICAgIHNlbGYuX3JlbW90ZUF1ZGlvRWxlbWVudC5zcmNPYmplY3QgPSBldnQuc3RyZWFtc1swXTtcbiAgICAgICAgICAgIHNlbGYuX3JlbW90ZUF1ZGlvU3RyZWFtID0gZXZ0LnN0cmVhbXNbMF07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfYnVpbGRNZWRpYUNvbnN0cmFpbnRzKHNlbGYsIG1lZGlhQ29uc3RyYWludHMpIHtcbiAgICAgICAgaWYgKHNlbGYuX2VuYWJsZUF1ZGlvKSB7XG4gICAgICAgICAgICB2YXIgYXVkaW9Db25zdHJhaW50cyA9IHt9O1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBzZWxmLl9lY2hvQ2FuY2VsbGF0aW9uICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIGF1ZGlvQ29uc3RyYWludHMuZWNob0NhbmNlbGxhdGlvbiA9ICEhc2VsZi5fZWNob0NhbmNlbGxhdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhhdWRpb0NvbnN0cmFpbnRzKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgbWVkaWFDb25zdHJhaW50cy5hdWRpbyA9IGF1ZGlvQ29uc3RyYWludHM7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG1lZGlhQ29uc3RyYWludHMuYXVkaW8gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWVkaWFDb25zdHJhaW50cy5hdWRpbyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0U3RyYXRlZ3lOYW1lKCkge1xuICAgICAgICByZXR1cm4gJ1N0YW5kYXJkU3RyYXRlZ3knO1xuICAgIH1cbn0iLCIvKipcbiAqIENvcHlyaWdodCAyMDE3IEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiAqL1xuXG5pbXBvcnQge0lsbGVnYWxQYXJhbWV0ZXJzfSBmcm9tICcuL2V4Y2VwdGlvbnMnO1xuaW1wb3J0IHtnZXRLaW5kLCBwYXJzZVJ0cE1hcCwgcGFyc2VSdHBQYXJhbWV0ZXJzLCBzcGxpdExpbmVzLCBzcGxpdFNlY3Rpb25zLCB3cml0ZUZtdHB9IGZyb20gJ3NkcCc7XG5cbi8qKlxuICogQWxsIGxvZ2dpbmcgbWV0aG9kcyB1c2VkIGJ5IGNvbm5lY3QtcnRjLlxuICovXG52YXIgbG9nTWV0aG9kcyA9IFsnbG9nJywgJ2luZm8nLCAnd2FybicsICdlcnJvciddO1xuXG4vKipcbiAqIEJpbmRzIHRoZSBnaXZlbiBpbnN0YW5jZSBvYmplY3QgYXMgdGhlIGNvbnRleHQgZm9yXG4gKiB0aGUgbWV0aG9kIHByb3ZpZGVkLlxuICpcbiAqIEBwYXJhbSBzY29wZSBUaGUgaW5zdGFuY2Ugb2JqZWN0IHRvIGJlIHNldCBhcyB0aGUgc2NvcGVcbiAqICAgIG9mIHRoZSBmdW5jdGlvbi5cbiAqIEBwYXJhbSBtZXRob2QgVGhlIG1ldGhvZCB0byBiZSBlbmNhcHN1bGF0ZWQuXG4gKlxuICogQWxsIG90aGVyIGFyZ3VtZW50cywgaWYgYW55LCBhcmUgYm91bmQgdG8gdGhlIG1ldGhvZFxuICogaW52b2NhdGlvbiBpbnNpZGUgdGhlIGNsb3N1cmUuXG4gKlxuICogQHJldHVybiBBIGNsb3N1cmUgZW5jYXBzdWxhdGluZyB0aGUgaW52b2NhdGlvbiBvZiB0aGVcbiAqICAgIG1ldGhvZCBwcm92aWRlZCBpbiBjb250ZXh0IG9mIHRoZSBnaXZlbiBpbnN0YW5jZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhpdGNoKCkge1xuICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgICB2YXIgc2NvcGUgPSBhcmdzLnNoaWZ0KCk7XG4gICAgdmFyIG1ldGhvZCA9IGFyZ3Muc2hpZnQoKTtcblxuICAgIGlmICghc2NvcGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IElsbGVnYWxQYXJhbWV0ZXJzKCd1dGlscy5oaXRjaCgpOiBzY29wZSBpcyByZXF1aXJlZCEnKTtcbiAgICB9XG5cbiAgICBpZiAoIW1ldGhvZCkge1xuICAgICAgICB0aHJvdyBuZXcgSWxsZWdhbFBhcmFtZXRlcnMoJ3V0aWxzLmhpdGNoKCk6IG1ldGhvZCBpcyByZXF1aXJlZCEnKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG1ldGhvZCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgSWxsZWdhbFBhcmFtZXRlcnMoJ3V0aWxzLmhpdGNoKCk6IG1ldGhvZCBpcyBub3QgYSBmdW5jdGlvbiEnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gX2hpdGNoZWRGdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGNsb3N1cmVBcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgICAgICAgcmV0dXJuIG1ldGhvZC5hcHBseShzY29wZSwgYXJncy5jb25jYXQoY2xvc3VyZUFyZ3MpKTtcbiAgICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd3JhcExvZ2dlcihsb2dnZXIsIGNhbGxJZCwgbG9nQ2F0ZWdvcnkpIHtcbiAgICB2YXIgX2xvZ2dlciA9IHt9O1xuICAgIGxvZ01ldGhvZHMuZm9yRWFjaChmdW5jdGlvbiAobG9nTWV0aG9kKSB7XG4gICAgICAgIGlmICghbG9nZ2VyW2xvZ01ldGhvZF0pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTG9nZ2luZyBtZXRob2QgJyArIGxvZ01ldGhvZCArICcgcmVxdWlyZWQnKTtcbiAgICAgICAgfVxuICAgICAgICBfbG9nZ2VyW2xvZ01ldGhvZF0gPSBoaXRjaChsb2dnZXIsIGxvZ2dlcltsb2dNZXRob2RdLCBjYWxsSWQsIGxvZ0NhdGVnb3J5KTtcbiAgICB9KTtcbiAgICByZXR1cm4gX2xvZ2dlcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNsb3NlU3RyZWFtKHN0cmVhbSkge1xuICAgIGlmIChzdHJlYW0pIHtcbiAgICAgICAgdmFyIHRyYWNrcyA9IHN0cmVhbS5nZXRUcmFja3MoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0cmFja3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciB0cmFjayA9IHRyYWNrc1tpXTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdHJhY2suc3RvcCgpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIC8vIGVhdCBleGNlcHRpb25cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyoqXG4gKiBBIHBhcmFtZXRlciBvZiB0cmFuc2Zvcm1TZHAuXG4gKiBUaGlzIGRlZmluZXMgYWxsIHRoZSBTRFAgb3B0aW9ucyBjb25uZWN0LXJ0Yy1qcyBzdXBwb3J0cy5cbiAqL1xuZXhwb3J0IGNsYXNzIFNkcE9wdGlvbnMge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLl9mb3JjZUNvZGVjID0ge307XG4gICAgfVxuXG4gICAgZ2V0IGVuYWJsZU9wdXNEdHgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lbmFibGVPcHVzRHR4O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEJ5IGRlZmF1bHQgdHJhbnNmb3JtU2RwIGRpc2FibGVzIGR0eCBmb3IgT1BVUyBjb2RlYy5cbiAgICAgKiBTZXR0aW5nIHRoaXMgdG8gdHJ1ZSB3b3VsZCBmb3JjZSBpdCB0byB0dXJuIG9uIERUWC5cbiAgICAgKi9cbiAgICBzZXQgZW5hYmxlT3B1c0R0eChmbGFnKSB7XG4gICAgICAgIHRoaXMuX2VuYWJsZU9wdXNEdHggPSBmbGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgbWFwIGZyb20gbWVkaWEgdHlwZSAoYXVkaW8vdmlkZW8pIHRvIGNvZGVjIChjYXNlIGluc2Vuc2l0aXZlKS5cbiAgICAgKiBBZGQgZW50cnkgZm9yIGZvcmNlIGNvbm5lY3QtcnRjLWpzIHRvIHVzZSBzcGVjaWZpZWQgY29kZWMgZm9yIGNlcnRhaW4gbWVkaWEgdHlwZS5cbiAgICAgKiBGb3IgZXhhbXBsZTogc2RwT3B0aW9ucy5mb3JjZUNvZGVjWydhdWRpbyddID0gJ29wdXMnO1xuICAgICAqL1xuICAgIGdldCBmb3JjZUNvZGVjKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZm9yY2VDb2RlYztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUZXN0IGlmIGdpdmVuIGNvZGVjIHNob3VsZCBiZSByZW1vdmVkIGZyb20gU0RQLlxuICAgICAqIEBwYXJhbSBtZWRpYVR5cGUgYXVkaW98dmlkZW9cbiAgICAgKiBAcGFyYW0gY29kZWNOYW1lIGNhc2UgaW5zZW5zaXRpdmVcbiAgICAgKiBAcmV0dXJuIFRSVUUgLSBzaG91bGQgcmVtb3ZlXG4gICAgICovXG4gICAgX3Nob3VsZERlbGV0ZUNvZGVjKG1lZGlhVHlwZSwgY29kZWNOYW1lKSB7XG4gICAgICAgIHZhciB1cHBlckNhc2VDb2RlY05hbWUgPSBjb2RlY05hbWUudG9VcHBlckNhc2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZvcmNlQ29kZWNbbWVkaWFUeXBlXSAmJiB1cHBlckNhc2VDb2RlY05hbWUgIT09IHRoaXMuX2ZvcmNlQ29kZWNbbWVkaWFUeXBlXS50b1VwcGVyQ2FzZSgpICYmIHVwcGVyQ2FzZUNvZGVjTmFtZSAhPT0gJ1RFTEVQSE9ORS1FVkVOVCc7XG4gICAgfVxufVxuXG4vKipcbiAqIE1vZGlmaWVzIGlucHV0IFNEUCBhY2NvcmRpbmcgdG8gc2RwT3B0aW9ucy5cbiAqIFNlZSBTZHBPcHRpb25zIGZvciBhdmFpbGFibGUgb3B0aW9ucy5cbiAqIEBwYXJhbSBzZHAgb3JpZ2luYWwgU0RQXG4gKiBAcGFyYW0gc2RwT3B0aW9ucyBkZWZpbmVzIGNoYW5nZXMgdG8gYmUgYXBwbGllZCB0byBTRFBcbiAqIEByZXR1cm5zIGEgbWFwIHdpdGggJ3NkcCcgY29udGFpbmluZyB0aGUgdHJhbnNmb3JtZWQgU0RQIGFuZCAnbUxpbmVzJyBjb250YWluaW5nIHRoZSBudW1iZXIgb2YgbSBsaW5lcyBpbiBTRFBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybVNkcChzZHAsIHNkcE9wdGlvbnMpIHtcbiAgICB2YXIgc2VjdGlvbnMgPSBzcGxpdFNlY3Rpb25zKHNkcCk7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBzZWN0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgbWVkaWFUeXBlID0gZ2V0S2luZChzZWN0aW9uc1tpXSk7XG4gICAgICAgIHZhciBydHBQYXJhbXMgPSBwYXJzZVJ0cFBhcmFtZXRlcnMoc2VjdGlvbnNbaV0pO1xuICAgICAgICAvLyBhIG1hcCBmcm9tIHBheWxvYWQgdHlwZSAoc3RyaW5nKSB0byBjb2RlYyBvYmplY3RcbiAgICAgICAgdmFyIGNvZGVjTWFwID0gcnRwUGFyYW1zLmNvZGVjcy5yZWR1Y2UoKG1hcCwgY29kZWMpID0+IHtcbiAgICAgICAgICAgIG1hcFsnJyArIGNvZGVjLnBheWxvYWRUeXBlXSA9IGNvZGVjO1xuICAgICAgICAgICAgcmV0dXJuIG1hcDtcbiAgICAgICAgfSwge30pO1xuICAgICAgICBzZWN0aW9uc1tpXSA9IHNwbGl0TGluZXMoc2VjdGlvbnNbaV0pLm1hcChsaW5lID0+IHtcbiAgICAgICAgICAgIGlmIChsaW5lLnN0YXJ0c1dpdGgoJ209JykpIHtcbiAgICAgICAgICAgICAgICAvLyBtb2RpZnkgbT0gbGluZSBpZiBTZHBPcHRpb25zI2ZvcmNlQ29kZWMgc3BlY2lmaWVzIGNvZGVjIGZvciBjdXJyZW50IG1lZGlhIHR5cGVcbiAgICAgICAgICAgICAgICBpZiAoc2RwT3B0aW9ucy5mb3JjZUNvZGVjW21lZGlhVHlwZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldENvZGVjUHRzID0gT2JqZWN0LmtleXMoY29kZWNNYXApLmZpbHRlcihwdCA9PiAhc2RwT3B0aW9ucy5fc2hvdWxkRGVsZXRlQ29kZWMobWVkaWFUeXBlLCBjb2RlY01hcFtwdF0ubmFtZSkpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gLy4qUlRQXFwvUz9BVlBGPyAvLmV4ZWMobGluZSkgKyB0YXJnZXRDb2RlY1B0cy5qb2luKCcgJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxpbmU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChsaW5lLnN0YXJ0c1dpdGgoJ2E9cnRwbWFwOicpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJ0cE1hcCA9IHBhcnNlUnRwTWFwKGxpbmUpO1xuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50Q29kZWMgPSBjb2RlY01hcFtydHBNYXAucGF5bG9hZFR5cGVdO1xuXG4gICAgICAgICAgICAgICAgLy8gcmVtb3ZlIHRoaXMgY29kZWMgaWYgU2RwT3B0aW9ucyNmb3JjZUNvZGVjIHNwZWNpZmllcyBhIGRpZmZlcmVudCBjb2RlYyBmb3IgY3VycmVudCBtZWRpYSB0eXBlXG4gICAgICAgICAgICAgICAgaWYgKGlzX2RlZmluZWQoY3VycmVudENvZGVjKSAmJiBzZHBPcHRpb25zLl9zaG91bGREZWxldGVDb2RlYyhtZWRpYVR5cGUsIGN1cnJlbnRDb2RlYy5uYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBhcHBlbmQgYT1mbXRwIGxpbmUgaW1tZWRpYXRlbHkgaWYgY3VycmVudCBjb2RlYyBpcyBPUFVTICh0byBleHBsaWNpdGx5IHNwZWNpZnkgT1BVUyBwYXJhbWV0ZXJzKVxuICAgICAgICAgICAgICAgIGlmIChpc19kZWZpbmVkKGN1cnJlbnRDb2RlYykgJiYgY3VycmVudENvZGVjLm5hbWUudG9VcHBlckNhc2UoKSA9PT0gJ09QVVMnKSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRDb2RlYy5wYXJhbWV0ZXJzLnVzZWR0eCA9IHNkcE9wdGlvbnMuZW5hYmxlT3B1c0R0eCA/IFwiMVwiIDogXCIwXCI7XG4gICAgICAgICAgICAgICAgICAgIC8vIGdlbmVyYXRlIGZtdHAgbGluZSBpbW1lZGlhdGVseSBhZnRlciBydHBtYXAgbGluZSwgYW5kIHJlbW92ZSBvcmlnaW5hbCBmbXRwIGxpbmUgb25jZSB3ZSBzZWUgaXRcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChsaW5lICsgXCJcXHJcXG5cIiArIHdyaXRlRm10cChjdXJyZW50Q29kZWMpKS50cmltKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxpbmU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChsaW5lLnN0YXJ0c1dpdGgoJ2E9Zm10cDonKSkge1xuICAgICAgICAgICAgICAgIHZhciBwdCA9IGxpbmUuc3Vic3RyaW5nKCdhPWZtdHA6Jy5sZW5ndGgsIGxpbmUuaW5kZXhPZignICcpKTtcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudENvZGVjID0gY29kZWNNYXBbcHRdOy8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcmVkZWNsYXJlXG5cbiAgICAgICAgICAgICAgICAvLyByZW1vdmUgdGhpcyBjb2RlYyBpZiBTZHBPcHRpb25zI2ZvcmNlQ29kZWMgc3BlY2lmaWVzIGEgZGlmZmVyZW50IGNvZGVjIGZvciBjdXJyZW50IG1lZGlhIHR5cGVcbiAgICAgICAgICAgICAgICBpZiAoaXNfZGVmaW5lZChjdXJyZW50Q29kZWMpICYmIHNkcE9wdGlvbnMuX3Nob3VsZERlbGV0ZUNvZGVjKG1lZGlhVHlwZSwgY3VycmVudENvZGVjLm5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChpc19kZWZpbmVkKGN1cnJlbnRDb2RlYykgJiYgY3VycmVudENvZGVjLm5hbWUudG9VcHBlckNhc2UoKSA9PT0gJ09QVVMnKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMgaXMgYSBsaW5lIGZvciBPUFVTLCByZW1vdmUgaXQgYmVjYXVzZSBGTVRQIGxpbmUgaXMgYWxyZWFkeSBnZW5lcmF0ZWQgd2hlbiBydHBtYXAgbGluZSBpcyBwcm9jZXNzZWRcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxpbmU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChsaW5lLnN0YXJ0c1dpdGgoJ2E9cnRjcC1mYjonKSkge1xuICAgICAgICAgICAgICAgIHZhciBwdCA9IGxpbmUuc3Vic3RyaW5nKGxpbmUuaW5kZXhPZignOicpICsgMSwgbGluZS5pbmRleE9mKCcgJykpOy8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcmVkZWNsYXJlXG4gICAgICAgICAgICAgICAgaWYgKHB0ID09PSAnKicpIHsgLy9hbHdheXMgYWxsb3cgd2lsZGNhcmQgaW4gcnRjLWZiXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBsaW5lO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW50Q29kZWMgPSBjb2RlY01hcFtwdF07Ly8gZXNsaW50LWRpc2FibGUtbGluZSBuby1yZWRlY2xhcmVcblxuICAgICAgICAgICAgICAgICAgICAvLyByZW1vdmUgdGhpcyBjb2RlYyBpZiBTZHBPcHRpb25zI2ZvcmNlQ29kZWMgc3BlY2lmaWVzIGEgZGlmZmVyZW50IGNvZGVjIGZvciBjdXJyZW50IG1lZGlhIHR5cGVcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzX2RlZmluZWQoY3VycmVudENvZGVjKSAmJiBzZHBPcHRpb25zLl9zaG91bGREZWxldGVDb2RlYyhtZWRpYVR5cGUsIGN1cnJlbnRDb2RlYy5uYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbGluZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxpbmU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLmZpbHRlcihsaW5lID0+IGxpbmUgIT09IG51bGwpLmpvaW4oJ1xcclxcbicpO1xuXG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHNkcDogc2VjdGlvbnMubWFwKHNlY3Rpb24gPT4gc2VjdGlvbi50cmltKCkpLmpvaW4oJ1xcclxcbicpICsgJ1xcclxcbicsXG4gICAgICAgIG1MaW5lczogc2VjdGlvbnMubGVuZ3RoIC0gMSAvLyBmaXJzdCBzZWN0aW9uIGlzIHNlc3Npb24gZGVzY3JpcHRpb24sIHRoZSByZXN0IGFyZSBtZWRpYSBkZXNjcmlwdGlvbnNcbiAgICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNfZGVmaW5lZCh2KSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2ICE9PSAndW5kZWZpbmVkJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5fZGVmaW5lZCh2LCBhbHRlcm5hdGl2ZUluKSB7XG4gICAgdmFyIGFsdGVybmF0aXZlID0gaXNfZGVmaW5lZChhbHRlcm5hdGl2ZUluKSA/IGFsdGVybmF0aXZlSW4gOiBudWxsO1xuICAgIHJldHVybiBpc19kZWZpbmVkKHYpID8gdiA6IGFsdGVybmF0aXZlO1xufVxuXG4vKipcbiAqIENoZWNrIGlmIHRoZSBnZXRTdGF0cyBBUEkgZm9yIHJldHJpZXZpbmcgbGVnYWN5IHN0YXRzIHJlcG9ydCBpcyBzdXBwb3J0ZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzTGVnYWN5U3RhdHNSZXBvcnRTdXBwb3J0ZWQocGMpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSkge1xuICAgICAgICBwYy5nZXRTdGF0cyhmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJlc29sdmUodHJ1ZSk7XG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgLy8gRXhjZXB0aW9uIHRocm93biBpZiBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgbGVnYWN5IHN0YXRzIHJlcG9ydFxuICAgICAgICAgICAgcmVzb2x2ZShmYWxzZSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYSBjYWxsYWJsZSBmdW5jdGlvbiB0eXBlLlxuICogQm9ycm93ZWQgZnJvbSBVbmRlcnNjb3JlLmpzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNGdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gISEob2JqICYmIG9iai5jb25zdHJ1Y3RvciAmJiBvYmouY2FsbCAmJiBvYmouYXBwbHkpO1xufVxuXG4vKipcbiAqIEFzc2VydHMgdGhhdCBhIHByZW1pc2UgaXMgdHJ1ZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydFRydWUocHJlbWlzZSwgbWVzc2FnZSkge1xuICAgIGlmICghcHJlbWlzZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNDaHJvbWVCcm93c2VyKCl7XG4gICAgcmV0dXJuIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZihcIkNocm9tZVwiKSAhPT0gLTE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDaHJvbWVCcm93c2VyVmVyc2lvbigpe1xuICAgIHZhciB1c2VyQWdlbnQgPSBuYXZpZ2F0b3IudXNlckFnZW50O1xuICAgIHZhciBjaHJvbWVWZXJzaW9uID0gdXNlckFnZW50LnN1YnN0cmluZyh1c2VyQWdlbnQuaW5kZXhPZihcIkNocm9tZVwiKSs3KTtcbiAgICBpZiAoY2hyb21lVmVyc2lvbikge1xuICAgICAgICByZXR1cm4gcGFyc2VGbG9hdChjaHJvbWVWZXJzaW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UmVkYWN0ZWRTZHAoc2RwKSB7XG4gICAgLy8gcGF0dGVybiB0byBmaW5kIGFuZCByZWRhY3QgdGhlIHZhbHVlIGFmdGVyICdhPWljZS1wd2Q6J1xuICAgIHZhciBwYXR0ZXJuID0gL2E9aWNlLXB3ZDpbXlxcclxcbl0qLztcblxuICAgIC8vIFVzZSB0aGUgcmVwbGFjZSBtZXRob2QgdG8gcmVkYWN0IHRoZSB2YWx1ZSB3aXRoICdbcmVkYWN0ZWRdJ1xuICAgIHJldHVybiBzZHAucmVwbGFjZShwYXR0ZXJuLCAnYT1pY2UtcHdkOltyZWRhY3RlZF0nKTtcbn1cbiIsImltcG9ydCB7aGl0Y2h9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHtTT0ZUUEhPTkVfUk9VVEVfS0VZfSBmcm9tICcuL3J0Y19jb25zdCdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVmlydHVhbFdzc0Nvbm5lY3Rpb25NYW5hZ2VyIHtcbiAgICBjb25zdHJ1Y3Rvcihsb2dnZXIsIGNvbm5lY3Rpb25JZCwgd3NzTWFuYWdlcikge1xuICAgICAgICB0aGlzLl9sb2dnZXIgPSBsb2dnZXI7XG4gICAgICAgIHRoaXMuX2Nvbm5lY3Rpb25JZCA9IGNvbm5lY3Rpb25JZDtcbiAgICAgICAgdGhpcy5fd3NzTWFuYWdlciA9IHdzc01hbmFnZXJcbiAgICAgICAgdGhpcy5faW5pdGlhbGl6ZVdlYlNvY2tldEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgfVxuXG4gICAgX2luaXRpYWxpemVXZWJTb2NrZXRFdmVudExpc3RlbmVycygpIHtcbiAgICAgICAgdGhpcy5fd3NzTWFuYWdlci5zdWJzY3JpYmVUb3BpY3MoW1NPRlRQSE9ORV9ST1VURV9LRVldKTtcbiAgICAgICAgdGhpcy5fdW5TdWJzY3JpYmUgPSB0aGlzLl93c3NNYW5hZ2VyLm9uTWVzc2FnZShTT0ZUUEhPTkVfUk9VVEVfS0VZLCBoaXRjaCh0aGlzLCB0aGlzLl93ZWJTb2NrZXRNYW5hZ2VyT25NZXNzYWdlKSk7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fb25PcGVuKCk7XG4gICAgICAgIH0sIDApO1xuICAgIH1cblxuICAgIF93ZWJTb2NrZXRNYW5hZ2VyT25NZXNzYWdlKGV2ZW50KSB7XG4gICAgICAgIGxldCBjb250ZW50O1xuICAgICAgICBpZiAoZXZlbnQuY29udGVudCkge1xuICAgICAgICAgICAgY29udGVudCA9IEpTT04ucGFyc2UoZXZlbnQuY29udGVudCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX29uTWVzc2FnZSAmJiBjb250ZW50ICYmIHRoaXMuX2Nvbm5lY3Rpb25JZCA9PT0gY29udGVudC5jb25uZWN0aW9uSWQpIHtcbiAgICAgICAgICAgIHRoaXMuX29uTWVzc2FnZSh7ZGF0YTogSlNPTi5zdHJpbmdpZnkoY29udGVudC5qc29uUnBjTXNnKX0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0IG9ubWVzc2FnZShjYWxsQmFjaykge1xuICAgICAgICB0aGlzLl9vbk1lc3NhZ2UgPSBjYWxsQmFjaztcbiAgICB9XG5cbiAgICBzZXQgb25vcGVuKGNhbGxCYWNrKSB7XG4gICAgICAgIHRoaXMuX29uT3BlbiA9IGNhbGxCYWNrO1xuICAgIH1cblxuICAgIHNlbmQod2ViU29ja2V0UGF5bG9hZCkge1xuICAgICAgICBjb25zdCBwYXlsb2FkID0ge307XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBwYXlsb2FkLnRvcGljID0gU09GVFBIT05FX1JPVVRFX0tFWTtcbiAgICAgICAgICAgIHBheWxvYWQuY29ubmVjdGlvbklkID0gdGhpcy5fY29ubmVjdGlvbklkO1xuICAgICAgICAgICAgcGF5bG9hZC5qc29uUnBjTXNnID0gSlNPTi5wYXJzZSh3ZWJTb2NrZXRQYXlsb2FkKTtcbiAgICAgICAgICAgIHRoaXMuX3dzc01hbmFnZXIuc2VuZE1lc3NhZ2UocGF5bG9hZCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB0aGlzLl9sb2dnZXIuZXJyb3IoXCJFcnJvciBpbiBzZW5kTWVzc2FnZSBcIiwgZXJyb3IpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY2xvc2UoKSB7XG4gICAgICAgIHRoaXMuX2xvZ2dlci5pbmZvKFwiY2xvc2luZyB2aXJ0dWFsIGNvbm5lY3Rpb25cIik7XG4gICAgICAgIHRoaXMuX3VuU3Vic2NyaWJlKCk7XG4gICAgfVxufSJdfQ==
